     1                                  ;*****************************************************************************
     2                                  ; MSDOS6.BIN (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 27/06/2024 - Retro DOS v4.2 ((Previous: 12/04/2024))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos6.s -l msdos6.lst -o MSDOS6.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 30/12/2022 - Retro DOS v4.2 Kernel ('msdos6.s')
    27                                  ; Modified from 'msdos5.s' (29/12/2022, Retro DOS v4.1 Kernel) file
    28                                  ; as below:
    29                                  ;	1) MS-DOS version has been changed to 6.22 (It was 5.0) 
    30                                  ;	2) Retro DOS version has been changed to 4.2 (It was 4.1)
    31                                  ; (The content has not been changed except kernel version because the kernel
    32                                  ;  code is already compatible with MSDOS 6.x and it is optimized before.)
    33                                  ;	(But IO.SYS part of the kernel is not same with Retro DOS v4.1 code.)	
    34                                  
    35                                  ; ----------------------------------------------------------------------------
    36                                  
    37                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    38                                  
    39                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    40                                  ;	(as included binary, 'MSDOS5.BIN') 
    41                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    42                                  ;	
    43                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    44                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    45                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    46                                        
    47                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    48                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    49                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    50                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    51                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    52                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    53                                  
    54                                  ;=============================================================================
    55                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    56                                  ;-----------------------------------------------------------------------------
    57                                  
    58                                  ; MSDOS 6.0 Kernel source files:
    59                                  ;	MSDATA.ASM, 
    60                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    61                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    62                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    63                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    64                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    65                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    66                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    67                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    68                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    69                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    70                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    71                                  ;
    72                                  ; MSDOS 2.0 Kernel source files:
    73                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    74                                  ;	MSCODE.ASM
    75                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    76                                  
    77                                  ;============================================================================
    78                                  ; DOSLINK
    79                                  ;============================================================================
    80                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    81                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    82                                  ;stdio time xenix xenix2
    83                                  
    84                                  ;============================================================================
    85                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    86                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    87                                  ;============================================================================
    88                                  ;
    89                                  ; ###########################################################################
    90                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    91                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    92                                  ; #			 Licensed to: Freeware version			    #
    93                                  ; ###########################################################################
    94                                  ;
    95                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    96                                  
    97                                  ; ---------------------------------------------------------------------------
    98                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    99                                  ; Format      :	Binary file
   100                                  ;============================================================================
   101                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
   102                                  ;----------------------------------------------------------------------------
   103                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
   104                                  
   105                                  ;============================================================================
   106                                  ; MSDOS.ASM
   107                                  ;============================================================================
   108                                  
   109                                  ;TITLE   Standard MSDOS
   110                                  ;NAME    MSDOS_2
   111                                  
   112                                  ; Number of disk I/O buffers
   113                                  
   114                                  ;	INCLUDE STDSW.ASM
   115                                  ;       INCLUDE MSHEAD.ASM
   116                                  ;       INCLUDE MSDATA.ASM
   117                                  
   118                                  ;	END
   119                                  
   120                                  ;============================================================================
   121                                  ; STDSW.ASM
   122                                  ;============================================================================
   123                                  
   124                                  TRUE    EQU     0FFFFH
   125                                  FALSE   EQU     ~TRUE ; NOT TRUE
   126                                  
   127                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   128                                  ; version of the operating system
   129                                  ;MSVER   EQU	false
   130                                  ;IBM     EQU	true
   131                                  ;WANG    EQU	FALSE
   132                                  ;ALTVECT EQU	FALSE
   133                                  
   134                                  ; Set this switch to cause DOS to move itself to the end of memory
   135                                  ;HIGHMEM EQU     FALSE
   136                                  
   137                                  ;	IF      IBM
   138                                  ESCCH    EQU	 0			;character to begin escape seq.
   139                                  CANCEL   EQU	 27			;Cancel with escape
   140                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   141                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   142                                  ZEROEXT  EQU	TRUE
   143                                  ;       ELSE
   144                                  ;       IF      WANG			;Are we assembling for WANG?
   145                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   146                                  ;       ELSE
   147                                  ;ESCCH	 EQU	1BH
   148                                  ;       ENDIF
   149                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   150                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   151                                  					;and off if not WANG
   152                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   153                                  					;and off
   154                                  ;ZEROEXT EQU	TRUE
   155                                  ;        ENDIF
   156                                  
   157                                  ;============================================================================
   158                                  ; MSHEAD.ASM
   159                                  ;============================================================================
   160                                  
   161                                  ;--------------------------------------------------------------
   162                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   163                                  ;--------------------------------------------------------------
   164                                  
   165                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   166                                  ;        by Microsoft MSDOS development group:
   167                                  ;           Tim Paterson (Ret.)
   168                                  ;           Aaron Reynolds
   169                                  ;           Nancy Panners (Parenting)
   170                                  ;           Mark Zbikowski
   171                                  ;           Chris Peters (BIOS) (ret.)
   172                                  
   173                                  ; ****************** Revision History *************************
   174                                  ;          >> EVERY change must noted below!! <<
   175                                  ;
   176                                  ; 0.34 12/29/80 General release, updating all past customers
   177                                  ; 0.42 02/25/81 32-byte directory entries added
   178                                  ; 0.56 03/23/81 Variable record and sector sizes
   179                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   180                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   181                                  ; 0.75 04/17/81 Improve and correct buffer handling
   182                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   183                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   184                                  ; 1.00 04/28/81 Renumber for general release
   185                                  ; 1.01 05/12/81 Fix bug in `STORE'
   186                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   187                                  ;               RENAME fix, general cleanup
   188                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   189                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   190                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   191                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   192                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   193                                  ;               of smaller improvements
   194                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   195                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   196                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   197                                  ;               zero extent field in IBM version (back to 1.01!)
   198                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   199                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   200                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   201                                  ;               is searched first when possible to minimize I/O
   202                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   203                                  ;               full sector write when file is growing
   204                                  ;      03/09/82 Multiple I/O buffers
   205                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   206                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   207                                  ;               must invalidate all buffers (disk and directory).
   208                                  ; 1.27 03/31/82 Installable device drivers
   209                                  ;                 Function call 47 - Get pointer to device table list
   210                                  ;                 Function call 48 - Assign CON AUX LIST
   211                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   212                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   213                                  ;               call entries.  Most CS relative references changed to SS
   214                                  ;               relative with an eye toward putting a portion of the DOS in
   215                                  ;               ROM.  DOS source also broken into header, data and code pieces
   216                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   217                                  ;               return the current values.
   218                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   219                                  ;               call to return flag location (call 29)
   220                                  ;      04/15/82 Volume ID attribute added
   221                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   222                                  ;               avoid a CS relative reference.
   223                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   224                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   225                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   226                                  ;               call 49.
   227                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   228                                  ;               address of DPB
   229                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   230                                  ;               writting to console device via file I/O.  Added a console
   231                                  ;               output attribute to devices.
   232                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   233                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   234                                  ;               as devices....  pipes, redirection now possible
   235                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   236                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   237                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   238                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   239                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   240                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   241                                  ;               out back about 1.27 or so (oops).  ARR
   242                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   243                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   244                                  ;               RMDIR Xenix calls
   245                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   246                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   247                                  ;               Frees up lots of memory.
   248                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   249                                  ;               system buffers
   250                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   251                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   252                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   253                                  ;               changed to set file handle environment.
   254                                  ; 2.00 08/01/82 Number for IBM release
   255                                  ;      01/19/83 No environ bug in EXEC
   256                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   257                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   258                                  ;      01/27/83 Growcnt fixed for 32-bits
   259                                  ;      01/27/83 Find-first problem after create
   260                                  ; 2.01 02/17/83 International DOS
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   264                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   265                                  ; 2.10 03/09/83 Start of NETWORK support
   266                                  ;		New Buffer structure
   267                                  ;		New Sytem file table structure
   268                                  ;		FCB moved to internal representation
   269                                  ;		DOS re-organized
   270                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   271                                  ;		device interface.
   272                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   273                                  ;               an IBM PC
   274                                  ; 2.50 09/12/83 More network stuff
   275                                  ;
   276                                  ; *************************************************************
   277                                  
   278                                  ; ----------------------------------------------------------------------------
   279                                  ; EQUATES
   280                                  
   281                                  ; Interrupt Entry Points:
   282                                  
   283                                  ; INTBASE:      ABORT
   284                                  ; INTBASE+4:    COMMAND
   285                                  ; INTBASE+8:    BASE EXIT ADDRESS
   286                                  ; INTBASE+C:    CONTROL-C ABORT
   287                                  ; INTBASE+10H:  FATAL ERROR ABORT
   288                                  ; INTBASE+14H:  BIOS DISK READ
   289                                  ; INTBASE+18H:  BIOS DISK WRITE
   290                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   291                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   292                                  ; INTBASE+40H:  Long jump to CALL entry point
   293                                  
   294                                  ENTRYPOINTSEG   EQU     0Ch
   295                                  MAXDIF          EQU     0FFFh
   296                                  SAVEXIT         EQU     10
   297                                  ; 06/05/2019
   298                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   299                                  
   300                                         ; INCLUDE DOSSYM.ASM
   301                                         ; INCLUDE DEVSYM.ASM
   302                                  
   303                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   304                                  ; PAGE
   305                                  ; There are three kinds of context resets that can occur during normal DOS
   306                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   307                                  ; be handles in a clean fashion that allows nested executions along with the
   308                                  ; ability to trap one's own errors.
   309                                  ;
   310                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   311                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   312                                  ;           follows:
   313                                  ;
   314                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   315                                  ;           Save it in static memory.
   316                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   317                                  ;
   318                                  ;           The interrupt service routine must preserve all registers and
   319                                  ;           return carry set iff the operation is to be aborted (via abort
   320                                  ;           system call), otherwise, carry is reset and the operation is
   321                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   322                                  ;           RESULTS.
   323                                  ;
   324                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   325                                  ;           restore INT int_ctrl_c from the saved vector.
   326                                  ;
   327                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   328                                  ;           also preserve registers and return one of three values in AL: 0 and
   329                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   330                                  ;           himself is not to issue the abort, rather, the dos will do it for
   331                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   332                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   333                                  ;
   334                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   335                                  ;           abort call.  This is reserved for knowledgeable system programs.
   336                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   337                                  
   338                                  ;SUBTTL SEGMENT DECLARATIONS
   339                                  
   340                                  ; The following are all of the segments used.  They are declared in the order
   341                                  ; that they should be placed in the executable
   342                                  
   343                                  ;
   344                                  ; segment ordering for MSDOS
   345                                  ;
   346                                  
   347                                  ;START           SEGMENT BYTE PUBLIC 'START'
   348                                  ;START           ENDS
   349                                  
   350                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   351                                  ;CONSTANTS       ENDS
   352                                  
   353                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   354                                  ;DATA            ENDS
   355                                  
   356                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   357                                  ;CODE            ENDS
   358                                  
   359                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   360                                  ;LAST            ENDS
   361                                  
   362                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   363                                  
   364                                  ; The following segment is defined such that the data/const classes appear
   365                                  ; before the code class for ROMification
   366                                  
   367                                  ;START		SEGMENT BYTE PUBLIC 'START'
   368                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   369                                  ;		JMP     DOSINIT
   370                                  ;START		ENDS
   371                                  
   372                                  ;============================================================================
   373                                  ; BPB.INC, MSDOS 6.0, 1991
   374                                  ;============================================================================
   375                                  ; 09/07/2018 - Retro DOS v3.0
   376                                  
   377                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   378                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   379                                  ;									   ;
   380                                  
   381                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   382                                  ;
   383                                  ;	The BPB contains information about the disk structure. It dates
   384                                  ;	back to the earliest FAT systems and so FAT information is
   385                                  ;	intermingled with physical driver information.
   386                                  ;
   387                                  ;	A boot sector contains a BPB for its device; for other disks
   388                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   389                                  ;	information in the DPB.
   390                                  ;
   391                                  ;	The BDS structure contains a BPB within it. 
   392                                  
   393                                  struc A_BPB
   394 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   395 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   396 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   397 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   398 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   399 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   400 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   401 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   402 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   403 0000000F ????                    .BPB_HEADS:		resw	1
   404 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   405 00000013 ????                    			resw	1
   406 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   407 00000017 ????                    			resw	1
   408 00000019 ????????????            			resb	6	; NOTE:  many times these
   409                                  ;					; 	 6 bytes are omitted
   410                                  ;					;	 when BPB manipulations
   411                                  ;					;	 are performed!
   412                                  .size:
   413                                  endstruc
   414                                  
   415                                  ;                                                                          ;
   416                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   417                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   418                                  
   419                                  ;============================================================================
   420                                  ; BUFFER.INC, MSDOS 6.0, 1991
   421                                  ;============================================================================
   422                                  ; 04/05/2019 - Retro DOS v4.0
   423                                  
   424                                  ; <Disk I/O Buffer Header>
   425                                  
   426                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   427                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   428                                  ;									   ;
   429                                  
   430                                  ; Field definition for I/O buffer information
   431                                  
   432                                  struc BUFFINFO
   433 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   434 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   435 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   436                                  				; SFT table index (bit 7 = 1)
   437                                  				; = FFH if buffer free
   438 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   439                                  				;	= 0 if Local device buffer
   440                                  				; Bit 6 = 1 if buffer dirty
   441                                  				; Bit 5 = Reserved
   442                                  				; Bit 4 = Search bit (bit 7 = 1)
   443                                  				; Bit 3 = 1 if buffer is DATA
   444                                  				; Bit 2 = 1 if buffer is DIR
   445                                  				; Bit 1 = 1 if buffer is FAT
   446                                  				; Bit 0 = Reserved
   447 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   448                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   449 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   450 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   451 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   452 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   453 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   454                                  .size:	; 20 bytes
   455                                  endstruc
   456                                  
   457                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   458                                  				;For buf_flags bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID. Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ;============================================================================
   489                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   490                                  ;============================================================================
   491                                  ; 04/05/2019 - Retro DOS v4.0
   492                                  
   493                                  ; <Control character definitions>
   494                                  
   495                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   496                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   497                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   498                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   499                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   500                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   501                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   502                                  c_HT	    EQU     09h 	; ^I ASCII tab
   503                                  
   504                                  ; <User stack inside of system call>
   505                                  ; Location of user registers relative user stack pointer
   506                                  
   507                                  struc	user_env   ; user_environ
   508 00000000 ????                    .user_AX: resw 1
   509 00000002 ????                    .user_BX: resw 1
   510 00000004 ????                    .user_CX: resw 1
   511 00000006 ????                    .user_DX: resw 1
   512 00000008 ????                    .user_SI: resw 1
   513 0000000A ????                    .user_DI: resw 1
   514 0000000C ????                    .user_BP: resw 1
   515 0000000E ????                    .user_DS: resw 1
   516 00000010 ????                    .user_ES: resw 1
   517 00000012 ????                    .user_IP: resw 1
   518 00000014 ????                    .user_CS: resw 1
   519 00000016 ????                    .user_F:  resw 1
   520                                  .size:
   521                                  endstruc
   522                                  
   523                                  ; ---- <Disk map> ----
   524                                  
   525                                  ;	MSDOS partitions the disk into 4 sections:
   526                                  ;
   527                                  ;  phys sector 0:   +-------------------+
   528                                  ;	|	    | boot/reserved	|
   529                                  ;	|	    +-------------------+
   530                                  ;	|	    |  File allocation	|
   531                                  ;	v	    |	   table(s)	|
   532                                  ;		    |  (multiple copies |
   533                                  ;		    |	  are kept)	|
   534                                  ;		    +-------------------+
   535                                  ;		    |	  Directory	|
   536                                  ;		    +-------------------+
   537                                  ;		    |	  File space	|
   538                                  ;		    +-------------------+
   539                                  ;		    |	Unaddressable	|
   540                                  ;		    |  (to end of disk) |
   541                                  ;		    +-------------------+
   542                                  ;
   543                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   544                                  ; adjusted to maximize the file space addressable.
   545                                  
   546                                  ; <File allocation Table information>
   547                                  
   548                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   549                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   550                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   551                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   552                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   553                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   554                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   555                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   556                                  ; The first available allocation unit is assigned entry number two, and even
   557                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   558                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   559                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   560                                  ; the next cluster in the file.
   561                                  ;
   562                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   563                                  ; do because these clusters show as allocated, but are not part of any
   564                                  ; allocation chain and thus will never be allocated to a file.	A particular
   565                                  ; number is selected so that disk checking programs know what to do (ie.  a
   566                                  ; cluster with entry FF7H which is not in a chain is not an error).
   567                                  
   568                                  ;**	Character Type Flags
   569                                  ;
   570                                  ;	These flags are used in a lookup table indexed by the character code.
   571                                  ;	They're used to quickly classify characters when parsing paths.
   572                                  ;	I think that these are only used to parse FCBs - jgl
   573                                  
   574                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   575                                  FDELIM	equ 2		; is a delimiter
   576                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   577                                  FFCB	equ 8		; is valid in an FCB
   578                                  
   579                                  ;** Bit definitions for DOS_FLAG
   580                                  ;
   581                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   582                                  ;	  $open to indicate to the redirector that this open is being made
   583                                  ;	  by an exec call.
   584                                  ;
   585                                  ; Bit 2
   586                                  ;
   587                                  ; M003, M027:
   588                                  ;
   589                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   590                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   591                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   592                                  ; user program in the case of an Exec call. The next call to DOS will turn
   593                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   594                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   595                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   596                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   597                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   598                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   599                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   600                                  ; Bit 2 will be unconditionally cleared here.
   601                                  ;
   602                                  ; M009, M027:
   603                                  ;
   604                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   605                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   606                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   607                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   608                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   609                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   610                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   611                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   612                                  ; Bit 2 will be unconditionally cleared here.
   613                                  
   614                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   615                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   616                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   617                                  
   618                                  ;============================================================================
   619                                  ; VECTOR.INC, MSDOS 6.0, 1991
   620                                  ;============================================================================
   621                                  ; 04/05/2019 - Retro DOS v4.0
   622                                  
   623                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   624                                  
   625                                  ; <interrupt definitions>
   626                                  
   627                                  INTTAB          EQU     20H
   628                                  INTBASE         EQU     4 * INTTAB
   629                                  ENTRYPOINT      EQU     INTBASE+40H
   630                                  
   631                                  ;	IF      ALTVECT
   632                                  ;ALTTAB  EQU     0F0H
   633                                  ;ALTBASE EQU     4 * ALTTAB
   634                                  ;	ENDIF
   635                                  
   636                                  ;
   637                                  ; interrupt assignments
   638                                  ;
   639                                  ;	IF	NOT ALTVECT
   640                                  int_abort	    EQU     INTTAB	; abort process
   641                                  int_command	    EQU     int_abort+1 ; call MSDOS
   642                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   643                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   644                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   645                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   646                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   647                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   648                                  					; resident
   649                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   650                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   651                                  ;									   ;
   652                                  int_spooler	    EQU     int_abort+8 ; spooler call
   653                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   654                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   655                                  ;									   ;
   656                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   657                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   658                                  ;	ELSE
   659                                  ;int_abort	    EQU     INTTAB	; abort process
   660                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   661                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   662                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   663                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   664                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   665                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   666                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   667                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   668                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   669                                  ;									   ;
   670                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   671                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   672                                  ;									   ;
   673                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	ENDIF
   676                                  
   677                                  addr_int_abort		EQU    4 * int_abort
   678                                  addr_int_command	EQU    4 * int_command
   679                                  addr_int_terminate	EQU    4 * int_terminate
   680                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   681                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   682                                  addr_int_disk_read	EQU    4 * int_disk_read
   683                                  addr_int_disk_write	EQU    4 * int_disk_write
   684                                  addr_int_keep_process	EQU    4 * int_keep_process
   685                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   686                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   687                                  ;									   ;
   688                                  addr_int_spooler	EQU    4 * int_spooler
   689                                  addr_int_fastcon	EQU    4 * int_fastcon
   690                                  addr_int_ibm		EQU    4 * int_IBM
   691                                  ;									   ;
   692                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   693                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   694                                  
   695                                  ;============================================================================
   696                                  ; DIRENT.INC, MSDOS 6.0, 1991
   697                                  ;============================================================================
   698                                  ; 04/05/2019 - Retro DOS v4.0
   699                                  
   700                                  ; BREAK <Directory entry>
   701                                  
   702                                  ;
   703                                  ;       +---------------------------+
   704                                  ;       |  (12 BYTE) filename/ext   |       0       0
   705                                  ;       +---------------------------+
   706                                  ;       |     (BYTE) attributes     |       11      B
   707                                  ;       +---------------------------+
   708                                  ;       |    (10 BYTE) reserved     |       12      C
   709                                  ;       +---------------------------+
   710                                  ;       | (WORD) time of last write |       22      16
   711                                  ;       +---------------------------+
   712                                  ;       | (WORD) date of last write |       24      18
   713                                  ;       +---------------------------+
   714                                  ;       |   (WORD) First cluster    |       26      1A
   715                                  ;       +---------------------------+
   716                                  ;       |     (DWORD) file size     |       28      1C
   717                                  ;       +---------------------------+
   718                                  ;
   719                                  ;   First byte of filename  = E5 -> free directory entry
   720                                  ;                           = 00 -> end of allocated directory
   721                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   722                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   723                                  ;
   724                                  struc dir_entry
   725 00000000 <res Bh>                .dir_name:	resb 11			; file name
   726 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   727 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   728 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   729 00000010 ??                      .dir_attr2:	resb 1			; reserved
   730 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   731 00000016 ????                    .dir_time:	resw 1			; time of last write
   732 00000018 ????                    .dir_date:	resw 1			; date of last write
   733 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   734 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   735 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   736                                  .size:
   737                                  endstruc
   738                                  
   739                                  attr_read_only      EQU      1h
   740                                  attr_hidden         EQU      2h
   741                                  attr_system         EQU      4h
   742                                  attr_volume_id      EQU      8h
   743                                  attr_directory      EQU     10h
   744                                  attr_archive        EQU     20h
   745                                  attr_device	    EQU     40h	; This is a VERY special bit.
   746                                  				;   NO directory entry on a disk EVER
   747                                  				;   has this bit set. It is set non-zero
   748                                  				;   when a device is found by GETPATH
   749                                  
   750                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   751                                                                          ; OR of hard attributes for FINDENTRY
   752                                  
   753                                  attr_ignore         EQU     attr_read_only+attr_archive
   754                                                                          ; ignore this(ese) attribute(s)
   755                                                                          ; during search first/next
   756                                  
   757                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   758                                                                          ; changeable via CHMOD
   759                                  
   760                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   761                                  
   762                                  ;============================================================================
   763                                  ; DPB.INC, MSDOS 6.0, 1991
   764                                  ;============================================================================
   765                                  ; 24/04/2019 - Retro DOS v4.0
   766                                  
   767                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   768                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   769                                  
   770                                  ; ---------------------------------------------------------------------------
   771                                  ;**	DPB - Drive Parameter Block
   772                                  ;
   773                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   774                                  ;	possibly inaccurate deductions from code study... - jgl
   775                                  ;
   776                                  ;	The DPB is DOS's main structure for describing block devices.
   777                                  ;	It contains info about the "Drive" intermingled with info about
   778                                  ;	the FAT file system which is presumably on the drive.  I don't know
   779                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   780                                  ;
   781                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   782                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   783                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   784                                  ; ---------------------------------------------------------------------------
   785                                  
   786                                  struc	DPB
   787 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   788 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   789 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   790 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   791 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   792 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   793 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   794 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   795 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   796 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   797                                  ; MSDOS 3.3
   798                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   799                                  ; MSDOS 6.0
   800 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   801 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   802 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   803 00000017 ??                      .MEDIA:		resb 1		; Media byte
   804 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   805                                  				; check the first time this DPB is used
   806 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   807 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   808 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   809                                  .size:
   810                                  endstruc
   811                                  
   812                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   813                                  
   814                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   815                                  
   816                                  ;                                                                          ;
   817                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   818                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   819                                  
   820                                  ;============================================================================
   821                                  ; SF.INC, MSDOS 6.0, 1991
   822                                  ;============================================================================
   823                                  ; 25/04/2019 - Retro DOS v4.0
   824                                  ; 07/07/2018 - Retro DOS v3.0
   825                                  
   826                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   827                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   828                                  ;                                                                          ;
   829                                  
   830                                  ; ---------------------------------------------------------------------------
   831                                  ;**	SF.INC - System File Table
   832                                  ;
   833                                  ;   AN000   version 4.00   Jan. 1988
   834                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   835                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   836                                  ; ---------------------------------------------------------------------------
   837                                  ;**	System File Table SuperStructure
   838                                  ;
   839                                  ;	The system file table entries are allocated in contiguous groups.
   840                                  ;	There may be more than one such groups; the SF "superstructure"
   841                                  ;	tracks the groups.
   842                                  ; ---------------------------------------------------------------------------
   843                                  
   844                                  struc	SFT
   845 00000000 ????????                .SFLink:	resd 1
   846 00000004 ????                    .SFCount:	resw 1		; number of entries
   847 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   848                                  .size:
   849                                  endstruc
   850                                  
   851                                  ; ---------------------------------------------------------------------------
   852                                  ;**	System file table entry
   853                                  ;
   854                                  ;	These are the structures which are at SFTABLE in the SF structure.
   855                                  ; ---------------------------------------------------------------------------
   856                                  
   857                                  ; 25/04/2019 - Retro DOS v4.0
   858                                  
   859                                  struc SF_ENTRY
   860 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   861                                  				;   if FCB then ref count
   862 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   863 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   864 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   865                                  				; Bit 15 = 1 if remote file
   866                                  				;	 = 0 if local file or device
   867                                  				; Bit 14 = 1 if date/time is not to be
   868                                  				;   set from clock at CLOSE.  Set by
   869                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   870                                  				;   other reseters of the dirty bit
   871                                  				;   (WRITE)
   872                                  				; Bit 13 = Pipe bit (reserved)
   873                                  				;
   874                                  				; Bits 0-7 (old FCB_devid bits)
   875                                  				; If remote file or local file, bit
   876                                  				; 6=0 if dirty Device ID number, bits
   877                                  				; 0-5 if local file.
   878                                  				; bit 7=0 for local file, bit 7
   879                                  				;      =1 for local I/O device
   880                                  				; If local I/O device, bit 6=0 if EOF (input)
   881                                  				;		Bit 5=1 if Raw mode
   882                                  				;		Bit 0=1 if console input device
   883                                  				;		Bit 1=1 if console output device
   884                                  				;		Bit 2=1 if null device
   885                                  				;		Bit 3=1 if clock device
   886 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   887                                  				; to device header if local device,
   888                                  				; points to net device header if
   889                                  				; remote
   890 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   891 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   892 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   893 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   894 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   895                                  
   896                                  ; Starting here, the next 7 bytes may be used by the file system to store
   897                                  ; an ID
   898                                  
   899                                  ; 09/07/2018 - Retro DOS v3.0
   900                                  
   901                                  ; MSDOS 3.3 SF.INC, 1987
   902                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   903                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   904                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   905                                  ;				; for this file
   906                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   907                                  
   908                                  ; MSDOS 6.0, SF.INC, 1991
   909 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   910 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   911                                  				; for this file
   912 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   913                                  
   914                                  ; End of 7 bytes of file-system specific info.
   915                                  
   916 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   917                                  				; directory entry.  This is used by
   918                                  				; close to detect file deleted and
   919                                  				; disk changed errors.
   920                                  ; SHARING INFO
   921 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   922 0000002F ????                    .sf_UID:	resw	1
   923 00000031 ????                    .sf_PID:	resw	1
   924 00000033 ????                    .sf_MFT:	resw	1
   925                                  
   926                                  ; MSDOS 6.0, SF.INC, 1991
   927 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   928 00000037 ????????                .sf_IFS_HDR:	resd	1
   929                                  
   930                                  .size:
   931                                  endstruc
   932                                  
   933                                  ; 20/07/2018
   934                                  ; MSDOS 3.3, SF.INC, 1987
   935                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   936                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   937                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   938                                  ; MSDOS 6.0, SF.INC, 1991
   939                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   940                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   941                                  
   942                                  ; 19/07/2018
   943                                  ; MSDOS 3.3, SF.INC, 1987
   944                                  
   945                                  sf_default_number  EQU	5
   946                                  
   947                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   948                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   949                                  ; by placing a -1 in the ref_count field.
   950                                  
   951                                  sf_busy EQU -1
   952                                  
   953                                  ; mode mask for FCB detection
   954                                  sf_isFCB		EQU	1000000000000000B
   955                                  
   956                                  ; Flag word masks
   957                                  sf_isnet		EQU	1000000000000000B
   958                                  sf_close_nodate 	EQU	0100000000000000B
   959                                  sf_pipe 		EQU	0010000000000000B
   960                                  sf_no_inherit		EQU	0001000000000000B
   961                                  sf_net_spool		EQU	0000100000000000B
   962                                  
   963                                  ; 25/04/2019
   964                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   965                                  
   966                                  ; ---------------------------------------------------------------------------
   967                                  ; Local file/device flag masks
   968                                  ; ---------------------------------------------------------------------------
   969                                  
   970                                  devid_file_clean        EQU     40h     ; true if file and not written
   971                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   972                                  
   973                                  devid_device            EQU     80h     ; true if a device
   974                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   975                                  devid_device_raw        EQU     20h     ; true if in raw mode
   976                                  devid_device_special    EQU     10h     ; true if special device
   977                                  devid_device_clock      EQU     08h     ; true if clock device
   978                                  devid_device_null       EQU     04h     ; true if null device
   979                                  devid_device_con_out    EQU     02h     ; true if console output
   980                                  devid_device_con_in     EQU     01h     ; true if console input
   981                                  
   982                                  ; ---------------------------------------------------------------------------
   983                                  ; structure of devid field as returned by IOCTL is:
   984                                  ;
   985                                  ;       BIT     7   6   5   4   3   2   1   0
   986                                  ;             |---|---|---|---|---|---|---|---|
   987                                  ;             | I | E | R | S | I | I | I | I |
   988                                  ;             | S | O | A | P | S | S | S | S |
   989                                  ;             | D | F | W | E | C | N | C | C |
   990                                  ;             | E |   |   | C | L | U | O | I |
   991                                  ;             | V |   |   | L | K | L | T | N |
   992                                  ;             |---|---|---|---|---|---|---|---|
   993                                  ;       ISDEV = 1 if this channel is a device
   994                                  ;             = 0 if this channel is a disk file
   995                                  ;
   996                                  ;       If ISDEV = 1
   997                                  ;
   998                                  ;             EOF = 0 if End Of File on input
   999                                  ;             RAW = 1 if this device is in Raw mode
  1000                                  ;                 = 0 if this device is cooked
  1001                                  ;             ISCLK = 1 if this device is the clock device
  1002                                  ;             ISNUL = 1 if this device is the null device
  1003                                  ;             ISCOT = 1 if this device is the console output
  1004                                  ;             ISCIN = 1 if this device is the console input
  1005                                  ;
  1006                                  ;       If ISDEV = 0
  1007                                  ;             EOF = 0 if channel has been written
  1008                                  ;             Bits 0-5 are the block device number for
  1009                                  ;                 the channel (0 = A, 1 = B, ...)
  1010                                  ; ---------------------------------------------------------------------------
  1011                                  
  1012                                  devid_ISDEV     EQU     80h
  1013                                  devid_EOF       EQU     40h
  1014                                  devid_RAW       EQU     20h
  1015                                  devid_SPECIAL   EQU     10H
  1016                                  devid_ISCLK     EQU     08h
  1017                                  devid_ISNUL     EQU     04h
  1018                                  devid_ISCOT     EQU     02h
  1019                                  devid_ISCIN     EQU     01h
  1020                                  
  1021                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1022                                  
  1023                                  ;============================================================================
  1024                                  ; PDB.INC, MSDOS 6.0, 1991
  1025                                  ;============================================================================
  1026                                  ; 04/05/2019 - Retro DOS v4.0
  1027                                  ; 08/07/2018 - Retro DOS v3.0
  1028                                  
  1029                                  ; ---------------------------------------------------------------------------
  1030                                  ; BREAK <Process data block>
  1031                                  ; ---------------------------------------------------------------------------
  1032                                  ;**	Process data block (otherwise known as program header)
  1033                                  ;
  1034                                  
  1035                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1036                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1037                                  ;	for use.
  1038                                  ; ---------------------------------------------------------------------------
  1039                                  
  1040                                  FILPERPROC	EQU     20
  1041                                  
  1042                                  struc PDB	; Process_data_block
  1043 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1044 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1045 00000004 ??                                      resb 1
  1046 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1047 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1048 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1049 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1050 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1051 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1052 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1053 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1054 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1055 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1056 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1057 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1058 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1059 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1060 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1061 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1062 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1063 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1064                                  				;  an extended FCB
  1065                                  ;endstruc 	; MSDOS 3.3
  1066                                  	  	; MSDOS 6.0
  1067 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1068 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1069 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1070 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1071                                  endstruc
  1072                                  
  1073                                  ;============================================================================
  1074                                  ; EXE.INC, MSDOS 6.0, 1991
  1075                                  ;============================================================================
  1076                                  ; 04/05/2019 - Retro DOS v4.0
  1077                                  
  1078                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1079                                  ; ---------------------------------------------------------------------------
  1080                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1081                                  ; whether or not the program is executed or whether or not a program header
  1082                                  ; gets created.
  1083                                  
  1084                                  exec_func_no_execute EQU 1	; no execute bit
  1085                                  exec_func_overlay    EQU 2	; overlay bit
  1086                                  
  1087                                  struc EXEC0
  1088 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1089 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1090 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1091 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1092                                  .size:
  1093                                  endstruc
  1094                                  
  1095                                  struc EXEC1
  1096 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1097 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1098 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1099 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1100 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1101 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1102 00000012 ????                    .IP:		resw 1		; entry point IP
  1103 00000014 ????                    .CS:		resw 1		; entry point CS
  1104                                  .size:
  1105                                  endstruc
  1106                                  
  1107                                  struc EXEC3
  1108 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1109 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1110                                  endstruc
  1111                                  
  1112                                  ;**	Exit codes (in upper byte) for terminating programs
  1113                                  
  1114                                  EXIT_TERMINATE		EQU	0
  1115                                  EXIT_ABORT		EQU	0
  1116                                  EXIT_CTRL_C		EQU	1
  1117                                  EXIT_HARD_ERROR 	EQU	2
  1118                                  EXIT_KEEP_PROCESS	EQU	3
  1119                                  
  1120                                  ;**	EXE File Header Description
  1121                                  
  1122                                  struc EXE
  1123 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1124 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1125 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1126 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1127 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1128 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1129 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1130 0000000E ????                    .SS:          resw 1		; stack of image
  1131 00000010 ????                    .SP:          resw 1		; SP of image
  1132 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1133 00000014 ????                    .IP:          resw 1		; IP of entry
  1134 00000016 ????                    .CS:          resw 1		; CS of entry
  1135 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1136 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1137 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1138                                  .size:
  1139                                  endstruc
  1140                                  
  1141                                  exe_valid_signature     EQU 5A4Dh
  1142                                  exe_valid_old_signature EQU 4D5Ah
  1143                                  
  1144                                  ;**	EXE file symbol info definitions
  1145                                  
  1146                                  struc symbol_entry
  1147 00000000 ????????                .value:	resd 1
  1148 00000004 ????                    .type:	resw 1
  1149 00000006 ??                      .len:	resb 1
  1150 00000007 <res FFh>               .name:	resb 255
  1151                                  endstruc
  1152                                  
  1153                                  ;**	Data structure passed for ExecReady call
  1154                                  
  1155                                  struc ERStruc
  1156 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1157 00000002 ????                     .ER_Flags:	resw	1
  1158 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1159 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1160 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1161 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1162                                   .size:
  1163                                  endstruc
  1164                                  
  1165                                  ;** bit fields in ER_Flags
  1166                                  
  1167                                  ER_EXE		equ	0001h
  1168                                  ER_OVERLAY	equ	0002h
  1169                                  
  1170                                  
  1171                                  ;============================================================================
  1172                                  ; ARENA.INC, MSDOS 6.0, 1991
  1173                                  ;============================================================================
  1174                                  ; 24/04/2019 - Retro DOS v4.0
  1175                                  ; 04/08/2018 - Retro DOS v3.0
  1176                                  
  1177                                  ;BREAK <Memory arena structure>
  1178                                  
  1179                                  ;**	Arena Header
  1180                                  
  1181                                  struc ARENA
  1182 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1183 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1184 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1185 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1186 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1187                                  .headersize:			
  1188                                  endstruc
  1189                                  
  1190                                  ; 20/05/2019 - Retro DOS v4.0
  1191                                  ARENAHEADERSIZE equ ARENA.headersize 
  1192                                  
  1193                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1194                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1195                                  ; Change them and change ALLOC.ASM.
  1196                                  
  1197                                  arena_owner_system  EQU 0               ; free block indication
  1198                                  
  1199                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1200                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1201                                  
  1202                                  FIRST_FIT	EQU	00000000B
  1203                                  BEST_FIT	EQU	00000001B
  1204                                  LAST_FIT	EQU	00000010B
  1205                                  
  1206                                  ; MSDOS 6.0
  1207                                  LOW_FIRST	EQU	00000000B	; M001
  1208                                  HIGH_FIRST	EQU	10000000B	; M001
  1209                                  HIGH_ONLY	EQU	01000000B	; M001
  1210                                  
  1211                                  LINKSTATE	EQU	00000001B	; M002
  1212                                  
  1213                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1214                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1215                                  
  1216                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1217                                  						; M026: used to mask of bits
  1218                                  						; M026: 6 & 7 of AllocMethod
  1219                                  
  1220                                  ;============================================================================
  1221                                  ; MI.INC, MSDOS 6.0, 1991
  1222                                  ;============================================================================
  1223                                  ; 07/07/2018 - Retro DOS v3.0
  1224                                  
  1225                                  ;BREAK <Machine instruction, flag definitions and character types>
  1226                                  
  1227                                  mi_INT		EQU	0CDh
  1228                                  mi_long_jmp	EQU	0EAh
  1229                                  mi_Long_CALL	EQU	09Ah
  1230                                  mi_Long_RET	EQU	0CBh
  1231                                  mi_Near_RET	EQU	0C3h
  1232                                  
  1233                                  ;			xxxxoditszxaxpxc
  1234                                  f_Overflow	EQU	0000100000000000B
  1235                                  f_Direction	EQU	0000010000000000B
  1236                                  f_Interrupt	EQU	0000001000000000B
  1237                                  f_Trace 	EQU	0000000100000000B
  1238                                  f_Sign		EQU	0000000010000000B
  1239                                  f_Zero		EQU	0000000001000000B
  1240                                  f_Aux		EQU	0000000000010000B
  1241                                  f_Parity	EQU	0000000000000100B
  1242                                  f_Carry 	EQU	0000000000000001B
  1243                                  
  1244                                  ;============================================================================
  1245                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1246                                  ;============================================================================
  1247                                  ; 13/07/2018 - Retro DOS v3.0
  1248                                  ; 29/04/2019 - Retro DOS v4.0
  1249                                  
  1250                                  ;**	Standard I/O file handles
  1251                                  
  1252                                  stdin       EQU     0
  1253                                  stdout      EQU     1
  1254                                  stderr      EQU     2
  1255                                  stdaux      EQU     3
  1256                                  stdprn      EQU     4
  1257                                  
  1258                                  ;**	File Modes
  1259                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1260                                  
  1261                                  open_for_read   EQU 0
  1262                                  open_for_write  EQU 1
  1263                                  open_for_both   EQU 2
  1264                                  
  1265                                  ; MSDOS 6.0
  1266                                  OPEN_FOR_BOTH	equ 2
  1267                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1268                                  				; made from exec
  1269                                  
  1270                                  access_mask	EQU 0Fh ; 09/08/2018
  1271                                  
  1272                                  SHARING_MASK	    equ 0F0h
  1273                                  SHARING_COMPAT	    equ 000h
  1274                                  SHARING_DENY_BOTH   equ 010h
  1275                                  SHARING_DENY_WRITE  equ 020h
  1276                                  SHARING_DENY_READ   equ 030h
  1277                                  SHARING_DENY_NONE   equ 040h
  1278                                  SHARING_NET_FCB     equ 070h
  1279                                  SHARING_NO_INHERIT  equ 080h
  1280                                  
  1281                                  ; 29/04/2019
  1282                                  
  1283                                  ;**	Extended Open Definitions
  1284                                  
  1285                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1286                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1287                                  NOT_EXISTS_MASK    equ 0F0h
  1288                                  
  1289                                  ;*	SF_MODE values
  1290                                  
  1291                                  AUTO_COMMIT_WRITE	equ 4000h
  1292                                  INT_24_ERROR		equ 2000h
  1293                                  
  1294                                  ;*	Flags in EXTOPEN_ON
  1295                                  
  1296                                  EXT_OPEN_ON		equ 01h
  1297                                  EXT_FILE_NOT_EXISTS	equ 04h
  1298                                  EXT_OPEN_I24_OFF	equ 02h
  1299                                  
  1300                                  ;*	Flags in EXTOPEN_FLAG
  1301                                  
  1302                                  ACTION_OPENED		equ 01h
  1303                                  ACTION_CREATED_OPENED	equ 02h
  1304                                  ACTION_REPLACED_OPENED	equ 03h
  1305                                  EXT_EXISTS_OPEN 	equ 01h
  1306                                  EXT_EXISTS_FAIL 	equ 00h
  1307                                  EXT_NEXISTS_CREATE	equ 10h
  1308                                  
  1309                                  ;**	Extended Open Structure
  1310                                  
  1311                                  struc EXT_OPEN_PARM
  1312 00000000 ????????                .SET_LIST:	resd 1
  1313 00000004 ????                    .NUM_OF_PARM:	resw 1
  1314                                  endstruc
  1315                                  
  1316                                  ;============================================================================
  1317                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1318                                  ;============================================================================
  1319                                  ; 29/04/2019 - Retro DOS v4.0
  1320                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1321                                  
  1322                                  ; <system call definitions>
  1323                                  
  1324                                  ABORT                           EQU 0   ;  0      0
  1325                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1326                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1327                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1328                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1329                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1330                                  RAW_CON_IO                      EQU 6   ;  6      6
  1331                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1332                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1333                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1334                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1335                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1336                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1337                                  DISK_RESET                      EQU 13  ; 13      D
  1338                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1339                                  FCB_OPEN                        EQU 15  ; 15      F
  1340                                  FCB_CLOSE                       EQU 16  ; 16     10
  1341                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1342                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1343                                  FCB_DELETE                      EQU 19  ; 19     13
  1344                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1345                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1346                                  FCB_CREATE                      EQU 22  ; 22     16
  1347                                  FCB_RENAME                      EQU 23  ; 23     17
  1348                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1349                                  SET_DMA                         EQU 26  ; 26     1A
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1352                                  ;                                                                          ;
  1353                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1354                                  ;                                                                          ;
  1355                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1356                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1357                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1358                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1359                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1360                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1361                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1362                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1363                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1364                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1365                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1366                                  GET_DATE                        EQU 42  ; 42     2A
  1367                                  SET_DATE                        EQU 43  ; 43     2B
  1368                                  GET_TIME                        EQU 44  ; 44     2C
  1369                                  SET_TIME                        EQU 45  ; 45     2D
  1370                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1371                                  ; Extended functionality group
  1372                                  GET_DMA                         EQU 47  ; 47     2F
  1373                                  GET_VERSION                     EQU 48  ; 48     30
  1374                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1375                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1376                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1377                                  ;                                                                          ;
  1378                                  GET_DPB                         EQU 50  ; 50     32
  1379                                  ;                                                                          ;
  1380                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1381                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1382                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1383                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1384                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1385                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1386                                  CHAR_OPER                       EQU 55  ; 55     37
  1387                                  INTERNATIONAL                   EQU 56  ; 56     38
  1388                                  ; XENIX CALLS
  1389                                  ;   Directory Group
  1390                                  MKDIR                           EQU 57  ; 57     39
  1391                                  RMDIR                           EQU 58  ; 58     3A
  1392                                  CHDIR                           EQU 59  ; 59     3B
  1393                                  ;   File Group
  1394                                  CREAT                           EQU 60  ; 60     3C
  1395                                  OPEN                            EQU 61  ; 61     3D
  1396                                  CLOSE                           EQU 62  ; 62     3E
  1397                                  READ                            EQU 63  ; 63     3F
  1398                                  WRITE                           EQU 64  ; 64     40
  1399                                  UNLINK                          EQU 65  ; 65     41
  1400                                  LSEEK                           EQU 66  ; 66     42
  1401                                  CHMOD                           EQU 67  ; 67     43
  1402                                  IOCTL                           EQU 68  ; 68     44
  1403                                  XDUP                            EQU 69  ; 69     45
  1404                                  XDUP2                           EQU 70  ; 70     46
  1405                                  CURRENT_DIR                     EQU 71  ; 71     47
  1406                                  ;    Memory Group
  1407                                  ALLOC                           EQU 72  ; 72     48
  1408                                  DEALLOC                         EQU 73  ; 73     49
  1409                                  SETBLOCK                        EQU 74  ; 74     4A
  1410                                  ;    Process Group
  1411                                  EXEC                            EQU 75  ; 75     4B
  1412                                  EXIT                            EQU 76  ; 76     4C
  1413                                  _WAIT				EQU 77  ; 77     4D
  1414                                  FIND_FIRST                      EQU 78  ; 78     4E
  1415                                  ;   Special Group
  1416                                  FIND_NEXT                       EQU 79  ; 79     4F
  1417                                  ; SPECIAL SYSTEM GROUP
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1422                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1423                                  GET_IN_VARS                     EQU 82  ; 82     52
  1424                                  SETDPB                          EQU 83  ; 83     53
  1425                                  ;                                                                          ;
  1426                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1427                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1428                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1431                                  ;                                                                          ;
  1432                                  DUP_PDB                         EQU 85  ; 85     55
  1433                                  ;                                                                          ;
  1434                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1435                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1436                                  RENAME                          EQU 86  ; 86     56
  1437                                  FILE_TIMES                      EQU 87  ; 87     57
  1438                                  ALLOCOPER			EQU 88	; 88	 58
  1439                                  ; Network extention system calls
  1440                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1441                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1442                                  CREATENEWFILE			EQU 91	; 91	 5B
  1443                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1444                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1445                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1446                                  ;									   ;
  1447                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1448                                  					;	    CloseByName, CloseUser,
  1449                                  					;	    CloseUserProcess,
  1450                                  					;	    GetOpenFileList
  1451                                  ;									   ;
  1452                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1453                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1454                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1455                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1456                                  XNAMETRANS			EQU 96	; 96	 60
  1457                                  PATHPARSE			EQU 97	; 97	 61
  1458                                  GETCURRENTPSP			EQU 98	; 98	 62
  1459                                  HONGEUL 			EQU 99	; 99	 63
  1460                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1461                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1462                                  ;									   ;
  1463                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1464                                  ;									   ;
  1465                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1466                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1467                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1468                                  GETSETCDPG			EQU 102 ; 102	 66
  1469                                  EXTHANDLE			EQU 103 ; 103	 67
  1470                                  COMMIT				EQU 104 ; 104	 68
  1471                                  
  1472                                  ; 29/04/2019 - Retro DOS v4.0
  1473                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1474                                  
  1475                                  GetSetMediaID			EQU 105 ; 105	 69
  1476                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1477                                  ExtOpen 			EQU 108 ; 108	 6C
  1478                                  
  1479                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1480                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1481                                  ;                                                                          ;
  1482                                  ;ifdef ROMEXEC
  1483                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1484                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1485                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1486                                  ;endif
  1487                                  ;                                                                          ;
  1488                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1489                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1490                                  
  1491                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1492                                  ;OEM_C1				EQU 249 ; 249    F9
  1493                                  ;OEM_C2				EQU 250 ; 250    FA
  1494                                  ;OEM_C3				EQU 251 ; 251    FB
  1495                                  ;OEM_C4				EQU 252 ; 252    FC
  1496                                  ;OEM_C5				EQU 253 ; 253    FD
  1497                                  ;OEM_C6				EQU 254 ; 254    FE
  1498                                  ;OEM_C7				EQU 255 ; 255    FF
  1499                                  
  1500                                  ;============================================================================
  1501                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1502                                  ;============================================================================
  1503                                  ; 24/04/2019 - Retro DOS 4.0
  1504                                  
  1505                                  ;MAJOR_VERSION	EQU     6
  1506                                  ;;MINOR_VERSION	EQU	00
  1507                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1508                                  
  1509                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1510                                  ;MAJOR_VERSION	EQU     5
  1511                                  ;MINOR_VERSION	EQU     0
  1512                                  
  1513                                  ; 30/12/2022 - Retro DOS v4.2
  1514                                  MAJOR_VERSION	EQU     6
  1515                                  MINOR_VERSION	EQU     22
  1516                                  
  1517                                  ;============================================================================
  1518                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1519                                  ;============================================================================
  1520                                  ; 09/07/2018 - Retro DOS 3.0
  1521                                  
  1522                                  ; Current structure of the data returned by the international call
  1523                                  
  1524                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1525                                  .Date_tim_format:
  1526 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1527                                  .Currency_sym:
  1528 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1529                                  .Thous_sep:
  1530 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1531                                  .Decimal_sep:
  1532 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1533                                  .Date_sep:
  1534 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1535                                  .Time_sep:
  1536 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1537                                  .Bit_field:	
  1538 0000000F ??                      		RESB 1		; Bit values
  1539                                                                     ;   Bit 0 = 0 if currency symbol first
  1540                                                                     ;         = 1 if currency symbol last
  1541                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1542                                                                     ;         = 1 if space after currency symbol
  1543                                  .Currency_cents:
  1544 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1545                                  .Time_24:
  1546 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1547                                  .Map_call:
  1548 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1549 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1550                                  				;  in pieces.
  1551                                  .Data_sep:
  1552 00000016 ????                    		RESB	2	; Data list separator character
  1553                                  .size:		
  1554                                  endstruc
  1555                                  
  1556                                  ; Max size of the block returned by the INTERNATIONAL call
  1557                                  
  1558                                  internat_block_max	EQU	32
  1559                                  
  1560                                  ;============================================================================
  1561                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1562                                  ;============================================================================
  1563                                  ; 08/07/2018 - Retro DOS v3.0
  1564                                  
  1565                                  ;SysInitVars STRUC
  1566                                  struc SYSI
  1567 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1568 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1569 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1570 0000000C ????????                .CON:	    resd 1		; CON device
  1571 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1572 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1573 00000016 ????????                .CDS:	    resd 1		; CDS list
  1574 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1575 0000001E ????                    .Keep:	    resw 1		; keep count
  1576 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1577 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1578 00000022 ????????                .DEV:	    resd 1		; device list
  1579                                  ; 09/07/2018
  1580                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1581                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1582 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1583 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1584 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1585 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1586 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1587 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1588 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1589 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1590 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1591 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1592 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1593 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1594                                  endstruc
  1595                                  ;SysInitVars ENDS
  1596                                  
  1597                                  ;This is added for more information exchange between DOS, BIOS.
  1598                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1599                                  
  1600                                  ;SysInitVars_Ext struc
  1601                                  struc SYSI_EXT
  1602 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1603 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1604                                  endstruc
  1605                                  ;SysInitVars_Ext ends
  1606                                  
  1607                                  ;============================================================================
  1608                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1609                                  ;============================================================================
  1610                                  ; 09/07/2018 - Retro DOS v3.0
  1611                                  
  1612                                  ;*** J.K.
  1613                                  ;General Guide -
  1614                                  ;Category Code:
  1615                                  ; 0... .... DOS Defined
  1616                                  ; 1... .... User defined
  1617                                  ; .xxx xxxx Code
  1618                                  
  1619                                  ;Function Code:
  1620                                  ; 0... .... Return error if unsupported
  1621                                  ; 1... .... Ignore if unsupported
  1622                                  ; .0.. .... Intercepted by DOS
  1623                                  ; .1.. .... Passed to driver
  1624                                  ; ..0. .... Sends data/commands to device
  1625                                  ; ..1. .... Quries data/info from device
  1626                                  ; ...x .... Subfunction
  1627                                  ;
  1628                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1629                                  ; function set.  It plays no critical role; some functions may contain both
  1630                                  ; command and query elements. The convention is that such commands are
  1631                                  ; defined as "sends data".
  1632                                  
  1633                                  ;*****************************;*
  1634                                  ; BLOCK DRIVERS 	      ;*
  1635                                  ;*****************************;*
  1636                                  
  1637                                  ; IOCTL SUB-FUNCTIONS
  1638                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1639                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1640                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1641                                  IOCTL_READ_HANDLE	EQU	2
  1642                                  IOCTL_WRITE_HANDLE	EQU	3
  1643                                  IOCTL_READ_DRIVE	EQU	4
  1644                                  IOCTL_WRITE_DRIVE	EQU	5
  1645                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1646                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1647                                  IOCTL_CHANGEABLE?	EQU	8
  1648                                  IOCTL_DeviceLocOrRem?	EQU	9
  1649                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1650                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1651                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1652                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1653                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1654                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1655                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1656                                  ; (MSDOS 6.0)
  1657                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1658                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1659                                  
  1660                                  ; GENERIC IOCTL CATEGORY CODES
  1661                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1662                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1663                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1664                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1665                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1666                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1667                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1668                                  
  1669                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1670                                  RAWIO			EQU	8
  1671                                  
  1672                                  ; RAWIO SUB-FUNCTIONS
  1673                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1674                                  GET_DEVICE_PARAMETERS	EQU	60H
  1675                                  SET_DEVICE_PARAMETERS	EQU	40H
  1676                                  READ_TRACK		EQU	61H
  1677                                  WRITE_TRACK		EQU	41H
  1678                                  VERIFY_TRACK		EQU	62H
  1679                                  FORMAT_TRACK		EQU	42H
  1680                                  ; (MSDOS 6.0)
  1681                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1682                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1683                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1684                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1685                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1686                                  
  1687                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1688                                  BUILD_DEVICE_BPB	EQU	000000001B
  1689                                  
  1690                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1691                                  INSTALL_FAKE_BPB	EQU	000000001B
  1692                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1693                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1694                                  
  1695                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1696                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1697                                  STATUS_FOR_FORMAT	EQU	000000001B
  1698                                  ; (MSDOS 6.0)
  1699                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1700                                  
  1701                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1702                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1703                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1704                                  
  1705                                  ; DEVICETYPE VALUES
  1706                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1707                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1708                                  DEV_5INCH		EQU	0
  1709                                  DEV_5INCH96TPI		EQU	1
  1710                                  DEV_3INCH720KB		EQU	2
  1711                                  DEV_8INCHSS		EQU	3
  1712                                  DEV_8INCHDS		EQU	4
  1713                                  DEV_HARDDISK		EQU	5
  1714                                  DEV_OTHER		EQU	7
  1715                                  ; (MSDOS 6.0)
  1716                                  ;DEV_3INCH1440KB	EQU	7
  1717                                  DEV_3INCH2880KB		EQU	9
  1718                                  ; Retro DOS v2.0 - 26/03/2018
  1719                                  ;;DEV_TAPE		EQU	6
  1720                                  ;;DEV_ERIMO		EQU	8
  1721                                  ;DEV_3INCH2880KB	EQU	9
  1722                                  DEV_3INCH1440KB		EQU	10
  1723                                  
  1724                                  ; (MSDOS 3.3)
  1725                                  ;MAX_DEV_TYPE		EQU	7
  1726                                  
  1727                                  ; (MSDOS 6.0)
  1728                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1729                                  					; CURRENTLY SUPPORT.
  1730                                  struc A_SECTORTABLE
  1731 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1732 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1733                                  .size:
  1734                                  endstruc
  1735                                  
  1736                                  ;============================================================================
  1737                                  ; DEVSYM.INC
  1738                                  ;============================================================================
  1739                                  ; 07/07/2018 - Retro DOS v3.0
  1740                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1741                                  
  1742                                  ;**	DevSym.inc - Device Symbols
  1743                                  
  1744                                  ; The device table list has the form:
  1745                                  struc	SYSDEV
  1746 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1747 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1748 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1749 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1750 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1751                                  .size:
  1752                                  endstruc
  1753                                  
  1754                                  ;
  1755                                  ; ATTRIBUTE BIT MASKS
  1756                                  ;
  1757                                  ; CHARACTER DEVICES:
  1758                                  ;
  1759                                  ; BIT 15 -> MUST BE 1
  1760                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1761                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1762                                  ;     12 -> UNUSED
  1763                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1764                                  ;     10 -> MUST BE 0
  1765                                  ;      9 -> MUST BE 0
  1766                                  ;      8 -> UNUSED
  1767                                  ;      7 -> UNUSED
  1768                                  ;      6 -> UNUSED
  1769                                  ;      5 -> UNUSED
  1770                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1771                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1772                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1773                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1774                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1775                                  ;
  1776                                  ; BLOCK DEVICES:
  1777                                  ;
  1778                                  ; BIT 15 -> MUST BE 0
  1779                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1780                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1781                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1782                                  ;	    THE SAME PLACE.
  1783                                  ;     12 -> UNUSED
  1784                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1785                                  ;     10 -> MUST BE 0
  1786                                  ;      9 -> MUST BE 0
  1787                                  ;      8 -> UNUSED
  1788                                  ;      7 -> UNUSED
  1789                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1790                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1791                                  ;      5 -> UNUSED
  1792                                  ;      4 -> UNUSED
  1793                                  ;      3 -> UNUSED
  1794                                  ;      2 -> UNUSED
  1795                                  ;      1 -> UNUSED
  1796                                  ;      0 -> UNUSED
  1797                                  ;
  1798                                  
  1799                                  ;Attribute bit masks
  1800                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1801                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1802                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1803                                  
  1804                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1805                                  
  1806                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1807                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1808                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1809                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1810                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1811                                  				;  ENTRY POINTS, 0 IF NOT
  1812                                  
  1813                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1814                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1815                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1816                                  				;  ITS CURRENT FORM.
  1817                                  
  1818                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1819                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1820                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1821                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1822                                  
  1823                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1824                                  
  1825                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1826                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1827                                  				;LOGICAL DRIVES, AND SUPPORTS
  1828                                  				;GENERIC IOCTL CALLS.
  1829                                  				;FOR CHARACTER DEVICES, THIS
  1830                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1831                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1832                                  
  1833                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1834                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1835                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1836                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1837                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1838                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1839                                  
  1840                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1841                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1842                                  
  1843                                  ;Static Reguest Header
  1844                                  struc	SRHEAD
  1845 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1846 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1847 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1848 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1849 00000005 ????????????????                	resb 8		;Reserved for queue links
  1850                                  .size:
  1851                                  endstruc
  1852                                  
  1853                                  ;Status word masks
  1854                                  STERR   EQU     8000H           ;Bit 15 - Error
  1855                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1856                                  STDON   EQU     0100H           ;Bit 8 - Done
  1857                                  STECODE EQU     00FFH           ;Error code
  1858                                  WRECODE EQU     0
  1859                                  
  1860                                  ;Function codes
  1861                                  DINITHL EQU     26              ;Size of init header
  1862                                  DMEDHL  EQU     15              ;Size of media check header
  1863                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1864                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1865                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1866                                  DSTATHL EQU     13              ;Size of status header
  1867                                  DFLSHL  EQU     15              ;Size of flush header
  1868                                  
  1869                                  DEVINIT EQU     0               ;Initialization
  1870                                  DEVMDCH EQU     1               ;Media check
  1871                                  DEVBPB  EQU     2               ;Get BPB
  1872                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1873                                  DEVRD   EQU     4               ;Read
  1874                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1875                                  DEVIST  EQU     6               ;Input status
  1876                                  DEVIFL  EQU     7               ;Input flush
  1877                                  DEVWRT  EQU     8               ;Write
  1878                                  DEVWRTV EQU     9               ;Write with verify
  1879                                  DEVOST  EQU     10              ;Output status
  1880                                  DEVOFL  EQU     11              ;Output flush
  1881                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1882                                  
  1883                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1884                                  DEVOPN	EQU	13		;DEVICE OPEN
  1885                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1886                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1887                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1888                                  ; 07/08/2018 - Retro DOS v3.0
  1889                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1890                                  GENIOCTL EQU	19
  1891                                  
  1892                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1893                                  ;		     20
  1894                                  ;		     21
  1895                                  ;		     22
  1896                                  
  1897                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1898                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1899                                  ; 18/05/2019 - Retro DOS v4.0
  1900                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1901                                  
  1902                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1903                                  
  1904                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1905                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1906                                  
  1907                                  ; ADDED FOR DOS 5.00
  1908                                  
  1909                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1910                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1911                                  
  1912                                  struc IOCTL_REQ
  1913 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1914                                  				; GENERIC IOCTL ADDITION.
  1915 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1916 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1917 0000000F ????                    .REG_SI:	resw 1
  1918 00000011 ????                    .REG_DI:	resw 1
  1919 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1920                                  .size: ; 07/08/2018
  1921                                  endstruc
  1922                                  
  1923                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1924                                  GEN_IOCTL_WRT_TRK EQU	40H
  1925                                  GEN_IOCTL_RD_TRK  EQU	60H
  1926                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1927                                  
  1928                                  ;; 32-bit absolute read/write input list structure
  1929                                  
  1930                                  struc ABS_32RW
  1931 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1932 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1933 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1934                                  .size:
  1935                                  endstruc
  1936                                  
  1937                                  ;; media ID info
  1938                                  
  1939                                  struc MEDIA_ID_INFO
  1940 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1941 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1942 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1943 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1944                                  .size:
  1945                                  endstruc
  1946                                  
  1947                                  ; equates for DOS34_FLAG
  1948                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1949                                  
  1950                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1951                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1952                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1953                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1954                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1955                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1956                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1957                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1958                                  					    ;M018: that knows how to handle 
  1959                                  					    ;M018: open for exec
  1960                                  
  1961                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1962                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1963                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1964                                  
  1965                                  ;============================================================================
  1966                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1967                                  ;============================================================================
  1968                                  ; 16/07/2018 - Retro DOS v3.0 
  1969                                  
  1970                                  ;**	ERROR.INC - DOS Error Codes
  1971                                  ;
  1972                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1973                                  ;    return error codes through AX. If an error occurred then
  1974                                  ;    the carry bit will be set and the error code is in AX. If no error
  1975                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1976                                  ;
  1977                                  ;    Since the set of error codes is being extended as we extend the operating
  1978                                  ;    system, we have provided a means for applications to ask the system for a
  1979                                  ;    recommended course of action when they receive an error.
  1980                                  ;
  1981                                  ;    The GetExtendedError system call returns a universal error, an error
  1982                                  ;    location and a recommended course of action. The universal error code is
  1983                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1984                                  ;    is issued.
  1985                                  
  1986                                  ;	2.0 error codes
  1987                                  
  1988                                  error_invalid_function		EQU	1
  1989                                  error_file_not_found		EQU	2
  1990                                  error_path_not_found		EQU	3
  1991                                  error_too_many_open_files	EQU	4
  1992                                  error_access_denied		EQU	5
  1993                                  error_invalid_handle		EQU	6
  1994                                  error_arena_trashed		EQU	7
  1995                                  error_not_enough_memory 	EQU	8
  1996                                  error_invalid_block		EQU	9
  1997                                  error_bad_environment		EQU	10
  1998                                  error_bad_format		EQU	11
  1999                                  error_invalid_access		EQU	12
  2000                                  error_invalid_data		EQU	13
  2001                                  ;**** reserved			EQU	14	; *****
  2002                                  error_invalid_drive		EQU	15
  2003                                  error_current_directory 	EQU	16
  2004                                  error_not_same_device		EQU	17
  2005                                  error_no_more_files		EQU	18
  2006                                  
  2007                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  2008                                  
  2009                                  error_write_protect		EQU	19
  2010                                  error_bad_unit			EQU	20
  2011                                  error_not_ready 		EQU	21
  2012                                  error_bad_command		EQU	22
  2013                                  error_CRC			EQU	23
  2014                                  error_bad_length		EQU	24
  2015                                  error_seek			EQU	25
  2016                                  error_not_DOS_disk		EQU	26
  2017                                  error_sector_not_found		EQU	27
  2018                                  error_out_of_paper		EQU	28
  2019                                  error_write_fault		EQU	29
  2020                                  error_read_fault		EQU	30
  2021                                  error_gen_failure		EQU	31
  2022                                  
  2023                                  ;	the new 3.0 error codes reported through INT 24
  2024                                  
  2025                                  error_sharing_violation 	EQU	32
  2026                                  error_lock_violation		EQU	33
  2027                                  error_wrong_disk		EQU	34
  2028                                  error_FCB_unavailable		EQU	35
  2029                                  error_sharing_buffer_exceeded	EQU	36
  2030                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2031                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2032                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2033                                  
  2034                                  ;	New OEM network-related errors are 50-79
  2035                                  
  2036                                  error_not_supported		EQU	50
  2037                                  
  2038                                  error_net_access_denied		EQU	65	;M028
  2039                                  
  2040                                  ;	End of INT 24 reportable errors
  2041                                  
  2042                                  error_file_exists		EQU	80
  2043                                  error_DUP_FCB			EQU	81	; *****
  2044                                  error_cannot_make		EQU	82
  2045                                  error_FAIL_I24			EQU	83
  2046                                  
  2047                                  ;	New 3.0 network related error codes
  2048                                  
  2049                                  error_out_of_structures 	EQU	84
  2050                                  error_already_assigned		EQU	85
  2051                                  error_invalid_password		EQU	86
  2052                                  error_invalid_parameter 	EQU	87
  2053                                  error_NET_write_fault		EQU	88
  2054                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2055                                  
  2056                                  ;	BREAK <Interrupt 24 error codes>
  2057                                  
  2058                                  ;**	Int24 Error Codes
  2059                                  
  2060                                  error_I24_write_protect 	EQU	0
  2061                                  error_I24_bad_unit		EQU	1
  2062                                  error_I24_not_ready		EQU	2
  2063                                  error_I24_bad_command		EQU	3
  2064                                  error_I24_CRC			EQU	4
  2065                                  error_I24_bad_length		EQU	5
  2066                                  error_I24_Seek			EQU	6
  2067                                  error_I24_not_DOS_disk		EQU	7
  2068                                  error_I24_sector_not_found	EQU	8
  2069                                  error_I24_out_of_paper		EQU	9
  2070                                  error_I24_write_fault		EQU	0Ah
  2071                                  error_I24_read_fault		EQU	0Bh
  2072                                  error_I24_gen_failure		EQU	0Ch
  2073                                  ; NOTE: Code 0DH is used by MT-DOS.
  2074                                  error_I24_wrong_disk		EQU	0Fh
  2075                                  
  2076                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2077                                  ;
  2078                                  ;	NOTE: ABORT is ALWAYS allowed
  2079                                  
  2080                                  Allowed_FAIL			EQU	00001000B
  2081                                  Allowed_RETRY			EQU	00010000B
  2082                                  Allowed_IGNORE			EQU	00100000B
  2083                                  
  2084                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2085                                  I24_area			EQU	00000110B  ; 00 if DOS
  2086                                  						   ; 01 if FAT
  2087                                  						   ; 10 if root DIR
  2088                                  						   ; 11 if DATA
  2089                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2090                                  
  2091                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2092                                  
  2093                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2094                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2095                                  ;	to take for error codes that they don't explicitly understand.
  2096                                  
  2097                                  ;	Values for error CLASS
  2098                                  
  2099                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2100                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2101                                  errCLASS_Auth		EQU	3	; Permission problem
  2102                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2103                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2104                                  errCLASS_SysFail	EQU	6	; System Failure
  2105                                  errCLASS_Apperr 	EQU	7	; Application Error
  2106                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2107                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2108                                  errCLASS_Locked 	EQU	10	; Locked
  2109                                  errCLASS_Media		EQU	11	; Media Failure
  2110                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2111                                  errCLASS_Unk		EQU	13	; Unknown/other
  2112                                  
  2113                                  ;	Values for error ACTION
  2114                                  
  2115                                  errACT_Retry		EQU	1	; Retry
  2116                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2117                                  errACT_User		EQU	3	; Ask user to regive info
  2118                                  errACT_Abort		EQU	4	; abort with clean up
  2119                                  errACT_Panic		EQU	5	; abort immediately
  2120                                  errACT_Ignore		EQU	6	; ignore
  2121                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2122                                  
  2123                                  ;	Values for error LOCUS
  2124                                  
  2125                                  errLOC_Unk		EQU	1	; No appropriate value
  2126                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2127                                  errLOC_Net		EQU	3	; Network
  2128                                  errLOC_SerDev		EQU	4	; Serial Device
  2129                                  errLOC_Mem		EQU	5	; Memory
  2130                                  
  2131                                  ;============================================================================
  2132                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2133                                  ;============================================================================
  2134                                  ; 04/05/2019 - Retro DOS v4.0
  2135                                  
  2136                                  ;**	Int 2A functions
  2137                                  ; ---------------------------------------------------------------------------
  2138                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2139                                  ;		as a critical section handler since critical sections
  2140                                  ;		were originally created to support the net.
  2141                                  ; ---------------------------------------------------------------------------
  2142                                  
  2143                                  ; ---------------------------------------------------------------------------
  2144                                  ;**	This table was created by examining the source and may not be
  2145                                  ;	complete or completely accurate - JGL
  2146                                  ;
  2147                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2148                                  
  2149                                  ;	(ah) = 0	installation check
  2150                                  ;			   (returns ah !=0 if installed)
  2151                                  ;	(ah) = 1	cooked net bios call
  2152                                  ;	(ah) = 3	query drive shared
  2153                                  ;			   (ds:si) = "n:" asciz string
  2154                                  ;	(ah) = 4	net bios
  2155                                  ;	       (al) = 0	   cooked net bios call
  2156                                  ;	       (al) = 1	   raw net bios call
  2157                                  ;	       (al) = 2	   ???
  2158                                  ;
  2159                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2160                                  ;			NCBs available/outstanding. DX returns the number of
  2161                                  ;			sessions. Supposedly, this is documented in an old
  2162                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2163                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2164                                  ;			not be used, as it is a hack, only to get Lotus
  2165                                  ;			Notes running.
  2166                                  ;
  2167                                  ;	(ah) = 80h	enter critical section
  2168                                  ;	(ah) = 81h	leave critical section
  2169                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2170                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2171                                  ; ---------------------------------------------------------------------------
  2172                                  
  2173                                  ;**	Critical section definitions
  2174                                  ; ---------------------------------------------------------------------------
  2175                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2176                                  ;	which various programs use to make it so, in a limited fashion.
  2177                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2178                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2179                                  ;	DOS's global data structures, such as the memory arena, are not
  2180                                  ;	in this area, so critical section indicators are used to protect
  2181                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2182                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2183                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2184                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2185                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2186                                  ;	critical section they then switch away from that second thread and
  2187                                  ;	let the first one finish and exit the section.
  2188                                  ; ---------------------------------------------------------------------------
  2189                                  
  2190                                  ; These below are subject to leave-all sections
  2191                                  critDisk    EQU     1			; Disk I/O critical section
  2192                                  critShare   EQU     1			; Sharer I/O critical section
  2193                                  critMem     EQU     1			; memory maintenance critical section
  2194                                  critSFT     EQU     1			; sft table allocation
  2195                                  critDevice  EQU     2			; Device I/O critical section
  2196                                  critNet     EQU     5			; network critical section
  2197                                  critIFS     EQU     6			; ifsfunc critical section
  2198                                  ; These below are not subject to leave-all sections
  2199                                  critASSIGN  EQU     8			; Assign has munged a system call
  2200                                  
  2201                                  ;============================================================================
  2202                                  ; MULT.INC (MSDOS 6.0, 1991)
  2203                                  ;============================================================================
  2204                                  ; 04/05/2019 - Retro DOS v4.0
  2205                                  
  2206                                  ;Break <Multiplex channels>
  2207                                  
  2208                                  ; ---------------------------------------------------------------------------
  2209                                  ; The current set of defined multiplex channels is (* means documented):
  2210                                  ;
  2211                                  ;   Channel(h)  Issuer          Receiver    Function
  2212                                  ;      00       server          PSPRINT     print job control
  2213                                  ;     *01       print/apps      PRINT       Queueing of files
  2214                                  ;      02       BIOS            REDIR       signal open/close of printers
  2215                                  ;
  2216                                  ;      05       command         REDIR       obtain text of net int 24 message
  2217                                  ;     *06       server/assign   ASSIGN      Install check
  2218                                  ;
  2219                                  ;      08       external driver IBMBIO      interface to internal routines
  2220                                  ;
  2221                                  ;      10       sharer/server   Sharer      install check
  2222                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2223                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2224                                  ;      13       MSNET           MSNET       movement of NCBs
  2225                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2226                                  ;                                           of alternative INT_13 drivers after
  2227                                  ;                                           boot_up
  2228                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2229                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2230                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2231                                  ;      16       WIN386          WIN386      Windows communications
  2232                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2233                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2234                                  ;      19       Shell
  2235                                  ;      1A       Ansi.sys
  2236                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2237                                  ;
  2238                                  ;      40h      OS/2
  2239                                  ;      41h      Lanman
  2240                                  ;      42h      Lanman
  2241                                  ;      43h      Himem
  2242                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2243                                  ;                               AL = 30h    reserved for Himem external A20 code
  2244                                  ;      44h      Dosextender
  2245                                  ;      45H      Windows profiler
  2246                                  ;      46h      Windows/286 DOS extender
  2247                                  ;      47h      Basic Compiler Vn. 7.0
  2248                                  ;      48h      Doskey
  2249                                  ;      49h      DOS 5.x install 
  2250                                  ;      4Ah      Multi Purpose
  2251                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2252                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2253                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2254                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2255                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2256                                  ;
  2257                                  ;                multSmartdrv           10h
  2258                                  ;                multMagicdrv           11h
  2259                                  ;      4Bh      Task Switcher API
  2260                                  ;
  2261                                  ;      4Ch      APPS            APM         Advanced power management
  2262                                  ;      4Dh      Kana Kanji Converter, MSKK
  2263                                  ;
  2264                                  ;      51h      ODI real mode support driver (for Chicago)
  2265                                  ;
  2266                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2267                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2268                                  ;
  2269                                  ;      55h      COMMAND.COM
  2270                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2271                                  ;                                           instance of command.com
  2272                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2273                                  ;                                           instance of ROM COMMAND
  2274                                  ;      56h      Sewell Development
  2275                                  ;               INTERLNK
  2276                                  ;
  2277                                  ;      57h      Iomega Corp.
  2278                                  ;
  2279                                  ;      ABh      Unspecified IBM use
  2280                                  ;      ACh      Graphics
  2281                                  ;      ADh      NLS (toronto)
  2282                                  ;      AEh
  2283                                  ;      AFh      Mode
  2284                                  ;      B0h      GRAFTABL        GRAFTABL
  2285                                  ;
  2286                                  ;      D7h      Banyan VINES
  2287                                  ; ---------------------------------------------------------------------------
  2288                                  
  2289                                  ;MUX 00-3F reserverd for IBM
  2290                                  ;MUX 80-BF reserverd for IBM
  2291                                  
  2292                                  ;MUX 40-7F reserved for Microsoft
  2293                                  
  2294                                  ;MUX C0-FF users
  2295                                  
  2296                                  MultSHARE   EQU     10h 		; sharer
  2297                                      ;	1   MFT_enter
  2298                                      ;	2   MFTClose
  2299                                      ;	3   MFTclU
  2300                                      ;	4   MFTCloseP
  2301                                      ;	5   MFTCloN
  2302                                      ;	6   set_block
  2303                                      ;	7   clr_block
  2304                                      ;	8   chk_block
  2305                                      ;	9   MFT_get
  2306                                      ;	10  ShSave
  2307                                      ;	11  ShChk
  2308                                      ;	12  ShCol
  2309                                      ;	13  ShCloseFile
  2310                                  
  2311                                  MultNET     EQU     11h 		; Network support
  2312                                  MultIFS     EQU     11h                 ; Network support
  2313                                      ;   1   IFS_RMDIR
  2314                                      ;   2   IFS_SEQ_RMDIR
  2315                                      ;   3   IFS_MKDIR
  2316                                      ;   4   IFS_SEQ_MKDIR
  2317                                      ;   5   IFS_CHDIR
  2318                                      ;   6   IFS_CLOSE
  2319                                      ;   7   IFS_COMMIT
  2320                                      ;   8   IFS_READ
  2321                                      ;   9   IFS_WRITE
  2322                                      ;   10  IFS_LOCK
  2323                                      ;   11  IFS_UNLOCK
  2324                                      ;   12  IFS_DISK_INFO
  2325                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2326                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2327                                      ;   15  IFS_GET_FILE_INFO
  2328                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2329                                      ;   17  IFS_RENAME
  2330                                      ;   18  IFS_SEQ_RENAME
  2331                                      ;   19  IFS_DELETE
  2332                                      ;   20  IFS_SEQ_DELETE
  2333                                      ;   21  IFS_OPEN
  2334                                      ;   22  IFS_SEQ_OPEN
  2335                                      ;   23  IFS_CREATE
  2336                                      ;   24  IFS_SEQ_CREATE
  2337                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2338                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2339                                      ;   27  IFS_SEARCH_FIRST
  2340                                      ;   28  IFS_SEARCH_NEXT
  2341                                      ;   29  IFS_ABORT
  2342                                      ;   30  IFS_ASSOPER
  2343                                      ;   31  Printer_SET_STRING
  2344                                      ;   32  IFSFlushBuf
  2345                                      ;   33  IFSBufWrite
  2346                                      ;   34  IFSResetEnvironment
  2347                                      ;   35  IFSSpoolCheck
  2348                                      ;   36  IFSSpoolClose
  2349                                      ;   37  IFSDeviceOper
  2350                                      ;   38  IFSSpoolEchoCheck
  2351                                      ;   39      - - -   Unused   - - -
  2352                                      ;   40      - - -   Unused   - - -
  2353                                      ;   41      - - -   Unused   - - -
  2354                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2355                                      ;   43  DEVICE_IOCTL
  2356                                      ;   44  IFS_UPDATE_CB
  2357                                      ;   45  IFS_FILE_XATTRIBUTES
  2358                                      ;   46  IFS_XOPEN
  2359                                      ;   47  IFS_DEPENDENT_IOCTL
  2360                                  
  2361                                  MultDOS     EQU     12h 		; DOS call back
  2362                                      ;	1   DOS_CLOSE
  2363                                      ;	2   RECSET
  2364                                      ;	3   Get DOSGROUP
  2365                                      ;	4   PATHCHRCMP
  2366                                      ;	5   OUT
  2367                                      ;	6   NET_I24_ENTRY
  2368                                      ;	7   PLACEBUF
  2369                                      ;	8   FREE_SFT
  2370                                      ;	9   BUFWRITE
  2371                                      ;	10  SHARE_VIOLATION
  2372                                      ;	11  SHARE_ERROR
  2373                                      ;	12  SET_SFT_MODE
  2374                                      ;	13  DATE16
  2375                                      ;	14  SETVISIT
  2376                                      ;	15  SCANPLACE
  2377                                      ;	16  SKIPVISIT
  2378                                      ;	17  StrCpy
  2379                                      ;	18  StrLen
  2380                                      ;	19  UCase
  2381                                      ;	20  POINTCOMP
  2382                                      ;	21  CHECKFLUSH
  2383                                      ;	22  SFFromSFN
  2384                                      ;	23  GetCDSFromDrv
  2385                                      ;	24  Get_User_Stack
  2386                                      ;	25  GetThisDrv
  2387                                      ;	26  DriveFromText
  2388                                      ;	27  SETYEAR
  2389                                      ;	28  DSUM
  2390                                      ;	29  DSLIDE
  2391                                      ;	30  StrCmp
  2392                                      ;	31  initcds
  2393                                      ;	32  pjfnfromhandle
  2394                                      ;	33  $NameTrans
  2395                                      ;	34  CAL_LK
  2396                                      ;	35  DEVNAME
  2397                                      ;	36  Idle
  2398                                      ;   37  DStrLen
  2399                                      ;   38  NLS_OPEN      DOS 3.3
  2400                                      ;   39  $CLOSE        DOS 3.3
  2401                                      ;   40  NLS_LSEEK     DOS 3.3
  2402                                      ;   41  $READ         DOS 3.3
  2403                                      ;   42  FastInit      DOS 4.0
  2404                                      ;   43  NLS_IOCTL     DOS 3.3
  2405                                      ;   44  GetDevList    DOS 3.3
  2406                                      ;   45  NLS_GETEXT    DOS 3.3
  2407                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2408                                      ;   47  FAKE_VERSION  DOS 4.0
  2409                                  
  2410                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2411                                      ;	0   NLSInstall
  2412                                      ;	1   ChgCodePage
  2413                                      ;	2   GetExtInfo
  2414                                      ;	3   SetCodePage
  2415                                      ;	4   GetCntry
  2416                                  
  2417                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2418                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2419                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2420                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2421                                  
  2422                                  multMULT        EQU     4Ah
  2423                                  multMAGIC       EQU     256*multMULT + 11h
  2424                                  multMULTRPLTOM  EQU     06h
  2425                                  
  2426                                      ;   0   swap disk function for single floppy drive m/cs
  2427                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2428                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2429                                      ;       drive
  2430                                      ;
  2431                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2432                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2433                                      ;       returns pointer in ES:DI
  2434                                      ;
  2435                                      ;   3-4 currently used by nobody
  2436                                      ;   5   Switcher API
  2437                                      ;   6   Top of Memory for RPL.
  2438                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2439                                      ;           code present in TOM should respond with a new TOM in DX
  2440                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2441                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2442                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2443                                      ;           It is the responsibility of RPL program to release the mem.
  2444                                      ;   7   Reserved for PROTMAN support.
  2445                                      ;  10   smartdrv 4.0
  2446                                      ;  11   dblspace api
  2447                                      ;  12   MRCI     api
  2448                                      ;  13   dblspace/mrci stealth packet api
  2449                                  
  2450                                  MultAPM     EQU     4ch             ; Obselete ???
  2451                                      ;       00h     APM_VER_CHK
  2452                                      ;       01h     APM_SUS_SYS_REQ
  2453                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2454                                  
  2455                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2456                                  				;  APM events                         ; M036
  2457                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2458                                  
  2459                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2460                                  ;	  it calls Multdos 42 to set up an entry routine address
  2461                                      ;	0   Install status  (reserved)
  2462                                      ;	1   Lookup
  2463                                      ;	2   Insert
  2464                                      ;	3   Delete
  2465                                      ;	4   Purge	    (reserved)
  2466                                  
  2467                                  ;============================================================================
  2468                                  ; FIND.INC (MSDOS 6.0, 1991)
  2469                                  ;============================================================================
  2470                                  ; 17/05/2019 - Retro DOS v4.0
  2471                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2472                                  
  2473                                  ;Break	<find first/next buffer>
  2474                                  
  2475                                  struc find_buf
  2476 00000000 ??                      .drive:	    resb 1		; drive of search
  2477 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2478 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2479 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2480 0000000F ????                    .DirStart:  resw 1		; DirStart
  2481 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2482 00000015 ??                      .attr:	    resb 1		; attribute found
  2483 00000016 ????                    .time:	    resw 1		; time
  2484 00000018 ????                    .date:	    resw 1		; date
  2485 0000001A ????                    .size_l:    resw 1		; low(size)
  2486 0000001C ????                    .size_h:    resw 1		; high(size)
  2487 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2488                                  .size:
  2489                                  endstruc
  2490                                  
  2491                                  ;============================================================================
  2492                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2493                                  ;============================================================================
  2494                                  ; 29/04/2019 - Retro DOS v4.0
  2495                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2496                                  
  2497                                  ;Equates for COUNTRY INFORMATION.
  2498                                  SetCountryInfo	EQU	1	;country info
  2499                                  SetUcase	EQU	2	;uppercase table
  2500                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2501                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2502                                  SetFileList	EQU	5	;valid file character list
  2503                                  SetCollate	EQU	6	;collating sequence
  2504                                  SetDBCS 	EQU	7	;double byte character set
  2505                                  SetALL		EQU	-1	;all the entries
  2506                                  
  2507                                  ;DOS country and code page information table structure.
  2508                                  ;Internally, IBMDOS gives a pointer to this table.
  2509                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2510                                  ;this structure.
  2511                                  
  2512                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2513 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2514 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2515 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2516 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2517 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2518 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2519                                  
  2520 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2521 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2522                                  
  2523 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2524 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2525                                  
  2526 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2527 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2528                                  
  2529                                  ; MSDOS 6.0
  2530 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2531 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2532                                  
  2533 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2534 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2535 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2536 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2537 0000006C ????                    .ccDFormat:		resw 1	;date format
  2538 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2539 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2540 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2541 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2542 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2543 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2544 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2545 0000007D ??                      .ccTFormat:		resb 1	;time format
  2546 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2547 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2548 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2549                                  .size:
  2550                                  endstruc
  2551                                  
  2552                                  ;Ucase table
  2553                                  struc CC_UCASE_TAB
  2554 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2555 00000002 <res 80h>               .ccUcase_data:		resb 128
  2556                                  endstruc
  2557                                  
  2558                                  ;File Ucase table
  2559                                  struc CC_FILE_UCASE_TAB
  2560 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2561 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2562                                  endstruc
  2563                                  
  2564                                  ;File char list
  2565                                  struc CC_FILE_CHAR_TAB
  2566 00000000 ????                    .ccFilechar_leng:	resw 1
  2567 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2568                                  endstruc
  2569                                  
  2570                                  ;collate table
  2571                                  struc CC_COLLATE_TAB
  2572 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2573 00000002 <res 100h>              .ccCollate_data:	resb 256
  2574                                  endstruc
  2575                                  
  2576                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2577                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2578                                  
  2579                                  ; 06/08/2018
  2580                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2581                                  
  2582                                  ;CAPITALIZATION equates
  2583                                  CAP_ONE_CHAR	equ	20H
  2584                                  CAP_STRING	equ	21H
  2585                                  CAP_ASCIIZ	equ	22H
  2586                                  CHECK_YES_NO	equ	23H
  2587                                  UPPER_TABLE	equ	80H
  2588                                  
  2589                                  ;NLS_YES	equ	59H  ; 'Y'
  2590                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2591                                  ;NLS_NO		equ	4EH  ; 'N'	
  2592                                  ;NLS_no2	equ	6EH  ; 'n'	
  2593                                  
  2594                                  ;============================================================================
  2595                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2596                                  ;============================================================================
  2597                                  ; 25/04/2019 - Retro DOS v4.0
  2598                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2599                                  
  2600                                  ;BREAK <Current directory list structure>
  2601                                  
  2602                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2603                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2604                                  ;									   ;
  2605                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2606                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2607                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2608                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2609                                  ; of the disk being changed or if the path must be recracked.		   ;
  2610                                  ;
  2611                                  ;	Some pathnames have special preambles, such as
  2612                                  ;
  2613                                  ;		\\machine\sharename\...
  2614                                  ;	For these pathnames we can't allow ".." processing to back us
  2615                                  ;	up into the special front part of the name.  The CURDIR_END field
  2616                                  ;	holds the address of the seperator character which marks
  2617                                  ;	the split between the special preamble and the regular
  2618                                  ;	path list; ".." processing isn't allowed to back us up past
  2619                                  ;	(i.e., before) CURDIR_END
  2620                                  ;	For the root, it points at the leading /.  For net
  2621                                  ;	assignments it points at the end (nul) of the initial assignment:
  2622                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2623                                  ;	  ^		 ^		     ^
  2624                                  
  2625                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2626                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2627                                  
  2628                                  struc curdir	; curdir_list
  2629 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2630 00000043 ????                    .flags:		resw 1			; various flags
  2631 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2632 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2633 0000004D ????                    .user_word:	resw 1
  2634 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2635                                  ; MSDOS 6.0
  2636 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2637 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2638 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2639                                  .size:
  2640                                  endstruc
  2641                                  
  2642                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2643                                  
  2644                                  %define curdir_netID curdir_ID  ; dword
  2645                                  
  2646                                  ;**	Flag values for CURDIR_FLAGS
  2647                                  
  2648                                  curdir_isnet	EQU	1000000000000000B
  2649                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2650                                  curdir_inuse	EQU	0100000000000000B
  2651                                  curdir_splice	EQU	0010000000000000B
  2652                                  curdir_local	EQU	0001000000000000B
  2653                                  
  2654                                  ;									   ;
  2655                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2657                                  
  2658                                  ;============================================================================
  2659                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2660                                  ;============================================================================
  2661                                  ; 09/07/2018 - Retro DOS v3.0
  2662                                  
  2663                                  ;BREAK <File Control Block definition>
  2664                                  
  2665                                  ;
  2666                                  ; Field definition for FCBs
  2667                                  ; The FCB has the following structure:
  2668                                  ;
  2669                                  ;	+---------------------------+
  2670                                  ;	|   Drive indicator(byte)   |
  2671                                  ;	+---------------------------+
  2672                                  ;	|    Filename (8 chars)     |
  2673                                  ;	+---------------------------+
  2674                                  ;	|    Extension (3 chars)    |
  2675                                  ;	+---------------------------+
  2676                                  ;	|   Current Extent(word)    |
  2677                                  ;	+---------------------------+
  2678                                  ;	|    Record size (word)     |
  2679                                  ;	+---------------------------+
  2680                                  ;	|    File Size (2 words)    |
  2681                                  ;	+---------------------------+
  2682                                  ;	|	Date of write	    |
  2683                                  ;	+---------------------------+
  2684                                  ;	|	Time of write	    |
  2685                                  ;	+---------------------------+
  2686                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2687                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2688                                  ;									   ;
  2689                                  ;	+---------------------------+
  2690                                  ;	|   8 bytes reserved	    |
  2691                                  ;	+---------------------------+
  2692                                  ;									   ;
  2693                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2694                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2695                                  ;	|    next record number     |
  2696                                  ;	+---------------------------+
  2697                                  ;	|   random record number    |
  2698                                  ;	+---------------------------+
  2699                                  ;
  2700                                  
  2701                                  struc	SYS_FCB
  2702 00000000 ??                      .drive:	resb 1
  2703 00000001 ????????????????        .name:	resb 8
  2704 00000009 ??????                  .ext:	resb 3
  2705 0000000C ????                    .EXTENT: resw 1
  2706 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2707 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2708                                  				; following word
  2709 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2710 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2711 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2712                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2713                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2714                                  ;									   ;
  2715 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2716                                  ;									   ;
  2717                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2718                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2719 00000020 ??                      .NR:	resb 1			; Next record
  2720 00000021 ????????                .RR:	resb 4			; Random record
  2721                                  .size:
  2722                                  endstruc
  2723                                  
  2724                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2725                                  				; NEXT
  2726                                  ; 20/07/2018
  2727                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2728                                  
  2729                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2730                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2731                                  ; NOTE about this byte (fcb_nsl_drive)
  2732                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2733                                  ;	00 means a local file or device with sharing loaded
  2734                                  ;	10 means a remote (network) file
  2735                                  ;	01 means a local file with no sharing loaded
  2736                                  ;	11 means a local device with no sharing loaded
  2737                                  
  2738                                  ; 20/07/2018
  2739                                  
  2740                                  ;
  2741                                  ; Network FCB
  2742                                  ;
  2743                                  
  2744                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2745                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2746                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2747                                  
  2748                                  ;
  2749                                  ; No sharing local file FCB
  2750                                  ;
  2751                                  
  2752                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2753                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2754                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2755                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2756                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2757                                  
  2758                                  ;
  2759                                  ; No sharing local device FCB
  2760                                  ;
  2761                                  
  2762                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2763                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2764                                  
  2765                                  ;
  2766                                  ; Sharing local FCB
  2767                                  ;
  2768                                  
  2769                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2770                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2771                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2772                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2773                                  
  2774                                  ;
  2775                                  ; Bogusness:  the four cases are:
  2776                                  ;
  2777                                  ;   local file	    00
  2778                                  ;   local device    40
  2779                                  ;   local sharing   C0
  2780                                  ;   network	    80
  2781                                  ;
  2782                                  ; Since sharing and network collide, we cannot use a test instruction for
  2783                                  ; deciding whether a network or a share check in involved
  2784                                  ;
  2785                                  FCBDEVICE   EQU 040h
  2786                                  FCBNETWORK  EQU 080h
  2787                                  FCBSHARE    EQU 0C0h
  2788                                  
  2789                                  ; FCBSPECIAL must be able to mask off both net and share
  2790                                  FCBSPECIAL  EQU 080h
  2791                                  FCBMASK     EQU 0C0h
  2792                                  
  2793                                  ;============================================================================
  2794                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2795                                  ;============================================================================
  2796                                  ; 11/07/2018 - Retro DOS v3.0
  2797                                  ; 25/04/2019 - Retro DOS v4.0
  2798                                  
  2799                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2800 00000000 ??                      .dirpos:	resb 1
  2801 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2802                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2803 00000005 ????                    .clusnum:	resw 1
  2804 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2805 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2806                                  .size:
  2807                                  endstruc
  2808                                  
  2809                                  ; 23/07/2018
  2810                                  ;FASTOPEN NAME CACHING Subfunctions
  2811                                  FONC_Look_up	equ	1
  2812                                  FONC_insert	equ	2
  2813                                  FONC_delete	equ	3
  2814                                  FONC_update	equ	4
  2815                                  FONC_purge	equ	5	;reserved for the future use.
  2816                                  FONC_Rename	equ	6	;AN001
  2817                                  
  2818                                  ; 27/07/2018
  2819                                  ;FastOpen Data Structure
  2820                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2821 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2822 00000002 ????????                .name_caching:	resd 1
  2823                                  ; MSDOS 6.0
  2824                                  ;.fatchain_caching: resd 1	;reserved for future use
  2825                                  .size:
  2826                                  endstruc
  2827                                  
  2828                                  ; 27/07/2018
  2829                                  ;Equates used in DOS.
  2830                                  FastOpen_Set	       equ     00000001b
  2831                                  FastOpen_Reset	       equ     11111110b
  2832                                  Lookup_Success	       equ     00000010b
  2833                                  Lookup_Reset	       equ     11111101b
  2834                                  Special_Fill_Set       equ     00000100b
  2835                                  Special_Fill_Reset     equ     11111011b
  2836                                  No_Lookup	       equ     00001000b
  2837                                  Set_For_Search	       equ     00010000b	;DCR 167
  2838                                  
  2839                                  ; 09/08/2018 
  2840                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2841                                  ; Fastxxx equates
  2842                                  FastOpen_ID	   equ	   1
  2843                                  FastSeek_ID	   equ	   2
  2844                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2845                                  
  2846                                  ;Structure definitions
  2847                                  ;
  2848                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2849 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2850 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2851                                  endstruc
  2852                                  
  2853                                  ;============================================================================
  2854                                  ; LOCK.INC, MSDOS 6.0, 1991
  2855                                  ;============================================================================
  2856                                  ; 14/07/2018 - Retro DOS v3.0
  2857                                  
  2858                                  ;**	LOCK.INC - Definitions for Record Locking
  2859                                  
  2860                                  ;**	LOCK functions
  2861                                  
  2862                                  LOCK_ALL	    equ    0
  2863                                  UNLOCK_ALL	    equ    1
  2864                                  LOCK_MUL_RANGE	    equ    2
  2865                                  UNLOCK_MUL_RANGE    equ    3
  2866                                  LOCK_READ	    equ    4
  2867                                  WRITE_UNLOCK	    equ    5
  2868                                  LOCK_ADD	    equ    6
  2869                                  
  2870                                  ;**	Structure for Lock buffer
  2871                                  
  2872                                  struc LockBuf
  2873 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2874 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2875                                  endstruc
  2876                                  
  2877                                  ;============================================================================
  2878                                  ; DPL.ASM, MSDOS 6.0, 1991
  2879                                  ;============================================================================
  2880                                  ; 04/08/2018 - Retro DOS v3.0
  2881                                  
  2882                                  ; (SRVCALL.ASM)
  2883                                  
  2884                                  struc DPL
  2885 00000000 ????                    .AX:	resw	1	; AX register
  2886 00000002 ????                    .BX:	resw	1	; BX register
  2887 00000004 ????                    .CX:	resw	1	; CX register
  2888 00000006 ????                    .DX:	resw	1	; DX register
  2889 00000008 ????                    .SI:	resw	1	; SI register
  2890 0000000A ????                    .DI:	resw	1	; DI register
  2891 0000000C ????                    .DS:	resw	1	; DS register
  2892 0000000E ????                    .ES:	resw	1	; ES register
  2893 00000010 ????                    .rsrvd: resw	1	; Reserved
  2894 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2895 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2896                                  .size:
  2897                                  endstruc
  2898                                   
  2899                                  ;----------------------------------------------------------------------------
  2900                                  ; DOSDATA
  2901                                  ;----------------------------------------------------------------------------
  2902                                  ;============================================================================
  2903                                  ; 24/04/2019 - Retro DOS v4.0
  2904                                  
  2905                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2906                                  		; ((just after resident IO.SYS code&data))
  2907                                  
  2908                                  ;============================================================================
  2909                                  ; WIN386.INC, MSDOS 6.0, 1991
  2910                                  ;============================================================================
  2911                                  ; 24/04/2019 - Retro DOS 4.0
  2912                                  
  2913                                  ;
  2914                                  ;  Symbols and structures relating to WIN386 support.
  2915                                  ;
  2916                                  ;  Used by files in both the DOS and the BIOS.
  2917                                  ;
  2918                                  ;  Created: 7-13-89 by MRW
  2919                                  ;
  2920                                  
  2921                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2922                                  
  2923                                  MultWin386		equ     16h	; Int 2f multiplex number
  2924                                  
  2925                                  Win386_Init		equ	05h	; Win386 initialization
  2926                                  Win386_Exit		equ	06h	; Win386 exit
  2927                                  Win386_Devcall		equ	07h	; Win386 device call out
  2928                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2929                                  
  2930                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2931                                  ; answer call outs from the DOSMGR
  2932                                  
  2933                                  Win386_DOSMGR		equ	15H
  2934                                  
  2935                                  ; The following structures are used to communicate instance data to 
  2936                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2937                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2938                                  
  2939                                  struc Win386_SIS	; Startup Info Structure
  2940 00000000 ????                     .Version:		resb	2	; db 3, 0
  2941 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2942 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2943 0000000A ????????                 .Reference_Data:	resd	1
  2944 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2945                                  endstruc
  2946                                  
  2947                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2948                                  
  2949                                  struc Win386_IIS	; Instance Item Structure
  2950 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2951 00000004 ????                    .Size:			resw	1	; size of an instance item
  2952                                  endstruc
  2953                                  
  2954                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2955                                  
  2956                                  ;Win386 DOSMGR function return values to indicate operation done
  2957                                  
  2958                                  WIN_OP_DONE		equ	0B97Ch	; 
  2959                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2960                                  
  2961                                  ;M021
  2962                                  ; WInoldap callout multiplex number
  2963                                  
  2964                                  WINOLDAP		equ	46h	;
  2965                                  
  2966                                  ;============================================================================
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; DOSCODE
  2969                                  ;----------------------------------------------------------------------------
  2970                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2971                                  
  2972                                  ;============================================================================
  2973                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2974                                  ;============================================================================
  2975                                  ; 16/07/2018 - Retro DOS 3.0
  2976                                  ;----------------------------------------------------------------------------
  2977                                  ; 24/04/2019 - Retro DOS 4.0
  2978                                  
  2979                                  ; MSDOS 6.0
  2980                                  ;----------------------------------------------------------------------------
  2981                                  ; FILE : ORIGIN.INC
  2982                                  ;----------------------------------------------------------------------------
  2983                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2984                                  ; is used for ORGing the DOS code.
  2985                                  ;
  2986                                  ; Brief Description of the necessacity of this ORG:
  2987                                  ; -------------------------------------------------
  2988                                  ;
  2989                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2990                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2991                                  ; This means programs running out off the HMA must use non-zero offset base
  2992                                  ; addresses. It also means that if we're running multiple programs from the
  2993                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2994                                  ; HMA segments that precede it.
  2995                                  ; 
  2996                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2997                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2998                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2999                                  ; selecting segment values between f124h and ffffh it could be located 
  3000                                  ; anywhere in the HMA. The problem with this is that programs with such 
  3001                                  ; high ORGs would not be able to run in low RAM.
  3002                                  ;
  3003                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  3004                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  3005                                  ; the following solution has been implemented:
  3006                                  ;
  3007                                  ; The Bios Code segment will have a very small offset and run at the very
  3008                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  3009                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  3010                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  3011                                  ; possible physical address at which DOS code will run, while still providing
  3012                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  3013                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  3014                                  ; mostly true.
  3015                                  ;
  3016                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3017                                  ; putting this value after the first jmp instruction in the DOS code in
  3018                                  ; mshead.asm. 
  3019                                  ;
  3020                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3021                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3022                                  ;
  3023                                  ; Revision History:
  3024                                  ;
  3025                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3026                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3027                                  ;
  3028                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3029                                  ; A utility called getsize will obtain the corresponding values from msdos
  3030                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3031                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3032                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3033                                  ; dependant on that.				  --- Apr 3 '90
  3034                                  ;
  3035                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3036                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3037                                  ; so the offset will not need to be included at the beginning of the code
  3038                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3039                                  ; at offset zero within the segment.
  3040                                  ; 
  3041                                  ;
  3042                                  ;--------------------------------------------------------------------------
  3043                                  
  3044                                  BIODATASTART	EQU	00700h
  3045                                  ;include	bdsize.inc	; this sets the values:
  3046                                  				;	BIODATASIZ
  3047                                  				;	BIOCODESIZ
  3048                                  				;	DOSDATASIZ
  3049                                  
  3050                                  ; 05/12/2022
  3051                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3052                                  			; 0900h for MSDOS 5.0 IO.SYS
  3053                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3054                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3055                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3056                                  			; 1370h for MSDOS 5.0 IO.SYS
  3057                                  ;ifndef ROMDOS
  3058                                  ;
  3059                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3060                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3061                                  ;
  3062                                  ;else
  3063                                  ;
  3064                                  ;BYTSTART	EQU	0
  3065                                  ;PARASTART	EQU	0
  3066                                  ;
  3067                                  ;endif ; ROMDOS
  3068                                  
  3069                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3070                                  ; -----------------------------------------------------------------
  3071                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3072                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3073                                  ;DOSDATASIZE equ MSDAT001E
  3074                                  ; 05/12/2022
  3075                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3076                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3077                                  			    ; of DOSDATA (in low memory) while
  3078                                  			    ; dos/kernel code starts just after 
  3079                                  			    ; this data block ((org = DOSDATASIZE))
  3080                                  			    ; (in low memory or in HMA)	
  3081                                  ; -----------------------------------------------------------------
  3082                                  
  3083                                  ; 04/11/2022	
  3084                                  ; -----------------------------------------------------------------	
  3085                                  ; NOTE:
  3086                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3087                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3088                                  ; -----------------------------------------------------------------
  3089                                  
  3090                                  ; ----------------------------------------------------------------------------
  3091                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3092                                  ; ----------------------------------------------------------------------------
  3093                                  
  3094                                  ;segment .code vstart=3DD0h ; 06/12/2022
  3095                                  ; 29/09/2023
  3096                                  segment .code vstart=3DE0h ; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
  3097                                  								
  3098                                  ; ============================================================================
  3099                                  
  3100                                  
  3101                                  ;[ORG 3DE0h]
  3102                                  
  3103                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3104                                  
  3105                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3106                                  
  3107                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3108                                  	;PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3109                                  			     ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3110                                  	
  3111                                  	; 29/09/2023 
  3112                                  	; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3113                                  	PARASTART equ 3DE0h	; (MSDOS 6.22 MSDOS.SYS)
  3114                                  
  3115                                  	[ORG PARASTART]	
  3116                                  
  3117                                  _$STARTCODE:
  3118                                  
  3119                                  ;PARASTART:
  3120 00000000 E90875                          JMP     DOSINIT
  3121                                  
  3122                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3123                                  	; 04/11/2022
  3124 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3125                                  
  3126                                  BioDataSeg:
  3127 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3128                                  
  3129                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3130                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3131                                  ; allows getting the DOS data segment without going through the 
  3132                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3133                                  
  3134                                  DosDSeg:
  3135 00000007 0000                    	dw	0
  3136                                  	
  3137                                  ;============================================================================
  3138                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3139                                  ;============================================================================
  3140                                  ; 16/07/2018 - Retro DOS 3.0
  3141                                  ; 29/04/2019 - Retro DOS 4.0
  3142                                  
  3143                                  	; (MSDOS version)
  3144                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3145                                  	;db	6
  3146                                  	;db	20
  3147                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3148                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3149                                  	;db	5
  3150                                  	;db	0	
  3151                                  
  3152                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3153                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3154 00000009 06                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3155 0000000A 16                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3156                                  
  3157                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3158                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3159                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3160                                  
  3161                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3162                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3163                                  ;
  3164                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3165                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3166                                  
  3167                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3168                                  ; those error codes which are "allowed" for each system call. If the error
  3169                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3170                                  ; is to return the "real" error via Extended error, and one of the allowed
  3171                                  ; errors on the actual call.
  3172                                  ;
  3173                                  ; The table is organized as follows:
  3174                                  ;
  3175                                  ;    Each entry in the table is of variable size, but the first
  3176                                  ;       two bytes are always:
  3177                                  ;
  3178                                  ;       Call#,Cnt of bytes following this byte
  3179                                  ;
  3180                                  ; EXAMPLE:
  3181                                  ;       Call 61 (OPEN)
  3182                                  ;
  3183                                  ;       DB      61,5,12,3,2,4,5
  3184                                  ;
  3185                                  ;       61 is the AH INT 21 call value for OPEN.
  3186                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3187                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3188                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3189                                  ;       this case 5).  The last value will be the one returned on the call if
  3190                                  ;       the "real" error is not one of the allowed ones.
  3191                                  ;
  3192                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3193                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3194                                  ;   call, so set up an Extended error and leave the current error code alone.
  3195                                  ;
  3196                                  ; The table is terminated by a call value of 0FFh
  3197                                  
  3198                                  ;PUBLIC I21_MAP_E_TAB
  3199                                  	; 10/08/2018
  3200                                  
  3201                                  ; 29/04/2019
  3202                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3203                                  ; 04/11/2022
  3204                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3205                                  
  3206                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3207 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3208 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3209 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3210 00000018 0205                        DB          error_file_not_found,error_access_denied
  3211 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3212 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3213 00000022 04                          DB          error_too_many_open_files
  3214 00000023 05                          DB          error_access_denied
  3215                                      ; MSDOS 6.0
  3216 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3217 00000029 04                          DB          error_too_many_open_files
  3218 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3219                                      ; MSDOS 3.3
  3220                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3221                                      ;DB		error_too_many_open_files,error_access_denied
  3222 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3223 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3224 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3225 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3226 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3227 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3228 00000045 05                          DB          error_access_denied
  3229 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3230 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3231 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3232 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3233                                      ; MSDOS 6.0	
  3234 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3235                                      ; MSDOS 3.3	
  3236                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3237 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3238 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3239 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3240 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3241 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3242 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3243 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3244 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3245                                      ; MSDOS 6.0
  3246 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3247 0000007D 1005                        DB		error_current_directory,error_access_denied
  3248                                      ; MSDOS 3.3
  3249                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3250                                      ;DB		error_access_denied
  3251                                      ; MSDOS 6.0	
  3252 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3253 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3254                                      ; MSDOS 3.3	
  3255                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3256 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3257 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3258 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3259 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3260 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3261 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3262 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3263 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3264 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3265 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3266 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3267 000000AA 01                          DB              error_invalid_function
  3268                                      ; MSDOS 6.0		
  3269 000000AB 6C0A                        DB	ExtOpen,10
  3270 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3271 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3272 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3273 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3274 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3275 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3276 000000BD FF                          DB  0FFh
  3277                                  
  3278                                  ;19/09/2023
  3279                                  ;22/12/2022
  3280                                  ;04/11/2022	
  3281                                  ;29/04/2019 - Retro DOS v4.0
  3282                                  ;============================================================================
  3283                                  ; 	Retro DOS v4.0
  3284                                  ;============================================================================
  3285 000000BE 00                      	db 	0
  3286                                  RETRODOSMSG:
  3287 000000BF 0D0A                    	db	13,10
  3288                                  	;;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3289                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3290                                  	;;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3291                                  	;;db	"Retro DOS v4.2 by Erdogan Tan [2022]"	; 30/12/2022
  3292                                  	;db	"Retro DOS v4.2 by Erdogan Tan [2023]"
  3293 000000C1 526574726F20444F53-     	db	"Retro DOS v4.2 by Erdogan Tan [2024]"	; 05/01/2024
  3293 000000CA 2076342E3220627920-
  3293 000000D3 4572646F67616E2054-
  3293 000000DC 616E205B323032345D 
  3294 000000E5 0D0A2400                	db	13,10,"$", 0 
  3295                                  
  3296                                  ;============================================================================
  3297                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3298                                  ;============================================================================
  3299                                  ; 11/07/2018 - Retro DOS v3.0
  3300                                  
  3301                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3302 000000E9 90                      align 2
  3303                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3304                                  
  3305                                  ; Standard Functions
  3306                                  ;DISPATCH  LABEL WORD
  3307                                  DISPATCH:
  3308                                  	; 16/07/2018 - Retro DOS v3.0
  3309                                  	; (MSDOS 3.3)
  3310                                  
  3311                                  ; 29/04/2019
  3312                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3313                                  
  3314                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3315                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3316                                  
  3317 000000EA [9860]                          short_addr  _$ABORT			    ;  0      0
  3318 000000EC [2A16]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3319 000000EE [3316]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3320 000000F0 [E516]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3321 000000F2 [0017]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3322 000000F4 [0617]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3323 000000F6 [7115]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3324 000000F8 [9D15]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3325 000000FA [4C13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3326 000000FC [A413]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3327 000000FE [B013]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3328 00000100 [1A17]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3329 00000102 [2417]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3330 00000104 [790F]                          short_addr  _$DISK_RESET		    ; 13      D
  3331 00000106 [600E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3332 00000108 [E81D]                          short_addr  _$FCB_OPEN			    ; 15      F
  3333 0000010A [C317]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3334 0000010C [D71E]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3335 0000010E [1D1F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3336 00000110 [6917]                          short_addr  _$FCB_DELETE		    ; 19     13
  3337 00000112 [3F1C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3338 00000114 [431C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3339 00000116 [C71E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3340 00000118 [2F18]                          short_addr  _$FCB_RENAME		    ; 23     17
  3341                                  	; 16/07/2018
  3342                                          ;short_addr _CPMFUNC			    ; 24     18	
  3343 0000011A [4D06]                          short_addr  NO_OP			    ; 24     18
  3344 0000011C [5B0E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3345 0000011E [500E]                          short_addr  _$SET_DMA			    ; 26     1A
  3346                                  
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3349                                  ;                                                                          ;
  3350 00000120 [080F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3351 00000122 [0A0F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3352                                  ;                                                                          ;
  3353                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3354                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3355                                  
  3356                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3357                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3358                                  
  3359                                  ; 08/07/2018 - Retro DOS v3.0
  3360                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3361                                  
  3362 00000124 [4D06]                  	short_addr  NO_OP			    ; 29     1D
  3363 00000126 [4D06]                  	short_addr  NO_OP			    ; 30     1E
  3364                                  
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000128 [490F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372                                          ;short_addr _CPMFUNC			    ; 32     20
  3373                                  
  3374                                  ; 08/07/2018 - Retro DOS v3.0
  3375                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3376                                  
  3377 0000012A [4D06]                  	short_addr  NO_OP			    ; 32     20
  3378                                  
  3379 0000012C [471C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3380 0000012E [4B1C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3381 00000130 [7B17]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3382 00000132 [5117]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3383                                  
  3384                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3385                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3386                                  
  3387                                  ; Extended Functions
  3388 00000134 [810E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3389                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;                                                                          ;
  3392 00000136 [8610]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3393                                  ;                                                                          ;
  3394                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3395                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3396 00000138 [3B1C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3397 0000013A [371C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3398 0000013C [FD0E]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3399 0000013E [580A]                          short_addr  _$GET_DATE                      ; 42     2A
  3400 00000140 [750A]                          short_addr  _$SET_DATE                      ; 43     2B
  3401 00000142 [940A]                          short_addr  _$GET_TIME                      ; 44     2C
  3402 00000144 [A50A]                          short_addr  _$SET_TIME                      ; 45     2D
  3403 00000146 [410C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3404                                  
  3405                                  ; Extended functionality group
  3406 00000148 [3D0E]                          short_addr  _$GET_DMA                       ; 47     2F
  3407 0000014A [1A0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3408 0000014C [3C60]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3409                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3410                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3411                                  ;                                                                          ;
  3412 0000014E [4B0F]                          short_addr  _$GET_DPB			    ; 50     32
  3413                                  ;                                                                          ;
  3414                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3416 00000150 [6702]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3417 00000152 [330F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3418 00000154 [720E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3419 00000156 [1A0E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3420 00000158 [AE0E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3421 0000015A [480C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3422                                  ; XENIX CALLS
  3423                                  ;   Directory Group
  3424 0000015C [A321]                          short_addr  _$MKDIR			    ; 57     39
  3425 0000015E [EF20]                          short_addr  _$RMDIR			    ; 58     3A
  3426 00000160 [2A21]                          short_addr  _$CHDIR			    ; 59     3B
  3427                                  ;   File Group
  3428 00000162 [436E]                          short_addr  _$CREAT			    ; 60     3C
  3429 00000164 [6C6D]                          short_addr  _$OPEN			    ; 61     3D
  3430 00000166 [AE65]                          short_addr  _$CLOSE		 	    ; 62     3E
  3431 00000168 [B766]                          short_addr  _$READ			    ; 63     3F
  3432 0000016A [1467]                          short_addr  _$WRITE			    ; 64     40
  3433 0000016C [936E]                          short_addr  _$UNLINK			    ; 65     41
  3434 0000016E [1967]                          short_addr  _$LSEEK			    ; 66     42
  3435 00000170 [506E]                          short_addr  _$CHMOD			    ; 67     43
  3436 00000172 [0422]                          short_addr  _$IOCTL			    ; 68     44
  3437 00000174 [CE67]                          short_addr  _$DUP			    ; 69     45
  3438 00000176 [EC67]                          short_addr  _$DUP2			    ; 70     46
  3439 00000178 [8B20]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3440                                  ;   Memory Group
  3441 0000017A [2E61]                          short_addr  _$ALLOC			    ; 72     48
  3442 0000017C [A862]                          short_addr  _$DEALLOC                       ; 73     49
  3443 0000017E [8462]                          short_addr  _$SETBLOCK                      ; 74     4A
  3444                                  ;   Process Group
  3445 00000180 [225A]                          short_addr  _$EXEC			    ; 75     4B
  3446 00000182 [7460]                          short_addr  _$EXIT			    ; 76     4C
  3447 00000184 [185A]                          short_addr  _$WAIT			    ; 77     4D
  3448 00000186 [D51F]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3449                                  ;   Special Group
  3450 00000188 [2920]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3451                                  ; SPECIAL SYSTEM GROUP
  3452                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3453                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3454                                  ;                                                                          ;
  3455 0000018A [B902]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3456 0000018C [C502]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3457 0000018E [3F0F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3458 00000190 [AE0F]                          short_addr  _$SETDPB			    ; 83     53
  3459                                  ;                                                                          ;
  3460                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3461                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3462 00000192 [3C0C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3463                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3464                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3465                                  ;                                                                          ;
  3466 00000194 [7510]                          short_addr  _$DUP_PDB                       ; 85     55
  3467                                  ;                                                                          ;
  3468                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470 00000196 [B96E]                          short_addr  _$RENAME			    ; 86     56
  3471 00000198 [8067]                          short_addr  _$FILE_TIMES                    ; 87     57
  3472 0000019A [DD62]                          short_addr  _$ALLOCOPER                     ; 88     58
  3473                                  
  3474                                  ; 08/07/2018 - Retro DOS v3.0
  3475                                  ; -------------------------------------------------------------------------;
  3476                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3477                                  
  3478                                  ; Network extention system calls
  3479 0000019C [C20E]                          short_addr  _$GetExtendedError              ; 89     59
  3480 0000019E [3F6F]                          short_addr  _$CreateTempFile                ; 90     5A
  3481 000001A0 [276F]                          short_addr  _$CreateNewFile                 ; 91     5B
  3482 000001A2 [F170]                          short_addr  _$LockOper                      ; 92     5C
  3483 000001A4 [C163]                          short_addr  _$ServerCall                    ; 93     5D
  3484 000001A6 [B668]                          short_addr  _$UserOper                      ; 94     5E
  3485 000001A8 [1B68]                          short_addr  _$AssignOper                    ; 95     5F
  3486 000001AA [076D]                          short_addr  _$NameTrans                     ; 96     60
  3487 000001AC [4D06]                  	short_addr  NO_OP			    ; 97     61
  3488 000001AE [C502]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3489                                  ; the next call is reserved for hangool sys call
  3490                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3491 000001B0 [E20E]                  	short_addr  _$ECS_Call			    ; 99     63
  3492                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496 000001B2 [D102]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3497                                  ;                                                                          ;
  3498                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3499                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3500 000001B4 [CB0C]                          short_addr  _$GetExtCntry                   ; 101    65
  3501 000001B6 [C80D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3502 000001B8 [F965]                          short_addr  _$ExtHandle                     ; 103    67
  3503 000001BA [E165]                          short_addr  _$COMMIT                        ; 104    68
  3504                                  
  3505                                  ; 08/07/2018
  3506                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3507                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3508                                  
  3509                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3510 000001BC [7811]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3511 000001BE [E165]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3512 000001C0 [4D06]                  	short_addr  NO_OP                           ; 107    6B   
  3513                                  						    ; IFS_IOCTL no longer 
  3514                                  						    ; supported
  3515 000001C2 [D96F]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3516                                  
  3517                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3518                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3519                                  ;                                                                          ;
  3520                                  ;ifdef ROMEXEC
  3521                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3522                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3523                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3524                                  ;endif
  3525                                  ;                                                                          ;
  3526                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3527                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3528                                  
  3529                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3530                                  
  3531                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3532                                  
  3533                                  ; 08/07/2018 - Retro DOS v3.0
  3534                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3535                                  
  3536                                  ;	If 	Installed
  3537                                  
  3538                                  align 2
  3539                                  
  3540                                  ;PUBLIC FOO
  3541                                  
  3542                                  FOO:	; LABEL WORD
  3543 000001C4 [0A07]                          short_addr  Leave2F
  3544                                  
  3545 000001C6 [C801]                  DTab:	DW  DOSTable
  3546                                  
  3547                                  	;PUBLIC FOO,DTAB
  3548                                  
  3549                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3550                                  
  3551                                  ; 29/04/2019
  3552                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3553                                  
  3554                                  
  3555                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3556                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3557                                         
  3558                                  DOSTable:  ; LABEL  WORD
  3559 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3560 000001C9 [2F09]                          short_addr  DOSInstall          ;   0 install check
  3561 000001CB [902E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3562 000001CD [A30E]                          short_addr  RECSET              ;   2   RECSET
  3563 000001CF [2909]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3564 000001D1 [5C4F]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3565 000001D3 [3516]                          short_addr  OUTT                ;   5   OUT
  3566 000001D5 [2E52]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3567 000001D7 [A557]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3568 000001D9 [842F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3569 000001DB [6A59]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3570 000001DD [A571]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3571 000001DF [DD2B]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3572 000001E1 [C72B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3573 000001E3 [E00A]                          short_addr  DATE16              ;   13  DATE16
  3574 000001E5 [E411]                          short_addr  Idle		;   14      empty slot
  3575 000001E7 [9E57]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3576 000001E9 [E411]                          short_addr  Idle		;   16      empty slot
  3577 000001EB [B111]                          short_addr  StrCpy              ;   17  StrCpy
  3578 000001ED [C911]                          short_addr  StrLen              ;   18  StrLen
  3579 000001EF [074F]                          short_addr  UCase		;   19  UCase
  3580 000001F1 [E257]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3581 000001F3 [4159]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3582 000001F5 [2A65]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3583 000001F7 [7B69]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3584 000001F9 [8104]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3585 000001FB [2669]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3586 000001FD [2C6D]                          short_addr  DriveFromText       ;   26  DriveFromText
  3587 000001FF [810B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3588 00000201 [100C]                          short_addr  DSUM                ;   28  DSUM
  3589 00000203 [770B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3590 00000205 [8F11]                          short_addr  StrCmp              ;   30  StrCmp
  3591 00000207 [6968]                          short_addr  InitCDS             ;   31  initcds
  3592 00000209 [F764]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3593 0000020B [076D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3594 0000020D [7406]                          short_addr  CAL_LK              ;   34  CAL_LK
  3595 0000020F [AE40]                          short_addr  DEVNAME             ;   35  DEVNAME
  3596 00000211 [E411]                          short_addr  Idle                ;   36  Idle
  3597 00000213 [D711]                          short_addr  DStrLen             ;   37  DStrLen
  3598 00000215 [8612]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3599 00000217 [AE65]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3600 00000219 [8C12]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3601 0000021B [B766]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3602 0000021D [4812]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3603 0000021F [C912]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3604 00000221 [B812]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3605 00000223 [DD12]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3606                                          
  3607                                  	; 29/04/2019 - Retro DOS v4.0
  3608 00000225 [E112]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3609                                  
  3610 00000227 [4D06]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3611                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3612                                  
  3613                                  DOSTableEnd:  ; LABEL BYTE
  3614                                  
  3615                                  	;ENDIF
  3616                                  
  3617                                  ; ----------------------------------------------------------------------------
  3618                                  ; BREAK   <Copyright notice and version>
  3619                                  ; ----------------------------------------------------------------------------
  3620                                  
  3621                                  ;CODSTRT EQU	$
  3622                                  
  3623                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3624                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3625                                  
  3626                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3627                                  ;       module. The reason is so that the data alignments are the same in
  3628                                  ;       IBM-DOS and MS-DOS up through header.
  3629                                  
  3630                                  	;PUBLIC	HEADER
  3631                                  
  3632                                  HEADER:	; LABEL	BYTE
  3633                                          ;IF	DEBUG
  3634                                          ;DB	13,10,"Debugging DOS version "
  3635                                          ;DB	MAJOR_VERSION + "0"
  3636                                          ;DB	"."
  3637                                          ;DB	(MINOR_VERSION / 10) + "0"
  3638                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3639                                          ;ENDIF
  3640                                  
  3641                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3642                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3643                                  %if 0
  3644                                          ;IF	NOT IBM
  3645                                          DB	13,10,"MS-DOS version "
  3646                                          DB	MAJOR_VERSION + "0"
  3647                                          DB	"."
  3648                                          DB	(MINOR_VERSION / 10) + "0"
  3649                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3650                                          DB	(MINOR_VERSION % 10) + "0"
  3651                                  
  3652                                          ;IF	HIGHMEM
  3653                                          ;DB	"H"
  3654                                          ;ENDIF
  3655                                  
  3656                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3657                                  	; 30/04/2019 - Retro DOS v4.0
  3658                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3659                                  
  3660                                  	;ENDIF
  3661                                  
  3662                                  %endif
  3663                                  
  3664                                  ;IF DEBUG
  3665                                  ;	DB	13,10,"$"
  3666                                  ;ENDIF
  3667                                  
  3668                                  ;include copyrigh.inc
  3669                                  
  3670                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3671                                  
  3672                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3673                                  	;DB	"Licensed Material - Property of Microsoft "
  3674                                  	;DB	"All rights reserved "
  3675                                  
  3676                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3677                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3678                                  
  3679                                  ; 28/12/2022 - Retro DOS v4.1
  3680                                  %if 0
  3681                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3682                                  ms_copyright:
  3683                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3684                                  	db	'Licensed Material - Property of Microsoft '
  3685                                  	db	'All rights reserved '
  3686                                  
  3687                                  %endif
  3688                                  	;; 28/12/2022 - Retro DOS v4.1
  3689                                  ;ms_copyright:	
  3690                                    	;db	13,10,"MS DOS Version 5.0"
  3691                                  	;db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3692                                  
  3693                                  ;	; 21/09/2023 - Retro DOS v4.2 MSDOS.SYS
  3694                                  ;	; (MSDOS 6.22 MSDOS.SYS - DOSCODE:3FDDh (File offset: 509))
  3695                                  ;ms_copyright:
  3696                                  ;	db 'MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp '
  3697                                  ;	db 'Licensed Material - Property of Microsoft All rights reserved '
  3698                                  
  3699                                  	; 20/09/2023 - Retro DOS v4.2
  3700                                  ms_copyright:	
  3701 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 6.22"
  3701 00000232 56657273696F6E2036-
  3701 0000023B 2E3232             
  3702 0000023E 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1994 Microsoft Corp.",13,10,"$",0	
  3702 00000247 687420313938312D31-
  3702 00000250 393934204D6963726F-
  3702 00000259 736F667420436F7270-
  3702 00000262 2E0D0A2400         
  3703                                  
  3704                                  ;============================================================================
  3705                                  ; MSCODE.ASM
  3706                                  ;============================================================================
  3707                                  
  3708                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3709                                  ; 03/03/2018
  3710                                  
  3711                                  ;
  3712                                  ; MSCODE.ASM -- MSDOS code
  3713                                  ;
  3714                                  
  3715                                  ;INCLUDE DOSSEG.ASM
  3716                                  ;INCLUDE STDSW.ASM
  3717                                  
  3718                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3719                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3720                                  
  3721                                  ;.xcref
  3722                                  ;INCLUDE DOSSYM.ASM
  3723                                  ;INCLUDE DEVSYM.ASM
  3724                                  ;.cref
  3725                                  ;.list
  3726                                  
  3727                                  ;IFNDEF  KANJI
  3728                                  ;KANJI   EQU     0       ; FALSE
  3729                                  ;ENDIF
  3730                                  
  3731                                  ;IFNDEF  IBM
  3732                                  ;IBM     EQU     0
  3733                                  ;ENDIF
  3734                                  
  3735                                  ;IFNDEF  HIGHMEM
  3736                                  ;HIGHMEM  EQU     0
  3737                                  ;ENDIF
  3738                                  
  3739                                          ;i_need  USER_SP,WORD
  3740                                          ;i_need  USER_SS,WORD
  3741                                          ;i_need  SAVEDS,WORD
  3742                                          ;i_need  SAVEBX,WORD
  3743                                          ;i_need  INDOS,BYTE
  3744                                          ;i_need  NSP,WORD
  3745                                          ;i_need  NSS,WORD
  3746                                          ;i_need  CURRENTPDB,WORD
  3747                                          ;i_need  AUXSTACK,BYTE
  3748                                          ;i_need  CONSWAP,BYTE
  3749                                          ;i_need  IDLEINT,BYTE
  3750                                          ;i_need  NOSETDIR,BYTE
  3751                                          ;i_need  ERRORMODE,BYTE
  3752                                          ;i_need  IOSTACK,BYTE
  3753                                          ;i_need  WPERR,BYTE
  3754                                          ;i_need  DSKSTACK,BYTE
  3755                                          ;i_need  CNTCFLAG,BYTE
  3756                                          ;i_need  LEAVEADDR,WORD
  3757                                          ;i_need  NULLDEVPT,DWORD
  3758                                  
  3759                                          ;IF NOT IBM
  3760                                          ;i_need  OEM_HANDLER,DWORD
  3761                                          ;ENDIF
  3762                                  
  3763                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3764                                  
  3765                                  ;============================================================================
  3766                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3767                                  ;============================================================================
  3768                                  ; 11/07/2018 - Retro DOS v3.0
  3769                                  ; 01/05/2019 - Retro DOS v4.0
  3770                                  
  3771                                  ; DosCode SEGMENT
  3772                                  
  3773                                  ; ==========================================================================
  3774                                  ;
  3775                                  ; $Set_CTRL_C_Trapping
  3776                                  ;
  3777                                  ; Function:
  3778                                  ;	Enable disable ^C checking in dispatcher
  3779                                  ;
  3780                                  ; Inputs:
  3781                                  ;		AL = 0 read ^C status
  3782                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3783                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3784                                  ;		AL = 5 get DOS boot drive
  3785                                  ;		AL = 6 Get version number
  3786                                  ;			RETURNS:
  3787                                  ;				BH = Minor version number
  3788                                  ;				BL = Major version number
  3789                                  ;				DL = DOS internal revision
  3790                                  ;				DH = DOS type flags
  3791                                  ;					Bit 3 	- DOS in ROM
  3792                                  ;					Bit 4 	- DOS in HMA
  3793                                  ;					Bit 0-2, 5-7 - Reserved
  3794                                  ; Outputs:
  3795                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3796                                  ;
  3797                                  ; History:
  3798                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3799                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3800                                  ; ==========================================================================
  3801                                  
  3802                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3803                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3804                                  
  3805                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3806                                  ; DOSCODE:4052h (MSDOS 6.21, MSDOS.SYS)
  3807                                  ; DOSCODE:4052h (MSDOS 6.22, MSDOS.SYS)
  3808                                  ; DOSCODE:4123h (PCDOS 7.1, IBMDOS.COM)
  3809                                  
  3810                                  _$SET_CTRL_C_TRAPPING:
  3811                                  	; 01/05/2019 - Retro DOS v4.0
  3812                                  
  3813 00000267 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3814 00000269 7603                    	jbe	short scct_1		; If yes continue processing
  3815                                  
  3816 0000026B B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3817 0000026D CF                      	iret
  3818                                  scct_1:
  3819 0000026E 1E                      	push	DS
  3820                                  
  3821                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3822 0000026F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3823                                  	
  3824 00000274 50                      	push	AX			; DL only register that can change
  3825 00000275 56                      	push	SI
  3826                                  
  3827 00000276 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3828 00000279 30E4                    	xor	AH,AH			; Clear high byte of AX
  3829 0000027B 09C0                    	or	AX,AX			; Check for subfunction 0
  3830 0000027D 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3831                                  
  3832 0000027F 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3833 00000281 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3834                                  scct_2:
  3835 00000283 48                      	dec	AX			; Now dec AX and see if it was 1
  3836 00000284 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3837                                  
  3838 00000286 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3839 00000289 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3840 0000028B EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3841                                  scct_3:
  3842 0000028D 48                      	dec	AX			; Dec AX again to see if it was 2
  3843 0000028E 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3844                                  
  3845 00000290 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3846 00000293 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3847 00000295 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3848                                  scct_4:
  3849 00000297 3C03                    	cmp	al,3 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3850                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3851 00000299 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3852 0000029B 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3853 0000029F EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3854                                  scct_5:
  3855 000002A1 3C04                    	cmp	al,4 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3856                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3857 000002A3 750E                    	jne	short scct_9s		; If not equal then not get version
  3858                                  	
  3859                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3860                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3861 000002A5 BB0616                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3862                                  	
  3863                                  	;mov	dl,0
  3864                                  	;mov	DL,DOSREVNM ; 0
  3865                                  
  3866                                  	;xor	dh,dh			; assume vanilla DOS
  3867                                  	; 01/01/2024
  3868 000002A8 BA0000                  	mov	dx,0
  3869 000002AB 3836[1112]              	cmp	byte [DosHasHMA],dh ; 0
  3870                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3871                                  	;je	short @F
  3872 000002AF 7402                    	je	short scct_6
  3873                                  	; 01/01/2024
  3874 000002B1 B610                    	mov	dh,10h
  3875                                  	;or	dh,10h
  3876                                  	;;or	DH,DOSINHMA ; 10h
  3877                                  ;@@:
  3878                                  scct_6:
  3879                                  
  3880                                  ;ifdef ROMDOS
  3881                                  ;	or	DH,DOSINROM ; 08h
  3882                                  ;endif ; ROMDOS
  3883                                  
  3884                                  scct_9s:
  3885 000002B3 5E                      	pop	SI
  3886 000002B4 58                      	pop	AX
  3887 000002B5 1F                      	pop	DS
  3888                                  scct_9f:
  3889 000002B6 CF                      	iret
  3890                                  
  3891                                  SetCtrlShortEntry:			; This allows a conditional entry
  3892                                  					; from main dispatch code
  3893 000002B7 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3894                                  
  3895                                  ; ==========================================================================
  3896                                  ;									   
  3897                                  ; The following two routines are dispatched to directly with ints disabled
  3898                                  ; immediately after the int 21h entry.	no DIS state is set.
  3899                                  ;
  3900                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3901                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3902                                  ;
  3903                                  ; ==========================================================================
  3904                                  
  3905                                  _$SET_CURRENT_PDB:
  3906 000002B9 1E                      	push	DS
  3907                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3908 000002BA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3909 000002BF 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3910 000002C3 1F                      	pop	DS
  3911 000002C4 CF                      	iret
  3912                                  
  3913                                  ; ==========================================================================
  3914                                  ;
  3915                                  ; $get_current_PDB returns in BX the current process
  3916                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3917                                  ;
  3918                                  ; ==========================================================================
  3919                                  
  3920                                  _$GET_CURRENT_PDB:
  3921 000002C5 1E                      	push	DS
  3922                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3923 000002C6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3924 000002CB 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3925 000002CF 1F                      	pop	DS
  3926 000002D0 CF                      	iret
  3927                                  
  3928                                  ; ==========================================================================
  3929                                  ;
  3930                                  ; Sets the Printer Flag to whatever is in AL.
  3931                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3932                                  ;
  3933                                  ; ==========================================================================
  3934                                  
  3935                                  _$SET_PRINTER_FLAG:
  3936 000002D1 1E                      	push	ds
  3937                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3938 000002D2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3939 000002D7 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3940 000002DA 1F                      	pop	ds
  3941 000002DB CF                      	iret
  3942                                  
  3943                                  ; 01/05/2019 - Retro DOS v4.0
  3944                                  ; 08/07/2018 - Retro DOS v3.0
  3945                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3946                                  
  3947                                  ; ----------------------------------------------------------------------------
  3948                                  ; BREAK   <System call entry points and dispatcher>
  3949                                  ; ----------------------------------------------------------------------------
  3950                                  
  3951                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3952                                  
  3953                                  ; ==========================================================================
  3954                                  ;
  3955                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3956                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3957                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3958                                  ;
  3959                                  ; ==========================================================================
  3960                                  
  3961                                  SYSTEM_CALL:    ; PROC NEAR
  3962                                  
  3963                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3964                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3965                                  
  3966                                  ;entry	QUIT				
  3967                                  QUIT:				; INT 20H entry point	
  3968                                  	;MOV	AH,0
  3969 000002DC 30E4                    	xor	ah,ah ; 08/07/2018
  3970 000002DE EB36                    	JMP     SHORT SAVREGS
  3971                                  
  3972                                  ; ---------------------------------------------------------------------------
  3973                                  
  3974                                  	; The system call in AH is out of the range that we know how
  3975                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3976                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3977                                  	; error as this may break some programs compatability.
  3978                                  
  3979                                  BADCALL:
  3980                                          ;MOV	AL,0
  3981 000002E0 30C0                    	xor	al,al ; 08/07/2018
  3982                                  IRETT:	; 06/05/2019
  3983                                  _IRET:
  3984 000002E2 CF                              IRET
  3985                                  
  3986                                  ; ---------------------------------------------------------------------------
  3987                                  
  3988                                  ; 01/05/2019 - Retro DOS v4.0
  3989                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3990                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3991                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3992                                  
  3993                                  	; An alternative method of entering the system is to perform a
  3994                                  	; CALL 5 in the program segment prefix with the contents of CL
  3995                                  	; indicating what system call the user would like. A subset of
  3996                                  	; the possible system calls is allowed here only the
  3997                                  	; CPM-compatible calls may get dispatched.
  3998                                  
  3999                                  		; System call entry point and dispatcher
  4000                                  CALL_ENTRY:
  4001 000002E3 1E                      	push	DS
  4002                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4003 000002E4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4004 000002E9 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  4005                                  
  4006 000002ED 58                              POP     AX                      ; IP from the long call at 5
  4007 000002EE 58                              POP     AX                      ; Segment from the long call at 5
  4008 000002EF 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  4009                                  
  4010                                  		; Re-order the stack to simulate an interrupt 21.
  4011                                  
  4012 000002F3 9C                      	PUSHF				; Start re-ordering the stack
  4013 000002F4 FA                      	CLI
  4014 000002F5 50                              PUSH    AX                      ; Save segment
  4015 000002F6 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  4016                                  	; 04/11/2022
  4017                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  4018                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  4019 000002FA FF36[EC05]              	push	word [SAVEDS]
  4020 000002FE 1F                      	pop	ds
  4021                                  	;
  4022                                  	;cmp	cl,36
  4023 000002FF 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  4024 00000302 77DC                            JA      SHORT BADCALL
  4025 00000304 88CC                            MOV     AH,CL
  4026                                  	; 08/07/2018
  4027 00000306 EB0E                    	jmp	short SAVREGS
  4028                                  
  4029                                  ; ---------------------------------------------------------------------------
  4030                                  
  4031                                  ; 01/05/2019 - Retro DOS v4.0
  4032                                  
  4033                                  	; This is the normal INT 21 entry point. We first perform a
  4034                                  	; quick test to see if we need to perform expensive DOS-entry
  4035                                  	; functions. Certain system calls are done without interrupts
  4036                                  	; being enabled.
  4037                                  
  4038                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4039                                  
  4040                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4041                                  ; 04/11/2022
  4042                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4043                                  
  4044                                  COMMAND:
  4045                                  	; 22/12/2022
  4046 00000308 FA                      	cli
  4047                                  
  4048                                  	; 01/05/2019 - Retro DOS v4.0
  4049                                  	; 08/07/2018 - Retro DOS v3.0
  4050                                  
  4051                                  ; 22/12/2022
  4052                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4053                                  	;IF	NOT IBM
  4054 00000309 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4055 0000030C 7203                    	JB	SHORT NOTOEM
  4056 0000030E E97A01                  	JMP	_$SET_OEM_HANDLER
  4057                                  
  4058                                  NOTOEM:
  4059                                  	;ENDIF
  4060                                  
  4061                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4062                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4063                                  
  4064                                  	; 22/12/2022
  4065                                  	;cli	; 08/07/2018
  4066                                  
  4067                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4068                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4069                                  	; 04/11/2022
  4070 00000311 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4071                                  	;JBE	SHORT SAVREGS
  4072 00000314 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4073                                  
  4074                                  	; 31/05/2019
  4075                                  
  4076                                  	; The following set of calls are issued by the server at
  4077                                  	; *arbitrary* times and, therefore, must be executed on
  4078                                  	; the user's entry stack and executed with interrupts off.
  4079                                  
  4080                                  SAVREGS:
  4081                                  	; 01/05/2019 - Retro DOS v4.0
  4082                                  	; 10/08/2018
  4083                                  	; 08/07/2018 - Retro DOS v3.0
  4084 00000316 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4085                                  	;;je	_$SET_CTRL_C_TRAPPING
  4086                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4087 00000319 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4088                                  	; 04/11/2022
  4089 0000031B 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4090 0000031D 80FC64                  	cmp	ah,64h			; Check Max case number
  4091 00000320 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4092 00000322 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4093 00000324 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4094 00000327 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4095 00000329 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4096 0000032C 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4097 0000032E 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4098 00000331 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4099                                  
  4100                                  SaveAllRegs:
  4101                                  	; 01/05/2019 - Retro DOS v4.0
  4102                                  
  4103 00000333 06                              push	ES
  4104 00000334 1E                      	push	DS
  4105 00000335 55                      	push	BP
  4106 00000336 57                      	push	DI
  4107 00000337 56                      	push	SI
  4108 00000338 52                      	push	DX
  4109 00000339 51                      	push	CX
  4110 0000033A 53                      	push	BX
  4111 0000033B 50                      	push	AX
  4112                                  
  4113 0000033C 8CD8                    	mov	AX,DS
  4114                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4115 0000033E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4116 00000343 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4117 00000346 891E[EA05]              	mov	[SAVEBX],BX
  4118                                  
  4119                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4120                                  	
  4121                                  	; 08/07/2018 - Retro DOS v3.0        
  4122                                  	;xor     ax,ax
  4123                                  	;mov     [USER_ID],ax
  4124                                  	;mov     ax,[CurrentPDB]
  4125                                  	;mov     [PROC_ID],ax
  4126                                  
  4127                                  	; 01/05/2019
  4128                                  
  4129                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4130                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4131                                  	; this!!!
  4132                                  
  4133 0000034A A1[8405]                	MOV     AX,[USER_SP]
  4134 0000034D A3[F205]                        MOV     [NSP],AX
  4135 00000350 A1[8605]                        MOV     AX,[USER_SS]
  4136 00000353 A3[F005]                        MOV     [NSS],AX
  4137                                  
  4138 00000356 31C0                    	xor	AX,AX ; 0
  4139 00000358 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4140                                  
  4141 0000035B F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4142 00000360 7503                    	jnz	short set_indos_flag	; if win386 present
  4143 00000362 A3[3E03]                	mov	[USER_ID],AX
  4144                                  set_indos_flag:
  4145 00000365 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4146                                  
  4147 00000369 8926[8405]                      MOV     [USER_SP],SP
  4148 0000036D 8C16[8605]                      MOV     [USER_SS],SS
  4149                                  
  4150 00000371 A1[3003]                	mov	AX,[CurrentPDB]
  4151 00000374 A3[3C03]                	mov	[PROC_ID],AX
  4152 00000377 8ED8                    	mov	DS,AX
  4153 00000379 58                      	pop	AX
  4154 0000037A 50                      	push	AX
  4155                                  
  4156                                  	; save user stack in his area for later returns (possibly from EXEC)
  4157                                  
  4158 0000037B 89262E00                        MOV     [PDB.USER_STACK],SP
  4159 0000037F 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4160                                  
  4161                                  	; 18/07/2018
  4162                                  	;mov	byte [CS:FSHARING], 0
  4163                                  
  4164                                  	;MOV     BX,CS			; no holes here.
  4165                                  	;MOV     SS,BX
  4166                                  
  4167                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4168 00000383 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4169                                  					;entry	REDISP
  4170                                  REDISP:
  4171 00000388 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4172 0000038B FB                              STI                             ; stack is in our space now...
  4173                                  
  4174 0000038C 8CD3                    	mov	bx,ss
  4175 0000038E 8EDB                    	mov	ds,bx
  4176                                  
  4177 00000390 93                      	xchg	ax,bx
  4178                                  
  4179 00000391 31C0                    	xor	ax,ax ; 0
  4180                                  
  4181                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4182                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4183                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4184                                  
  4185                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4186                                  
  4187                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4188                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4189                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4190                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4191                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4192                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4193                                  	;inc	ax
  4194                                  	;;inc	AL			; AL = 1
  4195                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4196                                  
  4197                                  	; 15/12/2022
  4198 00000393 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4199                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4200 00000396 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4201 0000039C A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4202                                  	;mov	byte [IDLEINT],1
  4203 0000039F A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4204 000003A2 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4205 000003A5 40                      	inc	ax
  4206                                  	;inc	al			; AL = 1
  4207 000003A6 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4208                                  
  4209 000003A9 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4210                                  
  4211 000003AA 88E3                    	MOV     BL,AH			
  4212 000003AC D1E3                            SHL     BX,1			; 2 bytes per call in table
  4213                                         
  4214 000003AE FC                      	CLD
  4215                                  		; Since the DOS maintains mucho state information across system
  4216                                  		; calls, we must be very careful about which stack we use.
  4217                                  		; First, all abort operations must be on the disk stack. This
  4218                                  		; is due to the fact that we may be hitting the disk (close
  4219                                  		; operations, flushing) and may need to report an INT 24.
  4220                                          
  4221 000003AF 08E4                    	OR      AH,AH
  4222 000003B1 7416                            JZ      SHORT DSKROUT		; ABORT
  4223                                  
  4224                                          ;CMP	AH,12
  4225                                          ;JBE	SHORT IOROUT		; Character I/O
  4226                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4227                                          ;JZ	SHORT IOROUT
  4228                                          ;CMP	AH,SET_CURRENT_PDB
  4229                                          ;JNZ	SHORT DSKROUT
  4230                                  
  4231                                  		; Second, PRINT and PSPRINT and the server issue
  4232                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4233                                  		; This call MUST, therefore, use the AUXSTACK.
  4234                                  
  4235                                  	; 10/08/2018
  4236 000003B3 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4237 000003B6 7434                    	je      short DISPCALL
  4238                                  	
  4239                                  	; 01/05/2019
  4240                                  	
  4241                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4242                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4243                                  
  4244 000003B8 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4245 000003BB 770C                    	ja      short DSKROUT
  4246                                  
  4247                                  IOROUT:
  4248                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4249                                  	; (ss: prefix was not needed here! ds=ss)
  4250                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4251                                  	; 15/12/2022
  4252 000003BD 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4253 000003C2 7528                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4254 000003C4 BC[A00A]                        MOV     SP,IOSTACK
  4255 000003C7 EB23                            JMP     SHORT DISPCALL
  4256                                  
  4257                                  		; We are on a system call that is classified as "the rest".
  4258                                  		; We place ourselves onto the DSKSTACK and away we go.
  4259                                  		; We know at this point:
  4260                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4261                                  		;    ErrorMode and WpErr
  4262                                  		; *  That there can be no critical sections in effect.
  4263                                  		;    We signal the server to remove all the resources.
  4264                                  
  4265                                  DSKROUT:
  4266                                  	; 01/01/2024
  4267                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4268                                  	; 08/07/2018 - Retro DOS v3.0
  4269 000003C9 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4270                                  	; 01/01/2024
  4271                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4272                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4273                                  	                   		; make sure flags are reset
  4274 000003CC C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4275                                  
  4276                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4277                                  	; (ss: prefix was not needed here! ds=ss)
  4278                                  
  4279                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4280                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4281                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4282                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4283                                                                          ; make sure flags are reset
  4284 000003D2 50                      	push    ax
  4285 000003D3 B482                    	mov     ah,82h			; Release all resource information
  4286 000003D5 CD2A                    	int     2Ah 		; Microsoft Networks 
  4287                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4288 000003D7 58                      	pop     ax
  4289                                  
  4290                                  		; Since we are going to be running on the DSKStack and since
  4291                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4292                                  		; generation of INT 28's.
  4293                                  
  4294                                  	; 15/12/2022
  4295                                  	;mov     byte [ss:IDLEINT],0
  4296                                  	;
  4297                                          ;mov	sp,DSKSTACK
  4298                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4299                                          ;jz	short DISPCALL
  4300                                  
  4301 000003D8 C606[5803]00            	mov     byte [IDLEINT],0
  4302                                  
  4303 000003DD BC[2009]                	MOV     SP,DSKSTACK
  4304 000003E0 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4305 000003E5 7405                    	JZ      SHORT DISPCALL
  4306                                  
  4307 000003E7 50                              PUSH    AX
  4308                                          ;invoke	DSKSTATCHK
  4309 000003E8 E88A4B                          CALL	DSKSTATCHK
  4310 000003EB 58                      	POP     AX
  4311                                  DISPCALL:
  4312                                  	; 01/05/2019 - Retro DOS v4.0
  4313 000003EC 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4314                                  
  4315                                  	; 15/12/2022
  4316 000003F1 871E[EA05]              	xchg	bx,[SAVEBX]
  4317 000003F5 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4318                                  
  4319                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4320                                  	; (ss: prefix was not needed here! ds=ss)        
  4321                                  	;xchg	bx,[ss:SAVEBX]
  4322                                  	;mov	ds,[ss:SAVEDS]
  4323                                  
  4324 000003F9 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4325                                  
  4326                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4327                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4328                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4329                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4330                                  	; because this bit is used to indicate to the next int 21 call that
  4331                                  	; the previous int 21 was an exec.
  4332                                  	;
  4333                                  	; So do not add any code between the call above and the label 
  4334                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4335                                  
  4336                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4337 000003FE 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4338                                  
  4339                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4340                                  ; DOSCODE:41F7h
  4341                                  
  4342                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  4343                                  ; DOSCODE:4204h
  4344                                  
  4345                                  ;entry LEAVE
  4346                                  ;;;_LEAVE:				; Exit from a system call
  4347                                  LeaveDOS: ; 18/07/2018 
  4348                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4349 00000404 FA                      	CLI
  4350                                  
  4351                                  	; 01/05/2019
  4352                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4353 00000405 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4354 0000040A 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4355 0000040F 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4356                                  
  4357                                  LeaveA20On:
  4358 00000411 FE0E[2103]                      DEC     BYTE [INDOS]
  4359                                          ; 04/11/2022
  4360 00000415 8E16[8605]              	mov	ss,[USER_SS]
  4361 00000419 8B26[8405]              	MOV     SP,[USER_SP]
  4362                                  	;MOV	SS,[USER_SS]
  4363 0000041D 89E5                    	MOV     BP,SP
  4364                                  	;MOV	[BP.user_AX],AL	
  4365                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4366                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4367                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4368                                  
  4369                                  	; 15/12/2022
  4370 0000041F 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4371                                  	
  4372                                  	;MOV	AX,[NSP]
  4373                                          ;MOV	[USER_SP],AX
  4374                                          ;MOV	AX,[NSS]
  4375                                          ;MOV	[USER_SS],AX
  4376                                  	; 01/01/2024
  4377 00000422 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4378 00000426 A3[8605]                	mov	[USER_SS],ax
  4379 00000429 8C06[8405]              	mov	[USER_SP],es
  4380                                  
  4381 0000042D 58                      	pop	AX
  4382 0000042E 5B                      	pop	BX
  4383 0000042F 59                      	pop	CX
  4384 00000430 5A                      	pop	DX
  4385 00000431 5E                      	pop	SI
  4386 00000432 5F                      	pop	DI
  4387 00000433 5D                      	pop	BP
  4388 00000434 1F                      	pop	DS
  4389 00000435 07                      	pop	ES
  4390                                  
  4391 00000436 CF                              IRET
  4392                                  
  4393                                  disa20:	   				; M068 - Start
  4394 00000437 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4395 0000043B 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4396 0000043F 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4397                                  					;    a20 off
  4398                                  					; Y: turn a20 off and dec a20off_count
  4399 00000441 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4400                                   					; Start - M004
  4401 00000445 1E                      	push	ds			; segment of stub
  4402 00000446 BB[2D11]                	mov	bx,disa20_iret		; offset in stub
  4403 00000449 53                      	push	bx
  4404 0000044A CB                      	retf	  			; go to stub
  4405                                  					; End - M004
  4406                                  ;SYSTEM_CALL ENDP
  4407                                  
  4408                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4409                                  ; 04/11/2022
  4410                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4411                                  
  4412                                  ; ==========================================================================
  4413                                  ;
  4414                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4415                                  ; the stack prior to giving the user control
  4416                                  ;
  4417                                  ; ==========================================================================
  4418                                  
  4419                                  ; 01/05/2019 - Retro DOS v4.0
  4420                                  
  4421                                          ;procedure restore_world,NEAR
  4422                                  restore_world:
  4423                                  	;getdseg <es>		; es -> dosdata
  4424 0000044B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4425                                  
  4426 00000450 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4427                                  
  4428 00000455 58                              POP     AX
  4429 00000456 5B                              POP     BX
  4430 00000457 59                              POP     CX
  4431 00000458 5A                              POP     DX
  4432 00000459 5E                              POP     SI
  4433 0000045A 5F                              POP     DI
  4434 0000045B 5D                              POP     BP
  4435 0000045C 1F                              POP     DS
  4436                                  
  4437 0000045D 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4438                                  
  4439                                  ;restore_world	ENDP
  4440                                  
  4441                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4442                                  
  4443                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4444                                  ; 04/11/2022
  4445                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4446                                  
  4447                                  ; ==========================================================================
  4448                                  ;
  4449                                  ; Save_World saves complete registers on the stack
  4450                                  ;
  4451                                  ; ==========================================================================
  4452                                  
  4453                                          ;procedure save_world,NEAR
  4454                                  save_world:
  4455                                  	;getdseg <es>		; es -> dosdata
  4456 00000462 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4457                                  
  4458 00000467 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4459                                  
  4460                                  	; 12/05/2019
  4461                                          
  4462 0000046C 1E                      	PUSH    DS
  4463 0000046D 55                              PUSH    BP
  4464 0000046E 57                              PUSH    DI
  4465 0000046F 56                              PUSH    SI
  4466 00000470 52                              PUSH    DX
  4467 00000471 51                              PUSH    CX
  4468 00000472 53                              PUSH    BX
  4469 00000473 50                              PUSH    AX
  4470                                  
  4471 00000474 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4472                                  
  4473 00000479 55                      	push	BP		
  4474 0000047A 89E5                    	mov	BP,SP
  4475 0000047C 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4476 0000047F 5D                      	pop	BP
  4477                                  	
  4478 00000480 C3                      	retn
  4479                                  
  4480                                  ;save_world	ENDP
  4481                                  
  4482                                  ; 01/05/2019
  4483                                  
  4484                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4485                                  ; 04/11/2022
  4486                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4487                                  
  4488                                  ; ==========================================================================
  4489                                  ;
  4490                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4491                                  ;
  4492                                  ; ==========================================================================
  4493                                  
  4494                                          ;procedure get_user_stack,NEAR
  4495                                  Get_User_Stack:
  4496                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4497 00000481 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4498 00000486 C536[8405]                      lds	si,[USER_SP]
  4499 0000048A C3                      	retn
  4500                                  
  4501                                  ;get_user_stack  ENDP
  4502                                  
  4503                                  ; 22/12/2022
  4504                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4505                                  ;%if 0
  4506                                  
  4507                                  ; ---------------------------------------------------------------------------
  4508                                  ;
  4509                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4510                                  ; Inputs:
  4511                                  ;	User registers, User Stack, INTS disabled
  4512                                  ;	If CALL F8, DS:DX is new handler address
  4513                                  ; Function:
  4514                                  ;	Process OEM INT 21 extensions
  4515                                  ; Outputs:
  4516                                  ;	Jumps to OEM_HANDLER if appropriate
  4517                                  ;
  4518                                  ; ---------------------------------------------------------------------------
  4519                                  
  4520                                  ;IF	NOT IBM
  4521                                  
  4522                                  _$SET_OEM_HANDLER:
  4523                                  	; 01/05/2019 - Retro DOS v4.0
  4524                                  	
  4525                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4526                                  	;(jb	short NOTOOEM)
  4527                                  
  4528 0000048B 06                      	push	es ; *
  4529                                  	;getdseg <es>			; es -> dosdata
  4530 0000048C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4531                                  
  4532 00000491 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4533                                  						; (message) request	
  4534                                  	; AH = 0F8h = SET OEM HANDLER
  4535                                  
  4536 00000493 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4537 00000498 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4538                                  
  4539 0000049D 07                      	pop	es ; *
  4540                                  
  4541 0000049E CF                      	IRET                            ; Quick return, Have altered no registers
  4542                                  
  4543                                  check_trueversion_request:
  4544                                  	; 18/07/2019 - Retro DOS v3.0
  4545                                  
  4546                                  	; Retro DOS v2.0 - 20/04/2018
  4547 0000049F 83F8FF                  	CMP	AX,0FFFFh
  4548                                  	; 18/07/2018
  4549 000004A2 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4550                                  
  4551                                  	; 01/05/2019
  4552 000004A4 07                      	pop	es ; *
  4553                                  
  4554 000004A5 B40E                    	mov	ah,0Eh
  4555                                  
  4556                                  	; Retro DOS v4.0 feature only!
  4557 000004A7 81FBA101                	cmp	bx,417  ; Signature to bypass
  4558                                  			; Retro DOS true version message	
  4559 000004AB 7414                    	je	short true_version_iret
  4560                                  
  4561 000004AD 56                      	push	si
  4562 000004AE 53                      	push	bx
  4563                                  
  4564 000004AF BE[BF00]                	mov	si,RETRODOSMSG
  4565                                  wrdosmsg:
  4566                                  	;movb	ah,0Eh
  4567 000004B2 BB0700                  	mov	bx,7
  4568                                  wrdosmsg_nxt:
  4569 000004B5 2EAC                    	cs	lodsb
  4570 000004B7 3C24                    	cmp	al,'$'
  4571 000004B9 7404                    	je	short wrdosmsg_ok		
  4572 000004BB CD10                    	int	10h
  4573 000004BD EBF6                    	jmp	short wrdosmsg_nxt
  4574                                  
  4575                                  wrdosmsg_ok:
  4576 000004BF 5B                      	pop	bx
  4577 000004C0 5E                      	pop	si
  4578                                  
  4579                                  true_version_iret:
  4580                                  	; ah = 0Eh
  4581                                  	;mov	al,40h ; Retro DOS v4.0
  4582                                  	; 
  4583                                  	;mov	al,41h ; Retro DOS v4.1 
  4584                                  	; 30/12/2022
  4585 000004C1 B042                    	mov	al,42h ; Retro DOS v4.2
  4586 000004C3 CF                      	iret
  4587                                  
  4588                                  	; If above F8 try to jump to handler
  4589                                  
  4590                                  DO_OEM_FUNC:
  4591                                  	; 01/05/2019
  4592 000004C4 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4593 000004CA 7504                    	JNE     short OEM_JMP
  4594 000004CC 07                      	pop	es ; *
  4595 000004CD E910FE                  	JMP     BADCALL                 ; Handler not initialized
  4596                                  OEM_JMP:
  4597 000004D0 06                      	push	es
  4598 000004D1 1F                      	pop	ds ; DOSDATA segment !
  4599 000004D2 07                      	pop	es ; *
  4600                                  
  4601                                  	; 22/12/2022
  4602 000004D3 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4603                                  
  4604 000004D4 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4605                                  
  4606                                  ;       ENDIF
  4607                                  
  4608                                  ; ---------------------------------------------------------------------------
  4609                                  
  4610                                  ;%endif
  4611                                  
  4612                                  ;============================================================================
  4613                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4614                                  ;============================================================================
  4615                                  ; 17/07/2018 - Retro DOS v3.0
  4616                                  
  4617                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4618                                  ;	NAME	IBMCODE
  4619                                  
  4620                                  ;BREAK <NullDev -- Driver for null device>
  4621                                  
  4622                                  ; ROMDOS note:
  4623                                  ;	NUL device driver used to be here, but it was removed and placed in
  4624                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4625                                  ;	header, which is also in DOSDATA.
  4626                                  
  4627                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4628                                  
  4629                                  ;----------------------------------------------------------------------------
  4630                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4631                                  ;----------------------------------------------------------------------------
  4632                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4633                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4634                                  
  4635                                  ;Public MSC001S,MSC001E
  4636                                  ;MSC001S label byte
  4637                                  	;IF	IBM
  4638                                  ; Codes returned by BIOS
  4639                                  ERRIN:
  4640 000004D8 02                      	DB	2			; NO RESPONSE
  4641 000004D9 06                      	DB	6			; SEEK FAILURE
  4642 000004DA 0C                      	DB	12			; GENERAL ERROR
  4643 000004DB 04                      	DB	4			; BAD CRC
  4644 000004DC 08                      	DB	8			; SECTOR NOT FOUND
  4645 000004DD 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4646                                  ERROUT:
  4647                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4648 000004DE 80                      	DB	80H			; NO RESPONSE
  4649 000004DF 40                      	DB	40H			; Seek failure
  4650 000004E0 02                      	DB	2			; Address Mark not found
  4651 000004E1 10                      	DB	10H			; BAD CRC
  4652 000004E2 04                      	DB	4			; SECTOR NOT FOUND
  4653 000004E3 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4654                                  
  4655                                  NUMERR	EQU	$-ERROUT
  4656                                  	;ENDIF
  4657                                  ;MSC001E label byte
  4658                                  ;----------------------------------------------------------------------------
  4659                                  
  4660                                  ;============================================================================
  4661                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4662                                  ;============================================================================
  4663                                  ; 18/07/2018 - Retro DOS v3.0
  4664                                  ; 15/05/2019 - Retro DOS v4.0
  4665                                  
  4666                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4667                                  
  4668                                  ;   AbsSetup - setup for abs disk functions
  4669                                  ;----------------------------------------------------------------------------
  4670                                  
  4671                                  AbsSetup:
  4672                                  	; 02/01/2024
  4673 000004E4 1E                      	push	ds ; *
  4674 000004E5 16                      	push	ss
  4675 000004E6 1F                      	pop	ds
  4676 000004E7 FE06[2103]              	inc	byte [INDOS]
  4677                                  	;INC	byte [SS:INDOS]		; SS override
  4678 000004EB FB                      	STI
  4679 000004EC FC                      	CLD
  4680                                  	; 02/01/2024
  4681                                  	;PUSH	DS
  4682                                  	;push	ss
  4683                                  	;pop	ds
  4684 000004ED E80901                  	CALL	GETBP
  4685                                  	; 02/01/2024
  4686 000004F0 1F                      	pop	ds ; *
  4687 000004F1 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4688                                  	;mov	word [es:bp+1Fh]
  4689 000004F3 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4690                                  
  4691                                  	; 02/01/2024
  4692                                  ;errdriv:
  4693                                  ;	POP	DS
  4694                                  ;	jnc	short AbsSetup2
  4695                                  ;AbsSetup_retn:
  4696                                  ;	retn
  4697                                  
  4698                                  AbsSetup2:
  4699                                  	; 15/05/2019 - Retro DOS v4.0
  4700                                  	; MSDOS 6.0
  4701                                  					; SS override
  4702 000004F9 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4703 00000500 E82F04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4704 00000503 7227                    	jc	short AbsSetup_retn
  4705 00000505 E8E954                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4706                                  
  4707                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4708 00000508 1E                      	PUSH	DS
  4709 00000509 56                      	PUSH	SI
  4710 0000050A 50                      	PUSH	AX
  4711                                  
  4712 0000050B 16                      	push	ss
  4713 0000050C 1F                      	pop	ds
  4714                                  	
  4715 0000050D BE[BE03]                	MOV	SI,OPENBUF
  4716 00000510 8804                    	MOV	[SI],AL
  4717 00000512 800441                  	ADD	BYTE [SI],"A"
  4718 00000515 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4719 0000051A B80003                  	MOV	AX,0300H
  4720 0000051D F8                      	CLC
  4721 0000051E CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4722                                  		
  4723                                  		; 04/11/2022
  4724                                  		; (INT 2Ah - AX = 0300h)
  4725                                  		; Microsoft Networks - CHECK DIRECT I/O
  4726                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4727                                  		;    only drive specifier--must include the colon)
  4728                                  		; Return: CF clear if absolute disk access allowed
  4729                                  
  4730 00000520 58                      	POP	AX
  4731 00000521 5E                      	POP	SI
  4732 00000522 1F                      	POP	DS
  4733 00000523 7307                    	jnc	short AbsSetup_retn
  4734                                  
  4735                                  	;mov	word [ss:EXTERR],32h
  4736 00000525 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4737                                  errdriv:	; 02/01/2024
  4738                                  AbsSetup_retn:
  4739 0000052C C3                      	retn
  4740                                  
  4741                                  ;---------------------------------------------------------------------------
  4742                                  ;
  4743                                  ; Procedure Name : ABSDRD
  4744                                  ;
  4745                                  ; Interrupt 25 handler. Performs absolute disk read.
  4746                                  ; Inputs:	AL - 0-based drive number
  4747                                  ;		DS:BX point to destination buffer
  4748                                  ;		CX number of logical sectors to read
  4749                                  ;		DX starting logical sector number (0-based)
  4750                                  ; Outputs:	Original flags still on stack
  4751                                  ;		Carry set
  4752                                  ;		    AH error from BIOS
  4753                                  ;		    AL same as low byte of DI from INT 24
  4754                                  ;
  4755                                  ;---------------------------------------------------------------------------
  4756                                          ;procedure   ABSDRD,FAR
  4757                                  ABSDRD:
  4758                                  	; 15/05/2019 - Retro DOS v4.0
  4759                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4760                                  	; 04/11/2022
  4761                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4762                                  	
  4763                                  	; MSDOS 6.0
  4764 0000052D FA                      	CLI
  4765                                  	
  4766                                  ;	set up ds to point to DOSDATA
  4767                                  
  4768 0000052E 50                      	push	ax			; preserve AX value
  4769 0000052F 8CD8                    	mov	ax,ds			; store DS value in AX
  4770                                  	;getdseg <ds>
  4771 00000531 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4772 00000536 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4773 00000539 58                      	pop	ax			; restore AX value
  4774                                  
  4775                                  	; M072:
  4776                                  	; We shall save es on the user stack here. We need to use ES in
  4777                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4778                                  	; time in order to restore the user stack.
  4779                                  
  4780 0000053A 06                      	push	es  ; ****		; M072
  4781                                  
  4782 0000053B 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4783 0000053F 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4784                                  
  4785                                  ; 	set up ss to point to DOSDATA
  4786                                  ;
  4787                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4788                                  ; version of the getdseg macro with the SS register! An interrupt will
  4789                                  ; sneak through.
  4790                                  
  4791                                  ;ifndef ROMDOS
  4792                                  	;getdseg <ss>			; cli in entry of routine
  4793 00000543 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4794                                  ;else
  4795                                  ;	mov	ds, cs:[BioDataSeg]
  4796                                  ;	assume	ds:bdata
  4797                                  ;
  4798                                  ;	mov	ss, ds:[DosDataSg]
  4799                                  ;	assume	ss:DOSDATA
  4800                                  ;
  4801                                  ;endif ; ROMDOS
  4802                                  
  4803 00000548 BC[2009]                	MOV	SP,DSKSTACK
  4804                                  
  4805 0000054B 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4806                                  
  4807 0000054F 06                      	push	es ; *** (MSDOS 6.21)
  4808 00000550 E80FFF                  	call	save_world		; save all regs
  4809                                  
  4810 00000553 06                      	PUSH	ES ; **
  4811 00000554 E88DFF                  	CALL	AbsSetup
  4812 00000557 723D                    	JC	short ILEAVE
  4813                                  
  4814                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4815                                  	;  the secondary cache. The secondary cache does not check for media
  4816                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4817                                  	;  read, and get data from the previous disk. To get around this,
  4818                                  	;  we just won't use the secondary cache for absolute disk reads.
  4819                                  	;                                                      -mw 8/5/88
  4820                                  
  4821                                  	;EnterCrit critDisk
  4822 00000559 E8860D                  	call	ECritDisk
  4823 0000055C 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4824                                  	;LeaveCrit critDisk
  4825 00000562 E8980D                  	call	LCritDisk
  4826                                  
  4827                                          ;invoke	DSKREAD
  4828 00000565 E81331                  	CALL	DSKREAD
  4829 00000568 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4830                                  
  4831 0000056A 89F9                            mov     cx,di
  4832 0000056C 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4833 00000571 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4834                                  
  4835                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4836                                  ;            sectors, also termed an "Extent".)
  4837                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4838                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4839                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4840                                  ;
  4841                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4842                                  ;	buffers must be "read" into the transfer memory block, so that the
  4843                                  ;       transfer memory reflects the most recent data.
  4844                                  
  4845                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4846 00000576 E84633                          call	DskRdBufScan
  4847 00000579 EB1B                    	jmp     short ILEAVE
  4848                                  
  4849                                  TLEAVE:
  4850 0000057B 7419                    	JZ	short ILEAVE
  4851                                  
  4852                                  ERR_LEAVE:				; M039
  4853                                  	; 15/07/2018 - Retro DOS v3.0
  4854                                          ;IF	IBM
  4855                                  ; Translate the error code to ancient 1.1 codes
  4856 0000057D 06                              PUSH    ES ; *
  4857 0000057E 0E                              PUSH    CS
  4858 0000057F 07                              POP     ES
  4859 00000580 30E4                            XOR     AH,AH			; Nul error code
  4860                                  	;mov	cx,6
  4861 00000582 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4862 00000585 BF[D804]                        MOV     DI,ERRIN		; Point to error conditions
  4863 00000588 F2AE                            REPNE   SCASB
  4864 0000058A 7504                            JNZ     SHORT LEAVECODE		; Not found
  4865                                  	;mov	ah,[ES:DI+5]
  4866 0000058C 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4867                                  LEAVECODE:
  4868 00000590 07                              POP     ES ; *
  4869                                  	; 15/05/2019 - Retro DOS v4.0
  4870 00000591 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4871                                          ;ENDIF
  4872                                  
  4873 00000595 F9                              STC
  4874                                  ILEAVE:
  4875                                  	; 15/05/2019
  4876 00000596 07                              POP     ES ; **
  4877 00000597 E8B1FE                  	call	restore_world
  4878 0000059A 07                              pop	es ; *** (MSDOS 6.21)
  4879 0000059B FA                      	CLI
  4880 0000059C 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4881 000005A0 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4882 000005A5 16                              push	ss			; M072 - Start
  4883 000005A6 07                      	pop	es			; es - dosdata
  4884 000005A7 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4885 000005AC 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4886 000005B1 07                      	pop	es  ; ****		; Note es was saved on user
  4887                                  					; stack at entry 
  4888                                  					; M072 - End
  4889 000005B2 FB                              STI
  4890 000005B3 CB                      	RETF   ; ! FAR return !
  4891                                  
  4892                                  ;ABSDRD	ENDP
  4893                                  
  4894                                  ;---------------------------------------------------------------------------
  4895                                  ;
  4896                                  ; Procedure Name : ABSDWRT
  4897                                  ;
  4898                                  ; Interrupt 26 handler. Performs absolute disk write.
  4899                                  ; Inputs:	AL - 0-based drive number
  4900                                  ;		DS:BX point to source buffer
  4901                                  ;		CX number of logical sectors to write
  4902                                  ;		DX starting logical sector number (0-based)
  4903                                  ; Outputs:	Original flags still on stack
  4904                                  ;		Carry set
  4905                                  ;		    AH error from BIOS
  4906                                  ;		    AL same as low byte of DI from INT 24
  4907                                  ;
  4908                                  ;---------------------------------------------------------------------------
  4909                                          ;procedure   ABSDWRT,FAR
  4910                                  ABSDWRT:
  4911                                  	; 15/05/2019 - Retro DOS v4.0
  4912                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4913                                  	; 04/11/2022
  4914                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4915                                  
  4916 000005B4 FA                      	CLI
  4917                                  
  4918                                  ;	set up ds to point to DOSDATA
  4919                                  
  4920 000005B5 50                      	push	ax
  4921 000005B6 8CD8                    	mov	ax,ds
  4922                                  	;getdseg <ds>
  4923 000005B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4924 000005BD A3[0A0D]                	mov	[TEMPSEG],ax
  4925 000005C0 58                      	pop	ax
  4926                                  
  4927                                  	; M072:
  4928                                  	; We shall save es on the user stack here. We need to use ES in
  4929                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4930                                  	; time in order to restore the user stack.
  4931                                  
  4932 000005C1 06                      	push	es ; ****		; M072
  4933                                  
  4934 000005C2 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4935 000005C6 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4936                                  
  4937                                  	; set up ss to point to DOSDATA
  4938                                  	;
  4939                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4940                                  	; ROMDOS version of the getdseg macro with the SS register!
  4941                                  	; An interrupt will sneak through.
  4942                                  
  4943                                  ;ifndef ROMDOS
  4944                                  	;getdseg <ss>			; cli in entry of routine
  4945 000005CA 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4946                                  ;else
  4947                                  ;	mov	ds, cs:[BioDataSeg]
  4948                                  ;	assume	ds:bdata
  4949                                  ;
  4950                                  ;	mov	ss, ds:[DosDataSg]
  4951                                  ;	assume	ss:DOSDATA
  4952                                  ;
  4953                                  ;endif ; ROMDOS
  4954                                  
  4955 000005CF BC[2009]                	MOV	SP,DSKSTACK
  4956                                  		; we are now switched to DOS's disk stack
  4957                                  
  4958 000005D2 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4959                                  
  4960 000005D6 06                      	push	es ; *** (MSDOS 6.21)
  4961                                  
  4962 000005D7 E888FE                  	call	save_world	      	; save all regs
  4963                                  
  4964 000005DA 06                      	PUSH	ES ; **
  4965 000005DB E806FF                  	CALL	AbsSetup
  4966 000005DE 72B6                    	JC	short ILEAVE
  4967                                  
  4968                                  	;EnterCrit critDisk
  4969 000005E0 E8FF0C                  	call	ECritDisk
  4970 000005E3 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4971 000005E9 E88B03                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4972                                  	;LeaveCrit critDisk
  4973 000005EC E80E0D                  	call	LCritDisk
  4974                                  
  4975                                  ;M039
  4976                                  ;       DS:BX = transfer address (source data address).
  4977                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4978                                  ;	     sectors, also termed an "Extent".)
  4979                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4980                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4981                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4982                                  ;
  4983                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4984                                  ;       written. Note that all the above registers are preserved for
  4985                                  ;       DSKWRITE.
  4986                                  
  4987 000005EF 1E                              push    ds
  4988                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4989 000005F0 E8D035                  	call	DskWrtBufPurge
  4990 000005F3 1F                              pop     ds
  4991                                  ;M039
  4992                                  	;invoke	DSKWRITE
  4993 000005F4 E8A830                  	call	DSKWRITE
  4994 000005F7 EB82                    	JMP	short TLEAVE
  4995                                  
  4996                                  ;ABSDWRT ENDP
  4997                                  
  4998                                  ;----------------------------------------------------------------------------
  4999                                  ;
  5000                                  ; Procedure Name : GETBP
  5001                                  ;
  5002                                  ; Inputs:
  5003                                  ;	AL = Logical unit number (A = 0)
  5004                                  ; Function:
  5005                                  ;	Find Drive Parameter Block
  5006                                  ; Outputs:
  5007                                  ;	ES:BP points to DPB
  5008                                  ;	[THISDPB] = ES:BP
  5009                                  ;	Carry set if unit number bad or unit is a NET device.
  5010                                  ;		Later case sets extended error error_I24_not_supported
  5011                                  ; No other registers alteredjjj
  5012                                  ;
  5013                                  ;----------------------------------------------------------------------------
  5014                                  
  5015                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5016                                  GETBP:
  5017                                  	; 15/05/2019 - Retro DOS v4.0
  5018                                  	; 11/07/2018 - Retro DOS v3.0
  5019 000005F9 50                      	PUSH	AX
  5020 000005FA 0401                    	ADD	AL, 1		; No increment; need carry flag
  5021 000005FC 7210                    	JC	SHORT SKIPGET
  5022 000005FE E82563                  	CALL	GETTHISDRV
  5023                                  	; MSDOS 6.0
  5024 00000601 730B                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5025                                  	
  5026                                  	; 23/03/2024 - Retro DOS v4.2
  5027                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5028                                  	;CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  5029                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5030                                  	;STC				;DCR.			;AN000;
  5031 00000603 B400                    	mov	ah,0	
  5032                                  
  5033 00000605 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5034 00000608 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  5035                                  SKIPGET:
  5036 0000060E 58                      	POP	AX
  5037 0000060F 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  5038                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5039                                  	;jnc	short getbp_t
  5040                                  	;retn
  5041                                  getbp_t:
  5042 00000611 C42E[A205]              	LES	BP,[THISCDS]
  5043                                  	; 15/12/2022
  5044 00000615 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5045                                  	; 07/12/2022
  5046                                  	;TEST	WORD [ES:BP+43H],8000H
  5047                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5048 0000061A 7408                    	JZ	SHORT GETBP_CDS
  5049 0000061C C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5050 00000622 F9                      	STC
  5051                                  GETBP_RETN:
  5052 00000623 C3                      	RETN
  5053                                  
  5054                                  GETBP_CDS:
  5055                                  	;LES	BP,[ES:BP+45H]
  5056 00000624 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5057                                  GOTDPB:
  5058                                  	; Load THISDPB from ES:BP
  5059 00000628 892E[8A05]              	MOV	[THISDPB],BP
  5060 0000062C 8C06[8C05]              	MOV	[THISDPB+2],ES
  5061 00000630 C3                      	RETN
  5062                                  
  5063                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5064                                  
  5065                                  ;----------------------------------------------------------------------------
  5066                                  ;
  5067                                  ; Procedure Name : SYS_RETURN
  5068                                  ;
  5069                                  ; These are the general system call exit mechanisms. All internal system
  5070                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5071                                  ; is to set the user's flags and set his AX register for return.
  5072                                  ;
  5073                                  ;----------------------------------------------------------------------------
  5074                                  
  5075                                          ;procedure   SYS_RETURN,NEAR
  5076                                  SYS_RETURN:        
  5077                                          ;entry	SYS_RET_OK
  5078                                  SYS_RET_OK:   
  5079 00000631 E84DFE                  	call    Get_User_Stack
  5080                                  		; turn off user's carry flag
  5081                                  SYS_RET_OK_clc: ; 25/06/2019 
  5082                                          ;;and	word [SI+16h],0FFFEh 
  5083                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5084                                          ; 25/06/2019
  5085 00000634 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5086 00000638 EB10                    	JMP     SHORT DO_RET
  5087                                  
  5088                                          ;entry   SYS_RET_ERR
  5089                                  SYS_RET_ERR:        
  5090 0000063A 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5091 0000063C E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5092 0000063F E81A00                  	CALL	ErrorMap
  5093                                  
  5094                                  	;entry	From_GetSet
  5095                                  From_GetSet:
  5096 00000642 E83CFE                          call    Get_User_Stack
  5097                                  		 ; signal carry to user
  5098                                  	;;or	word [SI+16h],1
  5099                                  	;OR	word [SI+user_env.user_F],f_Carry
  5100                                  	; 25/06/2019
  5101 00000645 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5102 00000649 F9                      	STC			; also, signal internal error
  5103                                  DO_RET:
  5104                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5105 0000064A 8904                    	MOV	[SI],AX
  5106 0000064C C3                      	RETN
  5107                                  
  5108                                  	;entry	FCB_RET_OK
  5109                                  FCB_RET_OK:
  5110                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5111                                  NO_OP:
  5112 0000064D 30C0                    	XOR	AL,AL
  5113 0000064F C3                      	retn
  5114                                  
  5115                                  	;entry	FCB_RET_ERR
  5116                                  FCB_RET_ERR:
  5117 00000650 30E4                    	XOR	AH,AH
  5118 00000652 36A3[2403]              	mov	[ss:EXTERR],AX
  5119 00000656 E80300                  	CALL	ErrorMap
  5120 00000659 B0FF                    	MOV	AL,-1
  5121 0000065B C3                      	retn
  5122                                  
  5123                                  	;entry	ErrorMap
  5124                                  ErrorMap:
  5125 0000065C 56                      	PUSH	SI
  5126                                  				; ERR_TABLE_21 is now in DOSDATA
  5127 0000065D BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5128                                  				; SS override for FAILERR and EXTERR
  5129 00000660 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5130 00000666 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5131                                  		 ; Ooops, this is the REAL reason
  5132                                  	;mov	word [SS:EXTERR],53h
  5133 00000668 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5134                                  EXTENDED_NORMAL:
  5135 0000066F E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5136 00000672 5E                      	POP	SI
  5137 00000673 C3                      	retn
  5138                                  
  5139                                  	;EndProc SYS_RETURN
  5140                                  
  5141                                  ;---------------------------------------------------------------------------
  5142                                  ;
  5143                                  ; Procedure Name : CAL_LK
  5144                                  ;
  5145                                  ; Inputs:
  5146                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5147                                  ;		(DS NEED not be DOSDATA)
  5148                                  ;	[EXTERR] is set with error
  5149                                  ; Function:
  5150                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5151                                  ; Outputs:
  5152                                  ;	[EXTERR_CLASS] set
  5153                                  ;	[EXTERR_ACTION] set
  5154                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5155                                  ; Destroys SI, FLAGS
  5156                                  ;
  5157                                  ;---------------------------------------------------------------------------
  5158                                  
  5159                                  	;procedure CAL_LK,NEAR
  5160                                  CAL_LK:
  5161 00000674 1E                      	PUSH	DS
  5162 00000675 50                      	PUSH	AX
  5163 00000676 53                      	PUSH	BX
  5164                                  
  5165                                  ;M048	Context DS		; DS:SI -> Table
  5166                                  ;
  5167                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5168                                  ; is DOSDATA
  5169                                  
  5170                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5171                                  	; 15/05/2019 - Retro DOS v4.0
  5172 00000677 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5173                                  
  5174                                  	; 18/07/2018
  5175                                  	;push	ss
  5176                                  	;pop	ds
  5177                                  
  5178 0000067C 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5179                                  TABLK1:
  5180 00000680 AC                      	LODSB
  5181                                  
  5182 00000681 3CFF                    	CMP	AL,0FFH
  5183 00000683 7409                    	JZ	short GOT_VALS	; End of table
  5184 00000685 38D8                    	CMP	AL,BL
  5185 00000687 7405                    	JZ	short GOT_VALS	; Got entry
  5186 00000689 83C603                  	ADD	SI,3		; Next table entry
  5187                                  	; 15/08/2018
  5188 0000068C EBF2                    	JMP	short TABLK1
  5189                                  
  5190                                  GOT_VALS:
  5191 0000068E AD                      	LODSW			; AL is CLASS, AH is ACTION
  5192                                  
  5193 0000068F 80FCFF                  	CMP	AH,0FFH
  5194 00000692 7404                    	JZ	short NO_SET_ACT
  5195 00000694 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5196                                  NO_SET_ACT:
  5197 00000698 3CFF                    	CMP	AL,0FFH
  5198 0000069A 7403                    	JZ	short NO_SET_CLS
  5199 0000069C A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5200                                  NO_SET_CLS:
  5201 0000069F AC                      	LODSB			; Get LOCUS
  5202                                  
  5203 000006A0 3CFF                    	CMP	AL,0FFH
  5204 000006A2 7403                    	JZ	short NO_SET_LOC
  5205 000006A4 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5206                                  NO_SET_LOC:
  5207 000006A7 5B                      	POP	BX
  5208 000006A8 58                      	POP	AX
  5209 000006A9 1F                      	POP	DS
  5210 000006AA C3                      	retn
  5211                                  
  5212                                  	;EndProc CAL_LK
  5213                                  
  5214                                  ;---------------------------------------------------------------------------
  5215                                  ;
  5216                                  ; Procedure Name : ETAB_LK
  5217                                  ;
  5218                                  ; Inputs:
  5219                                  ;	AX is error code
  5220                                  ;	[USER_IN_AX] has AH value of system call involved
  5221                                  ; Function:
  5222                                  ;	Make sure error code is appropriate to this call.
  5223                                  ; Outputs:
  5224                                  ;	AX MAY be mapped error code
  5225                                  ;	[EXTERR] = Input AX
  5226                                  ; Destroys ONLY AX and FLAGS
  5227                                  ;
  5228                                  ;---------------------------------------------------------------------------
  5229                                  
  5230                                  	;procedure ETAB_LK,NEAR
  5231                                  
  5232                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5233 000006AB 1E                      	PUSH	DS
  5234 000006AC 56                      	PUSH	SI
  5235 000006AD 51                      	PUSH	CX
  5236 000006AE 53                      	PUSH	BX
  5237                                  
  5238                                  	;Context DS			; SS is DOSDATA
  5239                                  
  5240 000006AF 16                      	push	ss
  5241 000006B0 1F                      	pop	ds
  5242                                  
  5243 000006B1 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5244                                  
  5245                                  					; I21_MAP_E_TAB is now in DOSCODE
  5246 000006B4 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5247 000006B7 88C7                    	MOV	BH,AL			; Real code to BH
  5248 000006B9 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5249                                  TABLK2:
  5250                                  	; 15/05/2019 - Retro DOS v4.0
  5251 000006BD 2E                      	cs
  5252 000006BE AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5253                                  	
  5254                                  	; 18/07/2018 - Retro DOS v3.0
  5255                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5256                                  
  5257 000006BF 3CFF                    	CMP	AL,0FFH 		; End of table?
  5258 000006C1 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5259 000006C3 38D8                    	CMP	AL,BL			; Found call?
  5260 000006C5 740C                    	JZ	short GOT_CALL		; Yes
  5261 000006C7 86E0                    	XCHG	AH,AL			; Count to AL
  5262 000006C9 30E4                    	XOR	AH,AH			; Make word for add
  5263 000006CB 01C6                    	ADD	SI,AX			; Next table entry
  5264 000006CD EBEE                    	JMP	short TABLK2
  5265                                  
  5266                                  NOT_IN_TABLE:
  5267 000006CF 88F8                    	MOV	AL,BH			; Restore original code
  5268 000006D1 EB0C                    	JMP	SHORT NO_MAP
  5269                                  
  5270                                  GOT_CALL:
  5271 000006D3 88E1                    	MOV	CL,AH
  5272 000006D5 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5273                                  CHECK_CODE:
  5274                                  	; 15/05/2019 - Retro DOS v4.0
  5275 000006D7 2E                      	cs
  5276 000006D8 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5277                                  
  5278                                  	; 18/07/2018
  5279                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5280                                  
  5281 000006D9 38F8                    	CMP	AL,BH			; Code OK?
  5282 000006DB 7402                    	JZ	short NO_MAP		; Yes
  5283 000006DD E2F8                    	LOOP	CHECK_CODE
  5284                                  NO_MAP:
  5285 000006DF 30E4                    	XOR	AH,AH			; AX is now valid code
  5286 000006E1 5B                      	POP	BX
  5287 000006E2 59                      	POP	CX
  5288 000006E3 5E                      	POP	SI
  5289 000006E4 1F                      	POP	DS
  5290 000006E5 C3                      	retn
  5291                                  
  5292                                  	;EndProc ETAB_LK
  5293                                  
  5294                                  ; 18/07/2018 - Retro DOS v3.0
  5295                                  ;---------------------------------------------------------------------------
  5296                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5297                                  
  5298                                  ;IF installed ; (*)
  5299                                  
  5300                                  ;---------------------------------------------------------------------------
  5301                                  ;
  5302                                  ; Procedure Name : SetBad
  5303                                  ;
  5304                                  ; SetBad sets up info for bad functions
  5305                                  ;
  5306                                  ;---------------------------------------------------------------------------
  5307                                  
  5308                                  SetBad:
  5309                                  	;mov	ax,1
  5310 000006E6 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5311                                  
  5312                                  	; MSDOS 3.3
  5313                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5314                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5315                                  
  5316                                  ;	set up ds to point to DOSDATA
  5317                                  
  5318                                  	; 15/05/2019 - Retro DOS v4.0
  5319                                  	; MSDOS 6.0
  5320 000006E9 1E                      	push	ds
  5321                                  
  5322                                  	;getdseg <ds>
  5323 000006EA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5324                                  
  5325 000006EF C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5326                                  
  5327 000006F4 1F                      	pop	ds	  	;hkn; restore ds
  5328                                  
  5329 000006F5 F9                      	STC
  5330 000006F6 C3                      	retn
  5331                                  
  5332                                  ;--------------------------------------------------------------------------
  5333                                  ;
  5334                                  ; Procedure Name : BadCall
  5335                                  ;
  5336                                  ; BadCall is the initial routine for bad function calls
  5337                                  ;
  5338                                  ;--------------------------------------------------------------------------
  5339                                  
  5340                                  BadCall:
  5341 000006F7 E8ECFF                  	call	SetBad
  5342 000006FA CB                      	retf
  5343                                  
  5344                                  ;--------------------------------------------------------------------------
  5345                                  ;
  5346                                  ; OKCall always sets carry to off.
  5347                                  ;
  5348                                  ;-----------------------------------------------------------------------
  5349                                  
  5350                                  OKCall:
  5351 000006FB F8                      	CLC
  5352 000006FC CB                      	retf
  5353                                  
  5354                                  ;---------------------------------------------------------------------------
  5355                                  ;
  5356                                  ; Procedure Name : INT2F
  5357                                  ;
  5358                                  ; INT 2F handler works as follows:
  5359                                  ;   PUSH    AX
  5360                                  ;   MOV     AX,multiplex:function
  5361                                  ;   INT     2F
  5362                                  ;   POP     ...
  5363                                  ; The handler itself needs to make the AX available for the various routines.
  5364                                  ;
  5365                                  ;----------------------------------------------------------------------------
  5366                                  
  5367                                  ; 15/05/2019 - Retro DOS v4.0
  5368                                  
  5369                                  ;KERNEL_SEGMENT equ 70h
  5370                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5371                                  DOSBIODATASEG equ 70h
  5372                                  
  5373                                  ; retrodos4.s - offset in BIOSDATA
  5374                                  bios_i2f equ 5
  5375                                  
  5376                                  ;PUBLIC	Int2F
  5377                                  ;INT2F	PROC	FAR
  5378                                  
  5379                                  ; 15/05/2019
  5380                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5381                                  
  5382                                  ; 04/11/2022
  5383                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5384                                  
  5385                                  	; 05/01/2024
  5386                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5387                                  	; 18/07/2018 - Retro DOS v3.0
  5388                                  INT2F:
  5389                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5390                                  INT2FNT:
  5391                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5392 000006FD FB                      	STI
  5393                                  	;cmp	ah,11h
  5394 000006FE 80FC11                  	CMP	AH,MultNET
  5395 00000701 750A                    	JNZ	short INT2FSHR
  5396                                  TestInstall:
  5397 00000703 08C0                    	OR	AL,AL
  5398 00000705 7403                    	JZ	short Leave2F
  5399                                  BadFunc:
  5400 00000707 E8DCFF                  	CALL	SetBad
  5401                                  
  5402                                  	;entry	Leave2F
  5403                                  Leave2F:
  5404 0000070A CA0200                  	RETF	2			; long return + clear flags off stack
  5405                                  
  5406                                  INT2FSHR:
  5407                                  	;cmp	ah,10h
  5408 0000070D 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5409 00000710 74F1                    	JZ	short TestInstall	; yes, check for installation
  5410                                  INT2FNLS:
  5411                                  	;cmp	ah,14h
  5412 00000712 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5413 00000715 74EC                    	JZ	short TestInstall	; yes check for installation
  5414                                  INT2FDOS:
  5415                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5416                                  
  5417                                  	; 18/07/2018
  5418                                  	; MSDOS 3.3
  5419                                  	;;cmp	ah,12h	
  5420                                  	;CMP	AH,MultDOS
  5421                                  	;jz	short DispatchDOS
  5422                                  	;iret
  5423                                  
  5424                                  	; 15/05/2019
  5425                                  	; MSDOS 6.0
  5426                                  	;cmp	ah,12h	; 07/12/2022
  5427 00000717 80FC12                  	CMP	AH,MultDOS
  5428 0000071A 7503                    	JNZ	short check_win		;check if win386 broadcast
  5429 0000071C E9F201                  	jmp	DispatchDOS
  5430                                  
  5431                                  	; .... win386 .... 
  5432                                  
  5433                                  check_win:
  5434                                  	;cmp	ah,16h
  5435 0000071F 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5436 00000722 7408                    	je	short Win386_Msg
  5437                                  
  5438                                  	; M044
  5439                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5440                                  	; of Windows. If so, do special action of going and saving last para
  5441                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5442                                  	; bug
  5443                                  
  5444 00000724 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5445                                  	;jne	short next_i2f		; no, chain on
  5446                                  	; 15/12/2022
  5447                                  	;jmp	winold_swap		; yes, do desired action
  5448 00000727 7442                    	je	short winold_swap
  5449 00000729 E90501                  	jmp	next_i2f
  5450                                  
  5451                                  	; 15/12/2022
  5452                                  ;next_i2f:
  5453                                  ;	;;;jmp	bios_i2f
  5454                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5455                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5456                                  ;	; 04/11/2022
  5457                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5458                                  
  5459                                  ;	IRET				; This assume that we are at the head
  5460                                  					; of the list
  5461                                  ;INT2F	ENDP
  5462                                  
  5463                                  ; 15/05/2019 - Retro DOS v4.0
  5464                                  
  5465                                  ; We have received a message from Win386. There are three possible
  5466                                  ; messages we could get from Win386:
  5467                                  ;
  5468                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5469                                  ;		  to the Win386 startup info structure.
  5470                                  ; Exit		- for this, we clear the IsWin386 flag.
  5471                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5472                                  ;		  has already been handled. this is indicated by setting
  5473                                  ;		  CX to a non-zero value.
  5474                                  
  5475                                  Win386_Msg:
  5476 0000072C 1E                      	push	ds
  5477                                  
  5478                                  	;getdseg <DS>			; ds is DOSDATA
  5479 0000072D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5480                                  
  5481                                  	; For WIN386 2.xx instance data
  5482                                  
  5483 00000732 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5484 00000734 7503                    	jne	short Win386_Msg_exit
  5485 00000736 E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5486                                  Win386_Msg_exit:
  5487 00000739 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5488 0000073B 7503                    	jne	short Win386_Msg_devcall
  5489 0000073D E92C01                  	jmp	Win386_Leaving
  5490                                  Win386_Msg_devcall:
  5491 00000740 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5492 00000742 7503                    	jne	short Win386_Msg_init
  5493 00000744 E96001                  	jmp	Win386_Query
  5494                                  Win386_Msg_init:
  5495 00000747 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5496 00000749 7403                    	je	short Win386_Starting
  5497 0000074B E9E200                  	jmp	win_nexti2f		; no, return
  5498                                  Win386_Starting:
  5499                                  	; 17/12/2022
  5500 0000074E F6C201                  	test	dl,1
  5501                                  	;test	dx,1			; is this really win386?
  5502 00000751 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5503 00000753 E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5504                                  Win386_vchk:
  5505                                  	; M018 -- start of block changes
  5506                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5507                                  	; than 030Ah, we skip the VxD presence check
  5508                                  
  5509                                  ;M067 -- Begin changes
  5510                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5511                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5512                                  ;So, we null out the VxD ptr before the check.
  5513                                  
  5514                                  	;mov	word [Win386_Info+6],0
  5515 00000756 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5516                                  	;mov	word [Win386_Info+8],0
  5517 0000075C C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5518                                  
  5519                                  ;M067 -- End changes
  5520                                  
  5521                                  ;ifdef JAPAN
  5522                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5523                                  ;else
  5524 00000762 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5525                                  ;endif
  5526                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5527 00000766 724E                    	jb	short Win386_vxd
  5528 00000768 E9DD00                  	jmp	noVxD31
  5529                                  
  5530                                  	; 15/12/2022
  5531                                  winold_swap:
  5532 0000076B 1E                      	push	ds
  5533 0000076C 06                      	push	es
  5534 0000076D 56                      	push	si
  5535 0000076E 57                      	push	di
  5536 0000076F 51                      	push	cx
  5537                                  
  5538                                  	;getdseg <ds>			;ds = DOSDATA
  5539 00000770 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5540                                  
  5541 00000775 3C01                    	cmp	al,1			;swap Windows out call
  5542 00000777 751B                    	jne	short swapin		;no, check if Swap in call
  5543 00000779 E88801                  	call	getwinlast
  5544 0000077C 1E                      	push	ds
  5545 0000077D 07                      	pop	es
  5546 0000077E 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5547 00000780 31F6                    	xor	si,si
  5548 00000782 BF[0600]                	mov	di,WinoldPatch1
  5549 00000785 B90800                  	mov	cx,8
  5550 00000788 FC                      	cld
  5551 00000789 51                      	push	cx
  5552 0000078A F3A4                    	rep	movsb			;save first 8 bytes
  5553 0000078C 59                      	pop	cx
  5554 0000078D BF[CD0D]                	mov	di,WinoldPatch2
  5555 00000790 F3A4                    	rep	movsb			;save next 8 bytes
  5556 00000792 EB1B                    	jmp	short winold_done
  5557                                  swapin:
  5558 00000794 3C02                    	cmp	al,2			;swap Windows in call?
  5559 00000796 7517                    	jne	short winold_done	;no, something else, pass it on
  5560 00000798 E86901                  	call	getwinlast
  5561 0000079B 8EC6                    	mov	es,si
  5562 0000079D 31FF                    	xor	di,di
  5563 0000079F BE[0600]                	mov	si,WinoldPatch1
  5564 000007A2 B90800                  	mov	cx,8
  5565 000007A5 FC                      	cld
  5566 000007A6 51                      	push	cx
  5567 000007A7 F3A4                    	rep	movsb			;restore first 8 bytes
  5568 000007A9 59                      	pop	cx
  5569 000007AA BE[CD0D]                	mov	si,WinoldPatch2
  5570 000007AD F3A4                    	rep	movsb			;restore next 8 bytes
  5571                                  winold_done:
  5572 000007AF 59                      	pop	cx
  5573 000007B0 5F                      	pop	di
  5574 000007B1 5E                      	pop	si
  5575 000007B2 07                      	pop	es
  5576 000007B3 1F                      	pop	ds
  5577 000007B4 EB7B                    	jmp	short next_i2f		;chain on
  5578                                  	; 15/12/2022
  5579                                  	;jmp	next_i2f	
  5580                                  
  5581                                  Win386_vxd:
  5582 000007B6 50                      	push	ax
  5583 000007B7 53                      	push	bx
  5584 000007B8 51                      	push	cx
  5585 000007B9 52                      	push	dx
  5586 000007BA 56                      	push	si
  5587 000007BB 57                      	push	di			; save regs !!dont change order!!
  5588                                  
  5589 000007BC 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5590 000007C0 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5591 000007C3 741F                    	je	short Vxd31		; N: continue
  5592                                  					; Y: save arena associated with 
  5593                                  					;    umb_head
  5594                                  
  5595 000007C5 C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5596                                  					; umb_arena
  5597 000007CA 1E                      	push	ds
  5598 000007CB 06                      	push	es
  5599                                  
  5600                                  	;mov	ax,ds
  5601                                  	;mov	es,ax			; es - > dosdata
  5602                                  	; 05/01/2024
  5603 000007CC 1E                      	push	ds
  5604 000007CD 07                      	pop	es
  5605                                  
  5606 000007CE 8EDB                    	mov	ds,bx
  5607 000007D0 31F6                    	xor	si,si			; ds:si -> umb_head
  5608                                  
  5609 000007D2 FC                      	cld
  5610                                  
  5611 000007D3 BF[1F12]                	mov	di,UmbSave1
  5612 000007D6 B90B00                  	mov	cx,11
  5613 000007D9 F3A4                    	rep	movsb
  5614                                  
  5615 000007DB BF[D50D]                	mov	di,UmbSave2
  5616                                  	;mov	cx,5
  5617                                  	; 18/12/2022
  5618 000007DE B105                    	mov	cl,5
  5619 000007E0 F3A4                    	rep	movsb	
  5620                                  
  5621 000007E2 07                      	pop	es
  5622 000007E3 1F                      	pop	ds			; M062 - End
  5623                                  
  5624                                  Vxd31:
  5625                                  	;test	byte [DOS_FLAG],2
  5626 000007E4 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5627 000007E9 7408                    	jz	short Dont_Supress		; M066
  5628 000007EB 5F                      	pop	di				; M066
  5629 000007EC 5E                      	pop	si				; M066
  5630 000007ED 5A                      	pop	dx				; M066
  5631 000007EE 59                      	pop	cx				; M066
  5632 000007EF 5B                      	pop	bx				; M066
  5633 000007F0 58                      	pop	ax				; M066
  5634 000007F1 EB55                    	jmp	short noVxD31			; M066
  5635                                  
  5636                                  	; We check here if the VxD is available in the root of the boot drive. 
  5637                                  	; We do an extended open to suppress any error messages
  5638                                  	
  5639                                  Dont_Supress:
  5640 000007F3 A0[6900]                	mov	al,[BOOTDRIVE]
  5641 000007F6 0440                    	add	al,'A' - 1		; get drive letter
  5642 000007F8 A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5643                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5644                                  	;mov	al,0			; no extended attributes
  5645                                  	; 18/12/2022
  5646 000007FB B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5647 000007FE BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5648                                  					; no inherit, suppress crit err
  5649 00000801 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5650 00000804 BA0100                  	mov	dx,1			; fail if file does not exist
  5651 00000807 BE[3110]                	mov	si,VxDpath	
  5652                                  					; path of VxD file
  5653 0000080A BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5654                                  
  5655 0000080D CD21                    	int	21h			; do extended open
  5656                                  
  5657 0000080F 5F                      	pop	di
  5658 00000810 5E                      	pop	si
  5659 00000811 5A                      	pop	dx
  5660 00000812 59                      	pop	cx
  5661                                  
  5662 00000813 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5663                                  
  5664                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5665                                  	; to indicate error to Windows after displaying message to user that 
  5666                                  	; VxD needs to be present to run Windows in enhanced mode.
  5667                                  
  5668 00000815 52                      	push	dx
  5669 00000816 1E                      	push	ds
  5670 00000817 56                      	push	si
  5671 00000818 BE[AC09]                	mov	si,NoVxDErrMsg
  5672 0000081B 0E                      	push	cs
  5673 0000081C 1F                      	pop	ds
  5674 0000081D B96300                  	mov	cx,VxDMesLen ; 99	;
  5675 00000820 B402                    	mov	ah,2			; write char to console
  5676 00000822 FC                      	cld
  5677                                  vxdlp:
  5678 00000823 AC                      	lodsb
  5679 00000824 86D0                    	xchg	dl,al			; get char in dl
  5680 00000826 CD21                    	int	21h
  5681 00000828 E2F9                    	loop	vxdlp
  5682                                  
  5683 0000082A 5E                      	pop	si
  5684 0000082B 1F                      	pop	ds
  5685 0000082C 5A                      	pop	dx
  5686 0000082D 5B                      	pop	bx
  5687 0000082E 58                      	pop	ax			;all registers restored
  5688 0000082F 41                      	inc	cx			;cx != 0 to indicate error
  5689                                  	; 15/12/22022
  5690                                  	;jmp	win_nexti2f		;chain on
  5691                                  	;jmp	short win_nexti2f
  5692                                  
  5693                                  	; 15/12/2022
  5694                                  win_nexti2f:
  5695 00000830 1F                      	pop	ds
  5696                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5697                                  	; 15/12/2022
  5698                                  next_i2f:
  5699                                  	;;;jmp	bios_i2f
  5700                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5701                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5702                                  	; 04/11/2022
  5703 00000831 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5704                                  
  5705                                  VxDthere:
  5706 00000836 89C3                    	mov	bx,ax
  5707 00000838 B43E                    	mov	ah,CLOSE ; 3Eh
  5708 0000083A CD21                    	int	21h			;close the file
  5709                                  
  5710                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5711                                  
  5712                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5713                                  	;mov	bx,Win386_Info
  5714                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5715                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5716                                  	; 15/12/2022
  5717 0000083C C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5718 00000842 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5719                                  
  5720 00000846 5B                      	pop	bx
  5721 00000847 58                      	pop	ax
  5722                                  noVxD31:
  5723                                  	; M018; End of block changes
  5724                                  
  5725 00000848 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5726 0000084D 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5727                                  
  5728                                  	; M002;
  5729                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5730                                  
  5731 00000852 52                      	push	dx			; M002
  5732 00000853 89DA                    	mov	dx,bx			; M002
  5733                                  					; point ES:BX to Win386_Info ; M002
  5734 00000855 BB[E20F]                	mov	bx,Win386_Info 
  5735 00000858 895702                  	mov	[bx+2],dx		; M002
  5736 0000085B 8C4704                  	mov	[bx+4],es		; M002
  5737 0000085E 5A                      	pop	dx			; M002
  5738 0000085F 1E                      	push	ds			; M002
  5739 00000860 07                      	pop	es			; M002
  5740                                  	;jmp	win_nexti2f		; M002
  5741                                  	; 15/12/2022
  5742 00000861 EBCD                    	jmp	short win_nexti2f
  5743                                  
  5744                                  	; 15/12/2022
  5745                                  	; Code to return Win386 2.xx instance table
  5746                                  OldWin386Init:
  5747 00000863 58                      	pop	ax			; discard ds pushed on stack
  5748 00000864 BE[E711]                	mov	si,OldInstanceJunk 
  5749                                  					; ds:si = instance table
  5750 00000867 B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5751                                  	;jmp	next_i2f
  5752                                  	; 15/12/2022
  5753 0000086A EBC5                    	jmp	short next_i2f
  5754                                  
  5755                                  Win386_Leaving:
  5756                                  	; 15/12/2022
  5757 0000086C F6C201                  	test 	dl,1
  5758                                  	;test	dx,1			; is this really win386?
  5759                                  	;jz	short Win386_Leaving_c
  5760                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5761                                  	; 15/12/2022
  5762 0000086F 75BF                    	jnz	short win_nexti2f	
  5763                                  
  5764                                  Win386_Leaving_c:
  5765                                  					; M062 - Start
  5766 00000871 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5767                                  					;    up.
  5768 00000876 7523                    	jne	short noumb		; N: not saved 
  5769 00000878 C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5770                                  					;    previously saved umb_head
  5771                                  	; 05/01/2024
  5772                                  	;push	ax ; (not necessary)
  5773 0000087D 06                      	push	es
  5774 0000087E 51                      	push	cx
  5775 0000087F 56                      	push	si
  5776 00000880 57                      	push	di
  5777                                  
  5778                                  	;mov	ax,[UMB_HEAD]
  5779                                  	;mov	es,ax
  5780                                  	; 05/01/2024
  5781 00000881 8E06[8C00]              	mov	es,[UMB_HEAD]
  5782 00000885 31FF                    	xor	di,di			; es:di -> umb_head
  5783                                  
  5784 00000887 FC                      	cld
  5785                                  
  5786 00000888 BE[1F12]                	mov	si,UmbSave1
  5787 0000088B B90B00                  	mov	cx,11
  5788 0000088E F3A4                    	rep	movsb
  5789 00000890 BE[D50D]                	mov	si,UmbSave2
  5790                                  	;mov	cx,5
  5791                                  	; 18/12/2022
  5792 00000893 B105                    	mov	cl,5
  5793 00000895 F3A4                    	rep	movsb
  5794                                  
  5795 00000897 5F                      	pop	di
  5796 00000898 5E                      	pop	si
  5797 00000899 59                      	pop	cx
  5798 0000089A 07                      	pop	es
  5799                                  	; 05/01/2024
  5800                                  	;pop	ax
  5801                                  noumb:					; M062 - End
  5802 0000089B 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5803 000008A0 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5804 000008A5 EB89                    	jmp	short win_nexti2f
  5805                                  
  5806                                  ;	; 15/12/2022
  5807                                  ;	; Code to return Win386 2.xx instance table
  5808                                  ;OldWin386Init:
  5809                                  ;	pop	ax			; discard ds pushed on stack
  5810                                  ;	mov	si,OldInstanceJunk 
  5811                                  ;					; ds:si = instance table
  5812                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5813                                  ;	;jmp	next_i2f
  5814                                  ;	; 15/12/2022
  5815                                  ;	jmp	short _next_i2f
  5816                                  
  5817                                  Win386_Query:
  5818 000008A7 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5819 000008AA 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5820 000008AC 09C9                    	or	cx,cx			; is it an instance query?
  5821 000008AE 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5822 000008B0 41                      	inc	cx			; indicate that data is instanced
  5823                                  ;
  5824                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5825                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5826                                  ; M001;  
  5827                                  ; M001; OFFSETS STRUC
  5828                                  ; M001; 	Major_version	db	?
  5829                                  ; M001; 	Minor_version	db	?
  5830                                  ; M001; 	SaveDS		dw	?
  5831                                  ; M001; 	SaveBX		dw	?
  5832                                  ; M001; 	Indos		dw	?
  5833                                  ; M001; 	User_id		dw	?
  5834                                  ; M001; 	CritPatch	dw	?
  5835                                  ; M001; OFFSETS	ENDS
  5836                                  ; M001; 
  5837                                  ; M001; User_Id is the only variable really important for proper functioning  
  5838                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5839                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5840                                  ; M001; pass this table because Win386 depends on this table to get the 
  5841                                  ; M001; User_Id offset.
  5842                                  ; M001; 
  5843 000008B1 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5844 000008B4 1E                      	push	ds			; M001
  5845 000008B5 07                      	pop	es			; es:bx points at offset table ; M001
  5846 000008B6 EB40                    	jmp	short PopIret		; M001
  5847                                  
  5848                                  ; 15/12/2022
  5849                                  ;	; Code to return Win386 2.xx instance table
  5850                                  ;OldWin386Init:
  5851                                  ;	pop	ax			; discard ds pushed on stack
  5852                                  ;	mov	si,OldInstanceJunk 
  5853                                  ;					; ds:si = instance table
  5854                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5855                                  ;	;jmp	next_i2f
  5856                                  ;	; 15/12/2022
  5857                                  ;	jmp	short _next_i2f
  5858                                  
  5859                                  dosmgr_func:
  5860 000008B8 49                      	dec	cx
  5861 000008B9 7435                    	jz	short win386_patch	; call to patch DOS
  5862 000008BB 49                      	dec	cx
  5863 000008BC 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5864 000008BE 49                      	dec	cx
  5865 000008BF 7439                    	jz	short win386_size	; get size of DOS data structures
  5866 000008C1 49                      	dec	cx
  5867 000008C2 7428                    	jz	short win386_inst	; instance more data
  5868                                  	;dec	cx
  5869                                  	;jnz	short PopIret		; no functions above this
  5870                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5871 000008C4 E232                    	loop	PopIret
  5872                                  
  5873                                  	; Get DOS device driver size -- es:di points at device driver header
  5874                                  	; In DOS 4.x, the para before the device header contains an arena 
  5875                                  	; header for the driver.
  5876                                  
  5877 000008C6 8CC0                    	mov	ax,es			; ax = device header segment
  5878                                  
  5879                                  	; We check to see if we have a memory arena for this device driver. 
  5880                                  	; The way to do this would be to look at the previous para to see if
  5881                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5882                                  	; in the arena is the same as the device header segment. These two 
  5883                                  	; checks together should take care of all cases
  5884                                  
  5885 000008C8 48                      	dec	ax			; get arena header
  5886 000008C9 06                      	push	es
  5887 000008CA 8EC0                    	mov	es,ax			; arena header for device driver
  5888                                  
  5889 000008CC 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5890 000008D0 7517                    	jnz	short cantsize		; no, cant size this driver
  5891 000008D2 40                      	inc	ax			; get back device header segment
  5892 000008D3 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5893 000008D7 7510                    	jnz	short cantsize		; no, not a proper arena
  5894                                  
  5895 000008D9 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5896 000008DD 07                      	pop	es
  5897                                  
  5898                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5899                                  	; Speed is not critical and so we choose the shortest method 
  5900                                  	; -- use "mul"
  5901                                  
  5902 000008DE BB1000                  	mov	bx,16
  5903 000008E1 F7E3                    	mul	bx
  5904 000008E3 89C1                    	mov	cx,ax
  5905 000008E5 89D3                    	mov	bx,dx
  5906 000008E7 EB09                    	jmp	short win386_done	; return with device driver size
  5907                                  cantsize:
  5908 000008E9 07                      	pop	es
  5909 000008EA 31C0                    	xor	ax,ax
  5910                                  win386_inst:	; 05/01/2024
  5911 000008EC 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5912 000008EE EB08                    	jmp	short PopIret		; return
  5913                                  
  5914                                  win386_patch:
  5915                                  	; dx contains bits marking the patches to be applied. We return 
  5916                                  	; the field with all bits set to indicate that all patches have been
  5917                                  	; done
  5918                                  
  5919 000008F0 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5920                                   	;jmp	short win386_done	; done, return
  5921                                  	; 15/12/2022
  5922                                  	; 15/12/2022
  5923                                  win386_done:
  5924 000008F2 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5925 000008F5 BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5926                                  PopIret:
  5927 000008F8 1F                      	pop	ds
  5928 000008F9 CF                      	iret	
  5929                                  
  5930                                  win386_size:
  5931                                  	; Return the size of DOS data structures -- currently only CDS size
  5932                                  
  5933                                  	; 17/12/2022
  5934 000008FA F6C201                  	test	dl,1
  5935                                  	;test	dx,1			; check for CDS size bit
  5936 000008FD 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5937                                  
  5938 000008FF B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5939 00000902 EBEE                    	jmp	short win386_done	; return with the size
  5940                                  
  5941                                  ; 05/01/2024
  5942                                  %if 0
  5943                                  win386_inst:
  5944                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5945                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5946                                  	; this by returning a status of not previously instanced. The basic
  5947                                  	; structure of these things have not changed and so the current
  5948                                  	; DOSMGR code should be able to work it out
  5949                                  
  5950                                  	xor	dx,dx			; make sure dx has a not done value
  5951                                  	jmp	short PopIret		; skip done indication
  5952                                  %endif
  5953                                  
  5954                                  	; 15/12/2022
  5955                                  ;win386_done:
  5956                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5957                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5958                                  ;PopIret:
  5959                                  ;	pop	ds
  5960                                  ;	iret				; return back up the chain
  5961                                  
  5962                                  	; 15/12/2022
  5963                                  ;win_nexti2f:
  5964                                  	;pop	ds
  5965                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5966                                  
  5967                                  ;End WIN386 support
  5968                                  
  5969                                  ; 15/05/2019
  5970                                  
  5971                                  ;M044; Start of changes
  5972                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5973                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5974                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5975                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5976                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5977                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5978                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5979                                  ; last para of the Windows memory block and then restore this para on the
  5980                                  ; Windows swapin callout. 
  5981                                  
  5982                                  getwinlast:
  5983                                  	; 07/12/2022
  5984 00000904 8B36[3003]              	mov	si,[CurrentPDB]
  5985 00000908 4E                      	dec	si
  5986 00000909 8EC6                    	mov	es,si
  5987 0000090B 2603360300              	add	si,[es:3]
  5988 00000910 C3                      	retn
  5989                                  
  5990                                  ; 15/12/2022
  5991                                  %if 0
  5992                                  winold_swap:
  5993                                  	push	ds
  5994                                  	push	es
  5995                                  	push	si
  5996                                  	push	di
  5997                                  	push	cx
  5998                                  
  5999                                  	;getdseg <ds>			;ds = DOSDATA
  6000                                  	mov	ds,[cs:DosDSeg]
  6001                                  
  6002                                  	cmp	al,1			;swap Windows out call
  6003                                  	jne	short swapin		;no, check if Swap in call
  6004                                  	call	getwinlast
  6005                                  	push	ds
  6006                                  	pop	es
  6007                                  	mov	ds,si			;ds = memory arena of Windows
  6008                                  	xor	si,si
  6009                                  	mov	di,WinoldPatch1
  6010                                  	mov	cx,8
  6011                                  	cld
  6012                                  	push	cx
  6013                                  	rep	movsb			;save first 8 bytes
  6014                                  	pop	cx
  6015                                  	mov	di,WinoldPatch2
  6016                                  	rep	movsb			;save next 8 bytes
  6017                                  	jmp	short winold_done
  6018                                  swapin:
  6019                                  	cmp	al,2			;swap Windows in call?
  6020                                  	jne	short winold_done	;no, something else, pass it on
  6021                                  	call	getwinlast
  6022                                  	mov	es,si
  6023                                  	xor	di,di
  6024                                  	mov	si,WinoldPatch1
  6025                                  	mov	cx,8
  6026                                  	cld
  6027                                  	push	cx
  6028                                  	rep	movsb			;restore first 8 bytes
  6029                                  	pop	cx
  6030                                  	mov	si,WinoldPatch2
  6031                                  	rep	movsb			;restore next 8 bytes
  6032                                  winold_done:
  6033                                  	pop	cx
  6034                                  	pop	di
  6035                                  	pop	si
  6036                                  	pop	es
  6037                                  	pop	ds
  6038                                  	jmp	next_i2f		;chain on
  6039                                  
  6040                                  %endif
  6041                                  
  6042                                  ;M044; End of changes
  6043                                  
  6044                                  ; 15/05/2019
  6045                                  
  6046                                  DispatchDOS:
  6047 00000911 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6048 00000916 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6049 0000091B 50                      	PUSH	AX			; push index
  6050 0000091C 55                      	PUSH	BP
  6051 0000091D 89E5                    	MOV	BP,SP
  6052                                  		; stack looks like:
  6053                                  		;   0	BP
  6054                                  		;   2	DISPATCH
  6055                                  		;   4	TABLE
  6056                                  		;   6	RETURN
  6057                                  		;   8	LONG-RETURN
  6058                                  		;   C	FLAGS
  6059                                  		;   E	AX
  6060                                  	
  6061 0000091F 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6062 00000922 5D                      	POP	BP
  6063 00000923 E8D808                  	call	TableDispatch
  6064 00000926 E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6065                                  
  6066                                  INT2F_etcetera:
  6067                                  	;entry	DosGetGroup
  6068                                  DosGetGroup:
  6069                                  	; MSDOS 3.3
  6070                                  	;push	cs
  6071                                  	;pop	ds
  6072                                  	;retn
  6073                                  
  6074                                  	; MSDOS 6.0
  6075                                  ;SR; Cannot use CS now
  6076                                  ;
  6077                                  ;	PUSH	CS
  6078                                  ;	POP	DS
  6079                                  
  6080                                  	; 04/11/2022
  6081                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6082                                  
  6083                                  	;getdseg <ds>
  6084 00000929 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6085 0000092E C3                      	retn
  6086                                  
  6087                                  	;entry	DOSInstall
  6088                                  DOSInstall:
  6089 0000092F B0FF                    	MOV	AL,0FFh
  6090 00000931 C3                      	retn
  6091                                  
  6092                                  ;ENDIF ; (*)
  6093                                  
  6094                                  
  6095                                  ; 15/05/2019 - Retro DOS v4.0
  6096                                  
  6097                                  ;------------------------------------------------------------------------
  6098                                  ;
  6099                                  ; Procedure Name : RW32_CONVERT
  6100                                  ;
  6101                                  ;Input: same as ABSDRD and ABSDWRT
  6102                                  ;	 ES:BP -> DPB
  6103                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6104                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6105                                  ;	 carry clear, parms ok
  6106                                  ;
  6107                                  ;------------------------------------------------------------------------
  6108                                  
  6109                                  	; 06/01/2024
  6110                                  RW32_CONVERT:
  6111                                  	;inc	cx ; *	; 01 -> 0
  6112 00000932 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6113 00000935 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6114                                  	;dec	cx ; *
  6115 00000937 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6116 00000938 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6117                                  	;mov	ax,[es:bp+0Dh]
  6118 00000939 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6119                                  	;mov	dl,[es:bp+4]
  6120 0000093D 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6121 00000941 80FAFE                  	CMP	DL,0FEh ; 254		;>32mb  removable ?	;AN000;
  6122 00000944 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6123                                  	;INC	DL			;>32mb			;AN000;
  6124                                  	; 17/12/2022
  6125 00000946 42                      	inc	dx
  6126 00000947 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6127 00000949 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6128 0000094B 09D2                    	OR	DX,DX	; (clears CF)	;>32mb  > 32mb ?	;AN000;
  6129                                  letold:
  6130 0000094D 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6131 0000094E 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6132 0000094F 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6133                                  
  6134 00000951 1E                      	push	ds
  6135                                  	;getdseg <ds>
  6136 00000952 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6137 00000957 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6138 0000095D 1F                      	pop	ds
  6139                                  
  6140 0000095E F9                      	STC				;>32mb			;AN000;
  6141 0000095F C3                      	retn				;>32mb			;AN000;
  6142                                  
  6143                                  new32format:
  6144                                  	;mov	dx,[bx+2]
  6145 00000960 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6146                                  
  6147 00000963 1E                      	push	ds			; set up ds to DOSDATA
  6148                                  	;getdseg <ds>
  6149 00000964 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6150 00000969 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6151 0000096D 1F                      	pop	ds
  6152                                  
  6153 0000096E 8B17                    	mov	dx,[bx]
  6154                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6155                                  	;mov	cx,[bx+4]
  6156 00000970 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6157                                  	;lds	bx,[bx+6]
  6158 00000973 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6159                                  old_style:				;>32mb			;AN000;
  6160                                  	; 06/01/2024
  6161                                  	; cf=0
  6162                                  	;CLC				;>32mb			;AN000;
  6163 00000976 C3                      	retn				;>32mb			;AN000;
  6164                                  
  6165                                  ;------------------------------------------------------------------------
  6166                                  ;
  6167                                  ; Procedure Name : Fastxxx_Purge
  6168                                  ;
  6169                                  ; Input: None
  6170                                  ; Functions: Purge Fastopen/ Cache Buffers
  6171                                  ; Output: None
  6172                                  ;
  6173                                  ;------------------------------------------------------------------------
  6174                                  
  6175                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6176                                  
  6177                                  Fastxxx_Purge:
  6178 00000977 50                      	PUSH	AX			; save regs.	;AN000;
  6179 00000978 56                      	PUSH	SI						;AN000;
  6180 00000979 52                      	PUSH	DX						;AN000;
  6181                                  topen:
  6182 0000097A 1E                      	push	ds			; set up ds to DOSDATA
  6183                                  	;getdseg <ds>
  6184 0000097B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6185                                  
  6186 00000980 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6187                                  					; fastopen installed ?	;AN000;
  6188 00000985 1F                      	pop	ds
  6189 00000986 740B                    	JZ	short nofast		; no			;AN000;
  6190 00000988 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6191                                  dofast:
  6192 0000098A B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6193                                  	;;mov	dl,[es:bp+0]
  6194                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6195                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6196                                  	; 15/12/2022
  6197 0000098C 268A5600                	mov	dl,[es:bp]
  6198                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6199 00000990 E8DC1C                  	call	Fast_Dispatch
  6200                                  nofast:
  6201 00000993 5A                      	POP	DX						;AN000;
  6202 00000994 5E                      	POP	SI			; restore regs		;AN000;
  6203 00000995 58                      	POP	AX			 			;AN000;
  6204 00000996 C3                      	retn				; exit
  6205                                  
  6206                                  ;============================================================================
  6207                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6208                                  ;============================================================================
  6209                                  ; 29/04/2019 - Retro DOS v4.0
  6210                                  
  6211                                  ;include dossym.inc
  6212                                  ;include dosmac.inc
  6213                                  ;include doscntry.inc
  6214                                  
  6215                                  ; DOSCODE Segment
  6216                                  
  6217                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6218                                  ; ---------------------------------------------------------------------------
  6219                                  ;include divmes.inc
  6220                                  
  6221                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6222                                  ; -------------------------------------
  6223                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6224                                  
  6225                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6226                                  	;PUBLIC	DIVMES
  6227                                  
  6228 00000997 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6228 000009A0 6F766572666C6F770D-
  6228 000009A9 0A                 
  6229                                  
  6230                                  	;PUBLIC	DivMesLen
  6231                                  DivMesLen:
  6232 000009AA 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6233                                  
  6234                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6235                                  ; -------------------------------------
  6236                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6237                                  
  6238                                  ; (MSDOS 6.0)
  6239                                  ; VxD not found error message
  6240                                  
  6241                                  NoVxDErrMsg:
  6242 000009AC 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6242 000009B5 686176652074686520-
  6242 000009BE 66696C652057494E41-
  6242 000009C7 32302E33383620696E-
  6242 000009D0 2074686520726F6F74-
  6242 000009D9 206F6620796F757220-
  6242 000009E2 626F6F742064726976-
  6242 000009EB 65                 
  6243 000009EC 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6243 000009F5 57696E646F77732069-
  6243 000009FE 6E20456E68616E6365-
  6243 00000A07 64204D6F64650D0A   
  6244                                  
  6245                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6246                                  
  6247                                  ; 13/05/2019 - Retro DOS v4.0
  6248                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6249                                  
  6250                                  ;include yesno.asm  (MNSDOS 6.0)
  6251                                  ; -------------------------------------
  6252                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6253                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6254                                  
  6255                                  ; This is for country Yes and No
  6256                                  
  6257 00000A0F 59                      NLS_YES:	db 'Y'
  6258 00000A10 4E                      NLS_NO:		db 'N'
  6259 00000A11 79                      NLS_yes2:	db 'y'
  6260 00000A12 6E                      NLS_no2:	db 'n'
  6261                                  
  6262                                  ; ---------------------------------------------------------------------------
  6263                                  
  6264                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6265                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6266                                  
  6267                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6268                                  
  6269                                  ; The following two tables implement the current buffered input editing
  6270                                  ; routines. The tables are pairwise associated in reverse order for ease
  6271                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6272                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6273                                  
  6274                                  	;PUBLIC	CANCHAR
  6275                                  CANCHAR:
  6276 00000A13 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6277                                  	
  6278                                  	;PUBLIC	ESCCHAR
  6279                                  ESCCHAR:
  6280 00000A14 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6281                                  	
  6282                                  	;IF	NOT Rainbow
  6283                                  
  6284                                  ESCTAB:	; LABEL BYTE
  6285                                  
  6286                                  	;IF	IBM
  6287 00000A15 40                      	DB	64		; Ctrl-Z - F6
  6288 00000A16 4D                      	DB	77		; Copy one char - -->
  6289 00000A17 3B                      	DB	59		; Copy one char - F1
  6290 00000A18 53                      	DB	83		; Skip one char - DEL
  6291 00000A19 3C                      	DB	60		; Copy to char - F2
  6292 00000A1A 3E                      	DB	62		; Skip to char - F4
  6293 00000A1B 3D                      	DB	61		; Copy line - F3
  6294 00000A1C 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6295 00000A1D 3F                      	DB	63		; Reedit line (new template) - F5
  6296 00000A1E 4B                      	DB	75		; Backspace - <--
  6297 00000A1F 52                      	DB	82		; Enter insert mode - INS (toggle)
  6298 00000A20 52                      	DB	82		; Exit insert mode - INS (toggle)
  6299 00000A21 41                      	DB	65		; Escape character - F7
  6300 00000A22 41                      	DB	65		; End of table
  6301                                  	;ENDIF
  6302                                  
  6303                                  ESCEND: ; LABEL BYTE
  6304                                  
  6305                                  ESCTABLEN EQU ESCEND-ESCTAB
  6306                                  
  6307                                  ESCFUNC: ; LABEL WORD
  6308                                  	
  6309 00000A23 [E913]                  	short_addr  GETCH	; Ignore the escape sequence
  6310 00000A25 [6614]                  	short_addr  TWOESC
  6311 00000A27 [5B15]                  	short_addr  EXITINS
  6312 00000A29 [5B15]                  	short_addr  ENTERINS
  6313 00000A2B [6114]                  	short_addr  BACKSP
  6314 00000A2D [4715]                  	short_addr  REEDIT
  6315 00000A2F [4E14]                  	short_addr  KILNEW
  6316 00000A31 [DD14]                  	short_addr  COPYLIN
  6317 00000A33 [0F15]                  	short_addr  SKIPSTR
  6318 00000A35 [E314]                  	short_addr  COPYSTR
  6319 00000A37 [0615]                  	short_addr  SKIPONE
  6320 00000A39 [E814]                  	short_addr  COPYONE
  6321 00000A3B [E814]                  	short_addr  COPYONE
  6322 00000A3D [6215]                  	short_addr  CTRLZ
  6323                                  
  6324                                  	;ENDIF
  6325                                  
  6326                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6327                                  ; ---------------------------------------------------------------------------
  6328                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6329                                  
  6330                                  ; OEMFunction key is expected to process a single function
  6331                                  ;   key input from a device and dispatch to the proper
  6332                                  ;   routines leaving all registers UNTOUCHED.
  6333                                  ;
  6334                                  ; Inputs:   CS, SS are DOSGROUP
  6335                                  ; Outputs:  None. This function is expected to JMP to onw of
  6336                                  ;           the following labels:
  6337                                  ;
  6338                                  ;           GetCh       - ignore the sequence
  6339                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6340                                  ;           ExitIns     - toggle insert mode
  6341                                  ;           EnterIns    - toggle insert mode
  6342                                  ;           BackSp      - move backwards one space
  6343                                  ;           ReEdit      - reedit the line with a new template
  6344                                  ;           KilNew      - discard the current line and start from scratch
  6345                                  ;           CopyLin     - copy the rest of the template into the line
  6346                                  ;           SkipStr     - read the next character and skip to it in the template
  6347                                  ;           CopyStr     - read next char and copy from template to line until char
  6348                                  ;           SkipOne     - advance position in template one character
  6349                                  ;           CopyOne     - copy next character in template into line
  6350                                  ;           CtrlZ       - place a ^Z into the template
  6351                                  ; Registers that are allowed to be modified by this function are:
  6352                                  ;           AX, CX, BP
  6353                                  
  6354                                  ; 13/05/2019 - Retro DOS v4.0
  6355                                  ; -------------------------------------
  6356                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6357                                  
  6358                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6359                                  ; -------------------------------------
  6360                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6361                                  
  6362                                  OEMFunctionKey:
  6363 00000A3F E80A09                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6364 00000A42 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6365 00000A44 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6366 00000A45 BF[150A]                	MOV     DI,ESCTAB		; offset of second byte table
  6367 00000A48 06                      	push	es
  6368 00000A49 0E                      	push	cs
  6369 00000A4A 07                      	pop	es
  6370 00000A4B F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6371 00000A4D 07                      	pop	es
  6372 00000A4E 5F                      	POP     DI                      ; restore DI
  6373 00000A4F D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6374 00000A51 89CD                    	MOV     BP,CX                   ; move to indexable register
  6375                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6376 00000A53 2EFFA6[230A]            	JMP	word [CS:BP+ESCFUNC]
  6377                                  
  6378                                  ;DOSCODE ENDS
  6379                                  	
  6380                                  ;============================================================================
  6381                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6382                                  ;============================================================================
  6383                                  ; Retro DOS v3.0 - 18/07/2018
  6384                                  
  6385                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6386                                  ;----------------------------------------------------------------------------
  6387                                  ; Retro DOS v2.0 - 13/03/2018
  6388                                  
  6389                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6390                                  
  6391                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6392                                  
  6393                                  ;**	$GET_DATE - Get Current Date
  6394                                  ;----------------------------------------
  6395                                  ;	ENTRY	none
  6396                                  ;	EXIT	(cx:dx) = current date
  6397                                  ;	USES	all
  6398                                  
  6399                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6400                                  
  6401                                  _$GET_DATE:	;System call 42
  6402                                  
  6403 00000A58 16                      	PUSH	SS
  6404 00000A59 1F                      	POP	DS
  6405 00000A5A E8AD00                  	CALL	READTIME	;Check for rollover to next day
  6406 00000A5D A1[5203]                	MOV	AX,[YEAR]
  6407                                  
  6408                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6409                                  
  6410 00000A60 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6411 00000A64 E81AFA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6412                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6413 00000A67 895C06                  	MOV	[SI+user_env.user_DX],BX
  6414 00000A6A 05BC07                  	ADD	AX,1980		;Put bias back
  6415                                  	;MOV	[SI+4],AX	;CX=year
  6416 00000A6D 894404                  	MOV	[SI+user_env.user_CX],AX
  6417 00000A70 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6418                                  RET20:	; 05/11/2022
  6419                                  RET24:	; 18/12/2022
  6420 00000A74 C3                      	RETN
  6421                                  
  6422                                  ;**	$SET_DATE - Set Current Date
  6423                                  ;----------------------------------------
  6424                                  ;	ENTRY	(cx:dx) = current date
  6425                                  ;	EXIT	(al) = -1 iff bad date
  6426                                  ;		(al) = 0 if ok
  6427                                  ;	USES	all
  6428                                  
  6429                                  _$SET_DATE:	;System call 43
  6430                                  
  6431 00000A75 B0FF                    	MOV	AL,-1		;Be ready to flag error
  6432 00000A77 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6433                                  	;JC	SHORT RET24	;Error if not big enough
  6434                                  	; 05/11/2022
  6435 00000A7B 72F7                    	jc	short RET20
  6436 00000A7D 83F977                  	CMP	CX,119		;Year must be less than 2100
  6437 00000A80 77F2                    	JA	SHORT RET24
  6438 00000A82 08F6                    	OR	DH,DH
  6439                                  	;JZ	SHORT RET24
  6440                                   	; 05/11/2022
  6441 00000A84 74EE                    	jz	short RET20
  6442 00000A86 08D2                    	OR	DL,DL
  6443                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6444                                  	; 05/11/2022
  6445 00000A88 74EA                    	jz	short RET20
  6446 00000A8A 80FE0C                  	CMP	DH,12		;Check against max. month
  6447 00000A8D 77E5                    	JA	SHORT RET24
  6448 00000A8F 16                      	PUSH	SS
  6449 00000A90 1F                      	POP	DS
  6450                                  	;CALL	DODATE
  6451                                  	; 18/12/2022
  6452 00000A91 E90301                  	jmp	DODATE
  6453                                  ;RET24:  
  6454                                  	;RETN
  6455                                  
  6456                                  ;**	$GET_TIME - Get Current Time
  6457                                  ;----------------------------------------
  6458                                  ;	ENTRY	none
  6459                                  ;	EXIT	(cx:dx) = current time
  6460                                  ;	USES	all
  6461                                  
  6462                                  _$GET_TIME:			;System call 44
  6463                                  
  6464 00000A94 16                      	PUSH	SS
  6465 00000A95 1F                      	POP	DS
  6466 00000A96 E87100                  	CALL	READTIME
  6467 00000A99 E8E5F9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6468                                  	;MOV	[SI+6],DX
  6469 00000A9C 895406                  	MOV	[SI+user_env.user_DX],DX
  6470                                  	;MOV	[SI+4],CX
  6471 00000A9F 894C04                  	MOV	[SI+user_env.user_CX],CX
  6472                                  set_time_ok:	; 06/01/2024
  6473 00000AA2 30C0                    	XOR	AL,AL
  6474                                  RET26:  
  6475 00000AA4 C3                      	RETN
  6476                                  
  6477                                  ;**	$SET_TIME - Set Current Time
  6478                                  ;----------------------------------------
  6479                                  ;	ENTRY	(cx:dx) = time
  6480                                  ;	EXIT	(al) = 0 if 0k
  6481                                  ;		(al) = -1 if invalid
  6482                                  ;	USES	ALL
  6483                                  
  6484                                  _$SET_TIME:			;System call 45
  6485                                  
  6486 00000AA5 B0FF                    	MOV	AL,-1		;Flag in case of error
  6487 00000AA7 80FD18                  	CMP	CH,24		;Check hours
  6488 00000AAA 73F8                    	JAE	SHORT RET26
  6489 00000AAC 80F93C                  	CMP	CL,60		;Check minutes
  6490 00000AAF 73F3                    	JAE	SHORT RET26
  6491 00000AB1 80FE3C                  	CMP	DH,60		;Check seconds
  6492 00000AB4 73EE                    	JAE	SHORT RET26
  6493 00000AB6 80FA64                  	CMP	DL,100		;Check 1/100's
  6494 00000AB9 73E9                    	JAE	SHORT RET26
  6495 00000ABB 51                      	PUSH	CX
  6496 00000ABC 52                      	PUSH	DX
  6497 00000ABD 16                      	PUSH	SS
  6498 00000ABE 1F                      	POP	DS
  6499                                  
  6500                                  ; 07/02/2024
  6501                                  %if 0
  6502                                  	MOV	BX,TIMEBUF
  6503                                  	MOV	CX,6
  6504                                  	; 06/02/2024 ; *
  6505                                  	;;XOR	DX,DX
  6506                                  	;;MOV	AX,DX
  6507                                  	;xor	ax,ax
  6508                                  	;cwd	; 06/01/2024
  6509                                  	PUSH	BX
  6510                                  	;CALL	SETREAD
  6511                                  	; 06/02/2024 ; *
  6512                                  	call	SETREAD_X
  6513                                  %else
  6514 00000ABF E8F03A                  	call	SETREAD_XT
  6515                                  %endif
  6516                                  
  6517 00000AC2 1E                      	PUSH	DS
  6518 00000AC3 C536[2E00]              	LDS	SI,[BCLOCK]
  6519 00000AC7 E8713A                  	CALL	DEVIOCALL2	;Get correct day count
  6520 00000ACA 1F                      	POP	DS
  6521 00000ACB 5B                      	POP	BX
  6522 00000ACC E8203B                  	CALL	SETWRITE
  6523 00000ACF 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6524 00000AD3 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6525 00000AD7 C536[2E00]              	LDS	SI,[BCLOCK]
  6526 00000ADB E85D3A                  	CALL	DEVIOCALL2	;Set the time
  6527                                  	; 06/01/2024
  6528                                  	;XOR	AL,AL
  6529                                  	;RETN
  6530 00000ADE EBC2                    	jmp	short set_time_ok
  6531                                  
  6532                                  ; 11/07/2018 - Retro DOS v3.0
  6533                                  ; Retro DOS v2.0 - 14/03/2018
  6534                                  
  6535                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6536                                  
  6537                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6538                                  ;----------------------------------------------------------
  6539                                  ; Date16 returns the current date in AX, current time in DX
  6540                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6541                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6542                                  
  6543                                  DATE16:
  6544                                  	
  6545                                  ;M048	Context DS
  6546                                  ;
  6547                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6548                                  ; is DOSDATA
  6549                                  
  6550                                  	;push	ss
  6551                                  	;pop	ds
  6552                                  
  6553                                  	;getdseg <ds>		; M048
  6554                                  
  6555                                  	; 13/05/2019 - Retro DOS v4.0
  6556 00000AE0 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6557                                  
  6558 00000AE5 51                      	PUSH	CX
  6559 00000AE6 06                      	PUSH	ES
  6560 00000AE7 E82000                  	CALL	READTIME
  6561 00000AEA 07                      	POP	ES
  6562 00000AEB D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6563 00000AED D0E1                    	SHL	CL,1
  6564 00000AEF D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6565 00000AF1 D1E1                    	SHL	CX,1
  6566 00000AF3 D1E1                    	SHL	CX,1
  6567 00000AF5 D0EE                    	SHR	DH,1		;Count every two seconds
  6568 00000AF7 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6569 00000AF9 89CA                    	MOV	DX,CX
  6570                                  
  6571                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6572                                  
  6573 00000AFB A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6574 00000AFE B104                    	MOV	CL,4
  6575 00000B00 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6576 00000B02 D1E0                    	SHL	AX,1
  6577 00000B04 59                      	POP	CX
  6578 00000B05 0A06[5003]              	OR	AL,[DAY]
  6579                                  RET21:
  6580 00000B09 C3                      	RETN
  6581                                  
  6582                                  ;----------------------------------------------------------
  6583                                  
  6584                                  READTIME:
  6585                                  
  6586                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6587                                  ;Uses AX, CX, DX.
  6588                                  
  6589 00000B0A C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6590 00000B10 56                      	PUSH	SI
  6591 00000B11 53                      	PUSH	BX
  6592                                  
  6593 00000B12 BB[B603]                	MOV	BX,TIMEBUF
  6594                                  ; 07/02/2024
  6595                                  %if 0
  6596                                  	MOV	CX,6
  6597                                  	; 06/02/2024
  6598                                  	;;XOR	DX,DX
  6599                                  	;;MOV	AX,DX
  6600                                  	;; 06/01/2024
  6601                                  	;xor	ax,ax
  6602                                  	;cwd
  6603                                  	;CALL	SETREAD
  6604                                  	; 06/02/2024
  6605                                  	call	SETREAD_X
  6606                                  %else
  6607 00000B15 E89E3A                  	call	SETREAD_XTC
  6608                                  %endif
  6609 00000B18 1E                      	PUSH	DS
  6610 00000B19 C536[2E00]              	LDS	SI,[BCLOCK]
  6611 00000B1D E81B3A                  	CALL	DEVIOCALL2	;Get correct date and time
  6612 00000B20 1F                      	POP	DS
  6613 00000B21 5B                      	POP	BX
  6614 00000B22 5E                      	POP	SI
  6615 00000B23 A1[B603]                	MOV	AX,[TIMEBUF]
  6616 00000B26 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6617 00000B2A 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6618 00000B2E 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6619                                  	;JZ	SHORT RET22
  6620 00000B32 74D5                    	JZ	SHORT RET21 ; 18/07/2018
  6621                                  	;cmp	ax,43830
  6622 00000B34 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6623 00000B37 733D                    	JAE	SHORT RET22	;Ignore if too large
  6624 00000B39 A3[5403]                	MOV	[DAYCNT],AX
  6625 00000B3C 56                      	PUSH	SI
  6626 00000B3D 51                      	PUSH	CX
  6627 00000B3E 52                      	PUSH	DX		;Save time
  6628 00000B3F 31D2                    	XOR	DX,DX
  6629                                  	;mov	cx,1461
  6630 00000B41 B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6631 00000B44 F7F1                    	DIV	CX		;Compute number of 4-year units
  6632 00000B46 D1E0                    	SHL	AX,1
  6633 00000B48 D1E0                    	SHL	AX,1
  6634 00000B4A D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6635 00000B4C 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6636                                  
  6637 00000B4E BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6638                                  
  6639 00000B51 E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6640 00000B54 D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6641 00000B56 7304                    	JNC	SHORT SK	;Extra half-year?
  6642 00000B58 81C2C800                	ADD	DX,200
  6643                                  SK:
  6644 00000B5C E82200                  	CALL	SETYEAR
  6645 00000B5F B101                    	MOV	CL,1		;At least at first month in year
  6646                                  
  6647 00000B61 BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6648                                  	
  6649 00000B64 E81000                  	CALL	DSLIDE		;Find out which month we're in
  6650 00000B67 880E[5103]              	MOV	[MONTH],CL
  6651 00000B6B 42                      	INC	DX		;Remainder is day of month (start with one)
  6652 00000B6C 8816[5003]              	MOV	[DAY],DL
  6653 00000B70 E88A00                  	CALL	WKDAY		;Set day of week
  6654 00000B73 5A                      	POP	DX
  6655 00000B74 59                      	POP	CX
  6656 00000B75 5E                      	POP	SI
  6657                                  RET22:  
  6658 00000B76 C3                      	RETN
  6659                                  
  6660                                  ;----------------------------------------------------------
  6661                                  
  6662                                  DSLIDE:
  6663                                  	;MOV	AH,0
  6664                                  	; 06/01/2024
  6665                                  	; (AH=0)
  6666                                  DSLIDE1:
  6667 00000B77 AC                      	LODSB			;Get count of days
  6668 00000B78 39C2                    	CMP	DX,AX		;See if it will fit
  6669                                  	;JB	SHORT RET23	;If not, done
  6670 00000B7A 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6671 00000B7C 29C2                    	SUB	DX,AX
  6672 00000B7E 41                      	INC	CX		;Count one more month/year
  6673 00000B7F EBF6                    	JMP	SHORT DSLIDE1
  6674                                  
  6675                                  ;----------------------------------------------------------
  6676                                  
  6677                                  SETYEAR:
  6678                                  
  6679                                  ;Set year with value in CX. Adjust length of February for this year.
  6680                                  
  6681                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6682                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6683                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6684                                  ;	preserve DS as CHKYR is also called as a routine.
  6685                                  
  6686                                  	; MSDOS 6.0 (18/07/2018) ; *
  6687                                  
  6688                                  	;GETDSEG DS
  6689                                  
  6690                                  	;PUSH	CS  ; *
  6691                                  	;POP	DS  ; *
  6692                                  
  6693                                  	; 13/05/2019 - Retro DOS v4.0
  6694 00000B81 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6695                                  
  6696                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6697                                  	; 05/11/2022 
  6698                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6699                                  
  6700 00000B86 880E[5203]              	MOV	[YEAR],CL
  6701                                  CHKYR:
  6702 00000B8A F6C103                  	TEST	CL,3		;Check for leap year
  6703 00000B8D B01C                    	MOV	AL,28
  6704 00000B8F 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6705 00000B91 FEC0                    	INC	AL		;Add leap day
  6706                                  SAVFEB:
  6707 00000B93 A2[1D0D]                	mov	[february],al
  6708                                  	;MOV	[MONTAB+1],AL	;Store for February
  6709                                  RET23:  
  6710 00000B96 C3                      	RETN
  6711                                  
  6712                                  ;----------------------------------------------------------
  6713                                  
  6714                                  DODATE:
  6715 00000B97 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6716 00000B9A 88F0                    	MOV	AL,DH
  6717                                  
  6718 00000B9C BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6719                                  
  6720 00000B9F D7                      	XLAT			;Look up days in month
  6721 00000BA0 38D0                    	CMP	AL,DL
  6722 00000BA2 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6723                                  	;JB	SHORT RET25	;Error if too many days
  6724 00000BA4 72F0                    	jb	short RET23 ; 18/07/2018
  6725 00000BA6 E8D8FF                  	CALL	SETYEAR
  6726                                  ;
  6727                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6728                                  ;
  6729 00000BA9 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6730 00000BAD D1E9                    	SHR	CX,1
  6731 00000BAF D1E9                    	SHR	CX,1
  6732                                  	;mov	ax,1461
  6733 00000BB1 B8B505                  	MOV	AX,FOURYEARS
  6734 00000BB4 89D3                    	MOV	BX,DX
  6735 00000BB6 F7E1                    	MUL	CX
  6736 00000BB8 8A0E[5203]              	MOV	CL,[YEAR]
  6737 00000BBC 80E103                  	AND	CL,3
  6738                                  
  6739 00000BBF BE[140D]                	MOV	SI,YRTAB
  6740                                  
  6741 00000BC2 89C2                    	MOV	DX,AX
  6742 00000BC4 D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6743 00000BC6 E84700                  	CALL	DSUM		;Add up the days in each year
  6744 00000BC9 88F9                    	MOV	CL,BH		;Month of year
  6745                                  
  6746 00000BCB BE[1C0D]                	MOV	SI,MONTAB
  6747                                  
  6748 00000BCE 49                      	DEC	CX		;Account for months starting with one
  6749 00000BCF E83E00                  	CALL	DSUM		;Add up days in each month
  6750 00000BD2 88D9                    	MOV	CL,BL		;Day of month
  6751 00000BD4 49                      	DEC	CX		;Account for days starting with one
  6752 00000BD5 01CA                    	ADD	DX,CX		;Add in to day total
  6753 00000BD7 92                      	XCHG	AX,DX		;Get day count in AX
  6754 00000BD8 A3[5403]                	MOV	[DAYCNT],AX
  6755 00000BDB 56                      	PUSH	SI
  6756 00000BDC 53                      	PUSH	BX
  6757 00000BDD 50                      	PUSH	AX
  6758                                  
  6759                                  ; 07/02/2024
  6760                                  %if 0
  6761                                  	MOV	BX,TIMEBUF
  6762                                  	MOV	CX,6
  6763                                  	; 06/02/2024 ; *
  6764                                  	;;XOR	DX,DX
  6765                                  	;;MOV	AX,DX
  6766                                  	;; 06/01/2024
  6767                                  	;xor	ax,ax
  6768                                  	;cwd
  6769                                  	PUSH	BX
  6770                                  	;CALL	SETREAD
  6771                                  	; 06/02/2024 ; *
  6772                                  	call	SETREAD_X
  6773                                  %else
  6774 00000BDE E8D139                  	call	SETREAD_XT
  6775                                  %endif
  6776                                  
  6777 00000BE1 1E                      	PUSH	DS
  6778 00000BE2 C536[2E00]              	LDS	SI,[BCLOCK]
  6779 00000BE6 E85239                  	CALL	DEVIOCALL2	;Get correct date and time
  6780 00000BE9 1F                      	POP	DS
  6781 00000BEA 5B                      	POP	BX
  6782 00000BEB E8013A                  	CALL	SETWRITE
  6783 00000BEE 8F06[B603]              	POP	WORD [TIMEBUF]
  6784 00000BF2 1E                      	PUSH	DS
  6785 00000BF3 C536[2E00]              	LDS	SI,[BCLOCK]
  6786 00000BF7 E84139                  	CALL	DEVIOCALL2	;Set the date
  6787 00000BFA 1F                      	POP	DS
  6788 00000BFB 5B                      	POP	BX
  6789 00000BFC 5E                      	POP	SI
  6790                                  WKDAY:
  6791 00000BFD A1[5403]                	MOV	AX,[DAYCNT]
  6792 00000C00 31D2                    	XOR	DX,DX
  6793 00000C02 B90700                  	MOV	CX,7
  6794 00000C05 40                      	INC	AX
  6795 00000C06 40                      	INC	AX		;First day was Tuesday
  6796 00000C07 F7F1                    	DIV	CX		;Compute day of week
  6797 00000C09 8816[5603]              	MOV	[WEEKDAY],DL
  6798 00000C0D 30C0                    	XOR	AL,AL		;Flag OK
  6799                                  RET25:
  6800 00000C0F C3                      	RETN
  6801                                  
  6802                                  ;----------------------------------------------------------
  6803                                  
  6804                                  ;**	DSUM - Compute the sum of a string of bytes
  6805                                  ;
  6806                                  ;	ENTRY	(cx) = byte count
  6807                                  ;		(ds:si) = byte address
  6808                                  ;		(dx) = sum register, initialized by caller
  6809                                  ;	EXIT	(dx) updated
  6810                                  ;	USES	ax, cx, dx, si, flags
  6811                                  
  6812                                  DSUM:
  6813 00000C10 B400                    	MOV	AH,0
  6814 00000C12 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6815                                  	;JCXZ	RET25 ; 18/07/2018
  6816                                  DSUM1:
  6817 00000C14 AC                      	LODSB
  6818 00000C15 01C2                    	ADD	DX,AX
  6819 00000C17 E2FB                    	LOOP	DSUM1
  6820                                  DSUM9:
  6821 00000C19 C3                      	RETN
  6822                                  
  6823                                  ;============================================================================
  6824                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6825                                  ;============================================================================
  6826                                  ; 29/04/2019 - Retro DOS v4.0
  6827                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6828                                  
  6829                                  ; 12/03/2018 - Retro DOS v2.0 
  6830                                  
  6831                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6832                                  ;NAME	GETSET
  6833                                  
  6834                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6835                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6836                                  
  6837                                  ;USERNUM:
  6838                                  ;	DW	0			; 24 bit user number
  6839                                  ;       DB      0
  6840                                  ;;	IF      IBM
  6841                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6842                                  ;;	ELSE
  6843                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6844                                  ;;	ENDIF
  6845                                  
  6846                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6847                                  ;; 08/07/2018 - Retro DOS v3.0
  6848                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6849                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6850                                  
  6851                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6852                                  ;----------------------------------------------------------------------------
  6853                                  
  6854                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6855                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6856                                  
  6857                                  _$GET_VERSION:
  6858                                  
  6859                                  ; Inputs:
  6860                                  ;       None
  6861                                  ; Function:
  6862                                  ;       Return MS-DOS version number
  6863                                  ; Outputs:
  6864                                  ;       OEM number in BH
  6865                                  ;       User number in BL:CX (24 bits)
  6866                                  ;       Version number as AL.AH in binary
  6867                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6868                                  
  6869                                  ; MSDOS 6.0
  6870                                  ;
  6871                                  ;	Fake_Count is used to lie about the version numbers to support
  6872                                  ;	old binarys. See ms_table.asm for more info.
  6873                                  ;
  6874                                  ;		if input al = 00
  6875                                  ;		  (bh) = OEM number			
  6876                                  ;		else if input al = 01
  6877                                  ;		  (bh) = version flags
  6878                                  ;		 
  6879                                  ;		       	 bits 0-2 = DOS internal revision
  6880                                  ;		       	 bits 3-7 = DOS type flags
  6881                                  ;		              bit 3    = DOS is in ROM
  6882                                  ;		              bit 4    = DOS in in HMA
  6883                                  ;		              bits 5-7 = reserved
  6884                                  ;               M007 change - only bit 3 is now valid. Other bits
  6885                                  ;               are 0 when AL = 1
  6886                                  
  6887                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6888 00000C1A 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6889 00000C1F 8CDB                    	mov	bx, ds
  6890                                  
  6891                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6892                                  	;--------------------------------------
  6893                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6894                                  
  6895 00000C21 16                              PUSH    SS
  6896 00000C22 1F                              POP     DS
  6897                                          
  6898                                  	; 06/01/2024
  6899                                  	;MOV	BX,[USERNUM+2]
  6900                                          ;MOV	CX,[USERNUM]
  6901                                  
  6902                                  	; 13/05/2019 - Retro DOS v4.0
  6903                                  
  6904                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6905                                  	;DOS flags
  6906                                  
  6907 00000C23 3C01                    	cmp	AL,1
  6908 00000C25 7502                    	jne	short Norm_Vers
  6909                                  
  6910                                  ;ifdef ROMDOS
  6911                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6912                                  ;				(DOSINROM = 8)
  6913                                  ;else
  6914 00000C27 30FF                            xor     bh,bh		; Otherwise return 0
  6915                                  ;endif				;M007 end
  6916                                  
  6917                                  Norm_Vers:
  6918                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6919                                  
  6920                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6921                                  	; 26/06/2024
  6922                                  	; 13/05/2019 - Retro DOS v4.0
  6923                                  	;push	ds		; Get the version number from the
  6924 00000C29 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6925                                  	;mov	ax,[40h]
  6926 00000C2D A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6927                                  	; 07/12/2022
  6928                                  	;pop	ds
  6929 00000C30 E84EF8                  	call	Get_User_Stack
  6930                                  				; Put values for return registers
  6931                                  				; in the proper place on the user's	 
  6932                                  				; stack addressed by DS:SI
  6933                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6934                                  gdrvfspc_ret:
  6935                                          ;MOV	[SI+user_env.user_AX],AX
  6936 00000C33 8904                            MOV	[SI],AX
  6937                                          ;MOV	[SI+4],CX
  6938 00000C35 894C04                  	mov	[SI+user_env.user_CX],CX
  6939                                  set_user_bx:
  6940                                  	;MOV	[SI+2],BX
  6941 00000C38 895C02                  	mov	[SI+user_env.user_BX],BX
  6942                                  
  6943 00000C3B C3                      	RETN
  6944                                  
  6945                                  ; 18/07/2018 - Retro DOS v3.0
  6946                                  
  6947                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6948                                  ;----------------------------------------------------------------------------
  6949                                  
  6950                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6951                                  ;
  6952                                  ;	ENTRY	none
  6953                                  ;	EXIT	(al) = value of VERIFY flag
  6954                                  ;	USES	all
  6955                                  
  6956                                  
  6957                                  _$GET_VERIFY_ON_WRITE:
  6958                                  
  6959                                  ;hkn; SS override
  6960 00000C3C 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6961 00000C40 C3                      	retn
  6962                                  
  6963                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6964                                  ;
  6965                                  ;	ENTRY	(al) = value of VERIFY flag
  6966                                  ;	EXIT	none
  6967                                  ;	USES	all
  6968                                  
  6969                                  _$SET_VERIFY_ON_WRITE:
  6970                                  
  6971 00000C41 2401                    	AND	AL,1
  6972                                  ;hkn; SS override
  6973 00000C43 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6974                                  RET27:	; 18/07/2018
  6975 00000C47 C3                      	retn
  6976                                  
  6977                                  ; 19/07/2018 - Retro DOS v3.0
  6978                                  
  6979                                  ;BREAK <$International - return country-dependent information>
  6980                                  ;----------------------------------------------------------------------------
  6981                                  ;
  6982                                  ; Procedure Name : $INTERNATIONAL
  6983                                  ;
  6984                                  ; Inputs:
  6985                                  ;	MOV	AH,International
  6986                                  ;	MOV	AL,country	(al = 0 => current country)
  6987                                  ;      [MOV	BX,country]
  6988                                  ;	LDS	DX,block
  6989                                  ;	INT	21
  6990                                  ; Function:
  6991                                  ;	give users an idea of what country the application is running
  6992                                  ; Outputs:
  6993                                  ;	IF DX != -1 on input (get country)
  6994                                  ;	  AL = 0 means return current country table.
  6995                                  ;	  0<AL<0FFH means return country table for country AL
  6996                                  ;	  AL = 0FF means return country table for country BX
  6997                                  ;	  No Carry:
  6998                                  ;	     Register BX will contain the 16-bit country code.
  6999                                  ;	     Register AL will contain the low 8 bits of the country code.
  7000                                  ;	     The block pointed to by DS:DX is filled in with the information
  7001                                  ;	     for the particular country.
  7002                                  ;		BYTE  Size of this table excluding this byte and the next
  7003                                  ;		BYTE  Country code represented by this table
  7004                                  ;			A sequence of n bytes, where n is the number specified
  7005                                  ;			by the first byte above and is not > internat_block_max,
  7006                                  ;			in the correct order for being returned by the
  7007                                  ;			INTERNATIONAL call as follows:
  7008                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  7009                                  ;		5 BYTE	Currency symbol null terminated
  7010                                  ;		2 BYTE	thousands separator null terminated
  7011                                  ;		2 BYTE	Decimal point null terminated
  7012                                  ;		2 BYTE	Date separator null terminated
  7013                                  ;		2 BYTE	Time separator null terminated
  7014                                  ;		1 BYTE	Bit field.  Currency format.
  7015                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  7016                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  7017                                  ;		1 BYTE	No. of significant decimal digits in currency
  7018                                  ;		1 BYTE	Bit field.  Time format.
  7019                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  7020                                  ;		DWORD	Call address of case conversion routine
  7021                                  ;		2 BYTE	Data list separator null terminated.
  7022                                  ;	  Carry:
  7023                                  ;	     Register AX has the error code.
  7024                                  ;	IF DX = -1 on input (set current country)
  7025                                  ;	  AL = 0 is an error
  7026                                  ;	  0<AL<0FFH means set current country to country AL
  7027                                  ;	  AL = 0FF means set current country to country BX
  7028                                  ;	  No Carry:
  7029                                  ;	    Current country SET
  7030                                  ;	    Register AL will contain the low 8 bits of the country code.
  7031                                  ;	  Carry:
  7032                                  ;	     Register AX has the error code.
  7033                                  ;-----------------------------------------------------------------------------
  7034                                  
  7035                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  7036                                  
  7037                                  ; 13/05/2019 - Retro DOS v4.0
  7038                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  7039                                  
  7040                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7041                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  7042                                  
  7043                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7044                                  	 
  7045 00000C48 3CFF                    	CMP	AL,0FFH
  7046 00000C4A 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7047 00000C4C 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7048 00000C4E 30FF                    	XOR	BH,BH
  7049                                  BX_HAS_CODE:
  7050 00000C50 1E                      	PUSH	DS
  7051 00000C51 07                      	POP	ES
  7052 00000C52 52                      	PUSH	DX
  7053 00000C53 5F                      	POP	DI			; User buffer to ES:DI
  7054                                  
  7055                                  ;hkn; SS is DOSDATA
  7056                                  ;	context DS
  7057                                  
  7058 00000C54 16                      	push	ss
  7059 00000C55 1F                      	pop	ds
  7060                                  
  7061 00000C56 83FFFF                  	CMP	DI,-1
  7062 00000C59 745D                    	JZ	short international_set
  7063 00000C5B 09DB                    	OR	BX,BX
  7064 00000C5D 7505                    	JNZ	short international_find
  7065                                  
  7066                                  ;hkn; country_cdpg is in DOSDATA segment.
  7067 00000C5F BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7068                                  
  7069 00000C62 EB39                    	JMP	SHORT international_copy
  7070                                  
  7071                                  international_find:
  7072                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7073                                  	; 06/01/2024
  7074 00000C64 31ED                    	xor	bp,bp ; 0
  7075 00000C66 E80A00                  	CALL	international_get
  7076 00000C69 7255                    	JC	short errtn
  7077                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7078                                  	; 06/01/2024
  7079 00000C6B 09DB                    	or	bx,bx
  7080 00000C6D 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7081 00000C6F 89D3                    	MOV	BX,DX			 ; put country back
  7082 00000C71 EB3A                    	JMP	SHORT international_ok3
  7083                                  
  7084                                  international_get:
  7085 00000C73 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7086                                  
  7087                                  ;hkn; country_cdpg is in DOSDATA segment.
  7088                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7089                                  
  7090                                  	; MSDOS 3.3
  7091                                  	;;cmp	bx,[SI+63h]
  7092                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7093                                  	;jz	short RET27
  7094                                  
  7095                                  	; 13/05/2019 - Retro DOS v4.0
  7096                                  
  7097                                  	; MSDOS 6.0
  7098                                  	;cmp	bx,[ss:si+68h]
  7099 00000C76 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7100 00000C7A 74CB                    	jz	short RET27			; return if equal
  7101                                  
  7102 00000C7C 89DA                    	MOV	DX,BX
  7103 00000C7E 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7104                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7105 00000C80 B80014                  	mov	ax,1400h
  7106 00000C83 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7107                                  			; Return: AL = 00h not installed, OK to install
  7108                                  			; 01h not installed, not OK
  7109                                  			; FFh installed
  7110 00000C85 3CFF                    	CMP	AL,0FFH
  7111 00000C87 7510                    	JNZ	short interr		; not in memory
  7112                                  	
  7113                                  	; 06/01/2024
  7114 00000C89 B80314                  	mov	ax,1403h		; set country info
  7115                                  
  7116                                  	;cmp	bp,0
  7117 00000C8C 09ED                    	or	bp,bp			; GetCntry ?
  7118 00000C8E 7501                    	JNZ	short stcdpg
  7119                                  	
  7120                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7121                                  	;mov	ax,1404h
  7122 00000C90 40                      	inc	ax	; AX = 1404h ; get country info
  7123                                  
  7124                                  	; 06/01/2024
  7125                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7126                                  	;		; BX = code page, DX = country code,
  7127                                  	;		; DS:SI -> internal code page structure
  7128                                  	;		; ES:DI -> user buffer
  7129                                  	;		; Return: AL = status
  7130                                  	;
  7131                                  	;JMP	short chkok
  7132                                  	
  7133                                  	;nop
  7134                                  
  7135                                  stcdpg:
  7136                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7137                                  	; 06/01/2024
  7138                                  	;mov     ax,1403h
  7139                                  gscdpg:
  7140 00000C91 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7141                                  			; DS:SI -> internal code page structure
  7142                                  			; BX = code page, DX = country code
  7143                                  			; Return: AL = status
  7144                                  chkok:
  7145 00000C93 08C0                    	or	al,al			; success ?
  7146                                  	;retz				; yes
  7147 00000C95 74B0                    	jz	short RET27
  7148                                  
  7149                                  setcarry:
  7150 00000C97 F9                      	STC				; set carry
  7151 00000C98 C3                      	retn
  7152                                  interr:
  7153 00000C99 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7154 00000C9B EBFA                    	JMP	short setcarry
  7155                                  
  7156                                  international_copy:
  7157                                  
  7158                                  ;hkn; country_cdpg is in DOSDATA segment.
  7159                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7160                                  
  7161                                  	; MSDOS 3.3
  7162                                  	;;mov	bx,[SI+63h]
  7163                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7164                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7165                                  
  7166                                  	; 13/05/2019 - Retro DOS v4.0
  7167                                  
  7168                                  	; MSDOS 6.0
  7169                                  	;mov	bx,[ss:si+68h]
  7170 00000C9D 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7171 00000CA1 BE[9612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7172                                  
  7173                                  	;mov	cx,24
  7174 00000CA4 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7175                                  
  7176                                  	; MSDOS 6.0
  7177                                  
  7178                                  ;hkn;	must set up DS to SS so that international info can be copied
  7179                                  	
  7180 00000CA7 1E                      	push	ds
  7181                                  
  7182 00000CA8 16                      	push	ss			; cs -> ss
  7183 00000CA9 1F                      	pop	ds
  7184                                  
  7185 00000CAA F3A4                    	REP	MOVSB			; copy country info
  7186                                  
  7187                                  	; MSDOS 6.0
  7188                                  
  7189 00000CAC 1F                      	pop	ds	;hkn;	restore ds
  7190                                  
  7191                                  international_ok3:
  7192 00000CAD E8D1F7                  	call	Get_User_Stack
  7193                                  ;ASSUME	DS:NOTHING
  7194                                  	;MOV	[SI+2],BX
  7195 00000CB0 895C02                  	MOV	[SI+user_env.user_BX],BX
  7196                                  international_ok:
  7197 00000CB3 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7198                                  ;SYS_RET_OK_jmp:
  7199                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7200                                  nono:	; 15/12/2022
  7201                                  SYS_RET_OK_jmp:
  7202 00000CB5 E979F9                  	jmp	SYS_RET_OK
  7203                                  
  7204                                  international_set:
  7205                                  
  7206                                  ;hkn; ASSUME	DS:DOSGROUP
  7207                                  ;ASSUME	DS:DOSDATA
  7208                                  
  7209 00000CB8 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7210 00000CBB E8B5FF                  	CALL	international_get
  7211 00000CBE 73F3                    	JNC	short international_ok
  7212                                  errtn:
  7213 00000CC0 3CFF                    	CMP	AL,0FFH
  7214 00000CC2 7403                    	JZ	short errtn2
  7215                                  errtn1:
  7216 00000CC4 E973F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7217                                  errtn2:
  7218                                  	;error	error_invalid_function	; NLSFUNC not existent
  7219                                  
  7220                                  	;mov	al,1
  7221 00000CC7 B001                    	mov	al,error_invalid_function 
  7222 00000CC9 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7223                                  ;errtn3:
  7224                                  ;	jmp	SYS_RET_ERR
  7225                                  
  7226                                  ;EndProc $INTERNATIONAL
  7227                                  
  7228                                  ; 19/07/2018
  7229                                  
  7230                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7231                                  
  7232                                  ;----------------------------------------------------------------------------
  7233                                  ;
  7234                                  ; Procedure Name : $GetExtCntry
  7235                                  ;
  7236                                  ; Inputs:
  7237                                  ;	if AL >= 20H
  7238                                  ;	  AL= 20H    capitalize single char, DL= char
  7239                                  ;	      21H    capitalize string, CX= string length
  7240                                  ;	      22H    capitalize ASCIIZ string
  7241                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7242                                  ;	      80H bit 0 = use normal upper case table
  7243                                  ;		      1 = use file upper case table
  7244                                  ;	   DS:DX points to string
  7245                                  ;
  7246                                  ;	else
  7247                                  ;
  7248                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7249                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7250                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7251                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7252                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7253                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7254                                  ;	INT	21
  7255                                  ; Function:
  7256                                  ;	give users extended country dependent information
  7257                                  ;	or capitalize chars
  7258                                  ; Outputs:
  7259                                  ;	  No Carry:
  7260                                  ;	     extended country info is succesfully returned
  7261                                  ;	  Carry:
  7262                                  ;	     Register AX has the error code.
  7263                                  ;	     AX=0, NO	 for YES/NO CHECK
  7264                                  ;		1, YES
  7265                                  ;----------------------------------------------------------------------------
  7266                                  
  7267                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7268                                  
  7269                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7270                                  
  7271                                  	; MSDOS 6.0
  7272                                  _$GetExtCntry:
  7273 00000CCB 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7274 00000CCD 7269                    	JB	short notcap
  7275                                  capcap: 				;
  7276 00000CCF A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7277 00000CD1 7505                    	JNZ	short fileupper		; file upper case
  7278                                  
  7279                                  ;hkn; UCASE_TAB in DOSDATA
  7280 00000CD3 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7281 00000CD6 EB05                    	JMP	SHORT capit
  7282                                  
  7283                                  fileupper:
  7284                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7285                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7286                                  	; AL >= 80h
  7287 00000CD8 247F                    	and	al,7Fh 
  7288                                  
  7289                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7290 00000CDA BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7291                                  capit:					;
  7292 00000CDD 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7293 00000CDF 750D                    	JNZ	short chkyes		; no
  7294 00000CE1 88D0                    	MOV	AL,DL			; set up AL
  7295 00000CE3 E84642                  	call	GETLET3 		; upper case it
  7296 00000CE6 E898F7                  	call	Get_User_Stack		; get user stack
  7297                                  	;mov	[si+6],al
  7298 00000CE9 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7299 00000CEC EBC7                    	JMP	SHORT nono		; done
  7300                                  chkyes: 				;
  7301 00000CEE 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7302 00000CF0 7522                    	JNZ	short capstring		; no
  7303                                  
  7304 00000CF2 31C0                    	XOR	AX,AX			; presume NO
  7305                                  		      
  7306                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7307                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7308                                  
  7309                                  	; 06/08/2018 - Retro DOS v3.0
  7310                                  	; 13/05/2019 - Retro DOS v4.0
  7311                                  	;cmp	dl,'Y'
  7312 00000CF4 2E3A16[0F0A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7313 00000CF9 7416                    	JZ	short yesyes		; yes
  7314                                  	;cmp	dl,'y'
  7315 00000CFB 2E3A16[110A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7316 00000D00 740F                    	JZ	short yesyes		; yes
  7317                                  	;cmp	dl,'N'
  7318 00000D02 2E3A16[100A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7319 00000D07 74AC                    	JZ	short nono		; no
  7320                                  	;cmp	dl,'n'
  7321 00000D09 2E3A16[120A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7322 00000D0E 74A5                    	JZ	short nono		; no
  7323                                  ;dbcs_char:				;
  7324 00000D10 40                      	INC	AX			; not YES or NO
  7325                                  yesyes: 				;
  7326 00000D11 40                      	INC	AX			; return 1
  7327                                  	; 15/12/2022
  7328                                  ;nono:	
  7329 00000D12 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7330                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7331                                  	;jmp	SYS_RET_OK		; done
  7332                                  
  7333                                  capstring:				;
  7334 00000D14 89D6                    	MOV	SI,DX			; si=dx
  7335 00000D16 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7336 00000D18 750D                    	JNZ	short capascii		; no
  7337                                  	;OR	CX,CX			; check count 0
  7338                                  	;JZ	short nono		; yes finished
  7339                                  	; 06/01/2024
  7340 00000D1A E399                    	jcxz	nono
  7341                                  concap: 				;
  7342 00000D1C AC                      	LODSB				; get char
  7343 00000D1D E80C42                  	call	GETLET3 		; upper case it
  7344 00000D20 8844FF                  	MOV	byte [SI-1],AL		; store back
  7345                                  ;next99: 				;
  7346 00000D23 E2F7                    	LOOP	concap			; continue
  7347 00000D25 EB8E                    	JMP	short nono		; done
  7348                                  capascii:				;
  7349 00000D27 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7350 00000D29 7545                    	JNZ	short capinval		; no
  7351                                  concap2:				;
  7352 00000D2B AC                      	LODSB				; get char
  7353 00000D2C 08C0                    	or	al,al			; end of string ?
  7354 00000D2E 7485                    	JZ	short nono		; yes
  7355 00000D30 E8F941                  	call	GETLET3 		; upper case it
  7356 00000D33 8844FF                  	MOV	[SI-1],AL		; store back
  7357 00000D36 EBF3                    	JMP	short concap2 		; continue
  7358                                  
  7359                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7360                                  
  7361                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7362                                  ; _$GetExtCntry:
  7363                                  
  7364                                  notcap:
  7365 00000D38 83F905                  	CMP	CX,5			; minimum size is 5
  7366 00000D3B 7277                    	jb	short sizeerror
  7367                                  
  7368                                  GEC_CONT:
  7369                                  ;hkn; SS is DOSDATA
  7370                                  	;context DS
  7371                                  
  7372 00000D3D 16                      	push	ss
  7373                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7374 00000D3E 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7375                                  	
  7376                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7377 00000D3F BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7378                                  
  7379 00000D42 83FAFF                  	CMP	DX,-1			; active country ?
  7380 00000D45 7503                    	JNZ	short GETCDPG 		; no
  7381                                  
  7382                                  ;hkn; use DS override to accesss country_cdpg fields
  7383                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7384                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7385 00000D47 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7386                                  					; get active country id;smr;use DS
  7387                                  GETCDPG:
  7388 00000D4A 83FBFF                  	CMP	BX,-1			; active code page?
  7389 00000D4D 7503                    	JNZ	short CHKAGAIN		; no, check again
  7390                                  
  7391                                  ;hkn; use DS override to accesss country_cdpg fields
  7392                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7393                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7394 00000D4F 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7395                                  					; get active code page id;smr;Use DS
  7396                                  CHKAGAIN:
  7397                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7398 00000D52 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7399                                  					; same as active country id?;smr;use DS
  7400 00000D55 7550                    	JNZ	short CHKNLS		; no
  7401                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7402 00000D57 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7403                                  					; same as active code pg id?;smr;use DS
  7404 00000D5A 754B                    	JNZ	short CHKNLS		; no
  7405                                  CHKTYPE:
  7406                                  	;mov	bx,[si+48h]
  7407 00000D5C 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7408                                  					; bx = sys code page id;smr;use DS
  7409 00000D5F 51                      	PUSH	CX			; save cx
  7410                                  	;mov	cx,[si+4Ah]
  7411 00000D60 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7412                                  	;mov	si,COUNTRY_CDPG+76
  7413 00000D63 BE[7612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7414                                  NXTENTRY:
  7415 00000D66 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7416 00000D68 740B                    	JZ	short FOUNDIT
  7417 00000D6A 83C605                  	ADD	SI,5			; next entry
  7418 00000D6D E2F7                    	LOOP	NXTENTRY
  7419 00000D6F 59                      	POP	CX
  7420                                  capinval:
  7421                                  	;error	error_invalid_function	; info type not found
  7422                                  	;mov	al,1
  7423 00000D70 B001                    	mov	al,error_invalid_function
  7424                                  ;SYS_RET_ERR_jmp:
  7425                                  	;jmp	SYS_RET_ERR
  7426                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7427                                  SYS_RET_ERR_jmp:
  7428 00000D72 E9C5F8                  	jmp	SYS_RET_ERR	
  7429                                  
  7430                                  FOUNDIT:
  7431 00000D75 A4                      	MOVSB				; move info id byte
  7432 00000D76 59                      	POP	CX			; restore char count
  7433                                  	;cmp	al,1
  7434 00000D77 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7435 00000D79 7415                    	JZ	short setsize
  7436 00000D7B B90400                  	MOV	CX,4			; 4 bytes will be moved
  7437 00000D7E B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7438                                  OK_RETN:
  7439 00000D81 F3A4                    	REP	MOVSB			; copy info
  7440 00000D83 89C1                    	MOV	CX,AX			; CX = actual length returned
  7441 00000D85 89D8                    	MOV	AX,BX			; return sys code page in ax
  7442                                  GETDONE:
  7443 00000D87 E8F7F6                  	call	Get_User_Stack		; return actual length to user's CX
  7444                                  	;mov	[si+4],cx 
  7445 00000D8A 894C04                  	MOV	[SI+user_env.user_CX],CX
  7446                                  	;jmp	SYS_RET_OK
  7447                                  	; 15/12/2022
  7448                                  	; 25/06/2019
  7449 00000D8D E9A4F8                  	jmp	SYS_RET_OK_clc
  7450                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7451                                  	; 15/12/2022
  7452                                  ;nono_jmp:
  7453                                  	;jmp	short nono
  7454                                  setsize:
  7455 00000D90 83E903                  	SUB	CX,3			; size after length field
  7456 00000D93 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7457 00000D95 7302                    	JAE	short setsize2		; no
  7458 00000D97 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7459                                  setsize2:
  7460 00000D99 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7461                                  	;ADD	DI,2			; update index
  7462                                  	;ADD	SI,2
  7463                                  	; 06/01/2024
  7464 00000D9C 47                      	inc	di
  7465 00000D9D 47                      	inc	di
  7466 00000D9E 46                      	inc	si
  7467 00000D9F 46                      	inc	si
  7468 00000DA0 89C8                    	MOV	AX,CX
  7469 00000DA2 83C003                  	ADD	AX,3			; AX has the actual length
  7470 00000DA5 EBDA                    	JMP	short OK_RETN 		; go move it
  7471                                  CHKNLS:
  7472 00000DA7 30E4                    	XOR	AH,AH
  7473                                  	;PUSH	AX			; save info type
  7474                                  	;POP	BP			; bp = info type
  7475                                  	; 06/01/2024
  7476 00000DA9 89C5                    	mov	bp,ax
  7477                                  	
  7478                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7479 00000DAB B80014                  	mov     ax,1400h
  7480 00000DAE CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7481                                  			; Return: AL = 00h not installed, OK to install
  7482                                  			; 01h not installed, not OK
  7483                                  			; FFh installed
  7484 00000DB0 3CFF                    	CMP	AL,0FFH
  7485 00000DB2 7404                    	JZ	short NLSNXT		; in memory
  7486                                  
  7487                                  sizeerror:
  7488                                  	;error	error_invalid_function
  7489                                  	;mov	al,1
  7490 00000DB4 B001                    	mov	al,error_invalid_function
  7491                                  	;jmp	SYS_RET_ERR
  7492                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7493                                  sys_ret_err_jmp2:
  7494 00000DB6 EBBA                    	jmp	short SYS_RET_ERR_jmp
  7495                                  
  7496                                  NLSNXT: 
  7497                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7498 00000DB8 B80214                  	mov     ax,1402h
  7499 00000DBB CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7500                                  			; BP = subfunction, BX = code page
  7501                                  			; DX = country code, DS:SI -> internal code page structure
  7502                                  			; ES:DI -> user buffer, CX = size of user buffer
  7503                                  			; Return: AL = status
  7504                                  			; 00h successful
  7505                                  			; else DOS error code
  7506                                  
  7507 00000DBD 3C00                    	CMP	AL,0			; success ?
  7508 00000DBF 7505                    	JNZ	short NLSERROR
  7509                                  	;mov	ax,[si+48h] ; 13/05/2019
  7510 00000DC1 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7511                                  			; ax = sys code page id;smr;use ds;
  7512                                  			;BUGBUG;check whether DS is OK after the above calls
  7513 00000DC4 EBC1                    	JMP	short GETDONE
  7514                                  seterr:
  7515                                  	; 15/12/2022
  7516                                  NLSERROR:
  7517                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7518                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7519                                  	;jmp	short sys_ret_err_jmp2
  7520                                  	; 15/12/2022
  7521 00000DC6 EBAA                    	jmp	short SYS_RET_ERR_jmp
  7522                                  
  7523                                  ;EndProc $GetExtCntry
  7524                                  
  7525                                  ; 13/05/2019 - Retro DOS v4.0
  7526                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7527                                  
  7528                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7529                                  ;----------------------------------------------------------------------------
  7530                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7531                                  ;
  7532                                  ;   System call format:
  7533                                  ;
  7534                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7535                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7536                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7537                                  ;	INT	21
  7538                                  ;
  7539                                  ;	ENTRY	(al) = n
  7540                                  ;		(bx) = code page
  7541                                  ;	EXIT	'C' clear
  7542                                  ;		  global code page is set	(set global code page)
  7543                                  ;		  (BX) = active code page id	(get global code page)
  7544                                  ;		  (DX) = system code page id	(get global code page)
  7545                                  ;		'C' set
  7546                                  ;		  (AX) = error code
  7547                                  
  7548                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7549                                  
  7550                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7551                                  	; DOSCODE:4BC9h
  7552                                  
  7553                                  _$GetSetCdPg:
  7554                                  
  7555                                  ;hkn; SS is DOSDATA
  7556                                  	;context DS
  7557                                  
  7558 00000DC8 16                      	push	ss
  7559 00000DC9 1F                      	pop	ds
  7560                                  
  7561                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7562 00000DCA BE[2A12]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7563                                  
  7564 00000DCD 3C01                    	CMP	AL,1		       ; get global code page
  7565 00000DCF 7512                    	JNZ	short setglpg 	       ; set global code page
  7566                                  	
  7567                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7568                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7569 00000DD1 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7570                                  					; get active code page id;smr;use ds
  7571                                  	;mov	dx,[si+48h]
  7572 00000DD4 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7573                                  				  	; get sys code page id;smr;use ds
  7574 00000DD7 E8A7F6                  	call	Get_User_Stack
  7575                                  ;ASSUME DS:NOTHING
  7576                                  	;;mov	[si+2],bx
  7577                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7578                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7579 00000DDA E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7580                                  	;mov	[si+6],dx
  7581 00000DDD 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7582                                  OK_RETURN:
  7583                                  	; 15/12/2022
  7584                                  	;transfer SYS_RET_OK
  7585 00000DE0 E94EF8                  	jmp	SYS_RET_OK
  7586                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7587                                  	;jmp	short nono_jmp
  7588                                  
  7589                                  ;hkn; ASSUME DS:DOSGROUP
  7590                                  ;ASSUME	DS:DOSDATA
  7591                                  
  7592                                  setglpg:
  7593 00000DE3 3C02                    	CMP	AL,2
  7594 00000DE5 752F                    	JNZ	short nomem
  7595                                  	
  7596                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7597                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7598 00000DE7 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7599                                  	
  7600                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7601 00000DEA B80014                  	mov     ax,1400h
  7602 00000DED CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7603                                  			; Return: AL = 00h not installed, OK to install
  7604                                  			; 01h not installed, not OK
  7605                                  			; FFh installed
  7606 00000DEF 3CFF                    	CMP	AL,0FFH
  7607 00000DF1 7523                    	JNZ	short nomem		; not in memory
  7608                                  
  7609                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7610 00000DF3 B80114                  	mov     ax,1401h
  7611 00000DF6 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7612                                  			; DS:SI -> internal code page structure
  7613                                  			; BX = new code page, DX = country code???
  7614                                  			; Return: AL = status
  7615                                  			; 00h successful
  7616                                  			; else DOS error code
  7617                                  	;cmp	al,0
  7618 00000DF8 08C0                    	or	al,al			; success ?
  7619 00000DFA 74E4                    	JZ	short OK_RETURN		; yes
  7620                                  
  7621 00000DFC 3C41                    	CMP	AL,65			; set device code page failed
  7622 00000DFE 75C6                    	JNZ	short seterr
  7623                                  	;MOV	AX,65
  7624                                  	; 06/01/2024
  7625 00000E00 98                      	cbw
  7626 00000E01 A3[2403]                	MOV	[EXTERR],AX
  7627                                  	;mov	byte [EXTERR_ACTION],6
  7628                                  	;mov	byte [EXTERR_CLASS],5
  7629                                  	;mov	byte [EXTERR_LOCUS],4
  7630 00000E04 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7631 00000E09 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7632 00000E0E C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7633                                  	;transfer From_GetSet
  7634 00000E13 E92CF8                  	jmp	From_GetSet
  7635                                  
  7636                                  	; 15/12/2022
  7637                                  ;seterr:
  7638                                  	;;;transfer SYS_RET_ERR
  7639                                  	;;jmp	SYS_RET_ERR
  7640                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7641                                  	;jmp	short NLSERROR
  7642                                  
  7643                                  nomem:
  7644                                  	;error	error_invalid_function	; function not defined
  7645                                  	;mov	al,1
  7646 00000E16 B001                    	mov	al,error_invalid_function
  7647 00000E18 EBAC                    	jmp	short seterr
  7648                                  
  7649                                  ;EndProc $GetSetCdPg
  7650                                  
  7651                                  ; 09/01/2024
  7652                                  ; 13/05/2019 - Retro DOS v4.0
  7653                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7654                                  
  7655                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7656                                  ;----------------------------------------------------------------------------
  7657                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7658                                  ;
  7659                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7660                                  ;		drive.
  7661                                  ;
  7662                                  ;	This call returns the same info in the same registers (except for the
  7663                                  ;	FAT pointer) as the old FAT pointer calls
  7664                                  ;
  7665                                  ;	ENTRY	DL = Drive number
  7666                                  ;	EXIT	AX = Sectors per allocation unit
  7667                                  ;		   = -1 if bad drive specified
  7668                                  ;		On User Stack
  7669                                  ;		    BX = Number of free allocation units
  7670                                  ;		    DX = Total Number of allocation units on disk
  7671                                  ;		    CX = Sector size
  7672                                  
  7673                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7674                                  
  7675                                  _$GET_DRIVE_FREESPACE:
  7676                                  
  7677                                  ;hkn; SS is DOSDATA
  7678                                  	;context DS
  7679 00000E1A 16                      	push	ss
  7680 00000E1B 1F                      	pop	ds
  7681                                  
  7682 00000E1C 88D0                    	MOV	AL,DL
  7683                                  	;invoke	GetThisDrv		; Get drive
  7684 00000E1E E8055B                  	call	GETTHISDRV
  7685                                  SET_AX_RET:
  7686 00000E21 7212                    	JC	short BADFDRV
  7687                                  	;invoke	DISK_INFO
  7688 00000E23 E81D1E                  	call	DISK_INFO
  7689 00000E26 87D3                    	XCHG	DX,BX
  7690                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7691                                  	; 06/01/2024
  7692 00000E28 720B                    	jc	short BADFDRV
  7693 00000E2A 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7694                                  DoSt:
  7695 00000E2C E852F6                  	call	Get_User_Stack
  7696                                  ;ASSUME	DS:NOTHING
  7697                                  	;mov	[si+6],dx
  7698                                  	;;mov	[si+4],cx
  7699                                  	;;mov	[si+2],bx
  7700                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7701 00000E2F 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7702                                  	;MOV	[SI+user_env.user_CX],CX
  7703                                  	;MOV	[SI+user_env.user_BX],BX
  7704                                  	;;MOV	[SI+user_env.user_AX],AX
  7705                                  	;mov	[si],ax
  7706                                  	;;return
  7707                                  	;retn
  7708                                  	; 09/01/2024
  7709 00000E32 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7710                                  
  7711                                  BADFDRV:
  7712                                  	; MSDOS 3.3
  7713                                  	;;mov	al,0Fh
  7714                                  	;mov	al,error_invalid_drive	; Assume error
  7715                                  
  7716                                  	; 13/05/2019 - Retro DOS v4.0
  7717                                  
  7718                                  	; MSDOS 6.0 & MSDOS 3.3
  7719                                  	;invoke	FCB_RET_ERR
  7720 00000E35 E818F8                  	call	FCB_RET_ERR
  7721                                  	
  7722 00000E38 B8FFFF                  	MOV	AX,-1
  7723 00000E3B EBEF                    	JMP	short DoSt
  7724                                  
  7725                                  ;EndProc $GET_DRIVE_FREESPACE
  7726                                  
  7727                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7728                                  ;----------------------------------------------------------------------------
  7729                                  ;**	$Get_DMA - Get Disk Transfer Address
  7730                                  ;
  7731                                  ;	ENTRY	none
  7732                                  ;	EXIT	ES:BX is current transfer address
  7733                                  ;	USES	all
  7734                                  
  7735                                  	; 09/01/2024
  7736                                  _$GET_DMA:
  7737 00000E3D 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7738 00000E42 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7739 00000E47 E837F6                  	call	Get_User_Stack
  7740                                  	;mov	[si+2],bx
  7741                                  	;mov	[si+10h],cx
  7742                                  	; 09/01/2024
  7743                                  	;MOV	[SI+user_env.user_BX],BX
  7744 00000E4A 894C10                  	MOV	[SI+user_env.user_ES],CX
  7745                                  	;retn
  7746                                  	; 09/01/2024
  7747 00000E4D E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7748                                  
  7749                                  ;**	$Set_DMA - Set Disk Transfer Address
  7750                                  ;----------------------------------------------------------------------------
  7751                                  ;	ENTRY	DS:DX is current transfer address
  7752                                  ;	EXIT	none
  7753                                  ;	USES	all
  7754                                  
  7755                                  _$SET_DMA:
  7756 00000E50 368916[2C03]            	MOV	[SS:DMAADD],DX
  7757 00000E55 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7758 00000E5A C3                      	retn
  7759                                  
  7760                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7761                                  ;------------------------------------------------------------------------------
  7762                                  
  7763                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7764                                  ;-----------------------------------------------------
  7765                                  ;	ENTRY	none
  7766                                  ;	EXIT	(AL) = drive number
  7767                                  ;	USES	all
  7768                                  
  7769                                  _$GET_DEFAULT_DRIVE:
  7770 00000E5B 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7771 00000E5F C3                      	retn
  7772                                  
  7773                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7774                                  ;-----------------------------------------------------
  7775                                  ;	ENTRY	(DL) = Drive number for new default drive
  7776                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7777                                  
  7778                                  _$SET_DEFAULT_DRIVE:
  7779 00000E60 88D0                    	MOV	AL,DL
  7780 00000E62 FEC0                    	INC	AL			; A=1, B=2...
  7781 00000E64 E8A35A                  	call	GetVisDrv		; see if visible drive
  7782 00000E67 7204                    	JC	short SETRET		; errors do not set
  7783 00000E69 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7784                                  
  7785                                  SETRET:
  7786 00000E6D 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7787 00000E71 C3                      	retn
  7788                                  
  7789                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7790                                  ;----------------------------------------------------------------------------
  7791                                  
  7792                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7793                                  ;---------------------------------------------------
  7794                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7795                                  ;	contents of an interrupt vector.
  7796                                  ;
  7797                                  ;	ENTRY	(AL) = interrupt number
  7798                                  ;	EXIT	(ES:BX) = current interrupt vector
  7799                                  
  7800                                  _$GET_INTERRUPT_VECTOR:
  7801 00000E72 E82E00                  	CALL	RECSET
  7802 00000E75 26C41F                  	LES	BX,[ES:BX]
  7803 00000E78 E806F6                  	call	Get_User_Stack
  7804                                  set_user_es_bx:
  7805                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7806                                  	;;mov	[si+2],bx
  7807                                  	;mov	[si+10h],es
  7808                                  	;MOV	[SI+user_env.user_BX],BX
  7809 00000E7B 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7810                                  	;retn
  7811 00000E7E E9B7FD                  	jmp	set_user_bx
  7812                                  
  7813                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7814                                  ;---------------------------------------------------
  7815                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7816                                  ;	contents of an interrupt vector.
  7817                                  ;
  7818                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7819                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7820                                  ;	for explanation.
  7821                                  ;
  7822                                  ;	ENTRY	(AL) = interrupt number
  7823                                  ;		(ds:dx) = desired new vector value
  7824                                  ;	EXIT	none
  7825                                  ;	USES	all
  7826                                  
  7827                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7828                                  ; 13/05/2019 - Retro DOS v4.0
  7829                                  
  7830                                  _$SET_INTERRUPT_VECTOR:
  7831 00000E81 E81F00                  	CALL	RECSET
  7832 00000E84 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7833 00000E85 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7834 00000E88 268C5F02                	MOV	[ES:BX+2],DS
  7835 00000E8C FB                      	STI
  7836                                  					; M004, M068 - Start
  7837                                  	; MSDOS 6.0
  7838 00000E8D 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7839                                  					; Q: was the previous call an int 21h
  7840                                  					;    exec call
  7841                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7842                                  	;jnz	short siv_1		; Y: go set count
  7843                                  	;retn				; N: return
  7844                                  	; 15/12/2022
  7845 00000E93 740D                    	jz	short siv_2
  7846                                  siv_1:	
  7847 00000E95 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7848 00000E9B 7505                    	jnz	short siv_2		 ; N: done
  7849                                  	; 20/09/2023
  7850 00000E9D 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7851                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7852                                  					 ; dispatcher to turn A20 Off before
  7853                                  					 ; returning to user.
  7854                                  siv_2:
  7855                                  	; 07/12/2022
  7856 00000EA2 C3                      	retn				; M004, M068 - End
  7857                                  	
  7858                                  RECSET:
  7859 00000EA3 31DB                    	XOR	BX,BX
  7860 00000EA5 8EC3                    	MOV	ES,BX
  7861 00000EA7 88C3                    	MOV	BL,AL
  7862 00000EA9 D1E3                    	SHL	BX,1
  7863 00000EAB D1E3                    	SHL	BX,1
  7864 00000EAD C3                      	retn
  7865                                  
  7866                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7867                                  ;-------------------------------------------------------------------------------------
  7868                                  
  7869                                  ;**	$Char_Oper - Manipulate Switch Character
  7870                                  ;
  7871                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7872                                  ;
  7873                                  ;	ENTRY	AL = function:
  7874                                  ;		    0 - read switch char
  7875                                  ;		    1 - set switch char (char in DL)
  7876                                  ;		    2 - read device availability
  7877                                  ;			Always returns available
  7878                                  ;		    3 - set device availability
  7879                                  ;			No longer supported (NOP)
  7880                                  ;	EXIT	(al) = 0xff iff error
  7881                                  ;		(al) != 0xff if ok
  7882                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7883                                  ;	USES	AL, DL
  7884                                  ;
  7885                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7886                                  ;		The character / is always returned for subfunction 0,
  7887                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7888                                  
  7889                                  ; 13/05/2019 - Retro DOS v4.0
  7890                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7891                                  
  7892                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7893                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7894                                  
  7895                                  _$CHAR_OPER:
  7896                                  	; MSDOS 6.0
  7897 00000EAE 08C0                    	or	al,al				; get switch?
  7898 00000EB0 B22F                    	mov	dl,'/'				; assume yes
  7899 00000EB2 7407                    	jz	short chop_1			; jump if yes
  7900 00000EB4 3C02                    	cmp	al,2				; check device availability?
  7901 00000EB6 B2FF                    	mov	dl,-1				; assume yes
  7902 00000EB8 7401                    	jz	short chop_1			; jump if yes
  7903 00000EBA C3                      	retn					; otherwise just quit
  7904                                  
  7905                                  ; subfunctions requiring return of value to user come here. DL holds
  7906                                  ; value to return
  7907                                  
  7908                                  chop_1:
  7909 00000EBB E8C3F5                  	call	Get_User_Stack
  7910 00000EBE 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7911 00000EC1 C3                      	retn
  7912                                  
  7913                                  	; MSDOS 3.3
  7914                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7915                                  	;push	ss
  7916                                  	;pop	ds
  7917                                  	;cmp	al,1
  7918                                  	;jb	short chop_1
  7919                                  	;jz	short chop_2
  7920                                  	;cmp	al,3
  7921                                  	;jb	short chop_3
  7922                                  	;jz	short chop_5
  7923                                  	;mov	al,0FFh
  7924                                  	;retn
  7925                                  ;chop_1:
  7926                                  	;mov	dl,[chSwitch]
  7927                                  	;jmp	short chop_4
  7928                                  ;chop_2:
  7929                                  	;mov	[chSwitch],dl
  7930                                  	;retn
  7931                                  ;chop_3:
  7932                                  	;mov	dl, FFh
  7933                                  ;chop_4:
  7934                                  	;call	Get_User_Stack
  7935                                  	;mov	[si+6],dx
  7936                                  ;chop_5:
  7937                                  	;retn
  7938                                  
  7939                                  ;**	$GetExtendedError - Return Extended error code
  7940                                  ;----------------------------------------------------------------------------
  7941                                  ;	This function reads up the extended error info from the static
  7942                                  ;	variables where it was stored.
  7943                                  ;
  7944                                  ;	ENTRY	none
  7945                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7946                                  ;		BL = recommended action
  7947                                  ;		BH = class of error
  7948                                  ;		CH = locus of error
  7949                                  ;		ES:DI = may be pointer
  7950                                  ;	USES	ALL
  7951                                  
  7952                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7953                                  
  7954                                  _$GetExtendedError:
  7955 00000EC2 16                      	push	ss
  7956 00000EC3 1F                      	pop	ds
  7957 00000EC4 A1[2403]                	MOV	AX,[EXTERR]
  7958 00000EC7 C43E[2803]              	LES	DI,[EXTERRPT]
  7959 00000ECB 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7960 00000ECF 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7961 00000ED3 E8ABF5                  	call	Get_User_Stack
  7962                                  	;mov	[si+0Ah],di
  7963 00000ED6 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7964                                  
  7965                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7966                                  	;;mov	[si+10h],es
  7967                                  	;MOV	[SI+user_env.user_ES],ES
  7968                                  	;;mov	[si+2],bx
  7969                                  	;MOV	[SI+user_env.user_BX],BX
  7970 00000ED9 E89FFF                  	call	set_user_es_bx
  7971                                  
  7972                                  	;mov	[si+4],cx
  7973 00000EDC 894C04                  	MOV	[SI+user_env.user_CX],CX
  7974                                  jmp_SYS_RET_OK:
  7975                                  	; 15/12/2022
  7976                                  	;jmp	SYS_RET_OK
  7977                                  	; 25/06/2019
  7978 00000EDF E952F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7979                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7980                                  ;jmp_SYS_RET_OK:
  7981                                  	;jmp	SYS_RET_OK
  7982                                  
  7983                                  ; --------------------------------------------------------------------------
  7984                                  ; 09/01/2024
  7985                                  %if 0
  7986                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7987                                  	; DOSCODE:4CF3h
  7988                                  ;patch_or_unknown:
  7989                                  ;get_code_page:
  7990                                  	push    si
  7991                                  	mov     si, COUNTRY_CDPG
  7992                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7993                                  	mov     ax, [ss:si+6Ah]
  7994                                  	pop     si
  7995                                  	retn
  7996                                  %endif
  7997                                  ; --------------------------------------------------------------------------
  7998                                  
  7999                                  ; 29/04/2019 - Retro DOS v4.0
  8000                                  
  8001                                  ;BREAK	<ECS_call - Extended Code System support function>
  8002                                  ;---------------------------------------------------------------------------
  8003                                  ; Inputs:
  8004                                  ;	AL = 0	get lead byte table
  8005                                  ;		on return DS:SI has the table location
  8006                                  ;
  8007                                  ;	AL = 1	set / reset interim console flag
  8008                                  ;		DL = flag (00H or 01H)
  8009                                  ;		no return
  8010                                  ;
  8011                                  ;	AL = 2	get interim console flag
  8012                                  ;		on return DL = current flag value
  8013                                  ;
  8014                                  ;	AL = OTHER then error, and returns with:
  8015                                  ;		AX = error_invalid_function
  8016                                  ;
  8017                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  8018                                  ;	 SS:SP WILL BE PRESERVED!
  8019                                  ;---------------------------------------------------------------------------
  8020                                  
  8021                                  _$ECS_Call:
  8022 00000EE2 08C0                    	or	al,al			; AL = 0 (get table)?
  8023                                  	;jnz	short _okok
  8024                                  	; 15/12/2022
  8025 00000EE4 7403                    	jz	short get_lbt
  8026                                  ;_okok:
  8027 00000EE6 E948F7                  	jmp	SYS_RET_OK
  8028                                  get_lbt:
  8029 00000EE9 E895F5                  	call	Get_User_Stack		; *
  8030                                  
  8031                                  ;hkn; dbcs_table moved low to dosdata
  8032                                  	;mov	word [si+8],DBCS_TAB+2
  8033 00000EEC C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  8034                                  
  8035 00000EF1 06                      	push	es
  8036                                  	;getdseg <es>			; es = DOSDATA
  8037 00000EF2 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  8038                                  	;mov	[si+14],es
  8039 00000EF7 8C440E                  	mov	[SI+user_env.user_DS],es
  8040 00000EFA 07                      	pop	es
  8041                                  
  8042                                  	; 15/12/2022
  8043 00000EFB EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  8044                                  ;_okok:
  8045                                  	; 15/12/2022	
  8046                                  	;;transfer SYS_RET_OK
  8047                                  	;jmp	short jmp_SYS_RET_OK
  8048                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8049                                  	;;jmp	SYS_RET_OK
  8050                                  	;jmp	short jmp_SYS_RET_OK
  8051                                  
  8052                                  ;============================================================================
  8053                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8054                                  ;============================================================================
  8055                                  ; 19/07/2018 - Retro DOS v3.0
  8056                                  ; 15/05/2019 - Retro DOS v4.0
  8057                                  
  8058                                  ; System calls for parsing command lines
  8059                                  ;
  8060                                  ;   $PARSE_FILE_DESCRIPTOR
  8061                                  ;
  8062                                  ;   Modification history:
  8063                                  ;
  8064                                  ;       Created: ARR 30 March 1983
  8065                                  ;               EE PathParse 10 Sept 1983
  8066                                  ;
  8067                                  
  8068                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8069                                  ;---------------------------------------------------------------------------
  8070                                  ; Inputs:
  8071                                  ;       DS:SI Points to a command line
  8072                                  ;       ES:DI Points to an empty FCB
  8073                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8074                                  ;                   = 0 Parse stops if separator encountered
  8075                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8076                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8077                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8078                                  ;                   = 0  "       "      "       - put blanks in FCB
  8079                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8080                                  ;                   = 0  "       "      "        - put blanks in FCB
  8081                                  ; Function:
  8082                                  ;       Parse command line into FCB
  8083                                  ; Returns:
  8084                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8085                                  ;       DS:SI points to first character after filename
  8086                                  ;---------------------------------------------------------------------------
  8087                                  
  8088                                  _$PARSE_FILE_DESCRIPTOR:
  8089 00000EFD E8D43E                  	call	MAKEFCB
  8090 00000F00 56                      	PUSH    SI
  8091 00000F01 E87DF5                  	call	Get_User_Stack
  8092                                  	;pop	word [si+8]
  8093 00000F04 8F4408                  	POP     word [SI+user_env.user_SI]
  8094 00000F07 C3                      	retn
  8095                                  
  8096                                  ;============================================================================
  8097                                  ; MISC.ASM, MSDOS 6.0, 1991
  8098                                  ;============================================================================
  8099                                  ; 19/07/2018 - Retro DOS v3.0
  8100                                  
  8101                                  ; 29/04/2019 - Retro DOS v4.0
  8102                                  
  8103                                  ;ENTRYPOINTSEG	EQU	0CH
  8104                                  ;MAXDIF		EQU	0FFFH
  8105                                  ;SAVEXIT 	EQU	10
  8106                                  ;WRAPOFFSET	EQU	0FEF0h
  8107                                  
  8108                                  ;
  8109                                  ;----------------------------------------------------------------------------
  8110                                  ;
  8111                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8112                                  ;
  8113                                  ;	Return Stuff sort of like old get fat call
  8114                                  ;
  8115                                  ;	ENTRY	none
  8116                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8117                                  ;			GOD help anyone who tries to do ANYTHING except
  8118                                  ;			READ this ONE byte.
  8119                                  ;		DX = Total Number of allocation units on disk
  8120                                  ;		CX = Sector size
  8121                                  ;		AL = Sectors per allocation unit
  8122                                  ;		   = -1 if bad drive specified
  8123                                  ;	USES	all
  8124                                  ;
  8125                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8126                                  ;
  8127                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8128                                  ;
  8129                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8130                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8131                                  ;			GOD help anyone who tries to do ANYTHING except
  8132                                  ;			READ this ONE byte.
  8133                                  ;		DX = Total Number of allocation units on disk
  8134                                  ;		CX = Sector size
  8135                                  ;		AL = Sectors per allocation unit
  8136                                  ;		   = -1 if bad drive specified
  8137                                  ;	USES	all
  8138                                  ;
  8139                                  ;----------------------------------------------------------------------------
  8140                                  ;
  8141                                  
  8142                                  _$SLEAZEFUNC:
  8143                                  	; 10/01/2024
  8144                                  	; 15/05/2019 - Retro DOS v4.0
  8145 00000F08 B200                    	MOV	DL,0
  8146                                  _$SLEAZEFUNCDL:
  8147 00000F0A 16                      	push	ss
  8148 00000F0B 1F                      	pop	ds
  8149                                  	
  8150 00000F0C 88D0                    	MOV	AL,DL
  8151 00000F0E E8155A                  	call	GETTHISDRV		; Get CDS structure
  8152                                  SET_AL_RET:
  8153                                  	; MSDOS 3.3
  8154                                  	;;mov	al, 0Fh
  8155                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8156                                  	
  8157                                  	; MSDOS 6.0 & MSDOS 3.3
  8158 00000F11 721D                    	JC	short BADSLDRIVE
  8159                                  
  8160 00000F13 E82D1D                  	call	DISK_INFO
  8161                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8162 00000F16 7218                    	jc	short BADSLDRIVE
  8163 00000F18 8826[9805]              	MOV	[FATBYTE],AH
  8164                                  
  8165                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8166                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8167                                  ; CALL AGAIN
  8168                                  
  8169                                  	; 10/01/2024
  8170                                  	;MOV	DI,FATBYTE
  8171 00000F1C 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8172 00000F1E E860F5                  	call	Get_User_Stack
  8173                                  	;mov	[si+4],cx
  8174                                  	;mov	[si+6],bx
  8175                                  	;mov	[si+2],di
  8176 00000F21 894C04                  	MOV	[SI+user_env.user_CX],CX
  8177 00000F24 895C06                  	MOV	[SI+user_env.user_DX],BX
  8178                                  	;MOV	[SI+user_env.user_BX],DI
  8179                                  	; 10/01/2024
  8180 00000F27 C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8181                                  	
  8182                                  	;mov	[si+0Eh],ss
  8183 00000F2C 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8184                                  
  8185 00000F2F C3                      	retn
  8186                                  
  8187                                  BADSLDRIVE:
  8188 00000F30 E91DF7                  	jmp	FCB_RET_ERR
  8189                                  
  8190                                  ;
  8191                                  ;----------------------------------------------------------------------------
  8192                                  ;
  8193                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8194                                  ;
  8195                                  ;	Returns location of DOS status for interrupt routines
  8196                                  ;
  8197                                  ;	ENTRY	none
  8198                                  ;	EXIT	(es:bx) = flag location
  8199                                  ;	USES	all
  8200                                  ;
  8201                                  ;----------------------------------------------------------------------------
  8202                                  ;
  8203                                  
  8204                                  _$GET_INDOS_FLAG:
  8205 00000F33 E84BF5                          CALL	Get_User_Stack
  8206                                          ;MOV	WORD [SI+2],INDOS
  8207 00000F36 C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8208                                  getin_segm:	; 13/01/2024
  8209                                  	;MOV	[SI+10H],SS
  8210 00000F3B 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8211 00000F3E C3                      	RETN 
  8212                                  ;
  8213                                  ;----------------------------------------------------------------------------
  8214                                  ;
  8215                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8216                                  ;
  8217                                  ;	Return a pointer to interesting DOS variables This call is version
  8218                                  ;	dependent and is subject to change without notice in future versions.
  8219                                  ;	Use at risk.
  8220                                  ;
  8221                                  ;	ENTRY	none
  8222                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8223                                  ;	uses	ALL
  8224                                  ;
  8225                                  ;----------------------------------------------------------------------------
  8226                                  ;
  8227                                  
  8228                                  	; 13/01/2024
  8229                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8230                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8231                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8232                                  
  8233                                  _$GET_IN_VARS:
  8234 00000F3F E83FF5                  	CALL	Get_User_Stack
  8235                                  	;MOV	WORD [SI+2],SYSINITVAR
  8236                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8237 00000F42 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8238                                  	; 13/01/2024
  8239                                  	;;MOV	[SI+10H],SS
  8240                                  	;MOV	[SI+user_env.user_ES],SS
  8241                                  	;RETN
  8242 00000F47 EBF2                    	jmp	short getin_segm
  8243                                  
  8244                                  ;
  8245                                  ;----------------------------------------------------------------------------
  8246                                  ;
  8247                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8248                                  ;
  8249                                  ;	Return pointer to drive parameter table for default drive
  8250                                  ;
  8251                                  ;	ENTRY	none
  8252                                  ;	EXIT	(ds:bx) = DPB address
  8253                                  ;	USES	all
  8254                                  ;
  8255                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8256                                  ;
  8257                                  ;	Return pointer to a specified drive parameter table
  8258                                  ;
  8259                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8260                                  ;	EXIT	(al) = 0 iff ok
  8261                                  ;		  (ds:bx) = DPB address
  8262                                  ;		(al) = -1 if bad drive
  8263                                  ;	USES	all
  8264                                  ;
  8265                                  ;----------------------------------------------------------------------------
  8266                                  ;
  8267                                  
  8268                                  ; 15/05/2019 - Retro DOS v4.0
  8269                                  
  8270                                  _$GET_DEFAULT_DPB:
  8271 00000F49 B200                    	MOV	DL,0
  8272                                  _$GET_DPB:
  8273 00000F4B 16                      	push	ss
  8274 00000F4C 1F                      	pop	ds
  8275                                  
  8276 00000F4D 88D0                    	MOV	AL,DL
  8277 00000F4F E8D459                  	call	GETTHISDRV		; Get CDS structure
  8278 00000F52 7222                    	JC	short ISNODRV 		; no valid drive
  8279 00000F54 C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8280                                  	;;test	word [es:di+43h],8000h
  8281                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8282                                  	;test	byte [es:di+44h],80h
  8283 00000F58 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8284 00000F5D 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8285 00000F5F E88003                  	call	ECritDisk
  8286 00000F62 E82A46                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8287 00000F65 E89503                  	call	LCritDisk
  8288 00000F68 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8289                                  					;   have.
  8290 00000F6A E814F5                  	call	Get_User_Stack
  8291                                  	;mov	[si+2],bp
  8292 00000F6D 896C02                  	MOV	[SI+user_env.user_BX],BP
  8293                                  	;mov	[si+0Eh],es
  8294 00000F70 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8295 00000F73 30C0                    	XOR	AL,AL
  8296 00000F75 C3                      	retn
  8297                                  ISNODRV:
  8298 00000F76 B0FF                    	MOV	AL,-1
  8299 00000F78 C3                      	retn
  8300                                  
  8301                                  ;
  8302                                  ;----------------------------------------------------------------------------
  8303                                  ;
  8304                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8305                                  ;
  8306                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8307                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8308                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8309                                  ;
  8310                                  ;	ENTRY	none
  8311                                  ;	EXIT	none
  8312                                  ;	USES	all
  8313                                  ;
  8314                                  ;----------------------------------------------------------------------------
  8315                                  ;
  8316                                  
  8317                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8318                                  	; DOSCODE:4D94h
  8319                                  _$DISK_RESET:
  8320                                  	; 15/05/2019 - Retro DOS v4.0
  8321 00000F79 B0FF                    	mov	al,0FFh	; -1
  8322 00000F7B 16                      	push	ss
  8323 00000F7C 1F                      	pop	ds
  8324                                  	; 06/11/2022
  8325                                  	;MOV	AL,-1
  8326 00000F7D E86203                  	call	ECritDisk
  8327                                  	; MSDOS 6.0
  8328                                  	;;or	word [DOS34_FLAG],4
  8329                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8330 00000F80 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8331 00000F85 E87A49                  	call	FLUSHBUF
  8332                                  	; MSDOS 6.0
  8333                                  	;and	word [DOS34_FLAG],0FFFBh
  8334                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8335                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8336                                  	; 15/12/2022
  8337 00000F88 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8338 00000F8D C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8339                                  ;
  8340                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8341                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8342                                  ; let's do it.
  8343                                  ;
  8344                                  ; Invalidate 'last-buffer' used
  8345                                  ;
  8346 00000F93 BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8347 00000F96 891E[2000]              	MOV	[LastBuffer+2],BX
  8348 00000F9A 891E[1E00]              	MOV	[LastBuffer],BX
  8349                                  
  8350                                  	; MSDOS 3.3 
  8351                                  	; IBMDOS.COM, Offset 1C66h
  8352                                  	;;;;
  8353                                  	;lds	si,[BUFFHEAD]
  8354                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8355                                  				; .buf_flags, AH = 0, reset/clear
  8356                                  ;DRST_1:
  8357                                  	;;mov	[si+4],ax
  8358                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8359                                  	;lds	si,[SI]
  8360                                  	;cmp	si,bx ; -1
  8361                                  	;je	short DRST_2
  8362                                  	;;mov	[si+4],ax
  8363                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8364                                  	;lds	si,[SI]
  8365                                  	;cmp	si,bx
  8366                                  	;jne	short DRST_1
  8367                                  	;;;;
  8368                                  ;DRST_2:
  8369 00000F9E E85C03                  	call	LCritDisk
  8370 00000FA1 B8FFFF                  	MOV	AX,-1
  8371                                  	; 07/12/2022
  8372                                  	;mov	ax,0FFFFh
  8373                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8374 00000FA4 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8375 00000FA5 B82011                  	mov     ax,1120h
  8376 00000FA8 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8377                                  			; DS = DOS CS
  8378                                  			; Return: CF clear (successful)
  8379 00000FAA 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8380                                  	
  8381 00000FAB C3                      	retn
  8382                                  
  8383                                  	; 19/07/2018 - Retro DOS v3.0
  8384                                  
  8385                                  ;
  8386                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8387                                  ;
  8388                                  ;----------------------------------------------------------------------------
  8389                                  ;
  8390                                  ;**	$SetDPB - Create a DPB
  8391                                  ;
  8392                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8393                                  ;
  8394                                  ;	ENTRY	ES:BP Points to DPB
  8395                                  ;		DS:SI Points to BPB
  8396                                  ;	EXIT	DPB setup
  8397                                  ;	USES	ALL but BP, DS, ES
  8398                                  ;
  8399                                  ;----------------------------------------------------------------------------
  8400                                  ;
  8401                                  
  8402                                  ; 10/05/2019 - Retro DOS v4.0
  8403                                  
  8404                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8405                                  
  8406                                  ; MSDOS 6.0
  8407 00000FAC 0300                    word3:	dw	3			; M008 -- word value for divides
  8408                                  
  8409                                  ; 13/01/2024
  8410                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8411                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8412                                  
  8413                                  ;procedure   $SETDPB,NEAR
  8414                                  
  8415                                  _$SETDPB:
  8416 00000FAE 89EF                    	MOV	DI,BP
  8417                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8418                                  	; 13/01/2024
  8419 00000FB0 47                      	inc	di
  8420 00000FB1 47                      	inc	di
  8421 00000FB2 AD                      	LODSW
  8422 00000FB3 AB                      	STOSW				; dpb_sector_size
  8423                                  	; MSDOS 6.0
  8424                                  	;cmp	byte [si+3],0
  8425 00000FB4 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8426 00000FB8 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8427                                  	;mov	byte [es:di+4],0
  8428 00000FBA 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8429                                  	; 13/01/2024
  8430 00000FBF 89C3                    	mov	bx,ax
  8431 00000FC1 EB70                    	JMP	short setend			     ; NO		;AN000;
  8432                                  
  8433                                  yesfat: ; 10/08/2018
  8434 00000FC3 89C2                    	MOV	DX,AX
  8435 00000FC5 AC                      	LODSB
  8436                                  	;DEC	AL
  8437                                  	; 17/12/2022
  8438 00000FC6 48                      	dec	ax
  8439 00000FC7 AA                      	STOSB				; dpb_cluster_mask
  8440                                  	;INC	AL
  8441 00000FC8 40                      	inc	ax
  8442 00000FC9 30E4                    	XOR	AH,AH
  8443                                  LOG2LOOP:
  8444 00000FCB A801                    	test	AL,1
  8445 00000FCD 7506                    	JNZ	short SAVLOG
  8446 00000FCF FEC4                    	INC	AH
  8447 00000FD1 D0E8                    	SHR	AL,1
  8448 00000FD3 EBF6                    	JMP	SHORT LOG2LOOP
  8449                                  SAVLOG:
  8450 00000FD5 88E0                    	MOV	AL,AH
  8451 00000FD7 AA                      	STOSB				; dpb_cluster_shift
  8452 00000FD8 88C3                    	MOV	BL,AL
  8453 00000FDA A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8454 00000FDB AC                      	LODSB
  8455 00000FDC AA                      	STOSB				; dpb_FAT_count Number of FATs
  8456                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8457                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8458 00000FDD 88C7                    	MOV	BH,AL
  8459 00000FDF AD                      	LODSW
  8460 00000FE0 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8461 00000FE1 B105                    	MOV	CL,5
  8462 00000FE3 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8463 00000FE5 48                      	DEC	AX
  8464 00000FE6 01D0                    	ADD	AX,DX			; Cause Round Up
  8465 00000FE8 89D1                    	MOV	CX,DX
  8466 00000FEA 31D2                    	XOR	DX,DX
  8467 00000FEC F7F1                    	DIV	CX
  8468 00000FEE 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8469 00000FF0 47                      	INC	DI
  8470 00000FF1 47                      	INC	DI			; Skip dpb_first_sector
  8471 00000FF2 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8472 00000FF3 AC                      	LODSB
  8473                                  	;mov	[es:bp+17h],al
  8474 00000FF4 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8475 00000FF8 AD                      	LODSW				; Number of sectors in a FAT
  8476                                  	
  8477                                  	;;;
  8478                                  	;MSDOS 3.3
  8479                                  	;
  8480                                  	;STOSB		; DPB.FAT_SIZE
  8481                                  	;MUL	BH
  8482                                  	
  8483                                  	;MSDOS 6.0
  8484                                  	;
  8485 00000FF9 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8486 00000FFA 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8487 00000FFC 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8488 00000FFE F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8489                                  	;;;
  8490                                  	
  8491                                  	;add	ax,[es:bp+6]
  8492 00001000 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8493 00001004 AB                      	STOSW				; dpb_dir_sector
  8494 00001005 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8495                                  	;mov	[es:bp+0Bh],ax
  8496 00001007 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8497                                  	
  8498                                  	; MSDOS 6.0
  8499 0000100B 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8500                                  	;;cmp	word [es:bp+0Dh],0
  8501                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8502                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8503                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8504                                  	; 15/12/2022
  8505                                  	; 28/07/2019
  8506 0000100D 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8507 00001011 09DB                    	or	bx,bx
  8508 00001013 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8509                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8510                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8511                                  	
  8512                                  
  8513 00001015 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8514                                  	;mov	bx,[si+8]
  8515 00001017 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8516                                  	;mov	dx,[si+10]
  8517 0000101A 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8518 0000101D 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8519 0000101F 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8520 00001022 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8521 00001024 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8522                                  rott:					;AN000;;F.C. >32mb
  8523 00001026 F8                      	CLC				;AN000;;F.C. >32mb
  8524 00001027 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8525 00001029 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8526 0000102B E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8527                                  norot:					;AN000;
  8528                                  	; 15/12/2022
  8529                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8530 0000102D EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8531                                  normal_dpb:
  8532                                  	;;sub	ax,[es:bp+0Dh]
  8533                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8534                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8535                                  	; 15/12/2022
  8536                                  	; bx = [es:bp+DSKSIZ]
  8537                                  	;sub	ax,bx ; 28/07/2019
  8538                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8539                                  	; 15/12/2022
  8540 0000102F 29C3                    	sub	bx,ax
  8541                                  	;NEG	AX			; Sectors in data area
  8542                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8543                                  	; 15/12/2022
  8544                                  	; CL = cluster shift
  8545                                  	; BX = number of data sectors 
  8546                                  	;SHR	AX,CL			; Div by sectors/cluster
  8547 00001031 D3EB                    	shr	bx,cl 
  8548                                  setend:
  8549                                  ;	M008 - CAS
  8550                                  ;
  8551                                  	; 15/12/2022
  8552 00001033 43                      	inc	bx
  8553                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8554                                  ;
  8555                                  ;	There has been a bug in our fatsize calculation for so long
  8556                                  ;	  that we can't correct it now without causing some user to
  8557                                  ;	  experience data loss. There are even cases where allowing
  8558                                  ;	  the number of clusters to exceed the fats is the optimal
  8559                                  ;	  case -- where adding 2 more fat sectors would make the
  8560                                  ;	  data field smaller so that there's nothing to use the extra
  8561                                  ;	  fat sectors for.
  8562                                  ;
  8563                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8564                                  ;	  still report that there was a cluster left when the disk was
  8565                                  ;	  actually full. Very graceful failure for a corrupt system
  8566                                  ;	  configuration. There may be worse cases that were never
  8567                                  ;	  properly traced back to this bug. The problem cases only
  8568                                  ;	  occurred when partition sizes were very near FAT sector
  8569                                  ;	  rounding boundaries, which were rare cases.
  8570                                  ;
  8571                                  ;	Also, it's possible that some third-party partition program might
  8572                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8573                                  ;	  scheme. In this hypothetical case, the number of allocation
  8574                                  ;	  clusters which don't actually have FAT entries to represent
  8575                                  ;	  them might be larger and might create a more catastrophic
  8576                                  ;	  failure. So we'll provide the safeguard of limiting the
  8577                                  ;	  max_cluster to the amount that will fit in the FATs.
  8578                                  ;
  8579                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8580                                  
  8581                                  ;	make sure the number of fat sectors is actually enough to
  8582                                  ;	  hold that many clusters. otherwise, back the number of
  8583                                  ;	  clusters down
  8584                                  
  8585                                  	; 15/12/2022
  8586                                  	; bx = number of clusters
  8587                                  
  8588                                  	; 19/07/2018 - Retro DOS v3.0
  8589                                  	; MSDOS 6.0
  8590                                  	; 15/12/2022
  8591                                  	;mov	bx,ax			; remember calculated # clusters
  8592                                  
  8593                                  	; 01/08/2018 (MSDOS 3.3)
  8594                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8595                                  	;xor	ah,ah 
  8596                                  
  8597                                  	; 10/05/2019 - Retro DOS v4.0
  8598                                  	;mov	ax,[ES:BP+0Fh]
  8599 00001034 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8600                                  
  8601                                  	;mul	word [es:bp+2]	
  8602 00001038 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8603 0000103C 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8604 00001040 720D                    	jb	short setend_fat12
  8605 00001042 D1EA                    	shr	dx,1
  8606                                  
  8607                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8608                                  	; 15/12/2022
  8609                                  ;cs3 7/2/92
  8610 00001044 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8611                                  					; than enough for the maximum FAT,
  8612                                  					; so go ahead and use the calculated
  8613                                  					; number of clusters.
  8614                                  ;cs3 7/2/92
  8615                                  
  8616 00001046 D1D8                    	rcr	ax,1			; find number of entries
  8617 00001048 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8618                                  ;					;  into 12-bit fatland?
  8619 0000104B 7215                    	jb	short setend_faterr	; then go ahead and let the
  8620                                  ;					;  inconsistency pass through
  8621                                  ;					;  rather than lose data by
  8622                                  ;					;  correcting the fat type
  8623 0000104D EB0E                    	jmp	short setend_fat16
  8624                                  
  8625                                  setend_fat12:
  8626 0000104F 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8627 00001051 11D2                    	adc	dx,dx
  8628                                  
  8629                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8630                                  ;cs3 7/2/92
  8631                                  	; 15/12/2022
  8632 00001053 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8633 00001056 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8634                                  					; here. Check for it and use
  8635                                  					; the calculated size in this case.
  8636                                  ;cs3 7/2/92
  8637                                  
  8638 00001058 2EF736[AC0F]            	div	word [cs:word3]
  8639                                  
  8640                                  setend_fat16:
  8641 0000105D 48                      	dec	ax			; limit at 1
  8642 0000105E 39D8                    	cmp	ax,bx			; is fat big enough?
  8643 00001060 7602                    	jbe	short setend_fat	; use max value that'll fit
  8644                                  
  8645                                  setend_faterr:
  8646 00001062 89D8                    	mov	ax,bx			; use calculated value
  8647                                  
  8648                                  setend_fat:
  8649                                  
  8650                                  ;	now ax = maximum legal cluster
  8651                                  
  8652                                  ;	end M008
  8653                                  
  8654                                  	;mov	[es:bp+0Dh], ax
  8655 00001064 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8656                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8657                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8658 00001068 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8659                                  					; Init so first ALLOC starts at
  8660                                  					; begining of FAT
  8661                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8662                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8663 0000106E 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8664                                  
  8665 00001074 C3                      	retn
  8666                                  
  8667                                  ;EndProc $SETDPB
  8668                                  
  8669                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8670                                  
  8671                                  ;
  8672                                  ;----------------------------------------------------------------------------
  8673                                  ;
  8674                                  ;**	$Dup_PDB
  8675                                  ;
  8676                                  ; Inputs:   DX is new segment address of process
  8677                                  ;	    SI is end of new allocation block
  8678                                  ;
  8679                                  ;----------------------------------------------------------------------------
  8680                                  ;
  8681                                  
  8682                                  _$DUP_PDB:
  8683                                  
  8684                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8685                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8686                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8687                                  
  8688                                  	; MSDOS 3.3
  8689                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8690                                  	;MOV	DS,[CS:CurrentPDB]
  8691                                  
  8692                                  	; 15/05/2019 - Retro DOS v4.0
  8693                                  	; MSDOS 6.0
  8694 00001075 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8695 0000107A C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8696 0000107F 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8697                                  
  8698 00001083 56                      	PUSH	SI
  8699 00001084 EB0A                    	JMP	SHORT CreateCopy
  8700                                  
  8701                                  ;
  8702                                  ;----------------------------------------------------------------------------
  8703                                  ;
  8704                                  ; Inputs:
  8705                                  ;	DX = Segment number of new base
  8706                                  ; Function:
  8707                                  ;	Set up program base and copy term and ^C from int area
  8708                                  ; Returns:
  8709                                  ;	None
  8710                                  ; Called at DOS init
  8711                                  ;
  8712                                  ;----------------------------------------------------------------------------
  8713                                  ;
  8714                                  
  8715                                  ; 15/05/2019 - Retro DOS v4.0
  8716                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8717                                  
  8718                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8719                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8720                                  
  8721                                  _$CREATE_PROCESS_DATA_BLOCK:
  8722                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8723 00001086 E8F8F3                  	CALL	Get_User_Stack
  8724                                  	;mov	ds,[si+14h]
  8725 00001089 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8726                                  	;push	word [2]
  8727 0000108C FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8728                                  CreateCopy:
  8729 00001090 8EC2                    	MOV	ES,DX
  8730                                  
  8731 00001092 31F6                    	XOR	SI,SI			; copy entire PDB
  8732 00001094 89F7                    	MOV	DI,SI
  8733 00001096 B98000                  	MOV	CX,128
  8734 00001099 F3A5                    	REP	MOVSW
  8735                                  
  8736                                  ; DOS 3.3 7/9/86
  8737                                  	;mov	cx,20
  8738                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8739                                  	; 15/12/2022
  8740 0000109B B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8741                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8742                                  	;mov	cx,FILPERPROC
  8743                                  
  8744                                  	;mov	di,18h
  8745 0000109D BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8746                                  	;;PUSH	DS ; * 15/05/2019
  8747                                  	;;lds	si,[34h]
  8748                                  	;LDS	SI,[PDB.JFN_Pointer]
  8749                                  	;REP	MOVSB
  8750                                  	;;POP	DS ; * 15/05/2019
  8751                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8752                                  	; 05/12/2022
  8753                                  	; (push ds then pop ds is not needed here!)
  8754                                  	;push	ds
  8755                                  	;lds	si,[34h]
  8756 000010A0 C5363400                	lds	si,[PDB.JFN_Pointer]
  8757 000010A4 F3A4                    	rep	movsb
  8758                                  	;pop	ds
  8759                                  
  8760                                  ; DOS 3.3 7/9/86
  8761                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8762                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8763                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8764                                  
  8765 000010A6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8766                                  
  8767                                  	;;test	byte [cs:CreatePDB],0FFh
  8768                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8769                                  	; 17/12/2022
  8770 000010AB 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8771                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8772 000010AF 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8773                                  
  8774                                  ; Here we set up for a new process...
  8775                                  
  8776                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8777                                  	;POP	DS
  8778                                  
  8779                                  	; MSDOS 6.0
  8780                                  	;;getdseg <ds>			; ds -> dosdata
  8781                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8782                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8783                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8784                                  	; 15/12/2022
  8785                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8786                                  
  8787 000010B1 31DB                    	XOR	BX,BX			; dup all jfns
  8788                                  	;mov	cx,20
  8789                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8790                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8791                                  	; 15/12/2022
  8792 000010B3 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8793                                  
  8794                                  Create_dup_jfn:
  8795 000010B5 06                      	PUSH	ES ;**			; save new PDB
  8796 000010B6 E85B54                  	call	SFFromHandle		; get sf pointer
  8797 000010B9 B0FF                    	MOV	AL,-1			; unassigned JFN
  8798 000010BB 7224                    	JC	short CreateStash	; file was not really open
  8799                                  	;;test	word [es:di+5],1000h
  8800                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8801                                  	; 15/05/2019
  8802                                  	;test	byte [es:di+6],10h
  8803 000010BD 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8804 000010C2 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8805                                  
  8806                                  ; We do not inherit network file handles.
  8807                                  
  8808                                  	;mov	ah,[es:di+2]
  8809 000010C4 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8810                                  	;and	ah,0F0h
  8811 000010C8 80E4F0                  	AND	AH,SHARING_MASK
  8812                                  	;cmp	ah,70h
  8813 000010CB 80FC70                  	CMP	AH,SHARING_NET_FCB
  8814 000010CE 7411                    	jz	short CreateStash
  8815                                  
  8816                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8817                                  ; duplication operation.
  8818                                  
  8819 000010D0 893E[9E05]              	MOV	[THISSFT],DI
  8820 000010D4 8C06[A005]              	MOV	[THISSFT+2],ES
  8821 000010D8 E8C418                  	call	DOS_DUP 		; signal duplication
  8822                                  
  8823                                  ; get the old sfn for copy
  8824                                  
  8825 000010DB E81954                  	call	pJFNFromHandle		; ES:DI is jfn
  8826 000010DE 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8827                                  
  8828                                  ; Take AL (old sfn or -1) and stash it into the new position
  8829                                  
  8830                                  CreateStash:
  8831 000010E1 07                      	POP	ES ;**
  8832                                  	;mov	[es:bx+18h],al
  8833 000010E2 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8834 000010E6 43                      	INC	BX			; next jfn...
  8835 000010E7 E2CC                    	LOOP	Create_dup_jfn
  8836                                  
  8837 000010E9 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8838                                  	; 06/11/2022
  8839                                  	;mov	[es:16h],bx
  8840 000010ED 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8841 000010F2 8C06[3003]              	MOV	[CurrentPDB],ES
  8842                                  	;MOV	DS,BX ; 28/07/2019
  8843                                  	; 07/12/2022
  8844                                  	;mov	ds,[cs:DosDSeg]
  8845                                  	; 15/12/2022
  8846                                  	; ds = [cs:DosDSeg]
  8847 000010F6 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8848                                  	;mov	ds,bx
  8849                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8850                                  	; 15/12/2022
  8851                                  	;mov	ds,bx
  8852                                  
  8853                                  ; end of new process create
  8854                                  
  8855                                  Create_PDB_cont:
  8856                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8857                                  
  8858                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8859                                  
  8860                                  	;; 28/07/2019
  8861                                  	;;push	ds
  8862                                  	;;mov	ds,[cs:DosDSeg]
  8863                                  	;mov	byte [CreatePDB],0
  8864                                  	;;pop	ds
  8865                                  
  8866                                  ; 05/12/2022
  8867                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8868                                  ;	; (push-pop ds is nonsense here! 
  8869                                  ;	;  but i am using same code with original MSDOS.SYS
  8870                                  ;	;  for address compatibility.)
  8871                                  ;	push	ds
  8872                                  ;	; ds = [cs:DosDSeg] !
  8873                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8874                                  ;	mov	byte [CreatePDB],0
  8875                                  ;	pop	ds
  8876                                  
  8877 000010FB 58                      	POP	AX ;*
  8878                                  
  8879                                  	;entry	SETMEM
  8880                                  
  8881                                  	; 17/12/2022
  8882                                  	; cx = 0
  8883                                  
  8884                                  ;---------------------------------------------------------------------------
  8885                                  ; Inputs:
  8886                                  ;	AX = Size of memory in paragraphs
  8887                                  ;	DX = Segment
  8888                                  ; Function:
  8889                                  ;	Completely prepares a program base at the
  8890                                  ;	specified segment.
  8891                                  ; Called at DOS init
  8892                                  ; Outputs:
  8893                                  ;	DS = DX
  8894                                  ;	ES = DX
  8895                                  ;	[0] has INT int_abort
  8896                                  ;	[2] = First unavailable segment
  8897                                  ;	[5] to [9] form a long call to the entry point
  8898                                  ;	[10] to [13] have exit address (from int_terminate)
  8899                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8900                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8901                                  ; DX,BP unchanged. All other registers destroyed.
  8902                                  ;---------------------------------------------------------------------------
  8903                                  
  8904                                  SETMEM:
  8905                                  	;XOR	CX,CX
  8906                                  	; 17/12/2022
  8907                                  	; cx = 0
  8908 000010FC 8ED9                    	MOV	DS,CX
  8909 000010FE 8EC2                    	MOV	ES,DX
  8910                                  	;mov	si,88h
  8911 00001100 BE8800                  	MOV	SI,addr_int_terminate
  8912                                  	;mov	di,10 ; 0Ah
  8913 00001103 BF0A00                  	MOV	DI,SAVEXIT
  8914                                  	;MOV	CX,6
  8915                                  	; 15/12/2022
  8916 00001106 B106                    	mov	cl,6
  8917 00001108 F3A5                    	REP	MOVSW
  8918 0000110A 26A30200                	MOV	[ES:2],AX
  8919 0000110E 29D0                    	SUB	AX,DX
  8920 00001110 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8921 00001113 7603                    	JBE	short HAVDIF
  8922 00001115 B8FF0F                  	MOV	AX,MAXDIF
  8923                                  HAVDIF:
  8924 00001118 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8925 0000111B BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8926 0000111E 29C3                    	SUB	BX,AX
  8927 00001120 B104                    	MOV	CL,4
  8928 00001122 D3E0                    	SHL	AX,CL
  8929 00001124 8EDA                    	MOV	DS,DX
  8930                                  
  8931                                  	; (MSDOS 6.0 note)
  8932                                  	;
  8933                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8934                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8935                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8936                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8937                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8938                                  	; making this equvalence valid for this particular case. If however
  8939                                  	; there is less than 64K remaining the address in BX:AX will not 
  8940                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8941                                  	; into the PSP.
  8942                                  	;
  8943                                  	; Therefore for the case where there is less than 64K remaining in 
  8944                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8945                                  	; requirements will not work. Call 5, however will continue to work
  8946                                  	; for all cases.
  8947                                  	;
  8948                                  
  8949                                  	;mov	[6],ax
  8950                                  	;mov	[8],bx
  8951                                  
  8952 00001126 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8953 00001129 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8954                                  
  8955                                  	; 06/05/2019 - Retro DOS v4.0
  8956 0000112D 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8957                                  					;    memory left
  8958 00001130 740C                    	je	short addr_ok		; Y: the above calculated address is
  8959                                  					;    OK
  8960                                  					; N: 
  8961                                  
  8962 00001132 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8963 00001138 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8964                                  addr_ok:
  8965                                  	;mov	word [0],20CDh
  8966 0000113E C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8967                                  	;mov	byte [5],9Ah
  8968 00001144 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8969                                  	;mov	word [50h],21CDh
  8970 00001149 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8971                                  	;mov	byte [52h],0CBh
  8972 0000114F C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8973                                  	;mov	word [34h],18h
  8974 00001154 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8975                                  	;mov	word [36h],ds
  8976 0000115A 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8977                                  	;mov	word [32h],20
  8978 0000115E C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8979                                  ;
  8980                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8981                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8982                                  ; particular SFT.  We perform this by requiring that the server link together
  8983                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8984                                  ; initialize this pointer.
  8985                                  ;
  8986                                   	;mov	word [38h],-1
  8987 00001164 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8988                                  	;mov	word [3Ah],-1
  8989 0000116A C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8990                                  
  8991                                  	; 06/05/2019
  8992                                  	; Set the real version number in the PSP - 5.00
  8993                                  
  8994                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8995                                  	; 07/12/2022
  8996 00001170 26C70640000616          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8997                                  
  8998 00001177 C3                      	retn
  8999                                  
  9000                                  ; 29/04/2019 - Retro DOS v4.0
  9001                                  
  9002                                  ;BREAK <$GSetMediaID -- get set media ID>
  9003                                  
  9004                                  ;---------------------------------------------------------------------------
  9005                                  ; Inputs:
  9006                                  ;	BL= drive number as defined in IOCTL
  9007                                  ;	AL= 0 get media ID
  9008                                  ;	    1 set media ID
  9009                                  ;	DS:DX= buffer containing information
  9010                                  ;		DW  0  info level (set on input)
  9011                                  ;		DD  ?  serial #
  9012                                  ;		DB  11 dup(?)  volume id
  9013                                  ;		DB   8 dup(?)  file system type
  9014                                  ; Function:
  9015                                  ;	Get or set media ID
  9016                                  ; Returns:
  9017                                  ;	carry clear, DS:DX is filled
  9018                                  ;	carry set, error
  9019                                  ;---------------------------------------------------------------------------
  9020                                  
  9021                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9022                                  _$GSetMediaID:
  9023                                  	; RAWIO - GET_MEDIA_ID
  9024 00001178 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  9025 0000117B 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  9026 0000117D 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  9027                                  	;cmp	al,1		      ;AN000;MS.; set ?
  9028                                  	;jne	short errorfunc	      ;AN000;MS.; no
  9029                                  	; 15/12/2022
  9030 0000117F FEC8                    	dec	al
  9031 00001181 7507                    	jnz	short errorfunc ; al > 1
  9032                                  	; RAWIO - SET_MEDIA_ID
  9033                                  	;mov	cx,0846h	      ;AN001;MS.;
  9034                                  	; 15/12/2022
  9035 00001183 B146                    	mov	cl,46h	; cx = 0846h 
  9036                                  doioctl:			      ;AN000;
  9037 00001185 B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  9038                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  9039                                  	;call	_$IOCTL
  9040                                  	;retn			      ;AN000;MS.;
  9041                                  	; 15/12/2022
  9042 00001187 E97A10                  	jmp	_$IOCTL
  9043                                  errorfunc:			      ;AN000;
  9044                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  9045                                  	;mov	al,1
  9046 0000118A B001                    	mov	al,error_invalid_function
  9047 0000118C E9ABF4                  	jmp	SYS_RET_ERR
  9048                                  
  9049                                  ; 16/05/2019 - Retro DOS v4.0
  9050                                  
  9051                                  ;============================================================================
  9052                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9053                                  ;============================================================================
  9054                                  ; 20/07/2018 - Retro DOS v3.0
  9055                                  ; 29/04/2019 - Retro DOS v4.0
  9056                                  
  9057                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9058                                  ;----------------------------------------------------------------------------
  9059                                  ;
  9060                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9061                                  ;	     Strings of different lengths don't match.
  9062                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9063                                  ;   Outputs: Z if strings same, NZ if different
  9064                                  ;   Registers modified: NONE
  9065                                  ;----------------------------------------------------------------------------
  9066                                  
  9067                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9068                                  StrCmp:
  9069 0000118F 56                      	push	si
  9070 00001190 57                      	push	di
  9071 00001191 50                      	push	ax
  9072                                  Cmplp:
  9073 00001192 AC                      	LODSB
  9074 00001193 E8713D                  	call	UCase			; convert to upper case
  9075 00001196 E8C33D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9076 00001199 88C4                    	MOV	AH,AL
  9077 0000119B 268A05                  	MOV	AL,[ES:DI]
  9078 0000119E 47                      	INC	DI
  9079 0000119F E8653D                  	call	UCase			; convert to upper case
  9080 000011A2 E8B73D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9081 000011A5 38C4                    	CMP	AH,AL
  9082 000011A7 7504                    	JNZ	short PopRet		; Strings dif
  9083                                  
  9084 000011A9 08C0                    	OR	AL,AL
  9085 000011AB 75E5                    	JNZ	short Cmplp		; More string
  9086                                  PopRet:
  9087 000011AD 58                      	pop	ax
  9088 000011AE 5F                      	pop	di
  9089 000011AF 5E                      	pop	si
  9090 000011B0 C3                      	retn
  9091                                  
  9092                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9093                                  ;----------------------------------------------------------------------------
  9094                                  ;
  9095                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9096                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9097                                  ;	characters.
  9098                                  ;
  9099                                  ;   Inputs:	DS:SI - pointer to source string
  9100                                  ;		ES:DI - pointer to destination string
  9101                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9102                                  ;		DS:SI point byte after nul byte at end of source string
  9103                                  ;   Registers modified: SI,DI
  9104                                  ;----------------------------------------------------------------------------
  9105                                  
  9106                                  StrCpy:
  9107 000011B1 50                      	push	ax
  9108                                  CPYLoop:
  9109 000011B2 AC                      	LODSB
  9110 000011B3 E8513D                  	call	UCase			; convert to upper case
  9111 000011B6 E8A33D                  	call	PATHCHRCMP		; convert / to \ ;
  9112 000011B9 AA                      	STOSB
  9113                                  
  9114 000011BA 08C0                    	OR	AL,AL
  9115 000011BC 75F4                    	JNZ	short CPYLoop
  9116 000011BE 58                      	pop	ax
  9117 000011BF C3                      	retn
  9118                                  
  9119                                  ;----------------------------------------------------------------------------
  9120                                  ; Procedure Name : FStrCpy
  9121                                  ;----------------------------------------------------------------------------
  9122                                  
  9123                                  FStrCpy:
  9124 000011C0 50                      	push	ax
  9125                                  FCPYLoop:
  9126 000011C1 AC                      	LODSB
  9127 000011C2 AA                      	STOSB
  9128 000011C3 08C0                    	OR	AL,AL
  9129 000011C5 75FA                    	JNZ	short FCPYLoop
  9130 000011C7 58                      	pop	ax
  9131 000011C8 C3                      	retn
  9132                                  
  9133                                  ; 20/07/2018 - Retro DOS v3.0
  9134                                  ;----------------------------------------------------------------------------
  9135                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9136                                  ;----------------------------------------------------------------------------
  9137                                  ;
  9138                                  ;UCase:	
  9139                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9140                                  ;	retn
  9141                                  
  9142                                  ;Break <StrLen - compute length of string ES:DI>
  9143                                  ;----------------------------------------------------------------------------
  9144                                  ;**	StrLen - Compute Length of String
  9145                                  ;
  9146                                  ;	StrLen computes the length of a string, including the trailing 00
  9147                                  ;
  9148                                  ;	ENTRY	(es:di) = address of string
  9149                                  ;	EXIT	(cx) = size of string
  9150                                  ;	USES	cx, flags
  9151                                  ;----------------------------------------------------------------------------
  9152                                  
  9153                                  StrLen:
  9154 000011C9 57                      	push	di
  9155 000011CA 50                      	push	ax
  9156                                  	;MOV	CX,-1
  9157 000011CB B9FFFF                  	mov	cx,65535
  9158 000011CE 30C0                    	XOR	AL,AL
  9159 000011D0 F2AE                    	REPNE	SCASB
  9160 000011D2 F7D1                    	NOT	CX
  9161 000011D4 58                      	pop	ax
  9162 000011D5 5F                      	pop	di
  9163 000011D6 C3                      	retn
  9164                                  
  9165                                  ;----------------------------------------------------------------------------
  9166                                  ;**	DStrLen - Compute Length of String
  9167                                  ;
  9168                                  ;	ENTRY	(ds:si) = address of string
  9169                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9170                                  ;	USES	cx, flags
  9171                                  ;----------------------------------------------------------------------------
  9172                                  
  9173                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9174 000011D7 E80300                  	CALL	XCHGP
  9175 000011DA E8ECFF                  	CALL	StrLen
  9176                                  	;CALL	XCHGP
  9177                                  	;retn
  9178                                  	; 18/12/2022
  9179                                  	;jmp	short XCHGP
  9180                                  
  9181                                  ;----------------------------------------------------------------------------
  9182                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9183                                  ;
  9184                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9185                                  ;
  9186                                  ;	ENTRY	none
  9187                                  ;	EXIT	pairs exchanged
  9188                                  ;	USES	SI, DI, DS, ES
  9189                                  ;----------------------------------------------------------------------------
  9190                                  
  9191                                  XCHGP:
  9192 000011DD 1E                      	push	ds
  9193 000011DE 06                      	push	es
  9194 000011DF 1F                      	pop	ds
  9195 000011E0 07                      	pop	es
  9196 000011E1 87F7                    	XCHG	SI,DI
  9197                                  xchgp_retn:
  9198 000011E3 C3                      	retn
  9199                                  
  9200                                  ;Break	<Idle - wait for a specified amount of time>
  9201                                  ;----------------------------------------------------------------------------
  9202                                  ;
  9203                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9204                                  ;   	   we spin until RetryLoop is exhausted.
  9205                                  ;
  9206                                  ;   Inputs:	RetryLoop is the number of times we spin
  9207                                  ;   Outputs:	Wait
  9208                                  ;   Registers modified: none
  9209                                  ;----------------------------------------------------------------------------
  9210                                  
  9211                                  Idle:
  9212                                  	;test	byte [SS:FSHARING],0FFh
  9213 000011E4 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9214                                  	;retnz
  9215 000011EA 75F7                    	jnz	short xchgp_retn
  9216                                  	;SAVE	<CX>
  9217 000011EC 51                      	push	cx
  9218 000011ED 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9219 000011F2 E308                    	JCXZ	Idle3
  9220                                  Idle1:	
  9221 000011F4 51                      	PUSH	CX
  9222 000011F5 31C9                    	XOR	CX,CX
  9223                                  Idle2:	
  9224 000011F7 E2FE                    	LOOP	Idle2
  9225 000011F9 59                      	POP	CX
  9226 000011FA E2F8                    	LOOP	Idle1
  9227                                  Idle3:	
  9228                                  	;RESTORE <CX>
  9229 000011FC 59                      	pop	cx
  9230 000011FD C3                      	retn
  9231                                  
  9232                                  ;Break	<TableDispatch - dispatch to a table>
  9233                                  ;----------------------------------------------------------------------------
  9234                                  ;
  9235                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9236                                  ;   routine. Preserve all input registers to the routine.
  9237                                  ;
  9238                                  ;   Inputs:	Push	return address
  9239                                  ;		Push	Table address
  9240                                  ;		Push	index (byte)
  9241                                  ;   Outputs:	appropriate routine gets jumped to.
  9242                                  ;		return indicates invalid index
  9243                                  ;   Registers modified: none.
  9244                                  ;----------------------------------------------------------------------------
  9245                                  
  9246                                  struc TFrame	 ; TableFrame
  9247 00000000 ????                    .OldBP:	 resw 1  ; 0
  9248 00000002 ????                    .OldRet: resw 1  ; 2
  9249 00000004 ??                      .Index:	 resb 1  ; 4
  9250 00000005 ??                      .Pad:	 resb 1  ; 5  
  9251 00000006 ????                    .Tab:	 resw 1  ; 6
  9252 00000008 ????                    .NewRet: resw 1  ; 8
  9253                                  endstruc
  9254                                  
  9255                                  TableDispatch:
  9256 000011FE 55                      	PUSH	BP
  9257 000011FF 89E5                    	MOV	BP,SP
  9258 00001201 53                      	PUSH	BX			; save BX
  9259                                  	;mov	bx,[bp+6]
  9260 00001202 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9261 00001205 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9262                                  	;cmp	[bp+4],bl
  9263 00001208 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9264 0000120B 7317                    	JAE	short TableError	; yes
  9265                                  	;mov	bl,[bp+4]
  9266 0000120D 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9267 00001210 30FF                    	XOR	BH,BH			; convert to word
  9268 00001212 D1E3                    	SHL	BX,1			; convert to word pointer
  9269 00001214 43                      	INC	BX			; point past first length byte
  9270                                  	; 17/08/2018
  9271                                  	;add	bx,[bp+6]
  9272 00001215 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9273 00001218 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9274                                  	;mov	[bp+6],bx
  9275 0000121B 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9276 0000121E 5B                      	POP	BX			; restore BX
  9277 0000121F 5D                      	POP	BP			; restore BP
  9278 00001220 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9279 00001223 C3                      	retn				; do operation
  9280                                  TableError:
  9281 00001224 5B                      	POP	BX			; restore BX
  9282 00001225 5D                      	POP	BP			; restore BP
  9283 00001226 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9284                                  
  9285                                  ;Break	<TestNet - determine if a CDS is for the network>
  9286                                  ;----------------------------------------------------------------------------
  9287                                  ;
  9288                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9289                                  ;	network CDS. This will handle NULL cds also.
  9290                                  ;
  9291                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9292                                  ;   Outputs:	ES:DI = ThisCDS
  9293                                  ;		carry Set => network
  9294                                  ;		carry Clear => local
  9295                                  ;   Registers modified: none.
  9296                                  ;----------------------------------------------------------------------------
  9297                                  
  9298                                  TestNet:
  9299                                  	;LES	DI,[CS:THISCDS]
  9300                                  
  9301                                  	; 16/05/2019 - Retro DOS v4.0
  9302 00001229 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9303 0000122E 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9304 00001233 83FFFF                  	CMP	DI,-1
  9305 00001236 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9306                                  	;;test	word [es:di+43h],8000h
  9307                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9308                                  	;test	byte [es:di+44h],80h
  9309 00001238 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9310 0000123D 7501                    	JNZ	short CMCRet		; jump has carry clear
  9311 0000123F C3                      	retn				; carry is clear
  9312                                  CMCRet: 
  9313 00001240 F5                      	CMC
  9314 00001241 C3                      	retn
  9315                                  
  9316                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9317                                  ;----------------------------------------------------------------------------
  9318                                  ;
  9319                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9320                                  ;	network file.
  9321                                  ;
  9322                                  ;   Inputs:	ES:DI point to SFT
  9323                                  ;   Outputs:	Zero set if not network sft
  9324                                  ;		zero reset otherwise
  9325                                  ;		Carry CLEAR!!!
  9326                                  ;   Registers modified: none.
  9327                                  ;----------------------------------------------------------------------------
  9328                                  
  9329                                  IsSFTNet:
  9330                                  	;;test	word [es:di+5],8000h
  9331                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9332                                  	; 16/05/2019 
  9333                                  	;test	byte [es:di+6],80h
  9334 00001242 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9335 00001247 C3                      	retn
  9336                                  
  9337                                  ;Break	<FastInit - Initialize FastTable entries >
  9338                                  ;----------------------------------------------------------------------------
  9339                                  ;   DOS 4.00   2/9/87
  9340                                  ;   FastInit  - initialize the FASTXXX routine entry
  9341                                  ;		  in the FastTable
  9342                                  ;
  9343                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9344                                  ;		DS:SI = address of FASTXXX routine entry
  9345                                  ;		   SI = -1 for query only
  9346                                  ;   Outputs:	Carry flag clear, if success
  9347                                  ;		Carry flag set,   if failure
  9348                                  ;
  9349                                  ;
  9350                                  ;----------------------------------------------------------------------------
  9351                                  
  9352                                  ;Procedure FastInit,NEAR
  9353                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9354                                  
  9355                                  ;	; MSDOS 3.3
  9356                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9357                                  ;FastInit:
  9358                                  ;	mov	di,FastTable ; FastOpenTable
  9359                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9360                                  ;	mov	bx,cs			; get DOS segment
  9361                                  ;	cmp	ax,bx			; first time installed ?	
  9362                                  ;	je	short ok_install	; yes
  9363                                  ;	stc				; set carry
  9364                                  ;	retn				; (cf=1 means) already installed !
  9365                                  ;
  9366                                  ;ok_install:
  9367                                  ;	mov	bx,FastTable ; FastOpenTable
  9368                                  ;	mov	cx,ds
  9369                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9370                                  ;	mov	[cs:bx+4],cx
  9371                                  ;	mov	[cs:bx+2],si
  9372                                  ;	retn
  9373                                  
  9374                                  ; 16/05/2019 - Retro DOS v4.0
  9375                                  
  9376                                  FastInit:
  9377                                  	; MSDOS 6.0
  9378                                  	;hkn; set up es to dosdataseg.
  9379 00001248 06                      	push	es
  9380                                  	;getdseg <es>			; es -> dosdata
  9381 00001249 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9382                                  
  9383                                  	;hkn; FastTable is in DOSDATA
  9384 0000124E BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9385 00001251 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9386 00001252 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9387 00001254 D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9388 00001256 D1E3                    	SHL	BX,1			;AN000;FO.
  9389 00001258 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9390 0000125A 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9391                                  fcheck: 				;AN000;
  9392 0000125E 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9393 00001260 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9394 00001262 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9395 00001264 09C0                    	OR	AX,AX			;AN000;FO.;
  9396                                  	;JZ	short ok_install	;AN000;FO.;
  9397                                  	;STC				;AN000;FO.;; already installed !
  9398                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9399                                  	; 14/01/2024
  9400 00001266 F9                      	stc
  9401 00001267 7517                    	jnz	short FSret
  9402                                  ok_install:				;AN000;
  9403 00001269 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9404 0000126C 7412                    	JZ	short FSret		;AN000;FO.; yes
  9405 0000126E 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9406 00001270 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9407 00001274 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9408                                  
  9409                                  ;hkn; FastFlg moved to DOSDATA
  9410 00001277 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9411 0000127A 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9412                                  	;or	byte [es:di],80h
  9413 0000127C 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9414                                  FSret:					;AN000;
  9415 00001280 07                      	pop	es
  9416 00001281 C3                      	retn				;AN000;FO.
  9417                                  
  9418                                  ;EndProc FastInit
  9419                                  
  9420                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9421                                  ;----------------------------------------------------------------------------
  9422                                  ;   DOS 3.3   6/10/86
  9423                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9424                                  ;
  9425                                  ;   Inputs:	None
  9426                                  ;   Outputs:	AX = -1 and carry flag set
  9427                                  ;
  9428                                  ;   Registers modified: none.
  9429                                  ;----------------------------------------------------------------------------
  9430                                  
  9431                                  FastRet:
  9432                                  	;mov	ax,-1
  9433                                  	;stc
  9434                                  	;retf
  9435 00001282 F9                      	STC
  9436 00001283 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9437 00001285 CB                      	RETF
  9438                                  
  9439                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9440                                  ;----------------------------------------------------------------------------
  9441                                  ;   DOS 3.3   6/10/86
  9442                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9443                                  ;
  9444                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9445                                  ;   Outputs:	same output as $OPEN
  9446                                  ;
  9447                                  ;----------------------------------------------------------------------------
  9448                                  
  9449                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9450                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9451                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9452                                  
  9453                                  NLS_OPEN:
  9454                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9455                                  ;	MOV	BYTE [CPSWFLAG],0
  9456                                  ;	PUSH	BX		 ; save current state
  9457                                  
  9458 00001286 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9459 00001288 E8E15A                  	call	_$OPEN
  9460                                  
  9461                                  ;	POP	BX		 ; restore current state
  9462                                  ;	MOV	[CPSWFLAG],BL
  9463                                  
  9464 0000128B C3                      	RETN
  9465                                  
  9466                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9467                                  ;----------------------------------------------------------------------------
  9468                                  ;   DOS 3.3   6/10/86
  9469                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9470                                  ;
  9471                                  ;   Inputs:	BP = open mode
  9472                                  ;   Outputs:	same output as $LSEEK
  9473                                  ;
  9474                                  ;----------------------------------------------------------------------------
  9475                                  
  9476                                  ; 16/05/2019 - Retro DOS v4.0
  9477                                  
  9478                                  NLS_LSEEK:
  9479 0000128C 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9480 00001291 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9481 00001296 E81000                  	CALL	Fake_User_Stack
  9482 00001299 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9483 0000129B E87B54                  	call	_$LSEEK
  9484                                  NLS_SEEK_RET:	; 26/06/2024
  9485 0000129E 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9486 000012A3 368F06[8405]            	POP	word [SS:USER_SP]
  9487 000012A8 C3                      	RETN
  9488                                  
  9489                                  ;Break	<Fake_User_Stack - save user stack>
  9490                                  ;----------------------------------------------------------------------------
  9491                                  ;   DOS 3.3   6/10/86
  9492                                  ;   Fake_User_Stack - save user stack pointer
  9493                                  ;
  9494                                  ;----------------------------------------------------------------------------
  9495                                  
  9496                                  Fake_User_Stack:
  9497 000012A9 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9498 000012AD 36A3[8405]              	MOV	[SS:USER_SP],AX
  9499 000012B1 8CD0                    	MOV	AX,SS
  9500 000012B3 36A3[8605]              	MOV	[SS:USER_SS],AX
  9501 000012B7 C3                      	RETN
  9502                                  
  9503                                  ;Break	<GetDevList - get device header list pointer>
  9504                                  ;----------------------------------------------------------------------------
  9505                                  ;   DOS 3.3   7/25/86
  9506                                  ;   GetDevList - get device header list pointer
  9507                                  ;
  9508                                  ;   Output: AX:BX points to the device header list
  9509                                  ;----------------------------------------------------------------------------
  9510                                  
  9511                                  GetDevList:
  9512                                  	; 16/05/2019 - Retro DOS v4.0
  9513 000012B8 BE[280D]                	MOV	SI,SysInitTable
  9514 000012BB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9515 000012C0 C534                    	LDS	SI,[SI]
  9516                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9517 000012C2 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9518                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9519 000012C5 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9520 000012C8 C3                      	RETN
  9521                                  
  9522                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9523                                  ;----------------------------------------------------------------------------
  9524                                  ;   DOS 3.3   7/25/86
  9525                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9526                                  ;
  9527                                  ;   Inputs:	BP = function code 0CH
  9528                                  ;   Outputs:	same output as generic $IOCTL
  9529                                  ;
  9530                                  ;----------------------------------------------------------------------------
  9531                                  
  9532                                  NLS_IOCTL:
  9533                                  	; 16/05/2019 - Retro DOS v4.0
  9534 000012C9 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9535 000012CE 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9536 000012D3 E8D3FF                  	CALL	Fake_User_Stack
  9537 000012D6 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9538 000012D8 E8290F                  	call	_$IOCTL
  9539                                  	;POP	word [SS:USER_SS] ; restore user stack
  9540                                  	;POP	word [SS:USER_SP]
  9541                                  	;RETN
  9542                                  	; 26/06/2024 (PCDOS 7.1 IBMDOS.COM)
  9543 000012DB EBC1                    	jmp	short NLS_SEEK_RET
  9544                                  
  9545                                  
  9546                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9547                                  ;----------------------------------------------------------------------------
  9548                                  ;   DOS 3.3   7/25/86
  9549                                  ;   NLS_GETEXT	-
  9550                                  ;
  9551                                  ;   Inputs:	none
  9552                                  ;   Outputs:	AX = extended error
  9553                                  ;
  9554                                  ;----------------------------------------------------------------------------
  9555                                  
  9556                                  NLS_GETEXT:
  9557                                  	; 16/05/2019 - Retro DOS v4.0
  9558 000012DD 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9559                                  	; 23/09/2023
  9560                                  MSG_RETRIEVAL:
  9561 000012E1 C3                      	RETN
  9562                                  
  9563                                  ; 29/04/2019 - Retro DOS v4.0
  9564                                  
  9565                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9566                                  
  9567                                  ;----------------------------------------------------------------------------
  9568                                  ;   DOS 4.00
  9569                                  ;
  9570                                  ;   Inputs:	DL=0 get extended error message addr
  9571                                  ;		  =1 set extended error message addr
  9572                                  ;		  =2 get parser error message addr
  9573                                  ;		  =3 set parser error message addr
  9574                                  ;		  =4 get critical error message addr
  9575                                  ;		  =5 set critical error message addr
  9576                                  ;		  =6 get file system error message addr
  9577                                  ;		  =7 set file system error message addr
  9578                                  ;		  =8 get address for code reduction
  9579                                  ;		  =9 set address for code reduction
  9580                                  ;   Function:	get/set message address
  9581                                  ;   Outputs:	ES:DI points to addr when get
  9582                                  ;----------------------------------------------------------------------------
  9583                                  
  9584                                  ;Procedure MSG_RETRIEVAL,NEAR
  9585                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9586                                  
  9587                                  ; 23/09/2023
  9588                                  ;MSG_RETRIEVAL:
  9589                                  
  9590                                  ;;	NOTE:  This function lives in command.com resident code now.
  9591                                  ;;	If the int 2F ever gets this far, we'll return registers
  9592                                  ;;	unchanged, which produces the same result as before, if
  9593                                  ;;	command.com wasn't present (and therefore no messages available).
  9594                                  ;;
  9595                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9596                                  ;;	No_Op zeroes AL.
  9597                                  ;;
  9598                                  ;;;hkn; set up ds to point to DOSDATA
  9599                                  ;;	push	ds
  9600                                  ;;	getdseg	<ds>			; ds -> dosdata
  9601                                  ;;
  9602                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9603                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9604                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9605                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9606                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9607                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9608                                  ;;	DEC	AL		    ;AN000;;MS.
  9609                                  ;;toget:				    ;AN000;
  9610                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9611                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9612                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9613                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9614                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9615                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9616                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9617                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9618                                  ;;getget: 				     ;AN000;
  9619                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9620                                  ;;MSGret: 				     ;AN000;
  9621                                  ;;	POP	SI			     ;AN000;;MS.
  9622                                  ;;	POP	AX			     ;AN000;;MS.
  9623                                  ;;
  9624                                  ;;	pop	ds
  9625                                  
  9626                                  ;	return				     ;AN000;;MS. exit
  9627                                  
  9628                                  ; 23/09/2023
  9629                                  ;	retn	; 29/04/2019
  9630                                  
  9631                                  ;============================================================================
  9632                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9633                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9634                                  ;============================================================================
  9635                                  ; 20/07/2018 - Retro DOS v3.0
  9636                                  
  9637                                  ;	; MSDOS 3.3
  9638                                  ;	; 08/08/2018 - Retro DOS v3.0
  9639                                  ;ECritMEM:
  9640                                  ;ECritSFT:
  9641                                  ;	;
  9642                                  ;ECritDisk:
  9643                                  ;	retn
  9644                                  ;	;push	ax
  9645                                  ;	
  9646                                  ;	mov	ax,8001h
  9647                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9648                                  ;			; AL = critical section number (00h-0Fh)
  9649                                  ;	pop	ax
  9650                                  ;	retn
  9651                                  ;
  9652                                  ;	; MSDOS 3.3
  9653                                  ;	; 08/08/2018 - Retro DOS v3.0
  9654                                  ;LCritMEM:
  9655                                  ;LCritSFT:
  9656                                  ;	;
  9657                                  ;LCritDisk:
  9658                                  ;	retn
  9659                                  ;	;push	ax
  9660                                  ;	
  9661                                  ;	mov	ax,8101h
  9662                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9663                                  ;			; AL = critical section number (00h-0Fh)
  9664                                  ;	pop	ax
  9665                                  ;	retn
  9666                                  ;
  9667                                  ;ECritDevice:
  9668                                  ;	retn
  9669                                  ;	;push	ax
  9670                                  ;	
  9671                                  ;	mov	ax,8002h
  9672                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9673                                  ;			; AL = critical section number (00h-0Fh)
  9674                                  ;	pop	ax
  9675                                  ;	retn
  9676                                  ;
  9677                                  ;LCritDevice:
  9678                                  ;	retn
  9679                                  ;	;push	ax
  9680                                  ;	
  9681                                  ;	mov	ax,8102h
  9682                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9683                                  ;			; AL = critical section number (00h-0Fh)
  9684                                  ;	pop	ax
  9685                                  ;	retn
  9686                                  
  9687                                  ;============================================================================
  9688                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9689                                  ;============================================================================
  9690                                  ; 12/05/2019 - Retro DOS v4.0
  9691                                  
  9692                                  ; Critical Section Routines
  9693                                  
  9694                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9695                                  
  9696                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9697                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9698                                  
  9699                                  ; ---------------------------------------------------------------------------
  9700                                  ; Each handler must leave everything untouched; including flags!
  9701                                  ;
  9702                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9703                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9704                                  ; ---------------------------------------------------------------------------
  9705                                  
  9706                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9707                                  ; ---------------------------------------------------------------------------
  9708                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9709                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9710                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9711                                  ; ---------------------------------------------------------------------------
  9712                                  
  9713                                  ;%macro POPFF 0
  9714                                  ;	jmp	$+3
  9715                                  ;	iret
  9716                                  ;	push	cs
  9717                                  ;	call	$-2
  9718                                  ;%endmacro
  9719                                  
  9720                                  ; ---------------------------
  9721                                  
  9722                                  ;Procedure  ECritDisk,NEAR
  9723                                  	;public  ECritMEM
  9724                                  	;public  ECritSFT
  9725                                  ECritMEM:
  9726                                  ECritSFT:
  9727                                  ;
  9728                                  ECritDisk:
  9729                                  
  9730                                  ;SR; Check if critical section is to be entered
  9731                                  
  9732 000012E2 9C                      	pushf
  9733 000012E3 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9734 000012E9 740D                    	jz	short ECritDisk_2
  9735                                  
  9736                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9737                                  ;	;popff  ; * (macro)
  9738                                  ;	jmp	short ECritDisk_1 ; *
  9739                                  ;
  9740                                  ;ECritDisk_iret: ; *
  9741                                  ;	iret ; *
  9742                                  
  9743                                  	; 16/12/2022
  9744                                  	; 13/11/2022
  9745                                  	;jmp	short ECritDisk_1
  9746                                  	; 06/11/2022
  9747                                  ;ECritDisk_iret:
  9748                                  ;	iret	
  9749                                  
  9750                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9751                                  ECritDisk_1:
  9752 000012EB 0E                      	push	cs ; *
  9753 000012EC E80800                  	call	ECritDisk_iret ; *		
  9754                                  	
  9755                                  ECritDisk_0:
  9756 000012EF 50                      	PUSH    AX
  9757                                  	;MOV	AX,8000h+critDisk
  9758                                  	;INT	int_IBM
  9759 000012F0 B80180                  	mov	ax,8001h
  9760 000012F3 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9761                                  			; AL = critical section number (00h-0Fh)
  9762 000012F5 58                      	POP     AX
  9763 000012F6 C3                      	retn
  9764                                  
  9765                                  	; 16/12/2022
  9766                                  	; 13/11/2022
  9767                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9768                                  LCritDisk_iret: 
  9769 000012F7 CF                      	iret
  9770                                  
  9771                                  ECritDisk_2:
  9772                                  	;;popff ; *
  9773                                  	;;retn
  9774                                  ;	jmp	short ECritDisk_3 ; *
  9775                                  ;ECritDisk_iret2: ; *
  9776                                  ;	iret
  9777                                  	
  9778                                  	; 16/12/2022
  9779                                  	; 13/11/2022
  9780                                  	;jmp	short ECritDisk_3
  9781                                  ;ECritDisk_iret2:
  9782                                  	;iret
  9783                                  
  9784                                  ECritDisk_3:
  9785 000012F8 0E                      	push    cs ; *
  9786                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9787                                  	;call	ECritDisk_iret2 ; *
  9788                                  	;retn
  9789                                  	; 16/12/2022
  9790 000012F9 E8FBFF                  	call	ECritDisk_iret
  9791 000012FC C3                      	retn
  9792                                  
  9793                                  ;EndProc ECritDisk
  9794                                  
  9795                                  ; ---------------------------
  9796                                  
  9797                                  ;Procedure   LCritDisk,NEAR
  9798                                  	;public  LCritMEM
  9799                                  	;public  LCritSFT
  9800                                  LCritMEM:
  9801                                  LCritSFT:
  9802                                  ;
  9803                                  LCritDisk:
  9804                                  
  9805                                  ;SR; Check if critical section is to be entered
  9806                                  
  9807 000012FD 9C                      	pushf
  9808 000012FE 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9809 00001304 740C                    	jz	short LCritDisk_2
  9810                                  	;popff  ; * (macro)
  9811                                  ;	jmp	short LCritDisk_1 ; *
  9812                                  ;
  9813                                  ;LCritDisk_iret: ; *
  9814                                  ;	iret ; *
  9815                                  
  9816                                  	; 16/12/2022
  9817                                  	; 13/11/2022
  9818                                  	;jmp	short LCritDisk_1
  9819                                  ;LCritDisk_iret:
  9820                                  	;iret
  9821                                  
  9822                                  LCritDisk_1:
  9823 00001306 0E                      	push	cs ; *
  9824 00001307 E8EDFF                  	call	LCritDisk_iret ; *		
  9825                                  	
  9826                                  LCritDisk_0:
  9827 0000130A 50                      	PUSH	AX
  9828                                  	;MOV	AX,8100h+critDisk
  9829                                  	;INT	int_IBM
  9830 0000130B B80181                  	mov	ax,8101h
  9831 0000130E CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9832                                  			; AL = critical section number (00h-0Fh)
  9833 00001310 58                      	POP	AX
  9834 00001311 C3                      	retn
  9835                                  
  9836                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9837                                  ;	iret
  9838                                  
  9839                                  LCritDisk_2:
  9840                                  	;;popff ; *
  9841                                  	;;retn
  9842                                  ;	jmp	short LCritDisk_3 ; *
  9843                                  ;LCritDisk_iret2: ; *
  9844                                  ;	iret
  9845                                  
  9846                                  	; 16/12/2022
  9847                                  	; 13/11/2022
  9848                                  	;jmp	short LCritDisk_3
  9849                                  ;LCritDisk_iret2:
  9850                                  	;iret
  9851                                  
  9852                                  LCritDisk_3:
  9853 00001312 0E                      	push    cs ; *
  9854                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9855                                  	;call	LCritDisk_iret2 ; *
  9856                                  	;retn
  9857                                  	; 16/12/2022
  9858 00001313 E8E1FF                  	call	LCritDisk_iret
  9859 00001316 C3                      	retn
  9860                                  
  9861                                  ;EndProc LCritDisk
  9862                                  
  9863                                  ; ---------------------------
  9864                                  
  9865                                  ;Procedure   ECritDevice,NEAR
  9866                                  
  9867                                  ECritDevice:
  9868                                  
  9869                                  ;SR; Check if critical section is to be entered
  9870                                  
  9871 00001317 9C                      	pushf
  9872 00001318 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9873 0000131E 740D                    	jz	short ECritDevice_2
  9874                                  	;popff  ; * (macro)
  9875                                  ;	jmp	short ECritDevice_1 ; *
  9876                                  ;
  9877                                  ;ECritDevice_iret: ; *
  9878                                  ;	iret ; *
  9879                                  
  9880                                  	; 16/12/2022	
  9881                                  	; 13/11/2022
  9882                                  	;jmp	short ECritDevice_1
  9883                                  ;ECritDevice_iret:
  9884                                  	;iret
  9885                                  
  9886                                  ECritDevice_1:
  9887 00001320 0E                      	push	cs ; *
  9888 00001321 E80800                  	call	ECritDevice_iret ; *		
  9889                                  	
  9890                                  ECritDevice_0:
  9891 00001324 50                      	PUSH	AX
  9892                                  	;MOV	AX,8000h+critDevice
  9893                                  	;INT	int_IBM
  9894 00001325 B80280                  	mov	ax,8002h
  9895 00001328 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9896                                  			; AL = critical section number (00h-0Fh)
  9897 0000132A 58                      	POP     AX
  9898 0000132B C3                      	retn
  9899                                  
  9900                                  	; 16/12/2022
  9901                                  	; 06/12/2022
  9902                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9903                                  LCritDevice_iret: 
  9904 0000132C CF                      	iret
  9905                                  
  9906                                  ECritDevice_2:
  9907                                  	;;popff ; *
  9908                                  	;;retn
  9909                                  ;	jmp	short ECritDevice_3 ; *
  9910                                  ;ECritDevice_iret2: ; *
  9911                                  ;	iret
  9912                                  
  9913                                  	; 16/12/2022
  9914                                  	; 13/11/2022
  9915                                  	;jmp	short ECritDevice_3
  9916                                  ;ECritDevice_iret2:
  9917                                  	;iret
  9918                                  
  9919                                  ECritDevice_3:
  9920 0000132D 0E                      	push    cs ; *
  9921                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9922                                  	;call	ECritDevice_iret2 ; *
  9923                                  	;retn
  9924                                  	; 16/12/2022
  9925 0000132E E8FBFF                  	call	ECritDevice_iret
  9926 00001331 C3                      	retn
  9927                                  
  9928                                  ;EndProc ECritDevice
  9929                                  
  9930                                  ; ---------------------------
  9931                                  
  9932                                  ;Procedure   LCritDevice,NEAR
  9933                                  
  9934                                  LCritDevice:
  9935                                  
  9936                                  ;SR; Check if critical section is to be entered
  9937                                  
  9938 00001332 9C                      	pushf
  9939 00001333 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9940 00001339 740C                    	jz	short LCritDevice_2
  9941                                  	;popff  ; * (macro)
  9942                                  ;	jmp	short LCritDevice_1 ; *
  9943                                  ;
  9944                                  ;LCritDevice_iret: ; *
  9945                                  ;	iret ; *
  9946                                  
  9947                                  	; 16/12/2022
  9948                                  	; 13/11/2022
  9949                                  	;jmp	short LCritDevice_1
  9950                                  ;LCritDevice_iret:
  9951                                  	;iret
  9952                                  
  9953                                  LCritDevice_1:
  9954 0000133B 0E                      	push	cs ; *
  9955 0000133C E8EDFF                  	call	LCritDevice_iret ; *		
  9956                                  	
  9957                                  LCritDevice_0:
  9958 0000133F 50                      	PUSH	AX
  9959                                  	;MOV	AX,8100h+critDevice
  9960                                  	;INT	int_IBM
  9961 00001340 B80281                  	mov	ax,8102h
  9962 00001343 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9963                                  			; AL = critical section number (00h-0Fh)
  9964 00001345 58                      	POP     AX
  9965 00001346 C3                      	retn
  9966                                  
  9967                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9968                                  ;	iret
  9969                                  
  9970                                  LCritDevice_2:
  9971                                  	;;popff ; *
  9972                                  	;;retn
  9973                                  ;	jmp	short LCritDevice_3 ; *
  9974                                  ;LCritDevice_iret2: ; *
  9975                                  ;	iret
  9976                                  
  9977                                  	; 16/12/2022
  9978                                  	; 13/11/2022
  9979                                  	;jmp	short LCritDevice_3
  9980                                  ;LCritDevice_iret2:
  9981                                  	;iret
  9982                                  
  9983                                  LCritDevice_3:
  9984 00001347 0E                      	push    cs ; *
  9985                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9986                                  	;call	LCritDevice_iret2 ; *
  9987                                  	;retn
  9988                                  	; 16/12/2022
  9989 00001348 E8E1FF                  	call	LCritDevice_iret
  9990 0000134B C3                      	retn
  9991                                  
  9992                                  ;EndProc LCritDevice
  9993                                  
  9994                                  ;============================================================================
  9995                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9996                                  ;============================================================================
  9997                                  ; 20/07/2018 - Retro DOS v3.0
  9998                                  
  9999                                  ;============================================================================
 10000                                  ; STDIO.ASM - (MSDOS 2.0)
 10001                                  ;============================================================================
 10002                                  
 10003                                  ;
 10004                                  ; Standard device IO for MSDOS (first 12 function calls)
 10005                                  ;
 10006                                  
 10007                                  ;.xlist
 10008                                  ;.xcref
 10009                                  ;INCLUDE STDSW.ASM
 10010                                  ;INCLUDE DOSSEG.ASM
 10011                                  ;.cref
 10012                                  ;.list
 10013                                  
 10014                                  ;TITLE   STDIO - device IO for MSDOS
 10015                                  ;NAME    STDIO
 10016                                  
 10017                                  ;INCLUDE IO.ASM
 10018                                  
 10019                                  ; ---------------------------------------------------------------------------
 10020                                  ;
 10021                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10022                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10023                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10024                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10025                                  ;			    to restore MSDOS 2.0 device IO source code 
 10026                                  ;
 10027                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
 10028                                  	
 10029                                  ;============================================================================
 10030                                  ; STDIO.ASM - (MSDOS 2.0)
 10031                                  ;============================================================================
 10032                                  
 10033                                  ;
 10034                                  ; Standard device IO for MSDOS (first 12 function calls)
 10035                                  ;
 10036                                  
 10037                                  ;.xlist
 10038                                  ;.xcref
 10039                                  ;INCLUDE STDSW.ASM
 10040                                  ;INCLUDE DOSSEG.ASM
 10041                                  ;.cref
 10042                                  ;.list
 10043                                  
 10044                                  ;TITLE   STDIO - device IO for MSDOS
 10045                                  ;NAME    STDIO
 10046                                  
 10047                                  ;INCLUDE IO.ASM
 10048                                  
 10049                                  ; ---------------------------------------------------------------------------
 10050                                  ;
 10051                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10052                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10053                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10054                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10055                                  ;			    to restore MSDOS 2.0 device IO source code 
 10056                                  ;
 10057                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10058                                  ;
 10059                                  ;============================================================================
 10060                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10061                                  ;============================================================================
 10062                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10063                                  
 10064                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10065                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10066                                  
 10067                                  ;============================================================================
 10068                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10069                                  ;============================================================================
 10070                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10071                                  
 10072                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10073                                  
 10074                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10075                                  ;
 10076                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10077                                  ;	NAME	IBMCPMIO
 10078                                  
 10079                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10080                                  ;
 10081                                  ;	$Std_Con_Input_No_Echo
 10082                                  ;	$Std_Con_String_Output
 10083                                  ;	$Std_Con_String_Input
 10084                                  ;	$RawConIO
 10085                                  ;	$RawConInput
 10086                                  ;	RAWOUT
 10087                                  ;	RAWOUT2
 10088                                  ;
 10089                                  
 10090                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10091                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10092                                  ; references to be SS or CS relative which is desired.
 10093                                  
 10094                                  ; ---------------------------------------------------------------------------
 10095                                  
 10096                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10097                                  ;	NAME	CPMIO2
 10098                                  
 10099                                  ;
 10100                                  ;	Microsoft Confidential
 10101                                  ;	Copyright (C) Microsoft Corporation 1991
 10102                                  ;	All Rights Reserved.
 10103                                  ;
 10104                                  
 10105                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10106                                  ;
 10107                                  ;	$Std_Con_Input
 10108                                  ;	$Std_Con_Output
 10109                                  ;	OUTT
 10110                                  ;	TAB
 10111                                  ;	BUFOUT
 10112                                  ;	$Std_Aux_Input
 10113                                  ;	$Std_Aux_Output
 10114                                  ;	$Std_Printer_Output
 10115                                  ;	$Std_Con_Input_Status
 10116                                  ;	$Std_Con_Input_Flush
 10117                                  ;
 10118                                  ;	Revision History:
 10119                                  ;
 10120                                  ;	  AN000	 version 4.00 - Jan. 1988
 10121                                  
 10122                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10123                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10124                                  ; references to be SS or CS relative which is desired.
 10125                                  
 10126                                  ;DOSCODE SEGMENT
 10127                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10128                                  
 10129                                  
 10130                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10131                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10132                                  ;hkn;	not valid. 
 10133                                  
 10134                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10135                                  ; 08/11/2022
 10136                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10137                                  
 10138                                  ;
 10139                                  ;----------------------------------------------------------------------------
 10140                                  ;
 10141                                  ; Procedure : $Std_Con_Input_No_Echo
 10142                                  ;
 10143                                  ;----------------------------------------------------------------------------
 10144                                  ;
 10145                                  
 10146                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10147                                  
 10148                                  ; Inputs:
 10149                                  ;	None
 10150                                  ; Function:
 10151                                  ;	Input character from console, no echo
 10152                                  ; Returns:
 10153                                  ;	AL = character
 10154                                  
 10155 0000134C 1E                      	push	ds
 10156 0000134D 56                      	push	si
 10157                                  INTEST:
 10158 0000134E E8D33C                  	call	STATCHK
 10159 00001351 753A                    	jnz	short GET ; 08/09/2018
 10160                                  ;*************************************************************************
 10161                                  ;hkn; SS override
 10162 00001353 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10163 00001359 7505                    	jnz	short no_sys_wait
 10164 0000135B B405                    	mov	ah,5			; get input status with system wait
 10165 0000135D E80D30                  	call	IOFUNC
 10166                                  no_sys_wait:
 10167                                  ;**************************************************************************
 10168 00001360 B484                    	MOV	AH,84h
 10169 00001362 CD2A                    	INT	int_IBM	 ; int 2Ah
 10170                                  
 10171                                  ;;; 7/15/86  update the date in the idle loop
 10172                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10173                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10174                                  
 10175                                  ;hkn; SS override
 10176 00001364 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10177 0000136A 751A                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10178                                  
 10179 0000136C 50                      	PUSH	AX
 10180 0000136D 53                      	PUSH	BX			; following is tricky,
 10181 0000136E 51                      	PUSH	CX			; it may be called by critical handler
 10182 0000136F 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10183                                  					; other's READ or WRITE
 10184 00001370 1E                      	PUSH	DS			; save DS = SFT's segment
 10185                                  
 10186                                  ;hkn; READTIME must use ds = DOSDATA
 10187                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10188                                  
 10189 00001371 16                      	PUSH	SS ; 04/05/2019
 10190 00001372 1F                      	POP	DS
 10191                                  
 10192                                  	;MOV	AX,0			; therefore, we save DEVCALL
 10193                                  	; 26/06/2024
 10194 00001373 31C0                    	xor	ax,ax
 10195 00001375 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10196                                  	;invoke	READTIME		; readtime
 10197 00001378 E88FF7                  	call	READTIME
 10198 0000137B B80100                  	MOV	AX,1
 10199 0000137E E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10200                                  
 10201                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10202                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10203                                  ;	push	bx
 10204                                  ;	mov	bx,DATE_FLAG
 10205                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10206                                  ;	cmp	word [cs:bx],5872h
 10207                                  ;	jz	short FETCHI_TAG_chk_ok
 10208                                  ;	call	DOSINIT
 10209                                  ;FETCHI_TAG_chk_ok:
 10210                                  ;	pop	bx
 10211                                  
 10212 00001381 1F                      	POP	DS			; restore DS
 10213 00001382 5A                      	POP	DX
 10214 00001383 59                      	POP	CX
 10215 00001384 5B                      	POP	BX
 10216 00001385 58                      	POP	AX
 10217                                  NoUpdate:
 10218                                  
 10219                                  ;hkn; SS override
 10220 00001386 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10221                                  
 10222                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10223 0000138B EBC1                    	JMP	short INTEST
 10224                                  GET:
 10225 0000138D 30E4                    	XOR	AH,AH
 10226 0000138F E8DB2F                  	call	IOFUNC
 10227 00001392 5E                      	POP	SI
 10228 00001393 1F                      	POP	DS
 10229                                  ;;; 7/15/86
 10230                                  
 10231                                  ;hkn; SS override
 10232                                  	; MSDOS 6.0
 10233 00001394 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10234                                  	;
 10235 0000139A 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10236 0000139C 7505                    	JNZ	short noscan
 10237                                  
 10238                                  ;hkn; SS override
 10239                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10240                                  	; 20/06/2023
 10241 0000139E 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10242                                  noscan:
 10243 000013A3 C3                      	retn
 10244                                  ;
 10245                                  ;----------------------------------------------------------------------------
 10246                                  ;
 10247                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10248                                  ;
 10249                                  ;
 10250                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10251                                  ;	EXIT	none
 10252                                  ;	USES	ALL
 10253                                  ;
 10254                                  ;----------------------------------------------------------------------------
 10255                                  ;
 10256                                  
 10257                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10258                                  
 10259 000013A4 89D6                    	mov	si,dx
 10260                                  STRING_OUT1:	
 10261 000013A6 AC                      	lodsb
 10262 000013A7 3C24                    	cmp	al,'$'
 10263 000013A9 74F8                    	je	short noscan
 10264                                  NEXT_STR1:
 10265 000013AB E88702                  	call	OUTT
 10266 000013AE EBF6                    	jmp	short STRING_OUT1
 10267                                  
 10268                                  ;----------------------------------------------------------------------------
 10269                                  ;
 10270                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10271                                  ;
 10272                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10273                                  ;
 10274                                  ;	ENTRY	(ds:dx) = input buffer
 10275                                  ;	EXIT	none
 10276                                  ;	USES	ALL
 10277                                  ;
 10278                                  ;----------------------------------------------------------------------------
 10279                                  
 10280                                  	; 15/01/2024
 10281                                  
 10282                                  _$STD_CON_STRING_INPUT:		;System call 10
 10283                                  
 10284                                  	; 15/01/2024
 10285                                  	;mov	ax,ss
 10286                                  	;mov	es,ax
 10287 000013B0 16                      	push	ss
 10288 000013B1 07                      	pop	es
 10289                                  
 10290 000013B2 89D6                    	mov	si,dx
 10291 000013B4 30ED                    	xor	ch,ch
 10292 000013B6 AD                      	lodsw
 10293                                  
 10294                                  ;	(AL) = the buffer length
 10295                                  ;	(AH) = the template length
 10296                                  
 10297 000013B7 08C0                            or	al,al
 10298 000013B9 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10299 000013BB 88E3                    	mov	bl,ah		;Init template counter
 10300 000013BD 88EF                            mov	bh,ch		;Init template counter
 10301                                  
 10302                                  ;	(BL) = the number of bytes in the template
 10303                                  
 10304 000013BF 38D8                            cmp	al,bl
 10305 000013C1 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10306 000013C3 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10307 000013C6 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10308                                  
 10309                                  ; The number of chars in the template is >= the number of chars in buffer or
 10310                                  ; there is no CR at the end of the template. This is an inconsistant state
 10311                                  ; of affairs. Pretend that the template was empty:
 10312                                  ;
 10313                                  
 10314                                  NOEDIT:	
 10315 000013C8 88EB                    	mov	bl,ch		;Reset buffer
 10316                                  EDITON: 
 10317 000013CA 88C2                    	mov	dl,al
 10318 000013CC 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10319                                  
 10320                                  ;	Top level. We begin to read a line in.
 10321                                  
 10322                                  NEWLIN: 
 10323 000013CD 36A0[F901]              	mov	al,[SS:CARPOS]
 10324 000013D1 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10325                                  
 10326 000013D5 56                      	push	si
 10327 000013D6 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10328 000013D9 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10329 000013DE 88EF                    	mov	bh,ch		;No chars from template yet
 10330 000013E0 88EE                    	mov	dh,ch		;No chars to new line yet
 10331 000013E2 E867FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10332 000013E5 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10333 000013E7 7503                    	jnz	short GOTCH
 10334                                  
 10335                                  ;	This is the main loop of reading in a character and processing it.
 10336                                  ;
 10337                                  ;	(BH) = the index of the next byte in the template
 10338                                  ;	(BL) = the length of the template
 10339                                  ;	(DH) = the number of bytes in the buffer
 10340                                  ;	(DL) = the length of the buffer
 10341                                  
 10342                                  GETCH:
 10343 000013E9 E860FF                  	call	_$STD_CON_INPUT_NO_ECHO
 10344                                  GOTCH:
 10345                                  ;
 10346                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10347                                  ; input queue.
 10348                                  ;
 10349 000013EC 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10350 000013EE 74F9                    	jz	short GETCH
 10351                                  
 10352                                  ;	If the leading char is the function-key lead byte
 10353                                  
 10354                                  	;cmp	al,[SS:ESCCHAR]
 10355                                  
 10356                                  	; 04/05/2019 - Retro DOS v4.0
 10357                                  
 10358                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10359                                  
 10360 000013F0 2E3A06[140A]            	CMP	AL,[cs:ESCCHAR]
 10361 000013F5 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10362                                  
 10363                                  ;	Rubout and ^H are both destructive backspaces.
 10364                                  
 10365 000013F7 3C7F                            cmp	al,c_DEL ; 7FH
 10366                                          ;jz	short BACKSPJ
 10367                                          ; 15/01/2024
 10368 000013F9 7466                    	je	short BACKSP
 10369 000013FB 3C08                    	cmp	al,c_BS  ; 8
 10370                                          ;jz	short BACKSPJ
 10371                                          ; 15/01/2024
 10372 000013FD 7462                    	je	short BACKSP
 10373                                  
 10374                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10375                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10376                                  	;	   	after CMP and a CMP again!
 10377                                  	;		
 10378                                  	;		-It would be better if they use a 'JMP short' to 
 10379                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10380                                  	;		between them. Then, they would be able use a patch
 10381                                  	;		between 5271h and 5279h when if it will be required.
 10382                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10383                                  	;	
 10384                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10385                                  
 10386                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10387                                  	;
 10388                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10389                                  
 10390                                  ;DOSCODE:526D	cmp     al, 8
 10391                                  ;DOSCODE:526F	jz      short BACKSPJ
 10392                                  ;DOSCODE:5271	cmp     al, 17h
 10393                                  ;DOSCODE:5273	nop
 10394                                  ;DOSCODE:5274	nop
 10395                                  ;DOSCODE:5275	cmp     al, 15h
 10396                                  ;DOSCODE:5277	nop
 10397                                  ;DOSCODE:5278	nop
 10398                                  ;DOSCODE:5279	cmp     al, 0Dh
 10399                                  ;DOSCODE:527B	jz      short ENDLIN
 10400                                  ;DOSCODE:527D	cmp     al, 0Ah
 10401                                  ;DOSCODE:527F	jz      short PHYCRLF
 10402                                  	
 10403                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10404                                  	; DOSCODE:525Dh
 10405                                  
 10406                                  ; 16/12/2022
 10407                                  %if 0
 10408                                  	; MSDOS 6.0
 10409                                  ;	^W deletes backward once and then backs up until a letter is before the
 10410                                  ;	cursor
 10411                                  
 10412                                  	CMP     AL,"W"-"@" ; 17h
 10413                                  
 10414                                  ;	The removal of the comment characters before the jump statement will
 10415                                  ;	cause ^W to backup a word.
 10416                                  
 10417                                  ;***	JZ	short WordDel
 10418                                  	NOP
 10419                                  	NOP
 10420                                  
 10421                                  	CMP     AL,"U"-"@" ; 15h
 10422                                  
 10423                                  ;	The removal of the comment characters before the jump statement will
 10424                                  ;	cause ^U to clear a line.
 10425                                  
 10426                                  ;***	JZ	short LineDel
 10427                                  	NOP
 10428                                  	NOP
 10429                                  
 10430                                  %endif
 10431                                  
 10432                                  ;	CR terminates the line.
 10433                                  
 10434 000013FF 3C0D                            cmp	al,c_CR ; 0Dh
 10435 00001401 7430                            jz	short ENDLIN
 10436                                  
 10437                                  ;	LF goes to a new line and keeps on reading.
 10438                                  
 10439 00001403 3C0A                            cmp	al,c_LF ; 0Ah
 10440 00001405 7442                    	jz	short PHYCRLF
 10441                                  
 10442                                  ;	^X (or ESC) deletes the line and starts over
 10443                                  
 10444                                  	; MSDOS 3.3
 10445                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10446                                  	;jz	short KILNEW
 10447                                  
 10448                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10449                                  
 10450                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10451                                  
 10452 00001407 2E3A06[130A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10453 0000140C 7440                    	jz	short KILNEW
 10454                                  	
 10455                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10456                                  	;jz	short KILNEW
 10457                                  
 10458                                  ; Otherwise, we save the input character.
 10459                                  
 10460                                  SAVCH:	
 10461 0000140E 38D6                    	cmp	dh,dl
 10462 00001410 7317                    	jnb	short BUFFUL		; buffer is full.
 10463 00001412 AA                              stosb
 10464 00001413 FEC6                    	inc	dh                      ; increment count in buffer.
 10465 00001415 E8B102                  	call	BUFOUT			; Print control chars nicely
 10466                                  
 10467 00001418 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10468 0000141E 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10469 00001420 38DF                            cmp	bh,bl
 10470 00001422 73C5                            jnb	short GETCH		; no more characters in template
 10471 00001424 46                              inc	si                      ; Skip to next char in template
 10472 00001425 FEC7                            inc	bh                      ; remember position in template
 10473 00001427 EBC0                            jmp	short GETCH
 10474                                  
 10475                                  	; 15/01/2024
 10476                                  ;BACKSPJ: 
 10477                                  	;jmp	short BACKSP
 10478                                  
 10479                                  BUFFUL: 
 10480 00001429 B007                    	mov	al, 7			; Bell to signal full buffer
 10481 0000142B E80702                  	call	OUTT
 10482 0000142E EBB9                    	jmp	short GETCH
 10483                                  
 10484                                  ESCAPE: 
 10485                                  	;transfer OEMFunctionKey
 10486 00001430 E90CF6                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10487                                  
 10488                                  ENDLIN:
 10489 00001433 AA                              stosb				; Put the CR in the buffer
 10490 00001434 E8FE01                  	call	OUTT                    ; Echo it
 10491 00001437 5F                              pop	di                      ; Get start of user buffer
 10492 00001438 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10493 0000143B FEC6                            inc	dh			; DH is length including CR
 10494                                  
 10495                                  COPYNEW:
 10496                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10497                                  	;mov	bp, es
 10498                                  	;mov	bx, ds
 10499                                  	;mov	es, bx
 10500                                  	;mov	ds, bp
 10501                                  	;mov	si, INBUF
 10502                                  	;mov	cl, dh
 10503                                  	;rep	movsb
 10504                                  	;retn
 10505                                  
 10506                                  	; CPMIO.ASM (MSDOS 6.0)
 10507                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10508                                  	;SAVE	<DS,ES>
 10509 0000143D 1E                      	PUSH	DS
 10510 0000143E 06                      	PUSH	ES
 10511                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10512 0000143F 1F                      	POP	DS
 10513 00001440 07                      	POP	ES
 10514                                  
 10515                                  ;;hkn; INBUF is in DOSDATA
 10516 00001441 BE[FB01]                        MOV     SI,INBUF
 10517 00001444 88F1                            MOV     CL,DH                   ; set up count
 10518 00001446 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10519                                  OLDBAK_RETN:
 10520 00001448 C3                              RETN
 10521                                  
 10522                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10523                                  
 10524                                  PHYCRLF:
 10525 00001449 E81B01                  	CALL	CRLF
 10526 0000144C EB9B                            JMP	short GETCH
 10527                                  
 10528                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10529                                  
 10530                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10531                                  
 10532                                  	; Note: Following routines were not used in IBMDOS.COM
 10533                                  	;	-CRTL+W, CRTL+U is not activated-
 10534                                  	;	but they were in the kernel code!?)
 10535                                  
 10536                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10537                                  	; DOSCODE:52B6h
 10538                                  
 10539                                  ;;;;;;;;
 10540                                  
 10541                                  ; 16/12/2022
 10542                                  %if 0
 10543                                  ;
 10544                                  ; Delete the previous line
 10545                                  ;
 10546                                  LineDel:
 10547                                  	OR      DH,DH
 10548                                  	JZ	short GETCH	 ; 06/12/2022
 10549                                  	Call    BackSpace
 10550                                  	JMP	short LineDel
 10551                                  
 10552                                  %endif
 10553                                  
 10554                                  ;
 10555                                  ; delete the previous word.
 10556                                  ;
 10557                                  WordDel:
 10558                                  WordLoop:
 10559                                  ;	Call    BackSpace               ; backspace the one spot
 10560                                  ;	OR      DH,DH
 10561                                  ;	JZ	short GetChj
 10562                                  ;	MOV     AL,[ES:DI-1]
 10563                                  ;	cmp     al,'0'
 10564                                  ;	jb	short GetChj
 10565                                  ;	cmp     al,'9'
 10566                                  ;	jbe	short WordLoop
 10567                                  ;	OR      AL,20h
 10568                                  ;	CMP     AL,'a'
 10569                                  ;	JB	short GetChj
 10570                                  ;	CMP     AL,'z'
 10571                                  ;	JBE	short WordLoop
 10572                                  ;GetChj: 
 10573                                  ;	JMP	GETCH
 10574                                  
 10575                                  ; 16/12/2022
 10576                                  %if 0
 10577                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10578                                  	; (Worddel is not called or jumped from anywhere!)
 10579                                  WordDel:
 10580                                  WordLoop:
 10581                                  	Call    BackSpace               ; backspace the one spot
 10582                                  	OR      DH,DH
 10583                                  	JZ	short GetChj
 10584                                  	MOV     AL,[ES:DI-1]
 10585                                  	cmp     al,'0'
 10586                                  	jb	short GetChj
 10587                                  	cmp     al,'9'
 10588                                  	jbe	short WordLoop
 10589                                  	OR      AL,20h
 10590                                  	CMP     AL,'a'
 10591                                  	JB	short GetChj
 10592                                  	CMP     AL,'z'
 10593                                  	JBE	short WordLoop
 10594                                  GetChj: 
 10595                                  	JMP	GETCH
 10596                                  
 10597                                  %endif
 10598                                  
 10599                                  ;;;;;;;;
 10600                                  
 10601                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10602                                  
 10603                                  ; The user wants to throw away what he's typed in and wants to start over.
 10604                                  ; We print the backslash and then go to the next line and tab to the correct
 10605                                  ; spot to begin the buffered input.
 10606                                  
 10607                                  KILNEW:
 10608 0000144E B05C                            mov	al,'\'
 10609 00001450 E8E201                          call	OUTT            ;Print the CANCEL indicator
 10610 00001453 5E                              pop	si		;Remember start of edit buffer
 10611                                  PUTNEW:
 10612 00001454 E81001                  	call	CRLF            ;Go to next line on screen
 10613 00001457 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10614 0000145B E84B02                  	call	TAB             ;Tab over
 10615 0000145E E96CFF                          JMP     NEWLIN		;Start over again
 10616                                  
 10617                                  ;	Destructively back up one character position
 10618                                  
 10619                                  BACKSP:
 10620                                  	; 09/09/2018
 10621 00001461 E80800                  	Call    BackSpace
 10622 00001464 EB83                    	JMP     short GETCH	; 15/01/2024
 10623                                  
 10624                                  	; 15/01/2024
 10625                                  ;User really wants an ESC character in his line
 10626                                  TWOESC:	
 10627 00001466 2EA0[140A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10628 0000146A EBA2                    	jmp	short SAVCH
 10629                                  
 10630                                  BackSpace:
 10631 0000146C 08F6                    	or	dh,dh
 10632 0000146E 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10633 00001470 E85800                  	call	BACKUP          ;Do the backup
 10634 00001473 268A05                  	mov	al,[es:di]	;Get the deleted char
 10635 00001476 3C20                            cmp	al,20h	; ' '
 10636 00001478 730F                    	jnb	short OLDBAK	;Was a normal char
 10637 0000147A 3C09                            cmp	al,c_HT ; 9
 10638 0000147C 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10639                                  ;; 9/27/86 fix for ctrl-U backspace
 10640 0000147E 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10641 00001480 7407                    	JZ	short OLDBAK
 10642 00001482 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10643 00001484 7403                    	JZ	short OLDBAK
 10644                                  ;; 9/27/86 fix for ctrl-U backspace
 10645 00001486 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10646                                  OLDBAK:
 10647 00001489 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10648 0000148F 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10649 00001491 08FF                    	or	bh,bh
 10650 00001493 74B3                            jz	short OLDBAK_RETN 
 10651                                  				;Not advanced in template, stay where we are
 10652 00001495 FECF                    	dec	bh		;Go back in template
 10653 00001497 4E                              dec	si
 10654 00001498 C3                      	retn
 10655                                  BAKTAB:
 10656 00001499 57                              push	di
 10657 0000149A 4F                              dec	di		;Back up one char
 10658 0000149B FD                              std			;Go backward
 10659 0000149C 88F1                            mov	cl,dh		;Number of chars currently in line
 10660 0000149E B020                            mov	al,20h	; ' '
 10661 000014A0 53                              push	bx
 10662 000014A1 B307                            mov	bl,7		;Max
 10663 000014A3 E30E                            jcxz	FIGTAB		;At start, do nothing
 10664                                  FNDPOS:
 10665 000014A5 AE                              scasb			;Look back
 10666 000014A6 7609                    	jbe	short CHKCNT
 10667 000014A8 26807D0109              	cmp	byte [es:di+1],9
 10668 000014AD 7409                    	jz	short HAVTAB	;Found a tab
 10669 000014AF FECB                    	dec	bl		;Back one char if non tab control char
 10670                                  CHKCNT:
 10671 000014B1 E2F2                            loop	FNDPOS
 10672                                  FIGTAB:		
 10673 000014B3 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10674                                  HAVTAB:
 10675 000014B8 28F3                    	sub	bl,dh
 10676 000014BA 00D9                    	add	cl,bl
 10677 000014BC 80E107                  	and	cl,7		;CX has correct number to erase
 10678 000014BF FC                      	cld			;Back to normal
 10679 000014C0 5B                      	pop	bx
 10680 000014C1 5F                      	pop	di
 10681 000014C2 74C5                    	jz	short OLDBAK	;Nothing to erase
 10682                                  TABBAK:
 10683 000014C4 E80700                  	call	BACKMES
 10684 000014C7 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10685 000014C9 EBBE                    	jmp	short OLDBAK
 10686                                  
 10687                                  BACKUP:
 10688 000014CB FECE                            dec	dh		;Back up in line
 10689 000014CD 4F                              dec	di
 10690                                  BACKMES:
 10691 000014CE B008                            mov	al,c_BS ; 8	;Backspace
 10692 000014D0 E86201                          call	OUTT
 10693 000014D3 B020                            mov	al,20h ; ' '	;Erase
 10694 000014D5 E85D01                          call	OUTT
 10695 000014D8 B008                            mov	al,c_BS ; 8	;Backspace
 10696 000014DA E95801                  	jmp	OUTT		;Done
 10697                                  
 10698                                  	; 15/01/2024
 10699                                  ;User really wants an ESC character in his line
 10700                                  ;TWOESC:	
 10701                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10702                                  ;	jmp	SAVCH
 10703                                  
 10704                                  ;Copy the rest of the template
 10705                                  COPYLIN:
 10706 000014DD 88D9                            mov	cl,bl		;Total size of template
 10707 000014DF 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10708 000014E1 EB07                            jmp	short COPYEACH
 10709                                  
 10710                                  COPYSTR:
 10711 000014E3 E83200                  	call	FINDOLD         ;Find the char
 10712 000014E6 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10713                                  
 10714                                  ;Copy one char from template to line
 10715                                  COPYONE:
 10716 000014E8 B101                            mov	cl,1
 10717                                  ;Copy CX chars from template to line
 10718                                  COPYEACH:
 10719 000014EA 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10720 000014F0 38D6                    	cmp	dh,dl
 10721 000014F2 740F                            jz	short GETCH2		;At end of line, can't do anything
 10722 000014F4 38DF                            cmp	bh,bl
 10723 000014F6 740B                            jz	short GETCH2		;At end of template, can't do anything
 10724 000014F8 AC                              lodsb
 10725 000014F9 AA                              stosb
 10726 000014FA E8CC01                  	call	BUFOUT
 10727 000014FD FEC7                            inc	bh			;Ahead in template
 10728 000014FF FEC6                            inc	dh			;Ahead in line
 10729 00001501 E2E7                            loop	COPYEACH
 10730                                  GETCH2:
 10731 00001503 E9E3FE                          jmp	GETCH
 10732                                  
 10733                                  ;Skip one char in template
 10734                                  SKIPONE:
 10735 00001506 38DF                    	cmp	bh,bl
 10736 00001508 74F9                    	jz	short GETCH2		;At end of template
 10737 0000150A FEC7                    	inc	bh			;Ahead in template
 10738 0000150C 46                      	inc	si
 10739                                          ;jmp	GETCH
 10740                                  	; 15/01/2024
 10741 0000150D EBF4                    	jmp	short GETCH2
 10742                                  
 10743                                  SKIPSTR:
 10744 0000150F E80600                  	call	FINDOLD                 ;Find out how far to go
 10745 00001512 01CE                            add	si,cx			;Go there
 10746 00001514 00CF                            add	bh,cl
 10747                                          ;jmp	GETCH
 10748                                  	; 15/01/2024
 10749 00001516 EBEB                    	jmp	short GETCH2
 10750                                  
 10751                                  ;Get the next user char, and look ahead in template for a match
 10752                                  ;CX indicates how many chars to skip to get there on output
 10753                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10754                                  ;       address is popped off and a jump to GETCH is taken.
 10755                                  ;       Make sure nothing extra on stack when this routine
 10756                                  ;       is called!!! (no PUSHes before calling it).
 10757                                  
 10758                                  FINDOLD:
 10759 00001518 E831FE                          call	_$STD_CON_INPUT_NO_ECHO
 10760                                  
 10761                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10762                                  
 10763                                  	;CMP	AL,[SS:ESCCHAR]	
 10764                                  	;JNZ	SHORT FINDSETUP
 10765                                  
 10766                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10767                                  
 10768                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10769                                  
 10770 0000151B 2E3A06[140A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10771 00001520 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10772                                  
 10773 00001522 E827FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10774 00001525 EB1D                            JMP	SHORT NOTFND		; go try again
 10775                                  FINDSETUP:
 10776 00001527 88D9                    	mov	cl,bl
 10777 00001529 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10778 0000152B 7417                    	jz	short NOTFND	;At end of template
 10779 0000152D 49                              dec	cx		;Cannot point past end, limit search
 10780 0000152E 7414                            jz	short NOTFND	;If only one char in template, forget it
 10781 00001530 06                      	push	es
 10782 00001531 1E                      	push	ds
 10783 00001532 07                      	pop	es
 10784 00001533 57                      	push	di
 10785 00001534 89F7                    	mov	di,si		;Template to ES:DI
 10786 00001536 47                      	inc	di
 10787 00001537 F2AE                    	repne	scasb		;Look
 10788 00001539 5F                      	pop	di
 10789 0000153A 07                      	pop	es
 10790 0000153B 7507                    	jnz	short NOTFND	;Didn't find the char
 10791 0000153D F6D1                            not	cl		;Turn how far to go into how far we went
 10792 0000153F 00D9                            add	cl,bl		;Add size of template
 10793 00001541 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10794                                  FINDOLD_RETN:
 10795 00001543 C3                      	retn
 10796                                  
 10797                                  NOTFND:
 10798 00001544 5D                      	pop	bp              ;Chuck return address
 10799                                  	;jmp	GETCH
 10800                                  	; 15/01/2024
 10801                                  GETCH2_j:
 10802 00001545 EBBC                    	jmp	short GETCH2
 10803                                  
 10804                                  REEDIT:
 10805 00001547 B040                    	mov	al,'@'		;Output re-edit character
 10806 00001549 E8E900                  	call	OUTT
 10807 0000154C 5F                      	pop	di
 10808 0000154D 57                      	push	di
 10809 0000154E 06                      	push	es
 10810 0000154F 1E                      	push	ds
 10811 00001550 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10812 00001553 1F                      	pop	ds
 10813 00001554 07                      	pop	es
 10814 00001555 5E                      	pop	si
 10815 00001556 88F3                    	mov	bl,dh		;Size of line is new size template
 10816 00001558 E9F9FE                  	jmp	PUTNEW		;Start over again
 10817                                  
 10818                                  EXITINS:
 10819                                  ENTERINS:
 10820 0000155B 36F616[7905]            	not	byte [SS:INSMODE]
 10821                                  	;jmp	GETCH
 10822                                  	; 15/01/2024
 10823 00001560 EBE3                    	jmp	short GETCH2_j
 10824                                  
 10825                                  ;Put a real live ^Z in the buffer (embedded)
 10826                                  CTRLZ:
 10827 00001562 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10828 00001564 E9A7FE                          jmp	SAVCH
 10829                                  
 10830                                  ;Output a CRLF
 10831                                  CRLF:
 10832 00001567 B00D                    	mov	al,c_CR ; 0Dh 
 10833 00001569 E8C900                  	call	OUTT
 10834 0000156C B00A                    	mov	al,c_LF ; 0Ah
 10835 0000156E E9C400                  	jmp	OUTT
 10836                                  
 10837                                  ;
 10838                                  ;----------------------------------------------------------------------------
 10839                                  ;
 10840                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10841                                  ;
 10842                                  ;	Input or output raw character from console, no echo
 10843                                  ;
 10844                                  ;	ENTRY	DL = -1 if input
 10845                                  ;		   =  output character if output
 10846                                  ;	EXIT	(AL) = input character if input
 10847                                  ;	USES	all
 10848                                  ;
 10849                                  ;----------------------------------------------------------------------------
 10850                                  ; 20/07/2018 - Retro DOS v3.0
 10851                                  
 10852                                  ; 04/05/2019 - Retro DOS v4.0
 10853                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10854                                  
 10855                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10856                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10857                                  
 10858                                  _$RAW_CON_IO:			; System call 6
 10859 00001571 88D0                    	MOV	AL,DL
 10860 00001573 3CFF                    	CMP	AL,-1
 10861 00001575 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10862                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10863                                  	;jz	short rci1
 10864                                  	;jmp	short RAWOUT
 10865                                  	; 16/12/202
 10866                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10867                                  	;nop
 10868                                  rci1:
 10869                                  			; Get pointer to register save area
 10870 00001577 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10871 0000157C 31DB                    	XOR	BX,BX
 10872                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10873 0000157E E8F21F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10874                                          ;JC	SHORT RET17
 10875 00001581 72C0                            jc	short FINDOLD_RETN
 10876 00001583 B401                    	MOV	AH,1
 10877 00001585 E8E52D                  	CALL	IOFUNC
 10878 00001588 750B                    	JNZ	SHORT RESFLG
 10879 0000158A E8693A                  	CALL	SPOOLINT
 10880                                  	;OR	BYTE [ES:DI+16H],40H
 10881 0000158D 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10882 00001592 30C0                    	XOR	AL,AL
 10883                                  RET17:
 10884 00001594 C3                      	RETN
 10885                                  
 10886                                  RESFLG:
 10887                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10888 00001595 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10889                                  				; Reset user's zero flag
 10890                                  ;RILP:
 10891                                  rci0:
 10892 0000159A E8593A                  	CALL	SPOOLINT
 10893                                  ;
 10894                                  ;----------------------------------------------------------------------------
 10895                                  ;
 10896                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10897                                  ;
 10898                                  ;	Input raw character from console, no echo
 10899                                  ;
 10900                                  ;	ENTRY	none
 10901                                  ;	EXIT	(al) = character
 10902                                  ;	USES	all
 10903                                  ;
 10904                                  ;----------------------------------------------------------------------------
 10905                                  ;
 10906                                  
 10907                                  ;rci0:	invoke	SPOOLINT
 10908                                  
 10909                                  	;entry	$RAW_CON_INPUT
 10910                                  
 10911                                  	; 04/05/2019 - Retro DOS v4.0
 10912                                  
 10913                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10914                                  
 10915                                  _$RAW_CON_INPUT:		; System call 7
 10916 0000159D 53                      	push	bx
 10917 0000159E 31DB                    	XOR	BX,BX
 10918                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10919 000015A0 E8D01F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10920 000015A3 5B                      	pop	bx
 10921 000015A4 72EE                    	JC	SHORT RET17
 10922 000015A6 B401                    	MOV	AH,1
 10923 000015A8 E8C22D                  	CALL	IOFUNC
 10924                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10925                                  	;XOR	AH,AH
 10926                                          ;CALL	IOFUNC
 10927                                          ;RETN
 10928 000015AB 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10929 000015AD B484                    	MOV	AH,84h
 10930 000015AF CD2A                    	INT	int_IBM  ; int 2Ah
 10931 000015B1 EBE7                    	JMP	short rci0
 10932                                  rci5:	
 10933 000015B3 30E4                    	XOR	AH,AH
 10934                                  	;CALL	IOFUNC
 10935                                  	;RETN
 10936                                  	; 18/12/2022
 10937 000015B5 E9B52D                  	jmp	IOFUNC
 10938                                  
 10939                                  ;       Output the character in AL to stdout
 10940                                  ;
 10941                                  	;entry	RAWOUT
 10942                                  RAWOUT:
 10943 000015B8 53                      	PUSH    BX
 10944 000015B9 BB0100                  	MOV     BX,1
 10945                                  
 10946                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10947 000015BC E8B41F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10948 000015BF 721B                    	JC	SHORT RAWRET1
 10949                                  
 10950                                  	;
 10951                                  	; MSDOS 2.11
 10952                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10953                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10954                                          ;PUSH	DS
 10955                                          ;PUSH	SI
 10956                                          ;LDS	SI,[SI+19H]		; output to special?
 10957                                  	;TEST	BYTE [SI+4],ISSPEC
 10958                                  	;POP	SI
 10959                                  	;
 10960                                          
 10961                                  	; MSDOS 3.3 & MSDOS 6.0
 10962                                  	;mov	bx,[si+5]
 10963 000015C1 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10964                                   ;
 10965                                   ; If we are a network handle OR if we are not a local device then go do the
 10966                                   ; output the hard way.
 10967                                   ;	
 10968                                  	;and	bx,8080h
 10969 000015C4 81E38080                	AND	BX,sf_isnet+devid_device
 10970                                  	;cmp	bx,80h
 10971 000015C8 81FB8000                	CMP	BX,devid_device
 10972 000015CC 7510                    	jnz     short RAWNORM
 10973 000015CE 1E                      	push    ds
 10974                                  	;lds	bx,[si+7]
 10975 000015CF C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10976                                  	;test	byte [bx+4],10h
 10977 000015D2 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10978                                  	;
 10979                                  
 10980 000015D6 1F                      	POP	DS
 10981 000015D7 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10982                                  
 10983 000015D9 CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10984                                  
 10985                                  	;JMP	SHORT RAWRET
 10986                                  ;RAWNORM:
 10987                                  ;	CALL    RAWOUT3
 10988                                  RAWRET: 
 10989 000015DB F8                      	CLC
 10990                                  RAWRET1:
 10991 000015DC 5B                      	POP     BX
 10992                                  RAWRET2:
 10993 000015DD C3                      	RETN
 10994                                  RAWNORM:
 10995 000015DE E80700                  	CALL    RAWOUT3
 10996 000015E1 EBF8                    	jmp	short RAWRET
 10997                                  
 10998                                  ;	Output the character in AL to handle in BX
 10999                                  ;
 11000                                  ;	entry	RAWOUT2
 11001                                  
 11002                                  RAWOUT2:
 11003                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 11004                                  	;JC	SHORT RET18
 11005 000015E3 E88D1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 11006 000015E6 72F5                    	JC	SHORT RAWRET2
 11007                                  RAWOUT3:
 11008 000015E8 50                      	PUSH	AX
 11009 000015E9 EB0C                    	JMP	SHORT RAWOSTRT
 11010                                  ROLP:
 11011 000015EB E8083A                  	CALL	SPOOLINT
 11012                                  
 11013                                  	; 01/05/2019 - Retro DOS v4.0
 11014                                  
 11015                                  	; MSDOS 6.0
 11016                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 11017                                  	; 17/12/2022
 11018 000015EE 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 11019                                  	;or	word [ss:DOS34_FLAG],200h
 11020                                  				;AN002; set control break
 11021                                  	;invoke DSKSTATCHK
 11022 000015F4 E87E39                  	call	DSKSTATCHK	;AN002; check control break
 11023                                  RAWOSTRT:
 11024 000015F7 B403                    	MOV	AH,3
 11025 000015F9 E8712D                  	CALL	IOFUNC
 11026 000015FC 74ED                    	JZ	SHORT ROLP
 11027                                  
 11028                                  	; MSDOS 6.0
 11029                                  ;SR;
 11030                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 11031                                  ;the user failed. We do not send a char if this happens. We however return
 11032                                  ;to the caller with carry clear because this DOS call does not return any
 11033                                  ;status. 
 11034                                  ;
 11035 000015FE 40                      	inc	ax		;fail on I24 if ax = -1
 11036 000015FF 58                      	POP	AX
 11037 00001600 7405                    	jz	short nosend	;yes, do not send char
 11038 00001602 B402                    	MOV	AH,2
 11039 00001604 E8662D                  	call	IOFUNC
 11040                                  nosend:
 11041 00001607 F8                      	CLC			; Clear carry indicating successful
 11042 00001608 C3                      	retn
 11043                                  
 11044                                  	; MSDOS 3.3 & MSDOS 2.11
 11045                                  	;POP	AX
 11046                                  	;MOV	AH,2
 11047                                          ;CALL	IOFUNC
 11048                                  	;CLC			; Clear carry indicating successful
 11049                                  ;RET18:    
 11050                                  	;RETN
 11051                                  
 11052                                  ;;10/08/2018
 11053                                  ; 20/07/2018 - Retro DOS v3.0
 11054                                  ; ---------------------------------------------------------------------------
 11055                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11056                                  ; ---------------------------------------------------------------------------
 11057                                  
 11058                                  ; This routine is called at DOS init
 11059                                  
 11060                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11061                                  ;;OUTMES:
 11062                                  ;;	;LODS	CS:BYTE PTR [SI]
 11063                                  ;;	CS	LODSB
 11064                                  ;;	CMP     AL,"$" ; 24h
 11065                                  ;;	JZ	SHORT RET18
 11066                                  ;;	CALL	OUTT
 11067                                  ;;	JMP     SHORT OUTMES
 11068                                  
 11069                                  ; ---------------------------------------------------------------------------
 11070                                  
 11071                                  ; 20/07/2018 - Retro DOS v3.0
 11072                                  
 11073                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11074                                  
 11075                                  ;
 11076                                  ;----------------------------------------------------------------------------
 11077                                  ;
 11078                                  ; Inputs:
 11079                                  ;	AX=0 save the DEVCALL request packet
 11080                                  ;	  =1 restore the DEVCALL request packet
 11081                                  ; Function:
 11082                                  ;	save or restore the DEVCALL packet
 11083                                  ; Returns:
 11084                                  ;	none
 11085                                  ;
 11086                                  ;----------------------------------------------------------------------------
 11087                                  ;
 11088                                  
 11089                                  ; 04/05/2019 - Retro DOS v4.0
 11090                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11091                                  
 11092                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11093                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11094                                  
 11095                                  ; 12/05/2019
 11096                                  
 11097                                  	; 15/01/2024
 11098                                  
 11099                                  Save_Restore_Packet:
 11100 00001609 1E                      	PUSH	DS
 11101 0000160A 06                      	PUSH	ES
 11102 0000160B 56                      	PUSH	SI
 11103 0000160C 57                      	PUSH	DI
 11104                                  
 11105                                  	; 16/12/2022
 11106                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11107                                  	; 09/09/2018
 11108 0000160D BF[6C0D]                	mov	di,FAKE_STACK_2F
 11109 00001610 BE[5A03]                	mov	si,DEVCALL
 11110 00001613 BE[5A03]                	mov	si,DEVCALL
 11111                                  	;
 11112                                  	; 21/09/2023
 11113 00001616 09C0                    	or	ax,ax 
 11114                                  	;CMP	AX,0		; save packet
 11115 00001618 7402                    	JZ	short save_packet ; 16/12/2022
 11116                                  	;je	short set_seg
 11117                                  
 11118                                  	; MSDOS 6.0
 11119                                  restore_packet:
 11120                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11121                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11122                                  	; MSDOS 3.3
 11123                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11124                                  	;mov	di,DEVCALL  ; 09/09/2018
 11125                                  	;
 11126                                  	;JMP	short set_seg
 11127                                  
 11128                                  	; 16/12/2022	
 11129                                  	; 09/09/2018
 11130 0000161A 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11131                                  
 11132                                  ; 16/12/2022
 11133                                  %if 0
 11134                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11135                                  	cmp	ax,0		; save packet
 11136                                  	jz	short save_packet
 11137                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11138                                  	mov	di,DEVCALL 
 11139                                  	jmp	short set_seg
 11140                                  
 11141                                  	; MSDOS 6.0
 11142                                  save_packet:
 11143                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11144                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11145                                  	; 09/09/2018
 11146                                  	; MSDOS 3.3
 11147                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11148                                  	;mov	si,DEVCALL ; 09/09/2018
 11149                                  
 11150                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11151                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11152                                  	mov	si,DEVCALL
 11153                                  %endif
 11154                                  
 11155                                  ; 15/01/2024
 11156                                  ; 16/12/2022
 11157                                  save_packet:
 11158                                  ;set_seg:
 11159                                  	; MSDOS 3.3
 11160                                  	;mov	ax,cs
 11161                                  
 11162                                  	; MSDOS 6.0
 11163                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11164                                  	;MOV	DS,AX
 11165                                  	;MOV	ES,AX
 11166                                  	; 15/01/2024
 11167 0000161C 16                      	push	ss
 11168 0000161D 1F                      	pop	ds
 11169 0000161E 1E                      	push	ds
 11170 0000161F 07                      	pop	es
 11171                                  
 11172 00001620 B90B00                  	MOV	CX,11		; 11 words to move
 11173 00001623 F3A5                    	REP	MOVSW
 11174                                  
 11175 00001625 5F                      	POP	DI
 11176 00001626 5E                      	POP	SI
 11177 00001627 07                      	POP	ES
 11178 00001628 1F                      	POP	DS
 11179 00001629 C3                      	retn
 11180                                  
 11181                                  ;============================================================================
 11182                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11183                                  ;============================================================================
 11184                                  ; 20/07/2018 - Retro DOS v3.0
 11185                                  ; 01/05/2019 - Retro DOS v4.0
 11186                                  
 11187                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11188                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11189                                  ;hkn;	not valid. 
 11190                                  
 11191                                  ;
 11192                                  ;----------------------------------------------------------------------------
 11193                                  ;
 11194                                  ;**	$STD_CON_INPUT - System Call 1
 11195                                  ;
 11196                                  ;	Input character from console, echo
 11197                                  ;
 11198                                  ;	ENTRY	none
 11199                                  ;	EXIT	(al) = character
 11200                                  ;	USES	ALL
 11201                                  ;
 11202                                  ;----------------------------------------------------------------------------
 11203                                  ;
 11204                                  
 11205                                  _$STD_CON_INPUT:	;System call 1
 11206                                  	
 11207 0000162A E81FFD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11208 0000162D 50                      	PUSH	AX
 11209 0000162E E80400                  	CALL	OUTT
 11210 00001631 58                      	POP	AX
 11211                                  CON_INPUT_RETN:	
 11212 00001632 C3                      	RETN
 11213                                  
 11214                                  ;
 11215                                  ;----------------------------------------------------------------------------
 11216                                  ;
 11217                                  ;**	$STD_CON_OUTPUT - System Call 2
 11218                                  ;
 11219                                  ;	Output character to console
 11220                                  ;
 11221                                  ;	ENTRY	(dl) = character
 11222                                  ;	EXIT	none
 11223                                  ;	USES	all
 11224                                  ;
 11225                                  ;----------------------------------------------------------------------------
 11226                                  ;
 11227                                  
 11228                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11229                                  
 11230                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11231                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11232                                  
 11233                                  _$STD_CON_OUTPUT:	;System call 2
 11234                                  
 11235 00001633 88D0                    	MOV	AL,DL
 11236                                  OUTT:
 11237 00001635 3C20                    	CMP	AL,20H ; " "
 11238 00001637 725C                    	JB	SHORT CTRLOUT
 11239 00001639 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11240 0000163B 7405                    	JZ	SHORT OUTCH
 11241                                  OUTCHA:	
 11242                                  	;INC	BYTE PTR [CARPOS]
 11243 0000163D 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11244                                  OUTCH:
 11245 00001642 1E                      	PUSH	DS
 11246 00001643 56                      	PUSH	SI
 11247                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11248                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11249 00001644 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11250                                  	;AND	BYTE [SS:CHARCO],00111111B
 11251                                  	; 01/05/2019 - Retro DOS v4.0
 11252 00001649 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11253 0000164F 7505                    	JNZ	SHORT OUTSKIP
 11254                                  
 11255 00001651 50                      	PUSH	AX
 11256 00001652 E8CF39                  	CALL	STATCHK
 11257 00001655 58                      	POP	AX
 11258                                  OUTSKIP:
 11259 00001656 E85FFF                  	CALL	RAWOUT				;output the character
 11260                                  
 11261 00001659 5E                      	POP	SI
 11262 0000165A 1F                      	POP	DS
 11263                                  
 11264                                  	;TEST	BYTE PTR [PFLAG],-1
 11265                                  	;retz
 11266 0000165B 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11267 00001661 74CF                    	JZ	SHORT CON_INPUT_RETN
 11268                                  
 11269 00001663 53                      	PUSH	BX
 11270 00001664 1E                      	PUSH	DS
 11271 00001665 56                      	PUSH	SI
 11272 00001666 BB0100                  	MOV	BX,1
 11273                                  	; 20/07/2018 - Retro DOS v3.0
 11274                                  	; MSDOS 3.3
 11275                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11276 00001669 E8071F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11277                                  					;hkn; to sft entry
 11278 0000166C 7224                    	JC	SHORT TRIPOPJ
 11279                                  
 11280                                  	; 01/05/2019 - Retro DOS v4.0
 11281                                  
 11282                                  	;mov	bx,[si+5]
 11283 0000166E 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11284                                  	;test	bx,8000h
 11285                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11286 00001671 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11287 00001674 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11288                                  	;;test	bx,80h
 11289                                  	;TEST	BX,devid_device 		; output to file?
 11290 00001676 F6C380                  	test	bl,devid_device ; 80h
 11291 00001679 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11292                                  	; 14/03/2018
 11293                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11294                                  	;jc	short TRIPOPJ
 11295                                  	; MSDOS 2.11
 11296                                  	;test	byte [SI+18H], 80h
 11297                                  	;jz	short TRIPOPJ
 11298 0000167B BB0400                  	MOV	BX,4
 11299 0000167E E8F21E                  	CALL	GET_IO_SFT
 11300 00001681 720F                    	JC	SHORT TRIPOPJ
 11301                                  	;;test	word [si+5], 800h
 11302                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11303                                  	;test	byte [si+6],8 ; 08/11/2022
 11304 00001683 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11305                                  						; StdPrn redirected?
 11306                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11307                                  	;jz	LISSTRT2 ; 10/08/2018 
 11308                                  	; 16/12/2022
 11309 00001687 7503                    	jnz	short outch1
 11310 00001689 E98700                  	jmp	LISSTRT2
 11311                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11312                                  	;jz	short LISSTRT2J
 11313                                  outch1:
 11314                                  	;MOV	BYTE [PFLAG],0
 11315 0000168C 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11316                                  	; MSDOS 2.11
 11317                                  	;mov	bx,4
 11318                                  	;jmp	short LISSTRT2
 11319                                  	
 11320                                  TRIPOPJ:
 11321                                  	; 20/07/2018
 11322 00001692 E98100                  	JMP	TRIPOP
 11323                                  
 11324                                  	; 16/12/2022
 11325                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11326                                  ;LISSTRT2J:
 11327                                  ;	JMP	LISSTRT2
 11328                                  
 11329                                  CTRLOUT:
 11330 00001695 3C0D                    	CMP	AL,c_CR ; 0Dh
 11331 00001697 7420                    	JZ	SHORT ZERPOS
 11332 00001699 3C08                    	CMP	AL,c_BS ; 8
 11333 0000169B 7424                    	JZ	SHORT BACKPOS
 11334 0000169D 3C09                    	CMP	AL,c_HT ; 9
 11335 0000169F 75A1                    	JNZ	SHORT OUTCH
 11336                                  	;MOV	AL,[CARPOS]
 11337 000016A1 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11338 000016A5 0CF8                    	OR	AL,0F8H
 11339 000016A7 F6D8                    	NEG	AL
 11340                                  TAB:
 11341 000016A9 51                      	PUSH	CX
 11342 000016AA 88C1                    	MOV	CL,AL
 11343 000016AC B500                    	MOV	CH,0
 11344 000016AE E307                    	JCXZ	POPTAB
 11345                                  TABLP:
 11346 000016B0 B020                    	MOV	AL," "
 11347 000016B2 E880FF                  	CALL	OUTT
 11348 000016B5 E2F9                    	LOOP	TABLP
 11349                                  POPTAB:
 11350 000016B7 59                      	POP	CX
 11351                                  
 11352 000016B8 C3                      	RETN
 11353                                  
 11354                                  ZERPOS:
 11355                                  	;MOV	BYTE PTR [CARPOS],0
 11356 000016B9 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11357                                  	; 10/08/2018
 11358 000016BF EB81                    	JMP	short OUTCH ; 04/05/2019
 11359                                  	
 11360                                  	; 18/12/2022
 11361                                  ;OUTJ:	
 11362                                  	;JMP	OUTT
 11363                                  
 11364                                  BACKPOS:
 11365                                  	;DEC	BYTE PTR [CARPOS]
 11366 000016C1 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11367 000016C6 E979FF                  	JMP	OUTCH
 11368                                  
 11369                                  BUFOUT:
 11370 000016C9 3C20                    	CMP	AL," "
 11371 000016CB 7315                    	JAE	SHORT OUTJ		;Normal char
 11372 000016CD 3C09                    	CMP	AL,9
 11373 000016CF 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11374                                  	;DOS 3.3  7/14/86
 11375 000016D1 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11376 000016D3 740D                    	JZ	short CTRLU
 11377 000016D5 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11378 000016D7 7409                    	JZ	short CTRLU
 11379                                  NOT_CTRLU:
 11380                                  	;DOS 3.3  7/14/86
 11381 000016D9 50                      	PUSH	AX
 11382 000016DA B05E                    	MOV	AL,"^"
 11383 000016DC E856FF                  	CALL	OUTT		;Print '^' before control chars
 11384 000016DF 58                      	POP	AX
 11385 000016E0 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11386                                  CTRLU:
 11387                                  	;CALL	OUTT
 11388                                  	; 18/12/2022
 11389                                  OUTJ:
 11390 000016E2 E950FF                  	jmp	OUTT
 11391                                  ;BUFOUT_RETN:
 11392                                  	;RETN
 11393                                  
 11394                                  ;
 11395                                  ;----------------------------------------------------------------------------
 11396                                  ;
 11397                                  ;**	$STD_AUX_INPUT - System Call 3
 11398                                  ;
 11399                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11400                                  ;
 11401                                  ;	ENTRY	none
 11402                                  ;	EXIT	(al) = character
 11403                                  ;	USES	all
 11404                                  ;
 11405                                  ;----------------------------------------------------------------------------
 11406                                  ;
 11407                                  
 11408                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11409                                  
 11410                                  _$STD_AUX_INPUT:	;System call 3
 11411                                  
 11412 000016E5 E83C39                  	CALL	STATCHK
 11413 000016E8 BB0300                  	MOV	BX,3
 11414 000016EB E8851E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11415                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11416                                  	;retc
 11417                                  	; 16/12/2022
 11418                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11419                                  	;JC	SHORT BUFOUT_RETN
 11420                                  	;JMP	SHORT TAISTRT
 11421                                  	; 07/12/2022
 11422 000016EE 7304                    	jnc	SHORT TAISTRT
 11423 000016F0 C3                      	retn	
 11424                                  
 11425                                  AUXILP:
 11426 000016F1 E80239                  	CALL	SPOOLINT
 11427                                  TAISTRT:
 11428 000016F4 B401                    	MOV	AH,1
 11429 000016F6 E8742C                  	CALL	IOFUNC
 11430 000016F9 74F6                    	JZ	SHORT AUXILP
 11431 000016FB 30E4                    	XOR	AH,AH
 11432                                  	; 16/12/2022
 11433                                  	;CALL	IOFUNC
 11434                                  	;RETN
 11435                                  	; 07/12/2022
 11436 000016FD E96D2C                  	jmp	IOFUNC
 11437                                  
 11438                                  ;
 11439                                  ;----------------------------------------------------------------------------
 11440                                  ;
 11441                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11442                                  ;
 11443                                  ;	ENTRY	(dl) = character
 11444                                  ;	EXIT	none
 11445                                  ;	USES	all
 11446                                  ;
 11447                                  ;----------------------------------------------------------------------------
 11448                                  ;
 11449                                  
 11450                                  _$STD_AUX_OUTPUT:	;System call 4
 11451                                  
 11452 00001700 53                      	PUSH	BX
 11453 00001701 BB0300                  	MOV	BX,3
 11454 00001704 EB04                    	JMP	SHORT SENDOUT
 11455                                  
 11456                                  ;
 11457                                  ;----------------------------------------------------------------------------
 11458                                  ;
 11459                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11460                                  ;
 11461                                  ;	ENTRY	(dl) = character
 11462                                  ;	EXIT	none
 11463                                  ;	USES	all
 11464                                  ;
 11465                                  ;----------------------------------------------------------------------------
 11466                                  ;
 11467                                  
 11468                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11469                                  
 11470 00001706 53                      	PUSH	BX
 11471 00001707 BB0400                  	MOV	BX,4
 11472                                  
 11473                                  SENDOUT:
 11474 0000170A 88D0                    	MOV	AL,DL
 11475 0000170C 50                      	PUSH	AX
 11476 0000170D E81439                  	CALL	STATCHK
 11477 00001710 58                      	POP	AX
 11478 00001711 1E                      	PUSH	DS
 11479 00001712 56                      	PUSH	SI
 11480                                  LISSTRT2:
 11481 00001713 E8CDFE                  	CALL	RAWOUT2
 11482                                  TRIPOP:
 11483 00001716 5E                      	POP	SI
 11484 00001717 1F                      	POP	DS
 11485 00001718 5B                      	POP	BX
 11486                                  SCIS_RETN:	; 20/07/2018
 11487 00001719 C3                      	RETN
 11488                                  ;
 11489                                  ;----------------------------------------------------------------------------
 11490                                  ;
 11491                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11492                                  ;
 11493                                  ;	Check console input status
 11494                                  ;
 11495                                  ;	ENTRY	none
 11496                                  ;	EXIT	AL = -1 character available, = 0 no character
 11497                                  ;	USES	all
 11498                                  ;
 11499                                  ;----------------------------------------------------------------------------
 11500                                  ;
 11501                                  
 11502                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11503                                  
 11504 0000171A E80739                  	CALL	STATCHK
 11505 0000171D B000                    	MOV	AL,0		; no xor!!
 11506                                  	;retz
 11507 0000171F 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11508 00001721 0CFF                    	OR	AL,-1
 11509                                  ;SCIS_RETN:
 11510 00001723 C3                      	RETN
 11511                                  
 11512                                  ;
 11513                                  ;----------------------------------------------------------------------------
 11514                                  ;
 11515                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11516                                  ;
 11517                                  ;	Flush console input buffer and perform call in AL
 11518                                  ;
 11519                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11520                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11521                                  ;		return arguments for the fcn supplied in (AL)
 11522                                  ;	USES	all
 11523                                  ;
 11524                                  ;----------------------------------------------------------------------------
 11525                                  ;
 11526                                  
 11527                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11528                                  
 11529 00001724 50                      	PUSH	AX
 11530 00001725 52                      	PUSH	DX
 11531 00001726 31DB                    	XOR	BX,BX
 11532 00001728 E8481E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11533                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11534 0000172B 7205                    	JC	SHORT BADJFNCON
 11535 0000172D B404                    	MOV	AH,4
 11536 0000172F E83B2C                  	CALL	IOFUNC
 11537                                  
 11538                                  BADJFNCON:
 11539 00001732 5A                      	POP	DX
 11540 00001733 58                      	POP	AX
 11541 00001734 88C4                    	MOV	AH,AL
 11542 00001736 3C01                    	CMP	AL,1
 11543 00001738 7413                    	JZ	SHORT REDISPJ
 11544 0000173A 3C06                    	CMP	AL,6
 11545 0000173C 740F                    	JZ	SHORT REDISPJ
 11546 0000173E 3C07                    	CMP	AL,7
 11547 00001740 740B                    	JZ	SHORT REDISPJ
 11548 00001742 3C08                    	CMP	AL,8
 11549 00001744 7407                    	JZ	SHORT REDISPJ
 11550 00001746 3C0A                    	CMP	AL,10
 11551 00001748 7403                    	JZ	SHORT REDISPJ
 11552 0000174A B000                    	MOV	AL,0
 11553 0000174C C3                      	RETN
 11554                                  
 11555                                  REDISPJ:
 11556 0000174D FA                      	CLI
 11557                                  	;transfer REDISP
 11558 0000174E E937EC                  	JMP	REDISP
 11559                                  
 11560                                  ;============================================================================
 11561                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11562                                  ;============================================================================
 11563                                  ; 20/07/2018 - Retro DOS v3.0
 11564                                  ; 17/05/2019 - Retro DOS v4.0
 11565                                  
 11566                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11567                                  ;
 11568                                  ;	$GET_FCB_POSITION
 11569                                  ;	$FCB_DELETE
 11570                                  ;	$GET_FCB_FILE_LENGTH
 11571                                  ;	$FCB_CLOSE
 11572                                  ;	$FCB_RENAME
 11573                                  ;	SaveFCBInfo
 11574                                  ;	ResetLRU
 11575                                  ;	SetOpenAge
 11576                                  ;	LRUFCB
 11577                                  ;	FCBRegen
 11578                                  ;	BlastSFT
 11579                                  ;	CheckFCB
 11580                                  ;	SFTFromFCB
 11581                                  ;	FCBHardErr
 11582                                  ;
 11583                                  ;	Revision history:
 11584                                  ;
 11585                                  ;		Created: ARR 4 April 1983"
 11586                                  ;			 MZ  6 June  1983 completion of functions
 11587                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11588                                  ;					  times.  Change so successive closes work by
 11589                                  ;					  always returning OK.	Also, detect I/O to
 11590                                  ;					  already closed FCB and return EOF.
 11591                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11592                                  ;					  out of sft into FCB for reconnection
 11593                                  ;
 11594                                  ;		A000	 version 4.00  Jan. 1988
 11595                                  
 11596                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11597                                  ;----------------------------------------------------------------------------
 11598                                  ;
 11599                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11600                                  ;	extent and next record field and set the random record field to point
 11601                                  ;	to that record
 11602                                  ;
 11603                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11604                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11605                                  ;   Registers modified: all
 11606                                  ;
 11607                                  ;----------------------------------------------------------------------------
 11608                                  ;
 11609                                  
 11610                                  _$GET_FCB_POSITION:
 11611 00001751 E8C904                  	call	GetExtended		; point to FCB
 11612 00001754 E89A04                  	call	GetExtent		; DX:AX is current record
 11613                                  	;mov	[si+21h],ax
 11614 00001757 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11615                                  	;mov	[si+23h],dl
 11616 0000175A 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11617                                  	;cmp	word [si+0Eh],64
 11618 0000175D 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11619 00001761 7303                    	JAE	short GetFCBBye
 11620                                  	;mov	[si+24h],dh
 11621 00001763 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11622                                  GoodPath:	; 16/12/2022
 11623                                  GetFCBBye:
 11624 00001766 E9E4EE                  	jmp	FCB_RET_OK
 11625                                  
 11626                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11627                                  ;----------------------------------------------------------------------------
 11628                                  ;
 11629                                  ;**	$FCB_Delete - Delete from FCB Template
 11630                                  ;
 11631                                  ;	given an FCB, remove all directory entries in the current
 11632                                  ;	directory that have names that match the FCB's ?  marks.
 11633                                  ;
 11634                                  ;	ENTRY	(DS:DX) = address of FCB
 11635                                  ;	EXIT	entries matching the FCB are deleted
 11636                                  ;		(al) = ff iff no entries were deleted
 11637                                  ;	USES	all
 11638                                  ;
 11639                                  ;----------------------------------------------------------------------------
 11640                                  ;
 11641                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11642                                  
 11643                                  _$FCB_DELETE:		; System call 19
 11644                                  					; OpenBuf is in DOSDATA
 11645 00001769 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11646                                  
 11647 0000176C E82C52                  	call	TransFCB		; convert FCB to path
 11648 0000176F 7207                    	JC	short BadPath 		; signal no deletions
 11649                                  
 11650 00001771 16                      	push	SS
 11651 00001772 1F                      	pop	DS			; SS is DOSDATA
 11652                                  
 11653 00001773 E82C0D                  	call	DOS_DELETE		; wham
 11654                                  	;JC	short BadPath
 11655                                  	; 16/12/2022
 11656 00001776 73EE                    	jnc 	short GoodPath
 11657                                  ;GoodPath:
 11658                                  ;	;jmp	FCB_RET_OK		; do a good return
 11659                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11660                                  ;	jmp	short GetFCBBye
 11661                                  
 11662                                  BadPath:
 11663                                  	; Error code is in AX
 11664                                  
 11665 00001778 E9D5EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11666                                  
 11667                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11668                                  ;----------------------------------------------------------------------------
 11669                                  ;
 11670                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11671                                  ;	file in records (rounded up if partial).
 11672                                  ;
 11673                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11674                                  ;   Outputs:	Random record field updated to reflect the number of records
 11675                                  ;   Registers modified: all
 11676                                  ;
 11677                                  ;----------------------------------------------------------------------------
 11678                                  ;
 11679                                  	; 15/01/2024
 11680                                  
 11681                                  _$GET_FCB_FILE_LENGTH:
 11682                                  
 11683 0000177B E89F04                  	call	GetExtended		; get real FCB pointer
 11684                                  					; DX points to Input FCB
 11685                                  
 11686                                  					; OpenBuf is in DOSDATA
 11687 0000177E BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11688                                  
 11689 00001781 1E                      	push	ds			; save pointer to true FCB
 11690 00001782 56                      	push	si
 11691 00001783 E81552                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11692 00001786 5E                      	pop	si
 11693 00001787 1F                      	pop	ds
 11694 00001788 72EE                    	JC	short BadPath
 11695 0000178A 1E                      	push	ds			; save pointer
 11696 0000178B 56                      	push	si
 11697 0000178C 16                      	push	ss		
 11698 0000178D 1F                      	pop	ds
 11699 0000178E E80F11                  	call	GET_FILE_INFO		; grab the info
 11700 00001791 5E                      	pop	si			; get pointer back
 11701 00001792 1F                      	pop	ds
 11702 00001793 72E3                    	JC	short BadPath 		; invalid something
 11703                                  	; 15/01/2024
 11704                                  	;MOV	DX,BX (*)		; get high order size
 11705                                  	;MOV	AX,DI (**)		; get low order size
 11706 00001795 89D8                    	mov	ax,bx ; hw of file size
 11707                                  	;
 11708                                  	;mov	bx,[si+0Eh]
 11709 00001797 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11710 0000179A 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11711 0000179C 7502                    	JNZ	short GetSize 		; not empty
 11712                                  	;MOV	BX,128
 11713 0000179E B380                    	mov	bl,128	; 15/01/2024
 11714                                  GetSize:
 11715                                  	; 15/01/2024
 11716                                  	;MOV	DI,AX			; save low order word
 11717                                  	;MOV	AX,DX			; move high order for divide
 11718                                  	;xchg	ax,dx ; (*)
 11719                                  	; ax = hw of file size
 11720                                  
 11721 000017A0 31D2                    	XOR	DX,DX			; clear out high
 11722 000017A2 F7F3                    	DIV	BX			; wham
 11723 000017A4 50                      	PUSH	AX			; save dividend
 11724 000017A5 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11725 000017A7 F7F3                    	DIV	BX			; wham
 11726 000017A9 89D1                    	MOV	CX,DX			; save remainder
 11727 000017AB 5A                      	POP	DX			; get high order dividend
 11728 000017AC E306                    	JCXZ	LengthStore		; no roundup
 11729 000017AE 83C001                  	ADD	AX,1
 11730 000017B1 83D200                  	ADC	DX,0			; 32-bit increment
 11731                                  LengthStore:
 11732                                  	;mov	[si+21h],ax
 11733 000017B4 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11734                                  	;mov	[si+23h],dl
 11735 000017B7 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11736 000017BA 08F6                    	OR	DH,DH
 11737 000017BC 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11738                                  	;mov	[si+24h],dh
 11739 000017BE 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11740                                  	; 16/12/2022
 11741                                  GoodRet:
 11742                                  	;jmp	FCB_RET_OK
 11743 000017C1 EBA3                    	jmp	short GoodPath
 11744                                  
 11745                                  ;Break <$FCB_Close - close a file>
 11746                                  ;----------------------------------------------------------------------------
 11747                                  ;
 11748                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11749                                  ;	as the FCB may be used for further I/O
 11750                                  ;
 11751                                  ;   Inputs:	DS:DX point to FCB
 11752                                  ;   Outputs:	AL = FF if file was not found on disk
 11753                                  ;   Registers modified: all
 11754                                  ;
 11755                                  ;----------------------------------------------------------------------------
 11756                                  ;
 11757                                  
 11758                                  	; 16/01/2024
 11759                                  
 11760                                  _$FCB_CLOSE:		; System call 16
 11761                                  
 11762 000017C3 30C0                    	XOR	AL,AL			; default search attributes
 11763 000017C5 E85504                  	call	GetExtended		; DS:SI point to real FCB
 11764 000017C8 7403                    	JZ	short NoAttr		; not extended
 11765 000017CA 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11766                                  NoAttr:
 11767                                  					; SS override
 11768 000017CD 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11769 000017D1 E8B803                  	call	SFTFromFCB
 11770 000017D4 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11771                                  
 11772                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11773                                  	; there is no need to set the SFT's attribute.
 11774                                  
 11775                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11776                                  	;;; done
 11777                                  
 11778                                  	;mov	al,[es:di+4]
 11779 000017D6 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11780 000017DA 30E4                    	XOR	AH,AH
 11781 000017DC 50                      	PUSH	AX
 11782                                  
 11783                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11784                                  	;;; done
 11785                                  
 11786 000017DD E8B359                  	call	CheckShare
 11787 000017E0 7508                    	JNZ	short NoStash
 11788 000017E2 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11789                                  	;mov	[es:di+4],al
 11790 000017E6 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11791                                  NoStash:
 11792                                  
 11793                                  ; 16/01/2024
 11794                                  %if 0
 11795                                  	;mov	ax,[si+14h]
 11796                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11797                                  	;mov	[es:di+0Fh],ax
 11798                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11799                                  	;mov	ax,[si+16h]
 11800                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11801                                  	;mov	[es:di+0Dh],ax
 11802                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11803                                  	;mov	ax,[si+10h]
 11804                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11805                                  	;mov	[es:di+11h],ax
 11806                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11807                                  	;mov	ax,[si+12h]
 11808                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11809                                  	;mov	[es:di+13h],ax
 11810                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11811                                  	;or	word [es:di+5],4000h
 11812                                  	; 17/12/2022
 11813                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11814                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11815                                  %else
 11816                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11817 000017EA 1E                      	push	ds
 11818                                  	;lds	ax,[si+14h]
 11819 000017EB C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11820                                  	;mov	[es:di+0Fh],ax
 11821 000017EE 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11822                                  	;mov	[es:di+0Dh],ds		
 11823 000017F2 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11824 000017F6 1F                      	pop	ds
 11825                                  	;lds	ax,[si+10h]
 11826 000017F7 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11827                                  	;mov	[es:di+11h],ax
 11828 000017FA 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11829                                  	;mov	[es:di+13h],ds
 11830 000017FE 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11831                                  	; 16/01/2024
 11832                                  	;;or	word [es:di+5],4000h
 11833                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 11834 00001802 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11835                                  %endif
 11836                                  
 11837 00001807 16                      	push	ss
 11838 00001808 1F                      	pop	ds
 11839 00001809 E88416                  	call	DOS_CLOSE	; wham
 11840 0000180C C43E[9E05]              	LES	DI,[THISSFT]
 11841                                  
 11842                                  	;;; 9/8/86 F.C. restore SFT attribute
 11843 00001810 59                      	POP	CX
 11844                                  	;mov	[es:di+4],cl
 11845 00001811 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11846                                  	;;; 9/8/86 F.C. restore SFT attribute
 11847                                  
 11848 00001815 9C                      	PUSHF
 11849                                  	;test	word [es:di],0FFFFh
 11850                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11851                                  				; zero ref count gets blasted
 11852 00001816 26833D00                	cmp	word [ES:DI],0
 11853 0000181A 7507                    	jnz     short CloseOK
 11854 0000181C 50                      	PUSH	AX
 11855 0000181D B04D                    	MOV	AL,'M' ; 4Dh
 11856 0000181F E8E802                  	call	BlastSFT
 11857 00001822 58                      	POP	AX
 11858                                  CloseOK:
 11859 00001823 9D                      	POPF
 11860 00001824 739B                    	JNC	short GoodRet
 11861                                  	;cmp	al,6
 11862 00001826 3C06                    	CMP	AL,error_invalid_handle
 11863 00001828 7497                    	JZ	short GoodRet
 11864                                  	;mov	al,2
 11865 0000182A B002                    	MOV	AL,error_file_not_found
 11866                                  fren90:
 11867                                  	; 16/12/2022
 11868                                  fcb_close_err:
 11869 0000182C E921EE                  	jmp	FCB_RET_ERR
 11870                                  
 11871                                  ;
 11872                                  ;----------------------------------------------------------------------------
 11873                                  ;
 11874                                  ;**	$FCB_Rename - Rename a File
 11875                                  ;
 11876                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11877                                  ;	multiple files copying from the meta characters.
 11878                                  ;
 11879                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11880                                  ;		    name of the files to be renamed. Starting at offset 11h
 11881                                  ;		    in the FCB is the destination name.
 11882                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11883                                  ;		AL = FF -> some files may have been renamed but:
 11884                                  ;			rename to existing file or source file not found
 11885                                  ;	USES	ALL
 11886                                  ;
 11887                                  ;----------------------------------------------------------------------------
 11888                                  ;
 11889                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11890                                  
 11891                                  _$FCB_RENAME:		; System call 23
 11892                                  
 11893 0000182F E8EB03                  	call	GetExtended		; get pointer to real FCB
 11894 00001832 52                      	push	dx
 11895 00001833 8A04                    	MOV	AL,[SI] 		; get drive byte
 11896 00001835 83C610                  	ADD	SI,10h			; point to destination
 11897                                  
 11898                                  					; RenBuf is in DOSDATA
 11899 00001838 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11900 0000183B FF34                    	push	word [SI]
 11901 0000183D 1E                      	push	ds
 11902                                  	;push	di			; save source pointer for TransFCB
 11903                                  	; 16/01/2024 - BugFix !
 11904 0000183E 56                      	push	si
 11905 0000183F 8804                    	MOV	[SI],AL			; drop in real drive
 11906 00001841 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11907 00001843 E85551                  	call	TransFCB		; munch this pathname
 11908 00001846 5E                      	pop	si
 11909 00001847 1F                      	pop	ds	
 11910 00001848 8F04                    	pop	WORD [SI]		; get path back
 11911 0000184A 5A                      	pop	dx			; Original FCB pointer
 11912 0000184B 72DF                    	JC	short fren90		; bad path -> error
 11913                                  
 11914                                  					; SS override for WFP_Start & Ren_WFP
 11915 0000184D 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11916 00001852 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11917                                  
 11918                                  					; OpenBuf is in DOSDATA
 11919 00001857 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11920 0000185A E83E51                  	call	TransFCB		; wham
 11921                                  					; NOTE that this call is pointing
 11922                                  					;  back to the ORIGINAL FCB so
 11923                                  					;  SATTRIB gets set correctly
 11924 0000185D 72CD                    	JC	short fren90		; error
 11925 0000185F E8140E                  	call	DOS_RENAME
 11926 00001862 72C8                    	JC	short fren90
 11927                                  	; 16/12/2022
 11928 00001864 E9E6ED                  	jmp	FCB_RET_OK
 11929                                  	
 11930                                  ;	Error -
 11931                                  ;
 11932                                  ;	(al) = error code
 11933                                  
 11934                                  	; 16/12/2022
 11935                                  ;fren90:	
 11936                                  ;	;jmp	FCB_RET_ERR
 11937                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11938                                  ;	jmp	short fcb_close_err
 11939                                  
 11940                                  ;Break <Misbehavior fixers>
 11941                                  ;
 11942                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11943                                  ;   user's space so he may move them at will. Second, they have a small
 11944                                  ;   reserved area that may be used for system information. Third, there was
 11945                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11946                                  ;   usage.
 11947                                  ;
 11948                                  ;   This results in the following misbehavior:
 11949                                  ;
 11950                                  ;	infinite opens of the same file:
 11951                                  ;
 11952                                  ;	While (TRUE) {			While (TRUE) {
 11953                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11954                                  ;	    Read (FCB); 		    Write (FCB);
 11955                                  ;	    }				    }
 11956                                  ;
 11957                                  ;	infinite opens of different files:
 11958                                  ;
 11959                                  ;	While (TRUE) {			While (TRUE) {
 11960                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11961                                  ;	    Read (FCB); 		    Write (FCB);
 11962                                  ;	    }				    }
 11963                                  ;
 11964                                  ;	multiple closes of the same file:
 11965                                  ;
 11966                                  ;	FCBOpen (FCB);
 11967                                  ;	while (TRUE)
 11968                                  ;	    FCBClose (FCB);
 11969                                  ;
 11970                                  ;	I/O after closing file:
 11971                                  ;
 11972                                  ;	FCBOpen (FCB);
 11973                                  ;	while (TRUE) {
 11974                                  ;	    FCBWrite (FCB);
 11975                                  ;	    FCBClose (FCB);
 11976                                  ;	    }
 11977                                  ;
 11978                                  ;   The following is am implementation of a methodology for emulating the
 11979                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11980                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11981                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11982                                  ;   the local machine.
 11983                                  ;
 11984                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11985                                  ;   structures depending on the file itself and the state of operations of the
 11986                                  ;   OS. The information contained in this reserved field is enough to
 11987                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11988                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11989                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11990                                  ;
 11991                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11992                                  ;
 11993                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11994                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11995                                  ;   regenerated.
 11996                                  ;
 11997                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11998                                  ;   longer available. We can make up for this by using the following
 11999                                  ;   information:
 12000                                  ;
 12001                                  ;	The Drive number (from the DPB).
 12002                                  ;	The physical sector of the directory that contains the entry.
 12003                                  ;	The relative position of the entry in the sector.
 12004                                  ;	The first cluster field.
 12005                                  ;	The last used SFT.
 12006                                  ;      OR In the case of a device FCB
 12007                                  ;	The low 6 bits of sf_flags (indicating device type)
 12008                                  ;	The pointer to the device header
 12009                                  ;
 12010                                  ;   We read in the particular directory sector and examine the indicated
 12011                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 12012                                  ;
 12013                                  ;   Some key items need to be remembered:
 12014                                  ;
 12015                                  ;	Even though we are caching SFTs, they may contain useful sharing
 12016                                  ;	information. We enforce good behavior on the FCBs.
 12017                                  ;
 12018                                  ;	Network support must not treat FCBs as impacting the ref counts on
 12019                                  ;	open VCs. The VCs may be closed only at process termination.
 12020                                  ;
 12021                                  ;	If this is not an installed version of the DOS, file sharing will
 12022                                  ;	always be present.
 12023                                  ;
 12024                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 12025                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 12026                                  ;
 12027                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 12028                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 12029                                  ;	proper OI record.
 12030                                  ;
 12031                                  ;   The test bits are:
 12032                                  ;
 12033                                  ;	00 -> local file
 12034                                  ;	40 -> sharing local
 12035                                  ;	80 -> network
 12036                                  ;	C0 -> local device
 12037                                  
 12038                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 12039                                  ;----------------------------------------------------------------------------
 12040                                  ;
 12041                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 12042                                  ;	pieces of information into the FCB to allow for subsequent
 12043                                  ;	regeneration. Poke LRU also.
 12044                                  ;
 12045                                  ;   Inputs:	ThisSFT points to a complete SFT.
 12046                                  ;		DS:SI point to the FCB (not an extended one)
 12047                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 12048                                  ;		DS:SI preserved
 12049                                  ;		ES:DI point to sft
 12050                                  ;   Registers modified: All
 12051                                  ;
 12052                                  ;
 12053                                  ;----------------------------------------------------------------------------
 12054                                  ;
 12055                                  
 12056                                  	; 20/01/2024
 12057                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12058                                  
 12059                                  SaveFCBInfo:
 12060                                  
 12061 00001867 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12062 0000186C E8D3F9                  	call	IsSFTNet
 12063 0000186F 740B                    	JZ	short SaveLocal		; if not network then save local info
 12064                                  ;
 12065                                  ;----- In net support -----
 12066                                  ;
 12067                                  	; 17/05/2019 - Retro DOS v4.0
 12068                                  
 12069                                  	; MSDOS 3.3
 12070                                  	;;mov	ax,[es:di+1Dh]
 12071                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12072                                  	;;mov	[si+1Ah],ax
 12073                                  	;mov	[si+fcb_net_handle],ax
 12074                                  	;push	es
 12075                                  	;push	di
 12076                                  	;;les	di,[es:di+19h]
 12077                                  	;LES	DI,[ES:DI+sf_netid]
 12078                                  	;;mov	[si+1Ch],di
 12079                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12080                                  	;;mov 	[si+1Eh],es
 12081                                  	;MOV	[SI+fcb_netID+2],ES
 12082                                  	;pop	di
 12083                                  	;pop	es
 12084                                  
 12085                                  	; MSDOS 6.0
 12086                                  	;mov	ax,[es:di+0Bh]
 12087 00001871 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12088                                  	;mov	[si+1Ch],ax
 12089 00001875 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12090                                  	
 12091                                  	;mov	bl,80h
 12092 00001878 B380                    	MOV	BL,FCBNETWORK
 12093                                  ;
 12094                                  ;----- END In net support -----
 12095                                  ;
 12096 0000187A EB63                    	jmp	SHORT SaveSFN
 12097                                  
 12098                                  SaveLocal:
 12099                                  	;IF	Installed
 12100 0000187C E81459                  	call	CheckShare
 12101                                  	;JZ	short SaveNoShare	; no sharer
 12102                                  	;JMP	short SaveShare		; sharer present
 12103                                  	; 16/12/2022
 12104                                  	; 28/07/2019
 12105 0000187F 7559                    	jnz	short SaveShare
 12106                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12107                                  	;JZ	short SaveNoShare	; no sharer
 12108                                  	;JMP	short SaveShare		; sharer present
 12109                                  
 12110                                  SaveNoShare:
 12111                                  	;;test 	word [es:di+5],80h
 12112                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12113 00001881 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12114 00001886 7542                    	JNZ	short SaveNoShareDev	; Device
 12115                                  
 12116                                  	; Save no sharing local file information
 12117                                  
 12118                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12119                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12120 00001888 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12121                                  	;mov	[si+1Dh],ax
 12122 0000188C 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12123                                  
 12124                                  	; MSDOS 6.0
 12125                                  
 12126                                  	;SR; Store high byte of directory sector
 12127                                  	;mov	ax,[es:di+1Dh]
 12128 0000188F 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12129                                  	
 12130                                  	; SR;
 12131                                  	; We have to store the read-only and archive attributes of the file.
 12132                                  	; We extract it from the SFT and store it in the top two bits of the 
 12133                                  	; sector number ( sector number == 22 bits only )
 12134                                  
 12135                                  	;mov	bl,[es:di+4]
 12136 00001893 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12137 00001897 88DF                    	mov	bh,bl
 12138 00001899 D0CB                    	ror	bl,1
 12139 0000189B D0E7                    	shl	bh,1
 12140 0000189D 08FB                    	or	bl,bh
 12141 0000189F 80E3C0                  	and	bl,0C0h
 12142 000018A2 08D8                    	or	al,bl
 12143                                  	;mov	[si+18h],al ; 08/11/2022
 12144 000018A4 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12145                                  
 12146                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12147                                  	;mov	al,[es:di+1Fh]
 12148 000018A7 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12149                                  	;mov	[si+1Fh],al
 12150 000018AB 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12151                                  	;mov	ax,[es:di+0Bh]
 12152 000018AE 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12153                                  	;mov	[si+1Bh],ax
 12154 000018B2 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12155 000018B5 B300                    	MOV	BL,0
 12156                                  
 12157                                  	; Create the bits field from the dirty/device bits of the flags word 
 12158                                  	; and the mode byte
 12159                                  
 12160                                  SetFCBBits:
 12161                                  	;mov	ax,[es:di+5]
 12162 000018B7 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12163 000018BB 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12164                                  	;or	al,[es:di+2]
 12165 000018BD 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12166                                  	;mov	[si+1Ah], al
 12167 000018C1 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12168                                  
 12169                                  	; MSDOS 6.0
 12170                                  	
 12171                                  	; SR;
 12172                                  	; Check if we came here for local file or device. If for local file, 
 12173                                  	; skip setting of SFT index
 12174                                  	
 12175 000018C4 08DB                    	or	bl,bl
 12176 000018C6 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12177                                  
 12178 000018C8 EB15                    	JMP	short SaveSFN 		; go and save SFN
 12179                                  
 12180                                  	; Save no sharing local device information
 12181                                  
 12182                                  SaveNoShareDev:
 12183                                  	; 20/01/2024
 12184                                  	;;mov	ax,[es:di+7]
 12185                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12186                                  	;;mov	[si+1Ah],ax
 12187                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12188                                  	;;mov	ax,[es:di+9]
 12189                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12190                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12191                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12192 000018CA 06                      	push	es
 12193 000018CB 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12194 000018CF 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12195 000018D2 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12196 000018D5 07                      	pop	es
 12197                                  	
 12198                                  	;mov	bl,40h
 12199 000018D6 B340                    	MOV	BL,FCBDEVICE
 12200                                  	; 28/12/2022
 12201 000018D8 EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12202                                  
 12203                                  SaveShare:
 12204                                  	;ENDIF
 12205                                  
 12206                                  ;----- In share support -----
 12207                                  
 12208                                  	;call	far [ss:ShSave]
 12209 000018DA 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12210                                  
 12211                                  ;----- end in share support -----
 12212                                  
 12213                                  	; 17/05/2019
 12214                                  
 12215                                  SaveSFN:
 12216                                  	;lea	ax,[di-6]
 12217 000018DF 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12218                                  	
 12219                                  	; Adjust for offset to table.
 12220                                  	
 12221 000018E2 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12222                                  
 12223 000018E7 53                      	push	bx			;bx = FCB type (net/Share or local)
 12224                                  	;;mov	bl,53 ; MSDOS 3.3
 12225                                  	;mov	bl,59 ; MSDOS 6.0
 12226 000018E8 B33B                    	MOV	BL,SF_ENTRY.size
 12227 000018EA F6F3                    	DIV	BL
 12228                                  	;mov	[si+18h],al
 12229 000018EC 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12230 000018EF 5B                      	pop	bx			;restore bx
 12231                                  
 12232                                  SaveNoSFN:
 12233                                  	;mov	ax,[es:di+5]
 12234 000018F0 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12235 000018F4 243F                    	AND	AL,3Fh			; get real drive
 12236 000018F6 08D8                    	OR	AL,BL
 12237                                  	;mov	[si+19h],al
 12238 000018F8 884419                  	MOV	[SI+fcb_l_drive],AL
 12239                                  
 12240 000018FB 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12241 000018FF 40                      	INC	AX
 12242                                  	;mov	[es:di+15h],ax
 12243 00001900 26894515                	MOV	[ES:DI+sf_LRU],AX
 12244 00001904 7506                    	JNZ	short SimpleStuff
 12245                                  	
 12246                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12247                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12248                                  	
 12249                                  	;mov	bx,15h
 12250 00001906 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12251 00001909 E80500                  	call	ResetLRU
 12252                                  
 12253                                  	; Set new LRU to AX
 12254                                  SimpleStuff:
 12255 0000190C 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12256 00001910 C3                      	retn
 12257                                  
 12258                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12259                                  ;----------------------------------------------------------------------------
 12260                                  ;
 12261                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12262                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12263                                  ;   at 0.
 12264                                  ;
 12265                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12266                                  ;		ES:DI point to SFT currently being updated
 12267                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12268                                  ;		AX has 8000h
 12269                                  ;   Registers modified: none
 12270                                  ;
 12271                                  ;----------------------------------------------------------------------------
 12272                                  ;
 12273                                  
 12274                                  	; 17/05/2019 - Retro DOS v4.0
 12275                                  ResetLRU:
 12276                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12277                                  	; DOSDATA
 12278                                  
 12279 00001911 B80080                  	MOV	AX,8000h
 12280 00001914 06                      	push	es
 12281 00001915 57                      	push	di
 12282                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12283 00001916 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12284                                  	;mov	cx,[es:di+4]
 12285 0000191B 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12286                                  	;lea	di,[di+6]
 12287 0000191F 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12288                                  ovScan:
 12289 00001922 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12290 00001925 7703                    	JA	short ovLoop
 12291 00001927 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12292                                  ovLoop:
 12293                                  	;;add	di,53	; MSDOS 3.3
 12294                                  	;add	di,59	; MSDOS 6.0	
 12295 0000192A 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12296 0000192D E2F3                    	LOOP	ovScan
 12297 0000192F 5F                      	pop	di
 12298 00001930 07                      	pop	es
 12299 00001931 268901                  	MOV	[ES:DI+BX],AX
 12300 00001934 C3                      	retn
 12301                                  
 12302                                  ;IF  0  ; We dont need this routine any more.
 12303                                  ;
 12304                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12305                                  ;----------------------------------------------------------------------------
 12306                                  ;
 12307                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12308                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12309                                  ;   count here and fill in the appropriate field.
 12310                                  ;
 12311                                  ;   Inputs:	ES:DI point to SFT
 12312                                  ;   Outputs:	ES:DI has the open age field filled in.
 12313                                  ;		If open age has wraparound, we will have subtracted 8000h
 12314                                  ;		    from all open ages.
 12315                                  ;   Registers modified: AX
 12316                                  ;
 12317                                  ;----------------------------------------------------------------------------
 12318                                  ;
 12319                                  ;SetOpenAge:
 12320                                  ;	; 20/07/2018 - Retro DOS v3.0
 12321                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12322                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12323                                  ;
 12324                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12325                                  ;
 12326                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12327                                  ;	INC	AX
 12328                                  ;	;mov	[es:di+17h],ax
 12329                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12330                                  ;	JNZ	short SetDone
 12331                                  ;	;mov	bx,17h
 12332                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12333                                  ;	call	ResetLRU
 12334                                  ;SetDone:
 12335                                  ;	MOV	[CS:OpenLRU],AX
 12336                                  ;	retn
 12337                                  ;
 12338                                  ;ENDIF	; SetOpenAge no longer needed
 12339                                  
 12340                                  ; 21/07/2018 - Retro DOS v3.0
 12341                                  ; LRUFCB for MSDOS 6.0 !
 12342                                  
 12343                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12344                                  ;----------------------------------------------------------------------------
 12345                                  ;
 12346                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12347                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12348                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12349                                  ;
 12350                                  ;   Inputs:	none
 12351                                  ;   Outputs:	ES:DI point to SFT
 12352                                  ;		ThisSFT points to SFT
 12353                                  ;		SFT is zeroed
 12354                                  ;		Carry set of closes failed
 12355                                  ;   Registers modified: none
 12356                                  ;
 12357                                  ;----------------------------------------------------------------------------
 12358                                  ;
 12359                                  ; MSDOS 6.0
 12360                                  ;IF 0	; rewritten this routine
 12361                                  ;
 12362                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12363                                  ;	call	save_world
 12364                                  ;	
 12365                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12366                                  ; to find the lease recently used one that is younger than the open age.  We
 12367                                  ; operate be scanning the list n times finding the least age that is greater
 12368                                  ; or equal to the previous minimum age.
 12369                                  ;
 12370                                  ;   BP is the count of times we need to go through this loop.
 12371                                  ;   AX is the current acceptable minimum age to consider
 12372                                  ;
 12373                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12374                                  ;	XOR	AX,AX			; low = 0;
 12375                                  ;
 12376                                  ; If we've scanned the table n times, then we are done.
 12377                                  ;
 12378                                  ;lru1:
 12379                                  ;	CMP	bp,0			; while (k--) {
 12380                                  ;	JZ	short lru75
 12381                                  ;	DEC	bp
 12382                                  ;
 12383                                  ; Set up for scan.
 12384                                  ;
 12385                                  ;   AX is the minimum age for consideration
 12386                                  ;   BX is the minimum age found during the scan
 12387                                  ;   SI is the position of the entry that corresponds to BX
 12388                                  ;
 12389                                  ;	MOV	BX,-1			;     min = 0xffff;
 12390                                  ;	MOV	si,BX			;     pos = 0xffff;
 12391                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12392                                  ;	;mov	cx,[es:di+4]
 12393                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12394                                  ;	;lea	di,[di+6]
 12395                                  ;	LEA	DI,[DI+SFT.SFTable]
 12396                                  ;
 12397                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12398                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12399                                  ; are done.  In both cases, we use the found entry.
 12400                                  ;
 12401                                  ;lru2:
 12402                                  ;	cmp	word [es:di],0
 12403                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12404                                  ;	jz	short lru25
 12405                                  ;	;cmp	word [es:di],-1
 12406                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12407                                  ;	cmp	word [es:di],sf_busy
 12408                                  ;	jnz	short lru3
 12409                                  ;
 12410                                  ; The entry is usable without further scan.  Go and use it.
 12411                                  ;
 12412                                  ;lru25:
 12413                                  ;	MOV	si,DI			;	      pos = i;
 12414                                  ;	JMP	short lru11		;	      goto got;
 12415                                  ;
 12416                                  ; See if the entry is for the network or for the sharer.
 12417                                  ;
 12418                                  ;  If for the sharer or network then
 12419                                  ;	if the age < current minimum AND >= allowed minimum then
 12420                                  ;	    this entry becomes current minimum
 12421                                  ;
 12422                                  ;lru3:
 12423                                  ;	;test	word [es:di+5],8000h
 12424                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12425                                  ;					;	  if (!net[i]
 12426                                  ;	JNZ	short lru35
 12427                                  ;if installed
 12428                                  ;	call	CheckShare		;		&& !sharing)
 12429                                  ;	JZ	short lru5		;	  else
 12430                                  ;ENDIF
 12431                                  ;
 12432                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12433                                  ; current minimum.
 12434                                  ;
 12435                                  ;lru35:
 12436                                  ;	;mov	dx,[es:di+17h]
 12437                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12438                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12439                                  ;	JB	short lru5
 12440                                  ;	CMP	DX,BX
 12441                                  ;	JAE	short lru5		;	      age[i] < min) {
 12442                                  ;
 12443                                  ; entry is new minimum.  Remember his age.
 12444                                  ;
 12445                                  ;	mov	bx,DX			;	      min = age[i];
 12446                                  ;	mov	si,di			;	      pos = i;
 12447                                  ;
 12448                                  ; End of loop.	gp back for more
 12449                                  ;
 12450                                  ;lru5:
 12451                                  ;	;add	di,53
 12452                                  ;	add	di,SF_ENTRY.size
 12453                                  ;	loop	lru2			;	      }
 12454                                  ;
 12455                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12456                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12457                                  ; complete.  Go find LRU.
 12458                                  ;
 12459                                  ;lru6:	
 12460                                  ;	cmp	si,-1			; position not -1?
 12461                                  ;	jz	short lru75		; no, done with everything
 12462                                  ;	lea	ax,[bx+1]		; set new threshold age
 12463                                  ;	jmp	short lru1		; go and loop for more
 12464                                  ;lru65:	
 12465                                  ;	stc
 12466                                  ;	jmp	short LRUDead		;	  return -1;
 12467                                  ;
 12468                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12469                                  ; network entry. We now make a second pass through to find the LRU entry
 12470                                  ; that is local-no-share or has age >= AX
 12471                                  ;
 12472                                  ;lru75:
 12473                                  ;	mov	bx,-1			; min = 0xffff;
 12474                                  ;	mov	si,bx			; pos = 0xffff;
 12475                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12476                                  ;	;mov	cx,[es:di+4]
 12477                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12478                                  ;	;lea	di,[di+6]
 12479                                  ;	LEA	DI,[DI+SFT.SFTable]
 12480                                  ;
 12481                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12482                                  ; then check for lru.
 12483                                  ;
 12484                                  ;lru8:
 12485                                  ;	;test	word [es:di+5],8000h
 12486                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12487                                  ;	jnz	short lru85		; is for network, go check age
 12488                                  ;	call	CheckShare		; sharer here?
 12489                                  ;	jz	short lru86		; no, go check lru
 12490                                  ;
 12491                                  ; Network or sharer.  Check age
 12492                                  ;
 12493                                  ;lru85:
 12494                                  ;	;cmp	[es:di+17h],ax
 12495                                  ;	cmp	[es:di+sf_OpenAge],ax
 12496                                  ;	jb	short lru9		; age is before threshold, skip it
 12497                                  ;
 12498                                  ; Check LRU
 12499                                  ;
 12500                                  ;lru86:
 12501                                  ;	;cmp	[es:di+15h],bx
 12502                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12503                                  ;	jae	short lru9		; no, skip this
 12504                                  ;	mov	si,di			; remember position
 12505                                  ;	;mov	bx,[es:di+15h]
 12506                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12507                                  ;
 12508                                  ; Done with this entry, go back for more.
 12509                                  ;
 12510                                  ;lru9:
 12511                                  ;	;add	di, 53
 12512                                  ;	add	di,SF_ENTRY.size
 12513                                  ;	loop	lru8
 12514                                  ;
 12515                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12516                                  ; out. The conditions here are:
 12517                                  ;
 12518                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12519                                  ;
 12520                                  ;lru10:
 12521                                  ;	cmp	si,-1			; if no one f
 12522                                  ;	jz	short lru65		;     return -1;
 12523                                  ;lru11:
 12524                                  ;	mov	di,si
 12525                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12526                                  ;	MOV	[CS:THISSFT+2],ES
 12527                                  ;
 12528                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12529                                  ; is 0.
 12530                                  ;
 12531                                  ;	;test	word [es:di+5],8000h
 12532                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12533                                  ;	JNZ	short LRUClose
 12534                                  ;IF INSTALLED
 12535                                  ;	call	CheckShare
 12536                                  ;	JZ	short LRUDone
 12537                                  ;ENDIF
 12538                                  ;
 12539                                  ; Repeat close until ref count is 0
 12540                                  ;
 12541                                  ;LRUClose:
 12542                                  ;	push	ss
 12543                                  ;	pop	ds
 12544                                  ;	LES	DI,[THISSFT]
 12545                                  ;	cmp     word [es:di],0
 12546                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12547                                  ;	JZ	short LRUDone 		; nope, all done
 12548                                  ;	call	DOS_CLOSE
 12549                                  ;	jnc	short LRUClose		; no error => clean up
 12550                                  ;	;cmp	al,6
 12551                                  ;	cmp	al,error_invalid_handle
 12552                                  ;	jz	short LRUClose
 12553                                  ;	stc
 12554                                  ;	JMP	short LRUDead
 12555                                  ;LRUDone:
 12556                                  ;	XOR	AL,AL
 12557                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12558                                  ;
 12559                                  ;LRUDead:
 12560                                  ;	call	restore_world
 12561                                  ;	LES     DI,[CS:THISSFT]
 12562                                  ;	jnc	short LRUFCB_retn
 12563                                  ;LRUFCB_err:
 12564                                  ;	; mov	al, 23h	
 12565                                  ;	MOV	AL,error_FCB_unavailable
 12566                                  ;LRUFCB_retn:	
 12567                                  ;	retn:
 12568                                  ;
 12569                                  ;ENDIF	; LRUFCB has been rewritten below.
 12570                                  
 12571                                  ; 17/05/2019 - Retro DOS v4.0
 12572                                  ; LRUFCB for MSDOS 6.0 !
 12573                                  ;----------------------------------------------------------------------------
 12574                                  ;
 12575                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12576                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12577                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12578                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12579                                  ; optimize regeneration operations by keeping track of the current local
 12580                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12581                                  ; local SFT in the SFT Block.
 12582                                  ;
 12583                                  ; Inputs: al = 0 => Regenerate SFT operation
 12584                                  ;	    = 1 => Allocate new SFT for Open/Create
 12585                                  ;
 12586                                  ; Outputs: Carry clear
 12587                                  ;	 	es:di = Address of allocated SFT
 12588                                  ;	  	ThisSFT = Address of allocated SFT
 12589                                  ;
 12590                                  ;	  carry set if closes of net/Share files failed 
 12591                                  ;		al = error_FCB_unavailable
 12592                                  ;
 12593                                  ; Registers affected: None
 12594                                  ;
 12595                                  ;----------------------------------------------------------------------------
 12596                                  
 12597                                  ;LruFCB	PROC	NEAR
 12598                                  LRUFCB:
 12599                                  	; 17/05/2019 - Retro DOS v4.0
 12600                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12601                                  
 12602                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12603                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12604                                  
 12605                                  	; 20/01/2024
 12606                                  
 12607 00001935 06                      	push	es	; * (MSDOS 6.21)
 12608                                  	
 12609 00001936 E829EB                  	call	save_world
 12610                                  	
 12611                                  	;getdseg <ds>		;ds = DOSDATA
 12612 00001939 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12613                                  
 12614 0000193E 08C0                    	or	al,al		;Check if regenerate allocation
 12615 00001940 7516                    	jnz	short lru1	;Try to find SFT to use
 12616                                  
 12617                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12618                                  	; local SFT, just return that SFT to reuse
 12619                                  
 12620                                  	; 20/01/2024
 12621                                  	;mov	di,[LocalSFT]
 12622                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12623                                  	;jz	short lru1	;invalid local SFT, find one
 12624                                  
 12625                                  	; We have found a valid local SFT. Recycle this SFT
 12626                                  
 12627 00001942 C43E[5D10]              	les	di,[LocalSFT]
 12628                                  
 12629                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12630 00001946 8CC1                    	mov	cx,es
 12631 00001948 09F9                    	or	cx,di		; is address == 0?
 12632 0000194A 740C                    	jz	short lru1	; invalid local SFT, find one
 12633                                  
 12634                                  gotlocalSFT:
 12635 0000194C 893E[9E05]              	mov	[THISSFT],di
 12636 00001950 8C06[A005]              	mov	[THISSFT+2],es
 12637 00001954 F8                      	clc
 12638 00001955 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12639                                  
 12640                                  lru1:
 12641 00001958 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12642                                  	;mov	cx,[es:di+4]
 12643 0000195C 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12644                                  	;lea	di,[di+6]
 12645 00001960 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12646                                  
 12647                                  	; We scan through all the SFTs scanning for a free one. It also 
 12648                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12649                                  	; bx = min. LRU for local SFTs
 12650                                  	; si = pos. of local SFT with min. LRU
 12651                                  	; dx = min. LRU for net/Share SFTs
 12652                                  	; bp = pos. of net/Share SFT with min. LRU
 12653                                  
 12654 00001963 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12655 00001966 89DE                    	mov	si,bx
 12656 00001968 89DA                    	mov	dx,bx
 12657 0000196A 89DD                    	mov	bp,bx
 12658                                  
 12659                                  findSFT:
 12660                                  	;See if this SFT is a free one. If so, return it
 12661 0000196C 26830D00                	or	word [es:di],0
 12662                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12663 00001970 744C                    	jz	short gotSFT	;yes, SFT is free
 12664                                  	;;cmp	word [es:di],-1
 12665                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12666 00001972 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12667 00001976 7446                    	jz	short gotSFT	;no, can use it
 12668                                  
 12669                                  	; Check if this SFT is local and store its address in LocalSFT. Can be
 12670                                  	; used for a later regen.
 12671                                  
 12672                                  	; 16/12/2022
 12673                                  	; 08/11/2022
 12674                                  	;test	byte [es:di+6],80h
 12675 00001978 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12676                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12677                                  	;;test	word [es:di+5],8000h
 12678                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12679 0000197D 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12680                                  
 12681                                  ;IF installed
 12682 0000197F E81158                  	call	CheckShare	;Share present?
 12683                                  ;ENDIF
 12684 00001982 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12685                                  
 12686                                  	;Local SFT, register its address
 12687                                  
 12688                                  	; !!HACK!!!
 12689                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12690                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12691                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12692                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12693                                  	; out the code that previously existed at label 'gotSFT'
 12694                                  
 12695                                  hackpoint:
 12696 00001984 893E[5D10]              	mov	[LocalSFT],di
 12697 00001988 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12698                                  
 12699 0000198C 08C0                    	or	al,al		;Is operation = REGEN?
 12700 0000198E 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12701                                  
 12702                                  	;Get LRU for local files
 12703                                  	
 12704                                  	;cmp	[es:di+15h],bx
 12705 00001990 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12706 00001994 7306                    	jae	short lru4	;no, skip 
 12707                                  
 12708                                  	;mov	bx,[es:di+15h]
 12709 00001996 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12710 0000199A 89FE                    	mov	si,di		;store SFT position
 12711                                  lru4:
 12712                                  	;add	di,59
 12713 0000199C 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12714 0000199F E2CB                    	loop	findSFT
 12715                                  	
 12716                                  	; 20/01/2024
 12717 000019A1 49                      	dec	cx ; -1
 12718                                  
 12719                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12720                                  	; available, we will reuse it instead of net/Share LRU
 12721                                  
 12722 000019A2 89F7                    	mov	di,si
 12723                                  	;cmp	si,-1		;local SFT available?
 12724 000019A4 39CE                    	cmp	si,cx ; 20/01/2024
 12725 000019A6 7516                    	jnz	short gotSFT	;yes, return it
 12726                                  
 12727                                  	;No local SFT, see if we got a net/Share SFT
 12728                                  
 12729 000019A8 89EF                    	mov	di,bp
 12730                                  
 12731 000019AA 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12732                                  	;cmp	bp,-1		;net/Share SFT available?
 12733 000019AC 752D                    	jnz	short gotnetSFT	;yes, return it
 12734                                  noSFT:
 12735                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12736                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12737                                  	; count is not maintained properly.
 12738                                  
 12739 000019AE EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12740                                  
 12741                                  	; Handle the LRU for net/Share SFTs
 12742                                  lru5:
 12743                                  	;cmp	[es:di+15h],dx
 12744 000019B0 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12745 000019B4 73E6                    	jae	short lru4	;no, skip
 12746                                  
 12747                                  	;mov	dx,[es:di+15h]
 12748 000019B6 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12749                                  
 12750 000019BA 89FD                    	mov	bp,di		;store SFT position
 12751 000019BC EBDE                    	jmp	short lru4	;continue with next SFT
 12752                                  
 12753                                  gotSFT:
 12754 000019BE 08C0                    	or	al,al
 12755 000019C0 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12756                                  
 12757                                  	; HACK!!!
 12758                                  	; The code here differs from the code at 'hackpoint' only in the
 12759                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12760                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12761                                  	; has been commented out below and replaced by the code just above.
 12762                                  
 12763                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12764                                  ;
 12765                                  ;	or	al,al		  ;Regen?
 12766                                  ;	jnz	short notlocaluse ;yes, register it and return
 12767                                  ;
 12768                                  ;Register this SFT as a local one
 12769                                  ;
 12770                                  ;	mov	[LocalSFT],di
 12771                                  ;	mov	[LocalSFT+2],es
 12772                                  ;	jmp	gotlocalSFT	;return to caller
 12773                                  ;
 12774                                  ;notlocaluse:
 12775                                  
 12776                                  	; The caller is probably going to use this SFT for a net/Share file.
 12777                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12778                                  	; does not really know whether it is a local file or not. We
 12779                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12780                                  	; registered as a local SFT that can be recycled.
 12781                                  
 12782 000019C2 8CC0                    	mov	ax,es
 12783 000019C4 393E[5D10]              	cmp	[LocalSFT],di		;Offset same?
 12784 000019C8 750E                    	jne	short notinvalid
 12785 000019CA 3906[5F10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12786                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12787                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12788 000019CE 7508                    	jne	short notinvalid
 12789                                  zerolocalSFT:	
 12790 000019D0 31C0                    	xor	ax,ax ; 0
 12791 000019D2 A3[5D10]                	mov	[LocalSFT],ax
 12792 000019D5 A3[5F10]                	mov	[LocalSFT+2],ax
 12793                                  	
 12794                                  notinvalid:
 12795 000019D8 E971FF                  	jmp	gotlocalSFT
 12796                                  
 12797                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12798                                  	; Invalidate this variable i.e LocalSFT = NULL
 12799                                  
 12800                                  ;zerolocalSFT:
 12801                                  	;xor	ax,ax ; 0
 12802                                  	;mov	[LocalSFT],ax
 12803                                  	;mov	[LocalSFT+2],ax
 12804                                  	;
 12805                                  	;jmp	gotlocalSFT
 12806                                  
 12807                                  gotnetSFT:
 12808                                  	; We have an SFT that is currently net/Share. If it is going to be
 12809                                  	; used for a regen, we know it has to be a local SFT. Update the
 12810                                  	; LocalSFT variable
 12811                                  
 12812 000019DB 08C0                    	or	al,al
 12813 000019DD 7508                    	jnz	short closenet
 12814                                  
 12815 000019DF 893E[5D10]              	mov	[LocalSFT],di
 12816 000019E3 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12817                                  closenet:
 12818 000019E7 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12819 000019EB 8C06[A005]              	mov	[THISSFT+2],es
 12820                                  
 12821                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12822                                  	; count is 0.
 12823                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12824                                  	; recycled -- no need to check for this.
 12825                                  
 12826                                  LRUClose:
 12827 000019EF 26833D00                	cmp	word [es:di],0
 12828                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12829 000019F3 740C                    	jz	short LRUDone	; nope, all done
 12830                                  
 12831 000019F5 E89814                  	call	DOS_CLOSE
 12832 000019F8 73F5                    	jnc	short LRUClose	; no error => clean up
 12833                                  
 12834                                  	; Bugbug: I dont know why we are trying to close after we get an
 12835                                  	; error closing. Seems like we could have a potential infinite loop
 12836                                  	; here. This has to be verified.
 12837                                  
 12838 000019FA 3C06                    	cmp	al,error_invalid_handle ; 6
 12839 000019FC 74F1                    	je	short LRUClose
 12840                                  errorbadSFT:
 12841 000019FE F9                      	stc
 12842 000019FF EB05                    	JMP	short LRUDead
 12843                                  LRUDone:
 12844 00001A01 30C0                    	XOR	AL,AL
 12845 00001A03 E80401                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12846                                  
 12847                                  LRUDead:
 12848 00001A06 E842EA                  	call	restore_world		; use macro
 12849                                  	
 12850 00001A09 07                      	pop	es ; * (MSDOS 6.21)
 12851                                  
 12852                                  	;getdseg <es>
 12853 00001A0A 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12854 00001A0F 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12855                                  
 12856                                  	;;retnc
 12857                                  	;jc	short LruFCB_err
 12858                                  	;retn
 12859                                  
 12860                                  	; 16/12/2022
 12861                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12862 00001A14 7302                    	jnc	short LruFCB_retn
 12863                                  	;jc	short LruFCB_err
 12864                                  	;retn
 12865                                  		
 12866                                  LruFCB_err:
 12867 00001A16 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12868                                  LruFCB_retn:
 12869 00001A18 C3                      	retn
 12870                                  	
 12871                                  ;LruFCB	ENDP
 12872                                  
 12873                                  ; 17/05/2019 - Retro DOS v4.0
 12874                                  
 12875                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12876                                  
 12877                                  ; 26/06/2024
 12878                                  %if 0
 12879                                  
 12880                                  ; --------------------------------------------------------------------------
 12881                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12882                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12883                                  ; to copy the name to different destinations
 12884                                  ;
 12885                                  ; Inputs: ds:si = source string
 12886                                  ;	 es:di = destination string
 12887                                  ;	 cx = length of string
 12888                                  ;
 12889                                  ; Outputs: String copied to destination
 12890                                  ;
 12891                                  ; Registers affected: cx,di,si
 12892                                  ; --------------------------------------------------------------------------
 12893                                  
 12894                                  RegenCopyName:
 12895                                  CopyName:
 12896                                  	lodsb			;load character
 12897                                  	call	UCase		; convert char to upper case
 12898                                  StuffChar2:
 12899                                  	STOSB			;store converted character
 12900                                  	LOOP	CopyName	;
 12901                                  DoneName:
 12902                                  	retn
 12903                                  
 12904                                  %endif
 12905                                  ; --------------------------------------------------------------------------
 12906                                  
 12907                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12908                                  FCBRegen:
 12909                                  	; called from SFTFromFCB. SS already DOSDATA
 12910                                  
 12911                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12912                                  	; we do not fill, size we do no fill, position we do not fill,
 12913                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12914                                  
 12915                                  	;mov	al,[si+19h]
 12916 00001A19 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12917                                  
 12918                                  	; We discriminate based on the first two bits in the reserved field.
 12919                                  	
 12920                                  	;test	al,80h
 12921 00001A1C A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12922 00001A1E 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12923                                  
 12924                                  	; The FCB is for a network or a sharing based system. At this point 
 12925                                  	; we have already closed the SFT for this guy and reconnection is 
 12926                                  	; impossible.
 12927                                  	;
 12928                                  	; Remember that he may have given us a FCB with bogus information in
 12929                                  	; it. Check to see if sharing is present or if the redir is present.
 12930                                  	; If either is around, presume that we have cycled out the FCB and 
 12931                                  	; give the hard error. Otherwise, just return with carry set.
 12932                                  
 12933 00001A20 E87057                  	call	CheckShare		; test for sharer
 12934 00001A23 7509                    	JNZ	short RegenFail		; yep, fail this.
 12935                                  	
 12936                                  	;mov	ax,1100h
 12937 00001A25 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12938 00001A28 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12939                                  			; Return: AL = 00h  not installed, OK to install
 12940                                  			; 01h  not installed, not OK to install
 12941                                  			; FFh  installed
 12942 00001A2A 08C0                    	OR	AL,AL			; is it there?
 12943 00001A2C 740C                    	JZ	short RegenDead		; no, just fail the operation
 12944                                  RegenFail:
 12945                                  	; 17/05/2019 - Retro DOS v4.0
 12946                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12947 00001A2E 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12948                                  
 12949                                  	;cmp	ah,10h
 12950 00001A32 80FC10                  	cmp	AH,FCB_CLOSE
 12951 00001A35 7403                    	jz	short RegenDead
 12952 00001A37 E88801                  	call	FCBHardErr		; massive hard error.
 12953                                  RegenDead:
 12954 00001A3A F9                      	STC				; carry set
 12955                                  FCBRegen_retn:
 12956 00001A3B C3                      	retn
 12957                                  
 12958                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12959                                  	; so fail the operation.
 12960                                  
 12961                                  RegenNoSharing:
 12962 00001A3C E85457                  	call	CheckShare		; Sharing around?
 12963 00001A3F 75ED                    	JNZ	short RegenFail
 12964                                  	
 12965                                  	; Find an SFT for this guy.
 12966                                  	
 12967                                  	; 17/05/2019 - Retro DOS v4.0
 12968                                  
 12969                                  	; MSDOS 3.3
 12970                                  	;call	LRUFCB
 12971                                  	;jc	short FCBRegen_retn
 12972                                  	
 12973                                  	; MSDOS 6.0
 12974 00001A41 50                      	push	ax
 12975 00001A42 B000                    	mov	al,0			;indicate it is a regen operation
 12976 00001A44 E8EEFE                  	call	LRUFCB
 12977 00001A47 58                      	pop	ax
 12978 00001A48 72F1                    	jc	short FCBRegen_retn
 12979                                  
 12980                                  	;mov	word [es:di+2],8002h
 12981 00001A4A 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12982 00001A50 243F                    	AND	AL,3Fh			; get drive number for flags
 12983 00001A52 98                      	CBW
 12984                                  	;or	ax,4000h
 12985 00001A53 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12986                                  
 12987                                  	; The bits field consists of the upper two bits (dirty and device) 
 12988                                  	; from the SFT and the low 4 bits from the open mode.
 12989                                  
 12990                                  	;mov	cl,[si+1Ah]
 12991 00001A56 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12992 00001A59 88CD                    	MOV	CH,CL
 12993 00001A5B 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12994 00001A5E 08E8                    	OR	AL,CH
 12995                                  	;and	cl,0Fh
 12996 00001A60 80E10F                  	AND	CL,access_mask		; get the mode bits
 12997                                  	;mov	[es:di+2],cl
 12998 00001A63 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12999                                  	;mov	[es:di+5],ax
 13000 00001A67 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 13001                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 13002 00001A6B 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 13003                                  	;mov	[es:di+31h],ax
 13004 00001A6F 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 13005 00001A73 1E                      	push	ds
 13006 00001A74 56                      	push	si
 13007 00001A75 06                      	push	es
 13008 00001A76 57                      	push	di
 13009 00001A77 16                      	push	ss
 13010 00001A78 07                      	pop	es
 13011 00001A79 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 13012                                  
 13013 00001A7C B90800                  	MOV	CX,8
 13014 00001A7F 46                      	INC	SI			; Skip past drive byte to name in FCB
 13015                                  
 13016                                  	; MSDOS 3.3
 13017                                  ;RegenCopyName:
 13018                                  	;lodsb
 13019                                  	;call	UCase
 13020                                  	;stosb
 13021                                  	;loop	RegenCopyName
 13022                                  
 13023                                  	; MSDOS 6.0
 13024 00001A80 E87F00                  	call	RegenCopyName		;copy the name to NAME1
 13025                                  
 13026 00001A83 16                      	push	ss	; SS is DOSDATA
 13027 00001A84 1F                      	pop	ds
 13028                                  
 13029                                  	;mov	byte [ATTRIB],16h
 13030 00001A85 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 13031                                  					; Must set this to something interesting
 13032                                  					; to call DEVNAME.
 13033 00001A8A E82126                  	call	DEVNAME 		; check for device
 13034 00001A8D 5E                      	pop	si
 13035 00001A8E 07                      	pop	es
 13036 00001A8F 5E                      	pop	si
 13037 00001A90 1F                      	pop	ds
 13038 00001A91 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 13039                                  
 13040                                  	; Device found. We can ignore disk-specific info
 13041                                  
 13042                                  	;mov	[es:di+5],bh
 13043 00001A93 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 13044                                  	;mov	byte [es:di+4],0
 13045 00001A97 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 13046                                  					; SS override
 13047                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 13048 00001A9C 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 13049                                  regen_save_dpb:	; 26/06/2024
 13050                                  	;mov	[es:di+7],si
 13051 00001AA1 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13052                                  	;mov	[es:di+9],ds
 13053 00001AA5 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13054 00001AA9 C3                      	retn				; carry is clear
 13055                                  
 13056                                  RegenDeadJ:
 13057 00001AAA EB8E                    	JMP	short RegenDead
 13058                                  
 13059                                  	; File found. Just copy in the remaining pieces.
 13060                                  
 13061                                  RegenFileNoSharing:
 13062                                  	;mov	ax,[es:di+5]
 13063 00001AAC 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13064 00001AB0 83E03F                  	AND	AX,03Fh
 13065 00001AB3 1E                      	push	ds
 13066 00001AB4 56                      	push	si
 13067 00001AB5 E89C4D                  	call	FIND_DPB
 13068                                  	;;mov	[es:di+7],si
 13069                                  	;MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13070                                  	;;mov	[es:di+9],ds
 13071                                  	;MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13072                                  	; 26/06/2024 (PCDOS 7.1 IBMDOS.COM)
 13073 00001AB8 E8E6FF                  	call	regen_save_dpb
 13074 00001ABB 5E                      	pop	si
 13075 00001ABC 1F                      	pop	ds
 13076 00001ABD 72EB                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13077                                  					; indicator was bogus
 13078                                  	;mov	ax,[si+1Dh]
 13079 00001ABF 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13080                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13081                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13082 00001AC2 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13083                                  
 13084                                  	; MSDOS 6.0
 13085                                  
 13086                                  	; SR;
 13087                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13088                                  	; number
 13089                                  
 13090                                  	;mov	al,[si+18h]
 13091 00001AC6 8A4418                  	mov	al,[si+fcb_sfn]
 13092 00001AC9 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13093 00001ACB 88C4                    	mov	ah,al
 13094 00001ACD D0C4                    	rol	ah,1
 13095 00001ACF D0E8                    	shr	al,1
 13096 00001AD1 08E0                    	or	al,ah
 13097 00001AD3 243F                    	and	al,03Fh		;mask off unused bits
 13098                                  	;mov	[es:di+4],al
 13099 00001AD5 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13100                                  
 13101                                  	; SR;
 13102                                  	; Update the higher word of the directory sector from the FCB
 13103                                  
 13104                                  	;;mov	al,[si+18h]
 13105 00001AD9 8A4418                  	mov	al,[si+fcb_sfn]
 13106 00001ADC 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13107 00001ADE 28E4                    	sub	ah,ah
 13108                                  	;mov	[es:di+1Dh],ax
 13109 00001AE0 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13110                                  
 13111                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13112                                  	;mov	ax,[si+1Bh]
 13113 00001AE4 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13114                                  	;mov	[es:di+0Bh],ax
 13115 00001AE7 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13116                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13117                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13118 00001AEB 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13119                                  	;mov	al,[si+1Fh]
 13120 00001AEF 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13121                                  	;mov  	[es:di+1Fh],al
 13122 00001AF2 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13123                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13124 00001AF6 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13125                                  					; Existing FCB entries would be
 13126                                  					; flushed unnecessarily because of
 13127                                  					; check in CheckFCB of the ref_count.
 13128                                  					; July 22/85 - BAS
 13129                                  	;lea	si,[si+1]
 13130 00001AF9 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13131                                  	;lea	di,[di+20h]
 13132 00001AFC 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13133                                  	;mov	cx,11
 13134 00001AFF B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13135                                  	
 13136                                  	; 26/06/2024
 13137                                  	; MSDOS 6.0
 13138                                  	;call	RegenCopyName	;copy name to SFT
 13139                                  	; 26/06/2024
 13140                                  	; cf = 0 (at the result of the 'test' instruction) 
 13141                                  	
 13142                                  	; MSDOS 3.3
 13143                                  ;RegenCopyName2:
 13144                                  	;lodsb
 13145                                  	;call    UCase
 13146                                  	;stosb
 13147                                  	;loop    RegenCopyName2
 13148                                  
 13149                                  	; 26/06/2024
 13150                                  	; cf = 0
 13151                                  	;clc
 13152                                  	;retn
 13153                                  
 13154                                  ; 26/06/2024
 13155                                  %if 1
 13156                                  
 13157                                  ; --------------------------------------------------------------------------
 13158                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 13159                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 13160                                  ; to copy the name to different destinations
 13161                                  ;
 13162                                  ; Inputs: ds:si = source string
 13163                                  ;	 es:di = destination string
 13164                                  ;	 cx = length of string
 13165                                  ;
 13166                                  ; Outputs: String copied to destination
 13167                                  ;
 13168                                  ; Registers affected: cx,di,si
 13169                                  ; --------------------------------------------------------------------------
 13170                                  
 13171                                  RegenCopyName:
 13172                                  CopyName:
 13173 00001B02 AC                      	lodsb			;load character
 13174 00001B03 E80134                  	call	UCase ; *	; convert char to upper case
 13175                                  StuffChar2:
 13176 00001B06 AA                      	STOSB			;store converted character
 13177 00001B07 E2F9                    	LOOP	CopyName	;
 13178                                  	; 26/06/2024
 13179                                  	; cf= 0 ; *
 13180                                  DoneName:
 13181 00001B09 C3                      	retn
 13182                                  
 13183                                  %endif
 13184                                  
 13185                                  ; 17/05/2019 - Retro DOS v4.0
 13186                                  
 13187                                  ;**	BlastSFT - FIll SFT with Garbage
 13188                                  ; --------------------------------------------------------------------------
 13189                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13190                                  ;	various garbage values to put into the SFT.  I don't know why,
 13191                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13192                                  ;	necessary to show that the SFT is free after filling it.
 13193                                  ;
 13194                                  ;	ENTRY	(es:di) = address of SFT
 13195                                  ;		(al) = fill character
 13196                                  ;	EXIT	(ax) = -1
 13197                                  ;		'C' clear
 13198                                  ;	USES	AX, CX, Flags
 13199                                  
 13200                                  BlastSFT:
 13201 00001B0A 57                      	push	di
 13202                                  	;mov	cx,53 ; MSDOS 3.3
 13203                                  	;mov	cx,59 ; MSDOS 6.0
 13204 00001B0B B93B00                  	mov	cx,SF_ENTRY.size
 13205 00001B0E F3AA                    	rep	stosb
 13206 00001B10 5F                      	pop	di
 13207 00001B11 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13208 00001B13 268905                  	mov	[es:di],ax
 13209                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13210                                  	;mov	[es:di+15h],ax
 13211 00001B16 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13212 00001B1A 48                      	dec	ax	; -1					    ;
 13213                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13214 00001B1B 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13215                                  BlastSFT_retn:
 13216 00001B1F C3                      	retn				; return with 'C' clear     ;
 13217                                  
 13218                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13219                                  ; --------------------------------------------------------------------------
 13220                                  ;
 13221                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13222                                  ;   regenerated.
 13223                                  ;
 13224                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13225                                  ;		AL is SFT index
 13226                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13227                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13228                                  ;   Registers modified: AX and BX
 13229                                  ;
 13230                                  ; --------------------------------------------------------------------------
 13231                                  
 13232                                  	; 21/01/2024
 13233                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13234                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13235                                  CheckFCB:
 13236                                  		
 13237                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13238                                  
 13239                                  	; MSDOS 3.3
 13240                                  
 13241                                  	; LES	DI,[CS:SFTFCB]
 13242                                  
 13243                                  	; MSDOS 6.0
 13244                                  	
 13245                                  	; SR;
 13246                                  	; We check if the given FCB is for a local file. If so, we return a 
 13247                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13248                                  
 13249                                  	;test	byte [si+19h],0C0h
 13250 00001B20 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13251 00001B24 7464                    	jz	short BadSFT		;Local file, return bad SFT
 13252 00001B26 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13253                                  
 13254                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13255                                  	;cmp	[es:di+4],al
 13256 00001B2B 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13257 00001B2F 7259                    	JC	short BadSFT
 13258                                  	;;mov	bl,53 ; MSDOS 3.3
 13259                                  	;mov	bl,59 ; MSDOS 6.0
 13260 00001B31 B33B                    	MOV	BL,SF_ENTRY.size
 13261 00001B33 F6E3                    	MUL	BL
 13262                                  	;lea	di,[di+6]
 13263 00001B35 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13264 00001B38 01C7                    	ADD	DI,AX
 13265                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13266 00001B3A 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13267                                  	;cmp	[es:di+31h],ax
 13268 00001B3E 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13269 00001B42 7546                    	JNZ	short BadSFT		; must match process
 13270 00001B44 26833D00                	cmp	word [es:di],0
 13271                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13272 00001B48 7440                    	JZ	short BadSFT		; must also be in use
 13273                                  	;mov	al,[si+19h]
 13274 00001B4A 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13275                                  	;test	al,80h
 13276 00001B4D A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13277 00001B4F 7427                    	JZ	short CheckNoShare	; No. try local or device
 13278                                  
 13279                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13280                                  	; FCBSHARE is a superset of FCBNETWORK.
 13281                                  
 13282 00001B51 50                      	PUSH	AX
 13283                                  	;and	al,0C0h
 13284 00001B52 24C0                    	AND	AL,FCBMASK
 13285                                  	;cmp	al,0C0h
 13286 00001B54 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13287 00001B56 58                      	POP	AX
 13288 00001B57 7515                    	JNZ	short CheckNet		; yes
 13289                                  ;
 13290                                  ;----- In share support -----
 13291                                  ;
 13292                                  	;call	far [cs:JShare+(11*4)]
 13293 00001B59 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13294 00001B5E 722A                    	JC	short BadSFT
 13295                                  
 13296                                  ; 21/01/2024
 13297                                  %if 0
 13298                                  	JMP	SHORT CheckD
 13299                                  ;
 13300                                  ;----- End in share support -----
 13301                                  ;
 13302                                  	; 09/11/2022
 13303                                  	; (There is not any procedure/sub
 13304                                  	;  which calls or jumps to CheckFirClus here)
 13305                                  	;;;
 13306                                  CheckFirClus:
 13307                                  	;cmp     bx,[es:di+0Bh]
 13308                                  	; 07/12/2022
 13309                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13310                                  	JNZ	short BadSFT
 13311                                  	;;;
 13312                                  %endif
 13313                                  
 13314                                  CheckD:
 13315 00001B60 243F                    	AND	AL,3Fh
 13316                                  	;mov	ah,[es:di+5]
 13317 00001B62 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13318 00001B66 80E43F                  	AND	AH,3Fh
 13319 00001B69 38C4                    	CMP	AH,AL
 13320                                  	; 26/06/2024
 13321                                  	; 16/12/2022
 13322                                  	;jz	short BlastSFT_retn	; carry is clear
 13323                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13324 00001B6B 751D                    	jnz	short BadSFT
 13325                                  CheckD_retn:
 13326 00001B6D C3                      	retn
 13327                                  
 13328                                  ; 26/06/2024
 13329                                  ;BadSFT: 
 13330                                  ;	STC
 13331                                  ;	retn
 13332                                  
 13333                                  CheckNet:
 13334                                  	; 17/05/2019 - Retro DOS v4.0
 13335                                  	
 13336                                  ;----- In net support -----
 13337                                  
 13338                                  	; MSDOS 3.3
 13339                                  	;;mov	ax,[si+1Ah]
 13340                                  	;mov	ax,[si+fcb_net_handle]
 13341                                  	;;cmp	ax,[es:di+1Dh]
 13342                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13343                                  	;jnz	short BadSFT
 13344                                  	;;cmp	ax,[es:di+19h]
 13345                                  	;cmp	ax,[ES:DI+sf_netid]
 13346                                  	;jnz     short BadSFT
 13347                                  	;;mov	ax,[si+1Eh]
 13348                                  	;mov	ax,[si+fcb_l_attr]
 13349                                  	;;cmp	ax,[es:di+1Bh]
 13350                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13351                                  	;jnz     short BadSFT
 13352                                  
 13353                                  	; MSDOS 6.0
 13354                                  	;mov	ax,[si+1Ch]
 13355 00001B6E 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13356                                  	; 09/11/2022
 13357                                  	;cmp	ax,[es:di+0Bh] 
 13358 00001B71 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13359 00001B75 7513                    	JNZ	short BadSFT
 13360                                  
 13361                                  ;----- END In net support -----
 13362                                  
 13363                                  CheckNet_retn:
 13364 00001B77 C3                      	retn
 13365                                  
 13366                                  CheckNoShare:
 13367                                  
 13368                                  ; 16/12/2022
 13369                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13370                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13371                                  ;	;test	al,40h
 13372                                  ;	test	AL,FCBDEVICE		; Device?
 13373                                  ;	;jnz	short $+2 ; 09/11/2022
 13374                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13375                                  
 13376                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13377                                  	;;mov	bx,[si+1Dh]
 13378                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13379                                  	;;cmp	bx,[es:di+1Dh]
 13380                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13381                                  	;jnz	short BadSFT
 13382                                  	;;mov	bl,[si+1Fh]
 13383                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13384                                  	;;cmp	bl,[es:di+1Fh]
 13385                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13386                                  	;jnz	short BadSFT
 13387                                  	;;mov	bl,[si+1Ah]
 13388                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13389                                  	;;mov	bh,[es:di+5]
 13390                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13391                                  	;xor	bh,bl
 13392                                  	;and	bh,0C0h
 13393                                  	;jnz	short BadSFT
 13394                                  	;;xor	bl,[es:di+2]
 13395                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13396                                  	;and	bl,0Fh
 13397                                  	;jnz	short BadSFT
 13398                                  	;push	di
 13399                                  	;push	si
 13400                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13401                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13402                                  	;;lea	si,[si+1]
 13403                                  	;LEA	SI,[SI+SYS_FCB.name]
 13404                                  	;;mov	cx,11
 13405                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13406                                  	;repe	cmpsb
 13407                                  	;pop	si
 13408                                  	;pop	di
 13409                                  	;jnz	short BadSFT
 13410                                  	;;mov	bx,[si+1Bh]
 13411                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13412                                  	;jmp	short CheckFirClus
 13413                                  
 13414                                  	; MSDOS 6.0
 13415                                  
 13416                                  	; SR;
 13417                                  	; The code below to match a local FCB with its SFT can no longer be
 13418                                  	; used. We just return a no-match status. This check is done right
 13419                                  	; at the top.
 13420                                  
 13421                                  CheckNoShareDev:
 13422                                  	;mov	bx,[si+1Ah]
 13423 00001B78 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13424                                  	;cmp	bx,[es:di+7]
 13425 00001B7B 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13426 00001B7F 7509                    	JNZ	short BadSFT
 13427                                  	;mov	bx,[si+1Ch]
 13428 00001B81 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13429                                  	;cmp	bx,[es:di+9]
 13430 00001B84 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13431                                  	;JNZ	short BadSFT
 13432                                  	;JMP	short CheckD
 13433                                  	; 26/06/2024
 13434 00001B88 74D6                    	jz	short CheckD
 13435                                  
 13436                                  ; 26/06/2024
 13437                                  BadSFT: 
 13438 00001B8A F9                      	STC
 13439 00001B8B C3                      	retn
 13440                                  
 13441                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13442                                  ;----------------------------------------------------------------------------
 13443                                  ;
 13444                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13445                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13446                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13447                                  ;	with PID
 13448                                  ;
 13449                                  ;   Inputs:	DS:SI point to FCB
 13450                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13451                                  ;		Carry clear -> OK ES:DI -> SFT
 13452                                  ;		Carry set -> error in ax
 13453                                  ;   Registers modified: ES,DI, AX
 13454                                  ;
 13455                                  ;----------------------------------------------------------------------------
 13456                                  
 13457                                  SFTFromFCB:
 13458                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13459                                  
 13460                                  	; 17/05/2019 - Retro DOS v4.0
 13461                                  
 13462 00001B8C 50                      	push	ax
 13463 00001B8D 53                      	push	bx
 13464                                  	;mov	al,[si+18h]
 13465 00001B8E 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13466 00001B91 E88CFF                  	call	CheckFCB
 13467 00001B94 5B                      	pop	bx
 13468 00001B95 58                      	pop	ax
 13469                                  	;MOV	[CS:THISSFT],DI		; SS override
 13470                                  	;MOV	[CS:THISSFT+2],ES
 13471 00001B96 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13472 00001B9B 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13473 00001BA0 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13474                                  	
 13475                                  	; 09/11/2022 (MSDOS 5.0)
 13476                                  	; 31/05/2019
 13477 00001BA2 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13478 00001BA3 E8BCE8                  	call	save_world
 13479 00001BA6 E870FE                  	call	FCBRegen
 13480 00001BA9 E89FE8                  	call	restore_world		; use macro restore world
 13481 00001BAC 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13482                                  
 13483                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13484 00001BAD 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13485 00001BB1 72C4                    	jc	short CheckNet_retn
 13486                                  
 13487                                  Set_SFT: 
 13488                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13489 00001BB3 36C43E[9E05]            	les	di,[ss:THISSFT]
 13490                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13491 00001BB8 36FF36[3C03]            	push	word [ss:PROC_ID]
 13492                                  	;pop	word [es:di+31h]
 13493 00001BBD 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13494 00001BC1 C3                      	retn				; carry is clear
 13495                                  
 13496                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13497                                  ;----------------------------------------------------------------------------
 13498                                  ;
 13499                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13500                                  ;	unavailable FCB.
 13501                                  ;
 13502                                  ;   Inputs:	none.
 13503                                  ;   Outputs:	none.
 13504                                  ;   Registers modified: all
 13505                                  ;
 13506                                  ;----------------------------------------------------------------------------
 13507                                  
 13508                                  FCBHardErr:
 13509                                  	; 17/05/2019 - Retro DOS v4.0
 13510 00001BC2 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13511                                  	;
 13512                                  	;mov	ax,23h
 13513 00001BC7 B82300                  	MOV	AX,error_FCB_unavailable
 13514                                  	;;mov	byte [cs:ALLOWED],8
 13515                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13516 00001BCA 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13517                                  	
 13518                                  	;LES	BP,[CS:THISDPB]
 13519 00001BD0 26C42E[8A05]            	les	bp,[es:THISDPB]
 13520                                  	
 13521 00001BD5 BF0100                  	MOV	DI,1			; Fake some registers
 13522 00001BD8 89F9                    	MOV	CX,DI
 13523                                  	;mov	dx,[es:bp+0Bh]
 13524 00001BDA 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13525 00001BDE E8E035                  	call	HARDERR
 13526 00001BE1 F9                      	STC
 13527 00001BE2 C3                      	retn
 13528                                  
 13529                                  ;============================================================================
 13530                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13531                                  ;============================================================================
 13532                                  ; 21/07/2018 - Retro DOS v3.0
 13533                                  ; 17/05/2019 - Retro DOS v4.0
 13534                                  
 13535                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13536                                  ;
 13537                                  ;	GetRR
 13538                                  ;	GetExtent
 13539                                  ;	SetExtent
 13540                                  ;	GetExtended
 13541                                  ;	GetRecSize
 13542                                  ;	FCBIO
 13543                                  ;	$FCB_OPEN
 13544                                  ;	$FCB_CREATE
 13545                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13546                                  ;	$FCB_RANDOM_READ_BLOCK
 13547                                  ;	$FCB_SEQ_READ
 13548                                  ;	$FCB_SEQ_WRITE
 13549                                  ;	$FCB_RANDOM_READ
 13550                                  ;	$FCB_RANDOM_WRITE
 13551                                  ;
 13552                                  ;	Revision history:
 13553                                  ;
 13554                                  ;		Created: ARR 4 April 1983
 13555                                  ;			 MZ  6 June  1983 completion of functions
 13556                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13557                                  ;				  times.  Change so successive closes work by
 13558                                  ;				  always returning OK.	Also, detect I/O to
 13559                                  ;				  already closed FCB and return EOF.
 13560                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13561                                  ;				  out of sft into FCB for reconnection
 13562                                  ;
 13563                                  ;	    A000   version 4.00	Jan. 1988
 13564                                  
 13565                                  ; Defintions for FCBOp flags
 13566                                  
 13567                                  RANDOM	equ 2				; random operation
 13568                                  FCBREAD equ 4				; doing a read
 13569                                  BLOCK	equ 8				; doing a block I/O
 13570                                  
 13571                                  ;Break <GetRR - return the random record field in DX:AX>
 13572                                  ;---------------------------------------------------------------------------
 13573                                  ;
 13574                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13575                                  ;	from the FCB pointed to by DS:SI
 13576                                  ;
 13577                                  ;   Inputs:	DS:SI point to an FCB
 13578                                  ;		BX has record size
 13579                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13580                                  ;   Registers modified: none
 13581                                  ;---------------------------------------------------------------------------
 13582                                  
 13583                                  GetRR:
 13584                                  	;mov	ax,[si+21h]
 13585 00001BE3 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13586                                  	;mov	dx,[si+23h]
 13587 00001BE6 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13588 00001BE9 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13589 00001BEC 7202                    	JB	short GetRRBye
 13590                                  GetExtent_bye:	; 21/01/2024
 13591 00001BEE 30F6                    	XOR	DH,DH
 13592                                  GetRRBye:
 13593 00001BF0 C3                      	retn
 13594                                  
 13595                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13596                                  ;---------------------------------------------------------------------------
 13597                                  ;
 13598                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13599                                  ;	NR fields in the FCB.
 13600                                  ;
 13601                                  ;   Inputs:	DS:SI - point to FCB
 13602                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13603                                  ;   Registers modified: none
 13604                                  ;---------------------------------------------------------------------------
 13605                                  
 13606                                  GetExtent:
 13607                                  	;mov	al,[si+20h]
 13608 00001BF1 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13609                                  	;mov	dx,[si+0Ch]
 13610 00001BF4 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13611 00001BF7 D0E0                    	SHL	AL,1
 13612 00001BF9 D1EA                    	SHR	DX,1
 13613 00001BFB D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13614 00001BFD 88D4                    	MOV	AH,DL
 13615 00001BFF 88F2                    	MOV	DL,DH
 13616                                  	; 21/01/2024
 13617                                  	;XOR	DH,DH
 13618                                  	;retn
 13619 00001C01 EBEB                    	jmp	short GetExtent_bye
 13620                                  
 13621                                  ;Break <SetExtent - update the extent/NR field>
 13622                                  ;---------------------------------------------------------------------------
 13623                                  ;
 13624                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13625                                  ;	fields
 13626                                  ;
 13627                                  ;   Inputs:	DS:SI point to FCB
 13628                                  ;		DX:AX is a record location in file
 13629                                  ;   Outputs:	Extent/NR fields are filled in
 13630                                  ;   Registers modified: CX
 13631                                  ;---------------------------------------------------------------------------
 13632                                  
 13633                                  SetExtent:
 13634 00001C03 50                      	push	ax
 13635 00001C04 52                      	push	dx
 13636 00001C05 89C1                    	MOV	CX,AX
 13637 00001C07 247F                    	AND	AL,7FH			; next rec field
 13638                                  	;mov	[si+20h],al
 13639 00001C09 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13640 00001C0C 80E180                  	AND	CL,80H			; save upper bit
 13641 00001C0F D1E1                    	SHL	CX,1
 13642 00001C11 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13643 00001C13 88E8                    	MOV	AL,CH
 13644 00001C15 88D4                    	MOV	AH,DL
 13645                                  	;mov	[si+0Ch], ax
 13646 00001C17 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13647 00001C1A 5A                      	pop	dx
 13648 00001C1B 58                      	pop	ax
 13649 00001C1C C3                      	retn
 13650                                  
 13651                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13652                                  ;---------------------------------------------------------------------------
 13653                                  ;
 13654                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13655                                  ;
 13656                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13657                                  ;   Outputs:	DS:SI point to the FCB part
 13658                                  ;		zeroflag set if not extended fcb
 13659                                  ;   Registers modified: SI
 13660                                  ;---------------------------------------------------------------------------
 13661                                  
 13662                                  GetExtended:
 13663 00001C1D 89D6                    	MOV	SI,DX			; point to Something
 13664 00001C1F 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13665 00001C22 7503                    	JNZ	short GetBye		; not there
 13666 00001C24 83C607                  	ADD	SI,7			; point to FCB
 13667                                  GetBye:
 13668 00001C27 39D6                    	CMP	SI,DX			; set condition codes
 13669                                  getextd_retn:
 13670 00001C29 C3                      	retn
 13671                                  
 13672                                  ;Break <GetRecSize - return in BX the FCB record size>
 13673                                  ;---------------------------------------------------------------------------
 13674                                  ;
 13675                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13676                                  ;
 13677                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13678                                  ;   Outputs:	BX contains the record size
 13679                                  ;   Registers modified: None
 13680                                  ;---------------------------------------------------------------------------
 13681                                  
 13682                                  	; 22/01/2024
 13683                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13684                                  GetRecSize:
 13685                                  	;mov	bx,[si+0Eh]
 13686 00001C2A 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13687 00001C2D 09DB                    	OR	BX,BX			; is it nul?
 13688                                  	;jz	short getextd_retn
 13689                                  	; 22/01/2024 (BugFix)
 13690 00001C2F 75F8                    	jnz	short getextd_retn
 13691                                  	;MOV	BX,128			; use default size
 13692 00001C31 B380                    	mov	bl,128
 13693                                  	;mov	[si+0Eh],bx
 13694 00001C33 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13695 00001C36 C3                      	retn
 13696                                  ; 23/01/2024 - Retro DOS v5.0
 13697                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13698                                  ; 23/01/2024 - Retro DOS v4.2
 13699                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13700                                  ; 23/01/2024 - Retro DOS v4.1
 13701                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13702                                  
 13703                                  ; 22/07/2018 - Retro DOS v3.0
 13704                                  
 13705                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13706                                  ;----------------------------------------------------------------------------
 13707                                  ;
 13708                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13709                                  ;	and write a number of blocks from it.
 13710                                  ;
 13711                                  ;   Inputs:	DS:DX point to an FCB
 13712                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13713                                  ;		AL <> 0 Not enough room on disk for the output
 13714                                  ;
 13715                                  ;----------------------------------------------------------------------------
 13716                                  
 13717                                  _$FCB_RANDOM_WRITE_BLOCK:
 13718                                  	;mov	AL,0Ah
 13719 00001C37 B00A                    	MOV	AL,RANDOM+BLOCK
 13720 00001C39 EB12                    	JMP	short FCBIO	; 23/01/2024
 13721                                  
 13722                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13723                                  ;----------------------------------------------------------------------------
 13724                                  ;
 13725                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13726                                  ;	and read a number of blocks from it.
 13727                                  ;
 13728                                  ;   Inputs:	DS:DX point to an FCB
 13729                                  ;   Outputs:	AL = error codes defined above
 13730                                  ;
 13731                                  ;----------------------------------------------------------------------------
 13732                                  
 13733                                  _$FCB_RANDOM_READ_BLOCK:
 13734                                  	;mov	AL,0Eh
 13735 00001C3B B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13736 00001C3D EB0E                    	JMP	short FCBIO	; 23/01/2024
 13737                                  
 13738                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13739                                  ;----------------------------------------------------------------------------
 13740                                  ;
 13741                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13742                                  ;	memory
 13743                                  ;
 13744                                  ;   Inputs:	DS:DX point to an FCB
 13745                                  ;   Outputs:	AL = error codes defined above
 13746                                  ;
 13747                                  ;----------------------------------------------------------------------------
 13748                                  
 13749                                  _$FCB_SEQ_READ:
 13750                                  	;mov	AL,4
 13751 00001C3F B004                    	MOV	AL,FCBREAD
 13752 00001C41 EB0A                    	JMP	short FCBIO	; 23/01/2024
 13753                                  
 13754                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13755                                  ;----------------------------------------------------------------------------
 13756                                  ;
 13757                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13758                                  ;	file
 13759                                  ;
 13760                                  ;   Inputs:	DS:DX point to an FCB
 13761                                  ;   Outputs:	AL = error codes defined above
 13762                                  ;
 13763                                  ;----------------------------------------------------------------------------
 13764                                  
 13765                                  _$FCB_SEQ_WRITE:
 13766 00001C43 B000                    	MOV	AL,0
 13767 00001C45 EB06                    	JMP	short FCBIO	; 23/01/2024
 13768                                  
 13769                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13770                                  ;----------------------------------------------------------------------------
 13771                                  ;
 13772                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13773                                  ;	record from it.
 13774                                  ;
 13775                                  ;   Inputs:	DS:DX point to an FCB
 13776                                  ;   Outputs:	AL = error codes defined above
 13777                                  ;
 13778                                  ;----------------------------------------------------------------------------
 13779                                  
 13780                                  _$FCB_RANDOM_READ:
 13781                                  	;mov	AL,6
 13782 00001C47 B006                    	MOV	AL,RANDOM+FCBREAD
 13783                                  	; 23/01/2024
 13784                                  	;jmp	FCBIO 		; single block
 13785 00001C49 EB02                    	jmp	short FCBIO
 13786                                  
 13787                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13788                                  ;----------------------------------------------------------------------------
 13789                                  ;
 13790                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13791                                  ;	a record to it.
 13792                                  ;
 13793                                  ;   Inputs:	DS:DX point to an FCB
 13794                                  ;   Outputs:	AL = error codes defined above
 13795                                  ;
 13796                                  ;----------------------------------------------------------------------------
 13797                                  
 13798                                  _$FCB_RANDOM_WRITE:
 13799                                  	;mov	AL,2
 13800 00001C4B B002                    	MOV	AL,RANDOM
 13801                                  	; 23/01/2024
 13802                                  	;;jmp	FCBIO
 13803                                  	;jmp	short FCBIO
 13804                                  
 13805                                  ;BREAK <FCBIO - do internal FCB I/O>
 13806                                  ;---------------------------------------------------------------------------
 13807                                  ;
 13808                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13809                                  ;
 13810                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13811                                  ;		DS:DX point to FCB
 13812                                  ;		CX may have count of number of records to xfer
 13813                                  ;   Outputs:	AL has error code
 13814                                  ;   Registers modified: all
 13815                                  ;---------------------------------------------------------------------------
 13816                                  
 13817                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13818                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13819                                  
 13820                                  	; 23/01/2024
 13821                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13822                                  
 13823                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13824                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13825                                  
 13826                                  FCBIO:
 13827                                  
 13828                                  FEOF	EQU	1
 13829                                  FTRIM	EQU	2
 13830                                  
 13831                                  %define	FCBErr	byte [bp-1]  ; byte
 13832                                  %define	cRec	word [bp-3]  ; word
 13833                                  ;%define RecPos	word [bp-7]  ; dword
 13834                                  %define RecPosL	word [bp-7]  ; word
 13835                                  %define RecPosH	word [bp-5]  ; word
 13836                                  %define	RecSize	word [bp-9]  ; word
 13837                                  ;%define bPos	word [bp-13] ; dword
 13838                                  %define bPosL	word [bp-13] ; word
 13839                                  %define bPosH	word [bp-11] ; word
 13840                                  %define cByte	word [bp-15] ; word
 13841                                  %define cResult word [bp-17] ; word
 13842                                  %define	cRecRes	word [bp-19] ; word
 13843                                  %define	FCBOp	byte [bp-20] ; byte
 13844                                  ; 23/01/2024
 13845                                  %define bPos bp-13
 13846                                  
 13847                                  	;Enter
 13848                                  
 13849 00001C4D 55                      	push	bp
 13850 00001C4E 89E5                    	mov	bp,sp
 13851 00001C50 83EC14                  	sub	sp,20
 13852                                  	;mov	[bp-20],al
 13853 00001C53 8846EC                  	MOV	FCBOp,AL
 13854                                  	;mov	byte [bp-1],0
 13855 00001C56 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13856 00001C5A E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13857                                  	;test	byte [bp-20],8
 13858 00001C5D F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13859 00001C61 7503                    	JNZ	short GetPos
 13860 00001C63 B90100                  	MOV	CX,1			;	cRec = 1;
 13861                                  GetPos:
 13862                                  	;mov	[bp-3],cx
 13863 00001C66 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13864 00001C69 E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13865 00001C6C E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13866                                  	;mov	[bp-9],bx
 13867 00001C6F 895EF7                  	MOV	RecSize,BX
 13868                                  	;test	byte [bp-20],2
 13869 00001C72 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13870 00001C76 7403                    	JZ	short GetRec
 13871 00001C78 E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13872                                  GetRec:
 13873                                  	;mov	[bp-7],ax
 13874 00001C7B 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13875                                  	;mov	[bp-5],dx
 13876 00001C7E 8956FB                  	MOV	RecPosH,DX
 13877 00001C81 E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13878                                  	;mov	ax,[bp-5]
 13879 00001C84 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13880 00001C87 F7E3                    	MUL	BX
 13881 00001C89 89C7                    	MOV	DI,AX
 13882                                  	;mov	ax,[bp-7]
 13883 00001C8B 8B46F9                  	MOV	AX,RecPosL
 13884 00001C8E F7E3                    	MUL	BX
 13885 00001C90 01FA                    	ADD	DX,DI
 13886                                  	;mov	[bp-13],ax
 13887 00001C92 8946F3                  	MOV	bPosL,AX
 13888                                  	;mov	[bp-11],dx
 13889 00001C95 8956F5                  	MOV	bPosH,DX
 13890                                  	;mov	ax,[bp-3]
 13891 00001C98 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13892 00001C9B F7E3                    	MUL	BX
 13893                                  	;mov	[bp-15],ax
 13894 00001C9D 8946F1                  	MOV	cByte,AX
 13895                                  
 13896                                  ;hkn; 	SS override
 13897 00001CA0 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13898 00001CA5 83D200                  	ADC	DX,0
 13899 00001CA8 7419                    	JZ	short DoOper
 13900                                  	;mov	byte [bp-1],2
 13901 00001CAA C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13902                                  
 13903                                  ;hkn; 	SS override
 13904 00001CAE 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13905 00001CB2 F7D8                    	NEG	AX
 13906 00001CB4 7501                    	JNZ	short DoDiv
 13907 00001CB6 48                      	DEC	AX
 13908                                  DoDiv:
 13909 00001CB7 31D2                    	XOR	DX,DX
 13910 00001CB9 F7F3                    	DIV	BX
 13911                                  	;mov	[bp-3],ax
 13912 00001CBB 8946FD                  	MOV	cRec,AX
 13913 00001CBE F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13914                                  	;mov	[bp-15],ax
 13915 00001CC0 8946F1                  	MOV	cByte,AX		;	}
 13916                                  DoOper:
 13917 00001CC3 31DB                    	XOR	BX,BX
 13918                                  	;mov	[bp-17],bx
 13919 00001CC5 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13920                                  	;cmp	[bp-15],bx
 13921 00001CC8 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13922 00001CCB 7506                    	JNZ	short DoGetExt
 13923                                  	;test	byte [bp-1],2
 13924 00001CCD F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13925                                  	;JZ	short DoGetExt
 13926                                  	;JMP	short SkipOp
 13927                                  	; 16/12/2022
 13928 00001CD1 7572                    	jnz	short SkipOp
 13929                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13930                                  	;JZ	short DoGetExt
 13931                                  	;JMP	short SkipOp
 13932                                  DoGetExt:
 13933 00001CD3 E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13934 00001CD6 730F                    	JNC	short ContinueOp
 13935                                  FCBDeath:
 13936 00001CD8 E875E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13937                                  	;mov	word [bp-19],0
 13938 00001CDB C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13939                                  	;mov	byte [bp-1],1
 13940 00001CE0 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13941 00001CE4 E9EB00                  	JMP	FCBSave 		; bam!
 13942                                  ContinueOp:
 13943                                  	; 23/01/2024
 13944                                  	; (PCDOS 7.1 IBMDOS.COM)
 13945                                  	;
 13946                                  	;;mov	ax,[si+10h]
 13947                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13948                                  	;;mov	[es:di+11h],ax
 13949                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13950                                  	;;mov	ax,[si+12h]
 13951                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13952                                  	;;mov	[es:di+13h],ax
 13953                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13954                                  	;;;
 13955 00001CE7 1E                      	push	ds
 13956 00001CE8 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13957 00001CEB 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13958 00001CEF 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13959 00001CF3 C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13960 00001CF6 8CDA                    	mov	dx,ds
 13961 00001CF8 1F                      	pop	ds
 13962                                  	;;;
 13963                                  	;;mov	ax,[bp-13]
 13964                                  	;MOV	AX,bPosL
 13965                                  	;;mov	dx,[bp-11]
 13966                                  	;MOV	DX,bPosH
 13967                                  
 13968                                  	;mov	[es:di+15h],ax
 13969 00001CF9 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13970                                  	;xchg	dx,[es:di+17h]
 13971 00001CFD 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13972 00001D01 52                      	PUSH	DX			; save away Open age.
 13973                                  	;mov	cx,[bp-15]
 13974 00001D02 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13975                                  
 13976                                  ;hkn; DOS_Read is in DOSCODE
 13977 00001D05 BF[2132]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13978                                  	;test	byte [bp-20],4
 13979 00001D08 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13980 00001D0C 7503                    	JNZ	short DoContext
 13981                                  
 13982                                  ;hkn; DOS_Write is in DOSCODE
 13983 00001D0E BF[2134]                	MOV	DI,DOS_WRITE
 13984                                  DoContext:
 13985 00001D11 55                      	push	bp
 13986 00001D12 1E                      	push	ds
 13987 00001D13 56                      	push	si
 13988                                  
 13989                                  ;hkn; SS is DOSDATA
 13990 00001D14 16                      	push	ss
 13991 00001D15 1F                      	pop	ds
 13992                                  
 13993                                  ;; Fix for disk full
 13994 00001D16 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13995                                  	
 13996 00001D18 5E                      	pop	si
 13997 00001D19 1F                      	pop	ds
 13998 00001D1A 5D                      	pop	bp
 13999 00001D1B 72BB                    	JC	short FCBDeath
 14000                                  	
 14001 00001D1D 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 14002 00001D23 740A                    	JZ	short NODSKFULL
 14003 00001D25 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 14004                                  
 14005                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 14006                                  	;mov	byte [bp-1],1 
 14007 00001D2B C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 14008                                  
 14009                                  	; 23/01/2024
 14010                                  	; (PCDOS 7.1 IBMDOS.COM)
 14011                                  	;;mov	byte [bp-1],1 
 14012                                  	;MOV	FCBErr,FEOF		; set disk full flag
 14013                                  
 14014                                  NODSKFULL:
 14015                                  ;; Fix for disk full
 14016                                  	;mov	[bp-17],cx
 14017 00001D2F 894EEF                  	MOV	cResult,CX
 14018 00001D32 E832FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 14019                                  	;pop	word [es:di+17h]	
 14020 00001D35 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 14021                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 14022                                  
 14023                                  	; 23/01/2024
 14024                                  	; (PCDOS 7.1 IBMDOS.COM)
 14025                                  	;
 14026                                  	;;mov	ax,[es:di+11h]
 14027                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 14028                                  	;;mov	[si+10h],ax
 14029                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14030                                  	;;mov	ax,[es:di+13h]
 14031                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14032                                  	;;mov	[si+12h],ax
 14033                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14034                                  	;;;
 14035 00001D39 06                      	push	es
 14036 00001D3A 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 14037 00001D3E 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14038 00001D41 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14039 00001D44 07                      	pop	es
 14040                                  	;;;
 14041                                  					;	}
 14042                                  SkipOp:
 14043                                  	;mov	ax,[bp-17]
 14044 00001D45 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 14045 00001D48 31D2                    	XOR	DX,DX
 14046                                  	;div	word [bp-9]
 14047 00001D4A F776F7                  	DIV	RecSize
 14048                                  	;mov	[bp-19],ax
 14049 00001D4D 8946ED                  	MOV	cRecRes,AX
 14050                                  	;add	[bp-7],ax
 14051 00001D50 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 14052                                  	;adc	word [bp-5],0
 14053 00001D53 8356FB00                	ADC	RecPosH,0
 14054                                  
 14055                                  ; If we have not gotten the expected number of records, we signal an EOF
 14056                                  ; condition. On input, this is EOF. On output this is usually disk full.
 14057                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 14058                                  ; do we.
 14059                                  
 14060                                  	;cmp	ax,[bp-3]
 14061 00001D57 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 14062 00001D5A 7411                    	JZ	short TryBlank
 14063                                  	;test	byte [bp-20],4
 14064 00001D5C F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 14065 00001D60 7507                    	JNZ	short SetEOF
 14066                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14067                                  	; MSDOS 3.3
 14068                                  	;;test	word [es:di+5],80h
 14069                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14070                                  	;JNZ	short TryBlank
 14071                                  	; MSDOS 5.0 & MSDOS 6.0
 14072                                  	;test	byte [es:di+5],80h
 14073 00001D62 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 14074 00001D67 7504                    	jnz	short TryBlank
 14075                                  
 14076                                  SetEOF:
 14077                                  	;mov	byte [bp-1],1
 14078 00001D69 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 14079                                  TryBlank:				;
 14080 00001D6D 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 14081 00001D6F 7426                    	JZ	short SetExt
 14082                                  	;add	word [bp-7],1
 14083 00001D71 8346F901                	ADD	RecPosL,1		;	RecPos++;
 14084                                  	;adc	word [bp-5],0
 14085 00001D75 8356FB00                	ADC	RecPosH,0
 14086                                  	;test	byte [bp-20],4
 14087 00001D79 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 14088 00001D7D 7418                    	JZ	short SetExt
 14089                                  	;inc	word [bp-19]
 14090 00001D7F FF46ED                  	INC	cRecRes 		;	cRecRes++;
 14091                                  	;mov	byte [bp-1],3
 14092 00001D82 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 14093                                  	;mov	cx,[bp-9]
 14094 00001D86 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 14095 00001D89 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 14096 00001D8B 30C0                    	XOR	AL,AL
 14097                                  ;hkn; 	SS override
 14098 00001D8D 36C43E[2C03]            	les     di,[ss:DMAADD]
 14099                                  	;add	di,[bp-17]
 14100 00001D92 037EEF                  	ADD	DI,cResult
 14101 00001D95 F3AA                    	REP	STOSB			;   }	}
 14102                                  SetExt:
 14103                                  	;mov	dx,[bp-5]
 14104 00001D97 8B56FB                  	MOV	DX,RecPosH
 14105                                  	;mov	ax,[bp-7]
 14106 00001D9A 8B46F9                  	MOV	AX,RecPosL
 14107                                  	;test	byte [bp-20],2
 14108 00001D9D F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14109 00001DA1 7406                    	JZ	short DoSetExt
 14110                                  	;test	byte [bp-20],8
 14111 00001DA3 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14112 00001DA7 7403                    	JZ	short TrySetRR
 14113                                  DoSetExt:
 14114 00001DA9 E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14115                                  TrySetRR:
 14116                                  	;test	byte [bp-20],8
 14117 00001DAC F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14118 00001DB0 740F                    	JZ	short TryReturn
 14119                                  	;mov	[si+21h],ax
 14120 00001DB2 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14121                                  	;mov	[si+23h],dl
 14122 00001DB5 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14123                                  	;cmp	word [si+0Eh],64
 14124 00001DB8 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14125 00001DBC 7303                    	JAE	short TryReturn
 14126                                  	;mov	[si+24h],dh
 14127 00001DBE 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14128                                  TryReturn: 
 14129                                  	;test	byte [bp-20],4
 14130 00001DC1 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14131 00001DC5 750B                    	JNZ	short FCBSave
 14132 00001DC7 1E                      	push	ds			;	FCB->FDate = date;
 14133 00001DC8 E815ED                  	call	DATE16			;	FCB->FTime = time;
 14134 00001DCB 1F                      	pop	ds
 14135                                  	;mov	[si+14h],ax
 14136 00001DCC 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14137                                  	;mov	[si+16h],dx
 14138 00001DCF 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14139                                  FCBSave: 
 14140                                  	;test	byte [bp-20],8
 14141 00001DD2 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14142 00001DD6 7409                    	jz	short DoReturn
 14143                                  	;mov	cx,[bp-19]
 14144 00001DD8 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14145 00001DDB E8A3E6                  	call    Get_User_Stack
 14146                                  	;mov	[si+4],cx
 14147 00001DDE 894C04                  	MOV	[SI+user_env.user_CX],CX
 14148                                  DoReturn:
 14149                                  	;mov	al,[bp-1]
 14150 00001DE1 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14151                                  	;Leave	
 14152 00001DE4 89EC                    	mov     sp,bp
 14153 00001DE6 5D                      	pop     bp
 14154 00001DE7 C3                      	retn
 14155                                  
 14156                                  ; 22/07/2018 - Retro DOS v3.0
 14157                                  
 14158                                  ;Break <$FCB_Open - open an old-style FCB>
 14159                                  ;---------------------------------------------------------------------------
 14160                                  ;
 14161                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14162                                  ;	for us and asked to have the rest filled in.
 14163                                  ;
 14164                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14165                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14166                                  ;		FCB has the following fields filled in:
 14167                                  ;		    Time/Date Extent/NR Size
 14168                                  ;---------------------------------------------------------------------------
 14169                                  
 14170                                  _$FCB_OPEN:			; System call 15
 14171                                  
 14172 00001DE8 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14173                                  
 14174                                  ;hkn; DOS_Open is in DOSCODE
 14175 00001DEB B9[DB2A]                	MOV	CX,DOS_OPEN
 14176                                  
 14177                                  ; The following is common code for Creation and openning of FCBs. AX is
 14178                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14179                                  ; the FCB
 14180                                  
 14181                                  DoAccess:
 14182 00001DEE 1E                      	push	ds
 14183 00001DEF 52                      	push	dx
 14184 00001DF0 51                      	push	cx
 14185 00001DF1 50                      	push	ax			; save FCB pointer away
 14186                                  
 14187                                  ;hkn; 	OpenBuf is in DOSDATA
 14188 00001DF2 BF[BE03]                	MOV	DI,OPENBUF
 14189 00001DF5 E8A34B                  	call	TransFCB		; crunch the fcb
 14190 00001DF8 58                      	pop	ax
 14191 00001DF9 59                      	pop	cx
 14192 00001DFA 5A                      	pop	dx
 14193 00001DFB 1F                      	pop	ds			; get fcb
 14194 00001DFC 7303                    	JNC	short FindFCB		; everything seems ok
 14195                                  FCBOpenErr:
 14196                                  	; AL has error code
 14197 00001DFE E94FE8                  	jmp	FCB_RET_ERR
 14198                                  FindFCB:
 14199 00001E01 E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14200                                  
 14201                                  	; 17/05/2019 - Retro DOS v4.0
 14202                                  
 14203                                  	; MSDOS 3.3
 14204                                  	;call	LRUFCB
 14205                                  	;jc	short HardMessage
 14206                                  
 14207                                  	; MSDOS 6.0
 14208 00001E04 50                      	push	ax
 14209 00001E05 B001                    	mov	al,1			;indicate Open/Create operation
 14210 00001E07 E82BFB                  	call	LRUFCB			; get a sft entry (no error)
 14211 00001E0A 58                      	pop	ax
 14212 00001E0B 722A                    	jc	short HardMessage
 14213                                  	
 14214                                  	;mov	word [es:di+2],8000h
 14215 00001E0D 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14216 00001E13 1E                      	push	ds
 14217 00001E14 56                      	push	si	
 14218 00001E15 53                      	push	bx			; save fcb pointer
 14219 00001E16 89CE                    	MOV	SI,CX
 14220                                  
 14221                                  ;hkn; SS is DOSDATA
 14222 00001E18 16                      	push	ss
 14223 00001E19 1F                      	pop	ds			    ; let DOS_Open see variables
 14224 00001E1A FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14225 00001E1C 5B                      	pop	bx
 14226 00001E1D 5E                      	pop	si
 14227 00001E1E 1F                      	pop	ds			; get fcb
 14228                                  
 14229                                  ;hkn; SS override
 14230 00001E1F 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14231 00001E24 7318                    	JNC	short FCBOK		; operation succeeded
 14232                                  failopen:
 14233 00001E26 50                      	PUSH	AX
 14234 00001E27 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14235 00001E29 E8DEFC                  	call	BlastSFT
 14236 00001E2C 58                      	POP	AX
 14237                                  	;cmp	ax,4
 14238 00001E2D 83F804                  	CMP	AX,error_too_many_open_files
 14239 00001E30 7405                    	JZ	short HardMessage
 14240                                  	;cmp	ax,24h
 14241 00001E32 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14242 00001E35 7505                    	jnz	short DeadFCB
 14243                                  HardMessage:
 14244 00001E37 50                      	PUSH	AX
 14245 00001E38 E887FD                  	call	FCBHardErr
 14246 00001E3B 58                      	POP	AX
 14247                                  DeadFCB:
 14248                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14249                                  	;jmp	FCB_RET_ERR
 14250 00001E3C EBC0                    	jmp	short FCBOpenErr
 14251                                  FCBOK:
 14252                                  	; MSDOS 6.0
 14253 00001E3E E801F4                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14254 00001E41 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14255 00001E43 E84D53                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14256 00001E46 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14257                                  ;SR;
 14258                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14259                                  ; LocalSFT variable to reflect this.
 14260                                  
 14261 00001E48 36893E[5D10]            	mov	[ss:LocalSFT],di
 14262 00001E4D 368C06[5F10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14263                                  ;;SR;
 14264                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14265                                  ;;
 14266                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14267                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14268                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14269                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14270                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14271                                  
 14272                                  FCBOK2:
 14273                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14274 00001E52 26FF05                  	inc	word [es:di]
 14275                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14276 00001E55 E80FFA                  	call	SaveFCBInfo
 14277                                  	; MSDOS 3.3
 14278                                  	;call	SetOpenAge
 14279                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14280                                  	;test	word [es:di+5],80h
 14281                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14282 00001E58 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14283 00001E5D 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14284 00001E5F 8A04                    	MOV	AL,[SI]			; get drive byte
 14285 00001E61 E8C24A                  	call	GETTHISDRV		; convert
 14286                                  	;INC	AL
 14287                                  	; 17/12/2022
 14288 00001E64 40                      	inc	ax
 14289 00001E65 8804                    	MOV	[SI],AL			; stash in good drive letter
 14290                                  
 14291                                  FCBNoDrive:
 14292                                  	;mov	word [si+0Eh],128
 14293 00001E67 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14294                                  
 14295                                  	; 23/01/2024
 14296                                  	; (PCDOS 7.1 IBMDOS.COM)
 14297                                  	;;;
 14298                                  	;;mov	ax,[es:di+0Dh]
 14299                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14300                                  	;;mov	[si+16h],ax
 14301                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14302                                  	;;mov	ax,[es:di+0Fh]
 14303                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14304                                  	;;mov	[si+14h],ax
 14305                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14306                                  	;;mov	ax,[es:di+11h]
 14307                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14308                                  	;;mov	[si+10h],ax
 14309                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14310                                  	;;mov	ax,[es:di+13h]
 14311                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14312                                  	;;mov	[si+12h],ax
 14313                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14314                                  	;
 14315 00001E6C 06                      	push	es
 14316                                  	;les	ax,[es:di+0Dh]
 14317 00001E6D 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14318                                  	;mov	[si+16h],ax
 14319 00001E71 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14320                                  	;mov	[si+14h],es
 14321 00001E74 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14322 00001E77 07                      	pop	es
 14323 00001E78 06                      	push	es
 14324                                  	;les	ax,[es:di+11h]
 14325 00001E79 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14326                                  	;mov	[si+10h],ax
 14327 00001E7D 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14328                                  	;mov	[si+12h],ax
 14329 00001E80 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14330 00001E83 07                      	pop	es
 14331                                  	;;;
 14332                                  	
 14333 00001E84 31C0                    	XOR	AX,AX			; convenient zero
 14334                                  	;mov	[si+0Ch],ax
 14335 00001E86 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14336                                  
 14337                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14338                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14339                                  
 14340                                  ;hkn; 	SS override
 14341 00001E89 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14342                                  	;mov	ah,[es:di+4]
 14343 00001E8E 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14344                                  OpenScan:
 14345                                  	;cmp	al,[si+18h]
 14346 00001E92 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14347 00001E95 7407                    	JZ	short SkipCheck
 14348 00001E97 50                      	push	ax			; preserve count
 14349 00001E98 E885FC                  	call	CheckFCB		; do they match
 14350 00001E9B 58                      	pop	ax			; get count back
 14351 00001E9C 7309                    	JNC	short OpenFound		; found a match!
 14352                                  SkipCheck:
 14353 00001E9E FEC0                    	INC	AL			; advance to next FCB
 14354 00001EA0 38E0                    	CMP	AL,AH			; table full?
 14355 00001EA2 75EE                    	JNZ	short OpenScan		; no, go for more
 14356                                  OpenDone:
 14357 00001EA4 30C0                    	xor	al,al			; return success
 14358 00001EA6 C3                      	retn
 14359                                  
 14360                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14361                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14362                                  ; Consider:
 14363                                  ;
 14364                                  ;   open (foo)	delete (foo) open (bar)
 14365                                  ;
 14366                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14367                                  ; foo even though foo is no longer needed; this is due to the server closing
 14368                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14369                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14370                                  ; bar and subsequent I/O would be lost to the redirector.
 14371                                  ;
 14372                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14373                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14374                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14375                                  ; around. This will allow us to access the same file through multiple network
 14376                                  ; connections and NOT prematurely terminate when the ref count on one
 14377                                  ; connection goes to zero.
 14378                                  
 14379                                  OpenFound:
 14380                                  	;mov	[si+18h],al
 14381 00001EA7 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14382 00001EAA 26FF05                  	inc	word [es:di]
 14383                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14384                                  					; remember this new invocation
 14385                                  	; 24/01/2024
 14386 00001EAD 16                      	push	ss
 14387 00001EAE 1F                      	pop	ds
 14388                                  	
 14389                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14390 00001EAF A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14391                                  	;mov	[es:di+15h],ax
 14392 00001EB2 26894515                	MOV	[ES:DI+sf_LRU],AX
 14393                                  ;
 14394                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14395                                  ; blast it to prevent other reuse.
 14396                                  ;
 14397                                  	;push	ss
 14398                                  	;pop	ds
 14399                                  
 14400 00001EB6 C43E[9E05]              	LES	DI,[THISSFT]
 14401 00001EBA 26FF0D                  	dec	word [es:di]
 14402                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14403                                  					; free the newly allocated SFT
 14404 00001EBD E80B53                  	call	ShareEnd
 14405 00001EC0 B043                    	MOV	AL,'C'	 ; 43h
 14406 00001EC2 E845FC                  	call	BlastSFT
 14407 00001EC5 EBDD                    	JMP	short OpenDone
 14408                                  
 14409                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14410                                  ;----------------------------------------------------------------------------
 14411                                  ;
 14412                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14413                                  ;	FCB for us and asked to have the rest filled in.
 14414                                  ;
 14415                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14416                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14417                                  ;		FCB has the following fields filled in:
 14418                                  ;		    Time/Date Extent/NR Size
 14419                                  ;----------------------------------------------------------------------------
 14420                                  
 14421                                  _$FCB_CREATE:		; System call 22
 14422                                  
 14423                                  ;hkn; DOS_Create is in DOSCODE
 14424 00001EC7 B9[B529]                	MOV	CX,DOS_CREATE		; routine to call
 14425 00001ECA 31C0                    	XOR	AX,AX			; attributes to create
 14426 00001ECC E84EFD                  	call	GetExtended		; get extended FCB
 14427 00001ECF 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14428 00001ED1 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14429                                  DoAccessJ:
 14430 00001ED4 E917FF                  	JMP	DoAccess		; do dirty work
 14431                                  
 14432                                  ;============================================================================
 14433                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14434                                  ;============================================================================
 14435                                  ; 22/07/2018 - Retro DOS v3.0
 14436                                  ; 17/05/2019 - Retro DOS v4.0
 14437                                  
 14438                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14439                                  
 14440                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14441                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14442                                  
 14443                                  ;**	Search.asm
 14444                                  ;----------------------------------------------------------------------------
 14445                                  ;	Directory search system calls.
 14446                                  ;	These will be passed direct text of the pathname from the user. 
 14447                                  ;	They will need to be passed through the macro expander prior to
 14448                                  ;	being sent through the low-level stuff. 
 14449                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14450                                  ;
 14451                                  ;	$Dir_Search_First	  written
 14452                                  ;	$Dir_Search_Next	  written
 14453                                  ;	$Find_First	  written
 14454                                  ;	$Find_Next		  written
 14455                                  ;	PackName		  written
 14456                                  ;
 14457                                  ;	Modification history:
 14458                                  ;
 14459                                  ;	  Created: ARR 4 April 1983
 14460                                  
 14461                                  ;----------------------------------------------------------------------------
 14462                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14463                                  ;
 14464                                  ; Inputs:
 14465                                  ;	DS:DX Points to unopenned FCB
 14466                                  ; Function:
 14467                                  ;	Directory is searched for first matching entry and the directory
 14468                                  ;	entry is loaded at the disk transfer address
 14469                                  ; Returns:
 14470                                  ;	AL = -1 if no entries matched, otherwise 0
 14471                                  ;----------------------------------------------------------------------------
 14472                                  
 14473                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14474                                  
 14475                                  	; 24/01/2024
 14476                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14477                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14478                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14479                                  
 14480                                  _$DIR_SEARCH_FIRST:
 14481 00001ED7 368916[A605]            	MOV	[SS:THISFCB],DX
 14482 00001EDC 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14483 00001EE1 89D6                    	MOV	SI,DX
 14484 00001EE3 803CFF                  	CMP	BYTE [SI],0FFH
 14485 00001EE6 7503                    	JNZ	short NORMFCB4
 14486 00001EE8 83C607                  	ADD	SI,7			; Point to drive select byte
 14487                                  NORMFCB4:
 14488 00001EEB FF34                    	push	word [SI]		; Save original drive byte for later
 14489                                  
 14490 00001EED 16                      	push	ss
 14491 00001EEE 07                      	pop	es			; get es to address DOSGroup
 14492                                  
 14493 00001EEF BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14494 00001EF2 E8A64A                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14495 00001EF5 7304                    	JNC	short SearchIt		; no error, go and look
 14496 00001EF7 5B                      	pop	bx			; Clean stack
 14497                                  
 14498                                  ; Error code is in AX
 14499                                  
 14500                                  	; 09/11/2022
 14501                                  dcf_errj:
 14502 00001EF8 E955E7                  	jmp	FCB_RET_ERR		; error
 14503                                  
 14504                                  SearchIt:
 14505 00001EFB 16                      	push	ss
 14506 00001EFC 1F                      	pop	ds			; get ready for search
 14507                                  	;push	word [DMAADD]
 14508                                  	;push	word [DMAADD+2]
 14509                                  	; 24/01/2024
 14510 00001EFD C43E[2C03]              	les	di,[DMAADD]
 14511 00001F01 57                      	push	di
 14512 00001F02 06                      	push	es
 14513 00001F03 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14514 00001F09 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14515                                  	; MSDOS 3.3
 14516                                  	;call	DOS_SEARCH_FIRST
 14517                                  	; MSDOS 6.0
 14518 00001F0D E8930D                  	call	GET_FAST_SEARCH		; search
 14519 00001F10 8F06[2E03]              	pop	word [DMAADD+2]
 14520 00001F14 8F06[2C03]              	pop	word [DMAADD]
 14521 00001F18 735C                    	JNC	short SearchSet		; no error, transfer info
 14522 00001F1A 5B                      	pop	bx			; Clean stack
 14523                                  
 14524                                  ; Error code is in AX
 14525                                  
 14526                                  	; 09/11/2022
 14527                                  	;jmp	FCB_RET_ERR
 14528 00001F1B EBDB                    	jmp	short dcf_errj
 14529                                  
 14530                                  ;----------------------------------------------------------------------------
 14531                                  ;
 14532                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14533                                  ;
 14534                                  ; Inputs:
 14535                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14536                                  ; Function:
 14537                                  ;	Directory is searched for the next matching entry and the directory
 14538                                  ;	entry is loaded at the disk transfer address
 14539                                  ; Returns:
 14540                                  ;	AL = -1 if no entries matched, otherwise 0
 14541                                  ;----------------------------------------------------------------------------
 14542                                  
 14543                                  	; 24/01/2024
 14544                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14545                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14546                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14547                                  
 14548                                  _$DIR_SEARCH_NEXT:
 14549 00001F1D 368916[A605]            	MOV	[SS:THISFCB],DX
 14550 00001F22 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14551 00001F27 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14552 00001F2D 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14553                                  
 14554 00001F33 16                      	push	ss
 14555 00001F34 07                      	pop	es
 14556                                  
 14557 00001F35 BF[BE04]                	MOV	DI,SEARCHBUF
 14558                                  
 14559 00001F38 89D6                    	MOV	SI,DX
 14560 00001F3A 803CFF                  	CMP	BYTE [SI],0FFh
 14561 00001F3D 750D                    	JNZ	short NORMFCB6
 14562 00001F3F 83C606                  	ADD	SI,6
 14563 00001F42 AC                      	LODSB
 14564                                  
 14565 00001F43 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14566 00001F47 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14567                                  NORMFCB6:
 14568 00001F4C AC                      	LODSB				; Get original user drive byte
 14569 00001F4D 50                      	push	ax			; Put it on stack
 14570 00001F4E 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14571 00001F51 AA                      	STOSB				; Put in correct place
 14572 00001F52 B90A00                  	MOV	CX,20/2
 14573 00001F55 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14574                                  
 14575 00001F57 16                      	push	ss
 14576 00001F58 1F                      	pop	ds
 14577                                  
 14578                                  	;push	word [DMAADD]
 14579                                  	;push	word [DMAADD+2]
 14580                                  	; 24/01/2024
 14581 00001F59 C43E[2C03]              	les	di,[DMAADD]
 14582 00001F5D 57                      	push	di
 14583 00001F5E 06                      	push	es
 14584 00001F5F C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14585 00001F65 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14586 00001F69 E8320E                  	call	DOS_SEARCH_NEXT 	; Find it
 14587 00001F6C 8F06[2E03]              	pop	word [DMAADD+2]
 14588 00001F70 8F06[2C03]              	pop	word [DMAADD]
 14589 00001F74 724A                    	JC	short SearchNoMore
 14590                                  	; 24/01/2024
 14591                                  	;JMP	SearchSet		; Ok set return
 14592                                  
 14593                                  ;;;	; 24/01/2024
 14594                                  
 14595                                  ; The search was successful (or the search-next). We store the information
 14596                                  ; into the user's FCB for continuation.
 14597                                  
 14598                                  SearchSet:
 14599 00001F76 BE[BE04]                	MOV	SI,SEARCHBUF
 14600 00001F79 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14601 00001F7D F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14602 00001F82 7403                    	JZ	short NORMFCB1
 14603 00001F84 83C707                  	ADD	DI,7			; Point past the extension
 14604                                  NORMFCB1:
 14605 00001F87 5B                      	pop	bx			; Get original drive byte
 14606 00001F88 08DB                    	OR	BL,BL
 14607 00001F8A 7506                    	JNZ	short SearchDrv
 14608 00001F8C 8A1E[3603]              	MOV	BL,[CURDRV]
 14609 00001F90 FEC3                    	INC	BL
 14610                                  SearchDrv:
 14611 00001F92 AC                      	LODSB				; Get correct search contin drive byte
 14612 00001F93 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14613 00001F95 47                      	INC	DI
 14614                                  	;STOSB				; Store the correct "user" drive byte
 14615                                  					;  at the start of the search info
 14616 00001F96 B90A00                  	MOV	CX,20/2
 14617 00001F99 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14618 00001F9B 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14619                                  					;   byte to AL
 14620 00001F9D AA                      	STOSB				; Search contin drive byte at end of
 14621                                  					;   contin info
 14622 00001F9E C43E[2C03]              	LES	DI,[DMAADD]
 14623 00001FA2 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14624 00001FA7 740D                    	JZ	short NORMFCB2
 14625 00001FA9 B0FF                    	MOV	AL,0FFh
 14626 00001FAB AA                      	STOSB
 14627 00001FAC FEC0                    	INC	AL
 14628                                  	;MOV	CX,5
 14629                                  	; 17/12/2022
 14630 00001FAE B105                    	mov	cl,5
 14631 00001FB0 F3AA                    	REP	STOSB
 14632 00001FB2 A0[6D05]                	MOV	AL,[SATTRIB]
 14633 00001FB5 AA                      	STOSB
 14634                                  NORMFCB2:
 14635 00001FB6 88D8                    	MOV	AL,BL			; User Drive byte
 14636 00001FB8 AA                      	STOSB
 14637                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14638                                  	; 17/12/2022
 14639 00001FB9 B110                    	mov	cl,16
 14640 00001FBB F3A5                    	REP	MOVSW
 14641 00001FBD E98DE6                  	jmp	FCB_RET_OK
 14642                                  ;;;
 14643                                  
 14644                                  SearchNoMore:
 14645 00001FC0 C43E[A605]              	LES	DI,[THISFCB]
 14646 00001FC4 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14647 00001FC9 7403                    	JZ	short NORMFCB8
 14648 00001FCB 83C707                  	ADD	DI,7			; Point past the extension
 14649                                  NORMFCB8:
 14650 00001FCE 5B                      	pop	bx			; Get original drive byte
 14651 00001FCF 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14652                                  					;  at the right spot
 14653                                  ; error code is in AX
 14654                                  
 14655 00001FD2 E97BE6                  	jmp	FCB_RET_ERR
 14656                                  
 14657                                  ; 17/05/2019 - Retro DOS v4.0
 14658                                  
 14659                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14660                                  
 14661                                  ;---------------------------------------------------------------------------
 14662                                  ;
 14663                                  ;   Procedure Name : $FIND_FIRST
 14664                                  ; 
 14665                                  ;   Assembler usage:
 14666                                  ;	    MOV AH, FindFirst
 14667                                  ;	    LDS DX, name
 14668                                  ;	    MOV CX, attr
 14669                                  ;	    INT 21h
 14670                                  ;	; DMA address has datablock
 14671                                  ;
 14672                                  ;   Error Returns:
 14673                                  ;	    AX = error_path_not_found
 14674                                  ;	       = error_no_more_files
 14675                                  ;---------------------------------------------------------------------------
 14676                                  
 14677                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14678                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14679                                  
 14680                                  	; 24/01/2024
 14681                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14682                                  
 14683                                  _$FIND_FIRST:
 14684 00001FD5 89D6                    	MOV	SI,DX			; get name in appropriate place
 14685 00001FD7 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14686                                  
 14687 00001FDC BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14688                                  
 14689 00001FDF E81F4A                  	call	TransPathSet		; convert the path
 14690 00001FE2 7305                    	JNC	short Find_it 		; no error, go and look
 14691                                  FindError:
 14692                                  	;mov	al,3
 14693 00001FE4 B003                    	mov	al,error_path_not_found	; error and map into one.
 14694                                  	; 09/11/2022
 14695                                  FF_errj:
 14696 00001FE6 E951E6                  	jmp	SYS_RET_ERR
 14697                                  Find_it:
 14698 00001FE9 16                      	push	ss
 14699 00001FEA 1F                      	pop	ds
 14700                                  
 14701                                  	;push	word [DMAADD]
 14702                                  	;push	word [DMAADD+2]
 14703                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14704 00001FEB C43E[2C03]              	les	di,[DMAADD]
 14705 00001FEF 57                      	push	di
 14706 00001FF0 06                      	push	es
 14707 00001FF1 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14708 00001FF7 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14709                                  	; MSDOS 3.3
 14710                                  	;call	DOS_SEARCH_FIRST
 14711                                  	; MSDOS 6.0
 14712 00001FFB E8A50C                  	call	GET_FAST_SEARCH 	; search
 14713 00001FFE 8F06[2E03]              	pop	word [DMAADD+2]
 14714 00002002 8F06[2C03]              	pop	word [DMAADD]
 14715                                  	
 14716                                  	; 16/12/2022
 14717                                  	;JNC	short FindSet 		; no error, transfer info
 14718 00002006 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14719                                  	;
 14720                                  	;jmp	SYS_RET_ERR
 14721                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14722                                  ;FFF_errj:
 14723                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14724                                  
 14725                                  FindSet:
 14726 00002008 BE[BE04]                	MOV	SI,SEARCHBUF
 14727 0000200B C43E[2C03]              	LES	DI,[DMAADD]
 14728 0000200F B91500                  	MOV	CX,21
 14729 00002012 F3A4                    	REP	MOVSB
 14730 00002014 56                      	PUSH	SI			; Save pointer to start of entry
 14731                                  	;mov	al,[si+0Bh]
 14732 00002015 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14733 00002018 AA                      	STOSB
 14734                                  	;add	si,16h ; 22
 14735 00002019 83C616                  	ADD	SI,dir_entry.dir_time
 14736 0000201C A5                      	MOVSW				; dir_time
 14737 0000201D A5                      	MOVSW				; dir_date
 14738 0000201E 46                      	INC	SI
 14739 0000201F 46                      	INC	SI			; Skip dir_first
 14740 00002020 A5                      	MOVSW				; dir_size (2 words)
 14741 00002021 A5                      	MOVSW
 14742 00002022 5E                      	POP	SI			; Point back to dir_name
 14743 00002023 E83300                   	CALL	PackName
 14744 00002026 E908E6                  	jmp	SYS_RET_OK		; bye with no errors
 14745                                  
 14746                                  ;---------------------------------------------------------------------------
 14747                                  ;
 14748                                  ;   Procedure Name : $FIND_NEXT
 14749                                  ;
 14750                                  ;   Assembler usage:
 14751                                  ;	; dma points at area returned by find_first
 14752                                  ;	    MOV AH, findnext
 14753                                  ;	    INT 21h
 14754                                  ;	; next entry is at dma
 14755                                  ;
 14756                                  ;   Error Returns:
 14757                                  ;	    AX = error_no_more_files
 14758                                  ;---------------------------------------------------------------------------
 14759                                  
 14760                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14761                                  
 14762                                  	; 24/01/2024
 14763                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14764                                  
 14765                                  _$FIND_NEXT:
 14766 00002029 16                      	push	ss
 14767 0000202A 07                      	pop	es
 14768                                  
 14769 0000202B BF[BE04]                	MOV	DI,SEARCHBUF
 14770                                  
 14771 0000202E 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14772                                  
 14773 00002033 B91500                  	MOV	CX,21
 14774 00002036 F3A4                    	REP	MOVSB			; Put the search continuation info
 14775                                  					;  in the right place
 14776 00002038 16                      	push	ss
 14777 00002039 1F                      	pop	ds			; get ready for search
 14778                                  	
 14779                                  	;push	word [DMAADD]
 14780                                  	;push	word [DMAADD+2]
 14781                                  	; 24/01/2024
 14782 0000203A C43E[2C03]              	les	di,[DMAADD]
 14783 0000203E 57                      	push	di
 14784 0000203F 06                      	push	es
 14785 00002040 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14786 00002046 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14787 0000204A E8510D                  	call	DOS_SEARCH_NEXT 	; Find it
 14788 0000204D 8F06[2E03]              	pop	word [DMAADD+2]
 14789 00002051 8F06[2C03]              	pop	word [DMAADD]
 14790 00002055 73B1                    	JNC	short FindSet 		; No error, set info
 14791                                  	;jmp	SYS_RET_ERR
 14792                                  	; 16/12/2022
 14793 00002057 EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14794                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14795                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14796                                  
 14797                                  ;---------------------------------------------------------------------------
 14798                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14799                                  ;
 14800                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14801                                  ;	the ASCIZ format.
 14802                                  ;
 14803                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14804                                  ;		(ES:DI) = destination area (13 bytes)
 14805                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14806                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14807                                  ;---------------------------------------------------------------------------
 14808                                  
 14809                                  	; 25/01/2024 - Retro DOS v4.2
 14810                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5F70h
 14811                                  
 14812                                  PackName:
 14813                                  ;	Move over 8 characters to cover the name component, then trim it's
 14814                                  ;	trailing blanks.
 14815                                  
 14816                                  	;MOV	CX,8			; Pack the name
 14817                                  	;REP	MOVSB			; Move all of it
 14818                                  	; 25/01/2024
 14819 00002059 B90400                  	mov	cx,4
 14820 0000205C F3A5                    	rep	movsw
 14821                                  main_kill_tail:
 14822 0000205E 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14823 00002063 7507                    	JNZ	short find_check_dot
 14824 00002065 4F                      	DEC	DI			; Back up over trailing space
 14825 00002066 41                      	INC	CX
 14826 00002067 83F908                  	CMP	CX,8
 14827 0000206A 72F2                    	JB	short main_kill_tail
 14828                                  find_check_dot:
 14829                                  	;CMP	WORD [SI],(" " << 8) | " "
 14830 0000206C 813C2020                	cmp     word [si],2020h 
 14831 00002070 7506                    	JNZ	short got_ext 		; Some chars in extension
 14832 00002072 807C0220                	CMP	BYTE [SI+2]," "
 14833 00002076 740F                    	JZ	short find_done		; No extension
 14834                                  got_ext:
 14835 00002078 B02E                    	MOV	AL,"."	; 2Eh
 14836 0000207A AA                      	STOSB
 14837                                  	;MOV	CX,3
 14838                                  	;; 18/12/2022
 14839                                  	;;mov	cl,3
 14840                                  	;;REP	MOVSB
 14841                                  	;movsb
 14842                                  	;movsb
 14843                                  	;movsb
 14844                                  	; 25/01/2024
 14845 0000207B A5                      	movsw
 14846 0000207C A4                      	movsb
 14847                                  ext_kill_tail:
 14848 0000207D 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14849 00002082 7503                    	JNZ	short find_done
 14850 00002084 4F                      	DEC	DI			; Back up over trailing space
 14851 00002085 EBF6                    	JMP	short ext_kill_tail
 14852                                  find_done:
 14853 00002087 31C0                    	XOR	AX,AX
 14854 00002089 AA                      	STOSB				; NUL terminate
 14855 0000208A C3                      	retn
 14856                                  
 14857                                  ;---------------------------------------------------------------------------
 14858                                  
 14859                                  ; 24/01/2024
 14860                                  %if 0
 14861                                  	; 17/05/2019 - Retro DOS v4.0
 14862                                  GET_FAST_SEARCH:
 14863                                  	; 22/07/2018
 14864                                  	; MSDOS 6.0
 14865                                  	; 17/12/2022
 14866                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14867                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14868                                  					;FO.trigger fastopen ;AN000;
 14869                                  	;call	DOS_SEARCH_FIRST
 14870                                  	;retn
 14871                                  	; 17/12/2022
 14872                                  	jmp	DOS_SEARCH_FIRST
 14873                                  %endif
 14874                                  
 14875                                  ;============================================================================
 14876                                  ; PATH.ASM, MSDOS 6.0, 1991
 14877                                  ;============================================================================
 14878                                  ; 06/08/2018 - Retro DOS v3.0
 14879                                  ; 17/05/2019 - Retro DOS v4.0
 14880                                  
 14881                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14882                                  
 14883                                  ;**	Directory related system calls. These will be passed direct text of the
 14884                                  ;	pathname from the user. They will need to be passed through the macro
 14885                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14886                                  ;	defined in DISPATCH. The system calls are:
 14887                                  ;
 14888                                  ;	$CURRENT_DIR  Written
 14889                                  ;	$RMDIR	  Written
 14890                                  ;	$CHDIR	  Written
 14891                                  ;	$MKDIR	  Written
 14892                                  ;
 14893                                  ;
 14894                                  ;	Modification history:
 14895                                  ;
 14896                                  ;	    Created: ARR 4 April 1983
 14897                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14898                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14899                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14900                                  ;				    current directory.
 14901                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14902                                  
 14903                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14904                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14905                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14906                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14907                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14908                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14909                                  ;	I_Need	cMeta,BYTE
 14910                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14911                                  
 14912                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14913                                  ;----------------------------------------------------------------------------
 14914                                  ;
 14915                                  ;   Procedure Name : $CURRENT_DIR
 14916                                  ;
 14917                                  ;   Assembler usage:
 14918                                  ;		LDS	SI,area
 14919                                  ;		MOV	DL,drive
 14920                                  ;		INT	21h
 14921                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14922                                  ;	    ; current directory.
 14923                                  ;   Error returns:
 14924                                  ;	    AX = error_invalid_drive
 14925                                  ;
 14926                                  ;----------------------------------------------------------------------------
 14927                                  
 14928                                  	; 06/08/2018 - Retro DOS v3.0
 14929                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14930                                  
 14931                                  	; 25/01/2024 - Retro DOS v4.2
 14932                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14933                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14934                                  	; Windows ME IO.SYS - BIOSCODE:6393h
 14935                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14936                                  
 14937                                  _$CURRENT_DIR:
 14938 0000208B E854F2                  	call	ECritDisk
 14939 0000208E 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14940 00002090 E87748                  	call	GetVisDrv		; grab it
 14941 00002093 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14942                                  CurdirErr:
 14943 00002095 E865F2                  	call	LCritDisk
 14944                                  
 14945                                  	; MSDOS 3.3
 14946                                  	;mov	al,0Fh
 14947                                  	
 14948                                  	; MSDOS 6.0
 14949 00002098 1E                      	push	ds
 14950 00002099 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14951 0000209E A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14952 000020A1 1F                      	pop	ds
 14953                                  
 14954                                  curdir_errj:
 14955 000020A2 E995E5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14956                                  
 14957                                  CurrentValidate:
 14958 000020A5 1E                      	push	ds			; save destination
 14959 000020A6 56                      	push	si
 14960                                  	
 14961                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14962                                  	
 14963                                  	; MSDOS 6.0
 14964 000020A7 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14965                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14966 000020AC C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14967                                  	
 14968                                  	; 25/01/2024
 14969                                  	;lds     si,[THISCDS]
 14970                                  
 14971                                  ; 16/12/2022
 14972                                  %if 0
 14973                                  	; 09/11/2022 (following test instruction is nonsense!)
 14974                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14975                                  
 14976                                  	;test	word [si+43h],8000h
 14977                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14978                                  	;jnz	short $+2  ; 09/11/2022	
 14979                                  	jnz	short DoCheck
 14980                                  %endif
 14981                                  
 14982                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14983                                  ; media check.
 14984                                  ;	CMP	word [SI+curdir.ID],0
 14985                                  ;	JZ	short GetDst
 14986                                  DoCheck:
 14987                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14988                                  
 14989                                  	; 25/01/2024
 14990                                  	; MSDOS 6.0
 14991                                  	;push	ds
 14992                                  	;mov	ds,[cs:DosDSeg]
 14993                                  	;mov	byte [NoSetDir],0 ; *
 14994                                  	;pop	ds
 14995                                  
 14996 000020B1 BF[BE03]                	MOV	DI,OPENBUF
 14997 000020B4 E88320                  	call	ValidateCDS		; output is ES:DI -> CDS
 14998                                  
 14999 000020B7 06                      	push	es	 		; swap source and destination
 15000 000020B8 57                      	push	di
 15001 000020B9 5E                      	pop	si
 15002 000020BA 1F                      	pop	ds
 15003                                  GetDst:
 15004 000020BB 5F                      	pop	di
 15005 000020BC 07                      	pop	es			; get real destination
 15006 000020BD 72D6                    	JC	short CurdirErr
 15007                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 15008                                  	;
 15009                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15010                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 15011                                  	; 16/12/2022
 15012                                  	;add	si,0  ; add si,curdir.text
 15013                                  	;
 15014                                  	;add	si,[si+4Fh] ; 17/05/2019
 15015 000020BF 03744F                  	ADD	SI,[SI+curdir.end]
 15016 000020C2 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 15017 000020C5 7501                    	JNZ	short CurrentCopy
 15018 000020C7 46                      	INC	SI
 15019                                  CurrentCopy:
 15020                                  ;	call	FStrCpy
 15021                                  ;; 10/29/86 E5 char
 15022 000020C8 50                      	PUSH	AX
 15023 000020C9 AC                      	LODSB				; get char
 15024 000020CA 08C0                    	OR	AL,AL
 15025 000020CC 7413                    	JZ	short FOK
 15026 000020CE 3C05                    	CMP	AL,05H
 15027 000020D0 740D                    	JZ	short FCHANGE
 15028 000020D2 EB01                    	JMP	short FFF
 15029                                  FCPYNEXT:
 15030 000020D4 AC                      	LODSB				; get char
 15031                                  FFF:
 15032 000020D5 3C5C                    	CMP	AL,'\'			; beginning of directory
 15033 000020D7 7508                    	JNZ	short FOK		; no
 15034 000020D9 AA                      	STOSB				; put into user's buffer
 15035 000020DA AC                      	LODSB				; 1st char of dir is 05?
 15036 000020DB 3C05                    	CMP	AL,05H
 15037 000020DD 7502                    	JNZ	short FOK		; no
 15038                                  FCHANGE:
 15039 000020DF B0E5                    	MOV	AL,0E5H			; make it E5
 15040                                  FOK:
 15041 000020E1 AA                      	STOSB				; put into user's buffer
 15042 000020E2 08C0                    	OR	AL,AL			; final char
 15043 000020E4 75EE                    	JNZ	short FCPYNEXT		; no
 15044 000020E6 58                      	POP	AX
 15045                                  
 15046                                  ;; 10/29/86 E5 char
 15047 000020E7 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 15048 000020E9 E811F2                  	call	LCritDisk
 15049 000020EC E942E5                  	jmp	SYS_RET_OK		; no more, bye!
 15050                                  
 15051                                  ; 17/05/2019 - Retro DOS v4.0
 15052                                  
 15053                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 15054                                  
 15055                                  ;BREAK <$RmDir -- Remove a directory>
 15056                                  ;----------------------------------------------------------------------------
 15057                                  ;
 15058                                  ; Procedure Name : $RmDir
 15059                                  ;
 15060                                  ; Inputs:
 15061                                  ;	DS:DX Points to asciz name
 15062                                  ; Function:
 15063                                  ;	Delete directory if empty
 15064                                  ; Returns:
 15065                                  ;	STD XENIX Return
 15066                                  ;	AX = error_path_not_found If path bad
 15067                                  ;	AX = error_access_denied If
 15068                                  ;		Directory not empty
 15069                                  ;		Path not directory
 15070                                  ;		Root directory specified
 15071                                  ;		Directory malformed (. and .. not first two entries)
 15072                                  ;		User tries to delete a current directory
 15073                                  ;	AX = error_current_directory
 15074                                  ;
 15075                                  ;----------------------------------------------------------------------------
 15076                                  
 15077                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15078                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 15079                                  
 15080                                  _$RMDIR:
 15081 000020EF 52                      	push	dx			; Save ptr to name
 15082 000020F0 1E                      	push	ds
 15083 000020F1 89D6                    	mov	si,dx			; Load ptr into si
 15084 000020F3 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 15085 000020F6 57                      	push	di
 15086 000020F7 E80F49                  	call	TransPathNoSet		; Translate the name
 15087 000020FA 5F                      	pop	di			; di = ptr to buf for trans name
 15088 000020FB 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 15089 000020FD 1F                      	pop	ds
 15090 000020FE 5A                      	pop	dx			; Restore the name
 15091                                  	;mov	al,3
 15092 000020FF B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 15093                                  	; 16/12/2022
 15094                                  rmdir_errj: ; 10/08/2018
 15095                                  chdir_errj:
 15096 00002101 EB9F                    	jmp	short curdir_errj
 15097                                  	;jmp	SYS_RET_ERR
 15098                                  rmlset:
 15099 00002103 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 15100 00002109 7512                    	Jnz	short rmerr		;	return (-1);
 15101 0000210B 16                      	push	ss
 15102 0000210C 07                      	pop	es
 15103 0000210D 30C0                    	xor	al,al			; al = 0 , ie drive a:
 15104                                  rmloop: 
 15105 0000210F E86948                  	call	GetCDSFromDrv		; Get curdir for drive in al
 15106 00002112 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 15107 00002114 E878F0                  	call	StrCmp			; Are the 2 paths the same?
 15108 00002117 7404                    	jz	short rmerr		; Yes, report error.
 15109 00002119 FEC0                    	inc	al			; No, inc al to next drive number
 15110 0000211B EBF2                    	jmp	short rmloop		; Go check next drive.
 15111                                  rmerr:
 15112 0000211D 1F                      	pop	ds
 15113 0000211E 5A                      	pop	dx			; Restore the name
 15114                                  	;mov	al,10h
 15115 0000211F B010                    	mov	al,error_current_directory ; error
 15116                                  	; 16/12/2022
 15117                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15118                                  ;chdir_errj:
 15119 00002121 EBDE                    	jmp	short rmdir_errj
 15120                                  rmcont:
 15121 00002123 1F                      	pop	ds
 15122 00002124 5A                      	pop	dx			; Restore the name
 15123 00002125 BE[4B31]                	MOV	SI,DOS_RMDIR
 15124 00002128 EB7C                    	JMP	DoDirCall
 15125                                  
 15126                                  ; 17/05/2019 - Retro DOS v4.0
 15127                                  
 15128                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15129                                  
 15130                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15131                                  ;----------------------------------------------------------------------------
 15132                                  ;
 15133                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15134                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15135                                  ; several cases to consider:
 15136                                  ;
 15137                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15138                                  ;	it into a WFP.	We verify the existance of this directory and then
 15139                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15140                                  ;	directory cluster.
 15141                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15142                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15143                                  ;	WFP back into the CDS.
 15144                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15145                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15146                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15147                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15148                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15149                                  ;	to process the path but to return the logical CDS and the logical
 15150                                  ;	path.  We then copy the logical path into the logical CDS.
 15151                                  ;
 15152                                  ; Inputs:
 15153                                  ;	DS:DX Points to asciz name
 15154                                  ; Returns:
 15155                                  ;	STD XENIX Return
 15156                                  ;	AX = chdir_path_not_found if error
 15157                                  ;
 15158                                  ;----------------------------------------------------------------------------
 15159                                  
 15160                                  _$CHDIR:
 15161 0000212A BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15162 0000212D 89D6                    	MOV	SI,DX			; get source
 15163 0000212F E8CB48                  	call	TransPath		; go munge the path and get real CDS
 15164 00002132 7304                    	JNC	short ChDirCrack	; no errors, try path
 15165                                  ChDirErrP:
 15166                                  	;mov	al,3
 15167 00002134 B003                    	MOV	AL,error_path_not_found
 15168                                  ChDirErr:
 15169                                  	;jmp	SYS_RET_ERR 	; oops!
 15170                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15171 00002136 EBC9                    	jmp	short chdir_errj
 15172                                  
 15173                                  ChDirCrack:
 15174 00002138 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15175 0000213D 75F5                    	JNZ	short ChDirErrP
 15176                                  
 15177                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15178                                  ; found.
 15179                                  
 15180 0000213F C43E[A205]              	LES	DI,[THISCDS]
 15181 00002143 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15182 00002146 74EC                    	JZ	short ChDirErrP		;	error ();
 15183                                  
 15184                                  ; Find out if the directory exists.
 15185                                  
 15186 00002148 E8BE0F                  	call	DOS_CHDIR
 15187                                  	;Jc	short ChDirErr
 15188                                  	; 16/12/2022
 15189 0000214B 72B4                    	jc	short chdir_errj
 15190                                  ;
 15191                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15192                                  ; not network). If one was seen, all we need to do is copy in the text
 15193                                  ;
 15194 0000214D C43E[A205]              	LES	DI,[THISCDS]
 15195                                  	;test	word [es:di+43h],2000h
 15196                                  	; 17/12/2022
 15197 00002151 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15198                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15199 00002156 7425                    	JZ	short GotCDS
 15200                                  
 15201                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15202                                  
 15203 00002158 06                      	push	es	
 15204 00002159 57                      	push	di
 15205 0000215A 51                      	push	cx			; save CDS and cluster...
 15206 0000215B E823E3                  	call	Get_User_Stack		; get original text
 15207                                  	
 15208                                  	;mov	di,[si+6]
 15209 0000215E 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15210                                  	;mov	ds,[si+0Eh]
 15211 00002161 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15212                                  	
 15213 00002164 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15214 00002167 87F7                    	XCHG	SI,DI
 15215 00002169 30C0                    	XOR	AL,AL			; do no splicing
 15216 0000216B 57                      	push	di
 15217 0000216C E89A48                  	call	TransPathNoSet		; Munge path
 15218 0000216F 5E                      	pop	si
 15219                                  
 15220                                  ; There should NEVER be an error here.
 15221                                  
 15222                                  ;IF FALSE
 15223                                  ;	JNC SKipErr
 15224                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15225                                  ;SkipErr:
 15226                                  ;ENDIF
 15227 00002170 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15228                                  	;mov	word [es:di+49h],-1
 15229 00002174 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15230                                  					; no valid cluster here...
 15231 0000217A 59                      	pop	cx
 15232 0000217B 5F                      	pop	di
 15233 0000217C 07                      	pop	es
 15234                                  
 15235                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15236                                  
 15237                                  GotCDS:
 15238                                  
 15239                                  ; wfp_start points to the text. See if it is long enough
 15240                                  
 15241                                  	; MSDOS 3.3
 15242                                  	;push	ss
 15243                                  	;pop	ds
 15244                                  	;mov	si,[WFP_START]
 15245                                  	;push	cx
 15246                                  	;call	DStrLen
 15247                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15248                                  	;pop	cx
 15249                                  	;ja	short ChDirErrP
 15250                                  
 15251                                  	; MSDOS 6.0
 15252 0000217D E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15253 00002180 77B2                    	JA	short ChDirErrP
 15254                                  	; MSDOS 3.3 & MSDOS 6.0
 15255                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15256                                  	; 17/12/2022
 15257 00002182 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15258 00002187 7512                    	JNZ	short SkipRecency
 15259                                  	; MSDOS 6.0
 15260                                  	;test	word [es:di+43h],2000h
 15261                                  	; 17/12/2022
 15262 00002189 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15263                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15264                                  					;PTM. for Join and Subst ;AN000;
 15265 0000218E 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15266 00002190 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15267                                  setdirclus:
 15268                                  	;mov	[es:di+49h],cx
 15269 00002193 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15270 00002197 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15271                                  SkipRecency:
 15272 0000219B E822F0                  	call	FStrCpy
 15273 0000219E 30C0                    	XOR	AL,AL
 15274                                  mkdir_ok:
 15275 000021A0 E98EE4                  	jmp	SYS_RET_OK
 15276                                  
 15277                                  ; 17/05/2019 - Retro DOS v4.0
 15278                                  
 15279                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15280                                  
 15281                                  ;BREAK <$MkDir - Make a directory entry>
 15282                                  ;---------------------------------------------------------------------------
 15283                                  ;
 15284                                  ; Procedure Name : $MkDir
 15285                                  ; Inputs:
 15286                                  ;	DS:DX Points to asciz name
 15287                                  ; Function:
 15288                                  ;	Make a new directory
 15289                                  ; Returns:
 15290                                  ;	STD XENIX Return
 15291                                  ;	AX = mkdir_path_not_found if path bad
 15292                                  ;	AX = mkdir_access_denied  If
 15293                                  ;		Directory cannot be created
 15294                                  ;		Node already exists
 15295                                  ;		Device name given
 15296                                  ;		Disk or directory(root) full
 15297                                  ;---------------------------------------------------------------------------
 15298                                  
 15299                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15300                                  
 15301                                  _$MKDIR:
 15302 000021A3 BE[1C30]                	MOV	SI,DOS_MKDIR
 15303                                  DoDirCall:
 15304 000021A6 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15305                                  
 15306 000021A9 56                      	push	si
 15307 000021AA 89D6                    	MOV	SI,DX			; get source
 15308 000021AC E84E48                  	call	TransPath		; go munge the path
 15309 000021AF 5E                      	pop	si
 15310 000021B0 7305                    	JNC	short MkDirCrack	; no errors, try path
 15311                                  MkErrP:
 15312 000021B2 B003                    	MOV	AL,error_path_not_found	; oops!
 15313                                  MkErr:
 15314 000021B4 E983E4                  	jmp	SYS_RET_ERR
 15315                                  MkDirCrack:
 15316 000021B7 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15317 000021BD 75F3                    	JNZ	short MkErrP
 15318                                  
 15319                                  	; MSDOS 3.3
 15320                                  	;push	ss
 15321                                  	;pop	ds
 15322                                  	;call	si
 15323                                  	;jb	short MkErr
 15324                                  	;;jmp	short mkdir_ok
 15325                                  	;jmp	SYS_RET_OK
 15326                                  
 15327                                  	; MSDOS 6.0
 15328 000021BF 56                      	PUSH	SI			;PTM.			;AN000;
 15329 000021C0 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15330 000021C3 5E                      	POP	SI			;PTM.			;AN000;
 15331 000021C4 7604                    	JBE	short pathok		;PTM.			;AN000;
 15332                                  	;mov	al,5
 15333 000021C6 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15334                                  	;jmp	SYS_RET_ERR		;PTM.
 15335 000021C8 EBEA                    	jmp	short MkErr
 15336                                  pathok:
 15337 000021CA FFD6                    	CALL	SI			; go get file
 15338 000021CC 72E6                    	JC	short MkErr		; no errors
 15339                                  	; 16/12/2022
 15340                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15341 000021CE EBD0                    	jmp	short mkdir_ok
 15342                                  	;jmp	SYS_RET_OK
 15343                                  
 15344                                  ;----------------------------------------------------------------------------
 15345                                  ;
 15346                                  ; Procedure Name : Check_PathLen
 15347                                  ;
 15348                                  ; Inputs:
 15349                                  ;	nothing
 15350                                  ; Function:
 15351                                  ;	check if final path length greater than 67
 15352                                  ; Returns:
 15353                                  ;	Above flag set if > 67
 15354                                  ;
 15355                                  ;---------------------------------------------------------------------------
 15356                                  
 15357                                  Check_PathLen:
 15358                                  	; 09/09/2018
 15359                                  	;mov	SI,[WFP_START]
 15360 000021D0 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15361                                  Check_PathLen2:
 15362 000021D5 16                      	push	ss
 15363 000021D6 1F                      	pop	ds
 15364                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15365 000021D7 51                      	push	CX	
 15366 000021D8 E8FCEF                  	CALL	DStrLen
 15367 000021DB 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15368 000021DE 59                      	POP	CX
 15369 000021DF C3                      	retn
 15370                                  
 15371                                  ;============================================================================
 15372                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15373                                  ;============================================================================
 15374                                  ; 07/08/2018 - Retro DOS v3.0
 15375                                  ; 17/05/2019 - Retro DOS v4.0
 15376                                  
 15377                                  ;**	IOCTL system call.
 15378                                  ;----------------------------------------------------------------------------
 15379                                  ;	$IOCTL
 15380                                  ;
 15381                                  ;	  Revision history:
 15382                                  ;
 15383                                  ;		Created: ARR 4 April 1983
 15384                                  ;
 15385                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15386                                  ;
 15387                                  ;		A000	version 4.00	Jan. 1988
 15388                                  ;
 15389                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15390                                  ;
 15391                                  
 15392                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15393                                  ;---------------------------------------------------------------------------
 15394                                  ;
 15395                                  ;   Assembler usage:
 15396                                  ;	    MOV     BX, Handle
 15397                                  ;	    MOV     DX, Data
 15398                                  ;
 15399                                  ;	(or LDS     DX,BUF
 15400                                  ;	    MOV     CX,COUNT)
 15401                                  ;
 15402                                  ;	    MOV     AH, Ioctl
 15403                                  ;	    MOV     AL, Request
 15404                                  ;	    INT     21h
 15405                                  ;
 15406                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15407                                  ;	    attribute word in DX, handle in BX:
 15408                                  ;	    DH = high word of device driver attributes
 15409                                  ;	    DL = low byte of sf_flags
 15410                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15411                                  ;	    in BX.
 15412                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15413                                  ;	    into DS:DX.  Return number read in AX.
 15414                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15415                                  ;	    DS:DX.  Return bytes written in AX.
 15416                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15417                                  ;	    into DS:DX.  Return number read in AX.
 15418                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15419                                  ;	    DS:DX.  Return bytes written in AX.
 15420                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15421                                  ;	    device, AL = 0FFh, otherwise 0.
 15422                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15423                                  ;	    device, AL = 0FFh, otherwise 0.
 15424                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15425                                  ;	    removable media, 0 otherwise.
 15426                                  ;	 9  Return the contents of the device attribute word in DX for the
 15427                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15428                                  ;	    network. 8000h is the bit for local use.
 15429                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15430                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15431                                  ;	    the count and CX is the delay.
 15432                                  ;
 15433                                  ;   Error returns:
 15434                                  ;	    AX = error_invalid_handle
 15435                                  ;	       = error_invalid_function
 15436                                  ;	       = error_invalid_data
 15437                                  ;
 15438                                  ;-------------------------------------------------------------------------------
 15439                                  ;
 15440                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15441                                  ;   than the above
 15442                                  ;
 15443                                  ;	There are several basic forms of IOCTL calls:
 15444                                  ;
 15445                                  ;
 15446                                  ;	** Get/Set device information:	**
 15447                                  ;
 15448                                  ;	ENTRY	(AL) = function code
 15449                                  ;		  0 - Get device information
 15450                                  ;		  1 - Set device information
 15451                                  ;		(BX) = file handle
 15452                                  ;		(DX) = info for "Set Device Information"
 15453                                  ;	EXIT	'C' set if error
 15454                                  ;		  (AX) = error code
 15455                                  ;		'C' clear if OK
 15456                                  ;		  (DX) = info for "Get Device Information"
 15457                                  ;	USES	ALL
 15458                                  ;
 15459                                  ;
 15460                                  ;	**  Read/Write Control Data From/To Handle  **
 15461                                  ;
 15462                                  ;	ENTRY	(AL) = function code
 15463                                  ;		  2 - Read device control info
 15464                                  ;		  3 - Write device control info
 15465                                  ;		(BX) = file handle
 15466                                  ;		(CX) = transfer count
 15467                                  ;		(DS:DX) = address for data
 15468                                  ;	EXIT	'C' set if error
 15469                                  ;		  (AX) = error code
 15470                                  ;		'C' clear if OK
 15471                                  ;		  (AX) = count of bytes transfered
 15472                                  ;	USES	ALL
 15473                                  ;
 15474                                  ;
 15475                                  ;	**  Read/Write Control Data From/To Block Device  **
 15476                                  ;
 15477                                  ;	ENTRY	(AL) = function code
 15478                                  ;		  4 - Read device control info
 15479                                  ;		  5 - Write device control info
 15480                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15481                                  ;		(CX) = transfer count
 15482                                  ;		(DS:DX) = address for data
 15483                                  ;	EXIT	'C' set if error
 15484                                  ;		  (AX) = error code
 15485                                  ;		'C' clear if OK
 15486                                  ;		  (AX) = count of bytes transfered
 15487                                  ;	USES	ALL
 15488                                  ;
 15489                                  ;
 15490                                  ;	**  Get Input/Output Status  **
 15491                                  ;
 15492                                  ;	ENTRY	(AL) = function code
 15493                                  ;		  6 - Get Input status
 15494                                  ;		  7 - Get Output Status
 15495                                  ;		(BX) = file handle
 15496                                  ;	EXIT	'C' set if error
 15497                                  ;		  (AX) = error code
 15498                                  ;		'C' clear if OK
 15499                                  ;		  (AL) = 00 if not ready
 15500                                  ;		  (AL) = FF if ready
 15501                                  ;	USES	ALL
 15502                                  ;
 15503                                  ;
 15504                                  ;	**  Get Drive Information  **
 15505                                  ;
 15506                                  ;	ENTRY	(AL) = function code
 15507                                  ;		  8 - Check for removable media
 15508                                  ;		  9 - Get device attributes
 15509                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15510                                  ;	EXIT	'C' set if error
 15511                                  ;		  (AX) = error code
 15512                                  ;		'C' clear if OK
 15513                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15514                                  ;		  (DX) = device attribute word (func. 9)
 15515                                  ;	USES	ALL
 15516                                  ;
 15517                                  ;
 15518                                  ;	**  Get Redirected bit	**
 15519                                  ;
 15520                                  ;	ENTRY	(AL) = function code
 15521                                  ;		  0Ah - Network stuff
 15522                                  ;		(BX) = file handle
 15523                                  ;	EXIT	'C' set if error
 15524                                  ;		  (AX) = error code
 15525                                  ;		'C' clear if OK
 15526                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15527                                  ;	USES	ALL
 15528                                  ;
 15529                                  ;
 15530                                  ;	**  Change sharer retry parameters  **
 15531                                  ;
 15532                                  ;	ENTRY	(AL) = function code
 15533                                  ;		  0Bh - Set retry parameters
 15534                                  ;		(CX) = retry loop count
 15535                                  ;		(DX) = number of retries
 15536                                  ;	EXIT	'C' set if error
 15537                                  ;		  (AX) = error code
 15538                                  ;		'C' clear if OK
 15539                                  ;	USES	ALL
 15540                                  ;
 15541                                  ;
 15542                                  ;   =================================================================
 15543                                  ;
 15544                                  ;	**  New Standard Control  **
 15545                                  ;
 15546                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15547                                  ;	FORMS ARE OBSOLETE.
 15548                                  ;
 15549                                  ;   =================================================================
 15550                                  ;
 15551                                  ;	ENTRY	(AL) = function code
 15552                                  ;		  0Ch - Control Function subcode
 15553                                  ;		(BX) = File Handle
 15554                                  ;		(CH) = Category Indicator
 15555                                  ;		(CL) = Function within category
 15556                                  ;		(DS:DX) = address for data, if any
 15557                                  ;		(SI) = Passed to device as argument, use depends upon function
 15558                                  ;		(DI) = Passed to device as argument, use depends upon function
 15559                                  ;	EXIT	'C' set if error
 15560                                  ;		  (AX) = error code
 15561                                  ;		'C' clear if OK
 15562                                  ;		  (SI) = Return value, meaning is function dependent
 15563                                  ;		  (DI) = Return value, meaning is function dependent
 15564                                  ;		  (DS:DX) = Return address, use is function dependent
 15565                                  ;	USES	ALL
 15566                                  ;
 15567                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15568                                  ;     (See inc\ioctl.inc for more info)
 15569                                  ;
 15570                                  ;	ENTRY	(AL) = function code
 15571                                  ;		  0Dh - Control Function subcode
 15572                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15573                                  ;		(CH) = Category Indicator
 15574                                  ;		(CL) = Function within category
 15575                                  ;		(DS:DX) = address for data, if any
 15576                                  ;		(SI) = Passed to device as argument, use depends upon function
 15577                                  ;		(DI) = Passed to device as argument, use depends upon function
 15578                                  ;
 15579                                  ;	EXIT	'C' set if error
 15580                                  ;		  (AX) = error code
 15581                                  ;		'C' clear if OK
 15582                                  ;		  (DS:DX) = Return address, use is function dependent
 15583                                  ;	USES	ALL
 15584                                  ;
 15585                                  ;---------------------------------------------------------------------------
 15586                                  	
 15587                                  	; 17/05/2019 - Retro DOS v4.0
 15588                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15589                                  
 15590                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15591                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15592                                  
 15593                                  IOCTLJMPTABLE:	;label	word
 15594                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15595 000021E0 [1C22]                  	dw	ioctl_getset_data	; 0
 15596 000021E2 [1C22]                  	dw	ioctl_getset_data   	; 1
 15597 000021E4 [6C22]                  	dw	ioctl_control_string	; 2
 15598 000021E6 [6C22]                  	dw	ioctl_control_string	; 3
 15599 000021E8 [BA23]                  	dw	ioctl_get_dev		; 4
 15600 000021EA [BA23]                  	dw	ioctl_get_dev		; 5
 15601 000021EC [8622]                  	dw	ioctl_status		; 6
 15602 000021EE [8622]                  	dw	ioctl_status		; 7
 15603 000021F0 [2723]                  	dw	ioctl_rem_media		; 8
 15604 000021F2 [6223]                  	dw	ioctl_drive_attr	; 9
 15605 000021F4 [AC23]                  	dw	ioctl_handle_redir	; A
 15606 000021F6 [A222]                  	dw	Set_Retry_Parameters	; B
 15607 000021F8 [B022]                  	dw	GENERICIOCTLHANDLE	; C
 15608 000021FA [C722]                  	dw	GENERICIOCTL		; D
 15609                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15610 000021FC [5D24]                  	dw	ioctl_drive_owner	; E
 15611 000021FE [5D24]                  	dw	ioctl_drive_owner	; F
 15612                                  	; MSDOS 6.0
 15613 00002200 [B022]                  	dw	query_handle_support	; 10h
 15614 00002202 [C722]                  	dw	query_device_support	; 11h
 15615                                  
 15616                                  	; 11/11/2022
 15617                                  _$IOCTL:
 15618 00002204 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15619 00002206 16                      	push	ss
 15620 00002207 1F                      	pop	ds			;hkn; SS is DOSDATA
 15621                                  
 15622                                  	; MSDOS 3.3
 15623                                  	;cmp	al,0Fh 
 15624                                  	; MSDOS 6.0
 15625 00002208 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15626 0000220A 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15627                                  
 15628                                  	; 14/01/2024
 15629                                  	; 28/05/2019
 15630                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15631 0000220C 89C7                    	mov	di,ax			; di NOT a PARM
 15632 0000220E 81E7FF00                	and	di,0FFh			; di = al
 15633 00002212 D1E7                    	shl	di,1			; di = index into jmp table
 15634                                  	;pop	AX			; Restore AL for generic IOCTL
 15635                                  
 15636 00002214 2EFFA5[E021]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15637                                  
 15638                                  ioctl_bad_funj2:
 15639 00002219 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15640                                  
 15641                                  ;--------------------------------------------------------------------------
 15642                                  ;
 15643                                  ; IOCTL: AL = 0,1
 15644                                  ;
 15645                                  ; ENTRY: DS = DOSDATA
 15646                                  ;
 15647                                  ;--------------------------------------------------------------------------
 15648                                  
 15649                                  ioctl_getset_data:
 15650                                  	; MSDOS 6.0
 15651 0000221C E8F542                  	call	SFFromHandle		; ES:DI -> SFT
 15652 0000221F 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15653                                  ioctl_bad_handle:
 15654                                  	;mov	al,6
 15655 00002221 B006                    	mov	al,error_invalid_handle
 15656                                  ioctl_error:
 15657 00002223 E914E4                  	jmp	SYS_RET_ERR
 15658                                  
 15659                                  ioctl_check_permissions:
 15660 00002226 3C00                    	CMP	AL,0
 15661                                  	;mov	al,[es:di+5]
 15662 00002228 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15663 0000222C 741B                    	JZ	short ioctl_read	; read the byte
 15664                                  
 15665 0000222E 08F6                    	or	dh,dh
 15666 00002230 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15667                                  	;mov	al,0Dh
 15668 00002232 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15669                                  	;jmp	SYS_RET_ERR
 15670 00002234 EBED                    	jmp	short ioctl_error
 15671                                  
 15672                                  ioctl_check_device:
 15673 00002236 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15674 00002238 74DF                    	jz	short ioctl_bad_funj2
 15675 0000223A 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15676                                  					;   device bit!! He can muck with the
 15677                                  					;   others at will.
 15678 0000223D C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15679 00002242 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15680                                  ioctl_ok:
 15681 00002246 E9E8E3                  	jmp	SYS_RET_OK
 15682                                  
 15683                                  ioctl_read:
 15684 00002249 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15685 0000224E 30E4                    	XOR	AH,AH
 15686 00002250 A880                    	test	AL,devid_device 	; Should I set high byte
 15687 00002252 740D                    	JZ	short ioctl_no_high	; no
 15688 00002254 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15689                                  	;les	di,[es:di+7]
 15690 00002259 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15691                                  	;mov	ah,[es:di+5]
 15692 0000225D 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15693                                  ioctl_no_high:
 15694 00002261 89C2                    	MOV	DX,AX
 15695                                  ioctl_set_dx:	; 16/12/2022
 15696 00002263 E81BE2                  	call	Get_User_Stack
 15697                                  	;mov	[si+6],dx
 15698 00002266 895406                  	MOV	[SI+user_env.user_DX],DX
 15699                                  	;;jmp	SYS_RET_OK
 15700                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15701                                  ioctl_ok_j:
 15702                                  	; 16/12/2022
 15703 00002269 E9C8E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15704                                  	;jmp	short ioctl_ok
 15705                                  	; 26/07/2019
 15706                                  	;jmp	SYS_RET_OK_clc
 15707                                  
 15708                                  ;--------------------------------------------------------------------------
 15709                                  ;
 15710                                  ; IOCTL: AL = 2,3
 15711                                  ;
 15712                                  ; ENTRY: DS = DOSDATA
 15713                                  ;	 SI = user's DS
 15714                                  ;
 15715                                  ;--------------------------------------------------------------------------
 15716                                  
 15717                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15718                                  ioctl_control_string:
 15719 0000226C E8A542                  	call	SFFromHandle		; ES:DI -> SFT
 15720 0000226F 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15721                                  	; 07/12/2022
 15722                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15723                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15724                                  	; MSDOS 5.0 & MSDOS 6.0
 15725 00002271 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15726 00002276 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15727 00002278 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15728 0000227D 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15729 00002281 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15730 00002283 E93C01                  	JMP	ioctl_do_string
 15731                                  
 15732                                  ;--------------------------------------------------------------------------
 15733                                  ;
 15734                                  ; IOCTL: AL = 6,7
 15735                                  ;
 15736                                  ; ENTRY: DS = DOSDATA
 15737                                  ;
 15738                                  ;--------------------------------------------------------------------------
 15739                                  
 15740                                  ioctl_status:
 15741 00002286 B401                    	MOV	AH,1
 15742 00002288 2C06                    	SUB	AL,6			; 6=0,7=1
 15743 0000228A 7402                    	JZ	short ioctl_get_status
 15744 0000228C B403                    	MOV	AH,3
 15745                                  ioctl_get_status:
 15746 0000228E 50                      	PUSH	AX
 15747 0000228F E8E112                  	call	GET_IO_SFT
 15748 00002292 58                      	POP	AX
 15749                                  	;JNC	short DO_IOFUNC
 15750                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15751                                  	; 16/12/2022
 15752 00002293 728C                    	jc	short ioctl_bad_handle
 15753                                  DO_IOFUNC:
 15754 00002295 E8D520                  	call	IOFUNC
 15755 00002298 88C4                    	MOV	AH,AL
 15756 0000229A B0FF                    	MOV	AL,0FFH
 15757                                  	;JNZ	short ioctl_status_ret
 15758                                  	; 29/01/2024
 15759 0000229C 75A8                    	jnz	short ioctl_ok
 15760 0000229E FEC0                    	INC	AL
 15761                                  ioctl_status_ret:
 15762                                  	;jmp	SYS_RET_OK
 15763                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15764                                  	;jmp	short ioctl_ok_j
 15765                                  	; 16/12/2022
 15766 000022A0 EBA4                    	jmp	short ioctl_ok
 15767                                  
 15768                                  ;--------------------------------------------------------------------------
 15769                                  ;
 15770                                  ; IOCTL: AL = B
 15771                                  ;
 15772                                  ; ENTRY: DS = DOSDATA
 15773                                  ;
 15774                                  ;--------------------------------------------------------------------------
 15775                                  
 15776                                  Set_Retry_Parameters:
 15777                                  	; 09/09/2018
 15778 000022A2 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15779 000022A6 09D2                    	OR	DX,DX			; zero retries not allowed
 15780 000022A8 7475                    	JZ	short ioctl_bad_fun
 15781 000022AA 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15782                                  doneok:
 15783                                  	;jmp	SYS_RET_OK		; Done
 15784                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15785                                  	;jmp	short ioctl_status_ret
 15786                                  	; 16/12/2022
 15787 000022AE EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15788                                  
 15789                                  ;--------------------------------------------------------------------------
 15790                                  ;
 15791                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15792                                  ;
 15793                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15794                                  ;	SI:DX -> Users Device Parameter Table
 15795                                  ;	IOCALL -> IOCTL_Req structure
 15796                                  ;
 15797                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15798                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15799                                  ;	call.
 15800                                  ;
 15801                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15802                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15803                                  ;         return address off the stack if the drive is invalid.
 15804                                  ;
 15805                                  ;--------------------------------------------------------------------------
 15806                                  
 15807                                  query_handle_support:	; Entry point for handles
 15808                                  GENERICIOCTLHANDLE:
 15809 000022B0 E86142                  	call	SFFromHandle		; Get SFT for device.
 15810 000022B3 726F                    	jc	short ioctl_bad_handlej
 15811                                  
 15812                                  	;test	word [es:di+5],8000h
 15813                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15814                                  	;test	byte [es:di+6],80h
 15815 000022B5 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15816 000022BA 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15817                                  
 15818 000022BC C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15819                                  	;les	di,[es:di+7]
 15820 000022C1 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15821 000022C5 EB0F                    	jmp	short Do_GenIOCTL
 15822                                  
 15823                                  query_device_support:	; Entry point for devices:
 15824                                  GENERICIOCTL:
 15825 000022C7 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15826 000022CC 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15827 000022CF 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15828                                  
 15829 000022D1 E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15830 000022D4 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15831                                  
 15832                                  Do_GenIOCTL:
 15833                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15834                                  					; Can device handle Generic IOCTL funcs
 15835                                  	; 09/09/2018
 15836                                  	;test	byte [es:di+4],40h
 15837 000022D6 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15838 000022DB 7442                    	jz	short ioctl_bad_fun
 15839                                  
 15840                                  	; 17/05/2019 - Retro DOS v4.0
 15841                                  
 15842                                  	; MSDOS 6.0
 15843                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15844 000022DD C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15845                                  	;cmp	al,10h
 15846 000022E2 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15847 000022E4 7C0C                    	jl	short SetIOCtlBlock
 15848                                  	
 15849                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15850                                  	;test	byte [es:di+4],80h 
 15851 000022E6 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15852 000022EB 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15853                                  	;
 15854                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15855 000022ED C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15856                                  
 15857                                  SetIOCtlBlock:
 15858 000022F2 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15859 000022F3 57                      	PUSH	DI			; in DS:SI
 15860                                  					; Setup Generic IOCTL Request Block
 15861                                  	;mov	byte [IOCALL_REQLEN],23
 15862 000022F4 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15863                                  	; 07/09/2018 (MSDOS 3.3)
 15864                                  	;;mov	byte [IOCALL_REQFUNC],19
 15865                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15866                                  	;
 15867 000022F9 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15868 000022FD 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15869 00002301 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15870 00002305 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15871 00002309 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15872 0000230D 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15873 00002311 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15874                                  
 15875                                  ;hkn; IOCALL is in DOSDATA
 15876 00002315 BB[7C03]                	MOV	BX,IOCALL
 15877                                  
 15878 00002318 16                      	PUSH	SS
 15879 00002319 07                      	POP	ES
 15880                                  					; DS:SI -> Device header.
 15881 0000231A 5E                      	POP	SI
 15882 0000231B 1F                      	POP	DS
 15883                                  	; 10/08/2018
 15884 0000231C E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15885                                  
 15886                                  ioctl_bad_fun:
 15887 0000231F B001                    	mov	al, error_invalid_function  ; 1
 15888 00002321 E916E3                  	jmp	SYS_RET_ERR	
 15889                                  
 15890                                  ioctl_bad_handlej:
 15891 00002324 E9FAFE                  	jmp	ioctl_bad_handle
 15892                                  
 15893                                  ;---------------------------------------------------------------------------
 15894                                  ;
 15895                                  ; IOCTL: AL = 8
 15896                                  ;
 15897                                  ; ENTRY: DS = DOSDATA
 15898                                  ;
 15899                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15900                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15901                                  ;         return address off the stack if the drive is invalid.
 15902                                  ;
 15903                                  ;-------------------------------------------------------------------------
 15904                                  
 15905                                  	; 30/01/2024
 15906                                  ioctl_rem_media:
 15907                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15908 00002327 E82401                  	CALL	Check_If_Net
 15909 0000232A 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15910                                  					;   certainly don't know how to do this
 15911                                  					;   call.
 15912                                  	;test	word [es:di+4],800h
 15913                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15914                                  	;test	byte [es:di+5],8
 15915 0000232C 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15916 00002331 74EC                    	JZ	short ioctl_bad_fun		; NO
 15917                                  
 15918                                  ;hkn; SS override for IOCALL
 15919                                  	; 30/01/2024
 15920                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15921                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15922 00002333 C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15923 00002338 B00D                    	MOV	AL,REMHL  ; 13
 15924 0000233A 88DC                    	MOV	AH,BL			; Unit number
 15925                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15926 0000233C A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15927 0000233F 31C0                    	XOR	AX,AX
 15928                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15929 00002341 A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15930                                  	
 15931 00002344 06                      	PUSH	ES
 15932 00002345 1F                      	POP	DS
 15933 00002346 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15934 00002348 16                      	PUSH	SS
 15935 00002349 07                      	POP	ES
 15936                                  
 15937                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15938                                  	; 30/01/2024
 15939                                  	; (ds <> ss, ss = DOSDATA segment)
 15940 0000234A BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15941 0000234D 1E                      	push	ds
 15942 0000234E 56                      	push	si
 15943 0000234F E8E921                  	call	DEVIOCALL2
 15944 00002352 5E                      	pop	si
 15945 00002353 1F                      	pop	ds
 15946                                  
 15947                                  ;hkn; SS override
 15948 00002354 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15949                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15950                                  	; 29/01/2024
 15951 00002358 80E402                  	and	ah,STBUI>>8
 15952 0000235B B109                    	MOV	CL,9
 15953 0000235D D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15954                                  ioctl_da_ok_j:	; 11/11/2022
 15955 0000235F E9CFE2                  	jmp	SYS_RET_OK
 15956                                  
 15957                                  ;-------------------------------------------------------------------------
 15958                                  ;
 15959                                  ; IOCTL: AL = 9
 15960                                  ;
 15961                                  ; ENTRY: DS = DOSDATA
 15962                                  ;
 15963                                  ;-------------------------------------------------------------------------
 15964                                  
 15965                                  ioctl_drive_attr:
 15966                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15967 00002362 88D8                    	mov	al,bl
 15968 00002364 E8BF45                  	call	GETTHISDRV
 15969 00002367 723E                    	jc	short ioctl_drv_err
 15970 00002369 E8B500                  	call	Get_Driver_BL
 15971                                  	; MSDOS 6.0
 15972 0000236C 7239                    	JC	short ioctl_drv_err	; drive not valid
 15973                                  
 15974                                  	;mov	dx,[es:di+4]
 15975 0000236E 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15976                                  					; get device attribute word
 15977 00002372 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15978                                  
 15979                                  ;hkn; SS override
 15980                                  	;LES	DI,[SS:THISCDS]
 15981                                  	; 30/01/2024
 15982 00002374 C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15983                                  
 15984                                  	;test	word [es:di+43h],8000h
 15985                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15986                                  	;test	byte [es:di+44h],80h
 15987 00002378 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15988 0000237D 7403                    	JZ	short IOCTLShare
 15989                                  
 15990                                  	;or	dx,1000h ; (MSDOS 3.3)
 15991                                  
 15992                                  ;	Net devices don't return a device attribute word.
 15993                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15994                                  
 15995 0000237F BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15996                                  
 15997                                  IOCTLShare:
 15998                                  	; 30/01/2024
 15999                                  	; ds = ss = DOSDATA segment
 16000                                  	;push	ss
 16001                                  	;pop	ds
 16002                                  
 16003 00002382 BE[BE03]                	MOV	SI,OPENBUF
 16004 00002385 80C341                  	ADD	BL,"A"	; 41h
 16005 00002388 881C                    	MOV	[SI],BL
 16006 0000238A C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 16007 0000238F B80003                  	MOV	AX,0300h
 16008 00002392 F8                      	CLC
 16009                                  	;INT	int_IBM
 16010 00002393 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 16011                                  			; DS:SI -> ASCIZ disk device name 
 16012                                  			; (may be full path or only drive
 16013                                  			; specifier--must include the colon)
 16014                                  			; Return: CF clear if absolute disk access allowed
 16015 00002395 7303                    	JNC	short IOCTLLocal	; Not shared
 16016                                  	;OR	DX,0200H		; Shared, bit 9
 16017                                  	; 17/12/2022
 16018 00002397 80CE02                  	or	dh,02h
 16019                                  IOCTLLocal:
 16020                                  	;test	word [es:di+43h],1000h
 16021                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 16022                                  	;test	byte [es:di+44h],10h
 16023 0000239A 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 16024                                  	;JZ	short ioctl_set_DX
 16025                                  	; 16/12/2022
 16026 0000239F 7403                    	jz	short _ioctl_set_DX
 16027                                  	;OR	DX,8000h
 16028                                  	; 17/12/2022
 16029 000023A1 80CE80                  	or	dh,80h
 16030                                  ;ioctl_set_DX:
 16031                                  _ioctl_set_DX:
 16032                                  	; 16/12/2022
 16033 000023A4 E9BCFE                  	jmp	ioctl_set_dx
 16034                                  ; 16/12/2022
 16035                                  %if 0	
 16036                                  	call	Get_User_Stack
 16037                                  	MOV	[SI+user_env.user_DX],DX
 16038                                  	;;jmp	SYS_RET_OK
 16039                                  	;; 25/06/2019
 16040                                  	;jmp	SYS_RET_OK_clc
 16041                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16042                                  ioctl_gd_ok_j:
 16043                                  	jmp	short ioctl_da_ok_j
 16044                                  %endif
 16045                                  
 16046                                  ioctl_drv_err:
 16047 000023A7 B00F                    	mov	al,error_invalid_drive ; 0Fh
 16048                                  ioctl_gd_err_j:	; 11/11/2022
 16049 000023A9 E98EE2                  	jmp	SYS_RET_ERR
 16050                                  
 16051                                  ;--------------------------------------------------------------------------
 16052                                  ;
 16053                                  ; IOCTL: AL = A
 16054                                  ;
 16055                                  ; ENTRY: DS = DOSDATA
 16056                                  ;
 16057                                  ;--------------------------------------------------------------------------
 16058                                  
 16059                                  ioctl_handle_redir:
 16060 000023AC E86541                  	call	SFFromHandle		; ES:DI -> SFT
 16061 000023AF 7303                    	JNC	short ioctl_got_sft	; have valid handle
 16062 000023B1 E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 16063                                  
 16064                                  ioctl_got_sft:
 16065                                  	;mov	dx,[es:di+5]
 16066 000023B4 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 16067                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 16068                                  	; 16/12/2022
 16069 000023B8 EBEA                    	jmp	short _ioctl_set_DX
 16070                                  
 16071                                  	; 16/12/2022
 16072                                  ;ioctl_bad_funj:
 16073                                  	;JMP	ioctl_bad_fun
 16074                                  
 16075                                  ;--------------------------------------------------------------------------
 16076                                  ;
 16077                                  ; IOCTL: AL= 4,5
 16078                                  ;
 16079                                  ; ENTRY: DS = DOSDATA
 16080                                  ;	 SI = user's DS
 16081                                  ;
 16082                                  ;
 16083                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 16084                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16085                                  ;         return address off the stack if the drive is invalid.
 16086                                  ;
 16087                                  ;-------------------------------------------------------------------------
 16088                                  
 16089                                  ioctl_get_dev:
 16090 000023BA E89100                  	CALL	Check_If_Net
 16091                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 16092                                  					; certainly don't know how to do this
 16093                                  					; call.
 16094                                  	; 16/12/2022
 16095 000023BD 7403                    	jz	short ioctl_do_string
 16096                                  ioctl_bad_funj:
 16097 000023BF E95DFF                  	JMP	ioctl_bad_fun
 16098                                  
 16099                                  ioctl_do_string:
 16100                                  	;test	word [es:di+4],4000h
 16101                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 16102                                  	;test	byte [es:di+5],40h
 16103 000023C2 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 16104 000023C7 74F6                    	JZ	short ioctl_bad_funj		; NO
 16105                                  					; assume IOCTL read
 16106 000023C9 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 16107                                  
 16108 000023CE A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16109 000023D0 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16110                                  
 16111                                  					; it is an IOCTL write
 16112 000023D2 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16113                                  
 16114                                  ioctl_control_call:
 16115 000023D7 B016                    	MOV	AL,DRDWRHL ; 22
 16116                                  ioctl_setup_pkt:
 16117 000023D9 88DC                    	MOV	AH,BL			; Unit number
 16118 000023DB A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16119 000023DE 31C0                    	XOR	AX,AX
 16120 000023E0 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16121 000023E3 A2[8903]                	MOV	[IOMED],AL
 16122 000023E6 890E[8E03]              	MOV	[IOSCNT],CX
 16123 000023EA 8916[8A03]              	MOV	[IOXAD],DX
 16124 000023EE 8936[8C03]              	MOV	[IOXAD+2],SI
 16125 000023F2 06                      	PUSH	ES
 16126 000023F3 1F                      	POP	DS
 16127 000023F4 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16128 000023F6 16                      	PUSH	SS
 16129 000023F7 07                      	POP	ES
 16130                                  
 16131 000023F8 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16132                                  ioctl_do_IO:
 16133 000023FB E83D21                  	call	DEVIOCALL2
 16134                                  
 16135                                  ;hkn; SS override for IOCALL
 16136                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16137                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16138                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16139 000023FE 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16140 00002404 7507                    	JNZ	short ioctl_string_err
 16141                                  
 16142                                  ;hkn; SS override
 16143 00002406 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16144                                  	; 16/12/2022
 16145 0000240A E924E2                  	jmp	SYS_RET_OK
 16146                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16147                                  	;jmp	short ioctl_gd_ok_j
 16148                                  
 16149                                  ioctl_string_err:
 16150 0000240D 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16151                                  device_err:
 16152 00002412 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16153 00002416 89F8                    	MOV	AX,DI
 16154 00002418 E8A02F                  	call	SET_I24_EXTENDED_ERROR
 16155                                  
 16156                                  ;hkn; use SS override
 16157                                  ;hkn;	mov	ax,[CS:EXTERR]
 16158 0000241B 36A1[2403]              	mov	ax,[SS:EXTERR]
 16159                                  	;jmp	SYS_RET_ERR
 16160                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16161 0000241F EB88                    	jmp	short ioctl_gd_err_j
 16162                                  
 16163                                  ; 17/05/2019 - Retro DOS v4.0
 16164                                  
 16165                                  ;--------------------------------------------------------------------------
 16166                                  ; Proc name : Get_Driver_BL
 16167                                  ;
 16168                                  ;	DS is DOSDATA
 16169                                  ;	BL is drive number (0=default)
 16170                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16171                                  ;	No regs modified
 16172                                  ;
 16173                                  ;---------------------------------------------------------------------------
 16174                                  
 16175                                  	; 30/01/2024
 16176                                  Get_Driver_BL:
 16177 00002421 50                      	PUSH	AX
 16178 00002422 88D8                    	MOV	AL,BL			; Drive
 16179 00002424 E8FF44                  	call	GETTHISDRV
 16180 00002427 7223                    	jc	short ioctl_bad_drv
 16181 00002429 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16182 0000242B C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16183 00002430 C43E[A205]              	LES	DI,[THISCDS]
 16184                                  	;test	word [es:di+43h],8000h
 16185                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16186                                  	;test	byte [es:di+44h],80h
 16187 00002434 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16188                                  	;les	di,[es:di+45h]
 16189 00002439 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16190 0000243D 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16191 0000243F C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16192                                  	;mov	bl,[es:di+1]
 16193 00002444 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16194                                  	;les	di,[es:di+13h]
 16195 00002448 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16196                                  got_dev_ptr:
 16197                                  	; 30/01/2024
 16198                                  	; cf=0
 16199                                  	;CLC
 16200                                  ioctl_bad_drv:
 16201 0000244C 58                      	POP	AX
 16202 0000244D C3                      	retn
 16203                                  
 16204                                  ;-------------------------------------------------------------------------
 16205                                  ; Proc Name : Check_If_Net:
 16206                                  ;
 16207                                  ;
 16208                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16209                                  ; If no device is found, the return address is popped off the stack, and a
 16210                                  ; jump is made to ioctl_drv_err.
 16211                                  ;
 16212                                  ; On Entry:
 16213                                  ; Registers same as those for Get_Driver_BL
 16214                                  ;
 16215                                  ; On Exit:
 16216                                  ; ZERO flag	- set if not a net device
 16217                                  ;		- reset if net device
 16218                                  ; ES:DI -> the device
 16219                                  ;
 16220                                  ;
 16221                                  ; BUGBUG: This function assumes the following stack setup on entry
 16222                                  ;
 16223                                  ;	  SP+2 -> Error return address
 16224                                  ;	  SP   -> Normal return address
 16225                                  ;
 16226                                  ;-------------------------------------------------------------------------
 16227                                  
 16228                                  	; 30/01/2024 - Retro DOS v5.0
 16229                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:639Ch
 16230                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6A91h
 16231                                  	; Windows ME IO.SYS - BIOSCODE:68E1h
 16232                                  
 16233                                  Check_If_Net:
 16234                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16235 0000244E E8D0FF                  	CALL	Get_Driver_BL
 16236 00002451 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16237                                  
 16238                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16239                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16240                                  %if 0
 16241                                  	;;;
 16242                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16243                                  	PUSH	ES
 16244                                  	PUSH	DI
 16245                                  	LES	DI,[THISCDS]
 16246                                  	;test	word [es:di+43h],8000h
 16247                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16248                                  	;test	byte [es:di+44h],80h
 16249                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16250                                  	POP	DI
 16251                                  	POP	ES
 16252                                  	;;;
 16253                                  %endif
 16254 00002453 C3                      	retn
 16255                                  
 16256                                  ioctl_drv_err_pop:
 16257 00002454 58                      	pop	ax			; pop off return address
 16258 00002455 E94FFF                  	jmp	ioctl_drv_err
 16259                                  
 16260                                  ioctl_bad_funj3:
 16261 00002458 E9C4FE                  	jmp	ioctl_bad_fun
 16262                                  
 16263                                  ioctl_string_errj:
 16264 0000245B EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16265                                  
 16266                                  ;--------------------------------------------------------------------------
 16267                                  ;
 16268                                  ; IOCTL: AL = E, F
 16269                                  ;
 16270                                  ; ENTRY: DS = DOSDATA
 16271                                  ;
 16272                                  ;
 16273                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16274                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16275                                  ;         return address off the stack if the drive is invalid.
 16276                                  ;
 16277                                  ;--------------------------------------------------------------------------
 16278                                  
 16279                                  ioctl_drive_owner:
 16280                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16281 0000245D E8EEFF                  	Call	Check_If_Net
 16282 00002460 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16283                                  					;   certainly don't know how to do this
 16284                                  					;   call.
 16285                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16286                                  	; 09/09/2018
 16287                                  	;test	byte [es:di+4],40h
 16288 00002462 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16289 00002467 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16290                                  	;mov	byte [IOCALL_REQFUNC],23
 16291 00002469 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16292 0000246E 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16293 00002470 7405                    	jz	short GetOwner
 16294                                  SetOwner:
 16295 00002472 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16296                                  GetOwner:
 16297 00002477 B00D                    	MOV	AL,OWNHL ; 13
 16298 00002479 88DC                    	MOV	AH,BL			; Unit number
 16299 0000247B A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16300 0000247E 31C0                    	XOR	AX,AX
 16301 00002480 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16302 00002483 06                      	PUSH	ES
 16303 00002484 1F                      	POP	DS
 16304 00002485 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16305 00002487 16                      	PUSH	SS
 16306 00002488 07                      	POP	ES
 16307 00002489 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16308 0000248C 1E                      	push	ds
 16309 0000248D 56                      	push	si
 16310 0000248E E8AA20                  	call	DEVIOCALL2
 16311 00002491 5E                      	pop	si
 16312 00002492 1F                      	pop	ds
 16313                                  ;hkn; SS override
 16314                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16315                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16316 00002493 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16317 00002499 75C0                    	jnz	short ioctl_string_errj
 16318 0000249B 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16319                                  					; owner returned is 1-based.
 16320 0000249F E98FE1                  	jmp	SYS_RET_OK
 16321                                  
 16322                                  ;============================================================================
 16323                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16324                                  ;============================================================================
 16325                                  ; 07/08/2018 - Retro DOS v3.0
 16326                                  ; 17/05/2019 - Retro DOS v4.0
 16327                                  
 16328                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16329                                  ;	NAME	DOS_DELETE
 16330                                  
 16331                                  ;
 16332                                  ;	Microsoft Confidential
 16333                                  ;	Copyright (C) Microsoft Corporation 1991
 16334                                  ;	All Rights Reserved.
 16335                                  ;
 16336                                  
 16337                                  ;**	DELETE.ASM - Low level routine for deleting files
 16338                                  ;----------------------------------------------------------------------------
 16339                                  ;		DOS_DELETE
 16340                                  ;		REN_DEL_Check
 16341                                  ;		FastOpen_Delete	       ; DOS 3.3
 16342                                  ;		FastOpen_Update	       ; DOS 3.3
 16343                                  
 16344                                  ;   Revision history:
 16345                                  ;
 16346                                  ;   A000  version 4.00	Jan. 1988
 16347                                  ;   A001  Fastopen Rename fix	April 1989
 16348                                  
 16349                                  ;Installed = TRUE
 16350                                  
 16351                                  ;	i_need	NoSetDir,BYTE
 16352                                  ;	i_need	Creating,BYTE
 16353                                  ;	i_need	DELALL,BYTE
 16354                                  ;	i_need	THISDPB,DWORD
 16355                                  ;	i_need	THISSFT,DWORD
 16356                                  ;	i_need	THISCDS,DWORD
 16357                                  ;	i_need	CURBUF,DWORD
 16358                                  ;	i_need	ATTRIB,BYTE
 16359                                  ;	i_need	SATTRIB,BYTE
 16360                                  ;	i_need	WFP_START,WORD
 16361                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16362                                  ;	i_need	NAME1,BYTE			 ;BN001
 16363                                  ;	i_need	FoundDel,BYTE
 16364                                  ;	i_need	AUXSTACK,BYTE
 16365                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16366                                  ;	i_need	JShare,DWORD
 16367                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16368                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16369                                  ;
 16370                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16371                                  ;
 16372                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16373                                  ;	i_need	DMAADD,DWORD
 16374                                  ;	i_need	RENAMEDMA,BYTE
 16375                                  
 16376                                  ;----------------------------------------------------------------------------
 16377                                  ;
 16378                                  ; Procedure Name : DOS_DELETE
 16379                                  ;
 16380                                  ; Inputs:
 16381                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16382                                  ;		terminated)
 16383                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16384                                  ;		( = -1 if current dir not involved, else
 16385                                  ;		 Points to first char after last "/" of current dir part)
 16386                                  ;	[THISCDS] Points to CDS being used
 16387                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16388                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16389                                  ; Function:
 16390                                  ;	Delete the specified file(s)
 16391                                  ; Outputs:
 16392                                  ;	CARRY CLEAR
 16393                                  ;		OK
 16394                                  ;	CARRY SET
 16395                                  ;	    AX is error code
 16396                                  ;		error_file_not_found
 16397                                  ;			Last element of path not found
 16398                                  ;		error_path_not_found
 16399                                  ;			Bad path (not in curr dir part if present)
 16400                                  ;		error_bad_curr_dir
 16401                                  ;			Bad path in current directory part of path
 16402                                  ;		error_access_denied
 16403                                  ;			Attempt to delete device or directory
 16404                                  ;		***error_sharing_violation***
 16405                                  ;			Deny both access required, generates an INT 24.
 16406                                  ;			This error is NOT returned. The INT 24H is generated,
 16407                                  ;			  and the file is ignored (not deleted). Delete will
 16408                                  ;			  simply continue on looking for more files.
 16409                                  ;			  Carry will NOT be set in this case.
 16410                                  ; DS preserved, others destroyed
 16411                                  ;
 16412                                  ;----------------------------------------------------------------------------
 16413                                  
 16414                                  FILEFOUND   equ 01h
 16415                                  FILEDELETED equ 10h
 16416                                  
 16417                                  
 16418                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16419                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16420                                  
 16421                                  	; 30/01/2024
 16422                                  
 16423                                  DOS_DELETE:
 16424                                  
 16425                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16426                                  ;hkn; appropriately at this point.
 16427                                  
 16428 000024A2 E884ED                  	call	TestNet
 16429 000024A5 7306                    	JNC	short LOCAL_DELETE
 16430                                  
 16431                                  ;IF NOT Installed
 16432                                  ;	transfer NET_DELETE
 16433                                  ;ELSE
 16434                                  	;MOV	AX,(MultNET SHL 8) | 19
 16435                                  	;INT	2FH
 16436                                  	;return
 16437                                  
 16438 000024A7 B81311                  	mov	ax,1113h
 16439 000024AA CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16440                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16441                                  			;		fully-qualified filename in DOS CS
 16442                                  			; SDA CDS pointer -> current directory structure for drive with file
 16443                                  			; Return: CF set on error
 16444 000024AC C3                      	retn
 16445                                  ;ENDIF
 16446                                  
 16447                                  LOCAL_DELETE:
 16448 000024AD C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16449 000024B2 E82DEE                  	call	ECritDisk
 16450                                  	;mov	word [CREATING],0E500h
 16451 000024B5 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16452 000024BB 8B36[B205]              	MOV	SI,[WFP_START]
 16453                                  SKPNUL:
 16454 000024BF AC                      	LODSB
 16455 000024C0 08C0                    	OR	AL,AL
 16456 000024C2 75FB                    	JNZ	short SKPNUL		; go to end
 16457 000024C4 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16458 000024C7 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16459 000024CB 7506                    	JNZ	short TEST_QUEST
 16460 000024CD 807C022A                	CMP	BYTE [SI+2],"*"
 16461 000024D1 741F                    	JZ	short CHECK_ATTS
 16462                                  TEST_QUEST:
 16463 000024D3 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16464 000024D6 87FE                    	XCHG	DI,SI
 16465                                  
 16466 000024D8 16                      	push	ss
 16467                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16468 000024D9 07                      	pop	es ; 17/05/2019
 16469                                  
 16470 000024DA B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16471 000024DD B90400                  	MOV	CX,4		; four sets of "??"
 16472 000024E0 F3AF                    	REPE	SCASW
 16473 000024E2 751C                    	JNZ	short NOT_ALL
 16474 000024E4 87FE                    	XCHG	DI,SI
 16475 000024E6 AD                      	LODSW
 16476 000024E7 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16477 000024EA 7514                    	JNZ	short NOT_ALL
 16478 000024EC AD                      	LODSW
 16479 000024ED 3D3F3F                  	CMP	AX,"??"
 16480 000024F0 750E                    	JNZ	short NOT_ALL
 16481                                  CHECK_ATTS:
 16482 000024F2 A0[6D05]                	MOV	AL,[SATTRIB]
 16483                                  	;and	al,1Fh
 16484 000024F5 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16485                                  					; Look only at hidden bits
 16486                                  	;cmp	al,1Fh
 16487 000024F7 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16488                                  					; All must be set
 16489 000024F9 7505                    	JNZ	short NOT_ALL
 16490                                  
 16491                                  ; NOTE WARNING DANGER-----
 16492                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16493                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16494                                  
 16495 000024FB C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16496                                  NOT_ALL:
 16497 00002500 C606[4C03]01            	MOV	byte [NoSetDir],1
 16498 00002505 E81419                  	call	GetPathNoSet
 16499 00002508 7312                    	JNC	short Del_found
 16500 0000250A 750B                    	JNZ	short _bad_path
 16501 0000250C 08C9                    	OR	CL,CL
 16502 0000250E 7407                    	JZ	short _bad_path
 16503                                  No_file:
 16504 00002510 B80200                  	MOV	AX,error_file_not_found
 16505                                  ErrorReturn:
 16506 00002513 F9                      	STC
 16507                                  	;call	LCritDisk
 16508                                  	;retn
 16509                                  	; 18/12/2022
 16510 00002514 E9E6ED                  	jmp	LCritDisk
 16511                                  
 16512                                  _bad_path:
 16513 00002517 B80300                  	MOV	AX,error_path_not_found
 16514 0000251A EBF7                    	JMP	short ErrorReturn
 16515                                  
 16516                                  Del_found:
 16517 0000251C 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16518 0000251E 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16519 00002523 7405                    	JZ	short NOT_DIR
 16520                                  Del_access_err:
 16521 00002525 B80500                  	MOV	AX,error_access_denied
 16522 00002528 EBE9                    	JMP	short ErrorReturn
 16523                                  
 16524                                  NOT_DIR:
 16525 0000252A 08E4                    	OR	AH,AH			; Check if device name
 16526 0000252C 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16527                                  
 16528                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16529                                  
 16530                                  DELFILE:
 16531 0000252E 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16532                                  
 16533                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16534                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16535                                  
 16536 00002533 1E                      	PUSH	DS
 16537 00002534 8A26[7F05]              	MOV	AH,[DELALL]
 16538 00002538 C53E[E205]              	LDS	DI,[CURBUF]
 16539                                  	
 16540                                  ;hkn; SS override
 16541 0000253C 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16542 00002542 7509                    	JNZ	short DoDelete		; yes
 16543                                  
 16544 00002544 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16545 00002548 7403                    	JZ	short DoDelete		; not read only
 16546                                  
 16547                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16548                                  Skip_it:
 16549 0000254A 1F                      	POP	DS
 16550 0000254B EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16551                                  
 16552                                  DoDelete:
 16553 0000254D E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16554                                  	;JNC	short DEL_SHARE_OK
 16555                                  	;POP	DS
 16556                                  	;JMP	SHORT DELNXT		; Skip it
 16557                                  	; 30/01/2024
 16558 00002550 72F8                    	jc	short Skip_it
 16559                                  
 16560                                  DEL_SHARE_OK:
 16561                                  	; 17/05/2019 - Retro DOS v4.0
 16562                                  	; MSDOS 6.0
 16563                                  	;test	byte [di+5],40h
 16564 00002552 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16565                                  					;LB. if already dirty		  ;AN000;
 16566 00002556 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16567 00002558 E8A934                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16568                                  	;or	byte [di+5],40h
 16569 0000255B 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16570                                  yesdirty:
 16571 0000255F 8827                    	mov	[bx],ah 
 16572                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16573 00002561 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16574 00002563 1F                      	POP	DS
 16575 00002564 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16576                                  
 16577 00002569 83FB02                  	CMP	BX,2
 16578 0000256C 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16579                                  	;cmp	bx,[es:bp+0Dh]
 16580 0000256E 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16581 00002572 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16582                                  
 16583 00002574 E81028                  	call	RELEASE 		; Free file data
 16584 00002577 7252                    	JC	short No_fileJ
 16585                                  
 16586                                  ; DOS 3.3  FastOpen
 16587                                  
 16588 00002579 E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16589                                  
 16590                                  ; DOS 3.3  FastOpen
 16591                                  
 16592                                  DELNXT:
 16593 0000257C C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16594 00002580 E80618                  	call	GETENTRY		; Registers need to be reset
 16595 00002583 7246                    	JC	short No_fileJ
 16596 00002585 E84117                  	call	NEXTENT
 16597 00002588 73A4                    	JNC	short DELFILE
 16598 0000258A C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16599                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16600                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16601                                  	;;mov	al,[es:bp+0]
 16602                                  	; 15/12/2022
 16603 0000258E 268A4600                	MOV	AL,[ES:BP]
 16604 00002592 E86D33                  	call	FLUSHBUF
 16605 00002595 7234                    	JC	short No_fileJ
 16606                                  ;
 16607                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16608                                  ;
 16609                                  ;   not found not deleted		file not found
 16610                                  ;   not found	  deleted		*** impossible ***
 16611                                  ;	found not deleted		access denied (read-only)
 16612                                  ;	found	  deleted		no error
 16613                                  ;
 16614 00002597 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16615 0000259C 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16616                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16617                                  ; and to force the DOS to issue a media check.
 16618 0000259E F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16619 000025A3 741C                    	jz	short No_Set_Flag
 16620 000025A5 50                      	PUSH	AX
 16621 000025A6 06                      	PUSH	ES
 16622 000025A7 57                      	PUSH	DI
 16623 000025A8 C43E[A205]              	LES	DI,[THISCDS]
 16624 000025AC 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16625 000025AF 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16626 000025B2 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16627                                  	
 16628                                  	; MSDOS 6.0
 16629 000025B6 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16630 000025B8 E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16631                                  	 
 16632 000025BB E8D12F                  	call	FATREAD_CDS		; force media check
 16633 000025BE 5F                      	POP	DI
 16634 000025BF 07                      	POP	ES
 16635 000025C0 58                      	POP	AX
 16636                                  No_Set_Flag:
 16637                                  	;call	LCritDisk		; carry is clear
 16638                                  	;retn
 16639                                  	; 18/12/2022
 16640 000025C1 E939ED                  	jmp	LCritDisk
 16641                                  DelError:
 16642 000025C4 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16643 000025C9 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16644                                  No_fileJ:
 16645 000025CB E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16646                                  Del_access_errJ:
 16647 000025CE E954FF                  	JMP	Del_access_err ; 10/08/2018
 16648                                  
 16649                                  ; 08/08/2018 - Retro DOS v3.0
 16650                                  
 16651                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16652                                  ;---------------------------------------------------------------------------
 16653                                  ; Procedure Name : REN_DEL_Check
 16654                                  ;
 16655                                  ; Inputs:
 16656                                  ;	[THISDPB] set
 16657                                  ;	[CURBUF+2]:BX points to entry
 16658                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16659                                  ;	[WFP_Start] points to name
 16660                                  ; Function:
 16661                                  ;	Check for Exclusive access on given file.
 16662                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16663                                  ; Outputs:
 16664                                  ;	ES:BP = [THISDPB]
 16665                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16666                                  ;		last element will be loaded from the directory entry.  This is
 16667                                  ;		so the name given to the sharer doesn't have any meta chars in
 16668                                  ;		it.
 16669                                  ;	Carry set if sharing violation, INT 24H generated
 16670                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16671                                  ;		This is because input AX is preserved.
 16672                                  ;		Caller must set the error if needed.
 16673                                  ;	Carry clear
 16674                                  ;		OK
 16675                                  ; AX,DS,BX,SI,DI preserved
 16676                                  ;---------------------------------------------------------------------------
 16677                                  
 16678                                  REN_DEL_Check:
 16679                                  
 16680 000025D1 1E                      	PUSH	DS
 16681 000025D2 57                      	PUSH	DI
 16682 000025D3 50                      	PUSH	AX
 16683 000025D4 53                      	PUSH	BX
 16684 000025D5 56                      	PUSH	SI		; Save CURBUF pointers
 16685                                  	
 16686 000025D6 16                      	push	ss
 16687 000025D7 07                      	pop	es
 16688                                  
 16689                                  ;hkn; context ES will assume ES to DOSDATA
 16690                                  ;hkn; ASSUME	ES:DOSGROUP
 16691                                  
 16692                                  ;hkn; SS override
 16693 000025D8 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16694 000025DD 89DE                    	MOV	SI,BX
 16695                                  
 16696                                  ;hkn; SS override
 16697 000025DF 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16698 000025E4 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16699                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16700                                  	; 31/01/2024
 16701 000025E6 43                      	inc	bx
 16702 000025E7 43                      	inc	bx
 16703 000025E8 E8DEEB                  	call	StrLen		; CX is length of ES:DI including NUL
 16704 000025EB 49                      	DEC	CX		; Don't include nul in count
 16705 000025EC 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16706 000025EE E8EF45                  	call	SkipBack	; Back up one element
 16707 000025F1 47                      	INC	DI		; Point to start of last element
 16708                                  
 16709                                  	; 17/05/2019 - Retro DOS v4.0
 16710                                  ;hkn; SS override
 16711                                  	; MSDOS 6.0
 16712 000025F2 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16713                                  	;
 16714 000025F7 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16715 000025FA 5E                      	POP	SI		; Get back entry pointers
 16716 000025FB 5B                      	POP	BX
 16717 000025FC 53                      	PUSH	BX
 16718 000025FD 56                      	PUSH	SI		; Back on stack
 16719                                  	
 16720 000025FE 16                      	push	ss
 16721 000025FF 1F                      	pop	ds
 16722                                  
 16723                                  ;hkn; context DS will assume ES to DOSDATA
 16724                                  ;hkn; ASSUME	DS:DOSGROUP
 16725                                  
 16726                                  ; Close the file if possible by us.
 16727                                  ;
 16728                                  ;if installed
 16729 00002600 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16730                                  ;else
 16731                                  ;	Call	ShCloseFile
 16732                                  ;endif
 16733 00002604 8C1E[A005]              	MOV	[THISSFT+2],DS
 16734                                  
 16735                                  ;hkn; AUXSTACK is in DOSDATA
 16736 00002608 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16737                                  				; Scratch space
 16738 0000260E 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16739 00002610 E80724                  	call	DOOPEN		; Fill in SFT for share check
 16740 00002613 C43E[9E05]              	LES	DI,[THISSFT]
 16741                                  	;mov	word [es:di+2],10h
 16742 00002617 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16743                                  				; requires exclusive access
 16744                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16745 0000261D 26C7050100              	mov	word [ES:DI],1
 16746 00002622 E8AB4B                  	call	ShareEnter
 16747 00002625 720D                    	jc	short CheckDone
 16748 00002627 C43E[9E05]              	LES	DI,[THISSFT]
 16749                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16750 0000262B 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16751                                  	
 16752 00002630 E8984B                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16753 00002633 F8                      	CLC
 16754                                  CheckDone:
 16755 00002634 C42E[8A05]              	LES	BP,[THISDPB]
 16756 00002638 5E                      	POP	SI
 16757 00002639 5B                      	POP	BX
 16758 0000263A 58                      	POP	AX
 16759 0000263B 5F                      	POP	DI
 16760 0000263C 1F                      	POP	DS
 16761 0000263D C3                      	retn
 16762                                  
 16763                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16764                                  ;---------------------------------------------------------------------------
 16765                                  ; Procedure Name : FastOpen_Delete
 16766                                  ; Inputs:
 16767                                  ;	None
 16768                                  ; Function:
 16769                                  ;	Call FastOpen to delete the dir info.
 16770                                  ; Outputs:
 16771                                  ;	None
 16772                                  ;---------------------------------------------------------------------------
 16773                                  
 16774                                  	; 31/01/2024
 16775                                  
 16776                                  FastOpen_Delete:
 16777 0000263E 9C                      	PUSHF			; save flag
 16778 0000263F 56                      	PUSH	SI		; save registers
 16779 00002640 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16780 00002641 53                      	PUSH	BX
 16781 00002642 50                      	PUSH	AX
 16782                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16783                                  ;hkn; SS override
 16784                                  	; 17/05/2019 - Retro DOS v4.0
 16785                                  	; MSDOS 6.0
 16786 00002643 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16787                                  	
 16788 00002648 B003                    	MOV	AL,FONC_delete	; al = 3
 16789                                  
 16790                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16791                                  %if 0 
 16792                                  fastinvoke:
 16793                                  ;hkn; FastTable is in DOSDATA
 16794                                  	MOV	BX,FastTable+2
 16795                                  	CALL	far [BX]	; call fastopen
 16796                                  	POP	AX		; restore registers
 16797                                  	POP	BX
 16798                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16799                                  	POP	SI
 16800                                  	POPF			; restore flag
 16801                                  	retn
 16802                                  %else
 16803 0000264A EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16804                                  %endif
 16805                                  
 16806                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16807                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16808                                  
 16809                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16810                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16811                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16812                                  
 16813                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16814                                  ;---------------------------------------------------------------------------
 16815                                  ; PROCEDURE Name : FastOpen_Rename
 16816                                  ;
 16817                                  ; Inputs:
 16818                                  ;	 REN_WFP   = Path Name
 16819                                  ;	 NAME1	   = New Name
 16820                                  ; Function:
 16821                                  ;	Call FastOpen to rename the dir entry in the cache
 16822                                  ; Outputs:
 16823                                  ;	None
 16824                                  ;---------------------------------------------------------------------------
 16825                                  
 16826                                  FastOpen_Rename:
 16827                                  	; 17/05/2019 - Retro DOS v4.0
 16828                                  	; 08/08/2018 - Retro DOS v3.0
 16829                                  	; MSDOS 6.0
 16830 0000264C 9C                      	PUSHF			;AN001 save flag
 16831 0000264D 56                      	PUSH	SI		;AN001 save registers
 16832 0000264E 57                      	PUSH	DI		;AN001
 16833 0000264F 53                      	PUSH	BX		;AN001
 16834 00002650 50                      	PUSH	AX		;AN001
 16835                                  	;
 16836                                  ;hkn; SS override
 16837 00002651 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16838                                  
 16839                                  ;hkn; NAME1 is in DOSDATA
 16840 00002656 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16841                                  	;mov	al,6
 16842 00002659 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16843                                  
 16844                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16845                                  	
 16846                                  ;hkn; FastTable is in DOSDATA
 16847 0000265B BB[320D]                	MOV	BX,FastTable+2
 16848 0000265E FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16849                                  	
 16850 00002660 58                      	POP	AX		; restore registers  ;AN001
 16851 00002661 5B                      	POP	BX				     ;AN001
 16852 00002662 5F                      	POP	DI				     ;AN001
 16853 00002663 5E                      	POP	SI				     ;AN001
 16854 00002664 9D                      	POPF			; restore flag	     ;AN001
 16855 00002665 C3                      	retn					     ;AN001
 16856                                  
 16857                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16858                                  ;---------------------------------------------------------------------------
 16859                                  ; Procedure Name : FastOpen_Update
 16860                                  ;
 16861                                  ; Inputs:
 16862                                  ;	DL     drive number (A=0,B=1,,,)
 16863                                  ;	CX     first cluster #
 16864                                  ;	AH     0 updates dir entry
 16865                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16866                                  ;	ES:DI  directory entry
 16867                                  ; Function:
 16868                                  ;	Call FastOpen to update the dir info.
 16869                                  ; Outputs:
 16870                                  ;	None
 16871                                  ;---------------------------------------------------------------------------
 16872                                  
 16873                                  FastOpen_Update:
 16874 00002666 9C                      	PUSHF			; save flag
 16875 00002667 56                      	PUSH	SI
 16876 00002668 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16877 00002669 53                      	PUSH	BX		; save regs
 16878 0000266A 50                      	PUSH	AX
 16879 0000266B B004                    	MOV	AL,FONC_update	; al = 4
 16880 0000266D EBEC                    	JMP	short fastinvoke
 16881                                  
 16882                                  	; 17/05/2019
 16883                                  
 16884                                  	; MSDOS 6.0
 16885                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16886                                  ;---------------------------------------------------------------------------
 16887                                  Fast_Dispatch:
 16888                                  ;hkn; FastTable is in DOSDATA
 16889 0000266F BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16890                                  ;hkn; use SS override
 16891 00002672 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16892 00002675 C3                      	retn
 16893                                  
 16894                                  ;============================================================================
 16895                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16896                                  ;============================================================================
 16897                                  ; 08/08/2018 - Retro DOS v3.0
 16898                                  ; 17/05/2019 - Retro DOS v4.0
 16899                                  
 16900                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16901                                  ;	NAME	DOS_RENAME
 16902                                  
 16903                                  ;**	Low level routine for renaming files
 16904                                  ;----------------------------------------------------------------------------
 16905                                  ;	DOS_RENAME
 16906                                  ;
 16907                                  ;	Modification history:
 16908                                  ;
 16909                                  ;	    Created: ARR 30 March 1983
 16910                                  
 16911                                  ;----------------------------------------------------------------------------
 16912                                  ;
 16913                                  ; Procedure Name : DOS_RENAME
 16914                                  ;
 16915                                  ; Inputs:
 16916                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16917                                  ;		chars, NUL terminated)
 16918                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16919                                  ;		( = -1 if current dir not involved, else
 16920                                  ;		 Points to first char after last "/" of current dir part)
 16921                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16922                                  ;		chars, NUL terminated)
 16923                                  ;	[THISCDS] Points to CDS being used
 16924                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16925                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16926                                  ; Function:
 16927                                  ;	Rename the specified file(s)
 16928                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16929                                  ; Outputs:
 16930                                  ;	CARRY CLEAR
 16931                                  ;	    OK
 16932                                  ;	CARRY SET
 16933                                  ;	    AX is error code
 16934                                  ;		error_file_not_found
 16935                                  ;			No match for source, or dest path invalid
 16936                                  ;		error_not_same_device
 16937                                  ;			Source and dest are on different devices
 16938                                  ;		error_access_denied
 16939                                  ;			Directory specified (not simple rename),
 16940                                  ;			Device name given, Destination exists.
 16941                                  ;			NOTE: In third case some renames may have
 16942                                  ;			 been done if metas.
 16943                                  ;		error_path_not_found
 16944                                  ;			Bad path (not in curr dir part if present)
 16945                                  ;			SOURCE ONLY
 16946                                  ;		error_bad_curr_dir
 16947                                  ;			Bad path in current directory part of path
 16948                                  ;			SOURCE ONLY
 16949                                  ;		error_sharing_violation
 16950                                  ;			Deny both access required, generates an INT 24.
 16951                                  ; DS preserved, others destroyed
 16952                                  ;
 16953                                  ;----------------------------------------------------------------------------
 16954                                  
 16955                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16956                                  
 16957                                  	; 31/01/2024
 16958                                  
 16959                                  DOS_RENAME:
 16960                                  
 16961                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16962                                  ;hkn; at this point to DOSDATA.
 16963                                  
 16964 00002676 E8B0EB                  	call	TestNet
 16965 00002679 7306                    	JNC	short LOCAL_RENAME
 16966                                  
 16967                                  ;IF NOT Installed
 16968                                  ;	transfer NET_RENAME
 16969                                  ;ELSE
 16970                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16971                                  	;INT	2FH
 16972                                  	;return
 16973                                  
 16974 0000267B B81111                  	mov     ax, 1111h
 16975 0000267E CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16976                                  			; SS = DS = DOS CS, 
 16977                                  			; SDA first filename pointer = offset of fully-qualified old name
 16978                                  			; SDA CDS pointer -> current directory
 16979                                  			; Return: CF set on error
 16980 00002680 C3                      	retn
 16981                                  ;ENDIF
 16982                                  
 16983                                  LOCAL_RENAME:
 16984 00002681 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16985 00002686 8B36[B205]              	MOV	SI,[WFP_START]
 16986 0000268A 8B3E[B405]              	MOV	DI,[REN_WFP]
 16987 0000268E 8A04                    	MOV	AL,[SI]
 16988 00002690 8A25                    	MOV	AH,[DI]
 16989 00002692 0D2020                  	OR	AX,2020H		; Lower case
 16990 00002695 38E0                    	CMP	AL,AH
 16991 00002697 7405                    	JZ	short SAMEDRV
 16992 00002699 B81100                  	MOV	AX,error_not_same_device ; 11h
 16993 0000269C F9                      	STC
 16994 0000269D C3                      	retn
 16995                                  
 16996                                  SAMEDRV:
 16997 0000269E FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16998 000026A2 FF36[2C03]              	PUSH	WORD [DMAADD]
 16999 000026A6 8C1E[2E03]              	MOV	[DMAADD+2],DS
 17000                                  
 17001                                  ;hkn; RENAMEDMA is in DOSDATA
 17002 000026AA C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 17003 000026B0 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 17004 000026B5 E82AEC                  	call	ECritDisk
 17005 000026B8 E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 17006                                  					;    points to entry
 17007 000026BB 7314                    	JNC	short Check_Dev
 17008 000026BD 83F812                  	CMP	AX,error_no_more_files ; 12h
 17009 000026C0 7503                    	JNZ	short GOTERR
 17010 000026C2 B80200                  	MOV	AX,error_file_not_found ; 2
 17011                                  GOTERR:
 17012 000026C5 F9                      	STC
 17013                                  RENAME_POP:
 17014 000026C6 8F06[2C03]              	POP	WORD [DMAADD]
 17015 000026CA 8F06[2E03]              	POP	WORD [DMAADD+2]
 17016                                  	;call	LCritDisk
 17017                                  	;retn
 17018                                  	; 16/12/2022
 17019 000026CE E92CEC                  	jmp	LCritDisk
 17020                                  
 17021                                  Check_Dev:
 17022                                  	; 17/05/2019 - Retro DOS v4.0
 17023                                  	;mov	ax,5
 17024 000026D1 B80500                  	MOV	AX,error_access_denied	; Assume error
 17025                                  	
 17026                                  	; MSDOS 6.0
 17027 000026D4 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 17028 000026D5 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 17029                                  	;add	si,21
 17030 000026D9 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 17031                                  	;test	byte [si+11],10h
 17032 000026DC F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 17033 000026E0 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 17034 000026E2 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 17035 000026E6 E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 17036                                  notdir:
 17037 000026E9 1F                      	POP	DS			      ;PTM.			    ;AN000;
 17038 000026EA 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 17039                                  
 17040                                  	; MSDOS 3.3 & MSDOS 6.0
 17041 000026EC 803E[7005]00            	CMP	byte [FOUND_DEV],0
 17042 000026F1 75D2                    	JNZ	short GOTERR
 17043                                  
 17044                                  ; At this point a source has been found. There is search continuation info (a
 17045                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 17046                                  ; directory entry found.
 17047                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 17048                                  ; throughout the RENAME since it is known at this point that the source and
 17049                                  ; destination are both on the same device.
 17050                                  ; [SATTRIB] is also set.
 17051                                  
 17052 000026F3 89DE                    	MOV	SI,BX
 17053                                  	;add	si,26
 17054 000026F5 83C61A                  	ADD	SI,dir_entry.dir_first
 17055 000026F8 E8D6FE                  	call	REN_DEL_Check
 17056 000026FB 7305                    	JNC	short REN_OK1
 17057 000026FD B82000                  	MOV	AX,error_sharing_violation  ; 20h
 17058 00002700 EBC4                    	JMP	short RENAME_POP
 17059                                  
 17060                                  ;------------------------------------------------------------------------------
 17061                                  ; Check if the source is a file or directory. If file, delete the entry
 17062                                  ; from the Fastopen cache. If directory, rename it later
 17063                                  ;------------------------------------------------------------------------------
 17064                                  
 17065                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 17066                                  	; MSDOS 6.0
 17067                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 17068                                  	;PUSH	SI
 17069 00002702 C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 17070                                  	;add	si,21
 17071 00002706 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17072                                  	;test	byte [si+11],10h
 17073 00002709 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 17074                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 17075 0000270D 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 17076                                  	;POP	SI			;BN00X
 17077                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 17078                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 17079                                  	;POP	SI
 17080                                  
 17081                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17082 0000270F E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 17083                                  SWAP_SOURCE:
 17084                                  	; MSDOS 3.3
 17085                                  	;MOV	SI,[REN_WFP]
 17086                                  	;MOV	[WFP_START],SI
 17087                                  	; MSDOS 6.0
 17088 00002712 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 17089 00002715 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 17090 00002719 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 17091 0000271D A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 17092                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17093 00002720 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 17094                                  	;mov	word [CREATING],0E5FFh
 17095 00002726 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 17096                                  					; A rename is like a CREATE_NEW as far
 17097                                  					; as the destination is concerned.
 17098 0000272C E8ED16                  	call	GetPathNoSet
 17099                                  
 17100                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 17101                                  ;   since no files match the destination name. If it fails for any other
 17102                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 17103                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 17104                                  ;   if the rename should fail because we haven't built an explicit name by
 17105                                  ;   substituting for the meta chars in it. In this case the destination file
 17106                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 17107                                  ;   in the directory entry part.
 17108                                  	
 17109 0000272F 7223                    	JC	short NODEST
 17110                                  	
 17111                                  	; MSDOS 6.0
 17112                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 17113                                  	; !! MSDOS 3.3 !!
 17114                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17115                                  
 17116 00002731 08E4                    	OR	AH,AH			; Device?
 17117 00002733 792C                    	JNS	short SAVEDEST		; No, continue
 17118                                  BAD_ACC:
 17119 00002735 B80500                  	MOV	AX,error_access_denied
 17120 00002738 F9                      	STC
 17121                                  RENAME_CLEAN:
 17122 00002739 9C                      	PUSHF				; Save carry state
 17123 0000273A 50                      	PUSH	AX			; and error code (if carry set)
 17124 0000273B A0[7605]                	MOV	AL,[THISDRV]
 17125 0000273E E8C131                  	call	FLUSHBUF
 17126 00002741 58                      	POP	AX
 17127 00002742 803E[4A03]00            	CMP	byte [FAILERR],0
 17128 00002747 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17129 00002749 9D                      	POPF
 17130 0000274A E979FF                  	JMP	RENAME_POP
 17131                                  
 17132                                  BAD_ERR:
 17133 0000274D 58                      	POP	AX			; Saved flags
 17134                                  	; 16/12/202
 17135                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17136                                  BAD_PATH: ; *
 17137 0000274E B80300                  	MOV	AX,error_path_not_found
 17138 00002751 E971FF                  	JMP	GOTERR
 17139                                  
 17140                                  NODEST:
 17141 00002754 75F8                    	JNZ	short BAD_PATH
 17142 00002756 803E[4A03]00            	CMP	byte [FAILERR],0
 17143 0000275B 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17144                                  					; because user FAILed on I 24
 17145                                  	; 14/11/2022
 17146 0000275D 08C9                    	OR	CL,CL
 17147                                  	;JNZ	short SAVEDEST
 17148                                  	; 17/05/2019
 17149 0000275F 74ED                    	jz	short BAD_PATH ; *
 17150                                  ;BAD_PATH: ; *
 17151                                  ;	MOV	AX,error_path_not_found
 17152                                  ;	;STC
 17153                                  ;	;JMP	RENAME_POP
 17154                                  ;	; 17/05/2019
 17155                                  ;	jmp	GOTERR 
 17156                                  
 17157                                  ; 16/12/2022
 17158                                  %if 0
 17159                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17160                                  	or	cl,cl
 17161                                  	jnz	short SAVEDEST
 17162                                  	;jz	short BAD_PATH ; *
 17163                                  BAD_PATH: ; *
 17164                                  	;mov	ax,3
 17165                                  	mov	ax,error_path_not_found
 17166                                  	stc
 17167                                  	jmp	RENAME_POP
 17168                                  %endif
 17169                                  
 17170                                  SAVEDEST:
 17171 00002761 16                      	push	ss
 17172 00002762 07                      	pop	es
 17173                                  
 17174                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17175 00002763 BF[5705]                	MOV	DI,NAME2
 17176 00002766 BE[4B05]                	MOV	SI,NAME1
 17177                                  
 17178 00002769 B90B00                  	MOV	CX,11
 17179 0000276C F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17180 0000276E A1[C205]                	MOV	AX,[DIRSTART]
 17181 00002771 A3[6405]                	MOV	[DESTSTART],AX
 17182                                  BUILDDEST:
 17183                                  	; 31/01/2024
 17184                                  	;push	ss
 17185                                  	;pop	es			; needed due to JMP BUILDDEST below
 17186                                  
 17187                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17188 00002774 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17189 00002777 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17190 0000277A BE[5705]                	MOV	SI,NAME2		; Raw dest
 17191                                  
 17192 0000277D B90B00                  	MOV	CX,11
 17193                                  
 17194                                  	; 17/05/2019 - Retro DOS v4.0
 17195                                  	
 17196                                  	; MSDOS 6.0
 17197 00002780 E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17198                                  
 17199                                  	; MSDOS 3.3
 17200                                  
 17201                                  ; 08/08/2018 - Retro DOS v3.0
 17202                                  ; MSDOS 6.0 
 17203                                  ;---------------------------------------------------------------------------
 17204                                  ;Procedure: NEW_RENAME
 17205                                  ;
 17206                                  ;Input: DS:SI -> raw string with ?
 17207                                  ;	ES:DI -> destination string
 17208                                  ;	DS:BX -> source string
 17209                                  ;Function: replace ? chars of raw string with chars in source string and
 17210                                  ;	   put in destination string
 17211                                  ;Output: ES:DI-> new string
 17212                                  ;---------------------------------------------------------------------------
 17213                                  ;
 17214                                  ;NEW_RENAME:
 17215                                  ;NEWNAM:
 17216                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17217                                  ;	LODSB
 17218                                  ;	CMP	AL,"?"
 17219                                  ;	JNZ	short NOCHG
 17220                                  ;	MOV	AL,[BX] 		; Get replace char
 17221                                  ;NOCHG:
 17222                                  ;	STOSB
 17223                                  ;	INC	BX			; Next replace char
 17224                                  ;	LOOP	NEWNAM
 17225                                  ;	; MSDOS 6.0
 17226                                  ;	;retn
 17227                                  
 17228                                  	; MSDOS 3.3 & MSDOS 6.0
 17229                                  	;mov	byte [ATTRIB],16h
 17230 00002783 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17231 00002788 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17232 0000278D E81E19                  	call	DEVNAME 		; Check if we built a device name
 17233 00002790 73A3                    	JNC	short BAD_ACC
 17234 00002792 8B1E[6405]              	MOV	BX,[DESTSTART]
 17235 00002796 C42E[8A05]              	LES	BP,[THISDPB]
 17236 0000279A E81C16                  	call	SETDIRSRCH		; Reset search to start of dir
 17237 0000279D 7296                    	JC	short BAD_ACC 		; Screw up
 17238 0000279F E8DD14                  	call	FINDENTRY		; See if new name already exists
 17239 000027A2 7391                    	JNC	short BAD_ACC 		; Error if found
 17240 000027A4 803E[4A03]00            	CMP	byte [FAILERR],0
 17241 000027A9 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17242 000027AB A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17243 000027AE 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17244 000027B2 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17245                                  
 17246                                  	;mov	al,[RENAMEDMA+32]
 17247 000027B4 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17248 000027B7 A810                    	TEST	AL,attr_directory ; 10h
 17249 000027B9 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17250                                  					; otherwise the . and .. entries get
 17251                                  					; wiped.
 17252 000027BB A2[6B05]                	MOV	[ATTRIB],AL
 17253 000027BE 8C1E[A005]              	MOV	[THISSFT+2],DS
 17254                                  
 17255                                  ;hkn; AUXSTACK is in DOSDATA
 17256                                  	;mov	si,RENAMEDMA+145h
 17257 000027C2 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17258 000027C5 8936[9E05]              	MOV	[THISSFT],SI
 17259                                  	;mov	word [SI+2],2
 17260 000027C9 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17261 000027CE 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17262 000027D0 E8B020                  	call	RENAME_MAKE		; This is in mknode
 17263 000027D3 7303                    	JNC	short GOT_DEST
 17264                                  BAD_ACCJ:
 17265 000027D5 E95DFF                  	JMP	BAD_ACC
 17266                                  
 17267                                  GOT_DEST:
 17268 000027D8 53                      	push	bx
 17269 000027D9 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17270 000027DD E8EB49                  	call	ShareEnd		; we need to remove it.
 17271 000027E0 5B                      	pop	bx
 17272                                  
 17273                                  ; A zero length entry with the correct new name has now been made at
 17274                                  ;   [CURBUF+2]:BX.
 17275                                  
 17276 000027E1 C43E[E205]              	LES	DI,[CURBUF]
 17277                                  
 17278                                  	; MSDOS 6.0
 17279                                  	;test	byte [es:di+5],40h
 17280 000027E5 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17281                                  					;LB. if already dirty		  ;AN000;
 17282 000027EA 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17283 000027EC E81532                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17284                                  	;or	byte [es:di+5],40h
 17285 000027EF 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17286                                  yesdirty1:
 17287 000027F4 89DF                    	MOV	DI,BX
 17288                                  	;add	di,11
 17289 000027F6 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17290                                  
 17291                                  ;hkn; RENAMEDMA is in DOSDATA
 17292                                  	;mov	si,[RENAMEDMA+32]
 17293 000027F9 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17294                                  	;mov	cx,21
 17295 000027FC B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17296 000027FF F3A4                    	REP	MOVSB
 17297 00002801 E87A00                  	CALL	GET_SOURCE
 17298 00002804 7275                    	JC	short RENAME_OVER
 17299 00002806 89DF                    	MOV	DI,BX
 17300 00002808 8E06[E405]              	MOV	ES,[CURBUF+2]
 17301 0000280C B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17302 0000280E AA                      	STOSB				; "free" the source
 17303 0000280F EB13                    	JMP	SHORT DIRTY_IT
 17304                                  
 17305                                  SIMPLE_RENAME:
 17306 00002811 E86A00                  	CALL	GET_SOURCE		; Get the source back
 17307 00002814 7265                    	JC	short RENAME_OVER
 17308 00002816 89DF                    	MOV	DI,BX
 17309 00002818 8E06[E405]              	MOV	ES,[CURBUF+2]
 17310                                  
 17311                                  ;hkn; NAME1 is in DOSDATA
 17312 0000281C BE[4B05]                	MOV	SI,NAME1		; New Name
 17313 0000281F B90B00                  	MOV	CX,11
 17314 00002822 F3A4                    	REP	MOVSB
 17315                                  DIRTY_IT:
 17316 00002824 8B3E[E205]              	MOV	DI,[CURBUF]
 17317                                  
 17318                                  	; MSDOS 6.0
 17319 00002828 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17320                                  					;LB. if already dirty		  ;AN000;
 17321 0000282D 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17322 0000282F E8D231                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17323                                  	
 17324 00002832 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17325                                  
 17326                                  ;------------------------------------------------------------------------------
 17327                                  ; Check if the source is a directory of file. If directory rename it to the
 17328                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17329                                  ; previously deleted.
 17330                                  ;------------------------------------------------------------------------------
 17331                                  
 17332                                  yesdirty2:
 17333                                  	; MSDOS 6.0
 17334 00002837 56                      	PUSH	SI
 17335 00002838 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17336 0000283C 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17337 0000283F F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17338 00002843 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17339 00002845 E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17340                                  	; 31/01/2024
 17341                                  	;POP	SI
 17342                                  	;JMP	SHORT NOT_DIRTY1
 17343                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17344 00002848 5E                      	POP	SI
 17345                                  NOT_DIRTY1:				;;BN00X
 17346                                  NEXT_SOURCE:
 17347                                  ;hkn; RENAMEDMA is in DOSDATA
 17348 00002849 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17349                                  
 17350                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17351                                  ; to enter it before going to RENAME_Next.
 17352                                  
 17353 0000284C E893EA                  	call	ECritDisk
 17354 0000284F C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17355                                  				  ;  to FF when we made the prev new file).
 17356 00002854 E89305                  	call	RENAME_NEXT
 17357                                  
 17358                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17359                                  ; we were before.
 17360                                  
 17361 00002857 7222                    	JC	short RENAME_OVER
 17362                                  
 17363                                  	;lea	si,[bx+26]
 17364 00002859 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17365 0000285C E872FD                  	call	REN_DEL_Check
 17366 0000285F 7306                    	JNC	short REN_OK2
 17367 00002861 B82000                  	MOV	AX,error_sharing_violation ; 20h
 17368                                  jmp_to_rename_clean: ; 28/12/2022
 17369 00002864 E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17370                                  
 17371                                  ;------------------------------------------------------------------------------
 17372                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17373                                  ; if directory, rename directory name in the Fastopen cache.
 17374                                  ;-----------------------------------------------------------------------------
 17375                                  
 17376                                  REN_OK2:
 17377                                  	; MSDOS 6.0
 17378                                  	;mov	al,[RENAMEDMA+32]
 17379 00002867 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17380                                  	;test	al,10h
 17381 0000286A A810                    	TEST	AL,attr_directory	;;BN00X directory
 17382 0000286C 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17383                                  	
 17384                                  	; MSDOS 3.3 & MSDOS 6.0
 17385 0000286E E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17386                                  jmp_to_builddest: ; 28/12/2022
 17387                                  	; 31/01/2024
 17388 00002871 16                      	push	ss
 17389 00002872 07                      	pop	es
 17390 00002873 E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17391                                  
 17392                                  	; MSDOS 6.0
 17393                                  Ren_Directory:
 17394 00002876 E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17395                                  	;JMP	BUILDDEST
 17396                                  	; 28/12/2022
 17397 00002879 EBF6                    	jmp	short jmp_to_builddest
 17398                                  
 17399                                  RENAME_OVER:
 17400 0000287B F8                      	CLC
 17401                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17402                                  	; 28/12/2022
 17403 0000287C EBE6                    	jmp	short jmp_to_rename_clean
 17404                                  
 17405                                  ;----------------------------------------------------------------------------
 17406                                  ; Procedure: GET_SOURCE
 17407                                  ;
 17408                                  ; Inputs:
 17409                                  ;	RENAMEDMA has source info
 17410                                  ; Function:
 17411                                  ;	Re-find the source
 17412                                  ; Output:
 17413                                  ;	[CURBUF] set
 17414                                  ;	[CURBUF+2]:BX points to entry
 17415                                  ;	Carry set if error (currently user FAILed to I 24)
 17416                                  ; DS preserved, others destroyed
 17417                                  ;----------------------------------------------------------------------------
 17418                                  
 17419                                  GET_SOURCE:
 17420 0000287E 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17421 00002882 C42E[8A05]              	LES	BP,[THISDPB]
 17422 00002886 E83015                  	call	SETDIRSRCH
 17423 00002889 7214                    	JC	short gs_ret_label	; retc
 17424 0000288B E8FF17                  	call	STARTSRCH
 17425 0000288E A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17426                                  	;call	GETENT
 17427                                  	; 18/12/2022
 17428 00002891 E9F814                  	jmp	GETENT
 17429                                  ;gs_ret_label:
 17430                                  	;retn
 17431                                  
 17432                                  ; MSDOS 6.0 
 17433                                  ;---------------------------------------------------------------------------
 17434                                  ;Procedure: NEW_RENAME
 17435                                  ;
 17436                                  ;Input: DS:SI -> raw string with ?
 17437                                  ;	ES:DI -> destination string
 17438                                  ;	DS:BX -> source string
 17439                                  ;Function: replace ? chars of raw string with chars in source string and
 17440                                  ;	   put in destination string
 17441                                  ;Output: ES:DI-> new string
 17442                                  ;---------------------------------------------------------------------------
 17443                                  
 17444                                  NEW_RENAME:
 17445                                  	; 17/05/2019 - Retro DOS v4.0
 17446                                  NEWNAM:
 17447                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17448 00002894 AC                      	LODSB
 17449 00002895 3C3F                    	CMP	AL,"?" ; 3Fh
 17450 00002897 7502                    	JNZ	short NOCHG
 17451 00002899 8A07                    	MOV	AL,[BX] 		; Get replace char
 17452                                  NOCHG:
 17453 0000289B AA                      	STOSB
 17454 0000289C 43                      	INC	BX			; Next replace char
 17455 0000289D E2F5                    	LOOP	NEWNAM
 17456                                  	; MSDOS 6.0
 17457                                  gs_ret_label:	; 18/12/2022
 17458 0000289F C3                      	retn
 17459                                  
 17460                                  ;============================================================================
 17461                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17462                                  ;============================================================================
 17463                                  ; 08/08/2018 - Retro DOS v3.0
 17464                                  ; 17/05/2019 - Retro DOS v4.0
 17465                                  
 17466                                  ;**	Low level routines for returning file information and setting file
 17467                                  ;	attributes
 17468                                  ;
 17469                                  ;	GET_FILE_INFO
 17470                                  ;	SET_FILE_ATTRIBUTE
 17471                                  ;
 17472                                  ;	Modification history:
 17473                                  ;
 17474                                  ;	    Created: ARR 30 March 1983
 17475                                  ;
 17476                                  ;	M025: Return access_denied if attempting to set
 17477                                  ;	      attribute of root directory.
 17478                                  ;
 17479                                  
 17480                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17481                                  
 17482                                  ;---------------------------------------------------------------------------
 17483                                  ; Procedure Name : GET_FILE_INFO
 17484                                  ;
 17485                                  ; Inputs:
 17486                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17487                                  ;		terminated)
 17488                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17489                                  ;		( = -1 if current dir not involved, else
 17490                                  ;		 Points to first char after last "/" of current dir part)
 17491                                  ;	[THISCDS] Points to CDS being used
 17492                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17493                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17494                                  ; Function:
 17495                                  ;	Get Information about a file
 17496                                  ; Returns:
 17497                                  ;	CARRY CLEAR
 17498                                  ;	    AX = Attribute of file
 17499                                  ;	    CX = Time stamp of file
 17500                                  ;	    DX = Date stamp of file
 17501                                  ;	    BX:DI = Size of file (32 bit)
 17502                                  ;	CARRY SET
 17503                                  ;	    AX is error code
 17504                                  ;		error_file_not_found
 17505                                  ;			Last element of path not found
 17506                                  ;		error_path_not_found
 17507                                  ;			Bad path (not in curr dir part if present)
 17508                                  ;		error_bad_curr_dir
 17509                                  ;			Bad path in current directory part of path
 17510                                  ; DS preserved, others destroyed
 17511                                  ;---------------------------------------------------------------------------
 17512                                  
 17513                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17514                                  
 17515                                  GET_FILE_INFO:
 17516                                  
 17517                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17518                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17519                                  
 17520 000028A0 E886E9                  	call	TestNet
 17521 000028A3 7306                    	JNC	short LOCAL_INFO
 17522                                  
 17523                                  ;IF NOT Installed
 17524                                  ;	transfer NET_GET_FILE_INFO
 17525                                  ;ELSE
 17526                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17527                                  ;	INT	2FH
 17528                                  ;	return
 17529                                  
 17530 000028A5 B80F11                  	mov     ax, 110Fh
 17531 000028A8 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17532                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17533                                  			; SDA CDS pointer -> current directory
 17534                                  			; Return: CF set on error, AX = file attributes
 17535 000028AA C3                      	retn
 17536                                  ;ENDIF
 17537                                  
 17538                                  LOCAL_INFO:
 17539 000028AB E834EA                  	call	ECritDisk
 17540 000028AE C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17541                                  	; MSDOS 3.3
 17542                                  	;call	GETPATH
 17543                                  	; MSDOS 6.0
 17544 000028B3 E8D700                  	call	GET_FAST_PATH
 17545                                  	; MSDOS 3.3 & MSDOS 6.0
 17546 000028B6 7312                    	JNC	short info_check_dev
 17547                                  NO_PATH:
 17548 000028B8 750B                    	JNZ	short bad_path1
 17549 000028BA 08C9                    	OR	CL,CL
 17550 000028BC 7407                    	JZ	short bad_path1
 17551                                  info_no_file:
 17552 000028BE B80200                  	MOV	AX,error_file_not_found
 17553                                  BadRet:
 17554 000028C1 F9                      	STC
 17555                                  JustRet:
 17556                                  	;call	LCritDisk
 17557                                  	;retn
 17558                                  	; 18/12/2022
 17559 000028C2 E938EA                  	jmp	LCritDisk
 17560                                  
 17561                                  bad_path1:
 17562 000028C5 B80300                  	MOV	AX,error_path_not_found
 17563 000028C8 EBF7                    	jmp	short BadRet
 17564                                  
 17565                                  info_check_dev:
 17566 000028CA 08E4                    	OR	AH,AH
 17567 000028CC 78F0                    	JS	short info_no_file	; device
 17568                                  
 17569                                  	; MSDOS 6.0
 17570                                  ;SR;
 17571                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17572                                  ;for a root dir
 17573                                  
 17574 000028CE 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17575 000028D3 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17576                                  
 17577 000028D5 30E4                    	xor	ah,ah
 17578 000028D7 B010                    	mov	al,attr_directory ; 10h
 17579                                  	;clc
 17580                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17581                                  	; (DOSCODE:683Eh)
 17582                                  	; 16/12/2022
 17583                                  	;clc
 17584 000028D9 EBE7                    	jmp	short JustRet
 17585                                  
 17586                                  not_root:
 17587                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17588 000028DB 1E                      	PUSH	DS
 17589 000028DC 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17590 000028E0 89DE                    	MOV	SI,BX
 17591 000028E2 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17592 000028E4 89DF                    	MOV	DI,BX
 17593                                  	;mov	cx,[si+16h]
 17594 000028E6 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17595                                  	;mov	dx,[si+18h]
 17596 000028E9 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17597 000028EC 30E4                    	XOR	AH,AH
 17598                                  	;mov	al,[si+0Bh]
 17599 000028EE 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17600                                  	;test	al,10h
 17601 000028F1 A810                    	TEST	AL,attr_directory
 17602 000028F3 7506                    	JNZ	short NO_SIZE
 17603                                  	;mov	di,[si+1Ch]
 17604 000028F5 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17605                                  	;mov	bx,[si+1Eh]
 17606 000028F8 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17607                                  NO_SIZE:
 17608 000028FB 1F                      	POP	DS
 17609                                  	;CLC
 17610                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17611                                  	; (DOSCODE:6864h)
 17612                                  	; 16/12/2022
 17613                                  	;clc
 17614 000028FC EBC4                    	jmp	short JustRet
 17615                                  
 17616                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17617                                  ;-------------------------------------------------------------------------------
 17618                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17619                                  ; Inputs:
 17620                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17621                                  ;		terminated)
 17622                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17623                                  ;		( = -1 if current dir not involved, else
 17624                                  ;		 Points to first char after last "/" of current dir part)
 17625                                  ;	[THISCDS] Points to CDS being used
 17626                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17627                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17628                                  ;	AX is new attributes to give to file
 17629                                  ; Function:
 17630                                  ;	Set File Attributes
 17631                                  ; Returns:
 17632                                  ;	CARRY CLEAR
 17633                                  ;	    No error
 17634                                  ;	CARRY SET
 17635                                  ;	    AX is error code
 17636                                  ;		error_file_not_found
 17637                                  ;			Last element of path not found
 17638                                  ;		error_path_not_found
 17639                                  ;			Bad path (not in curr dir part if present)
 17640                                  ;		error_bad_curr_dir
 17641                                  ;			Bad path in current directory part of path
 17642                                  ;		error_access_denied
 17643                                  ;			Attempt to set an attribute which cannot be set
 17644                                  ;			(attr_directory, attr_volume_ID)
 17645                                  ;		error_sharing_violation
 17646                                  ;			Sharing mode of file did not allow the change
 17647                                  ;			(this request requires exclusive write/read access)
 17648                                  ;			(INT 24H generated)
 17649                                  ; DS preserved, others destroyed
 17650                                  ;----------------------------------------------------------------------------
 17651                                  
 17652                                  SET_FILE_ATTRIBUTE:
 17653                                  
 17654                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17655                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17656                                  
 17657 000028FE A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17658 00002901 7414                    	JZ	short set_look
 17659                                  _BAD_ACC:
 17660 00002903 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17661 00002908 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17662 0000290D C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17663 00002912 B80500                  	MOV	AX,error_access_denied ; 5
 17664 00002915 F9                      	STC
 17665 00002916 C3                      	retn
 17666                                  
 17667                                  set_look:
 17668 00002917 E80FE9                  	call	TestNet
 17669 0000291A 7308                    	JNC	short LOCAL_SET
 17670                                  
 17671                                  ;IF NOT Installed
 17672                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17673                                  ;ELSE
 17674 0000291C 50                      	PUSH	AX
 17675                                  	
 17676                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17677                                  	;INT	2FH
 17678                                  
 17679 0000291D B80E11                  	mov     ax, 110Eh
 17680 00002920 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17681                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17682                                  			; SDA CDS pointer -> current directory
 17683                                  			; STACK: WORD new file attributes
 17684                                  			; Return: CF set on error
 17685                                  
 17686 00002922 5B                      	POP	BX			; clean stack
 17687 00002923 C3                      	retn
 17688                                  ;ENDIF
 17689                                  
 17690                                  LOCAL_SET:
 17691 00002924 E8BBE9                  	call	ECritDisk
 17692 00002927 50                      	PUSH	AX			; Save new attributes
 17693 00002928 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17694 0000292D E8E614                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17695 00002930 7308                    	JNC	short set_check_device
 17696 00002932 5B                      	POP	BX			; Clean stack (don't zap AX)
 17697 00002933 EB83                    	JMP	short NO_PATH
 17698                                  
 17699                                  	; MSDOS 6.0
 17700                                  cannot_set_root:			; M025:
 17701 00002935 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17702                                  	;stc				; M025: to set attr. of root
 17703                                  	;jmp	short OK_BYE		; M025:
 17704                                  	; 01/02/2024
 17705 00002938 EB87                    	jmp	short BadRet
 17706                                  
 17707                                  set_check_device:
 17708 0000293A 08E4                    	OR	AH,AH
 17709 0000293C 7906                    	JNS	short set_check_share
 17710 0000293E 58                      	POP	AX
 17711 0000293F E8BBE9                  	call	LCritDisk
 17712 00002942 EBBF                    	JMP	short _BAD_ACC 		; device
 17713                                  
 17714                                  set_check_share:
 17715 00002944 58                      	POP	AX			; Get new attributes
 17716                                  
 17717                                  	; MSDOS 6.0
 17718 00002945 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17719 0000294A 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17720                                  
 17721                                  	; MSDOS 3.3 & MSDOS 6.0
 17722 0000294C E882FC                  	call	REN_DEL_Check
 17723 0000294F 7305                    	JNC	short set_do
 17724 00002951 B82000                  	MOV	AX,error_sharing_violation ; 32
 17725 00002954 EB34                    	jmp	short OK_BYE
 17726                                  
 17727                                  set_do:
 17728                                  	; MSDOS 3.3 & MSDOS 6.0
 17729 00002956 C43E[E205]              	LES	DI,[CURBUF]
 17730 0000295A 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17731 0000295F 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17732                                  
 17733                                  	; MSDOS 6.0
 17734 00002963 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17735                                  					;LB. if already dirty		  ;AN000;
 17736 00002968 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17737 0000296A E89730                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17738                                  	
 17739 0000296D 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17740                                  yesdirty3:
 17741 00002972 A0[7605]                	MOV	AL,[THISDRV]
 17742                                  ;;;; 10/1/86 F.C update fastopen cache
 17743 00002975 52                      	PUSH	DX
 17744 00002976 57                      	PUSH	DI
 17745 00002977 B400                    	MOV	AH,0		  ; dir entry update
 17746 00002979 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17747 0000297B 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17748 0000297D E8E6FC                  	call	FastOpen_Update
 17749 00002980 5F                      	POP	DI
 17750 00002981 5A                      	POP	DX
 17751                                  ;;;; 9/11/86 F.C update fastopen cache
 17752 00002982 E87D2F                  	call	FLUSHBUF
 17753 00002985 7303                    	JNC	short OK_BYE
 17754 00002987 B80200                  	MOV	AX,error_file_not_found
 17755                                  OK_BYE:
 17756                                  	;call	LCritDisk
 17757                                  	;retn
 17758                                  	; 16/12/2022
 17759 0000298A E970E9                  	jmp	LCritDisk
 17760                                  
 17761                                  	; 17/05/2019 - Retro DOS v4.0
 17762                                  
 17763                                  	; MSDOS 6.0
 17764                                  GET_FAST_PATH:
 17765                                  ;hkn; use SS override for FastOpenFlg
 17766 0000298D 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17767                                  					;FO. trigger fastopen	;AN000;
 17768 00002993 E88014                  	call	GETPATH
 17769 00002996 9C                      	PUSHF			 	;FO.			;AN000;
 17770 00002997 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17771                                  					;FO. clear all fastopen flags ;AN000;
 17772 0000299D 9D                      	POPF				;FO.			;AN000;
 17773 0000299E C3                      	retn
 17774                                  
 17775                                  ;============================================================================
 17776                                  ; DUP.ASM, MSDOS 6.0, 1991
 17777                                  ;============================================================================
 17778                                  ; 08/08/2018 - Retro DOS v3.0
 17779                                  ; 17/05/2019 - Retro DOS v4.0
 17780                                  
 17781                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17782                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17783                                  ;
 17784                                  ;	DOS_DUP
 17785                                  ;
 17786                                  ;	Modification history:
 17787                                  ;
 17788                                  ;	  Created: ARR 30 March 1983
 17789                                  
 17790                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17791                                  ;---------------------------------------------------------------------------
 17792                                  ; Procedure Name : DOS_DUP
 17793                                  ;
 17794                                  ; Inputs:
 17795                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17796                                  ;		(a non net SFT is OK, in this case the ref
 17797                                  ;		 count is simply incremented)
 17798                                  ; Function:
 17799                                  ;	Signal to the devices that a logical open is occurring
 17800                                  ; Returns:
 17801                                  ;	ES:DI point to SFT
 17802                                  ;    Carry clear
 17803                                  ;	SFT ref_count is incremented
 17804                                  ; Registers modified: None.
 17805                                  ; NOTE:
 17806                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17807                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17808                                  ;	that time.
 17809                                  ;---------------------------------------------------------------------------
 17810                                  
 17811                                  DOS_DUP:
 17812                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17813                                  
 17814                                  	; MSDOS 6.0
 17815 0000299F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17816 000029A4 26C43E[9E05]            	les	di,[es:THISSFT]
 17817                                  
 17818                                  	;Entry	Dos_Dup_Direct
 17819                                  DOS_Dup_Direct:
 17820 000029A9 E896E8                  	call	IsSFTNet
 17821 000029AC 7503                    	JNZ	short DO_INC
 17822 000029AE E8091B                  	call	DEV_OPEN_SFT
 17823                                  DO_INC:
 17824                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17825 000029B1 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17826                                  					;   we're in big trouble anyway)
 17827 000029B4 C3                      	retn
 17828                                  
 17829                                  ;============================================================================
 17830                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17831                                  ;============================================================================
 17832                                  ; 08/08/2018 - Retro DOS v3.0
 17833                                  ; 18/05/2019 - Retro DOS v4.0
 17834                                  
 17835                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17836                                  ;NAME	DOS_CREATE
 17837                                  ;----------------------------------------------------------------------------
 17838                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17839                                  ;
 17840                                  ;	DOS_CREATE
 17841                                  ;	DOS_CREATE_NEW
 17842                                  ;	SET_MKND_ERR
 17843                                  ;	SET_Media_ID
 17844                                  ;	SET_EXT_Mode
 17845                                  ;
 17846                                  ;	Revision history:
 17847                                  ;
 17848                                  ;	    A000 version 4.00	  Jan. 1988
 17849                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17850                                  
 17851                                  ;Installed = TRUE
 17852                                  
 17853                                  ;	i_need	THISSFT,DWORD
 17854                                  ;	i_need	THISCDS,DWORD
 17855                                  ;	I_need	EXTERR,WORD
 17856                                  ;	I_Need	ExtErr_locus,BYTE
 17857                                  ;	I_need	JShare,DWORD
 17858                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17859                                  ;	I_need	SATTRIB,BYTE
 17860                                  ;	I_need	CALLVIDM,DWORD
 17861                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17862                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17863                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17864                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17865                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17866                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17867                                  
 17868                                  ;***	DOS_CREATE - Create a File
 17869                                  ;----------------------------------------------------------------------------
 17870                                  ;	DOS_Create is called to create the specified file, truncating
 17871                                  ;	the old one if it exists.
 17872                                  ;
 17873                                  ;	ENTRY	AX is Attribute to create
 17874                                  ;		(ds) = DOSDATA
 17875                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17876                                  ;			terminated)
 17877                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17878                                  ;			( = -1 if current dir not involved, else
 17879                                  ;			 Points to first char after last "/" of current dir part)
 17880                                  ;		[THISCDS] Points to CDS being used
 17881                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17882                                  ;		[THISSFT] Points to SFT to fill in if file created
 17883                                  ;			(sf_mode field set so that FCB may be detected)
 17884                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17885                                  ;
 17886                                  ;	EXIT	sf_ref_count is NOT altered
 17887                                  ;		CARRY CLEAR
 17888                                  ;		    THISSFT filled in.
 17889                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17890                                  ;		CARRY SET
 17891                                  ;		    AX is error code
 17892                                  ;			error_path_not_found
 17893                                  ;				Bad path (not in curr dir part if present)
 17894                                  ;			error_bad_curr_dir
 17895                                  ;				Bad path in current directory part of path
 17896                                  ;			error_access_denied
 17897                                  ;				Attempt to re-create read only file , or
 17898                                  ;				create a second volume id or create a dir
 17899                                  ;			error_sharing_violation
 17900                                  ;				The sharing mode was correct but not allowed
 17901                                  ;				generates an INT 24
 17902                                  ;	USES	all but DS
 17903                                  ;----------------------------------------------------------------------------
 17904                                  
 17905                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17906                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17907                                  
 17908                                  DOS_CREATE:
 17909                                  	; 18/05/2019 - Retro DOS v4.0
 17910                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17911                                  
 17912                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17913                                  ;hkn; this point.
 17914                                  
 17915 000029B5 30E4                    	XOR	AH,AH		; Truncate is OK
 17916                                  
 17917                                  ;	Enter here from Dos_Create_New
 17918                                  ;
 17919                                  ;	(ah) = 0 iff truncate OK
 17920                                  
 17921                                  Create_inter:
 17922 000029B7 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17923                                  				; Mask out any meaningless bits
 17924 000029B9 7511                    	JNZ	short AttErr
 17925 000029BB A808                    	TEST	AL,attr_volume_id
 17926 000029BD 7407                    	JZ	short NoReset
 17927                                  	
 17928                                  	; MSDOS 6.0
 17929                                  	; 16/12/2022
 17930 000029BF 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17931                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17932                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17933                                  	
 17934 000029C4 B008                    	MOV	AL,attr_volume_id ; 8
 17935                                  NoReset:
 17936 000029C6 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17937 000029C8 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17938 000029CA 740A                    	JZ	short ATT_OK
 17939                                  AttErr:
 17940 000029CC B80500                  	MOV	AX,5		; Attribute problem
 17941 000029CF C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17942 000029D4 EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17943                                  				   ;	attr_device to be set.
 17944                                  ATT_OK:
 17945 000029D6 C43E[9E05]              	LES	DI,[THISSFT]
 17946 000029DA 06                      	PUSH	ES
 17947 000029DB C436[A205]              	LES	SI,[THISCDS]
 17948 000029DF 83FEFF                  	CMP	SI,-1
 17949 000029E2 751B                    	JNE	short TEST_RE_NET
 17950                                  
 17951                                  ;	No CDS, it must be redirected.
 17952                                  
 17953 000029E4 07                      	POP	ES
 17954                                  
 17955                                  	; MSDOS 6.0
 17956                                  ;Extended open hooks
 17957                                  	;test	byte [EXTOPEN_ON],1
 17958 000029E5 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17959 000029EA 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17960                                  IFS_extopen:				    ;AN000;EO.
 17961 000029EC 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17962                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17963 000029ED B82E11                  	mov	ax,112Eh
 17964                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17965 000029F0 CD2F                    	INT	2FH			    ;AN000;EO.
 17966 000029F2 5B                      	POP	BX			    ;AN000;EO. trash bx
 17967 000029F3 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17968 000029F8 C3                      	retn				    ;AN000;EO.
 17969                                  NOEXTOP:				    ;AN000;
 17970                                  ;Extended open hooks
 17971                                  
 17972                                  ;IF NOT Installed
 17973                                  ;	transfer NET_SEQ_CREATE
 17974                                  ;ELSE
 17975 000029F9 50                      	PUSH	AX
 17976                                  
 17977                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17978                                  	;INT	2FH
 17979                                  
 17980 000029FA B81811                  	mov	ax,1118h
 17981                                  	; 01/02/2024
 17982                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17983                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17984                                  			; SDA first filename pointer -> fully-qualified name of file
 17985                                  			; STACK: WORD file creation mode???
 17986                                  
 17987                                  	;POP	BX			; BX is trashed anyway
 17988                                  	;retn
 17989 000029FD EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17990                                  ;ENDIF
 17991                                  
 17992                                  ;	We have a CDS. See if it's network
 17993                                  
 17994                                  TEST_RE_NET:
 17995                                  	;;test	word [es:si+43h],8000h
 17996                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17997                                  	; 07/12/2022
 17998                                  	;test	byte [es:si+44h],80h
 17999                                  	; 17/12/2022
 18000 000029FF 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18001 00002A04 07                      	POP	ES
 18002 00002A05 7417                    	JZ	short LOCAL_CREATE
 18003                                  
 18004                                  	; MSDOS 6.0
 18005 00002A07 E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 18006 00002A0A 7205                    	JC	SHORT dochk		    ;AN000;EO.
 18007                                  	;;or	word [es:di+2],2
 18008                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 18009                                  	; 17/12/2022
 18010 00002A0C 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 18011                                  
 18012                                  ;Extended open hooks
 18013                                  dochk:
 18014 00002A11 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18015 00002A16 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 18016                                  ;Extended open hooks
 18017                                  
 18018                                  ;IF NOT Installed
 18019                                  ;	transfer NET_CREATE
 18020                                  ;ELSE
 18021 00002A18 50                      	PUSH	AX
 18022                                  	
 18023                                  	;MOV	AX,(MultNET SHL 8) OR 23
 18024                                  	;INT	2FH
 18025                                  	
 18026 00002A19 B81711                  	mov	ax,1117h
 18027                                  	
 18028                                  	; 01/02/2024
 18029                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 18030                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18031                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18032                                  			; SDA CDS pointer -> current directory
 18033                                  			; Return: CF set on error
 18034                                  
 18035                                  	;POP	BX			; BX is trashed anyway
 18036                                  ;nomore:
 18037                                  	;retn
 18038 00002A1C EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 18039                                  ;ENDIF
 18040                                  
 18041                                  ;**	It's a local create. We have a local CDS for it.
 18042                                  
 18043                                  LOCAL_CREATE:
 18044                                  	; MSDOS 6.0
 18045 00002A1E E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 18046 00002A21 7205                    	JC	short setdone	;AN000;EO.
 18047                                  	
 18048                                  	; MSDOS 3.3 & MSDOS 6.0
 18049                                  	; 17/12/2022
 18050                                  	;;or	word [es:di+2],2
 18051                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 18052                                  	;or	byte [es:di+2],2
 18053 00002A23 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 18054                                  setdone:
 18055 00002A28 E8B7E8                  	call	ECritDisk
 18056 00002A2B E8311E                  	call	MakeNode
 18057 00002A2E 7317                    	JNC	short Create_ok
 18058 00002A30 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 18059 00002A35 E8C5E8                  	call	LCritDisk
 18060                                  
 18061                                  	;entry	SET_MKND_ERR
 18062                                  SET_MKND_ERR:
 18063                                  
 18064                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 18065                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 18066                                  
 18067                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 18068 00002A38 BB[3F2A]                	MOV     BX,CRTERRTAB
 18069                                  	;XLAT  ; MSDOS 3.3
 18070                                  	; 18/05/2019 - Retro DOS v4.0
 18071 00002A3B 2E                      	CS
 18072 00002A3C D7                      	XLAT
 18073                                  CreatBadRet:
 18074 00002A3D F9                      	STC
 18075 00002A3E C3                      	retn
 18076                                  
 18077                                  ; 13/05/2019 - Retro DOS v4.0
 18078                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 18079                                  ; ---------------------------------------------------------------------------
 18080                                  
 18081                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 18082                                  
 18083                                  ; 17/07/2018 - Retro DOS v3.0
 18084                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 18085                                  
 18086                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 18087                                  ;	db	0,5,52h,50h,3,5,20h
 18088                                  
 18089                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 18090                                  ;	db	0,5,52h,50h,3,5,20h,2
 18091                                  
 18092                                  ; 08/08/2018
 18093                                  
 18094                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 18095 00002A3F 00                      	DB	0			; none
 18096 00002A40 05                      	DB	error_access_denied	; MakeNode error 1
 18097 00002A41 52                      	DB	error_cannot_make	; MakeNode error 2
 18098 00002A42 50                      	DB	error_file_exists	; MakeNode error 3
 18099 00002A43 03                      	DB	error_path_not_found	; MakeNode error 4
 18100 00002A44 05                      	DB	error_access_denied	; MakeNode error 5
 18101 00002A45 20                      	DB	error_sharing_violation ; MakeNode error 6
 18102                                  	; MSDOS 6.0
 18103 00002A46 02                      	DB	error_file_not_found	; MakeNode error 7
 18104                                  
 18105                                  ; ---------------------------------------------------------------------------
 18106                                  
 18107                                  ; We have just created a new file. This results in the truncation of old
 18108                                  ; files. We must inform the sharer to slash all the open SFT's for this
 18109                                  ; file to the current size.
 18110                                  
 18111                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 18112                                  ; drive number to force a Build BPB after Media Check.
 18113                                  
 18114                                  ;;; FASTOPEN 8/29/86
 18115                                  Create_ok:
 18116 00002A47 E8F4FB                  	call	FastOpen_Delete
 18117                                  ;;; FASTOPEN 8/29/86
 18118 00002A4A A0[6D05]                	mov	al,[SATTRIB]
 18119 00002A4D A808                    	test	al,attr_volume_id
 18120 00002A4F 741C                    	jz	short NoVolLabel
 18121 00002A51 C43E[A205]              	LES	DI,[THISCDS]
 18122                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18123 00002A55 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18124 00002A58 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18125 00002A5B 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18126                                  	
 18127                                  	; 18/05/2019 - Retro DOS v4.0
 18128                                  
 18129                                  	; MSDOS 6.0
 18130 00002A5F B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18131 00002A61 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18132                                  	
 18133 00002A64 E87BE8                  	call	ECritDisk
 18134 00002A67 E8252B                  	call	FATREAD_CDS		; force a media check
 18135 00002A6A E890E8                  	call	LCritDisk
 18136                                  
 18137                                  NoVolLabel:
 18138 00002A6D B80200                  	MOV	ax,2
 18139 00002A70 C43E[9E05]              	LES	DI,[THISSFT]
 18140                                  ;if installed
 18141                                  	;call	JShare + 14 * 4
 18142 00002A74 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18143                                  ;else
 18144                                  ;	Call	ShSU
 18145                                  ;endif
 18146 00002A78 E882E8                  	call	LCritDisk
 18147 00002A7B E94901                  	jmp	SET_SFT_MODE
 18148                                  
 18149                                  ;---------------------------------------------------------------------------
 18150                                  ; Procedure Name : Dos_Create_New
 18151                                  ;
 18152                                  ; Inputs:
 18153                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18154                                  ;		terminated)
 18155                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18156                                  ;		( = -1 if current dir not involved, else
 18157                                  ;		 Points to first char after last "/" of current dir part)
 18158                                  ;	[THISCDS] Points to CDS being used
 18159                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18160                                  ;	[THISSFT] Points to SFT to fill in if file created
 18161                                  ;		(sf_mode field set so that FCB may be detected)
 18162                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18163                                  ;	AX is Attribute to create
 18164                                  ; Function:
 18165                                  ;	Try to create the specified file truncating an old one that exists
 18166                                  ; Outputs:
 18167                                  ;	sf_ref_count is NOT altered
 18168                                  ;	CARRY CLEAR
 18169                                  ;	    THISSFT filled in.
 18170                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18171                                  ;	CARRY SET
 18172                                  ;	    AX is error code
 18173                                  ;		error_path_not_found
 18174                                  ;			Bad path (not in curr dir part if present)
 18175                                  ;		error_bad_curr_dir
 18176                                  ;			Bad path in current directory part of path
 18177                                  ;		error_access_denied
 18178                                  ;			Create a second volume id or create a dir
 18179                                  ;		error_file_exists
 18180                                  ;			Already a file by this name
 18181                                  ; DS preserved, others destroyed
 18182                                  ;---------------------------------------------------------------------------
 18183                                  
 18184                                  DOS_Create_New:
 18185 00002A7E B401                    	MOV	AH,1		; Truncate is NOT OK
 18186 00002A80 E934FF                  	JMP	Create_inter
 18187                                  
 18188                                  ; MSDOS 6.0
 18189                                  ;---------------------------------------------------------------------------
 18190                                  ; Procedure Name : Set_Media_ID
 18191                                  ;
 18192                                  ; Inputs:
 18193                                  ;	NAME1= Volume ID
 18194                                  ;	BH= 0, delete volume id
 18195                                  ;	    1, set new volume id
 18196                                  ;	DS= DOSGROUP
 18197                                  ; Function:
 18198                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18199                                  ; Outputs:
 18200                                  ;	CARRY CLEAR
 18201                                  ;	    volume id set
 18202                                  ;	CARRY SET
 18203                                  ;	    AX is error code
 18204                                  ;---------------------------------------------------------------------------
 18205                                  
 18206                                  	; 18/05/2019 - Retro DOS v4.0
 18207                                  Set_Media_ID:
 18208 00002A83 50                      	PUSH	AX		;AN000;;>32mb
 18209 00002A84 06                      	PUSH	ES		;AN000;;>32mb
 18210 00002A85 57                      	PUSH	DI		;AN000;;>32mb
 18211                                  
 18212 00002A86 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18213 00002A88 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18214 00002A8A B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18215 00002A8C B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18216                                  
 18217                                  ;hkn; PACKET_TEMP is in DOSDATA
 18218 00002A8F BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18219                                  
 18220 00002A92 53                      	PUSH	BX		;AN000;;>32mb
 18221 00002A93 52                      	PUSH	DX		;AN000;;>32mb
 18222 00002A94 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18223                                  
 18224                                  	;invoke	$IOCTL		;AN000;;>32mb
 18225 00002A96 E86BF7                  	call	_$IOCTL	
 18226                                  
 18227 00002A99 5A                      	POP	DX		;AN000;;>32mb
 18228 00002A9A 5B                      	POP	BX		;AN000;;>32mb
 18229 00002A9B 7224                    	JC	short geterr	;AN000;;>32mb
 18230                                  
 18231 00002A9D 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18232 00002A9F 7405                    	JZ	short NoName	;AN000;>32mb yes
 18233                                  
 18234                                  ;hkn; NAME1 is in DOSDATA
 18235 00002AA1 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18236                                  
 18237 00002AA4 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18238                                  NoName: 			;AN000;
 18239                                  
 18240                                  ;hkn; NO_NAME_ID is in DOSDATA
 18241 00002AA6 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18242                                  
 18243                                  doset:				;AN000;
 18244 00002AA9 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18245                                  	;add	di,6
 18246 00002AAB 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18247                                  
 18248                                  ;hkn; ES & DS must point to SS
 18249                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18250 00002AAE 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18251                                  
 18252 00002AAF 1F                      	POP	DS		;AN000;;>32mb
 18253                                  
 18254                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18255 00002AB0 16                      	PUSH	SS		;AN000;;>32mb
 18256                                  
 18257 00002AB1 07                      	POP	ES		;AN000;;>32mb
 18258 00002AB2 B90B00                  	MOV	CX,11		;AN000;;>32mb
 18259 00002AB5 F3A4                    	REP	MOVSB		;AN000;;>32mb
 18260 00002AB7 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18261 00002ABA B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18262 00002ABC 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18263                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18264 00002ABE E843F7                  	call	_$IOCTL	
 18265                                  geterr: 			;AN000;
 18266                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18267 00002AC1 16                      	PUSH	SS		;AN000;>32mb
 18268                                  
 18269 00002AC2 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18270                                  
 18271 00002AC3 5F                      	POP	DI		;AN000;;>32mb
 18272 00002AC4 07                      	POP	ES		;AN000;;>32mb
 18273 00002AC5 58                      	POP	AX		;AN000;;>32mb
 18274 00002AC6 C3                      	retn			;AN000;>32mb
 18275                                  
 18276                                  ; MSDOS 6.0
 18277                                  ;---------------------------------------------------------------------------
 18278                                  ; Procedure Name : Set_EXT_mode
 18279                                  ;
 18280                                  ; Inputs:
 18281                                  ;	[EXTOPEN_ON]= flag for extended open
 18282                                  ;	SAVE_BX= mode specified in Extended Open
 18283                                  ; Function:
 18284                                  ;	Set mode in ThisSFT
 18285                                  ; Outputs:
 18286                                  ;	carry set,mode is set if from Extended Open
 18287                                  ;	carry clear, mode not set yet
 18288                                  ;---------------------------------------------------------------------------
 18289                                  
 18290                                  ; 13/05/2019 - Retro DOS v4.0
 18291                                  
 18292                                  Set_EXT_mode:
 18293                                  
 18294                                  ;hkn; SS override
 18295 00002AC7 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18296 00002ACD 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18297 00002ACF 50                      	PUSH	AX			    ;AN000;EO.
 18298                                  
 18299                                  ;hkn; SS override
 18300 00002AD0 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18301                                  	;or	[es:di+2],ax
 18302 00002AD4 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18303 00002AD8 58                      	POP	AX			    ;AN000;EO.
 18304 00002AD9 F9                      	STC				    ;AN000;EO.
 18305                                  NOTEX:					    ;AN000;
 18306 00002ADA C3                      	retn				    ;AN000;EO.
 18307                                  
 18308                                  ;============================================================================
 18309                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18310                                  ;============================================================================
 18311                                  ; 08/08/2018 - Retro DOS v3.0
 18312                                  ; 18/05/2019 - Retro DOS v4.0
 18313                                  
 18314                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18315                                  ;	NAME	DOS_OPEN
 18316                                  
 18317                                  ;**	OPEN.ASM - File Open
 18318                                  ;----------------------------------------------------------------------------
 18319                                  ;	Low level routines for openning a file from a file spec.
 18320                                  ;	Also misc routines for sharing errors
 18321                                  ;
 18322                                  ;	DOS_Open
 18323                                  ;	Check_Access_AX
 18324                                  ;	SHARE_ERROR
 18325                                  ;	SET_SFT_MODE
 18326                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18327                                  ;
 18328                                  ;	Revision history:
 18329                                  ;
 18330                                  ;	    Created: ARR 30 March 1983
 18331                                  ;	    A000	version 4.00   Jan. 1988
 18332                                  ;
 18333                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18334                                  ; 	       remote extended opens and not save_cx.
 18335                                  ;
 18336                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18337                                  ;	       on the stack before calling off to the redir.
 18338                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18339                                  ;	       to handle open from exec. In this case set the appropriate bit
 18340                                  ;	       else do not.
 18341                                  ;----------------------------------------------------------------------------	
 18342                                  
 18343                                  ;Installed = TRUE
 18344                                  
 18345                                  ;	i_need	NoSetDir,BYTE
 18346                                  ;	i_need	THISSFT,DWORD
 18347                                  ;	i_need	THISCDS,DWORD
 18348                                  ;	i_need	CURBUF,DWORD
 18349                                  ;	i_need	CurrentPDB,WORD
 18350                                  ;	i_need	CURR_DIR_END,WORD
 18351                                  ;	I_need	RetryCount,WORD
 18352                                  ;	I_need	Open_Access,BYTE
 18353                                  ;	I_need	fSharing,BYTE
 18354                                  ;	i_need	JShare,DWORD
 18355                                  ;	I_need	FastOpenFlg,byte
 18356                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18357                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18358                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18359                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18360                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18361                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18362                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18363                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18364                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18365                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18366                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18367                                  ;
 18368                                  ;	I_need	DOS_FLAG,BYTE
 18369                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18370                                  
 18371                                  ;Break	<DOS_Open - internal file access>
 18372                                  ;---------------------------------------------------------------------------
 18373                                  ; Procedure Name : DOS_Open
 18374                                  ;
 18375                                  ; Inputs:
 18376                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18377                                  ;		terminated)
 18378                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18379                                  ;		( = -1 if current dir not involved, else
 18380                                  ;		 Points to first char after last "/" of current dir part)
 18381                                  ;	[THISCDS] Points to CDS being used
 18382                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18383                                  ;	[THISSFT] Points to SFT to fill in if file found
 18384                                  ;		(sf_mode field set so that FCB may be detected)
 18385                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18386                                  ;	AX is Access and Sharing mode
 18387                                  ;	  High NIBBLE of AL (Sharing Mode)
 18388                                  ;		sharing_compat	   file is opened in compatibility mode
 18389                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18390                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18391                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18392                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18393                                  ;	  Low NIBBLE of AL (Access Mode)
 18394                                  ;		open_for_read	file is opened for reading
 18395                                  ;		open_for_write	file is opened for writing
 18396                                  ;		open_for_both	file is opened for both reading and writing.
 18397                                  ;
 18398                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18399                                  ;		(not checked)
 18400                                  ; Function:
 18401                                  ;	Try to open the specified file
 18402                                  ; Outputs:
 18403                                  ;	sf_ref_count is NOT altered
 18404                                  ;	CARRY CLEAR
 18405                                  ;	    THISSFT filled in.
 18406                                  ;	CARRY SET
 18407                                  ;	    AX is error code
 18408                                  ;		error_file_not_found
 18409                                  ;			Last element of path not found
 18410                                  ;		error_path_not_found
 18411                                  ;			Bad path (not in curr dir part if present)
 18412                                  ;		error_bad_curr_dir
 18413                                  ;			Bad path in current directory part of path
 18414                                  ;		error_invalid_access
 18415                                  ;			Bad sharing mode or bad access mode or bad combination
 18416                                  ;		error_access_denied
 18417                                  ;			Attempt to open read only file for writting, or
 18418                                  ;			open a directory
 18419                                  ;		error_sharing_violation
 18420                                  ;			The sharing mode was correct but not allowed
 18421                                  ;			generates an INT 24 on compatibility mode SFTs
 18422                                  ; DS preserved, others destroyed
 18423                                  ;----------------------------------------------------------------------------
 18424                                  
 18425                                  ; 18/05/2019 - Retro DOS v4.0
 18426                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18427                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18428                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18429                                  
 18430                                  DOS_OPEN:
 18431                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18432                                  
 18433 00002ADB C606[4C03]00            	MOV	byte [NoSetDir],0
 18434 00002AE0 E83301                  	CALL	Check_Access_AX
 18435 00002AE3 722B                    	JC	short do_ret_label	    ; retc
 18436                                  
 18437 00002AE5 C43E[9E05]              	LES	DI,[THISSFT]
 18438 00002AE9 30E4                    	XOR	AH,AH
 18439                                  
 18440                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18441                                  
 18442 00002AEB 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18443 00002AEF 06                      	PUSH	ES
 18444 00002AF0 C436[A205]              	LES	SI,[THISCDS]
 18445                                  	; 18/08/2018
 18446 00002AF4 83FEFF                  	CMP	SI,-1
 18447 00002AF7 7530                    	JNZ	short TEST_RE_NET1
 18448 00002AF9 07                      	POP	ES
 18449                                  
 18450                                  	; MSDOS 6.0
 18451                                  ;Extended open hooks
 18452 00002AFA F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18453 00002AFF 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18454                                  _IFS_extopen:									;AN000;
 18455 00002B01 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18456                                  					    ; with which call was made. This
 18457                                  					    ; has the open access bits. 
 18458                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18459                                  	
 18460 00002B04 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18461                                  	;mov	ax,112Eh
 18462                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18463 00002B05 B82E11                  	mov	ax,(MultNET*256)+46 
 18464 00002B08 CD2F                    	INT	2FH			    ;FT.				;AN000;
 18465 00002B0A 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18466 00002B0B C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18467                                  
 18468                                  do_ret_label:
 18469 00002B10 C3                      	retn				    ;FT.				;AN000;
 18470                                  _NOEXTOP:
 18471                                  ;Extended open hooks
 18472                                  	;
 18473                                  ;IF NOT Installed
 18474                                  	;transfer NET_SEQ_OPEN
 18475                                  ;ELSE
 18476                                  	
 18477                                  do_net_int2f:
 18478 00002B11 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18479 00002B16 7409                    	jz	short not_exec_open	; N: just do net open
 18480                                  					; Y: check to see if redir is aware
 18481                                  					;    of this 
 18482                                  	
 18483                                  					; M042 - start
 18484                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18485 00002B18 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18486                                  					; Q: does this redir know how to 
 18487                                  					;    this
 18488 00002B1D 7402                    	jz	short not_exec_open	; N: just do net open
 18489                                  					; Y: set bit 3 of access byte and 
 18490                                  					;    set sharing mode to DENY_WRITE
 18491                                  					; M042 - end
 18492                                  	
 18493                                  	; NOTE: This specific mode has not been set for the code assembled
 18494                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18495                                  	; always one.
 18496                                  					; M035 - set the bits on the stack
 18497                                  	;mov	al,23h
 18498 00002B1F B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18499                                  	
 18500                                  not_exec_open:
 18501                                  	; MSDOS 3.3 & MSDOS 6.0
 18502 00002B21 50                      	PUSH	AX
 18503                                  
 18504                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18505                                  	;INT	2FH
 18506                                  
 18507 00002B22 B81611                  	mov     ax,1116h
 18508 00002B25 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18509                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18510                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18511                                  			; STACK: WORD file open mode
 18512                                  			; Return: CF set on error
 18513                                  
 18514 00002B27 5B                      	POP	BX			; clean stack
 18515                                  ;do_ret_label: ; 09/08/2018
 18516 00002B28 C3                      	retn
 18517                                  ;ENDIF
 18518                                  
 18519                                  TEST_RE_NET1:
 18520                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18521                                  	; 17/12/2022
 18522 00002B29 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18523 00002B2E 07                      	POP	ES
 18524                                  	; 18/05/2019
 18525 00002B2F 7409                    	JZ	short LOCAL_OPEN
 18526                                  
 18527                                  ;Extended open hooks
 18528                                  	; MSDOS 6.0
 18529 00002B31 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18530 00002B36 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18531                                  ;Extended open hooks
 18532                                  
 18533                                  ;IF NOT Installed
 18534                                  ;	transfer NET_OPEN
 18535                                  ;ELSE
 18536 00002B38 EBD7                    	jmp	short do_net_int2f
 18537                                  ;ENDIF
 18538                                  
 18539                                  LOCAL_OPEN:
 18540                                  	; MSDOS 3.3 & MSDOS 6.0
 18541 00002B3A E8A5E7                  	call	ECritDisk
 18542                                  
 18543                                  ; DOS 3.3 FastOPen 6/16/86
 18544                                  
 18545                                  	;or	byte [FastOpenFlg],5
 18546 00002B3D 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18547                                  
 18548 00002B42 E8D112                  	call	GETPATH
 18549                                  
 18550                                  ; DOS 3.3 FastOPen 6/16/86
 18551                                  
 18552 00002B45 731D                    	JNC	short Open_found
 18553 00002B47 7511                    	JNZ	short bad_path2
 18554 00002B49 08C9                    	OR	CL,CL
 18555 00002B4B 740D                    	JZ	short bad_path2
 18556                                  OpenFNF:
 18557 00002B4D B80200                  	MOV	AX,error_file_not_found	; 2
 18558                                  OpenBadRet:
 18559                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18560                                  	; 12/08/2018
 18561                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18562                                  	; MSDOS 6.0
 18563 00002B50 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18564 00002B56 F9                      	STC
 18565                                  	;call	LCritDisk
 18566                                  	; 16/12/2022
 18567 00002B57 E9A3E7                  	jmp	LCritDisk
 18568                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18569                                  	;retn 	; 08/09/2018
 18570                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18571                                  	;jmp	Clear_FastOpen
 18572                                  
 18573                                  bad_path2:
 18574 00002B5A B80300                  	MOV	AX,error_path_not_found	; 3
 18575 00002B5D EBF1                    	JMP	short OpenBadRet
 18576                                  
 18577                                  Open_Bad_Access:
 18578 00002B5F B80500                  	MOV	AX,error_access_denied	; 5
 18579 00002B62 EBEC                    	JMP	short OpenBadRet
 18580                                  
 18581                                  Open_found:
 18582 00002B64 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18583 00002B66 08E4                    	OR	AH,AH
 18584 00002B68 783E                    	JS	short open_ok		; Devices don't have attributes
 18585 00002B6A 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18586                                  	;mov	al,[es:bx+0Bh]
 18587 00002B6E 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18588 00002B72 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18589 00002B74 75E9                    	JNZ	short Open_Bad_Access
 18590 00002B76 A801                    	TEST	AL,attr_read_only	; check write on read only
 18591 00002B78 742E                    	JZ	short open_ok
 18592                                  
 18593                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18594                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18595                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18596                                  ; processing until the actual write operation:
 18597                                  ;
 18598                                  ; If FCB, then we change the mode to be read_only.
 18599                                  ; If net_FCB, then we change the mode to be read_only.
 18600                                  ; If not open for read then error.
 18601                                  
 18602 00002B7A 1E                      	push	ds
 18603 00002B7B 56                      	push	si
 18604 00002B7C C536[9E05]              	LDS	SI,[THISSFT]
 18605                                  	;mov	cx,[si+2]
 18606 00002B80 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18607                                  	; 17/12/2022
 18608                                  	;test	ch,80h
 18609 00002B83 F6C580                  	test	ch,sf_isFCB>>8
 18610                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18611 00002B86 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18612 00002B88 88CA                    	MOV	DL,CL
 18613 00002B8A 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18614 00002B8D 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18615 00002B90 7508                    	JNZ	short NormalOpen	; no
 18616                                  ResetAccess:
 18617                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18618                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18619                                  	; 16/12/2022
 18620 00002B92 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18621                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18622 00002B95 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18623 00002B98 EB0C                    	JMP	SHORT FillSFT
 18624                                  
 18625                                  ; The SFT is normal. See if the requested access is open_for_read
 18626                                  
 18627                                  NormalOpen:
 18628 00002B9A 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18629 00002B9D 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18630 00002BA0 7404                    	JZ	short FillSFT
 18631 00002BA2 5E                      	pop	si
 18632 00002BA3 1F                      	pop	ds
 18633 00002BA4 EBB9                    	JMP	short Open_Bad_Access
 18634                                  ;
 18635                                  ; All done, restore registers and fill the SFT.
 18636                                  ;
 18637                                  FillSFT:
 18638 00002BA6 5E                      	pop	si
 18639 00002BA7 1F                      	pop	ds
 18640                                  open_ok:
 18641 00002BA8 E86F1E                  	call	DOOPEN			; Fill in SFT
 18642                                  
 18643                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18644                                  	; 18/05/2019
 18645                                  	;and	byte [ss:FastOpenFlag],80h
 18646 00002BAB 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18647                                  	; 12/08/2018
 18648                                  	;and	byte [FastOpenFlg],Fast_yes	
 18649                                  
 18650                                  	; MSDOS 6.0
 18651 00002BB1 E84300                  	CALL	DO_SHARE_CHECK
 18652 00002BB4 7303                    	JNC	short SHARE_OK
 18653                                  	;call	LCritDisk
 18654                                  	; 16/12/2022
 18655 00002BB6 E944E7                  	jmp	LCritDisk
 18656                                  	;;JMP	short Clear_FastOpen
 18657                                  	;retn	; 18/05/2019
 18658                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18659                                  	;jmp	short Clear_FastOpen	
 18660                                  
 18661                                  	; MSDOS 3.3
 18662                                  ;DO_SHARE_CHECK:
 18663                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18664                                  ;OpenShareRetry:
 18665                                  ;	push	cx			; Save number left to do
 18666                                  ;	call	SHARE_CHECK		; Final Check
 18667                                  ;	pop	cx			; CX = # left
 18668                                  ;	JNC	short SHARE_OK		; No problem with access
 18669                                  ;	call	Idle
 18670                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18671                                  ;OpenShareFail:
 18672                                  ;	LES	DI,[THISSFT]
 18673                                  ;	call	SHARE_ERROR
 18674                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18675                                  	
 18676                                  	;12/08/2018
 18677                                  	;mov	byte [ss:FastOpenFlg],0
 18678                                  	;08/09/2018
 18679                                  	;mov	byte [FastOpenFlg],0
 18680                                  	;call	LCritDisk
 18681                                  	;JMP	short Clear_FastOpen
 18682                                  	;retn
 18683                                  
 18684                                  SHARE_OK:
 18685                                  	; MSDOS 3.3 & MSDOS 6.0
 18686 00002BB9 B80300                  	MOV	AX,3
 18687 00002BBC C43E[9E05]              	LES	DI,[THISSFT]
 18688                                  ;if installed
 18689                                  	;call	JShare + 14 * 4
 18690 00002BC0 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18691                                  ;else
 18692                                  ;	Call	ShSU
 18693                                  ;endif
 18694 00002BC4 E836E7                  	call	LCritDisk
 18695                                  	
 18696                                  	;FallThru Set_SFT_Mode
 18697                                  
 18698                                  ;----------------------------------------------------------------------------
 18699                                  ; Procedure Name : SET_SFT_MODE
 18700                                  ;
 18701                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18702                                  ;
 18703                                  ;   Inputs:
 18704                                  ;	ThisSFT points to SFT
 18705                                  ;
 18706                                  ;   Outputs:
 18707                                  ;	Carry clear
 18708                                  ;   Registers modified: AX.
 18709                                  ;---------------------------------------------------------------------------
 18710                                  
 18711                                  ;hkn; called from create. DS already set up to DOSDATA.
 18712                                  
 18713                                  SET_SFT_MODE:
 18714 00002BC7 C43E[9E05]              	LES	DI,[THISSFT]
 18715 00002BCB E8EC18                  	call	DEV_OPEN_SFT
 18716                                  	;test	word [es:di+2],8000h
 18717                                  	; 17/12/2022
 18718                                  	;test	byte [es:di+3],80h
 18719 00002BCE 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18720                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18721 00002BD3 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18722 00002BD5 A1[3003]                	MOV	AX,[CurrentPDB]
 18723                                  	;mov	[es:di+31h],ax
 18724 00002BD8 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18725                                  
 18726                                  Clear_FastOpen:
 18727 00002BDC C3                      	retn			       ;;;;; DOS 3.3
 18728                                  
 18729                                  ;----------------------------------------------------------------------------
 18730                                  ; Procedure Name : SHARE_ERROR
 18731                                  ;
 18732                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18733                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18734                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18735                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18736                                  ;---------------------------------------------------------------------------
 18737                                  
 18738                                  SHARE_ERROR:
 18739                                  	; 17/12/2022
 18740                                  	;test	byte [es:di+3],80h
 18741 00002BDD 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18742                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18743 00002BE2 7509                    	JNZ	short _HARD_ERR
 18744 00002BE4 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18745 00002BE8 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18746                                  	;CMP	CL,SHARING_COMPAT ; 0
 18747                                  	;JNE	short _NO_HARD_ERR
 18748                                  	; 21/09/2023
 18749 00002BEB 7505                    	jnz	short _NO_HARD_ERR
 18750                                  _HARD_ERR:
 18751 00002BED E8B545                  	call	SHARE_VIOLATION
 18752                                  	;retnc				; User wants retry
 18753 00002BF0 73EA                    	jnc	short Clear_FastOpen
 18754                                  _NO_HARD_ERR:
 18755 00002BF2 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18756 00002BF5 F9                      	STC
 18757 00002BF6 C3                      	retn
 18758                                  
 18759                                  ; MSDOS 6.0
 18760                                  ;----------------------------------------------------------------------------
 18761                                  ; Procedure Name : DO_SHARE_CHECK
 18762                                  ;
 18763                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18764                                  ; Functions: check file sharing mode is valid
 18765                                  ; Output: carry set, error
 18766                                  ;	  carry clear, share ok
 18767                                  ;----------------------------------------------------------------------------
 18768                                  
 18769                                  	; 18/05/2019 - Retro DOS v4.0
 18770                                  DO_SHARE_CHECK:
 18771 00002BF7 E8E8E6                  	call	ECritDisk		; enter critical section
 18772                                  OPN_RETRY:
 18773 00002BFA 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18774                                  OpenShareRetry:
 18775 00002BFE 51                      	push	cx			; Save number left to do
 18776 00002BFF E89E45                  	call	SHARE_CHECK		; Final Check
 18777 00002C02 59                      	pop	cx			; CX = # left
 18778 00002C03 730E                    	JNC	short Share_Ok2		; No problem with access
 18779 00002C05 E8DCE5                  	call	Idle
 18780 00002C08 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18781                                  OpenShareFail:
 18782 00002C0A C43E[9E05]              	LES	DI,[THISSFT]
 18783 00002C0E E8CCFF                  	call	SHARE_ERROR
 18784 00002C11 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18785                                  Share_Ok2:
 18786                                  	;call	LCritDisk		; leave critical section
 18787                                  	;retn
 18788                                  	; 18/12/2022
 18789 00002C13 E9E7E6                  	jmp	LCritDisk
 18790                                  
 18791                                  ;-----------------------------------------------------------------------------
 18792                                  ; Procedure Name : Check_Access
 18793                                  ;
 18794                                  ; Inputs:
 18795                                  ;	AX is mode
 18796                                  ;	  High NIBBLE of AL (Sharing Mode)
 18797                                  ;		sharing_compat	   file is opened in compatibility mode
 18798                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18799                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18800                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18801                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18802                                  ;	  Low NIBBLE of AL (Access Mode)
 18803                                  ;		open_for_read	file is opened for reading
 18804                                  ;		open_for_write	file is opened for writing
 18805                                  ;		open_for_both	file is opened for both reading and writing.
 18806                                  ; Function:
 18807                                  ;	Check this access mode for correctness
 18808                                  ; Outputs:
 18809                                  ;	[open_access] = AL input
 18810                                  ;	Carry Clear
 18811                                  ;		Mode is correct
 18812                                  ;		AX unchanged
 18813                                  ;	Carry Set
 18814                                  ;		Mode is bad
 18815                                  ;		AX = error_invalid_access
 18816                                  ; No other registers effected
 18817                                  ;----------------------------------------------------------------------------
 18818                                  
 18819                                  Check_Access_AX:
 18820 00002C16 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18821 00002C19 53                      	PUSH	BX
 18822                                  
 18823                                  ;	If sharing, then test for special sharing mode for FCBs
 18824                                  
 18825 00002C1A 88C3                    	MOV	BL,AL
 18826 00002C1C 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18827 00002C1F 803E[7205]FF            	CMP	byte [FSHARING],-1
 18828 00002C24 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18829 00002C26 80FB70                  	CMP	BL,SHARING_NET_FCB
 18830 00002C29 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18831                                  CheckShareMode:
 18832 00002C2B 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18833 00002C2E 770D                    	JA	short Make_Bad_Access
 18834                                  CheckAccessMode:
 18835 00002C30 88C3                    	MOV	BL,AL
 18836 00002C32 80E30F                  	AND	BL,access_mask
 18837 00002C35 80FB02                  	CMP	BL,2
 18838 00002C38 7703                    	JA	short Make_Bad_Access
 18839 00002C3A 5B                      	POP	BX
 18840 00002C3B F8                      	CLC
 18841 00002C3C C3                      	retn
 18842                                  
 18843                                  Make_Bad_Access:
 18844 00002C3D B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18845 00002C40 5B                      	POP	BX
 18846 00002C41 F9                      	STC
 18847 00002C42 C3                      	retn
 18848                                  
 18849                                  ;============================================================================
 18850                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18851                                  ;============================================================================
 18852                                  ; 08/08/2018 - Retro DOS v3.0
 18853                                  ; 18/05/2019 - Retro DOS v4.0
 18854                                  
 18855                                  ;**	Low level routine for returning disk drive information from a local
 18856                                  ;	  or NET device
 18857                                  ;
 18858                                  ;	DISK_INFO
 18859                                  ;
 18860                                  ;	  Modification history:
 18861                                  ;
 18862                                  ;		Created: ARR 30 March 1983
 18863                                  
 18864                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18865                                  ;---------------------------------------------------------------------------
 18866                                  ; Procedure Name : DISK_INFO
 18867                                  ;
 18868                                  ; Inputs:
 18869                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18870                                  ;		(It MAY NOT be NUL, error not detected)
 18871                                  ; Function:
 18872                                  ;	Get Interesting Drive Information
 18873                                  ; Returns:
 18874                                  ;	DX = Number of free allocation units
 18875                                  ;	BX = Total Number of allocation units on disk
 18876                                  ;	CX = Sector size
 18877                                  ;	AL = Sectors per allocation unit
 18878                                  ;	AH = FAT ID BYTE
 18879                                  ;	Carry set if error (currently user FAILed to I 24)
 18880                                  ; Segs except ES preserved, others destroyed
 18881                                  ;----------------------------------------------------------------------------
 18882                                  
 18883                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18884                                  ;hkn; DOSDATA. 
 18885                                  
 18886                                  DISK_INFO:
 18887                                  	; 08/08/2018 - Retro DOS v3.0
 18888                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18889                                  
 18890 00002C43 E8E3E5                  	call	TestNet
 18891 00002C46 7306                    	JNC	short LOCAL_DSK_INFO
 18892                                  
 18893                                  ;IF NOT Installed
 18894                                  ;	transfer NET_DISK_INFO
 18895                                  ;ELSE
 18896                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18897                                  	;INT	2FH
 18898                                  	;return
 18899                                  
 18900 00002C48 B80C11                  	mov     ax,110Ch
 18901 00002C4B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18902                                  			; ES:DI -> current directory
 18903                                  			; Return: AL = sectors per cluster, BX = total clusters
 18904                                  			; CX = bytes per sector, DX = number of available clusters
 18905 00002C4D C3                      	retn
 18906                                  ;ENDIF
 18907                                  
 18908                                  LOCAL_DSK_INFO:
 18909 00002C4E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18910 00002C53 E88CE6                  	call	ECritDisk
 18911 00002C56 E83629                  	call	FATREAD_CDS		; perform media check.
 18912 00002C59 7241                    	JC	short CRIT_LEAVE
 18913 00002C5B BB0200                  	MOV	BX,2
 18914 00002C5E E89827                  	call	UNPACK			; Get first FAT sector into CURBUF
 18915 00002C61 7239                    	JC	short CRIT_LEAVE
 18916 00002C63 C536[E205]              	LDS	SI,[CURBUF]
 18917                                  	;mov	ah,[si+20]
 18918 00002C67 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18919                                  
 18920                                  ;hkn; SS is DOSDATA
 18921 00002C6A 16                      	push	ss
 18922 00002C6B 1F                      	pop	ds
 18923                                  	;mov	cx,[es:bp+0Dh]
 18924 00002C6C 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18925                                  
 18926                                  ; Examine the current free count. If it indicates that we have an invalid
 18927                                  ; count, do the expensive calculation.
 18928                                  
 18929                                  	;mov	dx,[es:bp+1Fh]
 18930 00002C70 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18931 00002C74 83FAFF                  	CMP	DX,-1			; is it valid?
 18932 00002C77 7404                    	JZ	short DoScan
 18933                                  
 18934                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18935                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18936                                  ; the count.
 18937                                  
 18938 00002C79 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18939 00002C7B 7222                    	JB	short GotVal		; yes, trust it.
 18940                                  DoScan:
 18941 00002C7D 31D2                    	XOR	DX,DX
 18942 00002C7F 49                      	DEC	CX
 18943                                  SCANFREE:
 18944 00002C80 E87627                  	call	UNPACK
 18945 00002C83 7217                    	JC	short CRIT_LEAVE
 18946 00002C85 7501                    	JNZ	short NOTFREECLUS
 18947 00002C87 42                      	INC	DX			; A free one
 18948                                  NOTFREECLUS:
 18949 00002C88 43                      	INC	BX			; Next cluster
 18950 00002C89 E2F5                    	LOOP	SCANFREE
 18951 00002C8B 4B                      	DEC	BX			; BX was next cluster. Convert to
 18952                                  ReturnVals:
 18953 00002C8C 4B                      	DEC	BX			; count
 18954                                  	;mov	al,[es:bp+4]
 18955 00002C8D 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18956 00002C91 FEC0                    	INC	AL			; Sectors/cluster
 18957                                  	;mov	cx,[es:bp+2]
 18958 00002C93 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18959                                  	;mov	[es:bp+1Fh],dx
 18960 00002C97 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18961 00002C9B F8                      	CLC
 18962                                  CRIT_LEAVE:
 18963                                  	;call	LCritDisk
 18964                                  	;retn
 18965                                  	; 17/12/2022
 18966 00002C9C E95EE6                  	jmp	LCritDisk
 18967                                  
 18968                                  ; We have correctly computed everything previously. Load up registers for
 18969                                  ; return.
 18970                                  
 18971                                  GotVal: 
 18972 00002C9F 89CB                    	MOV	BX,CX			; get cluster count
 18973 00002CA1 EBE9                    	JMP	short ReturnVals
 18974                                  
 18975                                  ;============================================================================
 18976                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18977                                  ;============================================================================
 18978                                  ; 22/07/2018 - Retro DOS v3.0
 18979                                  
 18980                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18981                                  ;	NAME	DOS_SEARCH
 18982                                  
 18983                                  ;**	Low level routines for doing local and NET directory searches
 18984                                  ;
 18985                                  ;	DOS_SEARCH_FIRST
 18986                                  ;	DOS_SEARCH_NEXT
 18987                                  ;	RENAME_NEXT
 18988                                  ;
 18989                                  ;	Revision history:
 18990                                  ;
 18991                                  ;	    Created: ARR 30 March 1983
 18992                                  ;	    A000	version 4.00  Jan. 1988
 18993                                  ;	    A001	PTM 3564 -- search for fastopen
 18994                                  
 18995                                  ;Installed = TRUE
 18996                                  
 18997                                  ;--------------------------------------------------------------------------
 18998                                  ;
 18999                                  ; Procedure Name : DOS_SEARCH_FIRST
 19000                                  ;
 19001                                  ; Inputs:
 19002                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19003                                  ;		terminated)
 19004                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19005                                  ;		( = -1 if current dir not involved, else
 19006                                  ;		 Points to first char after last "/" of current dir part)
 19007                                  ;	[THISCDS] Points to CDS being used
 19008                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19009                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 19010                                  ;	[DMAADD] Points to 53 byte buffer
 19011                                  ; Function:
 19012                                  ;	Initiate a search for the given file spec
 19013                                  ; Outputs:
 19014                                  ;	CARRY CLEAR
 19015                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 19016                                  ;
 19017                                  ;	LOCAL
 19018                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 19019                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 19020                                  ;	    11 byte search name with Meta chars in it
 19021                                  ;	    Search Attribute Byte, attribute of search
 19022                                  ;	    WORD LastEnt value
 19023                                  ;	    WORD DirStart
 19024                                  ;	    4 byte pad
 19025                                  ;	    32 bytes of the directory entry found
 19026                                  ;	NET
 19027                                  ;	    21 bytes First byte has high bit set
 19028                                  ;	    32 bytes of the directory entry found
 19029                                  ;
 19030                                  ;	CARRY SET
 19031                                  ;	    AX = error code
 19032                                  ;		error_no_more_files
 19033                                  ;			No match for this file
 19034                                  ;		error_path_not_found
 19035                                  ;			Bad path (not in curr dir part if present)
 19036                                  ;		error_bad_curr_dir
 19037                                  ;			Bad path in current directory part of path
 19038                                  ; DS preserved, others destroyed
 19039                                  ;---------------------------------------------------------------------------
 19040                                  
 19041                                  ; 24/01/2024
 19042                                  %if 1
 19043                                  	; 17/05/2019 - Retro DOS v4.0
 19044                                  GET_FAST_SEARCH:
 19045                                  	; 22/07/2018
 19046                                  	; MSDOS 6.0
 19047                                  	; 17/12/2022
 19048 00002CA3 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 19049                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 19050                                  					;FO.trigger fastopen ;AN000;
 19051                                  	;call	DOS_SEARCH_FIRST
 19052                                  	;retn
 19053                                  	; 24/01/2024
 19054                                  	; 17/12/2022
 19055                                  	;jmp	DOS_SEARCH_FIRST
 19056                                  %endif
 19057                                  
 19058                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19059                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 19060                                  
 19061                                  DOS_SEARCH_FIRST:
 19062                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 19063                                  
 19064 00002CA9 C43E[A205]              	LES	DI,[THISCDS]
 19065 00002CAD 83FFFF                  	CMP	DI,-1
 19066 00002CB0 7506                    	JNZ	short TEST_RE_NET2
 19067                                  
 19068                                  ;IF NOT Installed
 19069                                  ;	transfer NET_SEQ_SEARCH_FIRST
 19070                                  ;ELSE
 19071                                  	;mov	ax,1119h
 19072 00002CB2 B81911                  	MOV	AX,(MultNET<<8)|25
 19073 00002CB5 CD2F                    	INT	2Fh
 19074 00002CB7 C3                      	retn
 19075                                  ;ENDIF
 19076                                  
 19077                                  TEST_RE_NET2:
 19078                                  	;test	word [es:di+43h],8000h
 19079                                  	; 17/12/2022
 19080                                  	;test	byte [es:di+44h],80h
 19081                                  	; 28/12/2022
 19082 00002CB8 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 19083                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 19084 00002CBD 7406                    	JZ	short LOCAL_SEARCH_FIRST
 19085                                  
 19086                                  ;IF NOT Installed
 19087                                  ;	transfer NET_SEARCH_FIRST
 19088                                  ;ELSE
 19089                                  	;mov	ax,111Bh
 19090 00002CBF B81B11                  	MOV	AX,(MultNET<<8)|27
 19091 00002CC2 CD2F                    	INT	2FH
 19092 00002CC4 C3                      	retn
 19093                                  ;ENDIF
 19094                                  	; 18/05/2019 - Retro DOS v4.0
 19095                                  LOCAL_SEARCH_FIRST:
 19096 00002CC5 E81AE6                  	call	ECritDisk
 19097                                  	; MSDOS 6.0
 19098                                  	;;test	word [DOS34_FLAG],400h
 19099                                  	; 17/12/2022
 19100                                  	;test	byte [DOS34_FLAG+1],04h
 19101 00002CC8 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 19102                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 19103 00002CCD 7405                    	JZ	short NOFN			;AN000;
 19104                                  	;or	byte [FastOpenFlg],1
 19105 00002CCF 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 19106                                  NOFN:						;AN000;
 19107 00002CD4 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19108                                  
 19109                                  ; 03/02/2024
 19110                                  %if 0
 19111                                  	; MSDOS 6.0
 19112                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 19113                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19114                                  %else
 19115                                  	; 03/02/2024
 19116 00002CD9 16                      	push	ss
 19117 00002CDA 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19118 00002CDB 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19119                                  getnext:				;AN000;
 19120 00002CDF AC                      	lodsb				;AN000;;FO. get char
 19121 00002CE0 08C0                    	or	al,al			;AN000;;FO. is it null
 19122 00002CE2 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19123 00002CE4 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19124 00002CE6 75F7                    	jne	short getnext 		;AN000;;FO. no
 19125                                  %endif
 19126                                  	;and	byte [FastOpenFlg],80h
 19127 00002CE8 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19128                                  NO_Question:	; 03/02/2024
 19129                                  norm_GETPATH:
 19130 00002CED E82611                  	call	GETPATH
 19131                                  	; BX = offset NAME1
 19132                                  ;_getdone:
 19133 00002CF0 7318                    	JNC	short find_check_dev
 19134 00002CF2 7511                    	JNZ	short bad_path3
 19135 00002CF4 08C9                    	OR	CL,CL
 19136 00002CF6 740D                    	JZ	short bad_path3
 19137                                  find_no_more:
 19138                                  	;mov	ax,12h
 19139 00002CF8 B81200                  	MOV	AX,error_no_more_files
 19140                                  BadBye:
 19141                                  	; MSDOS 6.0
 19142 00002CFB 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19143                                  
 19144 00002D01 F9                      	STC
 19145                                  	;call	LCritDisk
 19146                                  	;retn
 19147                                  	; 18/12/2022
 19148 00002D02 E9F8E5                  	jmp	LCritDisk
 19149                                  
 19150                                  bad_path3:
 19151                                  	;mov	ax,3
 19152 00002D05 B80300                  	MOV	AX,error_path_not_found
 19153 00002D08 EBF1                    	JMP	short BadBye
 19154                                  
 19155                                  find_check_dev:
 19156 00002D0A 08E4                    	OR	AH,AH
 19157 00002D0C 790A                    	JNS	short found_entry
 19158 00002D0E C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19159 00002D14 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19160                                  found_entry:
 19161                                  
 19162                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19163                                  ; a search-next may not have wfp_start set correctly
 19164                                  
 19165 00002D18 C43E[2C03]              	LES	DI,[DMAADD]
 19166 00002D1C 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19167 00002D20 AC                      	LODSB
 19168 00002D21 2C40                    	SUB	AL,'A'-1                ; logical drive
 19169 00002D23 AA                      	STOSB				; High bit not set (local)
 19170                                  found_it:
 19171 00002D24 C43E[2C03]              	LES	DI,[DMAADD]
 19172 00002D28 47                      	INC	DI
 19173                                  
 19174                                  	; MSDOS 6.0
 19175 00002D29 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19176                                  	;test	byte [FastOpenFlg],10h
 19177 00002D2A F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19178 00002D2F 7408                    	JZ	short notfast			  ;FO.;AN001;
 19179 00002D31 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19180 00002D33 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19181 00002D37 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19182                                  
 19183                                  notfast:
 19184 00002D39 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19185                                  movmov:
 19186                                  ; Special E5 code
 19187 00002D3C A4                      	MOVSB
 19188 00002D3D 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19189 00002D42 7505                    	JNZ	short NOTKANJB
 19190 00002D44 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19191                                  NOTKANJB:
 19192                                  	;MOV	CX,10
 19193                                  	;REP	MOVSB
 19194                                  	; 03/02/2024
 19195 00002D49 B90500                  	mov	cx,5
 19196 00002D4C F3A5                    	rep	movsw
 19197                                  
 19198                                  	; 08/09/2018
 19199 00002D4E 1F                      	POP	DS			;FO.;AN001; restore ds
 19200                                  
 19201 00002D4F A0[6B05]                	MOV	AL,[ATTRIB]
 19202 00002D52 AA                      	STOSB
 19203 00002D53 50                      	PUSH	AX			; Save AH device info
 19204 00002D54 A1[4803]                	MOV	AX,[LASTENT]
 19205 00002D57 AB                      	STOSW
 19206 00002D58 A1[C205]                	MOV	AX,[DIRSTART]
 19207 00002D5B AB                      	STOSW
 19208                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19209 00002D5C 83C704                  	ADD	DI,4
 19210 00002D5F 58                      	POP	AX			; Recover AH device info
 19211 00002D60 08E4                    	OR	AH,AH
 19212 00002D62 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19213 00002D64 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19214 00002D69 7510                    	JNZ	short OKSTORE
 19215                                  
 19216                                  	; MSDOS 6.0
 19217 00002D6B F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19218                                  					;AN000;;FO. from fastopen and is good
 19219 00002D70 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19220                                  
 19221                                  	; The user has specified the root directory itself, rather than some
 19222                                  	; contents of it. We can't "find" that.
 19223                                  
 19224 00002D72 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19225                                  					;   stuffing a -1 at Lastent
 19226 00002D78 E97DFF                  	JMP	find_no_more
 19227                                  
 19228                                  OKSTORE:
 19229 00002D7B 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19230                                  DOSREL:
 19231                                  	; BX = offset NAME1 (from GETPATH)
 19232 00002D7F 89DE                    	MOV	SI,BX			; SI-> start of entry
 19233                                  
 19234                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19235                                  
 19236                                  	;;mov	cx,32
 19237                                  	;MOV	CX,dir_entry.size
 19238                                  	; 03/02/2024
 19239 00002D81 B91000                  	mov	cx,dir_entry.size>>1
 19240                                  ;;;;; 7/29/86
 19241 00002D84 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19242                                  	;REP	MOVSB
 19243 00002D86 F3A5                    	rep	movsw
 19244                                  	;
 19245 00002D88 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19246 00002D8A 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19247 00002D8E 7504                    	JNZ	short NO05
 19248 00002D90 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19249                                  NO05:
 19250                                  
 19251                                  ;;;;; 7/29/86
 19252                                  
 19253                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19254                                  	; 16/12/2022
 19255                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19256                                  	; MSDOS 6.0
 19257                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19258                                  	; 18/05/2019 - Retro DOS v4.0
 19259 00002D94 16                      	push	ss
 19260 00002D95 1F                      	pop	ds
 19261                                  	; 16/12/2022
 19262 00002D96 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19263                                  
 19264                                  ;hkn; SS is DOSDATA
 19265                                  	;push	ss
 19266                                  	;pop	ds
 19267                                  	
 19268                                  	; 27/06/2024
 19269                                  	; cf=0
 19270                                  	;CLC
 19271                                  	
 19272                                  	;call	LCritDisk
 19273                                  	;retn
 19274                                  	; 16/12/2022
 19275 00002D9B E95FE5                  	jmp	LCritDisk
 19276                                  
 19277                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19278                                  ;----------------------------------------------------------------------------
 19279                                  ;
 19280                                  ; Procedure Name : DOS_SEARCH_NEXT
 19281                                  ;
 19282                                  ; Inputs:
 19283                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19284                                  ;	    (only first 21 bytes must have valid information)
 19285                                  ; Function:
 19286                                  ;	Look for subsequent matches
 19287                                  ; Outputs:
 19288                                  ;	CARRY CLEAR
 19289                                  ;	    The 53 bytes at DMAADD are updated for next call
 19290                                  ;		(see DOS_SEARCH_FIRST)
 19291                                  ;	CARRY SET
 19292                                  ;	    AX = error code
 19293                                  ;		error_no_more_files
 19294                                  ;			No more files to find
 19295                                  ; DS preserved, others destroyed
 19296                                  ;---------------------------------------------------------------------------
 19297                                  
 19298                                  ;hkn; called from search.asm. DS already set up at this point.
 19299                                  
 19300                                  DOS_SEARCH_NEXT:
 19301 00002D9E C43E[2C03]              	LES	DI,[DMAADD]
 19302 00002DA2 268A05                  	MOV	AL,[ES:DI]
 19303 00002DA5 A880                    	TEST	AL,80H			; Test for NET
 19304 00002DA7 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19305                                  ;IF NOT Installed
 19306                                  ;	transfer NET_SEARCH_NEXT
 19307                                  ;ELSE
 19308                                  	;mov	ax,111Ch
 19309 00002DA9 B81C11                  	MOV	AX,(MultNET<<8)|28
 19310 00002DAC CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19311                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19312                                  		     ; Return: CF set on error, AX = DOS error code
 19313                                  		     ; CF clear if successful
 19314 00002DAE C3                      	retn
 19315                                  ;ENDIF
 19316                                  
 19317                                  LOCAL_SEARCH_NEXT:
 19318                                  	;AL is drive A=1
 19319                                  	;mov	byte [EXTERR_LOCUS],2
 19320 00002DAF C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19321 00002DB4 E82BE5                  	call	ECritDisk
 19322                                  
 19323                                  ;hkn; DummyCDS is in DOSDATA
 19324 00002DB7 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19325                                  ;hkn; Segment address is DOSDATA - use ds
 19326                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19327 00002DBD 8C1E[A405]              	mov	[THISCDS+2],DS
 19328                                  
 19329 00002DC1 0440                    	ADD	AL,'A'-1
 19330 00002DC3 E8A33A                  	call	InitCDS
 19331                                  
 19332                                  ;	call	GETTHISDRV		; Set CDS pointer
 19333                                  
 19334 00002DC6 7246                    	JC	short No_files		; Bogus drive letter
 19335 00002DC8 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19336                                  	;les	bp,[es:di+45h]
 19337 00002DCC 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19338 00002DD0 E855D8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19339                                  
 19340                                  	; 16/12/2022
 19341 00002DD3 268A4600                	mov	al,[ES:BP]
 19342                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19343                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19344 00002DD7 A2[7605]                	mov	[THISDRV],AL
 19345                                  	;mov	word [CREATING],0E500h
 19346 00002DDA C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19347 00002DE0 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19348 00002DE5 C536[2C03]              	LDS	SI,[DMAADD]
 19349 00002DE9 AC                      	LODSB				; Drive Byte
 19350                                  
 19351                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19352                                  RENAME_NEXT:
 19353                                  	;context ES
 19354 00002DEA 16                      	push	ss
 19355 00002DEB 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19356                                  
 19357                                  ;hkn; NAME1 is in DOSDATA
 19358 00002DEC BF[4B05]                	MOV	DI,NAME1
 19359                                  
 19360 00002DEF B90B00                  	MOV	CX,11
 19361 00002DF2 F3A4                    	REP	MOVSB			; Search name
 19362 00002DF4 AC                      	LODSB				; Attribute
 19363                                  
 19364                                  ;hkn; SS override
 19365 00002DF5 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19366 00002DF9 AD                      	LODSW				; LastEnt
 19367 00002DFA 09C0                    	OR	AX,AX
 19368                                  	; 03/02/2024
 19369                                  	;JNS	short cont_load
 19370 00002DFC 7810                    	js	short No_files
 19371                                  ;No_files:
 19372                                  	;JMP	find_no_more
 19373                                  
 19374                                  cont_load:
 19375 00002DFE 50                      	PUSH	AX			; Save LastEnt
 19376 00002DFF AD                      	LODSW				; DirStart
 19377 00002E00 89C3                    	MOV	BX,AX
 19378                                  
 19379                                  ;hkn; SS is DOSDATA
 19380                                  	;context DS
 19381 00002E02 16                      	push	ss
 19382 00002E03 1F                      	pop	ds
 19383 00002E04 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19384                                  	;invoke	SetDirSrch
 19385 00002E08 E8AE0F                  	call	SETDIRSRCH
 19386 00002E0B 7304                    	JNC	short SEARCH_GOON
 19387 00002E0D 58                      	POP	AX			; Clean stack
 19388                                  	;JMP	short No_files
 19389                                  	; 03/02/2024
 19390                                  No_files:
 19391 00002E0E E9E7FE                  	JMP	find_no_more
 19392                                  
 19393                                  SEARCH_GOON:
 19394 00002E11 E87912                  	call	STARTSRCH
 19395 00002E14 58                      	POP	AX
 19396 00002E15 E8740F                  	call	GETENT
 19397 00002E18 72F4                    	JC	short No_files
 19398 00002E1A E8AC0E                  	call	NEXTENT
 19399 00002E1D 72EF                    	JC	short No_files
 19400 00002E1F 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19401 00002E21 E900FF                  	JMP	found_it ; 10/08/2018
 19402                                  
 19403                                  ; MSDOS 6.0
 19404                                  ;---------------------------------------------------------------------------
 19405                                  ;
 19406                                  ; Procedure Name : CHECK_QUESTION
 19407                                  ;
 19408                                  ; Input: [WFP_START]= pointer to final path
 19409                                  ; Function: check '?' char
 19410                                  ; Output: carry clear, if no '?'
 19411                                  ;	 carry set, if '?' exists
 19412                                  ;---------------------------------------------------------------------------
 19413                                  
 19414                                  ; 03/02/2024
 19415                                  %if 0
 19416                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19417                                  CHECK_QUESTION:
 19418                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19419                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19420                                  	push	ss
 19421                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19422                                  	; 16/12/2022
 19423                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19424                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19425                                  	;mov	si,[ss:WFP_START]
 19426                                  getnext:				;AN000;
 19427                                  	LODSB				;AN000;;FO. get char
 19428                                  	OR	AL,AL			;AN000;;FO. is it null
 19429                                  	JZ	short NO_Question	;AN000;;FO. yes
 19430                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19431                                  	JNZ	short getnext 		;AN000;;FO. no
 19432                                  	STC				;AN000;;FO.
 19433                                  NO_Question:				;AN000;
 19434                                  	retn				;AN000;;FO.
 19435                                  %endif
 19436                                  
 19437                                  ;============================================================================
 19438                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19439                                  ;============================================================================
 19440                                  ; 23/07/2018 - Retro DOS v3.0
 19441                                  ; 18/05/2019 - Retro DOS v4.0
 19442                                  
 19443                                  ;**
 19444                                  ;
 19445                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19446                                  ;  If process has NET resources a close all is sent out over the net.
 19447                                  ;
 19448                                  ;   DOS_ABORT
 19449                                  ;
 19450                                  ;   Modification history:
 19451                                  ;
 19452                                  ;       Created: ARR 30 March 1983
 19453                                  ;
 19454                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19455                                  ;				being terminated only if it is busy.
 19456                                  ;
 19457                                  
 19458                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19459                                  ;--------------------------------------------------------------------------
 19460                                  ;
 19461                                  ; Procedure Name : DOS_ABORT
 19462                                  ;
 19463                                  ; Inputs:
 19464                                  ;       [CurrentPDB] set to PID of process aborting
 19465                                  ; Function:
 19466                                  ;       Close all files and free all SFTs for this PID
 19467                                  ; Returns:
 19468                                  ;       None
 19469                                  ; All destroyed except stack
 19470                                  ;---------------------------------------------------------------------------
 19471                                  
 19472                                  DOS_ABORT:
 19473 00002E24 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19474 00002E29 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19475                                  reset_free_jfn:
 19476 00002E2E 89CB                    	MOV     BX,CX
 19477 00002E30 51                      	PUSH    CX
 19478 00002E31 4B                      	DEC     BX                      ; get jfn (start with last one)
 19479                                  
 19480 00002E32 E87937                  	CALL	_$CLOSE
 19481 00002E35 59                      	POP     CX
 19482 00002E36 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19483                                  
 19484                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19485                                  ; are running in the no-sharing no-network environment, we are simulating the
 19486                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19487                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19488                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19489                                  ;
 19490                                  ; If sharing is loaded, then the following call to close process will
 19491                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19492                                  ;
 19493                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19494                                  ; known network resources. These resources are then responsible for cleaning
 19495                                  ; up after this process.
 19496                                  ;
 19497                                  ; Sleazy, eh?
 19498                                  
 19499                                  	;context DS			; SS is DOSDATA
 19500 00002E38 16                      	push	ss
 19501 00002E39 1F                      	pop	ds  ; 09/09/2018
 19502                                  
 19503                                  	;CallInstall Net_Abort, MultNET, 29
 19504 00002E3A B81D11                  	mov	ax,111Dh
 19505 00002E3D CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19506                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19507                                  			; DS???, SS = DOS CS
 19508                                  ;if installed
 19509 00002E3F FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19510                                  ;else
 19511                                  ;	call 	MFTCloseP
 19512                                  ;endif
 19513                                  
 19514                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19515                                  ; counts.
 19516                                  					; SS override
 19517 00002E43 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19518                                  	;mov	cx,[es:di+4]
 19519 00002E48 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19520 00002E4C E317                    	jcxz    FCBScanDone
 19521                                  	;lea	di,[di+6]
 19522 00002E4E 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19523 00002E51 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19524                                  FCBTest:
 19525                                  	;cmp	[es:di+31h],ax
 19526 00002E55 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19527 00002E59 7505                    	jnz	short FCBNext		; no, skip it
 19528 00002E5B 26C7050000              	mov	word [es:di],0
 19529                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19530                                  FCBNext:
 19531 00002E60 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19532 00002E63 E2F0                    	loop    FCBTest
 19533                                  FCBScanDone:
 19534                                  
 19535                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19536                                  
 19537 00002E65 31DB                    	XOR     BX,BX
 19538                                  Scan:
 19539 00002E67 53                      	push    bx
 19540 00002E68 E8BF36                  	call	SFFromSFN
 19541 00002E6B 5B                      	pop     bx
 19542                                  	;jnc	short Scan1
 19543                                  	;retn
 19544                                  
 19545                                  	; 18/12/2022
 19546                                  	;jc	short NO_Question ; retn
 19547                                  	; 03/02/2024
 19548 00002E6C 7234                    	jc	short RET2
 19549                                  
 19550                                  ;M038
 19551                                  ; Do what the comment above says, check for busy state
 19552                                  
 19553                                  Scan1:
 19554                                  	;cmp	word [es:di],0
 19555                                  	;jz	short scan_next  ; MSDOS 3.3
 19556                                  	; MSDOS 6.0
 19557 00002E6E 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19558                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19559                                  				; Is Sft busy? ;M038
 19560 00002E72 7519                    	jnz	short scan_next
 19561                                  ;
 19562                                  ; we have a SFT that is busy. See if it is for the current process
 19563                                  ;
 19564 00002E74 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19565                                  	;cmp	[es:di+31h],ax
 19566 00002E78 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19567 00002E7C 750F                    	jnz	short scan_next
 19568 00002E7E 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19569                                  	;cmp	[es:di+2Fh],ax
 19570 00002E82 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19571 00002E86 7505                    	jnz	short scan_next
 19572                                  
 19573                                  ; This SFT is labelled as ours.
 19574                                  
 19575 00002E88 26C7050000              	mov	word [es:di],0
 19576                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19577                                  scan_next:
 19578 00002E8D 43                      	inc     bx
 19579 00002E8E EBD7                    	jmp     short Scan
 19580                                  
 19581                                  ;============================================================================
 19582                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19583                                  ;============================================================================
 19584                                  ; 23/07/2018 - Retro DOS v3.0
 19585                                  ; 18/05/2019 - Retro DOS v4.0
 19586                                  
 19587                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19588                                  ;
 19589                                  ;	DOS_CLOSE
 19590                                  ;	DOS_COMMIT
 19591                                  ;	FREE_SFT
 19592                                  ;	SetSFTTimes
 19593                                  ;
 19594                                  ;	Revision history:
 19595                                  ;
 19596                                  ;	   AN000  version 4.00	Jan. 1988
 19597                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19598                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19599                                  
 19600                                  ;Installed = TRUE
 19601                                  
 19602                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19603                                  ;---------------------------------------------------------------------------
 19604                                  ;
 19605                                  ; Procedure Name : DOS_CLOSE
 19606                                  ;
 19607                                  ; Inputs:
 19608                                  ;	[THISSFT] set to the SFT for the file being used
 19609                                  ; Function:
 19610                                  ;	Close the indicated file via the SFT
 19611                                  ; Returns:
 19612                                  ;	sf_ref_count decremented otherwise
 19613                                  ;	ES:DI point to SFT
 19614                                  ;	Carry set if error
 19615                                  ;	    AX has error code
 19616                                  ; DS preserved, others destroyed
 19617                                  ;---------------------------------------------------------------------------
 19618                                  
 19619                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19620                                  
 19621                                  ; 18/05/2019 - Retro DOS v4.0
 19622                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19623                                  
 19624                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19625                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19626                                  
 19627                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19628                                  
 19629                                  DOS_CLOSE:
 19630 00002E90 C43E[9E05]              	LES	DI,[THISSFT]
 19631                                  	;mov	bx,[ES:DI+5]
 19632 00002E94 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19633                                  
 19634                                  ; Network closes are handled entirely by the net code.
 19635                                  
 19636                                  	;;test	bx,8000h
 19637                                  	;TEST	BX,sf_isnet
 19638                                  	; 17/12/2022
 19639                                  	;test	bh,80h
 19640 00002E98 F6C780                  	test	bh,(sf_isnet>>8)
 19641 00002E9B 7406                    	JZ	short LocalClose
 19642                                  
 19643                                  	;CallInstall Net_Close,MultNET,6
 19644 00002E9D B80611                  	mov     ax,1106h
 19645 00002EA0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19646                                  			; ES:DI -> SFT
 19647                                  			; SFT DPB field -> DPB of drive containing file
 19648                                  			; Return: CF set on error, AX = DOS error code
 19649                                  			; CF clear if successful
 19650                                  RET2:		; 03/02/2024
 19651 00002EA2 C3                      	retn
 19652                                  
 19653                                  ; All closes release the sharing information.
 19654                                  ; No commit releases sharing information
 19655                                  ;
 19656                                  ; All closes decrement the ref count.
 19657                                  ; No commit decrements the ref count.
 19658                                  
 19659                                  LocalClose:
 19660 00002EA3 E83CE4                  	call	ECritDisk
 19661 00002EA6 E85701                  	CALL	SetSFTTimes
 19662 00002EA9 E8D800                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19663                                  
 19664                                  ;hkn; SS is DOSDATA
 19665                                  	;Context DS
 19666 00002EAC 16                      	push	ss
 19667 00002EAD 1F                      	pop	ds
 19668                                  
 19669 00002EAE 50                      	push	ax
 19670 00002EAF 53                      	push	bx
 19671 00002EB0 E81843                  	call	ShareEnd
 19672 00002EB3 5B                      	pop	bx
 19673 00002EB4 58                      	pop	ax
 19674                                  
 19675                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19676                                  
 19677                                  CloseEntry:
 19678 00002EB5 50                      	PUSH	AX
 19679                                  
 19680                                  ; File clean or device does not get stamped nor disk looked at.
 19681                                  
 19682                                  	;test	bx,0C0h
 19683                                  	; 17/12/2022
 19684 00002EB6 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19685                                  	;TEST	BX,devid_file_clean+devid_device
 19686 00002EB9 7403                    	JZ	short rdir
 19687                                  	; 14/11/2022
 19688 00002EBB E9B400                  	JMP	FREE_SFT_OK		; either clean or device
 19689                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19690                                  
 19691                                  ; Retrieve the directory entry for the file
 19692                                  
 19693                                  rdir:
 19694 00002EBE E8D000                  	CALL	DirFromSFT
 19695                                  	;mov	al,5
 19696 00002EC1 B005                    	MOV	AL,error_access_denied
 19697 00002EC3 7303                    	JNC	short clook
 19698                                  	; 14/11/2022
 19699 00002EC5 E9AB00                  	JMP	CloseFinish		; pretend the close worked.
 19700                                  	;jc	short CloseFinish ; 24/07/2019
 19701                                  clook:
 19702                                  
 19703                                  ; ES:DI points to entry
 19704                                  ; DS:SI points to SFT
 19705                                  ; ES:BX points to buffer header
 19706                                  
 19707 00002EC8 57                      	push	di
 19708 00002EC9 56                      	push	si
 19709                                  	;lea	si,[si+20h]
 19710 00002ECA 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19711                                  
 19712                                  ; ES:DI point to directory entry
 19713                                  ; DS:SI point to unpacked name
 19714                                  
 19715 00002ECD E80DE3                  	call	XCHGP
 19716                                  
 19717                                  ; ES:DI point to unpacked name
 19718                                  ; DS:SI point to directory entry
 19719                                  
 19720 00002ED0 E8540E                  	call	MetaCompare
 19721 00002ED3 E807E3                  	call	XCHGP
 19722 00002ED6 5E                      	pop	si
 19723 00002ED7 5F                      	pop	di
 19724 00002ED8 740C                    	JZ	short CLOSE_GO		; Name OK
 19725                                  Bye:	
 19726 00002EDA 89F7                    	MOV	DI,SI
 19727 00002EDC 1E                      	PUSH	DS
 19728 00002EDD 07                      	POP	ES			; ES:DI points to SFT
 19729 00002EDE 16                      	PUSH	SS
 19730 00002EDF 1F                      	POP	DS
 19731 00002EE0 F9                      	STC
 19732                                  	;mov	al,2
 19733 00002EE1 B002                    	MOV	AL,error_file_not_found
 19734 00002EE3 E98D00                  	JMP	CloseFinish ; 24/07/2019
 19735                                  
 19736                                  	; 18/05/2019 - Retro DOS v4.0
 19737                                  CLOSE_GO:
 19738                                  	; 03/02/2024
 19739                                  	;mov	al,[si+4]
 19740 00002EE6 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19741                                  	
 19742                                  	; MSDOS 6.0
 19743                                  	;test	word [si+2],8000h
 19744                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19745                                  	; 17/12/2022
 19746                                  	;test	byte [si+3],80h
 19747 00002EE9 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19748 00002EED 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19749                                  	; MSDOS 3.3 & MSDOS 6.0
 19750                                  	;mov	ch,[es:di+0Bh]
 19751 00002EEF 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19752                                  
 19753                                  	; 03/02/2024
 19754                                  	;;mov	al,[si+4]
 19755                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19756                                  
 19757                                  ;hkn; SS override
 19758 00002EF3 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19759                                  	; MSDOS 3.3
 19760                                  	;;call	MatchAttributes
 19761                                  	;;JNZ	short Bye		; attributes do not match
 19762                                  	; 18/05/2019
 19763 00002EF7 EB04                    	JMP	SHORT setattr		;FT.
 19764                                  nofcb:
 19765                                  	; 03/02/2024
 19766                                  	; MSDOS 6.0
 19767                                  	;;mov	al,[si+4]
 19768                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19769                                  
 19770 00002EF9 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19771                                  setattr:
 19772                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19773                                  	;or	byte [es:di+0Bh],20h
 19774 00002EFD 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19775                                  	; MSDOS 6.0
 19776                                  	;mov	ax,[es:di+1Ah]
 19777 00002F02 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19778                                  					;F.O. save old first cluster
 19779                                  ;hkn; SS override
 19780 00002F06 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19781                                  
 19782                                  ; 03/02/2024
 19783                                  %if 0
 19784                                  	;mov	ax,[si+0Bh]
 19785                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19786                                  	;mov	[es:di+1Ah],ax
 19787                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19788                                  	;mov	ax,[si+11h]
 19789                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19790                                  	;mov	[es:di+1Ch],ax
 19791                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19792                                  	;mov	ax,[si+13h]
 19793                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19794                                  	;mov	[es:di+1Eh],ax
 19795                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19796                                  	;mov	ax,[si+0Fh]
 19797                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19798                                  	;mov	[es:di+18h],ax
 19799                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19800                                  	;mov	ax,[si+0Dh]
 19801                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19802                                  	;mov	[es:di+16h],ax
 19803                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19804                                  %else
 19805                                  	; 03/02/2024 - Retro DOS v4.2
 19806 00002F0A 56                      	push	si
 19807 00002F0B 83C60B                  	add	si,0Bh
 19808 00002F0E AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19809                                  	;mov	[es:di+1Ah],ax
 19810 00002F0F 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19811 00002F13 AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19812 00002F14 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19813 00002F18 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19814 00002F19 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19815 00002F1D AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19816 00002F1E 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19817 00002F22 AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19818 00002F23 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19819 00002F27 5E                      	pop	si
 19820                                  %endif
 19821                                  
 19822                                  	; MSDOS 6.0
 19823                                  ;; File Tagging
 19824 00002F28 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19825                                  				  ;LB. if already dirty		    ;AN000;
 19826 00002F2D 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19827                                  	; 02/06/2019
 19828 00002F2F E8D22A                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19829                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19830                                  	;or	byte [es:bx+5],40h
 19831 00002F32 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19832                                  yesdirty4:
 19833 00002F37 1E                      	push	ds
 19834 00002F38 56                      	push	si
 19835                                  	; MSDOS 6.0
 19836                                  	;mov	cx,[si+0Bh]
 19837                                  	; 07/12/2022
 19838 00002F39 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19839                                  ;hkn; SS override
 19840 00002F3C 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19841                                  	; MSDOS 3.3 
 19842                                  	;push	ss
 19843                                  	;pop	ds
 19844                                  	;MOV	AL,[THISDRV]
 19845                                  ;;; 10/1/86  update fastopen cache
 19846                                  	; MSDOS 3.3 & MSDOS 6.0
 19847 00002F40 52                      	PUSH	DX
 19848 00002F41 B400                    	MOV	AH,0			; dir entry update
 19849 00002F43 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19850                                  	; MSDOS 6.0
 19851 00002F45 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19852 00002F47 750C                    	JNZ	short do_update2	;AN005; no, do update
 19853 00002F49 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19854                                  	; 27/06/2024
 19855                                  	;;;
 19856                                  	;;mov	di,[si+1Bh]
 19857                                  	;MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19858                                  	;;mov	cx,[si+1Dh]
 19859                                  	;MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19860 00002F4B C57C1B                  	lds	di,[si+SF_ENTRY.sf_dirsec]
 19861 00002F4E 8CD9                      	mov	cx,ds
 19862                                  	;;;
 19863                                  	;mov	dh,[si+1Fh]
 19864 00002F50 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19865 00002F53 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19866                                  
 19867                                  do_update2:				;AN011;F.O.
 19868                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19869                                  	; 
 19870 00002F55 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19871 00002F5A 7407                    	JZ	short do_update		;AN011;F.O. yes
 19872 00002F5C B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19873 00002F5E 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19874                                  do_update:				;AN005;
 19875                                  ;hkn; SS is DOSDATA
 19876                                  	;Context DS
 19877 00002F63 16                      	push	ss
 19878 00002F64 1F                      	pop	ds
 19879                                  	; MSDOS 3.3 & MSDOS 6.0
 19880 00002F65 E8FEF6                  	call	FastOpen_Update 	; invoke fastopen
 19881 00002F68 5A                      	POP	DX
 19882                                  
 19883                                  ;;; 10/1/86  update fastopen cache
 19884 00002F69 E89629                  	call	FLUSHBUF		; flush all relevant buffers
 19885 00002F6C 5F                      	pop	di
 19886 00002F6D 07                      	pop	es
 19887                                  	;mov	al,5
 19888 00002F6E B005                    	MOV	AL,error_access_denied
 19889 00002F70 7201                    	JC	short CloseFinish
 19890                                  FREE_SFT_OK:
 19891 00002F72 F8                      	CLC				; signal no error.
 19892                                  CloseFinish:
 19893                                  
 19894                                  ; Indicate to the device that the SFT is being closed.
 19895                                  
 19896                                  ;;;; 7/21/86
 19897 00002F73 9C                      	PUSHF				; save flag from DirFromSFT
 19898 00002F74 E84B15                  	call	DEV_CLOSE_SFT
 19899 00002F77 9D                      	POPF
 19900                                  ;;;; 7/21/86
 19901                                  ;
 19902                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19903                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19904                                  ; going to be moving from busy to free.
 19905                                  ;
 19906 00002F78 59                      	POP	CX			; get old ref count
 19907 00002F79 9C                      	PUSHF
 19908                                  	; 03/02/2024
 19909                                  	;DEC	CX			; if cx != 1
 19910                                  	;JNZ	short NoFree		; then do NOT free SFT
 19911 00002F7A E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19912                                  
 19913 00002F7C 26890D                  	mov	[es:di],cx ; 0
 19914                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19915                                  NoFree:
 19916 00002F7F E87BE3                  	call	LCritDisk
 19917 00002F82 9D                      	POPF
 19918 00002F83 C3                      	retn
 19919                                  
 19920                                  ;---------------------------------------------------------------------------
 19921                                  ;
 19922                                  ; Procedure Name : FREE_SFT
 19923                                  ;
 19924                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19925                                  ; Flags preserved. Return old ref count in AX
 19926                                  ;
 19927                                  ; Note that busy is indicated by the SFT ref count being -1.
 19928                                  ;
 19929                                  ;---------------------------------------------------------------------------
 19930                                  
 19931                                  FREE_SFT:
 19932 00002F84 9C                      	PUSHF		; Save carry state
 19933 00002F85 268B05                  	mov	ax,[es:di]
 19934                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19935 00002F88 48                      	DEC	AX
 19936 00002F89 7501                    	JNZ	short SetCount
 19937 00002F8B 48                      	DEC	AX
 19938                                  SetCount:
 19939 00002F8C 268705                  	xchg	ax,[es:di]
 19940                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19941 00002F8F 9D                      	POPF
 19942 00002F90 C3                      	retn
 19943                                  
 19944                                  	; 18/05/2019 - Retro DOS v4.0
 19945                                  
 19946                                  ;----------------------------------------------------------------------------
 19947                                  ;
 19948                                  ; Procedure Name : DirFromSFT
 19949                                  ;
 19950                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19951                                  ;
 19952                                  ;   Inputs:	ES:DI point to SFT
 19953                                  ;		DS = DOSDATA
 19954                                  ;   Outputs:
 19955                                  ;		EXTERR_LOCUS = errLOC_Disk
 19956                                  ;		CurBuf points to buffer
 19957                                  ;		Carry Clear -> operation OK
 19958                                  ;		    ES:DI point to entry
 19959                                  ;		    ES:BX point to buffer
 19960                                  ;		    DS:SI point to SFT
 19961                                  ;		Carry SET   -> operation failed
 19962                                  ;		    registers trashified
 19963                                  ;   Registers modified: ALL
 19964                                  ;----------------------------------------------------------------------------
 19965                                  
 19966                                  DirFromSFT:
 19967                                  	;mov	byte [EXTERR_LOCUS],2
 19968 00002F91 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19969 00002F96 06                      	push	es
 19970 00002F97 57                      	push	di
 19971                                  	; MSDOS 3.3
 19972                                  	;;mov	dx,[es:di+1Dh]
 19973                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19974                                  	; MSDOS 6.0
 19975                                  	;mov	dx,[es:[di+1Dh]
 19976 00002F98 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19977 00002F9C 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19978                                  	; 04/02/2024
 19979 00002FA0 52                      	push	dx
 19980                                  	;mov	dx,[es:di+1Bh]
 19981 00002FA1 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19982                                  	; 04/02/2024
 19983                                  	; 19/05/2019
 19984                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19985                                  	; MSDOS 3.3 & MSDOS 6.0
 19986 00002FA5 52                      	PUSH	DX
 19987 00002FA6 E8D625                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19988                                  					; [THISDPB] set
 19989 00002FA9 5A                      	POP	DX
 19990 00002FAA 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19991 00002FAE 721E                    	JC	short PopDone
 19992                                  	; 22/09/2023
 19993                                  	;XOR	AL,AL	; *		; Pre read
 19994                                  	;;mov	byte [ALLOWED],18h
 19995                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19996                                  	;call	GETBUFFR
 19997                                  	; 22/09/2023
 19998 00002FB0 E84B28                  	call	GETBUFFER ; * 		; Pre read
 19999 00002FB3 7219                    	JC	short PopDone
 20000 00002FB5 5E                      	pop	si
 20001 00002FB6 1F                      	pop	ds			; Get back SFT pointer
 20002                                  
 20003                                  ;hkn; SS override
 20004 00002FB7 36C43E[E205]            	LES	DI,[SS:CURBUF]
 20005                                  	;or	byte [es:di+5],4
 20006 00002FBC 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 20007 00002FC1 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 20008                                  	;;lea	di,[di+16] ; MSDOS 3.3
 20009                                  	;lea	di,[di+20] ; MSDOS 6.0
 20010 00002FC3 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 20011                                  	;mov	al,32
 20012 00002FC6 B020                    	MOV	AL,dir_entry.size
 20013                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 20014 00002FC8 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 20015 00002FCB 01C7                    	ADD	DI,AX			; Point at the entry
 20016 00002FCD C3                      	retn				; carry is clear
 20017                                  PopDone:
 20018 00002FCE 5F                      	pop	di
 20019 00002FCF 07                      	pop	es
 20020                                  PopDone_retn:
 20021 00002FD0 C3                      	retn
 20022                                  
 20023                                  ;----------------------------------------------------------------------------
 20024                                  ;
 20025                                  ;**	DOS_Commit - UPdate Directory Entries
 20026                                  ;
 20027                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 20028                                  ;		(DS) = DOSGROUP
 20029                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 20030                                  ;	USES	all but DS
 20031                                  ;
 20032                                  ;----------------------------------------------------------------------------
 20033                                  
 20034                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20035                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 20036                                  
 20037                                  DOS_COMMIT:
 20038                                  	;hkn; called from srvcall. DS already set up.
 20039 00002FD1 C43E[9E05]              	LES	DI,[THISSFT]
 20040                                  	;mov	bx,[es:di+5]
 20041 00002FD5 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 20042                                  	;test	bx,0C0h
 20043                                  	; 17/12/2022
 20044 00002FD9 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 20045                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 20046 00002FDC 75F2                    	jnz	short PopDone_retn
 20047                                  	;test	bx,8000h
 20048                                  	; 17/12/2022
 20049                                  	;test	bh,80h
 20050 00002FDE F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 20051                                  	;TEST	BX,sf_isnet ; 8000h
 20052 00002FE1 7406                    	JZ	short LOCAL_COMMIT
 20053                                  
 20054                                  ;IF NOT Installed
 20055                                  ;	transfer NET_COMMIT
 20056                                  ;ELSE
 20057                                  	;mov	ax,1107h
 20058 00002FE3 B80711                  	MOV	AX,(MultNET<<8)|7
 20059 00002FE6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 20060                                  			; ES:DI -> SFT
 20061                                  			; SFT DPB field -> DPB of drive containing file
 20062                                  			; Return: CF set on error, AX = DOS error code
 20063                                  			; CF clear if successful
 20064                                  localcommit_retn: ; 18/12/2022	
 20065 00002FE8 C3                      	retn
 20066                                  ;ENDIF
 20067                                  
 20068                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 20069                                  ; There are three ways we can do this. One is to enter a critical section to
 20070                                  ; protect a potential free. The second is to increment the ref count to mask
 20071                                  ; the close decrementing.
 20072                                  ;
 20073                                  ; The proper way is to let the caller's of close decide if a decrement should
 20074                                  ; be done. We do this by providing another entry into close after the
 20075                                  ; decrement and after the share information release.
 20076                                  
 20077                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 20078                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 20079                                  
 20080                                  LOCAL_COMMIT:
 20081 00002FE9 E8F6E2                  	call	ECritDisk
 20082                                  	; MSDOS 6.0
 20083 00002FEC E8F3E2                  	call	ECritDisk	;PTM.
 20084 00002FEF E80E00                  	call	SetSFTTimes
 20085 00002FF2 B8FFFF                  	MOV	AX,-1
 20086 00002FF5 E8BDFE                  	call	CloseEntry
 20087                                  	; MSDOS 6.0
 20088 00002FF8 9C                      	PUSHF			;PTM.				;AN000;
 20089 00002FF9 E8BE14                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 20090 00002FFC 9D                      	POPF			;PTM.				;AN000;
 20091                                  	;call	LCritDisk	;PTM.				;AN000;
 20092                                  	; 18/12/2022
 20093 00002FFD E9FDE2                  	jmp	LCritDisk
 20094                                  ;localcommit_retn:
 20095                                  ;	retn
 20096                                  
 20097                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 20098                                  ;----------------------------------------------------------------------------
 20099                                  ;
 20100                                  ; Procedure Name : SetSFTTimes
 20101                                  ;
 20102                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 20103                                  ;   Reflect these times in other SFT's for the same file.
 20104                                  ;
 20105                                  ;   Inputs:	ES:DI point to SFT
 20106                                  ;		BX = sf_flags set apprpriately
 20107                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 20108                                  ;   Registers modified: All except ES:DI, BX, AX
 20109                                  ;
 20110                                  ;----------------------------------------------------------------------------
 20111                                  
 20112                                  	; 04/02/2024 - Retro DOS v4.2
 20113                                  
 20114                                  SetSFTTimes:
 20115                                  
 20116                                  ; 04/02/2024
 20117                                  %if 0
 20118                                  ;	File clean or device does not get stamped nor disk looked at.
 20119                                  	
 20120                                  	;test	bx,0C0h
 20121                                  	; 17/12/2022
 20122                                  	test	bl,devid_file_clean+devid_device
 20123                                  	;TEST	BX,devid_file_clean+devid_device
 20124                                  	;retnz				; clean or device => no timestamp
 20125                                  	jnz	short localcommit_retn
 20126                                  
 20127                                  ;	file and dirty. See if date is good
 20128                                  
 20129                                  	;test	bx,4000h
 20130                                  	; 17/12/2022
 20131                                  	;test	bh,40h
 20132                                  	test	bh,(sf_close_nodate>>8)
 20133                                  	;TEST	BX,sf_close_nodate
 20134                                  	;retnz				; nodate => no timestamp
 20135                                  	jnz	short localcommit_retn
 20136                                  %else
 20137                                  	; 04/02/2024
 20138                                  	; (PCDOS 7.1 IBMDOS.COM)
 20139                                  	;test	bx,40C0h
 20140 00003000 F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20141 00003004 75E2                    	jnz	short localcommit_retn
 20142                                  %endif
 20143                                  
 20144 00003006 50                      	push	ax
 20145 00003007 53                      	push	bx
 20146 00003008 E8D5DA                  	call	DATE16			; Date/Time to AX/DX
 20147                                  	;mov	[es:di+0Fh],ax
 20148 0000300B 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20149                                  	;mov	[es:di+0Dh],dx
 20150 0000300F 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20151 00003013 31C0                    	XOR	AX,AX
 20152                                  ;if installed
 20153                                  	;call	JShare + 14 * 4
 20154 00003015 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20155                                  ;else
 20156                                  ;	call	ShSU
 20157                                  ;endif
 20158 00003019 5B                      	pop	bx
 20159 0000301A 58                      	pop	ax
 20160 0000301B C3                      	retn
 20161                                  
 20162                                  ;============================================================================
 20163                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20164                                  ;============================================================================
 20165                                  ; 23/07/2018 - Retro DOS v3.0
 20166                                  ; 18/05/2019 - Retro DOS v4.0
 20167                                  
 20168                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20169                                  
 20170                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20171                                  ;NAME  DIRCALL
 20172                                  
 20173                                  ;**	Low level directory manipulation routines for making removing and
 20174                                  ;	  verifying local or NET directories
 20175                                  ;
 20176                                  ;	DOS_MKDIR
 20177                                  ;	DOS_CHDIR
 20178                                  ;	DOS_RMDIR
 20179                                  ;
 20180                                  ;	Modification history:
 20181                                  ;
 20182                                  ;		Created: ARR 30 March 1983
 20183                                  
 20184                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20185                                  ;---------------------------------------------------------------------------
 20186                                  ;
 20187                                  ; Procedure Name : DOS_MkDir
 20188                                  ;
 20189                                  ; Inputs:
 20190                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20191                                  ;		terminated)
 20192                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20193                                  ;		( = -1 if current dir not involved, else
 20194                                  ;		 Points to first char after last "/" of current dir part)
 20195                                  ;	[THISCDS] Points to CDS being used
 20196                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20197                                  ; Function:
 20198                                  ;	Make a new directory
 20199                                  ; Returns:
 20200                                  ;	Carry Clear
 20201                                  ;		No error
 20202                                  ;	Carry Set
 20203                                  ;	    AX is error code
 20204                                  ;		error_path_not_found
 20205                                  ;			Bad path (not in curr dir part if present)
 20206                                  ;		error_bad_curr_dir
 20207                                  ;			Bad path in current directory part of path
 20208                                  ;		error_access_denied
 20209                                  ;			Already exists, device name
 20210                                  ; DS preserved, Others destroyed
 20211                                  ;---------------------------------------------------------------------------
 20212                                  
 20213                                  ;hkn; called from path.asm. DS already set up.
 20214                                  
 20215                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20216                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20217                                  
 20218                                  ; 04/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 20219                                  ; DOSCODE:6FDAh (MSDOS 6.22, MSDOS.SYS)
 20220                                  
 20221                                  DOS_MKDIR:
 20222 0000301C E80AE2                  	call	TestNet
 20223 0000301F 7313                    	JNC	short LOCAL_MKDIR
 20224                                  
 20225                                  ;IF NOT Installed
 20226                                  ;	transfer NET_MKDIR
 20227                                  ;ELSE
 20228                                  	;mov	ax,1103h
 20229 00003021 B80311                  	MOV	AX,(MultNET<<8)|3
 20230 00003024 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20231                                  			; SS = DOS CS
 20232                                  			; SDA first filename pointer -> fully-qualified directory name
 20233                                  			; SDA CDS pointer -> current directory
 20234                                  			; Return: CF set on error, AX = DOS error code
 20235                                  			; CF clear if successful
 20236 00003026 C3                      	retn
 20237                                  ;ENDIF
 20238                                  
 20239                                  NODEACCERRJ:
 20240                                  	;mov	ax,5
 20241 00003027 B80500                  	MOV	AX,error_access_denied
 20242                                  _BadRet:
 20243 0000302A F9                      	STC
 20244                                  	;call	LCritDisk
 20245                                  	;retn
 20246                                  	; 18/12/2022
 20247 0000302B E9CFE2                  	jmp	LCritDisk
 20248                                  
 20249                                  PATHNFJ:
 20250 0000302E E8CCE2                  	call	LCritDisk
 20251 00003031 E904FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20252                                  
 20253                                  LOCAL_MKDIR:
 20254 00003034 E8ABE2                  	call	ECritDisk
 20255                                  
 20256                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20257                                  
 20258 00003037 8C16[A005]              	MOV	[THISSFT+2],SS
 20259                                  
 20260                                  ;hkn; DOSDATA
 20261 0000303B C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20262                                  
 20263                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20264                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20265                                  
 20266                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20267 00003041 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20268                                  				; make sure SHARER won't complain.
 20269                                  	;mov	al,10h
 20270 00003047 B010                    	MOV	AL,attr_directory
 20271 00003049 E81318                  	call	MakeNode
 20272 0000304C 72E0                    	JC	short PATHNFJ
 20273 0000304E 83F803                  	CMP	AX,3
 20274 00003051 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20275 00003053 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20276 00003057 C53E[E205]              	LDS	DI,[CURBUF]
 20277 0000305B 29FE                    	SUB	SI,DI
 20278 0000305D 56                      	PUSH	SI		; Pointer to dir_first
 20279                                  
 20280                                  ; 04/02/2024
 20281                                  %if 0
 20282                                  	; MSDOS 6.0
 20283                                  	;push	word [DI+8]
 20284                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20285                                  	; MSDOS 3.3 & MSDOS 6.0
 20286                                  	;push	word [di+6]
 20287                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20288                                  %else
 20289                                  	; 04/02/2024
 20290                                  	; (PCDOS 7.1 IBMDOS.COM)
 20291 0000305E C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20292 00003061 1E                      	push	ds
 20293 00003062 50                      	push	ax
 20294                                  %endif
 20295                                  
 20296 00003063 16                      	push	ss
 20297 00003064 1F                      	pop	ds
 20298                                  
 20299                                  	; 04/02/2024
 20300                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20301 00003065 31C0                    	XOR	AX,AX
 20302                                  	;MOV	[DIRSTART],AX	; Null directory
 20303 00003067 8706[C205]              	xchg	ax,[DIRSTART]
 20304 0000306B 50                      	push	ax
 20305                                  
 20306 0000306C E82E17                  	call	NEWDIR
 20307 0000306F 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20308 00003071 E8180D                  	call	GETENT		; First entry
 20309 00003074 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20310 00003076 C43E[E205]              	LES	DI,[CURBUF]
 20311                                  
 20312                                  	; MSDOS 6.0
 20313 0000307A 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20314                                  				 ;LB. if already dirty		    ;AN000;
 20315 0000307F 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20316 00003081 E88029                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20317                                  	
 20318                                  	; MSDOS 3.3 & MSDOS 6.0
 20319                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20320 00003084 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20321                                  yesdirty5:
 20322                                  	;;add	di,16 ; MSDOS 3.3
 20323                                  	;add	di,20 ; MSDOS 6.0
 20324 00003089 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20325 0000308C B82E20                  	MOV	AX,202EH	; ". "
 20326 0000308F 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20327 00003093 E8A617                  	call	SETDOTENT
 20328 00003096 B82E2E                  	MOV	AX,2E2EH	; ".."
 20329 00003099 5A                      	POP	DX		; Parent
 20330 0000309A E89F17                  	call	SETDOTENT
 20331 0000309D C42E[8A05]              	LES	BP,[THISDPB]
 20332                                  	; 22/09/2023
 20333                                  	;;mov	byte [ALLOWED],18h
 20334                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20335 000030A1 5A                      	POP	DX		; Entry sector
 20336                                  	; MSDOS 6.0
 20337 000030A2 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20338                                  
 20339                                  	;XOR	AL,AL ; *	; Pre read
 20340                                  	;call	GETBUFFR
 20341                                  	; 22/09/2023
 20342 000030A6 E85527                  	call	GETBUFFER ; *	; Pre read
 20343 000030A9 725B                    	JC	short NODEEXISTSP
 20344 000030AB 8B16[C205]              	MOV	DX,[DIRSTART]
 20345 000030AF C53E[E205]              	LDS	DI,[CURBUF]
 20346                                  	;or	byte [di+5],4
 20347 000030B3 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20348 000030B7 5E                      	POP	SI		; dir_first pointer
 20349 000030B8 01FE                    	ADD	SI,DI
 20350 000030BA 8914                    	MOV	[SI],DX
 20351 000030BC 31D2                    	XOR	DX,DX
 20352 000030BE 895402                  	MOV	[SI+2],DX	; Zero size
 20353 000030C1 895404                  	MOV	[SI+4],DX
 20354                                  DIRUP:
 20355                                  	; MSDOS 6.0
 20356 000030C4 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20357                                  	;			 ;LB. if already dirty 		   ;AN000;
 20358 000030C8 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20359 000030CA E83729                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20360                                  	
 20361                                  	; MSDOS 3.3 & MSDOS 6.0
 20362                                  	;or	byte [di+5],40h
 20363 000030CD 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20364                                  yesdirty6:
 20365 000030D1 16                      	push	ss
 20366 000030D2 1F                      	pop	ds
 20367 000030D3 268A4600                	mov	al,[es:bp]
 20368                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20369 000030D7 E82828                  	call	FLUSHBUF
 20370                                  	;mov	ax,5
 20371 000030DA B80500                  	MOV	AX,error_access_denied
 20372                                  	;call	LCritDisk
 20373                                  	;retn
 20374                                  	; 18/12/2022
 20375 000030DD E91DE2                  	jmp	LCritDisk
 20376                                  
 20377                                  NODEEXISTSPOPDEL:
 20378 000030E0 5A                      	POP	DX		; Parent
 20379 000030E1 5A                      	POP	DX		; Entry sector
 20380                                  	; MSDOS 6.0 
 20381 000030E2 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20382 000030E6 C42E[8A05]              	LES	BP,[THISDPB]
 20383                                  	; 22/09/2023
 20384                                  	;;mov	byte [ALLOWED],18h
 20385                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20386                                  	;XOR	AL,AL ; *	; Pre read
 20387                                  	;call	GETBUFFR
 20388                                  	; 22/09/2023
 20389 000030EA E81127                  	call	GETBUFFER ; *	; Pre read
 20390 000030ED 7217                    	JC	short NODEEXISTSP
 20391 000030EF C53E[E205]              	LDS	DI,[CURBUF]
 20392                                  	;or	byte [di+5],4
 20393 000030F3 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20394 000030F7 5E                      	POP	SI		; dir_first pointer
 20395 000030F8 01FE                    	ADD	SI,DI
 20396                                  	;sub	si,1Ah ; 26
 20397 000030FA 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20398 000030FD C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20399 00003100 E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20400                                  NODEEXISTS:
 20401 00003103 E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20402                                  
 20403                                  NODEEXISTSP:
 20404 00003106 5E                      	POP	SI		; Clean stack
 20405 00003107 EBFA                    	JMP	short NODEEXISTS
 20406                                  
 20407                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20408                                  
 20409                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20410                                  ;----------------------------------------------------------------------------
 20411                                  ;
 20412                                  ; Procedure Name : DOS_ChDir
 20413                                  ;
 20414                                  ; Inputs:
 20415                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20416                                  ;		terminated)
 20417                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20418                                  ;		( = -1 if current dir not involved, else
 20419                                  ;		 Points to first char after last "/" of current dir part)
 20420                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20421                                  ; Function:
 20422                                  ;	Validate the path for potential new current directory
 20423                                  ; Returns:
 20424                                  ;	NOTE:
 20425                                  ;	    [SATTRIB] is modified by this call
 20426                                  ;	Carry Clear
 20427                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20428                                  ;		Caller must NOT set ID fields on a NET CDS.
 20429                                  ;	Carry Set
 20430                                  ;	    AX is error code
 20431                                  ;		error_path_not_found
 20432                                  ;			Bad path
 20433                                  ;		error_access_denied
 20434                                  ;			device or file name
 20435                                  ; DS preserved, Others destroyed
 20436                                  ;----------------------------------------------------------------------------
 20437                                  
 20438                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20439                                  
 20440                                  ; 18/05/2019 - Retro DOS v4.0
 20441                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20442                                  
 20443                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20444                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20445                                  
 20446                                  DOS_CHDIR:
 20447 00003109 E81DE1                  	call	TestNet
 20448 0000310C 7306                    	JNC	short LOCAL_CHDIR
 20449                                  
 20450                                  ;IF NOT Installed
 20451                                  ;	transfer NET_CHDIR
 20452                                  ;ELSE
 20453                                  	;mov	ax,1105h
 20454 0000310E B80511                  	MOV	AX,(MultNET<<8)|5
 20455 00003111 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20456                                  			; SS = DOS CS
 20457                                  			; SDA first filename pointer -> fully-qualified directory name
 20458                                  			; SDA CDS pointer -> current directory
 20459                                  			; Return: CF set on error, AX = DOS error code
 20460                                  			; CF clear if successful
 20461 00003113 C3                      	retn
 20462                                  ;ENDIF
 20463                                  
 20464                                  LOCAL_CHDIR:
 20465 00003114 E8CBE1                  	call	ECritDisk
 20466                                  	; MSDOS 6.0
 20467                                  	;;test	word [es:di+43h],2000h
 20468                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20469                                  	; 17/12/2022
 20470                                  	;test	byte [es:di+44h],20h
 20471 00003117 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20472 0000311C 7406                    	JZ	short nojoin		   ;PTM.
 20473                                  	;mov	word [es:di+49h], 0FFFFh
 20474 0000311E 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20475                                  nojoin:
 20476                                  	; MSDOS 3.3 & MSDOS 6.0
 20477 00003124 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20478                                  	;mov	byte [SATTRIB],16h
 20479 00003129 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20480                                  				; Dir calls can find these
 20481                                  ; DOS 3.3  6/24/86 FastOpen
 20482 0000312E 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20483 00003133 E8E00C                  	call	GETPATH
 20484                                  
 20485                                  	; 04/02/2024
 20486                                  	;PUSHF						;AN000;
 20487 00003136 9F                      	lahf						
 20488 00003137 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20489                                  	;POPF						;AN000;
 20490 0000313C 9E                      	sahf
 20491                                  
 20492                                  ; DOS 3.3  6/24/86 FastOpen
 20493                                  
 20494                                  	; MSDOS 3.3
 20495                                  	;mov	byte [FastOpenFlg],0
 20496                                  	
 20497                                  	;mov	ax,3
 20498 0000313D B80300                  	MOV	AX,error_path_not_found
 20499 00003140 7206                    	JC	short ChDirDone
 20500 00003142 7539                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20501 00003144 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20502                                  	; 27/06/2024
 20503                                  	;CLC
 20504                                  ChDirDone:
 20505                                  	;call	LCritDisk
 20506                                  	;retn
 20507                                  	; 18/12/2022
 20508 00003148 E9B2E1                  	jmp	LCritDisk
 20509                                  
 20510                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20511                                  ;----------------------------------------------------------------------------
 20512                                  ;
 20513                                  ; Procedure Name : DOS_RmDir
 20514                                  ;
 20515                                  ; Inputs:
 20516                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20517                                  ;		terminated)
 20518                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20519                                  ;		( = -1 if current dir not involved, else
 20520                                  ;		 Points to first char after last "/" of current dir part)
 20521                                  ;	[THISCDS] Points to CDS being used
 20522                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20523                                  ; Function:
 20524                                  ;	Remove a directory
 20525                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20526                                  ; Returns:
 20527                                  ;	NOTE:
 20528                                  ;	    [SATTRIB] is modified by this call
 20529                                  ;	Carry Clear
 20530                                  ;		No error
 20531                                  ;	Carry Set
 20532                                  ;	    AX is error code
 20533                                  ;		error_path_not_found
 20534                                  ;			Bad path (not in curr dir part if present)
 20535                                  ;		error_bad_curr_dir
 20536                                  ;			Bad path in current directory part of path
 20537                                  ;		error_access_denied
 20538                                  ;			device or file name, root directory
 20539                                  ;			Bad directory ('.' '..' messed up)
 20540                                  ; DS preserved, Others destroyed
 20541                                  ;----------------------------------------------------------------------------
 20542                                  
 20543                                  ;hkn; called from path.asm. DS already set up.
 20544                                  
 20545                                  ; 18/05/2019 - Retro DOS v4.0
 20546                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20547                                  
 20548                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20549                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20550                                  
 20551                                  DOS_RMDIR:
 20552 0000314B E8DBE0                  	call	TestNet
 20553 0000314E 7306                    	JNC	short LOCAL_RMDIR
 20554                                  
 20555                                  ;IF NOT Installed
 20556                                  ;	transfer NET_RMDIR
 20557                                  ;ELSE
 20558                                  	;mov	ax,1101h
 20559 00003150 B80111                  	MOV	AX,(MultNET<<8)|1
 20560 00003153 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20561                                  			; SS = DOS CS
 20562                                  			; SDA first filename pointer -> fully-qualified directory name
 20563                                  			; SDA CDS pointer -> current directory
 20564                                  			; Return: CF set on error, AX = DOS error code
 20565                                  			; CF clear if successful
 20566 00003155 C3                      	retn
 20567                                  ;ENDIF
 20568                                  
 20569                                  LOCAL_RMDIR:
 20570 00003156 E889E1                  	call	ECritDisk
 20571 00003159 C606[4C03]00            	MOV	byte [NoSetDir],0
 20572                                  	;mov	byte [SATTRIB],16h
 20573 0000315E C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20574                                  					; Dir calls can find these
 20575 00003163 E8B00C                  	call	GETPATH
 20576 00003166 720C                    	JC	short NOPATH		; Path not found
 20577 00003168 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20578 0000316A 8B3E[C205]              	MOV	DI,[DIRSTART]
 20579 0000316E 09FF                    	OR	DI,DI			; Root ?
 20580 00003170 750E                    	JNZ	short rmdir_get_buf	; No
 20581 00003172 EB09                    	JMP	SHORT NOTDIRPATH
 20582                                  
 20583                                  NOPATH:
 20584                                  	;mov	ax,3
 20585 00003174 B80300                  	MOV	AX,error_path_not_found
 20586 00003177 E9B0FE                  	JMP	_BadRet
 20587                                  
 20588                                  NOTDIRPATHPOP:
 20589 0000317A 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20590 0000317B 58                      	POP	AX
 20591                                  NOTDIRPATHPOP2:
 20592 0000317C 58                      	POP	AX
 20593                                  NOTDIRPATH:
 20594 0000317D E9A7FE                  	JMP	NODEACCERRJ
 20595                                  
 20596                                  rmdir_get_buf:
 20597 00003180 C53E[E205]              	LDS	DI,[CURBUF]
 20598 00003184 29FB                    	SUB	BX,DI		; Compute true offset
 20599 00003186 53                      	PUSH	BX		; Save entry pointer
 20600                                  	
 20601                                  	; MSDOS 6.0
 20602                                  	;push	word [di+8]
 20603 00003187 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20604                                  	
 20605                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20606                                  	;push	word [di+6]
 20607 0000318A FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20608                                  
 20609                                  ;hkn; SS is DOSDATA
 20610                                  	;context DS
 20611 0000318D 16                      	push	ss
 20612 0000318E 1F                      	pop	ds
 20613                                  	;context ES
 20614 0000318F 16                      	push	ss
 20615 00003190 07                      	pop	es
 20616                                  
 20617                                  ;hkn; NAME1 is in DOSDATA
 20618 00003191 BF[4B05]                	MOV	DI,NAME1
 20619                                  	;MOV	AL,'?' ; 3Fh
 20620                                  	;MOV	CX,11
 20621                                  	;REP	STOSB
 20622                                  	;XOR	AL,AL
 20623                                  	;STOSB				; Nul terminate it
 20624                                  	; 27/06/2024
 20625 00003194 B83F00                  	mov	ax,3Fh
 20626 00003197 B90A00                  	mov	cx,10
 20627 0000319A F3AA                    	rep	stosb	; al = "?"
 20628 0000319C AB                      	stosw		; ah = 0
 20629                                  	;
 20630 0000319D E8ED0E                  	call	STARTSRCH		; Set search
 20631 000031A0 E8E60B                  	call	GETENTRY		; Get start of directory
 20632 000031A3 72D5                    	JC	short NOTDIRPATHPOP	; Screw up
 20633 000031A5 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20634 000031A9 89DE                    	MOV	SI,BX
 20635 000031AB AD                      	LODSW
 20636                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20637 000031AC 3D2E20                  	cmp	ax,202Eh ; ". "
 20638 000031AF 75C9                    	JNZ	short NOTDIRPATHPOP	; Nope
 20639                                  	;add	si,30
 20640 000031B1 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20641 000031B4 AD                      	LODSW
 20642                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20643                                  	;cmp	ax, '..'
 20644 000031B5 3D2E2E                  	cmp	ax,2E2Eh
 20645 000031B8 75C0                    	JNZ	short NOTDIRPATHPOP	; Nope
 20646                                  
 20647                                  ;hkn; SS is DOSDATA
 20648                                  	;context DS
 20649 000031BA 16                      	push	ss
 20650 000031BB 1F                      	pop	ds
 20651 000031BC C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20652 000031C2 E8C40B                  	call	GETENTRY		; Get next entry
 20653 000031C5 72B3                    	JC	short NOTDIRPATHPOP	; Screw up
 20654                                  	;mov	byte [ATTRIB],16h
 20655 000031C7 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20656 000031CC E8C40A                  	call	SRCH			; Do a search
 20657 000031CF 73A9                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20658 000031D1 803E[4A03]00            	CMP	byte [FAILERR],0
 20659 000031D6 75A2                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20660 000031D8 C42E[8A05]              	LES	BP,[THISDPB]
 20661 000031DC 8B1E[C205]              	MOV	BX,[DIRSTART]
 20662 000031E0 E8A41B                  	call	RELEASE 		; Release data in sub dir
 20663 000031E3 7295                    	JC	short NOTDIRPATHPOP	; Screw up
 20664 000031E5 5A                      	POP	DX			; Sector # of entry
 20665 000031E6 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20666                                  	; 22/09/2023
 20667                                  	;;mov	byte [ALLOWED],18h
 20668                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20669                                  	;XOR	AL,AL ; *		; Pre read
 20670                                  	;call	GETBUFFR		; Get sector back
 20671 000031EA E81126                  	call	GETBUFFER ; *		; Pre Read
 20672 000031ED 728D                    	JC	short NOTDIRPATHPOP2	; Screw up
 20673 000031EF C53E[E205]              	LDS	DI,[CURBUF]
 20674                                  	;or	byte [di+5],4
 20675 000031F3 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20676 000031F7 5B                      	POP	BX			; Pointer to start of entry
 20677 000031F8 01FB                    	ADD	BX,DI			; Corrected
 20678 000031FA C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20679                                  
 20680                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20681 000031FD 1E                      	PUSH	DS
 20682                                  
 20683                                  ;hkn; SS is DOSDATA
 20684                                  	;context DS
 20685 000031FE 16                      	push	ss
 20686 000031FF 1F                      	pop	ds
 20687                                  
 20688                                  	; MSDOS 6.0
 20689 00003200 E83BF4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20690                                  
 20691                                  ;	; MSDOS 3.3
 20692                                  ;_FastOpen_Delete:
 20693                                  ;	push	ax
 20694                                  ;	mov	si,[WFP_START]
 20695                                  ;	mov	bx,FastTable
 20696                                  ;	;mov	al,3  ; FONC_delete
 20697                                  ;	mov	al,FONC_delete
 20698                                  ;	call	far [BX+2]  ; FastTable+2
 20699                                  ;	pop	ax
 20700                                  
 20701 00003203 1F                      	POP	DS
 20702                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20703                                  
 20704 00003204 E9BDFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20705                                  
 20706                                  ;============================================================================
 20707                                  ; DISK.ASM, MSDOS 6.0, 1991
 20708                                  ;============================================================================
 20709                                  ; 23/07/2018 - Retro DOS v3.0 
 20710                                  ; 04/05/2019 - Retro DOS v4.0
 20711                                  
 20712                                  ;	TITLE	DISK - Disk utility routines
 20713                                  ;	NAME	Disk
 20714                                  
 20715                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20716                                  ;
 20717                                  ;	SWAPCON
 20718                                  ;	SWAPBACK
 20719                                  ;	DOS_READ
 20720                                  ;	DOS_WRITE
 20721                                  ;	get_io_sft
 20722                                  ;	DirRead
 20723                                  ;	FIRSTCLUSTER
 20724                                  ;	SET_BUF_AS_DIR
 20725                                  ;	FATSecRd
 20726                                  ;	DREAD
 20727                                  ;	CHECK_WRITE_LOCK
 20728                                  ;	CHECK_READ_LOCK
 20729                                  ;
 20730                                  ;	Revision history:
 20731                                  ;
 20732                                  ;		A000   version 4.00  Jan. 1988
 20733                                  ;
 20734                                  ;----------------------------------------------------------------------------
 20735                                  ;
 20736                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20737                                  ;		error happens, DOS retries the entire block assuming that
 20738                                  ;		zero characters were transferred. Modified the code to take
 20739                                  ;		into account the number of characters transfered before
 20740                                  ;		retrying the operation.
 20741                                  ;
 20742                                  ;----------------------------------------------------------------------------
 20743                                  ;
 20744                                  
 20745                                  ;Installed = TRUE
 20746                                  
 20747                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20748                                  
 20749                                  ; **** Drivers for file input from devices ****
 20750                                  ;----------------------------------------------------------------------------
 20751                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20752                                  ;   of handles 0 and 1
 20753                                  ;
 20754                                  ;   Inputs:	DS is DOSDATA
 20755                                  ;   Outputs:	CONSWAP is set to false.
 20756                                  ;   Registers modified: none
 20757                                  ;----------------------------------------------------------------------------
 20758                                  
 20759                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20760                                  
 20761                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20762                                  ; 04/05/2019 - Retro DOS v4.0
 20763                                  
 20764                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20765                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20766                                  
 20767                                  SWAPBACK:
 20768 00003207 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20769 0000320C C3                      	retn
 20770                                  
 20771                                  ;----------------------------------------------------------------------------
 20772                                  ;
 20773                                  ; Procedure Name : SWAPCON
 20774                                  ;
 20775                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20776                                  ;
 20777                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20778                                  ;		DS is DOSDATA
 20779                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20780                                  ;   Registers modified: none
 20781                                  ;--------------------------------------------------------------------------
 20782                                  
 20783                                  SWAPCON:
 20784                                  	; MSDOS 3.3
 20785                                  	;push	es
 20786                                  	;push	di
 20787                                  	;mov	byte [CONSWAP],1
 20788                                  	;les	di,[THISSFT]
 20789                                  	;mov	word [CONSFT],di
 20790                                  	;mov	word [CONSFT+2],es
 20791                                  	;pop	di
 20792                                  	;pop	es
 20793                                  	;retn
 20794                                  
 20795                                  	; MSDOS 6.0
 20796 0000320D C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20797 00003212 50                      	push	ax
 20798 00003213 A1[9E05]                	mov	ax,[THISSFT]
 20799 00003216 A3[E605]                	mov	[CONSFT],ax
 20800 00003219 A1[A005]                	mov	ax,[THISSFT+2]
 20801 0000321C A3[E805]                	mov	[CONSFT+2],ax
 20802 0000321F 58                      	pop	ax
 20803 00003220 C3                      	retn
 20804                                  
 20805                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20806                                  ; 04/05/2019 - Retro DOS v4.0
 20807                                  
 20808                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20809                                  ;-----------------------------------------------------------------------------
 20810                                  ;
 20811                                  ; Inputs:
 20812                                  ;	ThisSFT set to the SFT for the file being used
 20813                                  ;	[DMAADD] contains transfer address
 20814                                  ;	CX = No. of bytes to read
 20815                                  ;	DS = DOSDATA
 20816                                  ; Function:
 20817                                  ;	Perform read operation
 20818                                  ; Outputs:
 20819                                  ;    Carry clear
 20820                                  ;	SFT Position and cluster pointers updated
 20821                                  ;	CX = No. of bytes read
 20822                                  ;	ES:DI point to SFT
 20823                                  ;    Carry set
 20824                                  ;	AX is error code
 20825                                  ;	CX = 0
 20826                                  ;	ES:DI point to SFT
 20827                                  ; DS preserved, all other registers destroyed
 20828                                  ;
 20829                                  ;-----------------------------------------------------------------------------
 20830                                  
 20831                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20832                                  
 20833                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20834                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20835                                  
 20836                                  DOS_READ:
 20837 00003221 C43E[9E05]              	LES	DI,[THISSFT]
 20838                                  
 20839                                  ; Verify that the sft has been opened in a mode that allows reading.
 20840                                  
 20841                                  	;mov	al,[es:di+2]
 20842 00003225 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20843                                  	;and	al,0Fh
 20844 00003229 240F                    	AND	AL,access_mask
 20845                                  	;cmp	al,1
 20846 0000322B 3C01                    	CMP	AL,open_for_write
 20847 0000322D 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20848 0000322F E9CD05                  	jmp	SET_ACC_ERR
 20849                                  
 20850                                  READ_NO_MODE:
 20851 00003232 E8B204                  	call	SETUP
 20852 00003235 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20853 00003237 E808E0                  	call	IsSFTNet
 20854 0000323A 7408                    	JZ	short LOCAL_READ
 20855                                  
 20856                                  ;IF NOT Installed
 20857                                  ;	transfer NET_READ
 20858                                  ;ELSE
 20859                                  	;mov	ax,1108h
 20860 0000323C B80811                  	MOV	AX,(MultNET<<8)|8
 20861 0000323F CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20862                                  			; ES:DI -> SFT
 20863                                  			; SFT DPB field -> DPB of drive containing file
 20864                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20865                                  			; Return: CF set on error, CX = bytes read
 20866 00003241 C3                      	retn
 20867                                  ;ENDIF
 20868                                  
 20869                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20870                                  ; except return immediately.
 20871                                  
 20872                                  NoIORet:
 20873 00003242 F8                      	CLC
 20874 00003243 C3                      	retn
 20875                                  
 20876                                  LOCAL_READ:
 20877                                  	;test	word [es:di+5],80h
 20878                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20879 00003244 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20880 00003249 750E                    	JNZ	short READDEV
 20881                                  
 20882                                  	;mov	byte [EXTERR_LOCUS],2
 20883 0000324B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20884 00003250 E88FE0                  	call	ECritDisk
 20885 00003253 E86C05                  	call	DISKREAD
 20886                                  
 20887                                  critexit:
 20888                                  	;call	LCritDisk
 20889                                  	;retn
 20890                                  	; 16/12/2022
 20891 00003256 E9A4E0                  	jmp	LCritDisk
 20892                                  
 20893                                  ; We are reading from a device. Examine the status of the device to see if we
 20894                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20895                                  ; null device, we can safely indicate no transfer.
 20896                                  
 20897                                  READDEV:
 20898                                  	;mov	byte [EXTERR_LOCUS],4
 20899 00003259 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20900                                  	;mov	bl,[es:di+5]
 20901 0000325E 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20902 00003262 C43E[2C03]              	LES	DI,[DMAADD]
 20903                                  	;test	bl,40h
 20904 00003266 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20905 00003269 7407                    	JZ	short ENDRDDEVJ3
 20906                                  	;test	bl,4
 20907 0000326B F6C304                  	test	BL,devid_device_null	; NUL device?
 20908 0000326E 7405                    	JZ	short TESTRAW 		; NO
 20909 00003270 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20910                                  ENDRDDEVJ3:
 20911                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20912                                  	;JMP	short ENDRDDEVJ2
 20913                                  	; 16/12/2022
 20914 00003272 E93E01                  	jmp	ENDRDDEV ; 04/05/2019
 20915                                  
 20916                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20917                                  ; bizarre std_con_string_input.
 20918                                  
 20919                                  TESTRAW:
 20920                                  	;test	bl,20h
 20921 00003275 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20922 00003278 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20923                                  	;test	bl,1
 20924 0000327A F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20925 0000327D 7457                    	JZ	short NOTRDCON
 20926 0000327F E96601                  	JMP	READCON
 20927                                  
 20928                                  DVRDRAW:
 20929 00003282 06                      	PUSH	ES
 20930 00003283 1F                      	POP	DS			; Xaddr to DS:DI
 20931                                  
 20932                                  	; 04/05/2019 - Retro DOS v4.0
 20933                                  
 20934                                  	; MSDOS 6.0
 20935                                  ;SR;
 20936                                  ;Check for win386 presence -- if present, do polled read of characters
 20937                                  
 20938 00003284 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20939 0000328A 7408                    	jz	short ReadRawRetry	;not present
 20940 0000328C F6C301                  	test	bl,devid_device_con_in	;is it console device
 20941 0000328F 7403                    	jz	short ReadRawRetry	;no, do normal read
 20942 00003291 E9A700                  	jmp	do_polling		;yes, do win386 polling loop
 20943                                  
 20944                                  ReadRawRetry:
 20945                                  
 20946                                  ; 07/02/2024
 20947                                  %if 0
 20948                                  	MOV	BX,DI			; DS:BX transfer addr
 20949                                  	; 06/02/2024 ; *
 20950                                  	;XOR	AX,AX			; Media Byte, unit = 0
 20951                                  	;;MOV	DX,AX			; Start at 0
 20952                                  	;; 06/02/2024
 20953                                  	;cwd
 20954                                  	;call	SETREAD
 20955                                  	; 06/02/2024 ; *
 20956                                  	call	SETREAD_X
 20957                                  %else
 20958 00003294 E81713                  	call	SETREAD_XJ
 20959                                  %endif
 20960                                  
 20961                                  ;hkn; SS override
 20962 00003297 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20963 0000329C E89912                  	call	DEVIOCALL
 20964 0000329F 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20965 000032A1 B486                    	MOV	AH,86H			; Read error
 20966                                  
 20967                                  ;hkn; SS override
 20968 000032A3 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20969                                  	; MSDOS 3.3
 20970                                  	;test	di,8000h
 20971                                  	;jz	short CRDROK
 20972                                  	; MSDOS 6.0
 20973 000032A8 09FF                    	or	di,di
 20974 000032AA 7920                    	jns	short CRDROK		; no errors
 20975                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20976 000032AC E8E11E                  	call	CHARHARD
 20977                                  
 20978                                  ; 06/02/2024 - Retrro DOS v5.0
 20979                                  %if 0
 20980                                  	MOV	DI,DX			; DS:DI is Xaddr
 20981                                  	; 04/05/2019
 20982                                  	; MSDOS 6.0
 20983                                  	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20984                                  	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20985                                  %else
 20986 000032AF 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 20987 000032B4 29F9                    	sub	cx,di			; update transfer count
 20988 000032B6 01D7                    	add	di,dx			; update pointer
 20989                                  %endif
 20990                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20991 000032B8 08C0                    	OR	AL,AL
 20992 000032BA 7410                    	JZ	short CRDROK		; Ignore
 20993 000032BC 3C03                    	CMP	AL,3
 20994 000032BE 7403                    	JZ	short CRDFERR 		; fail.
 20995 000032C0 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20996 000032C1 EBD1                    	JMP	short ReadRawRetry	; Retry
 20997                                  
 20998                                  ; We have encountered a device-driver error. We have informed the user of it
 20999                                  ; and he has said for us to fail the system call.
 21000                                  
 21001                                  CRDFERR:
 21002 000032C3 5F                      	POP	DI			; Clean stack
 21003                                  DEVIOFERR:
 21004                                  
 21005                                  ;hkn; SS override
 21006 000032C4 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 21007 000032C9 E93105                  	jmp	SET_ACC_ERR_DS
 21008                                  
 21009                                  CRDROK:
 21010 000032CC 5F                      	POP	DI			; Chuck saved seg of Xaddr
 21011 000032CD 89D7                    	MOV	DI,DX
 21012                                  
 21013                                  ;hkn; SS override
 21014 000032CF 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 21015                                  	;JMP	SHORT ENDRDDEVJ3
 21016                                  	; 16/12/2022
 21017 000032D4 EB63                    	jmp	short ENDRDDEVJ2
 21018                                  
 21019                                  ; We are going to do a cooked read on some character device. There is a
 21020                                  ; problem here, what does the data look like? Is it a terminal device, line
 21021                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 21022                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 21023                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 21024                                  ; included in data). this "simulates" the way con works in cooked mode
 21025                                  ; reading one line at a time. With file data, however, the lines will look
 21026                                  ; like, LF line CR. This is a little weird.
 21027                                  
 21028                                  NOTRDCON:
 21029                                  	;MOV	AX,ES
 21030                                  	;MOV	DS,AX
 21031                                  	; 07/02/2024
 21032 000032D6 06                      	push	es
 21033 000032D7 1F                      	pop	ds
 21034                                  
 21035                                  ; 07/02/2024
 21036                                  %if 0
 21037                                  	MOV	BX,DI
 21038                                  	; 06/02/2024 ; *
 21039                                  	;;XOR	DX,DX
 21040                                  	;;MOV	AX,DX
 21041                                  	;; 06/02/2024
 21042                                  	;xor	ax,ax
 21043                                  	;cwd
 21044                                  	PUSH	CX
 21045                                  	MOV	CX,1
 21046                                  	;call	SETREAD
 21047                                  	; 06/02/2024 ; *
 21048                                  	call	SETREAD_X
 21049                                  	POP	CX
 21050                                  %else
 21051 000032D8 51                      	push	cx
 21052 000032D9 B90100                  	mov	cx,1
 21053 000032DC E8CF12                  	call	SETREAD_XJ
 21054 000032DF 59                      	pop	cx
 21055                                  %endif
 21056                                  
 21057                                  ;hkn; SS override
 21058 000032E0 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21059                                  	;lds	si,[si+7]
 21060 000032E5 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21061                                  DVRDLP:
 21062 000032E8 E88A1C                  	call	DSKSTATCHK
 21063 000032EB E84D12                  	call	DEVIOCALL2
 21064 000032EE 57                      	PUSH	DI			; Save "count" done
 21065 000032EF B486                    	MOV	AH,86H
 21066                                  
 21067                                  ;hkn; SS override
 21068 000032F1 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21069                                  	
 21070                                  	; MSDOS 3.3
 21071                                  	;test	di,8000h
 21072                                  	;jz	short CRDOK
 21073                                  	; MSDOS 6.0
 21074 000032F6 09FF                    	or	di,di
 21075 000032F8 7917                    	jns	short CRDOK
 21076                                  	
 21077 000032FA E8931E                  	call	CHARHARD
 21078 000032FD 5F                      	POP	DI
 21079                                  
 21080                                  ;hkn; SS override
 21081 000032FE 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21082 00003305 3C01                    	CMP	AL,1
 21083 00003307 74DF                    	JZ	short DVRDLP		; Retry
 21084 00003309 3C03                    	CMP	AL,3
 21085 0000330B 74B7                    	JZ	short DEVIOFERR		; FAIL
 21086 0000330D 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 21087 0000330F EB12                    	JMP	SHORT DVRDIGN
 21088                                  
 21089                                  CRDOK:
 21090 00003311 5F                      	POP	DI
 21091                                  
 21092                                  ;hkn; SS override
 21093 00003312 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 21094                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21095 00003318 751F                    	JNZ	short ENDRDDEVJ2
 21096                                  	; 16/12/2022
 21097                                  	;jnz	short ENDRDDEV ; 24/07/2019
 21098                                  
 21099 0000331A 1E                      	PUSH	DS
 21100                                  
 21101                                  ;hkn; SS override
 21102 0000331B 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21103 00003320 8A05                    	MOV	AL,[DI]			; Get the character we just read
 21104 00003322 1F                      	POP	DS
 21105                                  DVRDIGN:
 21106                                  
 21107                                  ;hkn; SS override
 21108 00003323 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 21109 00003328 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21110 0000332F 47                      	INC	DI			; Next character
 21111 00003330 3C1A                    	CMP	AL,1Ah			; ^Z?
 21112                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21113 00003332 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 21114                                  	; 16/12/2022
 21115                                  	;jz	short ENDRDDEV ; 24/07/2019	
 21116 00003334 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 21117 00003336 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 21118 00003338 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 21119                                  					;  AX=FFFF which is not likely
 21120                                  ENDRDDEVJ2:
 21121                                  	; 16/12/2022
 21122                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 21123                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21124 00003339 EB78                    	jmp	ENDRDDEV
 21125                                  
 21126                                  	; 04/05/2019
 21127                                  
 21128                                  	; MSDOS 6.0
 21129                                  ;SR;
 21130                                  ;Polling code for raw read on CON when WIN386 is present
 21131                                  ;
 21132                                  ;At this point -- ds:di is transfer address
 21133                                  ;		  cx is count
 21134                                  
 21135                                  do_polling:
 21136                                  
 21137                                  ; 07/02/2024
 21138                                  %if 0
 21139                                  	mov	bx,di			;ds:bx is Xfer address
 21140                                  	; 06/02/2024 ; *
 21141                                  	;xor	ax,ax
 21142                                  	;;mov	dx,ax
 21143                                  	;; 06/02/2024
 21144                                  	;cwd
 21145                                  	;call	SETREAD			;prepare device packet
 21146                                  	; 06/02/2024 ; *
 21147                                  	call	SETREAD_X
 21148                                  %else
 21149 0000333B E87012                  	call	SETREAD_XJ
 21150                                  %endif
 21151                                  
 21152                                  do_io:
 21153                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21154                                  
 21155 0000333E 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21156 00003343 1E                      	push	ds
 21157 00003344 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21158 00003349 E8EC11                  	call	DEVIOCALL		;call device driver
 21159 0000334C 1F                      	pop	ds
 21160                                  	
 21161                                  	;test	word [es:bx+3],8000h
 21162                                  	; 16/12/2022
 21163                                  	;test	byte [es:bx+4],80h
 21164 0000334D 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21165                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21166 00003352 7413                    	jz	short check_busy	;no
 21167                                  
 21168 00003354 1E                      	push	ds
 21169 00003355 89FA                    	mov	dx,di
 21170                                  
 21171                                  invoke_charhard:	; 07/02/2024
 21172                                  	;invoke charhard		;invoke int 24h handler
 21173 00003357 E8361E                  	call	CHARHARD
 21174 0000335A 89D7                    	mov	di,dx
 21175 0000335C 08C0                    	or	al,al
 21176 0000335E 744D                    	jz	short pop_done_read	;ignore by user, assume read done
 21177 00003360 3C03                    	cmp	al,3
 21178 00003362 7438                    	jz	short devrderr		;user asked to fail
 21179 00003364 1F                      	pop	ds
 21180 00003365 EBD7                    	jmp	short do_io		;user asked to retry
 21181                                  
 21182                                  check_busy:
 21183                                  	;test	word [es:bx+3],200h
 21184                                  	; 16/12/2022
 21185 00003367 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21186                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21187 0000336C 7537                    	jnz	short no_char		;yes, no character available
 21188                                  
 21189                                  ;Character is available. Read in 1 character at a time until all characters
 21190                                  ;are read in or no character is available
 21191                                  
 21192 0000336E 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21193 00003373 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21194 00003379 1E                      	push	ds
 21195 0000337A 36C536[9E05]            	lds	si,[ss:THISSFT]
 21196 0000337F E8B611                  	call	DEVIOCALL
 21197                                  
 21198 00003382 89FA                    	mov	dx,di
 21199 00003384 B486                    	mov	ah,86h
 21200                                  	;mov	di,[es:bx+3]
 21201 00003386 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21202 0000338A F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21203                                  	;jz	short next_char		;no,read next character
 21204                                  	; 07/02/2024
 21205 0000338E 75C7                    	jnz	short invoke_charhard
 21206                                  
 21207                                  ; 07/02/2024
 21208                                  %if 0
 21209                                  	;invoke	charhard		;invoke int 24h handler
 21210                                  	call	CHARHARD
 21211                                  	mov	di,dx			;restore di
 21212                                  	or	al,al			;
 21213                                  	jz	short pop_done_read	;ignore by user,assume read is done
 21214                                  	cmp	al,3
 21215                                  	jz	short devrderr		;user issued a 'fail',indicate error
 21216                                  	pop	ds
 21217                                  	jmp	short do_io		;user issued a retry
 21218                                  %endif
 21219                                  
 21220                                  next_char:
 21221 00003390 1F                      	pop	ds
 21222 00003391 89D7                    	mov	di,dx
 21223 00003393 49                      	dec	cx			;decrement count
 21224                                  	;jcxz	done_read		;all characters read in
 21225                                  	; 07/02/2024
 21226 00003394 7418                    	jz	short done_read
 21227 00003396 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21228 0000339A EBA2                    	jmp	short do_io		;read next character in
 21229                                  
 21230                                  devrderr:
 21231 0000339C 5F                      	pop	di			;discard segment address
 21232 0000339D 36C43E[9E05]            	les	di,[ss:THISSFT]
 21233                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21234 000033A2 E95804                  	jmp     SET_ACC_ERR_DS
 21235                                  
 21236                                  no_char:
 21237                                  ;Since no character is available, we let win386 switch the VM out
 21238                                  
 21239 000033A5 50                      	push	ax
 21240 000033A6 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21241 000033A8 CD2A                    	int	2Ah			;indicate idle to WIN386
 21242                                  
 21243                                  ;When control returns from WIN386, we continue the raw read
 21244                                  
 21245 000033AA 58                      	pop	ax
 21246 000033AB EB91                    	jmp	short do_io	; 27/06/2024
 21247                                  
 21248                                  pop_done_read:
 21249 000033AD 1F                      	pop	ds
 21250                                  done_read:
 21251 000033AE 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21252                                  
 21253                                  	; 16/12/2022
 21254                                  
 21255                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21256                                  	;jmp	ENDRDDEV ; 04/05/2019
 21257                                  
 21258                                  	; 04/05/2019 - Retro DOS v4.0
 21259                                  ENDRDDEV:
 21260 000033B3 16                      	push	ss
 21261 000033B4 1F                      	pop	ds
 21262 000033B5 EB1F                    	jmp	short endrddev1
 21263                                  
 21264                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21265                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21266                                  
 21267                                  TRANBUF:
 21268 000033B7 AC                      	LODSB
 21269 000033B8 AA                      	STOSB
 21270 000033B9 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21271 000033BB 7503                    	JNZ	short NORMCH
 21272 000033BD C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21273                                  NORMCH:
 21274 000033C0 3C0A                    	CMP	AL,c_LF ; 0Ah
 21275 000033C2 E0F3                    	LOOPNZ	TRANBUF
 21276 000033C4 7507                    	JNZ	short ENDRDCON
 21277 000033C6 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21278 000033C8 E86AE2                  	call	OUTT		; Transmit linefeed
 21279 000033CB 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21280                                  ENDRDCON:
 21281                                  ;hkn; SS is DOSDATA
 21282 000033CD 16                      	push	ss
 21283 000033CE 1F                      	pop	ds
 21284 000033CF E835FE                  	CALL	SWAPBACK
 21285 000033D2 8936[2200]              	MOV	[CONTPOS],SI
 21286                                  
 21287                                  	; 16/12/2022
 21288                                  ;ENDRDDEV:
 21289                                  ;;hkn; SS is DOSDATA
 21290                                  ;	push	ss
 21291                                  ;	pop	ds
 21292                                  endrddev1:	; 04/05/2019
 21293 000033D6 893E[B805]              	MOV	[NEXTADD],DI
 21294 000033DA 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21295 000033DC C43E[9E05]              	LES	DI,[THISSFT]
 21296                                  	;and	byte [es:di+5],0BFh
 21297 000033E0 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21298                                  				; Mark as no more data available
 21299                                  SETSFTC:
 21300                                  	; 31/07/2019
 21301                                  	;call	SETSFT
 21302                                  	;retn
 21303 000033E5 E9A904                  	jmp	SETSFT
 21304                                  
 21305                                  ; 16/12/2022
 21306                                  %if 0
 21307                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21308                                  ENDRDDEV:
 21309                                  ;hkn; SS is DOSDATA
 21310                                  	push	ss
 21311                                  	pop	ds
 21312                                  	MOV	[NEXTADD],DI
 21313                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21314                                  	LES	DI,[THISSFT]
 21315                                  	;and	byte [es:di+5],0BFh
 21316                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21317                                  				; Mark as no more data available
 21318                                  SETSFTC:
 21319                                  	;call	SETSFT
 21320                                  	;retn
 21321                                  	jmp	SETSFT	
 21322                                  %endif
 21323                                  
 21324                                  READCON:
 21325 000033E8 E822FE                  	CALL	SWAPCON
 21326 000033EB 8B36[2200]              	MOV	SI,[CONTPOS]
 21327 000033EF 09F6                    	OR	SI,SI
 21328 000033F1 75C4                    	JNZ	short TRANBUF
 21329 000033F3 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21330 000033F8 7406                    	JZ	short GETBUF
 21331 000033FA C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21332                                  GETBUF:
 21333 00003400 51                      	PUSH	CX
 21334 00003401 06                      	PUSH	ES
 21335 00003402 57                      	PUSH	DI
 21336                                  
 21337                                  ;hkn; CONBUF is in DOSDATA
 21338 00003403 BA[7B02]                	MOV	DX,CONBUF
 21339                                  
 21340 00003406 E8A7DF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21341 00003409 5F                      	POP	DI
 21342 0000340A 07                      	POP	ES
 21343 0000340B 59                      	POP	CX
 21344                                  
 21345                                  ;hkn; CONBUF is in DOSDATA
 21346 0000340C BE[7D02]                	MOV	SI,CONBUF+2
 21347                                  
 21348 0000340F 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21349 00003412 75A3                    	JNZ	short TRANBUF
 21350 00003414 B01A                    	MOV	AL,1AH
 21351 00003416 AA                      	STOSB
 21352 00003417 4F                      	DEC	DI
 21353 00003418 B00A                    	MOV	AL,c_LF
 21354 0000341A E818E2                  	call	OUTT		; Send linefeed
 21355 0000341D 31F6                    	XOR	SI,SI
 21356 0000341F EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21357                                  
 21358                                  ; 24/07/2018 - Retro DOS v3.0
 21359                                  
 21360                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21361                                  ;---------------------------------------------------------------------------
 21362                                  ;
 21363                                  ; Procedure Name : DOS_WRITE
 21364                                  ;
 21365                                  ; Inputs:
 21366                                  ;	ThisSFT set to the SFT for the file being used
 21367                                  ;	[DMAADD] contains transfer address
 21368                                  ;	CX = No. of bytes to write
 21369                                  ; Function:
 21370                                  ;	Perform write operation
 21371                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21372                                  ;		to current sf_position
 21373                                  ; Outputs:
 21374                                  ;    Carry clear
 21375                                  ;	SFT Position and cluster pointers updated
 21376                                  ;	CX = No. of bytes written
 21377                                  ;	ES:DI point to SFT
 21378                                  ;    Carry set
 21379                                  ;	AX is error code
 21380                                  ;	CX = 0
 21381                                  ;	ES:DI point to SFT
 21382                                  ; DS preserved, all other registers destroyed
 21383                                  ;---------------------------------------------------------------------------
 21384                                  
 21385                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21386                                  ;hkn; point to DOSDATA.
 21387                                  
 21388                                  ; 04/05/2019 - Retro DOS v4.0
 21389                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21390                                  
 21391                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21392                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21393                                  
 21394                                  DOS_WRITE:
 21395 00003421 C43E[9E05]              	LES	DI,[THISSFT]
 21396                                  	;mov	al,[ES:DI+2]
 21397 00003425 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21398                                  	;and	al,0Fh
 21399 00003429 240F                    	AND	AL,access_mask
 21400                                  	;cmp	al,0
 21401 0000342B 3C00                    	CMP	AL,open_for_read
 21402 0000342D 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21403                                  BadMode:
 21404 0000342F E9CD03                  	jmp	SET_ACC_ERR
 21405                                  
 21406                                  ; NOTE: The following check for writting to a Read Only File is performed
 21407                                  ;	    ONLY on FCBs!!!!
 21408                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21409                                  ;	    of a read only file which can then be written to.
 21410                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21411                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21412                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21413                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21414                                  ;	    to a read-only file.
 21415                                  
 21416                                  Check_FCB_RO:
 21417                                  	;;test	word [es:di+2],8000h
 21418                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21419                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21420                                  	
 21421                                  	;test	byte [es:di+3],80h
 21422 00003432 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21423 00003437 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21424                                  
 21425                                  	;test	byte [es:di+4],1
 21426 00003439 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21427 0000343E 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21428                                  WRITE_NO_MODE:
 21429 00003440 E8A402                  	call	SETUP
 21430 00003443 E8FCDD                  	call	IsSFTNet
 21431 00003446 7406                    	JZ	short LOCAL_WRITE
 21432                                  
 21433                                  ;IF NOT Installed
 21434                                  ;	transfer NET_WRITE
 21435                                  ;ELSE
 21436                                  	;mov	ax,1109h
 21437 00003448 B80911                  	MOV	AX,(MultNET<<8)|9
 21438 0000344B CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21439                                  			; ES:DI -> SFT
 21440                                  			; SFT DPB field -> DPB of drive containing file
 21441                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21442                                  			; Return: CF set on error, CX = bytes written
 21443 0000344D C3                      	retn
 21444                                  ;ENDIF
 21445                                  
 21446                                  LOCAL_WRITE:
 21447                                  	;;test	word [es:di+5],80h
 21448                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21449                                  	;jnz	short WRTDEV
 21450                                  
 21451                                  	;test	byte [es:di+5],80h
 21452 0000344E 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21453 00003453 756D                    	jnz	short WRTDEV
 21454                                  
 21455                                  	;mov	byte [EXTERR_LOCUS],2
 21456 00003455 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21457 0000345A E885DE                  	call	ECritDisk
 21458                                  
 21459 0000345D E8E104                  	call	DISKWRITE
 21460                                  
 21461                                  	; 04/05/2019 - Retro DOS v4.0
 21462                                  
 21463                                  	; MSDOS 6.0
 21464                                  ; Extended Open
 21465 00003460 7210                    	JC	short nocommit
 21466                                  	
 21467 00003462 C43E[9E05]              	LES	DI,[THISSFT]
 21468                                  	
 21469                                  	;;test	word [ES:DI+2],4000h
 21470                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21471                                  	;JZ	short nocommit
 21472                                  	
 21473                                  	;test	byte [ES:DI+3],40h
 21474 00003466 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21475 0000346B 7405                    	JZ	short nocommit
 21476                                  	
 21477 0000346D 51                      	PUSH	CX
 21478 0000346E E860FB                  	call	DOS_COMMIT
 21479 00003471 59                      	POP	CX
 21480                                  nocommit:
 21481                                  ; Extended Open
 21482                                  	;call	LCritDisk
 21483                                  	;retn
 21484                                  	; 18/12/2022
 21485 00003472 E988DE                  	jmp	LCritDisk
 21486                                  
 21487                                  DVWRTRAW:
 21488 00003475 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21489 00003477 E87511                  	call	SETWRITE
 21490 0000347A 1E                      	PUSH	DS			; Save seg of transfer
 21491                                  
 21492                                  ;hkn; SS override
 21493 0000347B 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21494 00003480 E8B510                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21495                                  
 21496 00003483 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21497 00003485 B487                    	MOV	AH,87H
 21498                                  
 21499                                  ;hkn; SS override
 21500 00003487 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21501                                  
 21502                                  	; MSDOS 3.3
 21503                                  	;test	di,8000h
 21504                                  	;jz	short CWRTROK
 21505                                  
 21506                                  	; MSDOS 6.0
 21507 0000348C 09FF                    	or	di,di
 21508 0000348E 791F                    	jns	short CWRTROK
 21509                                  	
 21510                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21511 00003490 E8FD1C                  	call	CHARHARD
 21512                                  
 21513                                  	; 04/05/2019  - Retro DOS v4.0
 21514                                  
 21515                                  	; MSDOS 6.0
 21516                                  	;sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21517                                  	; 08/02/2024
 21518 00003493 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 21519 00003498 29F9                    	sub	cx,di
 21520 0000349A 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21521                                  	;add	bx,[ss:CALLSCNT]	;				M065
 21522 0000349C 01FB                    	add	bx,di
 21523 0000349E 89DF                    	mov	di,bx			;				M065
 21524                                  	
 21525                                  	; MSDOS 3.3
 21526                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21527                                  
 21528                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21529 000034A0 08C0                    	OR	AL,AL
 21530 000034A2 740B                    	JZ	short CWRTROK 		; Ignore
 21531 000034A4 3C03                    	CMP	AL,3
 21532 000034A6 7403                    	JZ	short CWRFERR
 21533 000034A8 1F                      	POP	DS			; Recover saved seg of transfer
 21534 000034A9 EBCA                    	JMP	short DVWRTRAW		; Try again
 21535                                  CWRFERR:
 21536 000034AB 58                      	POP	AX			; Chuck saved seg of transfer
 21537 000034AC E914FE                  	JMP	CRDFERR 		; Will pop one more stack element
 21538                                  CWRTROK:
 21539 000034AF 58                      	POP	AX			; Chuck saved seg of transfer
 21540 000034B0 1F                      	POP	DS
 21541 000034B1 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21542                                  ENDWRDEV:
 21543 000034B4 C43E[9E05]              	LES	DI,[THISSFT]
 21544 000034B8 89C1                    	MOV	CX,AX
 21545                                  	;call	ADDREC
 21546                                  	;retn
 21547                                  	; 16/12/2022
 21548                                  	; 10/06/2019
 21549 000034BA E9F503                  	jmp	ADDREC
 21550                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21551                                  	;call	ADDREC
 21552                                  	;retn
 21553                                  	
 21554                                  WRTNUL:
 21555 000034BD 89CA                    	MOV	DX,CX			; Entire transfer done
 21556                                  WRTCOOKJ:
 21557 000034BF E98D00                  	JMP	WRTCOOKDONE
 21558                                  WRTDEV:
 21559                                  	;mov	byte [EXTERR_LOCUS],4
 21560 000034C2 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21561                                  	;or	byte [es:di+5],40h
 21562 000034C7 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21563                                  					; Reset EOF for input
 21564                                  	;mov	bl,[es:di+5]
 21565 000034CC 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21566 000034D0 31C0                    	XOR	AX,AX
 21567 000034D2 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21568 000034D4 1E                      	PUSH	DS
 21569 000034D5 88D8                    	MOV	AL,BL
 21570 000034D7 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21571 000034DB 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21572 000034DD 31D2                    	XOR	DX,DX			; Set starting point
 21573                                  	;test	al,20h
 21574 000034DF A820                    	test	AL,devid_device_raw	; Raw?
 21575                                  	;JZ	short TEST_DEV_CON
 21576                                  	;JMP	DVWRTRAW
 21577                                  	; 16/12/2022
 21578 000034E1 7592                    	jnz	short DVWRTRAW
 21579                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21580                                  	;JZ	short TEST_DEV_CON
 21581                                  	;JMP	short DVWRTRAW
 21582                                  
 21583                                  TEST_DEV_CON:
 21584                                  	;test	al,2
 21585 000034E3 A802                    	test	AL,devid_device_con_out ; Console output device?
 21586 000034E5 756E                    	jnz	short WRITECON
 21587                                  	;test	al,4
 21588 000034E7 A804                    	test	AL,devid_device_null
 21589 000034E9 75D2                    	JNZ	short WRTNUL
 21590 000034EB 89D0                    	MOV	AX,DX
 21591 000034ED 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21592 000034F0 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21593 000034F2 51                      	PUSH	CX
 21594 000034F3 B90100                  	MOV	CX,1
 21595 000034F6 E8F610                  	call	SETWRITE
 21596 000034F9 59                      	POP	CX
 21597                                  
 21598                                  ;hkn; SS override
 21599 000034FA 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21600                                  ;
 21601                                  ;SR; Removed X25 support from here
 21602                                  ;
 21603                                  	;lds	si,[si+7]
 21604 000034FF C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21605                                  DVWRTLP:
 21606 00003502 E8701A                  	call	DSKSTATCHK
 21607 00003505 E83310                  	call	DEVIOCALL2
 21608 00003508 57                      	PUSH	DI
 21609 00003509 B487                    	MOV	AH,87H
 21610                                  
 21611                                  ;hkn; SS override
 21612 0000350B 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21613                                  	
 21614                                  	; MSDOS 3.3
 21615                                  	;test	di,8000h
 21616                                  	;jz	short CWROK
 21617                                  
 21618                                  	; MSDOS 6.0
 21619 00003510 09FF                    	or	di,di
 21620 00003512 7916                    	jns	short CWROK
 21621                                  	
 21622                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21623 00003514 E8791C                  	call	CHARHARD
 21624 00003517 5F                      	POP	DI
 21625                                  
 21626                                  ;hkn; SS override
 21627 00003518 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21628 0000351F 3C01                    	CMP	AL,1
 21629 00003521 74DF                    	JZ	short DVWRTLP 	; Retry
 21630 00003523 08C0                    	OR	AL,AL
 21631 00003525 740C                    	JZ	short DVWRTIGN	; Ignore
 21632                                  	; 10/08/2018
 21633 00003527 E999FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21634                                  CWROK:
 21635 0000352A 5F                      	POP	DI
 21636                                  
 21637                                  ;hkn; SS override
 21638 0000352B 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21639 00003531 741C                    	JZ	short WRTCOOKDONE
 21640                                  DVWRTIGN:
 21641 00003533 42                      	INC	DX
 21642                                  
 21643                                  ;hkn; SS override for CALLXAD
 21644 00003534 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21645 00003539 47                      	INC	DI
 21646 0000353A 1E                      	PUSH	DS
 21647 0000353B 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21648 00003540 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21649 00003543 1F                      	POP	DS
 21650 00003544 7409                    	JZ	short WRTCOOKDONE
 21651                                  
 21652                                  ;hkn; SS override
 21653 00003546 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21654 0000354D E2B3                    	LOOP	DVWRTLP
 21655                                  WRTCOOKDONE:
 21656 0000354F 89D0                    	MOV	AX,DX
 21657 00003551 1F                      	POP	DS
 21658 00003552 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21659                                  
 21660                                  WRITECON:
 21661 00003555 1E                      	PUSH	DS
 21662                                  
 21663                                  ;hkn; SS is DOSDATA
 21664 00003556 16                      	push	ss
 21665 00003557 1F                      	pop	ds
 21666 00003558 E8B2FC                  	CALL	SWAPCON
 21667 0000355B 1F                      	POP	DS
 21668 0000355C 89DE                    	MOV	SI,BX
 21669 0000355E 51                      	PUSH	CX
 21670                                  WRCONLP:
 21671 0000355F AC                      	LODSB
 21672 00003560 3C1A                    	CMP	AL,1Ah		; ^Z?
 21673 00003562 7405                    	JZ	short CONEOF
 21674 00003564 E8CEE0                  	call	OUTT
 21675 00003567 E2F6                    	LOOP	WRCONLP
 21676                                  CONEOF:
 21677 00003569 58                      	POP	AX			; Count
 21678 0000356A 1F                      	POP	DS
 21679 0000356B 29C8                    	SUB	AX,CX			; Amount actually written
 21680 0000356D E897FC                  	CALL	SWAPBACK
 21681 00003570 E941FF                  	JMP	ENDWRDEV
 21682                                  
 21683                                  ;---------------------------------------------------------------------------
 21684                                  ;
 21685                                  ; Procedure Name : get_io_sft
 21686                                  ;
 21687                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21688                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21689                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21690                                  ;
 21691                                  ;---------------------------------------------------------------------------
 21692                                  
 21693                                  ; 04/05/2019 - Retro DOS v4.0
 21694                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21695                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21696                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21697                                  
 21698                                  GET_IO_SFT:
 21699                                  	;test	byte [SS:CONSWAP],0FFh
 21700 00003573 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21701 00003579 7512                    	JNZ	short GetRedir
 21702                                  GetNormal:
 21703 0000357B 16                      	push	ss
 21704 0000357C 1F                      	pop	ds
 21705 0000357D 06                      	PUSH	ES
 21706 0000357E 57                      	PUSH	DI
 21707 0000357F E8922F                  	call	SFFromHandle
 21708 00003582 7206                    	JC	short RET44P
 21709 00003584 8CC6                    	MOV	SI,ES
 21710 00003586 8EDE                    	MOV	DS,SI
 21711 00003588 89FE                    	MOV	SI,DI
 21712                                  RET44P:
 21713 0000358A 5F                      	POP	DI
 21714 0000358B 07                      	POP	ES
 21715 0000358C C3                      	retn
 21716                                  GetRedir:
 21717 0000358D 83FB01                  	CMP	BX,1
 21718 00003590 77E9                    	JA	short GetNormal
 21719 00003592 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21720 00003597 F8                      	CLC
 21721                                  get_io_sft_retn:
 21722 00003598 C3                      	retn
 21723                                  
 21724                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21725                                  ;---------------------------------------------------------------------------
 21726                                  ;
 21727                                  ; Procedure Name : DIRREAD
 21728                                  ;
 21729                                  ; Inputs:
 21730                                  ;	AX = Directory block number (relative to first block of directory)
 21731                                  ;	ES:BP = Base of drive parameters
 21732                                  ;	[DIRSEC] = First sector of first cluster of directory
 21733                                  ;	[CLUSNUM] = Next cluster
 21734                                  ;	[CLUSFAC] = Sectors/Cluster
 21735                                  ; Function:
 21736                                  ;	Read the directory block into [CURBUF].
 21737                                  ; Outputs:
 21738                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21739                                  ;	[SECCLUSPOS] Set
 21740                                  ;	ES:BP unchanged
 21741                                  ;	[CURBUF] Points to Buffer with dir sector
 21742                                  ;	Carry set if error (user said FAIL to I 24)
 21743                                  ; DS preserved, all other registers destroyed.
 21744                                  ;---------------------------------------------------------------------------
 21745                                  
 21746                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21747                                  
 21748                                  DIRREAD:
 21749                                  
 21750                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21751                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21752                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21753                                  ; by DIRStart = 0.
 21754                                  
 21755 00003599 31D2                    	XOR	DX,DX
 21756                                  	;CMP	word [DIRSTART],0
 21757                                  	; 21/09/2023
 21758 0000359B 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21759 0000359F 7503                    	jnz	short SubDir
 21760 000035A1 92                      	XCHG	AX,DX
 21761 000035A2 EB0C                    	JMP	short DoRead
 21762                                  
 21763                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21764                                  
 21765                                  SubDir:
 21766 000035A4 88C2                    	MOV	DL,AL
 21767                                  	;and	dl,[es:bp+4]
 21768 000035A6 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21769                                  
 21770                                  ;	(DX) = sector-in-cluster
 21771                                  
 21772                                  	;mov	cl,[es:bp+5]
 21773 000035AA 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21774 000035AE D3E8                    	SHR	AX,CL
 21775                                  
 21776                                  ;	(DX) = position in cluster
 21777                                  ;	(AX) = number of clusters to skip
 21778                                  
 21779                                  DoRead:
 21780 000035B0 8816[7305]              	MOV	[SECCLUSPOS],DL
 21781 000035B4 89C1                    	MOV	CX,AX
 21782 000035B6 88D4                    	MOV	AH,DL
 21783                                  
 21784                                  ;	(CX) = number of clusters to skip.
 21785                                  ;	(AH) = remainder
 21786                                  
 21787                                  	; 04/05/2019 - Retro DOS v4.0
 21788                                  	 
 21789                                  	; MSDOS 6.0
 21790                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21791                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21792                                  	;MOV	DX,[DIRSEC]
 21793                                  	;ADD	DL,AH
 21794                                  	;ADC	DH,0
 21795                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21796                                  	; 21/09/2023
 21797 000035B8 31DB                    	xor	bx,bx ; 0
 21798 000035BA 8B16[BE05]              	mov	dx,[DIRSEC]
 21799 000035BE 00E2                    	add	dl,ah
 21800 000035C0 10DE                    	adc	dh,bl ; 0
 21801 000035C2 131E[C005]              	adc	bx,[DIRSEC+2]
 21802 000035C6 891E[0706]              	mov	[HIGH_SECTOR],bx
 21803                                  
 21804 000035CA 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21805 000035CE 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21806 000035D2 E319                    	JCXZ	FIRSTCLUSTER
 21807                                  SKPCLLP:
 21808 000035D4 E8221E                  	call	UNPACK
 21809 000035D7 72BF                    	jc	short get_io_sft_retn
 21810 000035D9 87DF                    	XCHG	BX,DI
 21811 000035DB E8041E                  	call	IsEOF			; test for eof based on fat size
 21812 000035DE 7302                    	JAE	short HAVESKIPPED
 21813 000035E0 E2F2                    	LOOP	SKPCLLP
 21814                                  HAVESKIPPED:
 21815 000035E2 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21816 000035E6 89FA                    	MOV	DX,DI
 21817 000035E8 88E3                    	MOV	BL,AH
 21818 000035EA E8CA16                  	call	FIGREC
 21819                                  
 21820                                  	;entry	FIRSTCLUSTER
 21821                                  
 21822                                  FIRSTCLUSTER:
 21823                                  	; 22/09/2023
 21824                                  	;;mov	byte [ALLOWED],18h
 21825                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21826                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21827                                  	;call	GETBUFFR
 21828 000035ED E80E22                  	call	GETBUFFER ; *	; pre-read
 21829 000035F0 72A6                    	jc	short get_io_sft_retn
 21830                                  
 21831                                  	;entry	SET_BUF_AS_DIR
 21832                                  
 21833                                  SET_BUF_AS_DIR:
 21834                                  
 21835                                  ;	Set the type of CURBUF to be a directory sector.
 21836                                  ;	Only flags are modified.
 21837                                  
 21838 000035F2 1E                      	PUSH	DS
 21839 000035F3 56                      	PUSH	SI
 21840 000035F4 C536[E205]              	LDS	SI,[CURBUF]
 21841                                  	;or	byte [si+5],4
 21842 000035F8 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21843 000035FC 5E                      	POP	SI
 21844 000035FD 1F                      	POP	DS
 21845                                  dirread_retn:
 21846 000035FE C3                      	retn
 21847                                  
 21848                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21849                                  ;----------------------------------------------------------------------------
 21850                                  ;
 21851                                  ; Procedure Name : FATSECRD
 21852                                  ; Inputs:
 21853                                  ;	Same as DREAD
 21854                                  ;	DS:BX = Transfer address
 21855                                  ;	CX = Number of sectors
 21856                                  ;	DX = Absolute record number
 21857                                  ;	ES:BP = Base of drive parameters
 21858                                  ; Function:
 21859                                  ;	Calls BIOS to perform FAT read.
 21860                                  ; Outputs:
 21861                                  ;	Same as DREAD
 21862                                  ;---------------------------------------------------------------------------
 21863                                  
 21864                                  	; 04/05/2019 - Retro DOS v4.0
 21865                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21866                                  
 21867                                  FATSECRD:
 21868                                  ;hkn; SS override
 21869                                  	;mov	byte [ss:ALLOWED],18h
 21870 000035FF 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21871 00003605 89CF                    	MOV	DI,CX
 21872                                  	;mov	cl,[es:bp+8]
 21873 00003607 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21874                                  	; MSDOS 3.3
 21875                                  	;;mov	al,[es:bp+0Fh]
 21876                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE]
 21877                                  	;XOR	AH,AH
 21878                                  	; MSDOS 6.0
 21879                                  	;mov	ax,[es:bp+0Fh]
 21880 0000360B 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21881 0000360F 30ED                    	XOR	CH,CH
 21882 00003611 52                      	PUSH	DX
 21883                                  NXTFAT:
 21884                                  	; MSDOS 6.0
 21885                                  ;hkn; SS override
 21886 00003612 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21887 00003619 51                      	PUSH	CX			;32mb
 21888 0000361A 50                      	PUSH	AX
 21889 0000361B 89F9                    	MOV	CX,DI
 21890 0000361D E85B00                  	call	DSKREAD
 21891 00003620 58                      	POP	AX
 21892 00003621 59                      	POP	CX
 21893 00003622 7420                    	JZ	short RET41P		; Carry clear
 21894 00003624 01C2                    	ADD	DX,AX
 21895 00003626 E2EA                    	LOOP	NXTFAT
 21896 00003628 5A                      	POP	DX
 21897 00003629 89F9                    	MOV	CX,DI
 21898                                  
 21899                                  ; NOTE FALL THROUGH
 21900                                  
 21901                                  ;Break	<DREAD -- DO A DISK READ>
 21902                                  ;---------------------------------------------------------------------------
 21903                                  ;
 21904                                  ; Procedure Name : DREAD
 21905                                  ;
 21906                                  ; Inputs:
 21907                                  ;	DS:BX = Transfer address
 21908                                  ;	CX = Number of sectors
 21909                                  ;	DX = Absolute record number	      (LOW)
 21910                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21911                                  ;	ES:BP = Base of drive parameters
 21912                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21913                                  ; Function:
 21914                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21915                                  ;	errors, will call HARDERRRW for further action.
 21916                                  ; Outputs:
 21917                                  ;	Carry set if error (currently user FAILED to INT 24)
 21918                                  ; DS,ES:BP preserved. All other registers destroyed.
 21919                                  ;---------------------------------------------------------------------------
 21920                                  
 21921                                  	;entry	DREAD
 21922                                  DREAD:
 21923 0000362B E84D00                  	call	DSKREAD
 21924 0000362E 74CE                    	jz	short dirread_retn	; Carry clear
 21925                                  ;hkn; SS override
 21926 00003630 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21927 00003636 E89500                  	call	HARDERRRW
 21928 00003639 3C01                    	CMP	AL,1			; Check for retry
 21929 0000363B 74EE                    	JZ	short DREAD
 21930                                  
 21931                                  fail_ignore:	; 09/02/2024
 21932 0000363D 3C03                    	CMP	AL,3			; Check for FAIL
 21933 0000363F F8                      	CLC
 21934 00003640 7501                    	JNZ	short NO_CAR		; Ignore
 21935 00003642 F9                      	STC
 21936                                  NO_CAR:
 21937 00003643 C3                      	retn
 21938                                  RET41P: 
 21939 00003644 5A                      	POP	DX
 21940 00003645 C3                      	retn
 21941                                  
 21942                                  ; 24/07/2018 - Retro DOS v3.0
 21943                                  
 21944                                  ;Break	<CHECK_WRITE_LOCK>
 21945                                  ;---------------------------------------------------------------------------
 21946                                  ;
 21947                                  ; Procedure Name : CHECK_WRITE_LOCK
 21948                                  ;
 21949                                  ; Inputs:
 21950                                  ;	output of SETUP
 21951                                  ;	ES:DI -> SFT
 21952                                  ; Function:
 21953                                  ;	check write lock
 21954                                  ; Outputs:
 21955                                  ;	Carry set if error
 21956                                  ;	Carry clear if ok
 21957                                  ;
 21958                                  ;----------------------------------------------------------------------------
 21959                                  
 21960                                  	; 04/05/2019 - Retro DOS v4.0
 21961                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21962                                  
 21963                                  CHECK_WRITE_LOCK:
 21964                                  	; MSDOS 6.0
 21965                                  	;test	byte [es:di+4],8
 21966 00003646 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21967                                  	;JZ	short write_cont			     ;no
 21968                                  	;;call	SET_ACC_ERR_DS
 21969                                  	;;retn
 21970                                  	;;jnz	SET_ACC_ERR_DS
 21971                                  	; 19/08/2018
 21972                                  	;jz	short write_cont
 21973                                  	;jmp	SET_ACC_ERR_DS
 21974                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21975 0000364B 7403                    	JZ	short write_cont
 21976                                  	;call	SET_ACC_ERR_DS
 21977                                  	;retn
 21978                                  	; 16/12/2022
 21979 0000364D E9AD01                  	jmp	SET_ACC_ERR_DS
 21980                                  
 21981                                  write_cont:				;
 21982 00003650 51                      	PUSH	CX			;save reg
 21983 00003651 09C9                    	OR	CX,CX			;
 21984 00003653 7501                    	JNZ	short Not_Truncate	;
 21985 00003655 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21986                                  Not_Truncate:				;
 21987 00003656 B080                    	MOV	AL,80H			;check write access
 21988 00003658 E8FC3A                  	call	LOCK_CHECK		;check lock
 21989 0000365B 59                      	POP	CX			;restore reg
 21990 0000365C 7305                    	JNC	short WRITE_OK		;lock ok
 21991 0000365E E85A01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21992 00003661 73ED                    	JNC	short write_cont	;retry
 21993                                  WRITE_OK:				;
 21994 00003663 C3                      	retn				;
 21995                                  
 21996                                  ;Break	<CHECK_READ_LOCK>
 21997                                  ;---------------------------------------------------------------------------
 21998                                  ;
 21999                                  ; Procedure Name : CHECK_READ_LOC
 22000                                  ;
 22001                                  ; Inputs:
 22002                                  ;	ES:DI -> SFT
 22003                                  ;	output of SETUP
 22004                                  ; Function:
 22005                                  ;	check read lock
 22006                                  ; Outputs:
 22007                                  ;	Carry set if error
 22008                                  ;	Carry clear if ok
 22009                                  ;----------------------------------------------------------------------------
 22010                                  
 22011                                  CHECK_READ_LOCK:
 22012                                  	; MSDOS 6.0
 22013                                  	;test	byte [es:di+4],8
 22014 00003664 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 22015                                  	;JZ	short do_retry			   	     ; no
 22016                                  	;;call	SET_ACC_ERR
 22017                                  	;;retn
 22018                                  	;;jnz	SET_ACC_ERR
 22019                                  	; 16/12/2022
 22020                                  	; 28/07/2019
 22021 00003669 7403                    	jz	short do_retry
 22022 0000366B E99101                  	jmp	SET_ACC_ERR
 22023                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22024                                  	;JZ	short do_retry
 22025                                  	;call	SET_ACC_ERR
 22026                                  	;retn
 22027                                  do_retry:				;
 22028 0000366E 30C0                    	xor	al,al			;check read access
 22029 00003670 E8E43A                  	call	LOCK_CHECK		;check lock
 22030 00003673 7305                    	JNC	short READLOCK_OK 	;lock ok
 22031 00003675 E82301                  	call	READ_LOCK_VIOLATION	;issue I24
 22032 00003678 73F4                    	JNC	short do_retry		;retry
 22033                                  READLOCK_OK:				;
 22034                                  dw_ret_label:	; 09/02/2024
 22035 0000367A C3                      	retn				;
 22036                                  
 22037                                  ;============================================================================
 22038                                  ; DISK2.ASM, MSDOS 6.0, 1991
 22039                                  ;============================================================================
 22040                                  ; 24/07/2018 - Retro DOS v3.0
 22041                                  ; 04/05/2019 - Retro DOS v4.0
 22042                                  
 22043                                  ;	TITLE	DISK2 - Disk utility routines
 22044                                  ;	NAME	Disk2
 22045                                  
 22046                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 22047                                  ;
 22048                                  ;	DskRead
 22049                                  ;	DWRITE
 22050                                  ;	DSKWRITE
 22051                                  ;	HarderrRW
 22052                                  ;	SETUP
 22053                                  ;	BREAKDOWN
 22054                                  ;	READ_LOCK_VIOLATION
 22055                                  ;	WRITE_LOCK_VIOLATION
 22056                                  ;	DISKREAD
 22057                                  ;	SET_ACC_ERR_DS
 22058                                  ;	SET_ACC_ERR
 22059                                  ;	SETSFT
 22060                                  ;	SETCLUS
 22061                                  ;	AddRec
 22062                                  ;
 22063                                  ;	Revision history:
 22064                                  ;
 22065                                  ;		AN000 version 4.00 Jan. 1988
 22066                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 22067                                  
 22068                                  ; 04/05/2019 - Retro DOS v4.0
 22069                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 22070                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22071                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 22072                                  
 22073                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 22074                                  ;---------------------------------------------------------------------------
 22075                                  ;
 22076                                  ; Procedure Name : DSKREAD
 22077                                  ;
 22078                                  ; Inputs:
 22079                                  ;	DS:BX = Transfer addr
 22080                                  ;	CX = Number of sectors
 22081                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22082                                  ;	DX = Absolute record number	       (LOW)
 22083                                  ;	ES:BP = Base of drive parameters
 22084                                  ; Function:
 22085                                  ;	Call BIOS to perform disk read
 22086                                  ; Outputs:
 22087                                  ;	DI = CX on entry
 22088                                  ;	CX = Number of sectors unsuccessfully transfered
 22089                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22090                                  ;	Zero set if OK (from BIOS) (carry clear)
 22091                                  ;	Zero clear if error (carry clear)
 22092                                  ; SI Destroyed, others preserved
 22093                                  ;---------------------------------------------------------------------------
 22094                                  
 22095                                  DSKREAD:
 22096 0000367B 51                      	PUSH	CX
 22097                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22098 0000367C 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22099                                  	;mov	al,[es:bp+1]
 22100 00003680 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22101 00003684 53                      	PUSH	BX
 22102 00003685 06                      	PUSH	ES
 22103 00003686 E8330F                  	call	SETREAD
 22104 00003689 EB22                    	JMP	short DODSKOP
 22105                                  
 22106                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 22107                                  ;--------------------------------------------------------------------------
 22108                                  ;
 22109                                  ; Procedure Name : DWRITE
 22110                                  ;
 22111                                  ; Inputs:
 22112                                  ;	DS:BX = Transfer address
 22113                                  ;	CX = Number of sectors
 22114                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22115                                  ;	DX = Absolute record number	       (LOW)
 22116                                  ;	ES:BP = Base of drive parameters
 22117                                  ;	[ALLOWED] must be set in case HARDERR called
 22118                                  ; Function:
 22119                                  ;	Calls BIOS to perform disk write. If BIOS reports
 22120                                  ;	errors, will call HARDERRRW for further action.
 22121                                  ; Output:
 22122                                  ;	Carry set if error (currently, user FAILed to I 24)
 22123                                  ; BP preserved. All other registers destroyed.
 22124                                  ;----------------------------------------------------------------------------
 22125                                  
 22126                                  	;entry	DWRITE
 22127                                  DWRITE:
 22128 0000368B E81100                  	CALL	DSKWRITE
 22129 0000368E 74EA                    	jz	short dw_ret_label	; Carry clear (retz)
 22130                                  
 22131                                  ;hkn; SS override
 22132 00003690 36C606[7505]01          	MOV	BYTE [SS:READOP],1	; Write
 22133 00003696 E83500                  	call	HARDERRRW
 22134 00003699 3C01                    	CMP	AL,1			; Check for retry
 22135 0000369B 74EE                    	JZ	short DWRITE
 22136                                  
 22137                                  ; 09/02/2024
 22138                                  %if 0
 22139                                  	CMP	AL,3			; Check for FAIL
 22140                                  	CLC
 22141                                  	JNZ	short NO_CAR2 		; Ignore
 22142                                  	STC
 22143                                  NO_CAR2:
 22144                                  dw_ret_label:
 22145                                  	retn
 22146                                  %else
 22147                                  	; 09/02/2024 - Retro DOS v4.1
 22148 0000369D EB9E                    	jmp	short fail_ignore
 22149                                  %endif
 22150                                  
 22151                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 22152                                  ;---------------------------------------------------------------------------
 22153                                  ;
 22154                                  ; Procedure Name : DSKWRITE
 22155                                  ;
 22156                                  ; Inputs:
 22157                                  ;	DS:BX = Transfer addr
 22158                                  ;	CX = Number of sectors
 22159                                  ;	DX = Absolute record number	       (LOW)
 22160                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22161                                  ;	ES:BP = Base of drive parameters
 22162                                  ; Function:
 22163                                  ;	Call BIOS to perform disk read
 22164                                  ; Outputs:
 22165                                  ;	DI = CX on entry
 22166                                  ;	CX = Number of sectors unsuccessfully transfered
 22167                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22168                                  ;	Zero set if OK (from BIOS) (carry clear)
 22169                                  ;	Zero clear if error (carry clear)
 22170                                  ; SI Destroyed, others preserved
 22171                                  ;
 22172                                  ;----------------------------------------------------------------------------
 22173                                  
 22174                                  	;entry	DSKWRITE
 22175                                  DSKWRITE:
 22176 0000369F 51                      	PUSH	CX
 22177                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22178 000036A0 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22179                                  	;mov	al,[es:bp+1]
 22180 000036A4 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22181 000036A8 53                      	PUSH	BX
 22182 000036A9 06                      	PUSH	ES
 22183 000036AA E8420F                  	call	SETWRITE
 22184                                  DODSKOP:
 22185 000036AD 8CD9                    	MOV	CX,DS		; Save DS
 22186 000036AF 1F                      	POP	DS		; DS:BP points to DPB
 22187 000036B0 1E                      	PUSH	DS
 22188                                  
 22189                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22190 000036B1 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22191 000036B5 E8830E                  	call	DEVIOCALL2
 22192                                  
 22193 000036B8 8ED9                    	MOV	DS,CX		; Restore DS
 22194 000036BA 07                      	POP	ES		; Restore ES
 22195 000036BB 5B                      	POP	BX
 22196                                  
 22197                                  ;hkn; SS override
 22198 000036BC 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22199 000036C1 5F                      	POP	DI
 22200 000036C2 29F9                    	SUB	CX,DI
 22201 000036C4 F7D9                    	NEG	CX		; Number of sectors not transferred
 22202                                  
 22203                                  ;hkn; SS override
 22204 000036C6 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22205                                  	;test	ax,8000h
 22206                                  	; 17/12/2022
 22207                                  	;test	ah,80h
 22208 000036CA F6C480                  	test	ah,(STERR>>8)
 22209                                  	;test	AX,STERR
 22210 000036CD C3                      	retn
 22211                                  
 22212                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22213                                  ;---------------------------------------------------------------------------
 22214                                  ;
 22215                                  ; Procedure Name : HardErrRW
 22216                                  ;
 22217                                  ; Inputs:
 22218                                  ;	AX is error code from read or write
 22219                                  ;	Other registers set as per HARDERR
 22220                                  ; Function:
 22221                                  ;	Checks the error code for special extended
 22222                                  ;	errors and maps them if needed. Then invokes
 22223                                  ;	Harderr
 22224                                  ; Outputs:
 22225                                  ;	Of HARDERR
 22226                                  ; AX may be modified prior to call to HARDERR.
 22227                                  ; No other registers altered.
 22228                                  ;
 22229                                  ;---------------------------------------------------------------------------
 22230                                  
 22231                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22232                                  HARDERRRW:
 22233                                  	;cmp	al,0Fh
 22234 000036CE 3C0F                    	CMP	AL,error_I24_wrong_disk
 22235 000036D0 7512                    	JNZ	short DO_ERR				; Nothing to do
 22236                                  
 22237                                  	; MSDOS 3.3
 22238                                  	;push	ds
 22239                                  	;push	si
 22240                                  	;lds	si,[ss:CALLVIDRW]
 22241                                  	;mov	[ss:EXTERRPT+2], ds
 22242                                  	;mov	[ss:EXTERRPT], si
 22243                                  	;pop	si
 22244                                  	;pop	ds
 22245                                  
 22246                                  	; MSDOS 6.0
 22247 000036D2 50                      	push	ax
 22248 000036D3 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22249 000036D7 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22250 000036DB 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22251 000036DF 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22252 000036E3 58                      	pop	ax
 22253                                  DO_ERR:
 22254                                  	;;call	HARDERR
 22255                                  	;;retn
 22256                                  	; 16/12/2022
 22257                                  	; 10/06/2019
 22258 000036E4 E9DA1A                  	jmp	HARDERR	
 22259                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22260                                  	;call	HARDERR
 22261                                  	;retn
 22262                                  
 22263                                  ; 24/07/2018 - Retro DOS v3.0
 22264                                  
 22265                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22266                                  ;----------------------------------------------------------------------------
 22267                                  ;
 22268                                  ; Procedure Name : SETUP
 22269                                  ;
 22270                                  ; Inputs:
 22271                                  ;	ES:DI point to SFT (value also in THISSFT)
 22272                                  ;	DMAAdd contains transfer address
 22273                                  ;	CX = Byte count
 22274                                  ;	DS = DOSDATA
 22275                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22276                                  ;		2nd of caller of caller.
 22277                                  ; Outputs:
 22278                                  ;	    CX = byte count
 22279                                  ;	    [THISDPB] = Base of drive parameters if file
 22280                                  ;		      = Pointer to device header if device or NET
 22281                                  ;	    ES:DI Points to SFT
 22282                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22283                                  ;	    [TRANS] = 0 (No transfers yet)
 22284                                  ;	    BytPos = Byte position in file
 22285                                  ;
 22286                                  ;	The following fields are relevant to local files (not devices) only:
 22287                                  ;
 22288                                  ;	    SecPos = Position of first sector (local files only)
 22289                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22290                                  ;	    [CLUSNUM] = First cluster (local files only)
 22291                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22292                                  ;	    [THISDRV] = Physical unit number (local files only)
 22293                                  ;
 22294                                  ;      RETURNS ONE LEVEL UP WITH:
 22295                                  ;	   CX = 0
 22296                                  ;	   CARRY = Clear
 22297                                  ;	IF AN ERROR IS DETECTED
 22298                                  ; All other registers destroyed
 22299                                  ;----------------------------------------------------------------------------
 22300                                  
 22301                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22302                                  
 22303                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22304                                  
 22305                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22306                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22307                                  
 22308                                  SETUP:
 22309                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22310                                  
 22311                                  	;lds 	si,[es:di+7]
 22312 000036E7 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22313                                  
 22314                                  ;hkn; SS override
 22315 000036EB 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22316                                  
 22317                                  ;hkn; SS is DOSDATA
 22318 000036F0 16                      	push	ss
 22319 000036F1 1F                      	pop	ds
 22320                                  
 22321 000036F2 8936[8A05]              	MOV	[THISDPB],SI
 22322                                  
 22323 000036F6 8B1E[2C03]              	MOV	BX,[DMAADD]
 22324 000036FA 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22325 000036FE C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22326                                  	;mov	ax,[es:di+15h]
 22327 00003703 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22328                                  	;mov	dx,[es:di+17h]
 22329 00003707 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22330 0000370B 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22331 0000370F A3[CE05]                	MOV	[BYTPOS],AX
 22332                                  	;test	word [es:di+5],8080h
 22333 00003712 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22334 00003718 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22335 0000371A 06                      	PUSH	ES
 22336 0000371B C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22337                                  
 22338                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22339                                  	;;mov	bl,[es:bp+0]
 22340                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22341                                  	; 05/12/2022
 22342 0000371F 268A5E00                	mov	bl,[es:bp]
 22343                                  	
 22344 00003723 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22345                                  	;mov	bx,[es:bp+2]
 22346 00003727 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22347                                  
 22348                                  	;; MSDOS 3.3
 22349                                  	;cmp	dx,bx
 22350                                  	;jnb	short EOFERR
 22351                                  	;div	bx
 22352                                  	;mov	[SECPOS],ax
 22353                                  	;mov	[BYTSECPOS],dx
 22354                                  	;mov	dx,ax
 22355                                  	;;and	al,[es:bp+4]
 22356                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22357                                  	;mov	[SECCLUSPOS],al
 22358                                  	;mov	ax,cx
 22359                                  	;;mov	cl,[es:bp+5]
 22360                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22361                                  	;shr	dx,cl
 22362                                  	;mov	[CLUSNUM],dx
 22363                                  	;pop	es
 22364                                  	;mov	cx,ax
 22365                                  
 22366                                  	; 04/05/2019 - Retro DOS v4.0
 22367                                  
 22368                                  	; MSDOS 6.0
 22369                                  ;M039: Optimized this section.
 22370 0000372B 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22371 0000372C E81A05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22372 0000372F 8916[CC05]              	MOV	[BYTSECPOS],DX
 22373 00003733 A3[C405]                	MOV	[SECPOS],AX
 22374 00003736 890E[C605]              	MOV	[SECPOS+2],CX
 22375 0000373A 89CA                    	MOV	DX,CX
 22376                                  
 22377 0000373C 89C3                    	MOV	BX,AX
 22378                                  	;and	bl,[es:bp+4]
 22379 0000373E 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22380 00003742 881E[7305]              	MOV	[SECCLUSPOS],BL
 22381                                  
 22382 00003746 E82705                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22383 00003749 59                      	POP	CX			;CX = byte count.
 22384 0000374A 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22385                                  	;cmp	ax,[es:bp+0Dh]
 22386 0000374C 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22387 00003750 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22388                                  
 22389 00003752 A3[BC05]                	MOV	[CLUSNUM],AX
 22390 00003755 07                      	POP	ES			; ES:DI point to SFT
 22391                                  ;M039
 22392                                  
 22393                                  NOSETSTUFF:
 22394 00003756 89C8                    	MOV	AX,CX		; AX = Byte count.
 22395 00003758 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22396 0000375C 730C                    	JNC	short setup_OK	; Must be less than 64
 22397 0000375E A1[2C03]                	MOV	AX,[DMAADD]
 22398 00003761 F7D8                    	NEG	AX		; Amount of room left in segment (know
 22399                                  				;    less than 64K since max value of CX
 22400                                  				;    is FFFF).
 22401 00003763 7501                    	JNZ	short NoDec
 22402 00003765 48                      	DEC	AX
 22403                                  NoDec:
 22404 00003766 89C1                    	MOV	CX,AX		; Can do this much
 22405 00003768 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22406                                  setup_OK:
 22407 0000376A C3                      	retn
 22408                                  
 22409                                  EOFERR:
 22410 0000376B 07                      	POP	ES		; ES:DI point to SFT
 22411 0000376C 31C9                    	XOR	CX,CX		; No bytes read
 22412                                  ;;;;;;;;;;; 7/18/86
 22413                                  	; MSDOS 3.3
 22414                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22415                                  ;;;;;;;;;;;
 22416                                  NOROOM:
 22417 0000376E 5B                      	POP	BX		; Kill return address
 22418 0000376F F8                      	CLC
 22419 00003770 C3                      	retn			; RETURN TO CALLER OF CALLER
 22420                                  
 22421                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22422                                  ;---------------------------------------------------------------------------
 22423                                  ;
 22424                                  ; Procedure Name : BREAKDOWN
 22425                                  ;
 22426                                  ; Inputs:
 22427                                  ;	CX = Length of disk transfer in bytes
 22428                                  ;	ES:BP = Base of drive parameters
 22429                                  ;	[BYTSECPOS] = Byte position within first sector
 22430                                  ;	DS = DOSDATA
 22431                                  ; Outputs:
 22432                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22433                                  ;	[SECCNT] = No. of whole sectors to transfer
 22434                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22435                                  ; AX, BX, DX destroyed. No other registers affected.
 22436                                  ;---------------------------------------------------------------------------
 22437                                  
 22438                                  BREAKDOWN:
 22439 00003771 A1[CC05]                	MOV	AX,[BYTSECPOS]
 22440 00003774 89CB                    	MOV	BX,CX
 22441 00003776 09C0                    	OR	AX,AX
 22442 00003778 740E                    	JZ	short SAVFIR	; Partial first sector?
 22443                                  	;sub	ax,[es:bp+2]
 22444 0000377A 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22445 0000377E F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22446 00003780 29C3                    	SUB	BX,AX		; Subtract from total length
 22447 00003782 7304                    	JAE	short SAVFIR
 22448 00003784 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22449 00003786 31DB                    	XOR	BX,BX		; And no bytes are left
 22450                                  SAVFIR:
 22451 00003788 A3[D205]                	MOV	[BYTCNT1],AX
 22452 0000378B 89D8                    	MOV	AX,BX
 22453 0000378D 31D2                    	XOR	DX,DX
 22454                                  	;div	word [ES:BP+2]
 22455 0000378F 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22456 00003793 A3[D605]                	MOV	[SECCNT],AX
 22457 00003796 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22458                                  	; MSDOS 3.3
 22459                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22460                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22461                                  	;CMP	AX,1
 22462                                  	;retnz
 22463                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22464                                  	;MOV	[BYTCNT2],AX
 22465                                  	;MOV	[SECCNT],DX	; DX = 0
 22466                                  _RET45:
 22467 0000379A C3                      	retn
 22468                                  
 22469                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22470                                  
 22471                                  ;----------------------------------------------------------------------------
 22472                                  ;
 22473                                  ; Procedure Name : READ_LOCK_VIOLATION
 22474                                  ;
 22475                                  ; ES:DI points to SFT. This entry used by NET_READ
 22476                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22477                                  ; Else do retrys.
 22478                                  ; ES:DI,DS,CX preserved
 22479                                  ;
 22480                                  ;----------------------------------------------------------------------------
 22481                                  
 22482                                  READ_LOCK_VIOLATION:
 22483 0000379B C606[7505]00            	MOV	byte [READOP],0
 22484                                  ERR_ON_CHECK:
 22485                                  	;;test	word [es:di+2],8000h
 22486                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22487                                  	;JNZ	short HARD_ERR
 22488                                  
 22489                                  	; 04/05/2019
 22490                                  	;test	byte [es:di+3],80h
 22491 000037A0 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22492 000037A5 7508                    	JNZ	short HARD_ERR
 22493                                  
 22494                                  	;PUSH	CX
 22495                                  	;;mov	cl,[es:di+2]
 22496                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22497                                  	;;and	cl,0F0h
 22498                                  	;AND	CL,SHARING_MASK
 22499                                  	;;cmp	cl,0
 22500                                  	;CMP	CL,SHARING_COMPAT
 22501                                  	;POP	CX
 22502                                  	;JNE	short NO_HARD_ERR
 22503                                  	; 21/09/2023
 22504 000037A7 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22505 000037AB 24F0                    	and	al,SHARING_MASK
 22506                                  	;cmp	al,SHARING_COMPAT
 22507                                  	;jne	short NO_HARD_ERR
 22508 000037AD 7505                    	jnz	short NO_HARD_ERR
 22509                                  HARD_ERR:
 22510 000037AF E8BB39                  	call	LOCK_VIOLATION
 22511 000037B2 73E6                    	jnc	short _RET45		; User wants Retrys
 22512                                  NO_HARD_ERR:
 22513 000037B4 31C9                    	XOR	CX,CX			;No bytes transferred
 22514                                  	;mov	ax,21h
 22515 000037B6 B82100                  	MOV	AX,error_lock_violation
 22516 000037B9 F9                      	STC
 22517                                  RET3:		; 06/02/2024
 22518 000037BA C3                      	retn
 22519                                  
 22520                                  ;----------------------------------------------------------------------------
 22521                                  ;
 22522                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22523                                  ;
 22524                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22525                                  ; This entry used by NET_WRITE
 22526                                  ;
 22527                                  ;----------------------------------------------------------------------------
 22528                                  
 22529                                  WRITE_LOCK_VIOLATION:
 22530 000037BB C606[7505]01            	MOV	byte [READOP],1
 22531 000037C0 EBDE                    	JMP	short ERR_ON_CHECK
 22532                                  
 22533                                  ; 04/05/2019 - Retro DOS v4.0
 22534                                  
 22535                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22536                                  
 22537                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22538                                  ;----------------------------------------------------------------------------
 22539                                  ;
 22540                                  ; Procedure Name : DISKREAD
 22541                                  ;
 22542                                  ; Inputs:
 22543                                  ;	Outputs of SETUP
 22544                                  ; Function:
 22545                                  ;	Perform disk read
 22546                                  ; Outputs:
 22547                                  ;    Carry clear
 22548                                  ;	CX = No. of bytes read
 22549                                  ;	ES:DI point to SFT
 22550                                  ;	SFT offset and cluster pointers updated
 22551                                  ;    Carry set
 22552                                  ;	CX = 0
 22553                                  ;	ES:DI point to SFT
 22554                                  ;	AX has error code
 22555                                  ;----------------------------------------------------------------------------
 22556                                  
 22557                                  ;hkn; called from disk.asm. DS already set up.
 22558                                  
 22559                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22560                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22561                                  
 22562                                  DISKREAD:
 22563                                  	;mov	ax,[es:di+11h]
 22564 000037C2 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22565                                  	;mov	bx,[es:di+13h]
 22566 000037C6 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22567 000037CA 2B06[CE05]              	SUB	AX,[BYTPOS]
 22568 000037CE 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22569 000037D2 721F                    	JB	short RDERR		;Read starts past EOF
 22570 000037D4 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22571 000037D6 09C0                    	OR	AX,AX
 22572 000037D8 7419                    	JZ	short RDERR		;Read starts at EOF
 22573 000037DA 39C8                    	CMP	AX,CX
 22574 000037DC 7302                    	JAE	short ENUF		;I/O fits
 22575 000037DE 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22576                                  ENUF:
 22577                                  	; MSDOS 3.3
 22578                                  	;test	byte [es:di+4],8
 22579                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22580                                  	;jnz	short SET_ACC_ERR
 22581                                  	;call	LOCK_CHECK
 22582                                  	;jnb	short _READ_OK
 22583                                  	;call	READ_LOCK_VIOLATION
 22584                                  	;jnb	short ENUF
 22585                                  	;retn
 22586                                  
 22587                                  	; MSDOS 6.0
 22588 000037E0 E881FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22589                                  	;JNC	short _READ_OK 		; There are no locks
 22590                                  	;retn
 22591                                  	; 06/02/2024
 22592 000037E3 72D5                    	jc	short RET3
 22593                                  
 22594                                  _READ_OK:
 22595 000037E5 C42E[8A05]              	LES	BP,[THISDPB]
 22596 000037E9 E885FF                  	CALL	BREAKDOWN
 22597                                  
 22598                                  ; 10/02/2024
 22599                                  %if 0
 22600                                  	MOV	CX,[CLUSNUM] ; *
 22601                                  	call	FNDCLUS
 22602                                       	; MSDOS 6.0			;M022 conditional removed here
 22603                                  	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22604                                  					; migrated from 330a - HKN
 22605                                  %else
 22606                                  	; 10/02/2024 - Retro DOS v4.2
 22607 000037EC E82B13                  	call	FNDCLUS_X ; *
 22608 000037EF 720E                    	jc	short SET_ACC_ERR ; ds=ss
 22609                                  %endif
 22610                                  	;OR	CX,CX
 22611                                  	;JZ	short SKIPERR
 22612                                  	; 06/02/2024
 22613 000037F1 E313                    	jcxz	SKIPERR
 22614                                  
 22615                                  RDERR:
 22616 000037F3 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22617 000037F5 E91802                  	jmp	WRTERR22
 22618                                  
 22619                                  ;RDLASTJ: 
 22620                                  	;JMP	RDLAST                  ;M039
 22621                                  
 22622                                  SETSFTJ2: 
 22623 000037F8 E99600                  	JMP	SETSFT
 22624                                  
 22625                                  CANOT_READ:
 22626                                  	; MSDOS 3.3
 22627                                  	;POP	CX		;M039.
 22628                                  	; MSDOS 3.3 & MSDOS 6.0
 22629 000037FB 59                      	POP	CX              ;Clean stack.
 22630 000037FC 5B                      	POP	BX
 22631                                  
 22632                                  	;entry	SET_ACC_ERR_DS
 22633                                  SET_ACC_ERR_DS:
 22634                                  
 22635                                  ;hkn; SS is DOSDATA
 22636                                  	;Context DS
 22637 000037FD 16                      	push	ss
 22638 000037FE 1F                      	pop	ds
 22639                                  
 22640                                  	;entry	SET_ACC_ERR
 22641                                  SET_ACC_ERR:
 22642 000037FF 31C9                    	XOR	CX,CX
 22643                                  	;mov	ax,5
 22644 00003801 B80500                  	MOV	AX,error_access_denied
 22645 00003804 F9                      	STC
 22646 00003805 C3                      	retn
 22647                                  
 22648                                  SKIPERR:
 22649 00003806 8916[BA05]              	MOV	[LASTPOS],DX
 22650 0000380A 891E[BC05]              	MOV	[CLUSNUM],BX
 22651 0000380E 833E[D205]00            	CMP	word [BYTCNT1],0
 22652 00003813 7405                    	JZ	short RDMID
 22653                                  
 22654 00003815 E87C13                  	call	BUFRD
 22655                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22656                                  	; 10/02/2024
 22657                                  	; ds=ss
 22658 00003818 72E5                    	jc	short SET_ACC_ERR
 22659                                  
 22660                                  RDMID:
 22661 0000381A 833E[D605]00            	CMP	word [SECCNT],0
 22662                                  	;JZ	RDLAST ; 10/08/2018
 22663 0000381F 7453                    	jz	short RDLAST
 22664                                  
 22665 00003821 E80414                  	call	NEXTSEC
 22666 00003824 72D2                    	JC	short SETSFTJ2
 22667                                  
 22668 00003826 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22669                                  ONSEC:
 22670 0000382B 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22671 0000382F 8B0E[D605]              	MOV	CX,[SECCNT]
 22672 00003833 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22673                                  RDLP:
 22674 00003837 E81F14                  	call	OPTIMIZE
 22675                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22676                                  	; 10/02/2024
 22677                                  	; ds=ss
 22678 0000383A 72C3                    	jc	short SET_ACC_ERR
 22679                                  
 22680 0000383C 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22681 0000383D 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22682 0000383E 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22683                                  	;mov	byte [ALLOWED],38h
 22684 0000383F C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22685 00003844 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22686                                  
 22687 00003848 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22688 00003849 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22689                                  
 22690                                  	; 04/05/2019 - Retro DOS v4.0
 22691                                  
 22692                                  	; MSDOS 6.0
 22693 0000384A E8A421                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22694                                  
 22695                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22696 0000384D E8DBFD                  	call	DREAD
 22697                                  
 22698                                  	; 10/02/2024
 22699                                  	; ds<>ss
 22700                                  
 22701                                  	; MSDOS 3.3 
 22702                                  	;pop	bx
 22703                                  	;pop	dx
 22704                                  	;jc	short CANOT_READ
 22705                                  	;add	bx,dx	; (bx = Extent end)
 22706                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22707                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22708                                  	;call	SETVISIT
 22709                                  	; ->***
 22710                                  ;M039
 22711                                  	; MSDOS 6.0 
 22712 00003850 59                      	pop	cx
 22713 00003851 5A                      	pop	dx
 22714 00003852 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22715 00003857 72A2                    	jc	short CANOT_READ
 22716                                  
 22717 00003859 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22718                                  
 22719                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22720                                  ;            sectors, also termed an "Extent".)
 22721                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22722                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22723                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22724                                  ;
 22725                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22726                                  ;	buffers must be "read" into the transfer memory block, so that the
 22727                                  ;       transfer memory reflects the most recent data.
 22728                                  
 22729 0000385E E85E00                  	call	DskRdBufScan
 22730                                  
 22731                                  	;Context DS
 22732 00003861 16                      	push	ss
 22733 00003862 1F                      	pop	ds
 22734                                          
 22735 00003863 59                      	pop	cx
 22736 00003864 5B                              pop	bx
 22737                                  
 22738                                  ;       CX = # of sector remaining.
 22739                                  ;       BX = Next physical cluster.
 22740                                  
 22741                                  ;M039
 22742                                  
 22743                                  ;;;;;;;;
 22744                                  ;	; 25/07/2018 - Retro DOS v3.0
 22745                                  ;	; ***->
 22746                                  ;	; MSDOS 3.3
 22747                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22748                                  ;bufq:
 22749                                  ;;	DX = Extent start.
 22750                                  ;;	BX = Extent end.
 22751                                  ;;	 AL = Drive #.
 22752                                  ;;     DS:DI-> 1st buffer in queue.
 22753                                  ;
 22754                                  ;	;or	byte [di+5],20h
 22755                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22756                                  ;	;cmp	al,[di+4]	
 22757                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22758                                  ;	jnz	short bufq3
 22759                                  ;	;cmp	[di+6],dx
 22760                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22761                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22762                                  ;	;cmp	[di+6],bx
 22763                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22764                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22765                                  ;	
 22766                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22767                                  ;
 22768                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22769                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22770                                  ;;      as MRU (Most Recently Used).
 22771                                  ;
 22772                                  ;	;test	byte [di+5],40h
 22773                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22774                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22775                                  ;	pop	ax ; transfer address
 22776                                  ;	push	ax
 22777                                  ;	push	di
 22778                                  ;	push	dx
 22779                                  ;	;sub	dx,[di+6]
 22780                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22781                                  ;	neg	dx
 22782                                  ;
 22783                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22784                                  ;;           block.
 22785                                  ;
 22786                                  ;	mov	si,di
 22787                                  ;	mov	di,ax
 22788                                  ;	mov	ax,dx
 22789                                  ;	;mov	cx,[es:bp+6]	
 22790                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22791                                  ;	mul	cx
 22792                                  ;	add	di,ax
 22793                                  ;
 22794                                  ;	lea	si,[si+16]
 22795                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22796                                  ;	shr	cx,1
 22797                                  ;	push	es
 22798                                  ;	mov	es,[SS:DMAADD+2]
 22799                                  ;
 22800                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22801                                  ;;      DS:SI-> Buffer sector data.
 22802                                  ;;      ES:DI-> Destination within Transfer memory block.
 22803                                  ;
 22804                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22805                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22806                                  ;	;rep	movsb                   ;Copy last byte.
 22807                                  ;	jnc	short bufq1
 22808                                  ;	movsb
 22809                                  ;bufq1:
 22810                                  ;	pop	es
 22811                                  ;	pop	dx
 22812                                  ;	pop	di
 22813                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22814                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22815                                  ;bufq2:
 22816                                  ;	call	SCANPLACE
 22817                                  ;bufq3:
 22818                                  ;	call	SKIPVISIT
 22819                                  ;	jnz	short bufq
 22820                                  ;	
 22821                                  ;	push	ss
 22822                                  ;	pop	ds
 22823                                  ;	pop	cx
 22824                                  ;	pop	cx
 22825                                  ;	pop	bx	
 22826                                  ;bufq4:
 22827                                  ;;;;;;;
 22828 00003865 E30D                    	JCXZ	RDLAST
 22829                                  
 22830 00003867 E8781B                  	call	IsEOF			; test for eof on fat size
 22831 0000386A 7325                    	JAE	short SETSFT
 22832                                  
 22833 0000386C B200                    	MOV	DL,0
 22834 0000386E FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22835 00003872 EBC3                    	JMP	short RDLP ; 19/05/2019
 22836                                  
 22837                                  RDLAST:
 22838 00003874 A1[D405]                	MOV	AX,[BYTCNT2]
 22839 00003877 09C0                    	OR	AX,AX
 22840 00003879 7416                    	JZ	short SETSFT
 22841 0000387B A3[D205]                	MOV	[BYTCNT1],AX
 22842                                  
 22843 0000387E E8A713                  	call	NEXTSEC
 22844 00003881 720E                    	JC	short SETSFT
 22845                                  
 22846 00003883 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22847 00003889 E80813                  	call	BUFRD
 22848                                  	; 10/08/2018
 22849 0000388C 7303                    	JNC	short SETSFT
 22850                                  	;JMP	SET_ACC_ERR_DS
 22851                                  	; 10/02/2024
 22852                                  	; ds=ss
 22853 0000388E E96EFF                  	jmp	SET_ACC_ERR
 22854                                  
 22855                                  ;------------------------------------------------------------------------------
 22856                                  ;
 22857                                  ; Procedure Name : SETSFT
 22858                                  ; Inputs:
 22859                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22860                                  ;		and set cluster fields
 22861                                  ; Function:
 22862                                  ;	Update [THISSFT] based on the transfer
 22863                                  ; Outputs:
 22864                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22865                                  ;	ES:DI points to [THISSFT]
 22866                                  ;	CX No. of bytes transferred
 22867                                  ;	Carry clear
 22868                                  ;
 22869                                  ;----------------------------------------------------------------------------
 22870                                  
 22871                                  	;entry	SETSFT
 22872                                  
 22873                                  ; 26/07/2018 - Retro DOS v3.0
 22874                                  SETSFT:
 22875 00003891 C43E[9E05]              	LES	DI,[THISSFT]
 22876                                  
 22877                                  ; Same as SETSFT except ES:DI already points to SFT
 22878                                  	;entry	SETCLUS
 22879                                  SETCLUS:	
 22880 00003895 8B0E[B805]              	MOV	CX,[NEXTADD]
 22881 00003899 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22882                                  	;;test	word [es:di+5],80h
 22883                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22884                                  	;JNZ	short ADDREC		; don't set clusters if device
 22885                                  
 22886                                  	; 04/05/2019 - Retro DOS v4.0
 22887                                  	;test	byte [es:di+5],80h
 22888 0000389D 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22889 000038A2 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22890                                  
 22891 000038A4 A1[BC05]                	MOV	AX,[CLUSNUM]
 22892                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22893                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22894 000038A7 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22895 000038AB A1[BA05]                	MOV	AX,[LASTPOS]
 22896                                  	;mov	[es:di+19h],ax
 22897 000038AE 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22898                                  
 22899                                  ;----------------------------------------------------------------------------
 22900                                  ;
 22901                                  ; Procedure : AddRec
 22902                                  ; Inputs:
 22903                                  ;	ES:DI points to SFT
 22904                                  ;	CX is No. Bytes transferred
 22905                                  ; Function:
 22906                                  ;	Update the SFT offset based on the transfer
 22907                                  ; Outputs:
 22908                                  ;	sf_position updated to point to first byte after transfer
 22909                                  ;	ES:DI points to SFT
 22910                                  ;	CX No. of bytes transferred
 22911                                  ;	Carry clear
 22912                                  ;----------------------------------------------------------------------------
 22913                                  
 22914                                  	;entry	AddRec
 22915                                  ADDREC:
 22916 000038B2 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22917                                  	;add	[es:di+15h],cx
 22918 000038B4 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22919                                  	;adc	word [es:di+17h], 0
 22920 000038B8 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22921                                  RET28:	
 22922 000038BD F8                      	CLC
 22923 000038BE C3                      	retn
 22924                                  
 22925                                  ; 25/07/2018
 22926                                  ; MSDOS 6.0
 22927                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22928                                  ;----------------------------------------------------------------------------
 22929                                  ;
 22930                                  ; Procedure Name : DskRdBufScan
 22931                                  ;
 22932                                  ; Inputs:
 22933                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22934                                  ;            sectors, also termed an "Extent".)
 22935                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22936                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22937                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22938                                  ;
 22939                                  ; Function:
 22940                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22941                                  ;	"read" into the transfer memory block, so that the transfer memory
 22942                                  ;	reflects the most recent data.
 22943                                  ;
 22944                                  ; Outputs:
 22945                                  ;       Transfer memory updated as required.
 22946                                  ;
 22947                                  ; Uses:
 22948                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22949                                  ;       SS override for all global variables.
 22950                                  ;
 22951                                  ; Notes:
 22952                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22953                                  ;	than the FIRST.
 22954                                  ;----------------------------------------------------------------------------
 22955                                  ;M039: Created
 22956                                  
 22957                                  ; 04/05/2019 - Retro DOS v4.0
 22958                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22959                                  
 22960                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22961                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22962                                  
 22963                                  ;procedure DskRdBufScan,NEAR
 22964                                  ;
 22965                                  ;ASSUME  DS:NOTHING
 22966                                  
 22967                                  DskRdBufScan:
 22968 000038BF 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22969 000038C5 743C                    	je	short bufx		     ; -no, skip all work.
 22970                                  
 22971 000038C7 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22972 000038CC 89DE                    	mov     si,bx
 22973 000038CE 01D1                    	add     cx,dx
 22974 000038D0 83D600                  	adc     si,0
 22975                                  
 22976 000038D3 E8B61E                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22977                                  	;mov	ax,[di+2]
 22978 000038D6 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22979 000038D9 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22980                                  		
 22981                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22982                                  	;;mov	al,[es:bp+0]
 22983                                  	;mov	al,[es:bp+DPB.DRIVE]
 22984                                  	; 15/12/2022
 22985 000038DD 268A4600                	mov	al,[es:bp]
 22986                                  
 22987                                  ;       BX:DX = Extent start.
 22988                                  ;       SI:CX = Extent end + 1.
 22989                                  ;          AL = Drive #.
 22990                                  ;       DS:DI-> 1st buffer in queue.
 22991                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22992                                  
 22993                                  bufq:	
 22994                                  	;cmp	al,[di+4]
 22995 000038E1 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22996 000038E4 7514                    	jne	short bufq1        	;  -no, jump.
 22997                                  
 22998                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22999                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 23000                                  
 23001                                  	;cmp	bx,[di+8]
 23002 000038E6 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23003 000038E9 7503                    	jne	short bufq01
 23004                                  	;cmp	dx,[di+6]
 23005 000038EB 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23006                                  bufq01:
 23007 000038EE 770A                    	ja	short bufq1
 23008                                  
 23009                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23010                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 23011                                  
 23012                                  	;cmp	si,[di+8]
 23013 000038F0 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23014 000038F3 7503                    	jne	short bufq02
 23015                                  	;cmp	cx,[di+6]
 23016 000038F5 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23017                                  bufq02:
 23018 000038F8 770A                    	ja	short bufq2
 23019                                  bufq1:	
 23020 000038FA 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23021 000038FF 8B3D                    	mov	di,[di]
 23022                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 23023 00003901 75DE                    	jne	short bufq		; -no, do next buffer
 23024                                  bufx:
 23025 00003903 C3                      	retn				;Exit.
 23026                                  
 23027                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 23028                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 23029                                  ;       as MRU (Most Recently Used).
 23030                                  
 23031                                  bufq2:	
 23032 00003904 50                      	push	ax
 23033                                  	;test	byte [di+5],40h
 23034 00003905 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23035 00003909 7428                    	jz	short bufq3                    ; -no, jump.
 23036                                  
 23037                                  ;       SaveReg <cx,dx,si,di,es>
 23038 0000390B 51                      	push	cx
 23039 0000390C 52                      	push	dx
 23040 0000390D 56                      	push	si
 23041 0000390E 57                      	push	di
 23042 0000390F 06                      	push	es
 23043                                  
 23044 00003910 89D0                    	mov     ax,dx
 23045                                  	;sub	ax,[di+6]
 23046 00003912 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 23047 00003915 F7D8                    	neg	ax
 23048                                  
 23049                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 23050                                  ;            block. (Note: the upper word of the sector # may be ignored
 23051                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 23052                                  ;            is imposed by the input parameters of the disk read operation.)
 23053                                  
 23054                                  	;lea	si,[di+20]
 23055 00003917 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 23056                                  	;mov	cx,[es:bp+2]
 23057 0000391A 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 23058 0000391E F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 23059                                  	;mov	di,[ss:TEMP_VAR]
 23060                                  	; 09/02/2024
 23061 00003920 36C43E[0C06]            	les	di,[ss:TEMP_VAR]
 23062 00003925 01C7                    	add	di,ax
 23063                                  	;mov	es,[ss:TEMP_VAR2]
 23064 00003927 D1E9                    	shr	cx,1
 23065                                  
 23066                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 23067                                  ;       DS:SI-> Buffer sector data.
 23068                                  ;       ES:DI-> Destination within Transfer memory block.
 23069                                  
 23070 00003929 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 23071                                  	;; 04/05/2019
 23072                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 23073                                  	;;rep	movsb                   ;Copy last byte.
 23074                                  	;jnc	short bufq03	
 23075                                  	;movsb
 23076                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23077                                  	;adc	cx,0
 23078                                  	;rep	movsb
 23079                                  	; 22/09/2023
 23080 0000392B 7301                    	jnc	short bufq03
 23081 0000392D A4                      	movsb
 23082                                  bufq03:
 23083                                  	;RestoreReg <es,di,si,dx,cx>
 23084 0000392E 07                      	pop	es
 23085 0000392F 5F                      	pop	di
 23086 00003930 5E                      	pop	si
 23087 00003931 5A                      	pop	dx
 23088 00003932 59                      	pop	cx
 23089                                  
 23090                                  ;       DS:DI -> current buffer.
 23091                                  bufq3:	
 23092 00003933 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 23093                                          ;invoke SCANPLACE
 23094 00003935 E8661E                  	call	SCANPLACE
 23095 00003938 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 23096 0000393D 58                      	pop	ax
 23097                                  	;jne	short bufq		; -no, jump.
 23098                                  	;;jmp	short bufx		; -yes, exit.
 23099                                  	;; 12/06/2019
 23100                                  	;retn
 23101                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 23102 0000393E 75A1                    	jne	short bufq
 23103                                  	;jmp	short bufx
 23104                                  	; 09/02/2024
 23105 00003940 C3                      	retn	; Exit
 23106                                  
 23107                                  ;EndProc DskRdBufScan
 23108                                  
 23109                                  ;============================================================================
 23110                                  ; DISK3.ASM, MSDOS 6.0, 1991
 23111                                  ;============================================================================
 23112                                  ; 04/05/2019 - Retro DOS v4.0
 23113                                  ; 24/07/2018 - Retro DOS v3.0
 23114                                  
 23115                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 23116                                  ;----------------------------------------------------------------------------
 23117                                  ;
 23118                                  ; Procedure Name : DISKWRITE
 23119                                  ;
 23120                                  ; Inputs:
 23121                                  ;       Outputs of SETUP
 23122                                  ; Function:
 23123                                  ;       Perform disk write
 23124                                  ; Outputs:
 23125                                  ;    Carry clear
 23126                                  ;       CX = No. of bytes written
 23127                                  ;       ES:DI point to SFT
 23128                                  ;       SFT offset and cluster pointers updated
 23129                                  ;    Carry set
 23130                                  ;       CX = 0
 23131                                  ;       ES:DI point to SFT
 23132                                  ;       AX has error code
 23133                                  ;----------------------------------------------------------------------------
 23134                                  
 23135                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 23136                                  
 23137                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 23138                                  
 23139                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23140                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 23141                                  
 23142                                  DISKWRITE:
 23143                                  	; MSDOS 3.3
 23144                                  	; IBMDOS.COM - Offset 436Dh
 23145                                  	;;test	byte [es:di+4],8
 23146                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 23147                                  	;jz	short write_cont
 23148                                  	;jmp	SET_ACC_ERR_DS
 23149                                  ;write_cont:
 23150                                  	;push	cx
 23151                                  	;or	cx,cx
 23152                                  	;jnz	short Not_Truncate
 23153                                  	;;mov	cx,-1
 23154                                  	;dec	cx
 23155                                  ;Not_Truncate:
 23156                                  	;call	LOCK_CHECK
 23157                                  	;pop	cx
 23158                                  	;jnb	short _WRITE_OK
 23159                                  	;call	WRITE_LOCK_VIOLATION
 23160                                  	;jnb	short DISKWRITE
 23161                                  	;retn
 23162                                  
 23163                                  	; MSDOS 6.0
 23164 00003941 E802FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 23165                                  	; 19/08/2018
 23166 00003944 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 23167 00003946 C3                      	retn
 23168                                  
 23169                                  WRTEOFJ:
 23170 00003947 E9D101                  	JMP     WRTEOF
 23171                                  
 23172                                  _WRITE_OK:
 23173                                   	; 27/07/2018
 23174                                  	; IBMDOS.COM - Offset 438Eh
 23175                                  	
 23176                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23177                                  	;and	word [es:di+5],0BFBFh
 23178 0000394A 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 23179                                  				; Mark file as dirty, clear no date on close
 23180                                  ; 10/02/2024
 23181                                  %if 0
 23182                                  	; 04/05/2019 - Retro DOS v4.0
 23183                                  
 23184                                  	; MSDOS 6.0
 23185                                  	;mov 	ax,[es:di+11h]
 23186                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 23187                                          MOV	[TEMP_VAR],AX                           ;M039
 23188                                  	;mov	ax,[es:di+13h]
 23189                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 23190                                          MOV	[TEMP_VAR2],AX                          ;M039
 23191                                  %else
 23192                                  	; 10/02/2024 (PCDOS 7.1 IBMDOS COM)
 23193                                  	;les	ax,[es:di+11h]
 23194 00003950 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 23195 00003954 8C06[0E06]              	mov	[TEMP_VAR2],es
 23196 00003958 A3[0C06]                	mov	[TEMP_VAR],ax
 23197                                  %endif
 23198                                  
 23199                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 23200                                  
 23201                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23202 0000395B C42E[8A05]              	LES     BP,[THISDPB]
 23203                                  
 23204 0000395F E80FFE                  	call	BREAKDOWN
 23205                                  
 23206 00003962 A1[CE05]                	MOV     AX,[BYTPOS]
 23207 00003965 8B16[D005]              	MOV     DX,[BYTPOS+2]
 23208 00003969 E3DC                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 23209 0000396B 01C8                    	ADD     AX,CX
 23210 0000396D 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 23211                                  
 23212                                  	;mov	bx,[es:bp+2]
 23213 00003970 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23214                                  
 23215                                  	; MSDOS 3.3
 23216                                  	;cmp	dx,bx
 23217                                  	;jnb	short WRTERR33
 23218                                  	;div	bx
 23219                                  	;mov	bx,ax
 23220                                  	;OR	DX,DX
 23221                                  	;JNZ	short CALCLUS
 23222                                  	;dec	ax
 23223                                  ;CALCLUS:
 23224                                  	; MSDOS 3.3
 23225                                  	;mov	cl,[es:bp+5]
 23226                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23227                                  	;shr	ax,cl
 23228                                  	;push	ax
 23229                                  	;push	dx
 23230                                  	;push	es
 23231                                  	;les	di,[THISSFT]
 23232                                  	;;mov	ax,[es:di+11h]
 23233                                  	;;mov	dx,[es:di+13h]
 23234                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23235                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23236                                  	;pop	es
 23237                                  	;;DX:AX = current file size (in bytes).
 23238                                  	;;div	word [es:bp+2]
 23239                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23240                                  	;mov	cx,ax
 23241                                  	;or	dx,dx
 23242                                  	;jz	short NORND
 23243                                  	;inc	ax
 23244                                  ;NORND:
 23245                                  	; MSDOS 6.0
 23246 00003974 E8D202                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23247 00003977 89C6                    	MOV	SI,AX
 23248 00003979 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23249                                  
 23250                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23251                                  
 23252 0000397D 09D2                    	OR	DX,DX
 23253 0000397F 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23254 00003980 89CA                    	MOV	DX,CX			;M039
 23255 00003982 7506                    	JNZ	short CALCLUS
 23256 00003984 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23257 00003987 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23258                                  
 23259                                  CALCLUS:
 23260                                  	; MSDOS 6.0
 23261 0000398A E8E302                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23262 0000398D 5A                      	POP	DX
 23263                                  
 23264                                  ;       AX = Last cluster to write.
 23265                                  ;       DX = # of bytes in last sector to write (the "tail").
 23266                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23267                                  
 23268 0000398E 50                      	PUSH	AX
 23269 0000398F 52                      	PUSH	DX
 23270                                  ;M039
 23271 00003990 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23272 00003994 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23273 00003997 E8AF02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23274 0000399A 890E[0E06]              	mov	[TEMP_VAR2],cx
 23275 0000399E 890E[CA05]              	mov	[VALSEC+2],cx
 23276 000039A2 89C1                    	mov	cx,ax
 23277 000039A4 89F3                    	mov	bx,si
 23278                                  
 23279                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23280                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23281                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23282                                  ;                     DX = # of bytes in last sector of current file.
 23283                                  ;M039
 23284 000039A6 09D2                    	OR	DX,DX
 23285 000039A8 7407                    	JZ	short NORND
 23286                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23287                                  	;ADC	word [VALSEC+2],0
 23288                                  	; 22/09/2023
 23289 000039AA 40                      	inc	ax  ; 0FFFFh -> 0
 23290 000039AB 7504                    	jnz	short NORND
 23291 000039AD FF06[CA05]              	inc	word [VALSEC+2]
 23292                                  NORND:	
 23293                                  	; MSDOS 3.3 & MSDOS 6.0
 23294 000039B1 A3[C805]                	MOV     [VALSEC],AX
 23295                                  
 23296                                  ;       [VALSEC] = Last sector of current file.
 23297                                  
 23298 000039B4 31C0                    	XOR     AX,AX
 23299 000039B6 A3[DE05]                	MOV     [GROWCNT],AX
 23300 000039B9 A3[E005]                	MOV     [GROWCNT+2],AX
 23301 000039BC 58                      	POP     AX
 23302                                  
 23303                                  	; MSDOS 6.0
 23304 000039BD 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23305 000039C1 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23306 000039C5 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23307 000039C7 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23308 000039C9 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23309 000039CB 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23310 000039CF EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23311                                  lowsec:
 23312                                  	;MOV	DI,0			;F.C. >32mb
 23313                                  	; 22/09/2023
 23314 000039D1 31FF                    	xor	di,di
 23315                                  	; MSDOS 3.3 & MSDOS 6.0
 23316 000039D3 29CB                    	SUB	BX,CX			; Number of full sectors
 23317 000039D5 7253                    	JB	short NOGROW
 23318 000039D7 7444                    	JZ	short TESTTAIL
 23319                                  yesgrow:
 23320                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23321 000039D9 89D1                    	MOV     CX,DX
 23322 000039DB 93                      	XCHG    AX,BX
 23323                                  	;mul	word [es:bp+2]
 23324 000039DC 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23325                                  	
 23326                                  	; MSDOS 6.0
 23327 000039E0 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb save dx		;AN000;
 23328 000039E4 A3[0E06]                	MOV	[TEMP_VAR2],AX		;M039; F.C. >32mb save ax	;AN000;
 23329 000039E7 89F8                    	MOV	AX,DI			;F.C. >32mb			;AN000;
 23330                                  	;mul	word [es:bp+2]
 23331 000039E9 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23332                                  	
 23333 000039ED 0306[0706]              	ADD	AX,[HIGH_SECTOR]	;F.C. >32mb add lower value	;AN000;
 23334 000039F1 89C2                    	MOV	DX,AX			;F.C. >32mb DX:AX is the result of ;AN000;
 23335 000039F3 A1[0E06]                	MOV	AX,[TEMP_VAR2]		;M039; F.C. >32mb a 32 bit multiply ;AN000;
 23336                                  
 23337                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23338 000039F6 29C8                    	SUB     AX,CX			; Take off current "tail"
 23339 000039F8 83DA00                  	SBB     DX,0			; 32-bit extension
 23340 000039FB 01D8                    	ADD     AX,BX			; Add on new "tail"
 23341 000039FD 83D200                  	ADC     DX,0			; ripple tim's head off
 23342 00003A00 EB21                    	JMP     SHORT SETGRW
 23343                                  
 23344                                  HAVSTART:
 23345                                  	;int 3
 23346 00003A02 89C1                    	MOV     CX,AX
 23347 00003A04 E83711                  	call	SKPCLP
 23348                                  	;JCXZ	DOWRTJ
 23349                                  	; 16/12/2022
 23350 00003A07 E353                    	jcxz	DOWRT
 23351                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23352                                  	;jcxz	DOWRTJ
 23353                                  
 23354 00003A09 E8CF12                  	call	ALLOCATE
 23355                                  	;JNC	short DOWRTJ
 23356                                  	; 16/12/2022
 23357 00003A0C 734E                    	jnc	short DOWRT
 23358                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23359                                  	;jnc	short DOWRTJ
 23360                                  
 23361                                  	;entry   WRTERR
 23362                                  WRTERR:
 23363 00003A0E B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort	;AN000;
 23364                                  
 23365                                  	;entry WRTERR22
 23366                                  WRTERR22:
 23367 00003A10 A0[7605]                	MOV     AL,[THISDRV]		;MS.				;AN000;
 23368                                  
 23369                                  	; 27/07/2018
 23370                                  WRTERR33:
 23371                                  	;MOV	CX,0			;No bytes transferred
 23372 00003A13 31C9                    	XOR     CX,CX
 23373                                  
 23374 00003A15 C43E[9E05]              	LES     DI,[THISSFT]
 23375                                  	;CLC ; 19/05/2019
 23376                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23377                                  	; 16/12/2022
 23378                                  	;clc
 23379 00003A19 C3                      	retn
 23380                                  
 23381                                  	; 16/12/2022
 23382                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23383                                  ;DOWRTJ:
 23384                                  	;JMP	short DOWRT
 23385                                  
 23386                                  ACC_ERRWJ:
 23387                                  	; 10/08/2018
 23388                                  	;JMP	SET_ACC_ERRW
 23389                                  	; 16/12/2022
 23390                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23391                                  	; 10/02/2024
 23392                                  	; ds=ss
 23393 00003A1A E9E2FD                  	jmp	SET_ACC_ERR
 23394                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23395                                  	;;jmp	SET_ACC_ERRW	
 23396                                  
 23397                                  TESTTAIL:
 23398 00003A1D 29D0                    	SUB     AX,DX
 23399 00003A1F 7609                    	JBE	short NOGROW
 23400 00003A21 31D2                    	XOR     DX,DX
 23401                                  SETGRW:
 23402 00003A23 A3[DE05]                	MOV	[GROWCNT],AX
 23403 00003A26 8916[E005]              	MOV	[GROWCNT+2],DX
 23404                                  NOGROW:
 23405 00003A2A 58                      	POP     AX
 23406                                  
 23407                                  ; 10/02/2024
 23408                                  %if 0
 23409                                  	MOV     CX,[CLUSNUM] ; *+ ; First cluster accessed
 23410                                  	call	FNDCLUS
 23411                                  %else
 23412                                  	; 10/02/2024 - Retro DOS v4.2
 23413 00003A2B E8EC10                  	call	FNDCLUS_X ; *+
 23414                                  %endif
 23415 00003A2E 72EA                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23416                                  
 23417 00003A30 891E[BC05]              	MOV     [CLUSNUM],BX
 23418 00003A34 8916[BA05]              	MOV     [LASTPOS],DX
 23419                                  
 23420 00003A38 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23421 00003A3A 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23422 00003A3C E3C4                    	JCXZ    HAVSTART        ; See if no more data
 23423 00003A3E 51                      	PUSH    CX              ; No. of clusters short of first
 23424 00003A3F 89C1                    	MOV     CX,AX
 23425 00003A41 E89712                  	call	ALLOCATE
 23426 00003A44 59                      	POP     CX
 23427 00003A45 72C7                    	JC	short WRTERR
 23428 00003A47 8B16[BA05]              	MOV     DX,[LASTPOS]
 23429 00003A4B 42                      	INC     DX
 23430 00003A4C 49                      	DEC     CX
 23431 00003A4D 7405                    	JZ	short NOSKIP
 23432 00003A4F E8EC10                  	call	SKPCLP
 23433 00003A52 72C6                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23434                                  NOSKIP:
 23435 00003A54 891E[BC05]              	MOV     [CLUSNUM],BX
 23436 00003A58 8916[BA05]              	MOV     [LASTPOS],DX
 23437                                  DOWRT:
 23438 00003A5C 833E[D205]00            	CMP     word [BYTCNT1],0
 23439 00003A61 7405                    	JZ	short WRTMID
 23440                                  	; 09/02/2024
 23441                                  	;MOV	BX,[CLUSNUM]	 ; (not used in 'BUFWRT') ; 09/02/2024
 23442 00003A63 E86711                  	call	BUFWRT
 23443 00003A66 72B2                    	JC	short ACC_ERRWJ
 23444                                  WRTMID:
 23445 00003A68 A1[D605]                	MOV     AX,[SECCNT]
 23446 00003A6B 09C0                    	OR      AX,AX
 23447                                  	; 20/11/2022
 23448 00003A6D 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23449 00003A6F 0106[C405]              	ADD     [SECPOS],AX
 23450                                  	; 19/05/2019
 23451                                  	; MSDOS 6.0
 23452 00003A73 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23453 00003A78 E8AD11                  	call	NEXTSEC
 23454                                  	; 16/12/2022
 23455 00003A7B 729D                    	JC	short ACC_ERRWJ
 23456                                  	;JC	short SET_ACC_ERRW	;M039
 23457 00003A7D C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23458 00003A82 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23459 00003A86 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23460 00003A8A 8B0E[D605]              	MOV     CX,[SECCNT]
 23461                                  WRTLP:
 23462 00003A8E E8C811                  	call	OPTIMIZE
 23463 00003A91 7248                    	JC	short SET_ACC_ERRW
 23464                                  	; 16/12/2022
 23465                                  	;JC	short ACC_ERRWJ
 23466                                  
 23467                                  ;M039
 23468                                  ;       DI = Next physical cluster.
 23469                                  ;       AX = # sectors remaining.
 23470                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23471                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23472                                  ;	     sectors, also termed an "Extent".)
 23473                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23474                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23475                                  ;
 23476                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23477                                  ;	are in Extent; they are being over-written.
 23478                                  
 23479 00003A93 57                      	push    di
 23480 00003A94 50                      	push    ax
 23481                                  
 23482                                  	; MSDOS 3.3
 23483                                  	; IBMDOS.COM (1987) - Offset 4497h
 23484                                  	;push	dx
 23485                                  	;push	bx
 23486                                  	;mov	al,[es:bp]
 23487                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23488                                  	;mov	bx,cx
 23489                                  	;add	bx,dx	; (bx = Extent end)
 23490                                  
 23491                                  ;	DX = Extent start.
 23492                                  ;	BX = Extent end.
 23493                                  ;	AL = Drive #.
 23494                                  
 23495                                  	;call	SETVISIT
 23496                                  
 23497                                  ;wbufq1:
 23498                                  	;;or	byte [di+5],20h
 23499                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23500                                  	;;cmp	al,[di+4]
 23501                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23502                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23503                                  	;;cmp	[di+6],dx
 23504                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23505                                  	;jb	short wbufq2
 23506                                  	;;cmp	[di+6],bx
 23507                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23508                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23509                                  
 23510                                  	;; Buffer sector is in the Extent
 23511                                  
 23512                                  	;;mov	word [di+4],20FFh
 23513                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23514                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23515                                  	;				; .buf_flags, AH = 0, reset/clear
 23516                                  	;call	SCANPLACE
 23517                                  ;wbufq2:
 23518                                  	;call	SKIPVISIT
 23519                                  	;jnz	short wbufq1
 23520                                  	;pop	bx
 23521                                  	;pop	dx
 23522                                  
 23523                                          ; MSDOS 6.0
 23524 00003A95 E82B01                  	call	DskWrtBufPurge		;DS trashed.
 23525                                  
 23526                                  ;ASSUME DS:NOTHING
 23527                                  ;M039
 23528                                  	; MSDOS 3.3 & MSDOS 6.0
 23529                                  ;hkn; SS override for DMAADD and ALLOWED
 23530 00003A98 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23531                                  	;mov	byte [ss:ALLOWED],38h
 23532 00003A9D 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23533                                  
 23534                                  ;	put logic from DWRITE in-line here so we can modify it
 23535                                  ;	for DISK FULL conditions.
 23536                                  
 23537                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23538                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23539                                  
 23540                                  	; 16/12/2022
 23541                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23542                                  	;call	DWRITE
 23543                                  
 23544                                  ;DWRITE_OKAY:
 23545                                  
 23546                                  	; 16/12/2022
 23547                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23548                                  	;pop	cx
 23549                                  	;pop	bx
 23550                                  	;push	ss
 23551                                  	;pop	ds
 23552                                  	;jc	short SET_ACC_ERRW
 23553                                  	;jcxz	WRTLAST
 23554                                  	;mov	dl,0
 23555                                  	;inc	word [LASTPOS]
 23556                                  	;jmp	short WRTLP
 23557                                  
 23558                                  	; 16/12/2022
 23559                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23560                                  DWRITE_LUP:
 23561                                  	; 23/07/2019 - Retro DOS v3.2
 23562                                  
 23563                                  	; MSDOS 6.0
 23564 00003AA3 E8F9FB                  	call	DSKWRITE
 23565 00003AA6 7417                    	jz	short DWRITE_OKAY
 23566                                  
 23567                                  ;;	int	3
 23568                                  
 23569 00003AA8 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23570 00003AAA 7423                    	jz	short DWRITE_DISK_FULL
 23571                                  
 23572                                  	; 16/12/2022
 23573                                  
 23574                                  ;;hkn; SS override
 23575 00003AAC 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23576 00003AB2 E819FC                  	call	HARDERRRW
 23577 00003AB5 3C01                    	CMP	AL,1		; Check for retry
 23578 00003AB7 74EA                    	JZ	short DWRITE_LUP
 23579                                  
 23580                                  	; 16/12/2022
 23581                                  	; 23/07/2019
 23582                                  	;POP	CX ; *4*
 23583                                  	;POP	BX ; *5*
 23584                                  	;
 23585                                  	;push	ss
 23586                                  	;pop	ds
 23587                                  	;
 23588                                  
 23589                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23590                                  
 23591                                  	; 16/12/2022
 23592 00003AB9 3C03                    	CMP	AL,3		; Check for FAIL
 23593 00003ABB F8                      	CLC
 23594 00003ABC 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23595 00003ABE F9                      	STC
 23596                                  
 23597                                  DWRITE_OKAY:
 23598                                  	; 16/12/2022
 23599                                  	; 23/07/2019
 23600                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23601 00003ABF 59                      	POP	CX ; *4*
 23602 00003AC0 5B                      	POP	BX ; *5*
 23603                                  
 23604                                  ;       CX = # sectors remaining.
 23605                                  ;       BX = Next physical cluster.
 23606                                  
 23607                                  ;hkn; SS override
 23608                                          ;Context DS
 23609                                  	; 16/12/2022
 23610                                  	;push	ss
 23611                                  	;pop	ds
 23612                                  
 23613                                  	; 10/02/2024
 23614                                  	; 16/12/2022
 23615                                  	;jc	short SET_ACC_ERRW
 23616                                  
 23617                                  	; 16/12/2022
 23618 00003AC1 16                      	push	ss
 23619 00003AC2 1F                      	pop	ds
 23620                                  
 23621                                  	; 10/02/2024
 23622 00003AC3 7216                    	jc	short SET_ACC_ERRW
 23623                                  
 23624 00003AC5 E317                    	JCXZ    WRTLAST
 23625                                  
 23626                                  	; 10/02/2024
 23627 00003AC7 B200                    	MOV	DL,0
 23628                                  	;xor	dl,dl ; 23/07/2019
 23629 00003AC9 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23630 00003ACD EBBF                    	JMP     short WRTLP
 23631                                  
 23632                                  	; 23/07/2019 - Retro DOS v3.2
 23633                                  	; 09/08/2018
 23634                                  	; MSDOS 6.0
 23635                                  DWRITE_DISK_FULL:
 23636                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23637                                  	; 16/12/2022
 23638 00003ACF 16                      	push	ss
 23639 00003AD0 1F                      	pop	ds
 23640 00003AD1 59                      	pop	cx		; unjunk stack
 23641 00003AD2 5B                      	pop	bx
 23642 00003AD3 C606[0B06]01            	mov	byte [DISK_FULL],1
 23643                                  	;stc
 23644 00003AD8 E933FF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23645                                  
 23646                                  SET_ACC_ERRW:
 23647                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23648                                  	; 10/02/2024
 23649                                  	; ds=ss
 23650 00003ADB E921FD                  	jmp	SET_ACC_ERR
 23651                                  
 23652                                  WRTLAST:
 23653 00003ADE A1[D405]                	MOV     AX,[BYTCNT2]
 23654 00003AE1 09C0                    	OR      AX,AX
 23655 00003AE3 7413                    	JZ	short FINWRT
 23656 00003AE5 A3[D205]                	MOV     [BYTCNT1],AX
 23657 00003AE8 E83D11                  	call	NEXTSEC
 23658 00003AEB 72EE                    	JC	short SET_ACC_ERRW
 23659 00003AED C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23660 00003AF3 E8D710                  	call	BUFWRT
 23661 00003AF6 72E3                    	JC	short SET_ACC_ERRW
 23662                                  FINWRT:
 23663 00003AF8 C43E[9E05]              	LES     DI,[THISSFT]
 23664 00003AFC A1[DE05]                	MOV     AX,[GROWCNT]
 23665 00003AFF 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23666 00003B03 09C0                    	OR      AX,AX
 23667 00003B05 7502                    	JNZ	short UPDATE_size
 23668 00003B07 E30F                    	JCXZ    SAMSIZ
 23669                                  UPDATE_size:
 23670                                  	;add	[es:di+11h],ax
 23671 00003B09 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23672                                  	;adc	[es:di+13h],cx
 23673 00003B0D 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23674                                  
 23675                                  ; Make sure that all other SFT's see this growth also.
 23676                                  
 23677 00003B11 B80100                  	MOV     AX,1
 23678                                  ;if installed
 23679                                  	;Call	JShare + 14 * 4
 23680 00003B14 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23681                                  ;else
 23682                                  ;	Call    ShSU
 23683                                  ;endif
 23684                                  
 23685                                  SAMSIZ:
 23686 00003B18 E97AFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23687                                  
 23688                                  	; 16/12/2022
 23689                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23690                                  ;SET_ACC_ERRW:
 23691                                  	;jmp	SET_ACC_ERR_DS
 23692                                  
 23693                                  WRTEOF:
 23694 00003B1B 89C1                    	MOV     CX,AX
 23695 00003B1D 09D1                    	OR      CX,DX
 23696 00003B1F 746A                    	JZ	short KILLFIL
 23697 00003B21 83E801                  	SUB     AX,1
 23698 00003B24 83DA00                  	SBB     DX,0
 23699                                  
 23700                                  	; MSDOS 3.3
 23701                                  	;;div	word [es:bp+2]
 23702                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23703                                  	;;mov	cl,[es:bp+5]
 23704                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 23705                                  	;shr	ax,cl
 23706                                  
 23707                                  	; MSDOS 6.0
 23708 00003B27 53                      	PUSH	BX
 23709                                  	;mov	bx,[es:bp+2]
 23710 00003B28 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23711 00003B2C E81A01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23712 00003B2F 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23713 00003B30 89CA                    	MOV	DX,CX			      ;M039
 23714 00003B32 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23715 00003B36 E83701                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23716                                  
 23717 00003B39 89C1                    	MOV     CX,AX
 23718 00003B3B E8E00F                  	call	FNDCLUS
 23719                                  SET_ACC_ERRWJ2:
 23720 00003B3E 729B                    	JC	short SET_ACC_ERRW
 23721                                  
 23722 00003B40 E324                    	JCXZ    RELFILE
 23723 00003B42 E89611                  	call	ALLOCATE
 23724                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23725                                  	; 16/12/2022
 23726 00003B45 7303                    	jnc	short UPDATE
 23727 00003B47 E9C4FE                  	JMP	WRTERR
 23728                                  UPDATE:
 23729 00003B4A C43E[9E05]              	LES	DI,[THISSFT]
 23730 00003B4E A1[CE05]                	MOV	AX,[BYTPOS]
 23731                                  	;mov	[es:di+11h],ax
 23732 00003B51 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23733 00003B55 A1[D005]                	MOV	AX,[BYTPOS+2]
 23734                                  	;mov	[es:di+13h],ax
 23735 00003B58 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23736                                  ;
 23737                                  ; Make sure that all other SFT's see this growth also.
 23738                                  ;
 23739 00003B5C B80200                  	MOV     AX,2
 23740                                  ;if installed
 23741                                  	;Call	JShare + 14 * 4
 23742 00003B5F FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23743                                  ;else
 23744                                  ;	Call    ShSU
 23745                                  ;endif
 23746 00003B63 31C9                    	XOR     CX,CX ; 0
 23747                                  	;jmp	ADDREC
 23748                                  	; 08/02/2024
 23749 00003B65 C3                      	retn
 23750                                  
 23751                                  	; 16/12/2022
 23752                                  ;WRTERRJ: 
 23753                                  	;JMP	WRTERR
 23754                                  
 23755                                  ;;;;;;;;;;;;;;;; 7/18/86
 23756                                  ;;;;;;;;;;;;;;;;
 23757                                  
 23758                                  RELFILE:
 23759                                  	; MSDOS 6.0
 23760 00003B66 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23761 00003B67 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23762                                  	;cmp	dx,[es:di+19h]
 23763 00003B6B 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23764 00003B6F 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23765                                  	;mov	[es:di+19h],0
 23766 00003B71 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23767                                  	;mov	dx,[es:di+0Bh]
 23768 00003B77 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23769                                  	;mov	[es:di+35h],dx
 23770 00003B7B 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23771                                  SKIPRESET:                            		;AN002; BL
 23772 00003B7F 07                      	POP     ES                    		;AN002; BL
 23773                                  ;
 23774 00003B80 BAFFFF                  	MOV     DX,0FFFFH
 23775 00003B83 E80312                  	call	RELBLKS
 23776                                  	; 16/12/2022
 23777                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23778 00003B86 73C2                    	jnc	short UPDATE
 23779                                  SET_ACC_ERRWJ:
 23780                                  	;JC	short SET_ACC_ERRWJ2
 23781                                  	;JMP	SHORT UPDATE
 23782                                  	; 16/12/2022
 23783                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss
 23784                                  	; 10/02/2024
 23785                                  	; ds=ss
 23786 00003B88 E974FC                  	jmp	SET_ACC_ERR
 23787                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23788                                  	;JC	short SET_ACC_ERRWJ2
 23789                                  	;JMP	SHORT UPDATE
 23790                                  
 23791                                  KILLFIL:
 23792 00003B8B 31DB                    	XOR     BX,BX
 23793 00003B8D 06                      	PUSH    ES
 23794 00003B8E C43E[9E05]              	LES     DI,[THISSFT]
 23795                                  	;mov	[es:di+19h],bx
 23796 00003B92 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23797                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23798 00003B96 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23799                                  	;xchg	bx,[es:di+0Bh]
 23800 00003B9A 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23801 00003B9E 07                      	POP	ES
 23802                                  
 23803 00003B9F 09DB                    	OR	BX,BX
 23804                                  	;JZ	short UPDATEJ
 23805                                  	; 16/12/2022
 23806 00003BA1 74A7                    	jz	short UPDATE
 23807                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23808                                  	;jz	short UPDATEJ
 23809                                  
 23810                                  ;; 10/23/86 FastOpen update
 23811 00003BA3 06                      	PUSH	ES              ; since first cluster # is 0
 23812 00003BA4 55                      	PUSH	BP              ; we must delete the old cache entry
 23813 00003BA5 50                      	PUSH	AX
 23814 00003BA6 51                      	PUSH	CX
 23815 00003BA7 52                      	PUSH	DX
 23816 00003BA8 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23817                                  	; 15/12/2022
 23818 00003BAC 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23819                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23820                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23821 00003BB0 89D9                    	MOV	CX,BX                    ; first cluster #
 23822 00003BB2 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23823 00003BB4 E8AFEA                  	call	FastOpen_Update          ; call fastopen
 23824 00003BB7 5A                      	POP	DX
 23825 00003BB8 59                      	POP	CX
 23826 00003BB9 58                      	POP	AX
 23827 00003BBA 5D                      	POP	BP
 23828 00003BBB 07                      	POP	ES
 23829                                  ;; 10/23/86 FastOpen update
 23830                                  
 23831 00003BBC E8C811                  	call	RELEASE
 23832 00003BBF 72C7                    	JC	short SET_ACC_ERRWJ
 23833                                  UPDATEJ:
 23834                                  	; 20/11/2022
 23835 00003BC1 EB87                    	JMP	short UPDATE ; 10/08/2018
 23836                                  
 23837                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23838                                  ;----------------------------------------------------------------------------
 23839                                  ;
 23840                                  ; Procedure Name : DskWrtBufPurge
 23841                                  ;
 23842                                  ; Inputs:
 23843                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23844                                  ;	     sectors, also termed an "Extent".)
 23845                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23846                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23847                                  ;
 23848                                  ; Function:
 23849                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23850                                  ;	are in Extent; they are being over-written.
 23851                                  ;
 23852                                  ; Outputs:
 23853                                  ;       (Same as Input.)
 23854                                  ; Uses:
 23855                                  ;       All registers except DS,AX,SI,DI preserved.
 23856                                  ;       SS override for all global variables.
 23857                                  ;----------------------------------------------------------------------------
 23858                                  ;M039: Created
 23859                                  
 23860                                  ;procedure   DskWrtBufPurge,NEAR
 23861                                  ;
 23862                                  ;ASSUME  DS:NOTHING
 23863                                  
 23864                                  ; 04/05/2019 - Retro DOS v4.0
 23865                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23866                                  
 23867                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23868                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23869                                  
 23870                                  DskWrtBufPurge:
 23871                                  	;SaveReg <bx,cx>
 23872 00003BC3 53                      	push	bx
 23873 00003BC4 51                      	push	cx
 23874                                  
 23875 00003BC5 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23876 00003BCA 89DE                    	mov	si,bx
 23877 00003BCC 01D1                    	add	cx,dx
 23878 00003BCE 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23879                                  
 23880                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23881                                  	;;mov	al,[es:bp+0]
 23882                                  	;mov	al,[es:bp+DPB.DRIVE]
 23883                                  	; 15/12/2022
 23884 00003BD1 268A4600                	mov	al,[es:bp]
 23885                                  
 23886                                  ;	BX:DX = Extent start.
 23887                                  ;	SI:CX = Extent end + 1.
 23888                                  ;	AL = Drive #
 23889                                  
 23890 00003BD5 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23891 00003BDB 7431                    	je	short nosc		; -no, jump.
 23892                                  
 23893                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23894                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23895                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23896                                  
 23897 00003BDD 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23898 00003BE2 752A                    	jne	short nosc		; -no, jump.
 23899                                  
 23900 00003BE4 50                      	push    ax
 23901 00003BE5 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23902 00003BE9 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23903                                  
 23904                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23905                                  	;jbe	short sc5		; -yes, jump.
 23906                                  
 23907 00003BEE 39FE                    	cmp	si,di
 23908 00003BF0 7502                    	jne	short sc01
 23909 00003BF2 39C1                    	cmp	cx,ax
 23910                                  sc01: 
 23911 00003BF4 7617                    	jbe	short sc5
 23912                                  
 23913 00003BF6 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23914 00003BFB 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23915                                  	
 23916                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23917                                  	;jae	short sc5		; -yes, jump.
 23918                                  
 23919 00003BFE 39FB                    	cmp	bx,di
 23920 00003C00 7502                    	jne	short sc02
 23921 00003C02 39C2                    	cmp	dx,ax
 23922                                  sc02:
 23923 00003C04 7307                    	jnb	short sc5
 23924                                  
 23925 00003C06 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23926                                  sc5:	
 23927 00003C0D 58                      	pop     ax
 23928                                  
 23929                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23930                                  ;	written.
 23931                                  
 23932                                  nosc:	
 23933 00003C0E E87B1B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23934                                  
 23935                                  _bufq:	
 23936                                  	;cmpo	al,[di+4]
 23937 00003C11 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23938 00003C14 7527                    	jne	short bufq5		; -no, jump.
 23939                                  
 23940                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23941                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23942                                  
 23943                                  	;cmp	bx,[di+8]
 23944 00003C16 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23945 00003C19 7503                    	jne	short bufq04
 23946                                  	;cmp	dx,[di+6]
 23947 00003C1B 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23948                                  bufq04:
 23949 00003C1E 771D                    	ja	short bufq5
 23950                                  
 23951                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23952                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23953                                  
 23954                                  	;cmp	si,[di+8]
 23955 00003C20 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23956 00003C23 7503                    	jne	short bufq05
 23957                                  	;cmp	cx,[di+6]
 23958 00003C25 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23959                                  bufq05:
 23960 00003C28 7613                    	jbe	short bufq5
 23961                                  
 23962                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23963                                  
 23964                                  	;test	byte [di+5],40h
 23965 00003C2A F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23966 00003C2E 7403                    	jz	short bufq4		; -no, jump.
 23967 00003C30 E8D71D                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23968                                  bufq4:
 23969                                  	;mov	word [di+4],20FFh
 23970 00003C33 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23971                                  
 23972 00003C38 E8631B                  	call	SCANPLACE
 23973 00003C3B EB02                    	jmp     short bufq6
 23974                                  bufq5: 
 23975 00003C3D 8B3D                    	mov     di,[di]
 23976                                  	;mov	di,[di+BUFFINFO.buf_next]
 23977                                  bufq6: 
 23978 00003C3F 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23979 00003C44 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23980                                  	
 23981                                  	;RestoreReg <cx,bx>
 23982 00003C46 59                      	pop	cx
 23983 00003C47 5B                      	pop	bx
 23984 00003C48 C3                      	retn
 23985                                  
 23986                                  ;EndProc DskWrtBufPurge
 23987                                  
 23988                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23989                                  ;----------------------------------------------------------------------------
 23990                                  ;
 23991                                  ; Procedure Name : DIV32
 23992                                  ;
 23993                                  ; Inputs:
 23994                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23995                                  ; Function:
 23996                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23997                                  ; Outputs:
 23998                                  ;       CX:AX = quotient , DX= remainder
 23999                                  ; Uses:
 24000                                  ;       All registers except AX,CX,DX preserved.
 24001                                  ;----------------------------------------------------------------------------
 24002                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 24003                                  
 24004                                  ; 04/05/2019 - Retro DOS v4.0
 24005                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 24006                                  
 24007                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24008                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 24009                                  
 24010                                  DIV32:
 24011 00003C49 81FB0002                	cmp	bx,512
 24012 00003C4D 7515                    	jne	short div5
 24013                                  
 24014 00003C4F 89D1                    	mov	cx,dx
 24015 00003C51 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 24016 00003C53 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 24017 00003C57 88E0                    	mov	al,ah
 24018 00003C59 88CC                    	mov	ah,cl
 24019 00003C5B 88E9                    	mov	cl,ch
 24020 00003C5D 30ED                    	xor	ch,ch
 24021 00003C5F D1E9                    	shr	cx,1
 24022 00003C61 D1D8                    	rcr	ax,1
 24023 00003C63 C3                      	retn
 24024                                  div5:	
 24025 00003C64 89C1                    	mov	cx,ax
 24026 00003C66 89D0                    	mov	ax,dx
 24027 00003C68 31D2                    	xor	dx,dx
 24028 00003C6A F7F3                    	div	bx              ; 0:AX/BX
 24029 00003C6C 91                      	xchg	cx,ax
 24030 00003C6D F7F3                    	div	bx              ; DX:AX/BX
 24031 00003C6F C3                      	retn
 24032                                  
 24033                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 24034                                  ;----------------------------------------------------------------------------
 24035                                  ;
 24036                                  ; Procedure Name : SHR32
 24037                                  ;
 24038                                  ; Inputs:
 24039                                  ;	DX:AX = 32 bit sector number
 24040                                  ; Function:
 24041                                  ;       Perform 32 bit shift right
 24042                                  ; Outputs:
 24043                                  ;	AX = cluster number
 24044                                  ;	ZF = 1 if no error
 24045                                  ;	   = 0 if error (cluster number > 64k)
 24046                                  ; Uses:
 24047                                  ;       DX,CX
 24048                                  ;---------------------------------------------------------------------------
 24049                                  ; M017	- SHR32 rewritten for better performance
 24050                                  ; M039	- Additional optimization
 24051                                  
 24052                                  ; 04/05/2019 - Retro DOS v4.0
 24053                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 24054                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24055                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 24056                                  
 24057                                  SHR32:
 24058                                  	;mov	cl,[es:bp+5]
 24059 00003C70 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 24060 00003C74 30ED                    	xor	ch,ch	    ;ZF=1
 24061 00003C76 E306                    	jcxz	norota
 24062                                  
 24063                                  rotashft2:
 24064 00003C78 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 24065 00003C7A D1D8                    	rcr	ax,1	    ;ZF not affected.
 24066 00003C7C E2FA                    	loop	rotashft2
 24067                                  norota:
 24068 00003C7E C3                      	retn
 24069                                  
 24070                                  ;============================================================================
 24071                                  ; DIR.ASM, MSDOS 6.0, 1991
 24072                                  ;============================================================================
 24073                                  ; 27/07/2018 - Retro DOS v3.0
 24074                                  ; 19/05/2019 - Retro DOS v4.0
 24075                                  
 24076                                  ;	TITLE	DIR - Directory and path cracking
 24077                                  ;	NAME	Dir
 24078                                  
 24079                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 24080                                  ;---------------------------------------------------------------------------
 24081                                  ;
 24082                                  ; Procedure Name : FINDENTRY,SEARCH
 24083                                  ;
 24084                                  ; Inputs:
 24085                                  ;	[THISDPB] set
 24086                                  ;	[SECCLUSPOS] = 0
 24087                                  ;	[DIRSEC] = Starting directory sector number
 24088                                  ;	[CLUSNUM] = Next cluster of directory
 24089                                  ;	[CLUSFAC] = Sectors/Cluster
 24090                                  ;	[NAME1] = Name to look for
 24091                                  ; Function:
 24092                                  ;	Find file name in disk directory.
 24093                                  ;	"?" matches any character.
 24094                                  ; Outputs:
 24095                                  ;	Carry set if name not found
 24096                                  ;	ELSE
 24097                                  ;	Zero set if attributes match (always except when creating)
 24098                                  ;	AH = Device ID (bit 7 set if not disk)
 24099                                  ;	[THISDPB] = Base of drive parameters
 24100                                  ;	DS = DOSGROUP
 24101                                  ;	ES = DOSGROUP
 24102                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 24103                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 24104                                  ;	[CURBUF] has directory record with match
 24105                                  ;	[NAME1] has file name
 24106                                  ;	[LASTENT] is entry number of the entry
 24107                                  ; All other registers destroyed.
 24108                                  ;----------------------------------------------------------------------------
 24109                                  
 24110                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 24111                                  ;hkn; this point.
 24112                                  
 24113                                  SEARCH:
 24114                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24115                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 24116                                  
 24117                                  	; 19/05/2019 - Retro DOS v4.0
 24118                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 24119                                  
 24120                                  	; 27/07/2018 - Retro DOS v3.0
 24121                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 24122                                  	; 15/03/2018 - Retro DOS v2.0
 24123                                  
 24124                                  	; 24/01/2024
 24125                                  
 24126                                  	;entry	FindEntry
 24127                                  FINDENTRY:
 24128 00003C7F E80B04                  	call	STARTSRCH
 24129 00003C82 A0[6B05]                	MOV	AL,[ATTRIB]
 24130                                  	;and	al,9Eh
 24131 00003C85 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 24132                                  	;cmp	al,8
 24133 00003C87 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 24134 00003C89 7503                    	JNZ	short NOTVOLSRCH	; No
 24135 00003C8B E86601                  	CALL	SETROOTSRCH		; Yes force search of root
 24136                                  NOTVOLSRCH:
 24137 00003C8E E8F800                  	CALL	GETENTRY
 24138                                  	;JNC	short SRCH
 24139                                  	;JMP	SETESRET
 24140                                  	; 24/01/2024
 24141 00003C91 723F                    	jc	short SETESRET
 24142                                  
 24143                                  	;entry	Srch
 24144                                  SRCH:
 24145 00003C93 1E                      	PUSH	DS
 24146 00003C94 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24147                                  
 24148                                  ;	(DS:BX) = directory entry address
 24149                                  
 24150 00003C98 8A27                    	mov	ah,[BX]
 24151                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 24152 00003C9A 08E4                    	OR	AH,AH			; End of directory?
 24153 00003C9C 7437                    	JZ	short FREE
 24154                                  
 24155                                  ;hkn; SS override
 24156 00003C9E 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 24157 00003CA3 7430                    	JZ	short FREE
 24158                                  	;test	byte [bx+0Bh],8
 24159 00003CA5 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 24160                                  					; Volume ID file?
 24161 00003CA9 7405                    	JZ	short CHKFNAM 		; NO
 24162                                  
 24163                                  ;hkn; SS override
 24164 00003CAB 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 24165                                  CHKFNAM:
 24166                                  ;	Context ES
 24167 00003CB0 8CD6                    	MOV	SI,SS
 24168 00003CB2 8EC6                    	MOV	ES,SI
 24169 00003CB4 89DE                    	MOV	SI,BX
 24170                                  
 24171                                  ;hkn; NAME1 is in DOSDATA
 24172 00003CB6 BF[4B05]                	MOV	DI,NAME1
 24173                                  ;;;;; 7/29/86
 24174                                  
 24175                                  ;hkn; SS override for NAME1
 24176                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 24177                                  	;JNZ	short NO_E5
 24178                                  	;MOV	BYTE [SS:NAME1],05H
 24179                                  	; 22/09/2023
 24180 00003CB9 26803DE5                	cmp	byte [es:di],0E5h
 24181 00003CBD 7504                    	jnz	short NO_E5
 24182 00003CBF 26C60505                	mov	byte [es:di],05h
 24183                                  NO_E5:
 24184                                  ;;;;; 7/29/86
 24185 00003CC3 E86100                  	CALL	MetaCompare
 24186 00003CC6 7429                    	JZ	short FOUND
 24187 00003CC8 1F                      	POP	DS
 24188                                  
 24189                                  	;entry	NEXTENT
 24190                                  NEXTENT:
 24191 00003CC9 C42E[8A05]              	LES	BP,[THISDPB]
 24192 00003CCD E86600                  	CALL	NEXTENTRY
 24193 00003CD0 73C1                    	JNC	short SRCH
 24194                                  	;JMP	SHORT SETESRET
 24195                                  	; 24/01/2024
 24196                                  SETESRET:
 24197 00003CD2 16                      	PUSH	SS
 24198 00003CD3 07                      	POP	ES
 24199 00003CD4 C3                      	retn
 24200                                  FREE:
 24201 00003CD5 1F                      	POP	DS
 24202 00003CD6 8B0E[4803]              	MOV	CX,[LASTENT]
 24203 00003CDA 3B0E[D805]              	CMP	CX,[ENTFREE]
 24204 00003CDE 7304                    	JAE	short TSTALL
 24205 00003CE0 890E[D805]              	MOV	[ENTFREE],CX
 24206                                  TSTALL:
 24207 00003CE4 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 24208                                  NEXTENTJ:
 24209 00003CE8 74DF                    	je	short NEXTENT 		; No - continue search
 24210 00003CEA 890E[DA05]              	MOV	[ENTLAST],CX
 24211 00003CEE F9                      	STC
 24212 00003CEF EBE1                    	JMP	SHORT SETESRET
 24213                                  
 24214                                  FOUND:
 24215                                  ; We have a file with a matching name. We must now consider the attributes:
 24216                                  ; ATTRIB	Action
 24217                                  ; ------	------
 24218                                  ; Volume_ID	Is Volume_ID in test?
 24219                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 24220                                  ;		If create then Is ATTRIB equal to test?
 24221                                  
 24222 00003CF1 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 24223 00003CF3 1F                      	POP	DS
 24224 00003CF4 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 24225                                  	;and	ah,9Eh
 24226 00003CF8 80E4DE                  	AND	AH,~attr_ignore
 24227                                  	;lea	si,[si+15]
 24228 00003CFB 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 24229                                  					; point to first cluster field
 24230                                  	;test	ch,8
 24231 00003CFE F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 24232 00003D01 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 24233                                  	;test	ah,8
 24234 00003D03 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 24235                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 24236                                  	; 16/12/2022
 24237 00003D06 74C1                    	jz	short NEXTENT ; 19/05/2019
 24238                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24239                                  	;JZ	short NEXTENTJ
 24240 00003D08 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24241 00003D0A EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24242                                  check_one_volume_id:
 24243                                  	;CMP	ah,8
 24244 00003D0C 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24245                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24246                                  	; 16/12/2022
 24247 00003D0F 74B8                    	je	short NEXTENT ; 19/05/2019
 24248                                  	;JZ	short NEXTENTJ
 24249 00003D11 E88D03                  	CALL	MatchAttributes
 24250 00003D14 7407                    	JZ	SHORT RETFF
 24251 00003D16 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24252                                  	; 16/12/2022
 24253                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24254 00003D1B 74AC                    	jz	short NEXTENT ; 19/05/2019
 24255                                  RETFF:
 24256 00003D1D C42E[8A05]              	LES	BP,[THISDPB]
 24257                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24258                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24259                                  	; 15/12/2022
 24260 00003D21 268A6600                	MOV	AH,[ES:BP]
 24261                                  ;SETESRET:
 24262                                  	;PUSH	SS
 24263                                  	;POP	ES
 24264                                  	;retn
 24265                                  	; 24/01/2024
 24266 00003D25 EBAB                    	jmp	short SETESRET
 24267                                  
 24268                                  ;----------------------------------------------------------------------------
 24269                                  ;
 24270                                  ; Procedure Name : MetaCompare
 24271                                  ;
 24272                                  ; Inputs:
 24273                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24274                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24275                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24276                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24277                                  ; Function:
 24278                                  ;	Compare FCB style names allowing for ? match to any char
 24279                                  ; Outputs:
 24280                                  ;	Zero if match else NZ
 24281                                  ; Destroys CX,SI,DI all others preserved
 24282                                  ;----------------------------------------------------------------------------
 24283                                  
 24284                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24285                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24286                                  
 24287                                  MetaCompare:
 24288 00003D27 B90B00                  	MOV	CX,11
 24289                                  WILDCRD:
 24290 00003D2A F3A6                    	REPE	CMPSB
 24291 00003D2C 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24292                                  CHECK_META:
 24293 00003D2E 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24294 00003D33 74F5                    	JZ	short WILDCRD
 24295                                  MetaRet:
 24296 00003D35 C3                       	retn				; Zero set, Match
 24297                                  
 24298                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24299                                  ;----------------------------------------------------------------------------
 24300                                  ;
 24301                                  ; Procedure Name : NEXTENTRY
 24302                                  ;
 24303                                  ; Inputs:
 24304                                  ;	Same as outputs of GETENTRY, above
 24305                                  ; Function:
 24306                                  ;	Update BX, and [LASTENT] for next directory entry.
 24307                                  ;	Carry set if no more.
 24308                                  ;----------------------------------------------------------------------------
 24309                                  
 24310                                  NEXTENTRY:
 24311                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24312                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24313                                  
 24314                                  	; 19/05/2019 - Retro DOS v4.0
 24315                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24316                                  
 24317                                  	; 27/07/2018 - Retro DOS v3.0
 24318                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24319                                  	; 15/03/2018 - Retro DOS v2.0
 24320                                  
 24321 00003D36 A1[4803]                	MOV	AX,[LASTENT]
 24322 00003D39 3B06[DA05]              	CMP	AX,[ENTLAST]
 24323 00003D3D 7422                    	JZ	short NONE
 24324 00003D3F 40                      	INC	AX
 24325                                  	;ADD	BX,32
 24326 00003D40 8D5F20                  	LEA	BX,[BX+32]
 24327 00003D43 39D3                    	CMP	BX,DX
 24328                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24329                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24330                                  	; 16/12/2022
 24331 00003D45 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24332 00003D47 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24333 00003D4B FEC3                    	INC	BL
 24334 00003D4D 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24335 00003D51 7215                    	JB	short SAMECLUS
 24336 00003D53 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24337 00003D57 E88816                  	call	IsEOF
 24338 00003D5A 7305                    	JAE	short NONE
 24339                                  	; 23/07/2019
 24340 00003D5C 83FB02                  	CMP	BX,2
 24341                                  	;JB	short NONE
 24342                                  	;JMP	short GETENT
 24343                                  	; 16/12/2022
 24344 00003D5F 732B                    	jnb	short GETENT
 24345                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24346                                  	;JB	short NONE
 24347                                  	;JMP	short GETENT
 24348                                  NONE:
 24349 00003D61 F9                      	STC
 24350 00003D62 C3                      	retn
 24351                                  HAVIT:
 24352 00003D63 A3[4803]                	MOV	[LASTENT],AX
 24353 00003D66 F8                      	CLC
 24354                                  nextentry_retn:
 24355 00003D67 C3                      	retn
 24356                                  
 24357                                  SAMECLUS:
 24358 00003D68 881E[7305]              	MOV	[SECCLUSPOS],BL
 24359 00003D6C A3[4803]                	MOV	[LASTENT],AX
 24360 00003D6F 1E                      	PUSH	DS
 24361 00003D70 C53E[E205]              	LDS	DI,[CURBUF]
 24362                                  	; 19/05/2019
 24363                                  	; MSDOS 6.0
 24364                                  	;;mov	dx,[di+8]
 24365                                  	; 23/09/2023
 24366                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24367                                  ;hkn; SS override
 24368                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24369                                  
 24370                                  ; 14/02/2024
 24371                                  %if 0
 24372                                  	; 23/09/2023
 24373                                  	mov	si,[di+BUFFINFO.buf_sector+2]
 24374                                  	
 24375                                  	;mov	dx,[di+6]
 24376                                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24377                                  
 24378                                  	;inc	dx ; MSDOS 3.3
 24379                                  	; MSDOS 6.0
 24380                                  	;ADD	DX,1				;AN000; >32mb
 24381                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24382                                  	; 23/09/2023
 24383                                  	inc	dx
 24384                                  	jnz	short nextexntry_fc
 24385                                  	inc	si
 24386                                  	;inc	word [SS:HIGH_SECTOR]
 24387                                  nextexntry_fc:
 24388                                  	; 23/09/2023
 24389                                  	mov	[SS:HIGH_SECTOR],si
 24390                                  	; MSDOS 3.3 & MSDOS 6.0
 24391                                  	POP	DS
 24392                                  %else
 24393                                  	; 14/02/2024 - Retro DOS v4.2
 24394 00003D74 C55506                  	lds	dx,[di+BUFFINFO.buf_sector]
 24395 00003D77 8CDE                    	mov	si,ds
 24396 00003D79 1F                      	pop	ds
 24397 00003D7A 42                      	inc	dx
 24398 00003D7B 7501                    	jnz	short nextexntry_fc
 24399 00003D7D 46                      	inc	si
 24400                                  nextexntry_fc:
 24401 00003D7E 8936[0706]              	mov	[HIGH_SECTOR],si
 24402                                  %endif
 24403                                  
 24404 00003D82 E868F8                  	call	FIRSTCLUSTER
 24405 00003D85 31DB                    	XOR	BX,BX
 24406 00003D87 EB21                    	JMP	short SETENTRY
 24407                                  
 24408                                  ;----------------------------------------------------------------------------
 24409                                  ;
 24410                                  ; Procedure Name : GETENTRY
 24411                                  ;
 24412                                  ; Inputs:
 24413                                  ;	[LASTENT] has directory entry
 24414                                  ;	ES:BP points to drive parameters
 24415                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24416                                  ; Function:
 24417                                  ;	Locates directory entry in preparation for search
 24418                                  ;	GETENT provides entry for passing desired entry in AX
 24419                                  ; Outputs:
 24420                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24421                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24422                                  ;	[LASTENT] = New directory entry number
 24423                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24424                                  ;	Carry set if error (currently user FAILed to I 24)
 24425                                  ;----------------------------------------------------------------------------
 24426                                  
 24427                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24428                                  GETENTRY:
 24429                                  	; 27/07/2018 - Retro DOS v3.0
 24430 00003D89 A1[4803]                	MOV	AX,[LASTENT]
 24431                                  
 24432                                  	;entry	GETENT
 24433                                  GETENT:
 24434 00003D8C A3[4803]                	MOV	[LASTENT],AX
 24435                                  ;
 24436                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24437                                  ; directory.
 24438                                  ;
 24439 00003D8F B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24440 00003D91 D3C0                    	rol	ax,cl			; keep hight order bits
 24441 00003D93 89C2                    	mov	dx,ax
 24442                                  	; 19/05/2019 - Retro DOS v4.0
 24443                                  	;and	ax,0FFE0h
 24444                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24445                                  	;and	ax,~(32-1)		; mask off high order bits
 24446                                  	; 16/12/2022
 24447 00003D95 24E0                    	and	al,0E0h ; ~31
 24448 00003D97 83E21F                  	and	dx,1Fh
 24449                                  	;and	dx,32-1			; mask off low order bits
 24450                                  ;
 24451                                  ; DX:AX contain the byte offset of the required directory entry from the
 24452                                  ; beginning of the directory. Convert this to a sector number. Round the
 24453                                  ; sector size down to a multiple of 32.
 24454                                  ;
 24455                                  	;mov	bx,[es:bp+2]
 24456 00003D9A 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24457 00003D9E 80E3E0                  	and	bl,0E0h
 24458                                  	;AND	BL,255-31		; Must be multiple of 32
 24459 00003DA1 F7F3                    	DIV	BX
 24460                                  	; 14/02/2024
 24461                                  	;MOV	BX,DX			; Position within sector
 24462                                  				; NOTE: This BX value is not used in DIRREAD
 24463                                  				; Erdogan Tan - 14/02/2024
 24464                                  	;PUSH	BX
 24465 00003DA3 52                      	push	dx
 24466                                  	;
 24467 00003DA4 E8F2F7                  	call	DIRREAD
 24468 00003DA7 5B                      	POP	BX
 24469                                  	;retc
 24470 00003DA8 72BD                    	jc	short nextentry_retn
 24471                                  SETENTRY:
 24472 00003DAA 8B16[E205]              	MOV	DX,[CURBUF]
 24473                                  	;add	dx,16 ; MSDOS 3.3
 24474                                  	;add	dx,20 ; MSDOS 6.0 
 24475 00003DAE 83C214                  	ADD	DX,BUFINSIZ
 24476 00003DB1 01D3                    	ADD	BX,DX
 24477                                  	;add	dx,[es:bp+2]
 24478 00003DB3 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24479                                  	; 29/12/2022
 24480                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24481 00003DB7 F8                      	clc
 24482 00003DB8 C3                      	retn
 24483                                  
 24484                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24485                                  ;----------------------------------------------------------------------------
 24486                                  ;
 24487                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24488                                  ;
 24489                                  ; Inputs:
 24490                                  ;	BX cluster number of start of directory
 24491                                  ;	ES:BP Points to DPB
 24492                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24493                                  ; Function:
 24494                                  ;	Set up a directory search
 24495                                  ; Outputs:
 24496                                  ;	[DIRSTART] = BX
 24497                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24498                                  ;	Carry set if error (currently user FAILed to I 24)
 24499                                  ; destroys AX,DX,BX
 24500                                  ;----------------------------------------------------------------------------
 24501                                  
 24502                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24503                                  SETDIRSRCH:
 24504 00003DB9 09DB                    	OR	BX,BX
 24505 00003DBB 7437                    	JZ	short SETROOTSRCH
 24506 00003DBD 891E[C205]              	MOV	[DIRSTART],BX
 24507                                  	;mov	al,[es:bp+4]
 24508 00003DC1 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24509 00003DC5 FEC0                    	INC	AL
 24510 00003DC7 A2[7705]                	MOV	[CLUSFAC],AL
 24511                                  
 24512                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24513                                  	;SAVE	<SI>
 24514 00003DCA 56                      	push	si
 24515                                  	;test	byte [FastOpenFlg],2
 24516 00003DCB F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24517 00003DD0 7507                    	JNZ	short UNP_OK
 24518                                  
 24519                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24520                                  	;invoke	UNPACK
 24521 00003DD2 E82416                  	call	UNPACK
 24522 00003DD5 7302                    	JNC	short UNP_OK
 24523                                  	;RESTORE <SI>
 24524 00003DD7 5E                      	pop	si
 24525                                  	;return
 24526 00003DD8 C3                      	retn
 24527                                  
 24528                                  UNP_OK:
 24529 00003DD9 893E[BC05]              	MOV	[CLUSNUM],DI
 24530 00003DDD 89DA                    	MOV	DX,BX
 24531 00003DDF 30DB                    	XOR	BL,BL
 24532 00003DE1 881E[7305]              	MOV	[SECCLUSPOS],BL
 24533                                  	;invoke	FIGREC
 24534 00003DE5 E8CF0E                  	call	FIGREC
 24535                                  	;RESTORE <SI>
 24536 00003DE8 5E                      	pop	si
 24537                                  	
 24538                                  	; 19/05/2019 - Retro DOS v4.0
 24539                                  
 24540                                  	; MSDOS 6.0
 24541                                  	;PUSH	DX			   ;AN000; >32mb
 24542                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24543                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24544                                  	;POP	DX			   ;AN000; >32mb
 24545                                  
 24546                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24547                                  	;push	dx
 24548                                  	;mov	dx,[HIGH_SECTOR]
 24549                                  	;mov	[DIRSEC+2],dx
 24550                                  	;pop	dx
 24551                                  	;MOV	[DIRSEC],dx
 24552                                  	; 16/12/2022
 24553 00003DE9 A1[0706]                	mov	ax,[HIGH_SECTOR]
 24554 00003DEC A3[C005]                	mov	[DIRSEC+2],AX
 24555 00003DEF 8916[BE05]              	MOV	[DIRSEC],DX
 24556                                  
 24557                                  	; 16/12/2022
 24558                                  	; cf=0 (at the return of FIGREC)
 24559                                  	;CLC
 24560 00003DF3 C3                      	retn
 24561                                  
 24562                                  	;entry	SETROOTSRCH
 24563                                  SETROOTSRCH:
 24564 00003DF4 31C0                    	XOR	AX,AX
 24565 00003DF6 A3[C205]                	MOV	[DIRSTART],AX
 24566                                  	; 22/09/2023
 24567 00003DF9 A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24568 00003DFC A2[7305]                	MOV	[SECCLUSPOS],AL
 24569 00003DFF 48                      	DEC	AX
 24570 00003E00 A3[BC05]                	MOV	[CLUSNUM],AX
 24571                                  	;mov	ax,[es:bp+0Bh]
 24572 00003E03 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24573                                  	; 19/05/2019
 24574                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24575                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24576 00003E07 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24577 00003E0B 29D0                    	SUB	AX,DX
 24578 00003E0D A2[7705]                	MOV	[CLUSFAC],AL
 24579 00003E10 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24580                                  	; 22/09/2023
 24581                                  	; MSDOS 6.0
 24582                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24583 00003E14 F8                      	CLC
 24584 00003E15 C3                      	retn
 24585                                  
 24586                                  ;============================================================================
 24587                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24588                                  ;============================================================================
 24589                                  ; 27/07/2018 - Retro DOS v3.0
 24590                                  ; 19/05/2019 - Retro DOS v4.0 
 24591                                  
 24592                                  ;	TITLE	DIR2 - Directory and path cracking
 24593                                  ;	NAME	Dir2
 24594                                  
 24595                                  ;Break	<GETPATH -- PARSE A WFP>
 24596                                  ;----------------------------------------------------------------------------
 24597                                  ;
 24598                                  ; Procedure Name : GETPATH
 24599                                  ;
 24600                                  ; Inputs:
 24601                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24602                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24603                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24604                                  ;		( = -1 if current dir not involved, else
 24605                                  ;		 Points to first char after last "/" of current dir part)
 24606                                  ;	[THISCDS] Points to CDS being used
 24607                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24608                                  ;	[NoSetDir] set
 24609                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24610                                  ; Function:
 24611                                  ;	Crack the path
 24612                                  ; Outputs:
 24613                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24614                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24615                                  ;	ID1 field of [THISCDS] updated appropriately
 24616                                  ;	[ATTRIB] = [SATTRIB]
 24617                                  ;	ES:BP Points to DPB
 24618                                  ;	Carry set if bad path
 24619                                  ;	   SI Points to path element causing failure
 24620                                  ;	   Zero set
 24621                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24622                                  ;	      start a search on the last directory
 24623                                  ;	      CL is zero if there is a bad name in the path
 24624                                  ;	      CL is non-zero if the name was simply not found
 24625                                  ;		 [ENTFREE] may have free spot in directory
 24626                                  ;		 [NAME1] is the name.
 24627                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24628                                  ;	   Zero reset
 24629                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24630                                  ;		or path too long or malformed path
 24631                                  ;	ELSE
 24632                                  ;	   [CurBuf] = -1 if root directory
 24633                                  ;	   [CURBUF] contains directory record with match
 24634                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24635                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24636                                  ;	   AH = device ID
 24637                                  ;	      bit 7 of AH set if device SI and BX
 24638                                  ;	      will point DOSGROUP relative The firclus
 24639                                  ;	      field of the device entry contains the device pointer
 24640                                  ;	   [NAME1] Has name looked for
 24641                                  ;	   If last element is a directory zero is set and:
 24642                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24643                                  ;	      are set up to start a search on it.
 24644                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24645                                  ;	      like that for a file (except for zero flag)
 24646                                  ;	   If last element is a file zero is reset
 24647                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24648                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24649                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24650                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24651                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24652                                  ; DS preserved, Others destroyed
 24653                                  ;---------------------------------------------------------------------------
 24654                                  
 24655                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24656                                  ;hkn; DS already set up at this point.
 24657                                  
 24658                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24659                                  GETPATH:
 24660                                  	;mov	word [CREATING],0E500h
 24661 00003E16 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24662                                  
 24663                                  ; Same as GetPath only CREATING and DELALL already set
 24664                                  
 24665                                  	;entry	GetPathNoSet
 24666                                  GetPathNoSet:
 24667                                  	;mov	byte [EXTERR_LOCUS],2	
 24668 00003E1C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24669 00003E21 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24670                                  
 24671                                  ; See if the input indicates a device that has already been detected. If so,
 24672                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24673                                  
 24674 00003E27 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24675                                  	;cmp	word [DI+1],5C3Ah
 24676                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24677 00003E2B 817D013A5C              	cmp	word [DI+1],':\'
 24678 00003E30 7437                    	JZ	short CrackIt
 24679                                  
 24680                                  ; Let ChkDev find it in the device list
 24681                                  
 24682 00003E32 83C703                  	ADD	DI,3
 24683                                  	; 18/08/2018
 24684                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24685                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24686                                  	; 16/12/2022
 24687                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24688 00003E35 E89E00                  	CALL	CHKDEV
 24689 00003E38 722D                    	JC	short InternalError
 24690                                  
 24691                                  Build_devJ:
 24692 00003E3A A0[6D05]                	MOV	AL,[SATTRIB]
 24693 00003E3D A2[6B05]                	MOV	[ATTRIB],AL
 24694                                  	;mov	byte [EXTERR_LOCUS],1
 24695 00003E40 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24696                                  					; "finding" a char device
 24697                                  					; set LOCUS to Unknown. This makes
 24698                                  					; certain idiotic problems reported
 24699                                  					; by a certain 3 letter OEM go away.
 24700                                  
 24701                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24702                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24703                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24704                                  ; wfp into the share set.
 24705                                  ;
 24706                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24707                                  ; non-space seen +1.  This position is kept in DX.
 24708                                  
 24709                                  ;hkn; SS is DOSDATA
 24710 00003E45 16                      	push	ss
 24711 00003E46 07                      	pop	es
 24712                                  
 24713                                  ;hkn; NAME1 is in DOSDATA
 24714 00003E47 BE[4B05]                	mov	si,NAME1
 24715 00003E4A 8B3E[B205]              	mov	di,[WFP_START]
 24716 00003E4E 89FA                    	mov	dx,di
 24717 00003E50 B90800                  	mov	cx,8			; 8 chars in device name
 24718                                  MoveLoop:
 24719 00003E53 AC                      	lodsb
 24720 00003E54 AA                      	stosb
 24721 00003E55 3C20                    	cmp	al," "
 24722 00003E57 7402                    	jz	short NoSave
 24723                                  
 24724 00003E59 89FA                    	mov	dx,di
 24725                                  NoSave:
 24726 00003E5B E2F6                    	loop	MoveLoop
 24727                                  
 24728                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24729                                  ; at this point.
 24730                                  
 24731 00003E5D 89D7                    	mov	di,dx
 24732                                  	;mov	byte [di],0		; end of string
 24733                                  	; 15/02/2024
 24734 00003E5F 880D                    	mov	[di],cl ; 0
 24735 00003E61 E8A802                  	call	Build_device_ent	; Clears carry sets zero
 24736 00003E64 FEC0                    	INC	AL			; reset zero
 24737 00003E66 C3                      	retn
 24738                                  
 24739                                  InternalError:
 24740                                  InternalError_loop:
 24741 00003E67 EBFE                    	JMP	short InternalError_loop ; freeze
 24742                                  
 24743                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24744                                  
 24745                                  CrackIt:
 24746                                  ; 15/02/2024
 24747                                  %if 0
 24748                                  	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24749                                  	CMP	SI,-1			; valid?
 24750                                  	JNZ	short LOOK_SING		; Yes, use it.
 24751                                  	LEA	SI,[DI+3]		; skip D:\.
 24752                                  LOOK_SING:
 24753                                  %endif
 24754                                  	;mov	byte [ATTRIB],16h
 24755 00003E69 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24756                                  					; Attributes to search through Dirs
 24757 00003E6E C43E[A205]              	LES	DI,[THISCDS]
 24758 00003E72 B8FFFF                  	MOV	AX,-1
 24759                                  	;mov	bx,[es:di+73]
 24760 00003E75 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24761 00003E79 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24762                                  
 24763                                  ; AX = -1
 24764                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24765                                  ;      has been uncertainly changed.
 24766                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24767                                  ;      may be -1 if no current directory part has been used.
 24768                                  
 24769 00003E7D 39C6                    	CMP	SI,AX			; if Current directory is not part
 24770 00003E7F 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24771 00003E81 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24772                                  
 24773                                  ; DOS 3.3  6/25/86
 24774 00003E83 7437                    	JZ	short NO_CURR_D		; no, crack from the root
 24775                                  	;test	byte [FastOpenFlg],1
 24776 00003E85 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24777 00003E8A 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24778 00003E8C 06                      	PUSH	ES			; save registers
 24779 00003E8D 57                      	PUSH	DI
 24780 00003E8E 51                      	PUSH	CX
 24781 00003E8F FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24782 00003E92 56                      	PUSH	SI
 24783 00003E93 53                      	PUSH	BX
 24784                                  
 24785 00003E94 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24786 00003E98 8B36[B205]              	MOV	SI,[WFP_START]
 24787                                  
 24788                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24789 00003E9C BB[300D]                	MOV	BX,FastOpenTable
 24790 00003E9F BF[460D]                	MOV	DI,Dir_Info_Buff
 24791 00003EA2 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24792                                  	;mov	al,1
 24793 00003EA5 B001                    	MOV	AL,FONC_Look_up
 24794 00003EA7 1E                      	PUSH	DS
 24795 00003EA8 07                      	POP	ES
 24796                                  	;call	far [BX+2]
 24797 00003EA9 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24798 00003EAC 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24799                                  					; Go to Got_Srch_cluster
 24800                                  	; 29/12/2022
 24801                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24802                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24803                                  	;stc
 24804                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24805                                  
 24806 00003EAE 803C01                  	cmp	byte [si],1
 24807                                  GO_Chk_end1:	; 29/12/2022
 24808 00003EB1 F5                      	cmc 
 24809                                  	; [si] = 0 -> cf = 0
 24810                                  	; [si] > 0 -> cf = 1
 24811                                  
 24812                                  ;GO_Chk_end1:
 24813                                  	; 29/12/2022
 24814                                  	;clc
 24815                                  
 24816                                  GO_Chk_end:				; restore registers
 24817 00003EB2 5B                      	POP	BX
 24818 00003EB3 5E                      	POP	SI
 24819 00003EB4 8F44FF                  	POP	word [SI-1]
 24820 00003EB7 59                      	POP	CX
 24821 00003EB8 5F                      	POP	DI
 24822 00003EB9 07                      	POP	ES
 24823 00003EBA 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24824                                  
 24825                                  ; DOS 3.3  6/25/86
 24826                                  ;
 24827                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24828                                  ; of path and go crack from root.
 24829                                  
 24830                                  NO_CURR_D:
 24831 00003EBC 8B36[B205]              	MOV	SI,[WFP_START]
 24832                                  	;LEA	SI,[SI+3]		; Skip "d:/"
 24833                                  	; 15/02/2024
 24834 00003EC0 83C603                  	add	si,3
 24835 00003EC3 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24836 00003EC7 EB37                    	JMP	short ROOTPATH
 24837                                  
 24838                                  ; We are able to crack from the current directory part. Go set up for search
 24839                                  ; of specified cluster.
 24840                                  
 24841                                  GOT_SEARCH_CLUSTER:
 24842 00003EC9 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24843 00003ECD E8E9FE                  	call	SETDIRSRCH
 24844                                  	;JC	short SETFERR
 24845                                  	;JMP	short FINDPATH
 24846                                  	; 16/12/2022
 24847 00003ED0 733E                    	jnc	short FINDPATH ; 17/08/2018
 24848                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24849                                  	;JC	short SETFERR
 24850                                  	;JMP	short FINDPATH
 24851                                  SETFERR:
 24852 00003ED2 30C9                    	XOR	CL,CL			; set zero
 24853 00003ED4 F9                      	STC
 24854 00003ED5 C3                      	retn
 24855                                  
 24856                                  ;---------------------------------------------------------------------------
 24857                                  ;
 24858                                  ; Procedure Name : ChkDev
 24859                                  ;
 24860                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24861                                  ;   device.
 24862                                  ; Blasts CX,SI,DI,AX,BX
 24863                                  ;---------------------------------------------------------------------------
 24864                                  
 24865                                  CHKDEV:
 24866 00003ED6 89FE                    	MOV	SI,DI
 24867                                  	;MOV	DI,SS
 24868                                  	;MOV	ES,DI
 24869                                  	; 27/06/2024
 24870 00003ED8 16                      	push	ss
 24871 00003ED9 07                      	pop	es
 24872                                  
 24873 00003EDA BF[4B05]                	MOV	DI,NAME1
 24874 00003EDD B90900                  	MOV	CX,9
 24875                                  TESTLOOP:
 24876 00003EE0 E82310                  	call	GETLET
 24877                                  
 24878 00003EE3 3C2E                    	CMP	AL,'.'
 24879 00003EE5 740E                    	JZ	short TESTDEVICE
 24880 00003EE7 E87210                  	call	PATHCHRCMP
 24881 00003EEA 7407                    	JZ	short NOTDEV
 24882 00003EEC 08C0                    	OR	AL,AL
 24883 00003EEE 7405                    	JZ	short TESTDEVICE
 24884                                  
 24885 00003EF0 AA                      	STOSB
 24886 00003EF1 E2ED                    	LOOP	TESTLOOP
 24887                                  NOTDEV:
 24888 00003EF3 F9                      	STC
 24889 00003EF4 C3                      	retn
 24890                                  
 24891                                  TESTDEVICE:
 24892                                  	;ADD	CX,2
 24893                                  	; 24/09/2023
 24894 00003EF5 41                      	inc	cx
 24895 00003EF6 41                      	inc	cx
 24896 00003EF7 B020                    	MOV	AL,' '
 24897 00003EF9 F3AA                    	REP	STOSB
 24898                                  	;MOV	AX,SS
 24899                                  	;MOV	DS,AX
 24900                                  	; 27/06/2024
 24901 00003EFB 16                      	push	ss
 24902 00003EFC 1F                      	pop	ds
 24903                                  	;call	DEVNAME
 24904                                  	;retn
 24905                                  	; 18/12/2022
 24906 00003EFD E9AE01                  	jmp	DEVNAME
 24907                                  
 24908                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24909                                  ;----------------------------------------------------------------------------
 24910                                  ;
 24911                                  ; Procedure Name : ROOTPATH,FINDPATH
 24912                                  ;
 24913                                  ; Inputs:
 24914                                  ;	Same as FINDPATH but,
 24915                                  ;	SI Points to asciz string of path which is assumed to start at
 24916                                  ;		the root (no leading '/').
 24917                                  ; Function:
 24918                                  ;	Search from root for path
 24919                                  ; Outputs:
 24920                                  ;	Same as FINDPATH but:
 24921                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24922                                  ;	[NoSetDir] is ignored.
 24923                                  ;----------------------------------------------------------------------------
 24924                                  
 24925                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24926                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24927                                  
 24928                                  ROOTPATH:
 24929 00003F00 E8F1FE                  	call	SETROOTSRCH
 24930                                  	; 24/09/2023
 24931 00003F03 30E4                    	xor	ah,ah
 24932                                  	;CMP	BYTE [SI],0
 24933 00003F05 3824                    	cmp	[si],ah ; 0
 24934 00003F07 7507                    	JNZ	short FINDPATH
 24935                                  
 24936                                  ; Root dir specified
 24937 00003F09 A0[6D05]                	MOV	AL,[SATTRIB]
 24938 00003F0C A2[6B05]                	MOV	[ATTRIB],AL
 24939                                  	; 24/09/2023
 24940                                  	;XOR	AH,AH			; Sets "device ID" byte, sets zero
 24941                                  					; (dir), clears carry.
 24942 00003F0F C3                      	retn
 24943                                  
 24944                                  ; Inputs:
 24945                                  ;	[ATTRIB] Set to get through directories
 24946                                  ;	[SATTRIB] Set to find last element
 24947                                  ;	ES:BP Points to DPB
 24948                                  ;	SI Points to asciz string of path (no leading '/').
 24949                                  ;	[SECCLUSPOS] = 0
 24950                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24951                                  ;	[CLUSNUM] = Cluster # of next cluster
 24952                                  ;	[CLUSFAC] = Sectors per cluster
 24953                                  ;	[NoSetDir] set
 24954                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24955                                  ;		( = -1 if current dir not involved, else
 24956                                  ;		 Points to first char after last "/" of current dir part)
 24957                                  ;	[THISCDS] Points to CDS being used
 24958                                  ;	[CREATING] and [DELALL] set
 24959                                  ; Function:
 24960                                  ;	Parse path name
 24961                                  ; Outputs:
 24962                                  ;	ID1 field of [THISCDS] updated appropriately
 24963                                  ;	[ATTRIB] = [SATTRIB]
 24964                                  ;	ES:BP Points to DPB
 24965                                  ;	[THISDPB] = ES:BP
 24966                                  ;	Carry set if bad path
 24967                                  ;	   SI Points to path element causing failure
 24968                                  ;	   Zero set
 24969                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24970                                  ;	      start a search on the last directory
 24971                                  ;	      CL is zero if there is a bad name in the path
 24972                                  ;	      CL is non-zero if the name was simply not found
 24973                                  ;		 [ENTFREE] may have free spot in directory
 24974                                  ;		 [NAME1] is the name.
 24975                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24976                                  ;	   Zero reset
 24977                                  ;	      File in middle of path or bad name in path
 24978                                  ;		or path too long or malformed path
 24979                                  ;	ELSE
 24980                                  ;	   [CURBUF] contains directory record with match
 24981                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24982                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24983                                  ;	   [NAME1] Has name looked for
 24984                                  ;	   AH = device ID
 24985                                  ;	      bit 7 of AH set if device SI and BX
 24986                                  ;	      will point DOSGROUP relative The firclus
 24987                                  ;	      field of the device entry contains the device pointer
 24988                                  ;	   If last element is a directory zero is set and:
 24989                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24990                                  ;	      are set up to start a search on it,
 24991                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24992                                  ;	      like that for a file (except for zero flag)
 24993                                  ;	   If last element is a file zero is reset
 24994                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24995                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24996                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24997                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24998                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24999                                  ; Destroys all other registers
 25000                                  
 25001                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25002                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 25003                                  
 25004                                  	; 15/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 25005                                  	; DOSCODE:7F93h (MSDOS 6.22, MSDOS.SYS)
 25006                                  
 25007                                      	;entry	FINDPATH
 25008                                  FINDPATH:
 25009 00003F10 06                      	PUSH	ES			; Save ES:BP
 25010 00003F11 56                      	PUSH	SI
 25011 00003F12 89F7                    	MOV	DI,SI
 25012 00003F14 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 25013 00003F18 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 25014 00003F1D 740E                    	JZ	short NOIDS		; No current dir part
 25015 00003F1F 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 25016 00003F23 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 25017 00003F25 C43E[A205]              	LES	DI,[THISCDS]
 25018                                  	;mov	[es:di+73],cx
 25019 00003F29 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory cluster
 25020                                  NOIDS:
 25021                                  
 25022                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 25023                                  ; character in the string. CX,DI may be destroyed.
 25024                                  ;
 25025                                  ;	invoke	NAMETRANS
 25026                                  ;	MOV	CL,AL
 25027                                  ;
 25028                                  ; The above is the slow method. The name has *already* been munged by
 25029                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 25030                                  ; the name until ., \ or 0 is hit.
 25031                                  
 25032                                  	;MOV	AX,SS
 25033                                  	;MOV	ES,AX
 25034                                  	; 15/02/2024 - Retro DOS v4.2
 25035 00003F2D 16                      	push	ss
 25036 00003F2E 07                      	pop	es
 25037                                  
 25038                                  ;hkn; Name1 is in DOSDATA
 25039 00003F2F BF[4B05]                	MOV	DI,NAME1
 25040 00003F32 B82020                  	MOV	AX,'  ' ; 2020h
 25041 00003F35 AA                      	STOSB
 25042 00003F36 AB                      	STOSW
 25043 00003F37 AB                      	STOSW
 25044 00003F38 AB                      	STOSW
 25045 00003F39 AB                      	STOSW
 25046 00003F3A AB                      	STOSW
 25047                                  
 25048                                  ;hkn; Name1 is in DOSDATA
 25049 00003F3B BF[4B05]                	MOV	DI,NAME1
 25050 00003F3E 30E4                    	XOR	AH,AH			; bits for CL
 25051                                  GetNam:
 25052                                  	; 19/05/2019 - Retro DOS v4.0
 25053                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 25054                                  
 25055                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25056                                  	; 16/12/2022
 25057                                  	;inc	cl ; not required !
 25058                                  	
 25059 00003F40 AC                      	LODSB
 25060 00003F41 3C2E                    	CMP	AL,'.'	; 2Eh
 25061 00003F43 7412                    	JZ	short _SetExt
 25062 00003F45 08C0                    	OR	AL,AL
 25063 00003F47 7424                    	JZ	short _GetDone
 25064 00003F49 3C5C                    	CMP	AL,'\'	; 5Ch
 25065 00003F4B 7420                    	JZ	short _GetDone
 25066 00003F4D 3C3F                    	CMP	AL,'?'	; 3Fh
 25067 00003F4F 7503                    	JNZ	short StoNam
 25068 00003F51 80CC01                  	OR	AH,1
 25069                                  StoNam: 
 25070 00003F54 AA                      	STOSB
 25071 00003F55 EBE9                    	JMP	short GetNam
 25072                                  _SetExt:
 25073 00003F57 BF[5305]                	MOV	DI,NAME1+8
 25074                                  GetExt:
 25075 00003F5A AC                      	LODSB
 25076 00003F5B 08C0                    	OR	AL,AL
 25077 00003F5D 740E                    	JZ	short _GetDone
 25078 00003F5F 3C5C                    	CMP	AL,'\'
 25079 00003F61 740A                    	JZ	short _GetDone
 25080 00003F63 3C3F                    	CMP	AL,'?'
 25081 00003F65 7503                    	JNZ	short StoExt
 25082 00003F67 80CC01                  	OR	AH,1
 25083                                  StoExt: 
 25084 00003F6A AA                      	STOSB
 25085 00003F6B EBED                    	JMP	short GetExt
 25086                                  _GetDone:
 25087 00003F6D 4E                      	DEC	SI
 25088 00003F6E 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 25089 00003F70 80C980                  	OR	CL,80H
 25090 00003F73 5F                      	POP	DI			; Start of this element
 25091 00003F74 07                      	POP	ES			; Restore ES:BP
 25092 00003F75 39FE                    	CMP	SI,DI
 25093 00003F77 7503                    	JNZ	short check_device
 25094 00003F79 E9DD00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 25095                                  check_device:
 25096 00003F7C 56                      	PUSH	SI			; Start of next element
 25097                                  	;MOV	AL,[SI]
 25098                                  	; 15/02/2024
 25099 00003F7D 08C0                    	OR	AL,AL
 25100                                  	; 23/09/2023
 25101                                  	;cmp	byte [si],0
 25102 00003F7F 7508                    	JNZ	short NOT_LAST
 25103                                  
 25104                                  ; for last element of the path switch to the correct search attributes
 25105                                  
 25106 00003F81 8A3E[6D05]              	MOV	BH,[SATTRIB]
 25107 00003F85 883E[6B05]              	MOV	[ATTRIB],BH
 25108                                  
 25109                                  NOT_LAST:
 25110                                  
 25111                                  ; check name1 to see if we have a device...
 25112                                  
 25113 00003F89 06                      	PUSH	ES			; Save ES:BP
 25114                                  
 25115                                  ;hkn; SS is DOSDATA
 25116                                  	;context ES
 25117 00003F8A 16                      	push	ss
 25118 00003F8B 07                      	pop	es
 25119 00003F8C E81F01                  	call	DEVNAME 		; blast BX
 25120 00003F8F 07                      	POP	ES			; Restore ES:BP
 25121 00003F90 7208                    	JC	short FindFile		; Not a device
 25122 00003F92 08C0                    	OR	AL,AL			; Test next char again
 25123                                  	;JZ	short GO_BDEV
 25124                                  	;JMP	FILEINPATH		; Device name in middle of path
 25125                                  	; 27/06/2024
 25126 00003F94 752D                    	jnz	short FILEINPATH_j
 25127                                  
 25128                                  GO_BDEV:
 25129 00003F96 5E                      	POP	SI			; Points to NUL at end of path
 25130 00003F97 E9A0FE                  	JMP	Build_devJ
 25131                                  
 25132                                  FindFile:
 25133                                  ;;;; 7/28/86
 25134 00003F9A 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 25135 00003F9F 7505                    	JNZ	short NOE5		; no
 25136 00003FA1 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 25137                                  NOE5:
 25138                                  ;;;; 7/28/86
 25139 00003FA6 57                      	PUSH	DI			; Start of this element
 25140 00003FA7 06                      	PUSH	ES			; Save ES:BP
 25141 00003FA8 51                      	PUSH	CX			; CL return from NameTrans
 25142                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25143                                  
 25144 00003FA9 E88A02                  	CALL	LookupPath		; call fastopen to get dir entry
 25145 00003FAC 7303                    	JNC	short DIR_FOUND		; found dir entry
 25146                                  
 25147                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25148 00003FAE E8CEFC                  	call	FINDENTRY
 25149                                  DIR_FOUND:
 25150 00003FB1 59                      	POP	CX
 25151 00003FB2 07                      	POP	ES
 25152 00003FB3 5F                      	POP	DI
 25153 00003FB4 7303                    	JNC	short LOAD_BUF
 25154 00003FB6 E9C500                  	JMP	BADPATHPOP
 25155                                  
 25156                                  LOAD_BUF:
 25157 00003FB9 C53E[E205]              	LDS	DI,[CURBUF]
 25158                                  	;test	byte [bx+0Bh],10h
 25159 00003FBD F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 25160 00003FC1 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 25161                                  FILEINPATH_j:	; 27/06/2024
 25162 00003FC3 E99700                  	JMP	FILEINPATH		; Error or end of path
 25163                                  
 25164                                  ; if we are not setting the directory, then check for end of string
 25165                                  
 25166                                  GO_NEXT:
 25167                                  ;hkn; SS override
 25168 00003FC6 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 25169 00003FCC 7423                    	JZ	short SetDir
 25170 00003FCE 89FA                    	MOV	DX,DI			; Save pointer to entry
 25171 00003FD0 8CD9                    	MOV	CX,DS
 25172                                  
 25173                                  ;hkn; SS is DOSDATA
 25174                                  	;context DS
 25175 00003FD2 16                      	push	ss
 25176 00003FD3 1F                      	pop	ds
 25177 00003FD4 5F                      	POP	DI			; Start of next element
 25178                                  	; 19/05/2019 - Retro DOS v4.0
 25179                                  	; MSDOS 6.0
 25180 00003FD5 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25181 00003FDA 740B                    	JZ	short _nofast			; the FastOpen
 25182 00003FDC F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 25183 00003FE1 7404                    	JZ	short _nofast			; no
 25184 00003FE3 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 25185                                  _nofast:
 25186 00003FE7 803D00                  	CMP	BYTE [DI],0
 25187                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 25188                                  	;;JMP	_SETRET  ; retn		; Got it
 25189                                  	;retn	; 05/09/2018
 25190                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25191                                  	;jmp	_SETRET
 25192                                  	; 16/12/2022
 25193 00003FEA 7421                    	jz	short _SETRET
 25194                                  
 25195                                  NEXT_ONE:
 25196 00003FEC 57                      	PUSH	DI			; Put start of next element back on stack
 25197 00003FED 89D7                    	MOV	DI,DX
 25198 00003FEF 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 25199                                  SetDir:
 25200 00003FF1 8B14                    	MOV	DX,[SI] 		; Dir_first
 25201                                  
 25202                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25203 00003FF3 1E                      	PUSH	DS		      ; save [curbuf+2]
 25204                                  ;hkn; SS is DOSDATA
 25205 00003FF4 16                      	push	ss
 25206 00003FF5 1F                      	pop	ds		      ; set DS Dosgroup
 25207                                  	;test	byte [FastOpenFlg],2
 25208 00003FF6 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25209 00003FFB 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 25210 00003FFD 89D3                    	MOV	BX,DX		      ; not found
 25211 00003FFF 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 25212 00004003 50                      	PUSH	AX		      ; save device id (AH)
 25213 00004004 E8B2FD                  	call	SETDIRSRCH
 25214 00004007 58                      	POP	AX		      ; restore device id (AH)
 25215 00004008 83C402                  	ADD	SP,2		      ; pop ds in stack
 25216 0000400B EB36                    	JMP	short FAST_OPEN_SKIP
 25217                                  
 25218                                  	; 16/12/2022
 25219                                  _SETRET:
 25220 0000400D C3                      	retn
 25221                                  
 25222                                  DO_NORMAL:
 25223 0000400E 1F                      	POP	DS			; DS = [curbuf + 2]
 25224                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25225                                  
 25226 0000400F 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 25227 00004011 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 25228 00004013 53                      	PUSH	BX
 25229 00004014 50                      	PUSH	AX
 25230 00004015 56                      	PUSH	SI
 25231 00004016 51                      	PUSH	CX
 25232                                  
 25233                                  ; 16/02/2024
 25234                                  %if 0
 25235                                  	;push	word [di+6]
 25236                                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 25237                                  	; 19/05/2019
 25238                                  	; MSDOS 6.0
 25239                                  	;push	word [di+8]
 25240                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 25241                                  %else	
 25242                                  	; 16/02/2024
 25243                                  	;lds	bx,[di+6]
 25244 00004017 C55D06                  	lds	bx,[di+BUFFINFO.buf_sector]
 25245 0000401A 53                      	push	bx
 25246 0000401B 1E                      	push	ds
 25247                                  %endif
 25248                                  
 25249 0000401C 89D3                    	MOV	BX,DX
 25250                                  
 25251                                  ;hkn; SS is DOSDATA
 25252                                  	;context DS
 25253 0000401E 16                      	push	ss
 25254 0000401F 1F                      	pop	ds
 25255                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 25256 00004020 E896FD                  	call	SETDIRSRCH		; the entry sector buffer
 25257                                  	; 19/05/2019
 25258                                  	; MSDOS 6.0
 25259 00004023 8F06[0706]              	POP	word [HIGH_SECTOR]
 25260 00004027 5A                      	POP	DX
 25261 00004028 7203                    	JC	short SKIP_GETB
 25262                                  	; 22/09/2023
 25263                                  	;;mov	byte [ALLOWED],18h
 25264                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 25265                                  	;XOR	AL,AL ; *
 25266                                  	;;invoke GETBUFFR		; Get the entry buffer back
 25267                                  	;call	GETBUFFR
 25268 0000402A E8D117                  	call	GETBUFFER ; * ; pre-read
 25269                                  SKIP_GETB:
 25270 0000402D 59                      	POP	CX
 25271 0000402E 5E                      	POP	SI
 25272 0000402F 58                      	POP	AX
 25273 00004030 5B                      	POP	BX
 25274 00004031 7305                    	JNC	short SET_THE_BUF
 25275 00004033 5F                      	POP	DI			; Start of next element
 25276 00004034 89FE                    	MOV	SI,DI			; Point with SI
 25277 00004036 EB21                    	JMP	SHORT _BADPATH
 25278                                  
 25279                                  SET_THE_BUF:
 25280 00004038 E8B7F5                  	call	SET_BUF_AS_DIR
 25281 0000403B 8B3E[E205]              	MOV	DI,[CURBUF]
 25282 0000403F 01FE                    	ADD	SI,DI			; Get the offsets back
 25283 00004041 01FB                    	ADD	BX,DI
 25284                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25285                                  FAST_OPEN_SKIP:
 25286 00004043 5F                      	POP	DI			; Start of next element
 25287 00004044 E89302                  	CALL	InsertPath		; insert dir entry info
 25288                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25289 00004047 8A05                    	MOV	AL,[DI]
 25290 00004049 08C0                    	OR	AL,AL
 25291 0000404B 74C0                    	JZ	short _SETRET		; At end
 25292 0000404D 47                      	INC	DI			; Skip over "/"
 25293 0000404E 89FE                    	MOV	SI,DI			; Point with SI
 25294 00004050 E8090F                  	call	PATHCHRCMP
 25295 00004053 7503                    	JNZ	short find_bad_name	; oops
 25296 00004055 E9B8FE                  	JMP	FINDPATH		; Next element
 25297                                  
 25298                                  find_bad_name:
 25299 00004058 4E                      	DEC	SI			; Undo above INC to get failure point
 25300                                  _BADPATH:
 25301 00004059 30C9                    	XOR	CL,CL			; Set zero
 25302 0000405B EB28                    	JMP	SHORT BADPRET
 25303                                  
 25304                                  FILEINPATH:
 25305 0000405D 5F                      	POP	DI			; Start of next element
 25306                                  
 25307                                  ;hkn; SS is DOSDATA
 25308                                  	;context DS			; Got to from one place with DS gone
 25309 0000405E 16                      	push	ss
 25310 0000405F 1F                      	pop	ds
 25311                                  
 25312                                  ; DOS 3.3 FastOpen
 25313                                  	;test	byte [FastOpenFlg],1
 25314 00004060 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25315 00004065 740B                    	JZ	short NO_FAST		; device info to fastopen
 25316                                  	;test	byte [FastOpenFlg],2
 25317 00004067 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25318 0000406C 7404                    	JZ	short NO_FAST
 25319 0000406E 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25320                                  					 ; success
 25321                                  NO_FAST:
 25322                                  ; DOS 3.3 FastOpen
 25323 00004072 8A05                    	MOV	AL,[DI]
 25324 00004074 08C0                    	OR	AL,AL
 25325                                  	;JZ	short INCRET
 25326                                  	;MOV	SI,DI			; Path too long
 25327                                  	;JMP	SHORT BADPRET
 25328                                  	; 27/06/2024
 25329 00004076 750B                    	jnz 	short BADPRET_X
 25330                                  
 25331                                  INCRET:
 25332                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25333                                  
 25334 00004078 E85F02                  	CALL   InsertPath		; insert dir entry info
 25335                                  
 25336                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25337 0000407B FEC0                    	INC	AL			; Reset zero
 25338                                  	; 16/12/2022	
 25339                                  ;_SETRET:
 25340 0000407D C3                      	retn
 25341                                  
 25342                                  BADPATHPOP:
 25343 0000407E 5E                      	POP	SI			; Start of next element
 25344 0000407F 8A04                    	MOV	AL,[SI]
 25345                                  	; 27/06/2024
 25346                                  	;MOV	SI,DI			; Start of bad element
 25347 00004081 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25348                                  BADPRET_X:	; 27/06/2024
 25349 00004083 89FE                    	mov	si,di
 25350                                  BADPRET:
 25351 00004085 A0[6D05]                	MOV	AL,[SATTRIB]
 25352 00004088 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25353 0000408B F9                      	STC
 25354 0000408C C3                      	retn
 25355                                  
 25356                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25357                                  ;---------------------------------------------------------------------------
 25358                                  ;
 25359                                  ; Procedure Name : STARTSRCH
 25360                                  ;
 25361                                  ; Inputs:
 25362                                  ;	[THISDPB] Set
 25363                                  ; Function:
 25364                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25365                                  ; Outputs:
 25366                                  ;	ES:BP = Drive parameters
 25367                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25368                                  ; Destroys ES,BP,AX
 25369                                  ;--------------------------------------------------------------------------
 25370                                  
 25371                                  STARTSRCH:
 25372 0000408D C42E[8A05]              	LES	BP,[THISDPB]
 25373 00004091 31C0                    	XOR	AX,AX
 25374 00004093 A3[4803]                	MOV	[LASTENT],AX
 25375 00004096 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25376 00004099 48                      	DEC	AX
 25377 0000409A A3[D805]                	MOV	[ENTFREE],AX
 25378 0000409D A3[DA05]                	MOV	[ENTLAST],AX
 25379 000040A0 C3                      	retn
 25380                                  
 25381                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25382                                  ;----------------------------------------------------------------------------
 25383                                  ; Procedure Name : MatchAttributes
 25384                                  ;
 25385                                  ; Input:    [Attrib] = attribute to search for
 25386                                  ;	    CH = found attribute
 25387                                  ; Output:   JZ <match>
 25388                                  ;	    JNZ <nomatch>
 25389                                  ; Registers modified: noneski
 25390                                  ;----------------------------------------------------------------------------
 25391                                  
 25392                                  MatchAttributes:
 25393 000040A1 50                      	PUSH	AX
 25394                                  
 25395                                  ;hkn; SS override
 25396 000040A2 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25397 000040A6 F6D0                    	NOT	AL			; AL <- SearchSet'
 25398 000040A8 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25399                                  	;and	al,16h
 25400 000040AA 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25401                                  ;
 25402                                  ; the result is non-zero if an attribute is not in the search set
 25403                                  ; and in the found set and in the important set. This means that we do not
 25404                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25405                                  ;
 25406 000040AC 58                      	POP	AX
 25407 000040AD C3                      	retn
 25408                                  
 25409                                  ; 19/05/2019 - Retro DOS v4.0
 25410                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25411                                  
 25412                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25413                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25414                                  
 25415                                  ;Break <DevName - Look for name of device>
 25416                                  ;---------------------------------------------------------------------------
 25417                                  ;
 25418                                  ; Procedure Name : DevName
 25419                                  ;
 25420                                  ; Inputs:
 25421                                  ;	DS,ES:DOSDATA
 25422                                  ;	Filename in NAME1
 25423                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25424                                  ; Function:
 25425                                  ;	Determine if file is in list of I/O drivers
 25426                                  ; Outputs:
 25427                                  ;	Carry set if not a device
 25428                                  ;	ELSE
 25429                                  ;	Zero flag set
 25430                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25431                                  ;	     bits 0-4 set from low byte of attribute word
 25432                                  ;	DEVPT = DWORD pointer to Device header of device
 25433                                  ; BX destroyed, others preserved
 25434                                  ;---------------------------------------------------------------------------
 25435                                  
 25436                                  DEVNAME:
 25437                                  	; 28/07/2018 - Retro DOS v3.0
 25438                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25439                                  
 25440 000040AE 56                      	PUSH	SI
 25441 000040AF 57                      	PUSH	DI
 25442 000040B0 51                      	PUSH	CX
 25443 000040B1 50                      	PUSH	AX
 25444                                  
 25445                                  ; E5 special code
 25446 000040B2 FF36[4B05]              	PUSH	WORD [NAME1]
 25447 000040B6 803E[4B05]05            	CMP	byte [NAME1],5
 25448 000040BB 7505                    	JNZ	short NOKTR
 25449 000040BD C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25450                                  NOKTR:
 25451                                  	;test	byte [ATTRIB],8
 25452 000040C2 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25453                                  					; If looking for VOL id don't find devs
 25454 000040C7 7520                    	JNZ	short RET31
 25455                                  
 25456                                  ;hkn; NULDEV is in DOSDATA
 25457 000040C9 BE[4800]                	MOV	SI,NULDEV
 25458                                  LOOKIO:
 25459                                  	; 21/11/2022
 25460                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25461                                  	; 17/12/2022
 25462                                  	;test	byte [si+5],80h
 25463 000040CC F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25464                                  	;;test	word [si+4],8000h
 25465                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25466 000040D0 7410                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25467 000040D2 89F0                    	MOV	AX,SI
 25468                                  	;add	si,10
 25469 000040D4 83C60A                  	ADD	SI,SYSDEV.NAME
 25470                                  
 25471                                  ;hkn; NAME1 is in DOSDATA
 25472 000040D7 BF[4B05]                	MOV	DI,NAME1
 25473 000040DA B90400                  	MOV	CX,4			; All devices are 8 letters
 25474 000040DD F3A7                    	REPE	CMPSW			; Check for name in list
 25475                                  	;MOV	SI,AX
 25476                                  	; 27/06/2024
 25477 000040DF 96                      	xchg	ax,si
 25478 000040E0 7415                    	JZ	short IOCHK		; Found it?
 25479                                  SKIPDEV:
 25480 000040E2 C534                    	LDS	SI,[SI]			; Get address of next device
 25481 000040E4 83FEFF                  	CMP	SI,-1			; At end of list?
 25482 000040E7 75E3                    	JNZ	short LOOKIO
 25483                                  RET31:	
 25484 000040E9 F9                      	STC				; Not found
 25485                                  RETNV:	
 25486 000040EA 8CD1                    	MOV	CX,SS
 25487 000040EC 8ED9                    	MOV	DS,CX
 25488                                  
 25489 000040EE 8F06[4B05]              	POP	WORD [NAME1]
 25490 000040F2 58                      	POP	AX
 25491 000040F3 59                      	POP	CX
 25492 000040F4 5F                      	POP	DI
 25493 000040F5 5E                      	POP	SI
 25494 000040F6 C3                      	RETN
 25495                                  
 25496                                  IOCHK:
 25497                                  ;hkn; SS override for DEVPT
 25498 000040F7 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25499                                  	;mov	bh,[si+4]
 25500 000040FC 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25501 000040FF 80CFC0                  	OR	BH,0C0h
 25502 00004102 80E7DF                  	and	bh,0DFh
 25503                                  	;AND	BH,~(020h)		; Clears Carry
 25504 00004105 368936[9A05]            	MOV	[SS:DEVPT],SI
 25505 0000410A EBDE                    	JMP	short RETNV
 25506                                  
 25507                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25508                                  ;---------------------------------------------------------------------------
 25509                                  ; Procedure Name : Build_device_ent
 25510                                  ;
 25511                                  ; Inputs:
 25512                                  ;	[NAME1] has name
 25513                                  ;	BH is attribute field (supplied by DEVNAME)
 25514                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25515                                  ; Function:
 25516                                  ;	Build a directory entry for a device at DEVFCB
 25517                                  ; Outputs:
 25518                                  ;	BX points to DEVFCB
 25519                                  ;	SI points to dir_first field
 25520                                  ;	AH = input BH
 25521                                  ;	AL = 0
 25522                                  ;	dir_first = DEVPT
 25523                                  ;	Zero Set, Carry Clear
 25524                                  ; DS,ES,BP preserved, others destroyed
 25525                                  ;--------------------------------------------------------------------------
 25526                                  
 25527                                  Build_device_ent:
 25528 0000410C B82020                  	MOV	AX,"  " ; 2020h
 25529                                  
 25530                                  ;hkn; DEVFCB is in DOSDATA
 25531 0000410F BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25532                                  
 25533                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25534                                  
 25535 00004112 AB                      	STOSW
 25536 00004113 AA                      	STOSB				; Blank out extent field
 25537                                  	;mov	al,40h
 25538 00004114 B040                    	MOV	AL,attr_device
 25539                                  
 25540                                  ;	Fill Dir_attr
 25541                                  
 25542 00004116 AA                      	STOSB				; Set attribute field
 25543 00004117 31C0                    	XOR	AX,AX
 25544 00004119 B90A00                  	MOV	CX,10
 25545                                  
 25546                                  ; Fill dir_pad
 25547                                  
 25548 0000411C F3AB                    	REP	STOSW			; Fill rest with zeros
 25549 0000411E E8BFC9                  	call	DATE16
 25550                                  
 25551                                  ;hkn; DEVFCB is in DOSDATA
 25552 00004121 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25553 00004124 92                      	XCHG	AX,DX
 25554                                  
 25555                                  ; Fill dir_time
 25556                                  
 25557 00004125 AB                      	STOSW
 25558 00004126 92                      	XCHG	AX,DX
 25559                                  
 25560                                  ; Fill dir_date
 25561                                  
 25562 00004127 AB                      	STOSW
 25563 00004128 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25564 0000412A A1[9A05]                	MOV	AX,[DEVPT]
 25565                                  
 25566                                  ; Fill dir_first
 25567                                  
 25568 0000412D AB                      	STOSW				; Dir_first points to device
 25569 0000412E A1[9C05]                	MOV	AX,[DEVPT+2]
 25570                                  ;
 25571                                  ; Fill dir_size_l
 25572                                  ;
 25573 00004131 AB                      	STOSW
 25574 00004132 88FC                    	MOV	AH,BH			; Put device atts in AH
 25575                                  
 25576                                  ;hkn; DEVFCB is in DOSDATA
 25577 00004134 BB[4B05]                	MOV	BX,DEVFCB
 25578 00004137 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25579 00004139 C3                      	retn
 25580                                  
 25581                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25582                                  ;----------------------------------------------------------------------------
 25583                                  ;
 25584                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25585                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25586                                  ;   If invalid, reset original CDS to root.
 25587                                  ;
 25588                                  ;   Inputs:	ThisCDS points to CDS of interest
 25589                                  ;		SS:DI points to temp buffer
 25590                                  ;   Outputs:	The current directory string is validated on the appropriate
 25591                                  ;		    drive
 25592                                  ;		ThisDPB changed
 25593                                  ;		ES:DI point to CDS
 25594                                  ;		Carry set if error (currently user FAILed to I 24)
 25595                                  ;   Registers modified: all
 25596                                  ;----------------------------------------------------------------------------
 25597                                  
 25598                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25599                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25600                                  
 25601                                  ValidateCDS:
 25602                                  	; 19/05/2019 - Retro DOS v4.0
 25603                                  	; 28/07/2018 - Retro DOS v3.0
 25604                                  
 25605                                     %define  Temp	[bp-2]	; word
 25606                                     %define  SaveCDS	[bp-6]	; dword
 25607                                     %define  SaveCDSL	[bp-6]	; word
 25608                                     %define  SaveCDSH	[bp-4]	; word
 25609                                  
 25610                                  	;Enter
 25611 0000413A 55                      	push	bp
 25612 0000413B 89E5                    	mov	bp,sp
 25613 0000413D 83EC06                  	sub	sp,6
 25614                                  
 25615 00004140 897EFE                  	MOV	Temp,DI
 25616                                  
 25617                                  ;hkn; SS override
 25618 00004143 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25619 00004148 8976FA                  	MOV	SaveCDSL,SI
 25620 0000414B 8C5EFC                  	MOV	SaveCDSH,DS
 25621                                  	;EnterCrit critDisk
 25622 0000414E E891D1                  	call	ECritDisk
 25623                                  	; 21/11/2022
 25624                                  	;test	byte [SI+curdir.flags+1],80h
 25625                                  	;test	word [si+67],8000h
 25626                                  	; 17/12/2022
 25627                                  	;test	byte [SI+68],80h
 25628 00004151 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25629                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25630 00004155 7403                    	JZ	short _DoSplice
 25631 00004157 E98D00                  	JMP	FatFail
 25632                                  _DoSplice:
 25633 0000415A 30D2                    	XOR	DL,DL
 25634 0000415C 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25635                                  
 25636                                  ;hkn; SS is DOSDATA
 25637                                  	;Context ES
 25638 00004161 16                      	push	ss
 25639 00004162 07                      	pop	es
 25640                                  	;Invoke	FStrcpy
 25641 00004163 E85AD0                  	call	FStrCpy
 25642 00004166 8B76FE                  	MOV	SI,Temp
 25643                                  
 25644                                  ;hkn; SS is DOSDATA
 25645                                  	;Context DS
 25646 00004169 16                      	push	ss
 25647 0000416A 1F                      	pop	ds	
 25648                                  	;Invoke	Splice
 25649 0000416B E8132B                  	call	Splice
 25650                                  
 25651                                   ;hkn; SS is DOSDATA
 25652                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25653 0000416E 16                      	push	ss
 25654 0000416F 1F                      	pop	ds
 25655 00004170 8816[4C03]              	MOV	[NoSetDir],DL
 25656 00004174 C43E[A205]              	LES	DI,[THISCDS]
 25657                                  	;SAVE	<BP>
 25658 00004178 55                      	push	bp
 25659                                  	;Invoke	FATREAD_CDS
 25660 00004179 E81314                  	call	FATREAD_CDS	
 25661                                  	;RESTORE <BP>
 25662 0000417C 5D                      	pop	bp
 25663 0000417D 7268                    	JC	short FatFail
 25664                                  
 25665 0000417F C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25666                                  	;cmp	word [si+73],-1
 25667 00004183 837C49FF                	CMP	word [SI+curdir.ID],-1
 25668 00004187 7550                    	JNZ	short RestoreCDS
 25669                                  
 25670                                  ;hkn; SS is DOSDATA
 25671                                  	;Context ES
 25672 00004189 16                      	push	ss
 25673 0000418A 07                      	pop	es
 25674                                  
 25675                                  ;hkn; SS override
 25676                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25677 0000418B 36FF36[B205]            	push	word [SS:WFP_START]
 25678                                  	;cmp	si,[bp-6]
 25679 00004190 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25680 00004193 750B                    	JNZ	short DoChdir
 25681                                  	;mov	di,[bp-2]
 25682 00004195 8B7EFE                  	MOV	DI,Temp
 25683                                  
 25684                                  ;hkn; SS override
 25685 00004198 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25686                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25687 0000419D E820D0                  	call	FStrCpy
 25688                                  DoChdir:
 25689                                  ;hkn; SS is DOSDATA
 25690                                  	;Context DS
 25691 000041A0 16                      	push	ss
 25692 000041A1 1F                      	pop	ds
 25693                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25694 000041A2 FF36[6D05]              	push	word [SATTRIB]
 25695 000041A6 55                      	push	bp
 25696                                  	;Invoke	DOS_ChDir
 25697 000041A7 E85FEF                  	call	DOS_CHDIR
 25698                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25699 000041AA 5D                      	pop	bp
 25700 000041AB 5B                      	pop	bx
 25701 000041AC 8F06[B205]              	pop	word [WFP_START]
 25702 000041B0 881E[6D05]              	MOV	[SATTRIB],BL
 25703 000041B4 C576FA                  	LDS	SI,SaveCDS
 25704 000041B7 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25705                                  
 25706                                  ;hkn; SS override for THISCDS
 25707 000041B9 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25708 000041BE 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25709 000041C3 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25710 000041C5 884C03                  	MOV	[SI+3],CL		;	    }
 25711                                  SetCluster:
 25712                                  	; 16/02/2024
 25713                                  	;;mov	word [si+73],0FFFFh
 25714                                  	;MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25715                                  	;
 25716 000041C8 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25717                                  	; 21/11/2022
 25718                                  	;test	byte [si+curdir.flags+1],20h
 25719                                  	; 19/05/2019
 25720                                  	; MSDOS 6.0
 25721                                  	; 17/12/2022
 25722                                  	;test	byte [si+68],20h
 25723 000041CD F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25724                                  	;;test	word [si+67],2000h
 25725                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25726 000041D1 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25727 000041D3 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25728                                  _setdirclus:
 25729                                  	;mov	[si+73],cx
 25730 000041D6 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25731                                  RestoreCDS:
 25732 000041D9 C47EFA                  	LES	DI,SaveCDS
 25733 000041DC 36893E[A205]            	MOV	[SS:THISCDS],DI
 25734 000041E1 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25735 000041E6 F8                      	CLC
 25736                                  FatFail:
 25737                                  	;LeaveCrit critDisk
 25738 000041E7 E813D1                  	call	LCritDisk
 25739                                  
 25740                                  	;les	di,[bp-6]
 25741 000041EA C47EFA                  	LES	DI,SaveCDS
 25742                                  	;Leave
 25743 000041ED 89EC                    	mov	sp,bp
 25744 000041EF 5D                      	pop	bp
 25745 000041F0 C3                      	retn
 25746                                  
 25747                                  ; 28/07/2018 - Retro DOS v3.0
 25748                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25749                                  
 25750                                  ;Break	<CheckThisDevice - Check for being a device>
 25751                                  ;---------------------------------------------------------------------------
 25752                                  ;
 25753                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25754                                  ;   device specified. We will return carry if there is a device present. 
 25755                                  ;   The forms of devices we will recognize are:
 25756                                  ;
 25757                                  ;	[path]device
 25758                                  ;
 25759                                  ;   Note that the drive letter has *already* been removed. All other forms
 25760                                  ;   are not considered to be devices. If such a device is found we change
 25761                                  ;   the source pointer to point to the device component.
 25762                                  ;
 25763                                  ;   Inputs:	ES is DOSDATA
 25764                                  ;		DS:SI contains name
 25765                                  ;   Outputs:	ES is DOSDATA
 25766                                  ;		DS:SI point to name or device
 25767                                  ;		Carry flag set if device was found
 25768                                  ;		Carry flag reset otherwise
 25769                                  ;   Registers Modified: all except ES:DI, DS
 25770                                  ;----------------------------------------------------------------------------
 25771                                  
 25772                                  CheckThisDevice:
 25773 000041F1 57                      	push	di
 25774 000041F2 56                      	push	si
 25775 000041F3 89F7                    	MOV	DI,SI
 25776                                  
 25777                                  ; Check for presence of \dev\ (Dam multiplan!)
 25778                                  
 25779 000041F5 8A04                    	MOV	AL,[SI]
 25780 000041F7 E8620D                  	call	PATHCHRCMP		; is it a path char?
 25781 000041FA 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25782 000041FC 46                      	INC	SI			; simulate LODSB
 25783                                  
 25784                                  ; We have the leading path separator. Look for DEV part.
 25785                                  
 25786 000041FD AD                      	LODSW
 25787 000041FE 0D2020                  	OR	AX,2020h
 25788 00004201 3D6465                  	cmp	ax,"de"
 25789                                  	;CMP	AX,"e"<< 8 + "d"
 25790 00004204 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25791 00004206 AC                      	LODSB
 25792 00004207 0C20                    	OR	AL,20h
 25793 00004209 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25794 0000420B 7526                    	JNZ	short NotDevice
 25795 0000420D AC                      	LODSB
 25796 0000420E E84B0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25797 00004211 7520                    	JNZ	short NotDevice		; no. go for it.
 25798                                  
 25799                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25800                                  ; SI and DevName may destroy DS.
 25801                                  
 25802                                  ParseDev:
 25803 00004213 1E                      	push	ds
 25804 00004214 56                      	push	si			; preserve the source pointer
 25805 00004215 E8860C                  	call	NameTrans		; advance DS:SI
 25806 00004218 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25807 0000421B F9                      	STC				; simulate a Carry return from DevName
 25808 0000421C 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25809                                  
 25810                                  ;hkn; SS is DOSDATA
 25811 0000421E 16                      	push	ss
 25812 0000421F 1F                      	pop	ds
 25813                                  
 25814                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25815                                  ;
 25816                                  ; SR;
 25817                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25818                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25819                                  ; old call set the volume attribute bit.
 25820                                  
 25821 00004220 A0[6D05]                	mov	al,[SATTRIB]
 25822 00004223 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25823                                  
 25824                                  ; M026 - end
 25825                                  
 25826 00004226 E885FE                  	call	DEVNAME
 25827                                  
 25828                                  SkipSearch:
 25829 00004229 5E                      	pop	si
 25830 0000422A 1F                      	pop	ds
 25831                                  
 25832                                  ; SI points to the beginning of the potential device. If we have a device
 25833                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25834                                  ; original value. At this point Carry set indicates FILE.
 25835                                  
 25836                                  CheckReturn:
 25837 0000422B 5F                      	pop	di			; get original SI
 25838 0000422C 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25839 0000422E 89FE                    	MOV	SI,DI
 25840                                  Check_Done:
 25841 00004230 5F                      	pop	di
 25842 00004231 F5                      	CMC				; invert carry. Carry => device
 25843 00004232 C3                      	retn
 25844                                  NotDevice:
 25845 00004233 F9                      	STC
 25846 00004234 EBF5                    	JMP	short CheckReturn
 25847                                  
 25848                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25849                                  ;-----------------------------------------------------------------------------
 25850                                  ;
 25851                                  ; Procedure Name : LookupPath
 25852                                  ;
 25853                                  ; Output  DS:SI -> path name,
 25854                                  ;	  ES:DI -> dir entry info buffer
 25855                                  ;	  ES:CX -> extended dir info buffer
 25856                                  ;
 25857                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25858                                  ;			     FastOpen, DS:SI points to char just one after
 25859                                  ;			     the last char of path name which is fully or
 25860                                  ;			     partially found in FastOPen
 25861                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25862                                  ;
 25863                                  ;----------------------------------------------------------------------------
 25864                                  
 25865                                  LookupPath:
 25866                                  ;	PUSH	AX
 25867                                  
 25868                                  ;hkn; SS override
 25869                                  	;test	byte [ss:FastOpenFlg],1
 25870 00004236 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25871 0000423C 7503                    	JNZ	short FASTINST			    ; and this routine is
 25872                                  NOLOOK:
 25873 0000423E E99700                  	JMP	NOLOOKUP			    ; executed once
 25874                                  
 25875                                  FASTINST:
 25876                                  ;hkn; SS override
 25877                                  	;test	byte [ss:FastOpenFlg],8
 25878 00004241 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25879 00004247 75F5                    	JNZ	short NOLOOK			    ; yes
 25880                                  
 25881 00004249 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25882                                  
 25883                                  ;hkn; SS override
 25884 0000424C 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25885 00004251 BF[460D]                	MOV	DI,Dir_Info_Buff
 25886 00004254 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25887 00004257 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25888 00004259 1E                      	PUSH	DS
 25889 0000425A 07                      	POP	ES
 25890                                  
 25891                                  ;hkn; SS override
 25892                                  	;call	far [bx+2]
 25893 0000425B FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25894 0000425E 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25895                                  
 25896 00004260 8D5CFE                  	LEA	BX,[SI-2]
 25897                                  
 25898                                  ;hkn; SS override
 25899 00004263 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25900 00004268 745D                    	JZ	short NOTFOUND			    ; no
 25901                                  
 25902                                  	; 19/05/2019 - Retro DOS v4.0
 25903                                  
 25904                                  	; MSDOS 6.0				    ; fully or partially found
 25905 0000426A 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25906 0000426D 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25907 0000426F 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25908                                  
 25909                                  ;hkn; SS override for attrib/sattrib
 25910 00004270 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25911 00004275 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25912 0000427A 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25913                                  	;mov	ch,[es:di+0Bh]
 25914 0000427F 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25915 00004283 E81BFE                  	call	MatchAttributes 		    ;AN000;FO.;
 25916                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25917 00004286 59                      	POP	CX				    ;AN000;FO.;
 25918 00004287 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25919                                  parfnd:
 25920                                  
 25921                                  ;hkn; SS override
 25922 00004289 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25923 0000428E 89CB                    	MOV	BX,CX
 25924                                  	; MSDOS 6.0
 25925                                  	;mov	ax,[bx+7]
 25926 00004290 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25927                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25928 00004293 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25929 00004297 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25930 0000429A 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25931                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25932                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25933                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25934 0000429E 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25935 000042A1 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25936                                  
 25937 000042A5 06                      	PUSH	ES				    ; save ES
 25938                                  ;hkn; SS override
 25939 000042A6 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25940 000042AB 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25941                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25942 000042AE 07                      	POP	ES				    ; pop ES
 25943                                  ;SR;
 25944                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25945                                  ;indicate it is not a root dir
 25946                                  
 25947 000042AF 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25948 000042B6 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25949 000042BB 89FB                    	MOV	BX,DI				    ; start of entry
 25950                                  	;lea	si,[di+1Ah]
 25951 000042BD 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25952                                  						    ; dir_first field in the
 25953                                  						    ; dir entry
 25954                                  ;hkn; SS override for FastOpenFlg
 25955                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25956 000042C0 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25957                                  ;	POP	AX
 25958 000042C6 C3                      	RETN
 25959                                  NOTFOUND:
 25960 000042C7 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25961 000042CA 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25962 000042CC 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25963                                  Partial_Success:
 25964                                  	;and	byte [SS:FastOpenFlg],0FBh
 25965 000042D2 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25966                                  NOLOOKUP:
 25967                                  ;	POP	AX
 25968 000042D8 F9                      	STC
 25969 000042D9 C3                      	RETN
 25970                                  
 25971                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25972                                  ;-----------------------------------------------------------------------------
 25973                                  ;
 25974                                  ; Procedure Name : InsertPath
 25975                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25976                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25977                                  ;	  DS = DOSDATA
 25978                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25979                                  ;
 25980                                  ;-----------------------------------------------------------------------------
 25981                                  
 25982                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25983                                  
 25984                                  InsertPath:
 25985 000042DA 9C                      	PUSHF
 25986                                  ;hkn; SS override for FastOpenFlag
 25987                                  	;test	byte [SS:FastOpenFlg], 1
 25988 000042DB 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25989 000042E1 7476                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25990                                  	;test	byte [ss:FastOpenFlg],2
 25991 000042E3 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25992 000042E9 740D                    	JZ	short INSERT_DIR_INFO		; no
 25993                                  	;and	byte [ss:FastOpenFlg],0FDh
 25994 000042EB 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25995 000042F1 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25996 000042F6 EB5B                    	JMP	short GET_NEXT2
 25997                                  
 25998                                  INSERT_DIR_INFO:				; save registers
 25999 000042F8 1E                      	PUSH	DS
 26000 000042F9 06                      	PUSH	ES
 26001 000042FA 53                      	PUSH	BX
 26002 000042FB 56                      	PUSH	SI
 26003 000042FC 57                      	PUSH	DI
 26004 000042FD 51                      	PUSH	CX
 26005 000042FE 50                      	PUSH	AX
 26006                                  
 26007                                  ;hkn; SS override
 26008 000042FF 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 26009 00004304 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 26010                                  
 26011                                  ; 21/02/2024
 26012                                  %if 0
 26013                                  	;mov	ax,[di+6]
 26014                                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 26015                                  	; MSDOS 6.0
 26016                                  	;mov	[ss:si+1],ax
 26017                                  	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 26018                                  	; 19/05/2019 - Retro DOS v4.0
 26019                                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 26020                                  
 26021                                  ;hkn; SS is DOSDATA
 26022                                  	push	ss
 26023                                  	pop	ds
 26024                                  	; MSDOS 3.3
 26025                                  	;;mov	[si+1],ax
 26026                                  	;MOV	[SI+FEI.dirsec],AX
 26027                                  	; MSDOS 6.0
 26028                                  	;mov	[si+3],ax
 26029                                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 26030                                  %else
 26031                                  	;lds	ax,[di+6]
 26032 00004307 C54506                  	lds	ax,[di+BUFFINFO.buf_sector]	; get directory sector
 26033                                  	;mov	[ss:si+1],ax
 26034                                  	; 27/06/2024
 26035                                  	;mov	[ss:si+FEI.dirsec],ax
 26036                                  	;
 26037                                  	;mov	[ss:si+3],ax
 26038 0000430A 368C5C03                	mov	[ss:si+FEI.dirsec+2],ds
 26039 0000430E 16                      	push	ss
 26040 0000430F 1F                      	pop	ds
 26041                                  	; 27/06/2024
 26042 00004310 894401                  	mov	[si+FEI.dirsec],ax
 26043                                  %endif
 26044                                  
 26045                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26046 00004313 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 26047                                  	;mov	[si+5],ax ; MSDOS 6.0
 26048                                  	;;mov	[si+3],ax ; MSDOS 3.3
 26049 00004316 894405                  	MOV	[SI+FEI.clusnum],AX
 26050                                  	; MSDOS 6.0
 26051 00004319 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 26052                                  	;mov	[si+7],ax
 26053 0000431C 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 26054 0000431F A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 26055                                  	;mov	[si+9],ax
 26056 00004322 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 26057                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26058 00004325 89D8                    	MOV	AX,BX
 26059                                  	;;add	di,16  ; MSDOS 3.3
 26060                                  	;add	di,20  ; MSDOS 6.0
 26061 00004327 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 26062 0000432A 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 26063                                  	;mov	cl,32
 26064 0000432C B120                    	MOV	CL,dir_entry.size
 26065 0000432E F6F1                    	DIV	CL
 26066                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 26067 00004330 8804                    	mov	[si],al
 26068                                  
 26069 00004332 1E                      	PUSH	DS
 26070 00004333 07                      	POP	ES
 26071                                  
 26072 00004334 8E1E[E405]              	MOV	DS,[CURBUF+2]
 26073 00004338 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 26074                                  	;cmp	word [di+1Ah],0
 26075 0000433A 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 26076                                  					; never insert info when file is empty
 26077 0000433E 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 26078                                  
 26079 00004340 56                      	PUSH	SI			; ES:BX -> extended info
 26080 00004341 5B                      	POP	BX
 26081                                  
 26082                                  	;mov	al,2
 26083 00004342 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 26084 00004344 BE[300D]                	MOV	SI,FastOpenTable
 26085                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 26086                                  	; 07/12/2022
 26087 00004347 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 26088                                  
 26089 0000434B F8                      	CLC
 26090                                  SKIP_INSERT:
 26091 0000434C 58                      	POP	AX
 26092 0000434D 59                      	POP	CX			; restore registers
 26093 0000434E 5F                      	POP	DI
 26094 0000434F 5E                      	POP	SI
 26095 00004350 5B                      	POP	BX
 26096 00004351 07                      	POP	ES
 26097 00004352 1F                      	POP	DS
 26098                                  GET_NEXT2:
 26099                                  	;or	[ss:FastOpenFlg],8
 26100 00004353 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 26101                                  					; we got dir info from fastopen so
 26102                                  GET_NEXT_ELEMENT:
 26103 00004359 9D                      	POPF
 26104 0000435A C3                      	RETN
 26105                                  
 26106                                  ;============================================================================
 26107                                  ; DEV.ASM (MSDOS 6.0, 1991)
 26108                                  ;============================================================================
 26109                                  ; 17/07/2018 - Retro DOS v3.0
 26110                                  ; 30/04/2019 - Retro DOS v4.0
 26111                                  
 26112                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 26113                                  
 26114                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 26115                                  
 26116                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 26117                                  
 26118                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 26119                                  ;DEV001s:
 26120                                  ;		length of packets
 26121 0000435B 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 26122                                  ;LenTab: db	22,14,22,13,15,14
 26123                                  
 26124                                  ;	Error Function
 26125                                  
 26126                                  CmdTab:
 26127 00004361 8604                    	DB	86h, DEVRD	; 0 input
 26128 00004363 8605                    	DB	86h, DEVRDND	; 1 input status
 26129 00004365 8708                    	DB	87h, DEVWRT	; 2 output
 26130 00004367 870A                    	DB	87h, DEVOST	; 3 output status
 26131 00004369 8607                    	DB	86h, DEVIFL	; 4 input flush
 26132 0000436B 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 26133                                  
 26134                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 26135                                  
 26136                                  ;CmdTab:
 26137                                  ;	db	86h, 4
 26138                                  ;	db	86h, 5
 26139                                  ;	db	87h, 8
 26140                                  ;	db	87h, 10
 26141                                  ;	db	86h, 7
 26142                                  ;	db	86h, 5
 26143                                  
 26144                                  ;DEV001E:
 26145                                  
 26146                                  ; 30/04/2019 - Retro DOS v4.0
 26147                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 26148                                  
 26149                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 26150                                  ;----------------------------------------------------------------------------
 26151                                  ;
 26152                                  ; Procedure Name : IOFUNC
 26153                                  ;
 26154                                  ; Inputs:
 26155                                  ;	DS:SI Points to SFT
 26156                                  ;	AH is function code
 26157                                  ;		= 0 Input
 26158                                  ;		= 1 Input Status
 26159                                  ;		= 2 Output
 26160                                  ;		= 3 Output Status
 26161                                  ;		= 4 Flush
 26162                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 26163                                  ;				   present.
 26164                                  ;	AL = character if output
 26165                                  ; Function:
 26166                                  ;	Perform indicated I/O to device or file
 26167                                  ; Outputs:
 26168                                  ;	AL is character if input
 26169                                  ;	If a status call
 26170                                  ;		zero set if not ready
 26171                                  ;		zero reset if ready (character in AL for input status)
 26172                                  ; For regular files:
 26173                                  ;	Input Status
 26174                                  ;		Gets character but restores position
 26175                                  ;		Zero set on EOF
 26176                                  ;	Input
 26177                                  ;		Gets character advances position
 26178                                  ;		Returns ^Z on EOF
 26179                                  ;	Output Status
 26180                                  ;		Always ready
 26181                                  ; AX altered, all other registers preserved
 26182                                  ;----------------------------------------------------------------------------
 26183                                  
 26184                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26185                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 26186                                  
 26187                                  IOFUNC:
 26188 0000436D 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 26189                                  					; DEVIOBUF
 26190 00004372 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 26191 00004379 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 26192 00004380 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 26193                                  	;test	byte [si+6],80h
 26194                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 26195 00004384 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26196 00004388 7403                    	JZ	short IOTO22		;AN000;
 26197 0000438A E9A400                  	JMP	IOTOFILE		;AN000;
 26198                                  IOTO22:
 26199                                  	;test	word [si+5],80h
 26200                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 26201 0000438D F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 26202 00004391 7503                    	JNZ	short IOTO33		;AN000;
 26203 00004393 E99B00                  	JMP	IOTOFILE		;AN000;
 26204                                  IOTO33:
 26205 00004396 06                      	push	es ; * (MSDOS 6.21)
 26206 00004397 E8C8C0                  	call	save_world
 26207 0000439A 8CDA                    	MOV	DX,DS
 26208 0000439C 8CD3                    	MOV	BX,SS
 26209 0000439E 8EDB                    	MOV	DS,BX
 26210 000043A0 8EC3                    	MOV	ES,BX
 26211 000043A2 31DB                    	XOR	BX,BX
 26212 000043A4 80FC05                  	cmp	ah,5		    ; system wait enabled?
 26213 000043A7 7503                    	jnz	short _no_sys_wait
 26214                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26215                                  	; 16/12/2022
 26216 000043A9 80CF04                  	or	bh,04h
 26217                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 26218                                  				    ; It is up to device driver to carry out
 26219                                  				    ; appropriate action.
 26220                                  _no_sys_wait:
 26221 000043AC 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 26222 000043B0 31DB                    	XOR	BX,BX
 26223 000043B2 881E[8903]              	MOV	[IOMED],BL
 26224                                  
 26225 000043B6 88E3                    	MOV	BL,AH		 	; get function
 26226 000043B8 2E8AA7[5B43]            	MOV	AH,[cs:BX+LenTab]
 26227 000043BD D1E3                    	SHL	BX,1
 26228 000043BF 2E8B8F[6143]            	MOV	CX,[cs:BX+CmdTab]
 26229 000043C4 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 26230 000043C7 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 26231 000043CB 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 26232                                  
 26233 000043CF 8EDA                    	MOV	DS,DX
 26234 000043D1 E86401                  	CALL	DEVIOCALL
 26235 000043D4 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 26236 000043D9 21FF                    	and	di,di
 26237 000043DB 7833                    	js	short DevErr
 26238                                  OKDevIO:
 26239 000043DD 8CD0                    	MOV	AX,SS
 26240 000043DF 8ED8                    	MOV	DS,AX
 26241                                  
 26242                                  	;cmp	ch,5
 26243 000043E1 80FD05                  	CMP	CH,DEVRDND
 26244 000043E4 7506                    	JNZ	short DNODRD
 26245 000043E6 A0[8903]                	MOV	AL,[IORCHR]
 26246 000043E9 A2[BC03]                	MOV	[DEVIOBUF],AL
 26247                                  
 26248                                  DNODRD: 
 26249 000043EC 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 26250 000043F0 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 26251                                  	;and	ah,2
 26252 000043F2 80E402                  	AND	AH,STBUI>>8
 26253                                  
 26254                                  QuickReturn:				;AN000; 2/13/KK
 26255 000043F5 E853C0                  	call	restore_world
 26256 000043F8 07                      	pop	es ; * (MSDOS 6.21)
 26257                                  
 26258                                  	; SR;
 26259                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 26260                                  	; IoStatFail = -1 (set after return from the I24)
 26261                                  
 26262                                  	; MSDOS 6.0
 26263 000043F9 9C                      	pushf
 26264 000043FA 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 26265 000043FE 98                      	cbw				;sign extend to word
 26266                                  	;cmp	ax,-1
 26267                                  	; 27/06/2024
 26268 000043FF 3CFF                    	cmp	al,0FFh ; -1
 26269 00004401 7507                    	jne	short not_fail_ret
 26270 00004403 36FE06[8300]            	inc	byte [ss:IoStatFail]
 26271 00004408 9D                      	popf
 26272 00004409 C3                      	retn
 26273                                  
 26274                                  not_fail_ret:
 26275 0000440A 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 26276 0000440E 9D                      	popf
 26277 0000440F C3                      	retn
 26278                                  
 26279                                  DevErr:
 26280 00004410 88CC                    	MOV	AH,CL
 26281 00004412 E87B0D                  	call	CHARHARD
 26282 00004415 3C01                    	CMP	AL,1
 26283 00004417 7507                    	JNZ	short NO_RETRY
 26284 00004419 E82FC0                  	call	restore_world
 26285                                  	; 12/05/2019
 26286 0000441C 07                      	pop	es ; * (MSDOS 6.21)		
 26287 0000441D E94DFF                  	JMP	IOFUNC	; 10/08/2018
 26288                                  
 26289                                  NO_RETRY:
 26290                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 26291                                  	; ready so that DOS doesn't get caught in a status loop when user 
 26292                                  	; simply wants to ignore the error.
 26293                                  	;
 26294                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 26295                                  	; should be checked by the caller on return
 26296                                  
 26297                                  					; SS override
 26298 00004420 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 26299                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 26300                                  
 26301                                  	; SR;
 26302                                  	; Check if user failed
 26303                                  
 26304                                  	; MSDOS 6.0
 26305 00004426 3C03                    	cmp	al,3
 26306 00004428 7505                    	jnz	short not_fail
 26307 0000442A 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 26308                                  not_fail:
 26309 0000442F EBAC                    	JMP	short OKDevIO
 26310                                  
 26311                                  IOTOFILE:
 26312 00004431 08E4                    	OR	AH,AH
 26313 00004433 7421                    	JZ	short IOIN
 26314 00004435 FECC                    	DEC	AH
 26315 00004437 7405                    	JZ	short IOIST
 26316 00004439 FECC                    	DEC	AH
 26317 0000443B 7411                    	JZ	short IOUT
 26318                                  IOUT_retn:	; 18/12/2022
 26319 0000443D C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 26320                                  IOIST:
 26321                                  	;push	word [si+15h]
 26322 0000443E FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26323                                  	;push	word [si+17h]
 26324 00004441 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26325 00004444 E80F00                  	CALL	IOIN
 26326                                  	;pop	word [si+17h]
 26327 00004447 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26328                                  	;pop	word [si+15h]
 26329 0000444A 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26330 0000444D C3                      	retn
 26331                                  IOUT:
 26332 0000444E E82500                  	CALL	SETXADDR
 26333 00004451 E8CDEF                  	call	DOS_WRITE
 26334                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26335                                  	; 18/12/2022
 26336 00004454 EB4F                    	jmp	RESTXADDR
 26337                                  ;IOUT_retn:
 26338                                  	;retn			; come crying to me when things don't
 26339                                  				; work ARR
 26340                                  IOIN:
 26341 00004456 E81D00                  	CALL	SETXADDR
 26342                                  					; SS override for DOS34_FLAG
 26343                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26344                                  	;or	word [ss:DOS34_FLAG],40h
 26345                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26346                                  	; 16/12/2022
 26347 00004459 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26348 0000445F E8BFED                  	CALL	DOS_READ
 26349                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26350                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26351                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26352                                  	; 16/12/2022
 26353 00004462 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26354 00004468 09C9                    	OR	CX,CX			; Check EOF
 26355 0000446A E83800                  	CALL	RESTXADDR
 26356                                  					; SS override
 26357 0000446D 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26358 00004471 75CA                    	jnz	short IOUT_retn	
 26359 00004473 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26360 00004475 C3                      	retn
 26361                                  
 26362                                  SETXADDR:
 26363                                  					; SS override
 26364 00004476 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26365                                  
 26366 0000447B 06                      	push	es ; * (MSDOS 6.21)
 26367                                  
 26368 0000447C E8E3BF                  	call	save_world
 26369                                  					; SS override for DMAADD and THISSFT
 26370                                  	; 24/09/2023
 26371                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26372                                  	;PUSH	WORD [SS:DMAADD+2]
 26373 0000447F 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26374                                  
 26375                                  ; 22/02/2024
 26376                                  %if 0
 26377                                  	push	ss
 26378                                  	pop	ds
 26379                                  
 26380                                  	; 24/09/2023
 26381                                  	push	word [DMAADD]
 26382                                  	push	word [DMAADD+2]
 26383                                  
 26384                                  	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26385                                  	MOV	CX,[IOXAD+2]
 26386                                  	MOV	[DMAADD+2],CX
 26387                                  	MOV	CX,[IOXAD]
 26388                                  	MOV	[DMAADD],CX		; Set byte trans addr
 26389                                  %else
 26390                                  	; 22/02/2024 - Retro DOS v4.2
 26391                                  	; PCDOS 7.1 IBMDOS.COM
 26392                                  	
 26393 00004484 36C50E[2C03]            	lds	cx,[ss:DMAADD]		; Save Disk transfer address
 26394 00004489 51                      	push	cx
 26395 0000448A 1E                      	push	ds
 26396 0000448B 36C50E[8A03]            	lds	cx,[ss:IOXAD]		; Set byte trans address
 26397 00004490 368C1E[2E03]            	mov	[ss:DMAADD+2],ds
 26398 00004495 16                      	push	ss
 26399 00004496 1F                      	pop	ds
 26400 00004497 890E[2C03]              	mov	[DMAADD],cx
 26401 0000449B 8936[9E05]              	mov	[THISSFT],si
 26402                                  %endif
 26403 0000449F 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26404 000044A3 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26405                                  
 26406                                  RESTXADDR:
 26407 000044A5 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26408 000044A9 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26409 000044AD 8F06[2C03]              	POP	WORD [DMAADD]
 26410                                  
 26411 000044B1 E897BF                  	call	restore_world
 26412                                  
 26413 000044B4 07                      	pop	es ; * (MSDOS 6.21)
 26414                                  					; SS override
 26415                                  RESTRET:
 26416 000044B5 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26417                                  
 26418                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26419                                  ; 21/11/2022
 26420                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26421                                  
 26422                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26423                                  
 26424                                  ;----------------------------------------------------------------------------
 26425                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26426                                  ;
 26427                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26428                                  ;	the SFT.
 26429                                  ;
 26430                                  ;	ENTRY	(ES:DI) = SFT
 26431                                  ;	EXIT	none
 26432                                  ;	USES	all
 26433                                  ;----------------------------------------------------------------------------
 26434                                  
 26435                                  DEV_OPEN_SFT:
 26436 000044BA 06                      	push	es ; * (MSDOS 6.21)
 26437 000044BB E8A4BF                  	call	save_world
 26438                                  	;mov	al,0Dh	
 26439 000044BE B00D                    	MOV	AL,DEVOPN
 26440 000044C0 EB06                    	JMP	SHORT DO_OPCLS
 26441                                  
 26442                                  ;----------------------------------------------------------------------------
 26443                                  ; Procedure Name : DEV_CLOSE_SFT
 26444                                  ;
 26445                                  ; Inputs:
 26446                                  ;	ES:DI Points to SFT
 26447                                  ; Function:
 26448                                  ;	Issue a CLOSE call to the correct device
 26449                                  ; Outputs:
 26450                                  ;	None
 26451                                  ; ALL preserved
 26452                                  ;----------------------------------------------------------------------------
 26453                                  
 26454                                  DEV_CLOSE_SFT:
 26455 000044C2 06                      	push	es ; * (MSDOS 6.21)
 26456 000044C3 E89CBF                  	call	save_world
 26457                                  	;mov	al,0Eh	
 26458 000044C6 B00E                    	MOV	AL,DEVCLS
 26459                                  
 26460                                  	; Main entry for device open and close. AL contains the function 
 26461                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26462                                  	; open/close to block devices. This allows networks to function but 
 26463                                  	; does NOT hang up with bogus change-line code.
 26464                                  
 26465                                  	;entry	DO_OPCLS
 26466                                  DO_OPCLS:
 26467                                  	; Is the SFT for the net? If so, no action necessary.
 26468                                  
 26469                                  	; MSDOS 6.0
 26470                                  	;test	word [es:di+5],8000h
 26471                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26472 000044C8 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26473 000044CD 7564                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26474 000044CF 30E4                    	XOR	AH,AH			; Unit
 26475                                  	;test	byte [es:di+5],80h
 26476 000044D1 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26477                                  	;les	di,[es:di+7]
 26478 000044D6 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26479 000044DA 7511                    	JNZ	short GOT_DEV_ADDR
 26480                                  
 26481                                  	; We are about to call device open/close on a block driver. If no 
 26482                                  	; sharing then just short circuit to done.
 26483                                  	
 26484                                  	; MSDOS 6.0
 26485                                  					; SS override
 26486 000044DC 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26487 000044E2 764F                    	JBE	short OPCLS_DONE	;AN010; yes
 26488                                  
 26489                                  ; 22/02/2024
 26490                                  %if 0
 26491                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26492                                  	;mov	ah,[es:di+1]
 26493                                  	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26494                                  	mov	cl,[es:di]
 26495                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26496                                  %else
 26497                                  	; 22/02/2024 - Retro DOS v4.2
 26498                                  	; (PCDOS 7.1 IBMDOS.COM)
 26499                                  	;mov	cx,[es:di+DPB.DRIVE]
 26500 000044E4 268B0D                  	mov	cx,[es:di]
 26501 000044E7 88EC                    	mov	ah,ch			; AH = unit
 26502                                  					; CL = drive
 26503                                  %endif
 26504                                  
 26505                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26506                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26507 000044E9 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26508                                  GOT_DEV_ADDR:				; ES:DI -> device
 26509                                  	;test	word [es:di+4],800h
 26510                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26511 000044ED 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26512 000044F2 743F                    	JZ	short OPCLS_DONE	; Device can't
 26513 000044F4 06                      	PUSH	ES
 26514 000044F5 1F                      	POP	DS
 26515 000044F6 89FE                    	MOV	SI,DI			; DS:SI -> device
 26516                                  
 26517                                  OPCLS_RETRY:
 26518                                  	;Context ES
 26519 000044F8 16                      	push	ss
 26520 000044F9 07                      	pop	es
 26521                                  					; DEVCALL is in DOSDATA
 26522 000044FA BF[5A03]                	MOV	DI,DEVCALL
 26523                                  
 26524 000044FD 89FB                    	MOV	BX,DI
 26525 000044FF 50                      	PUSH	AX
 26526                                  	;mov	al,13
 26527 00004500 B00D                    	MOV	AL,DOPCLHL
 26528 00004502 AA                      	STOSB				; Length
 26529 00004503 58                      	POP	AX
 26530                                  
 26531 00004504 86E0                    	XCHG	AH,AL
 26532                                  	;STOSB				; Unit
 26533                                  	; 22/02/2024 (PCDOS 7.1 IBMDOS.COM)
 26534 00004506 AB                      	stosw				; Unit, Command
 26535 00004507 86E0                    	XCHG	AH,AL
 26536                                  	;STOSB				; Command
 26537                                  
 26538 00004509 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26539 0000450E 50                      	PUSH	AX			; Save Unit,Command
 26540                                  	;invoke	DEVIOCALL2
 26541 0000450F E82900                  	call	DEVIOCALL2
 26542                                  
 26543                                  	;mov	di,[es:bx+3]
 26544 00004512 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26545                                  	;test	di,8000h
 26546                                  	;jz	short OPCLS_DONEP	
 26547 00004516 21FF                    	and	di,di
 26548 00004518 7918                    	jns	short OPCLS_DONEP	; No error
 26549                                  	; 21/11/2022
 26550                                  	;test	word [si+4],8000h
 26551                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26552                                  	;test	word [si+5],80h
 26553 0000451A F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26554 0000451E 7404                    	JZ	short BLKDEV
 26555 00004520 B486                    	MOV	AH,86H			; Read error in data, Char dev
 26556 00004522 EB04                    	JMP	SHORT HRDERR
 26557                                  BLKDEV:
 26558 00004524 88C8                    	MOV	AL,CL			; Drive # in AL
 26559 00004526 B406                    	MOV	AH,6			; Read error in data, Blk dev
 26560                                  HRDERR:
 26561                                  	;invoke	CHARHARD
 26562 00004528 E8650C                  	call	CHARHARD
 26563 0000452B 3C01                    	cmp	al,1
 26564 0000452D 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26565                                  					;  Note that FAIL is essentually IGNORED
 26566 0000452F 58                      	POP	AX			; Get back Unit, Command
 26567 00004530 EBC6                    	JMP	short OPCLS_RETRY
 26568                                  OPCLS_DONEP:
 26569 00004532 58                      	POP	AX			; Clean stack
 26570                                  OPCLS_DONE:
 26571 00004533 E815BF                  	call	restore_world
 26572 00004536 07                      	pop	es ; * (MSDOS 6.21)
 26573 00004537 C3                      	retn
 26574                                  
 26575                                  ; 30/04/2019 - Retro DOS v4.0
 26576                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26577                                  
 26578                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26579                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26580                                  
 26581                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26582                                  ;----------------------------------------------------------------------------
 26583                                  ;**	DevIoCall  - Call Device
 26584                                  ;
 26585                                  ;	ENTRY	DS:SI Points to device SFT
 26586                                  ;		ES:BX Points to request data
 26587                                  ;	EXIT	DS:SI -> Device driver
 26588                                  ;	USES	DS:SI,AX
 26589                                  ;----------------------------------------------------------------------------
 26590                                  ;**	DevIoCall2 - Call Device
 26591                                  ;
 26592                                  ;	ENTRY	DS:SI Points to DPB
 26593                                  ;		ES:BX Points to request data
 26594                                  ;	EXIT	DS:SI -> Device driver
 26595                                  ;	USES	DS:SI,AX
 26596                                  ;----------------------------------------------------------------------------
 26597                                  
 26598                                  DEVIOCALL:
 26599                                  					; SS override for CALLSSEC, 
 26600                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26601 00004538 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26602                                  
 26603                                  	;entry	DEVIOCALL2
 26604                                  DEVIOCALL2:
 26605                                  	;EnterCrit critDevice
 26606 0000453B E8D9CD                  	call	ECritDevice
 26607                                  
 26608                                  	; MSDOS 6.0
 26609                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26610                                  	;test	byte [si+5],80h
 26611 0000453E F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26612 00004542 7545                    	jnz	short chardev2		;AN000; >32mb no
 26613                                  
 26614                                  	; 16/12/2022
 26615                                  	; 22/11/2022
 26616 00004544 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26617 00004548 3C04                    	cmp	al,DEVRD	; 4
 26618 0000454A 7408                    	je	short chkext	
 26619 0000454C 3C08                    	cmp	al,DEVWRT	; 8
 26620 0000454E 7404                    	je	short chkext
 26621 00004550 3C09                    	cmp	al,DEVWRTV	; 9
 26622 00004552 7535                    	jne	short chardev2
 26623                                  
 26624                                  	; 16/12/2022
 26625                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26626                                  	;;cmp	byte [es:bx+2],4
 26627                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26628                                  	;JZ	short chkext		;AN000; >32mb   yes
 26629                                  	;;cmp	byte [es:bx+2],8
 26630                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26631                                  	;JZ	short chkext		;AN000; >32mb   yes
 26632                                  	;;cmp	byte [es:bx+2],9
 26633                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26634                                  	;				;AN000; >32mb write/verify ?
 26635                                  	;JNZ	short chardev2		;AN000; >32mb no
 26636                                  chkext:
 26637 00004554 E8A400                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26638 00004557 7252                    	JC	short dev_exit		;AN000;LB. done
 26639                                  
 26640                                  	;test	byte [si+4],2
 26641 00004559 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26642 0000455D 741A                    	JZ	short chksector		;AN000;>32mb   no
 26643 0000455F 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26644                                  
 26645                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26646                                  	;MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26647                                  	; 22/02/2024
 26648 00004563 B8FFFF                  	mov	ax,-1 ; 0FFFFh
 26649 00004566 368706[6E03]            	xchg    ax,[ss:CALLSSEC]
 26650                                  
 26651 0000456B 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26652 0000456F 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26653 00004573 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26654 00004577 EB10                    	JMP	short chardev2		;AN000; >32mb
 26655                                  chksector:				;AN000; >32mb
 26656 00004579 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26657 0000457F 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26658                                  	;mov	word [es:bx+3],8107h
 26659 00004581 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26660                                  					;AN000; >32mb
 26661 00004587 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26662                                  
 26663                                  chardev2:				;AN000;
 26664                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26665                                  	; preserved
 26666                                  
 26667                                  	;mov	ax,[si+6]
 26668 00004589 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26669 0000458C 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26670 00004590 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26671 00004595 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26672                                  
 26673                                  	;mov	ax,[si+8]
 26674 0000459A 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26675 0000459D 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26676 000045A1 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26677                                  
 26678                                  	; MSDOS 6.0
 26679 000045A6 E84801                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26680 000045A9 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26681                                  
 26682                                  dev_exit:
 26683                                  	;LeaveCrit critDevice
 26684                                  	;call	LCritDevice
 26685                                  	;retn
 26686                                  	; 18/12/2022
 26687 000045AB E984CD                  	jmp	LCritDevice
 26688                                  
 26689                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26690                                  ; 22/11/2022
 26691                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26692                                  
 26693                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26694                                  ;---------------------------------------------------------------------------
 26695                                  ;
 26696                                  ; Procedure Name : SETREAD, SETWRITE
 26697                                  ;
 26698                                  ; Inputs:
 26699                                  ;	DS:BX = Transfer Address
 26700                                  ;	CX = Record Count
 26701                                  ;	DX = Starting Record
 26702                                  ;	AH = Media Byte
 26703                                  ;	AL = Unit Code
 26704                                  ; Function:
 26705                                  ;	Set up the device call header at DEVCALL
 26706                                  ; Output:
 26707                                  ;	ES:BX Points to DEVCALL
 26708                                  ; No other registers effected
 26709                                  ;
 26710                                  ;---------------------------------------------------------------------------
 26711                                  
 26712                                  SETREAD_XJ:
 26713                                  	;;;
 26714                                  	; 07/02/2024 - Retro DOS v4.2
 26715 000045AE 89FB                    	mov	bx,di
 26716 000045B0 EB07                    	jmp	short SETREAD_X
 26717                                  	;;;
 26718                                  
 26719                                  SETREAD_XT:
 26720                                  	;;;
 26721                                  	; 07/02/2024 - Retro DOS v4.2
 26722 000045B2 BB[B603]                	mov	bx,TIMEBUF
 26723 000045B5 53                      	push	bx
 26724                                  SETREAD_XTC:
 26725 000045B6 B90600                  	mov	cx,6
 26726                                  	;;;
 26727                                  SETREAD_X:
 26728                                  	;;;
 26729                                  	; 06/02/2024 - Retro DOS v4.2
 26730 000045B9 31C0                    	xor	ax,ax
 26731                                  	;mov	dx,ax ; 0
 26732 000045BB 99                      	cwd
 26733                                  	;;;
 26734                                  
 26735                                  ; ------------------------------------
 26736                                  
 26737                                  SETREAD:
 26738 000045BC 57                      	PUSH	DI
 26739 000045BD 51                      	PUSH	CX
 26740 000045BE 50                      	PUSH	AX
 26741 000045BF B104                    	MOV	CL,DEVRD ; mov cl,4
 26742                                  SETCALLHEAD:
 26743 000045C1 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26744 000045C3 16                      	PUSH	SS
 26745 000045C4 07                      	POP	ES
 26746                                  					; DEVCALL is in DOSDATA
 26747 000045C5 BF[5A03]                	MOV	DI,DEVCALL
 26748                                  
 26749 000045C8 AA                      	STOSB				; length
 26750 000045C9 58                      	POP	AX			; 
 26751 000045CA AA                      	STOSB				; Unit
 26752 000045CB 50                      	PUSH	AX
 26753 000045CC 88C8                    	MOV	AL,CL
 26754 000045CE AA                      	STOSB				; Command code
 26755 000045CF 31C0                    	XOR	AX,AX
 26756 000045D1 AB                      	STOSW				; Status
 26757 000045D2 83C708                  	ADD	DI,8			; Skip link fields
 26758 000045D5 58                      	POP	AX
 26759 000045D6 86E0                    	XCHG	AH,AL
 26760 000045D8 AA                      	STOSB				; Media byte
 26761 000045D9 86C4                    	XCHG	AL,AH
 26762 000045DB 50                      	PUSH	AX
 26763 000045DC 89D8                    	MOV	AX,BX
 26764 000045DE AB                      	STOSW
 26765                                  
 26766 000045DF 8CD8                    	MOV	AX,DS
 26767 000045E1 AB                      	STOSW				; Transfer addr
 26768                                  
 26769 000045E2 59                      	POP	CX			; Real AX
 26770 000045E3 58                      	POP	AX			; Real CX
 26771 000045E4 AB                      	STOSW				; Count
 26772                                  
 26773 000045E5 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26774 000045E6 AB                      	STOSW				; Start
 26775 000045E7 91                      	XCHG	AX,CX
 26776 000045E8 87D1                    	XCHG	DX,CX
 26777 000045EA 5F                      	POP	DI
 26778                                  					; DEVCALL is in DOSDATA
 26779 000045EB BB[5A03]                	MOV	BX,DEVCALL
 26780 000045EE C3                      	retn
 26781                                  
 26782                                  	;entry	SETWRITE
 26783                                  SETWRITE:
 26784                                  
 26785                                  ; Inputs:
 26786                                  ;	DS:BX = Transfer Address
 26787                                  ;	CX = Record Count
 26788                                  ;	DX = Starting Record
 26789                                  ;	AH = Media Byte
 26790                                  ;	AL = Unit Code
 26791                                  ; Function:
 26792                                  ;	Set up the device call header at DEVCALL
 26793                                  ; Output:
 26794                                  ;	ES:BX Points to DEVCALL
 26795                                  ; No other registers effected
 26796                                  
 26797 000045EF 57                      	PUSH	DI
 26798 000045F0 51                      	PUSH	CX
 26799 000045F1 50                      	PUSH	AX
 26800 000045F2 B108                    	MOV	CL,DEVWRT ; mov cl,8
 26801 000045F4 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26802 000045F9 EBC6                    	JMP	SHORT SETCALLHEAD
 26803                                  
 26804                                  ; 30/04/2019 - Retro DOS v4.0
 26805                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26806                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26807                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26808                                  
 26809                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26810                                  ;---------------------------------------------------------------------------
 26811                                  ;
 26812                                  ; Procedure Name : RW_SC
 26813                                  ;
 26814                                  ; Inputs:
 26815                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26816                                  ;	 [SC_STATUS]= SC validity status
 26817                                  ;	 [SEQ_SECTOR]= last sector read
 26818                                  ; Function:
 26819                                  ;	Read from or write through secondary cache
 26820                                  ; Output:
 26821                                  ;	ES:BX Points to DEVCALL
 26822                                  ;	carry clear, I/O is not done
 26823                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26824                                  ;	carry set, I/O is done
 26825                                  ;
 26826                                  ;----------------------------------------------------------------------------
 26827                                  
 26828                                  RW_SC:
 26829                                  	; SS override for all variables used.
 26830                                  	
 26831 000045FB 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26832 00004601 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26833 00004603 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26834 00004609 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26835 0000460B 51                      	PUSH	CX			    ;AN000;LB.
 26836 0000460C 52                      	PUSH	DX			    ;AN000;LB. yes
 26837 0000460D 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26838 0000460E 56                      	PUSH	SI			    ;AN000;LB.
 26839 0000460F 06                      	PUSH	ES			    ;AN000;LB.
 26840 00004610 57                      	PUSH	DI			    ;AN000;LB.
 26841                                  
 26842 00004611 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26843 00004616 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26844 0000461C 7408                    	JZ	short doread		    ;AN000;LB. yes
 26845 0000461E E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26846 00004621 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26847                                  scexit4:				    ;AN000;
 26848 00004624 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26849 00004625 C3                      	retn				    ;AN000;LB.
 26850                                  doread: 				    ;AN000;
 26851 00004626 E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26852 00004629 720A                    	JC	short readSC		    ;AN000;LB.
 26853 0000462B 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26854 00004632 F9                      	STC				    ;AN000;LB. set carry
 26855 00004633 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26856                                  readSC: 				    ;AN000;
 26857 00004635 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26858 00004639 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26859 0000463E 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26860 00004643 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26861                                  	; 24/09/2023
 26862                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26863 00004648 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26864                                  chklow: 						
 26865 0000464A 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26866 0000464D 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26867 0000464F 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26868 00004656 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26869 0000465A 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26870                                  readsr:
 26871 0000465E 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26872 00004662 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26873 00004666 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26874 0000466A 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26875                                  
 26876 0000466E 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26877 00004672 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26878 00004676 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26879 0000467A 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26880 0000467E 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26881 00004684 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26882 00004688 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26883 0000468C 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26884 00004690 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26885 00004694 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26886 00004698 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26887                                  saveseq2:				    ;AN000;
 26888 0000469C F8                      	CLC				    ;AN000;LB. clear carry
 26889                                  saveseq:				    ;AN000;	
 26890 0000469D 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26891 000046A1 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26892 000046A5 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26893 000046A9 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26894 000046AD EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26895                                  scexit2:				    ;AN000;LB.
 26896 000046AF F8                      	CLC				    ;AN000;LB.	clear carry
 26897                                  scexit: 				    ;AN000;		
 26898 000046B0 5F                      	POP	DI			    ;AN000;LB.
 26899 000046B1 07                      	POP	ES			    ;AN000;LB. restore registers
 26900 000046B2 5E                      	POP	SI			    ;AN000;LB.
 26901 000046B3 1F                      	POP	DS			    ;AN000;LB.
 26902 000046B4 5A                      	POP	DX			    ;AN000;LB.
 26903 000046B5 59                      	POP	CX			    ;AN000;LB.
 26904 000046B6 C3                      	retn				    ;AN000;LB.
 26905                                  
 26906                                  ;Break	<IN_SC -- check if in secondary cache>
 26907                                  ;--------------------------------------------------------------------------
 26908                                  ;
 26909                                  ; Procedure Name : IN_SC
 26910                                  ;
 26911                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26912                                  ;	   [CURSC_DRIVE]= current SC drive
 26913                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26914                                  ;	   [SC_CACHE_COUNT]= SC count
 26915                                  ;	   [HIGH_SECTOR]:DX= sector number
 26916                                  ; Function:
 26917                                  ;	Check if the sector is in secondary cache
 26918                                  ; Output:
 26919                                  ;	carry clear, in SC
 26920                                  ;	   CX= the index in the secondary cache
 26921                                  ;	carry set, not in SC
 26922                                  ;
 26923                                  ;---------------------------------------------------------------------------
 26924                                  
 26925                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26926                                  IN_SC:
 26927                                  	; SS override for all variables used
 26928 000046B7 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26929 000046BB 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26930 000046C0 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26931 000046C2 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26932 000046C6 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26933 000046C8 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26934 000046CD 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26935                                  	; 24/09/2023
 26936                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26937 000046D2 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26938 000046D4 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26939 000046D9 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26940 000046DB F8                      	CLC				    ;AN000;;LB. clear carry
 26941                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26942                                  	; 16/12/2022
 26943 000046DC C3                      	retn	; 30/04/2019
 26944                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26945                                  	;jmp	short inexit
 26946                                  
 26947                                  outrange2:				    ;AN000;;LB. set carry
 26948 000046DD F9                      	STC				    ;AN000;;LB.
 26949                                  inexit: 				    ;AN000;;LB.
 26950 000046DE C3                      	retn				    ;AN000;;LB.
 26951                                  
 26952                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26953                                  ;---------------------------------------------------------------------------
 26954                                  ;
 26955                                  ; Procedure Name : Invalidate_Sc
 26956                                  ;
 26957                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26958                                  ;	   [CURSC_DRIVE]= current SC drive
 26959                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26960                                  ;	   [SC_CACHE_COUNT]= SC count
 26961                                  ;	   [SC_STATUS]= SC status word
 26962                                  ;	   [HIGH_SECTOR]:DX= sector number
 26963                                  ;
 26964                                  ; Function:
 26965                                  ;	invalidate secondary cache if in there
 26966                                  ; Output:
 26967                                  ;	[SC_STATUS] is updated
 26968                                  ;---------------------------------------------------------------------------
 26969                                  
 26970                                  INVALIDATE_SC:
 26971                                  	; SS override for all variables used
 26972                                  
 26973 000046DF E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26974 000046E2 720C                    	JC	short outrange		    ;AN000;;LB. no
 26975 000046E4 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26976 000046E7 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26977 000046E9 F7D0                    	NOT	AX			    ;AN000;;LB.
 26978 000046EB 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26979                                  outrange:				    ;AN000;;LB.
 26980 000046F0 C3                      	retn				    ;AN000;;LB.
 26981                                  
 26982                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26983                                  ; 22/11/2022
 26984                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26985                                  
 26986                                  ;Break	<VIRREAD- virtually read data into buffer>
 26987                                  ;--------------------------------------------------------------------------
 26988                                  ;
 26989                                  ; Procedure Name : SC_FLAG
 26990                                  ;
 26991                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26992                                  ;		     1, continuous sectors were read into SC
 26993                                  ; Function:
 26994                                  ;	   Move data from SC to buffer
 26995                                  ; Output:
 26996                                  ;	 carry clear, data is moved to buffer
 26997                                  ;	 carry set, bad sector or exceeds maximum sector
 26998                                  ;	   SC_FLAG =0
 26999                                  ;	   CALLSCNT=1
 27000                                  ;	   SC_STATUS= -1 if succeeded
 27001                                  ;     
 27002                                  ;		       0 if failed
 27003                                  ;--------------------------------------------------------------------------
 27004                                  
 27005                                  VIRREAD:
 27006                                  	; SS override for all variables used
 27007                                  
 27008 000046F1 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 27009 000046F7 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 27010 000046F9 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 27011 000046FD 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 27012 00004701 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 27013 00004705 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 27014 00004709 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 27015 0000470F 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 27016                                  
 27017                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 27018 00004716 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 27019 0000471C 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 27020 0000471E 1E                      	PUSH	DS			    ;AN000;;LB.
 27021 0000471F 56                      	PUSH	SI			    ;AN000;;LB.
 27022 00004720 06                      	PUSH	ES			    ;AN000;;LB.
 27023 00004721 57                      	PUSH	DI			    ;AN000;;LB.
 27024 00004722 52                      	PUSH	DX			    ;AN000;;LB.
 27025 00004723 51                      	PUSH	CX			    ;AN000;;LB.
 27026 00004724 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 27027 00004726 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 27028 00004729 59                      	POP	CX
 27029 0000472A 5A                      	POP	DX			    ;AN000;;LB.
 27030 0000472B 5F                      	POP	DI			    ;AN000;;LB.
 27031 0000472C 07                      	POP	ES			    ;AN000;;LB.
 27032 0000472D 5E                      	POP	SI			    ;AN000;;LB.
 27033 0000472E 1F                      	POP	DS			    ;AN000;;LB.
 27034 0000472F EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 27035                                  scerror:				    ;AN000;
 27036 00004731 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 27037 00004738 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 27038 0000473F 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 27039 00004745 F9                      	STC				    ;AN000;;LB. carry set
 27040 00004746 C3                      	retn				    ;AN000;;LB.
 27041                                  sc2end: 				    ;AN000;
 27042 00004747 F8                      	CLC				    ;AN000;;LB. carry clear
 27043 00004748 C3                      	retn				    ;AN000;;LB.
 27044                                  
 27045                                  ; 30/04/2019 - Retro  DOS v4.0
 27046                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 27047                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27048                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 27049                                  
 27050                                  ;Break	<SC2BUF- move data from SC to buffer>
 27051                                  ;----------------------------------------------------------------------------
 27052                                  ;
 27053                                  ; Procedure Name : SC2BUF
 27054                                  ;
 27055                                  ; Inputs:  [SC_STATUS] = SC validity status
 27056                                  ;	   [SC_SECTOR_SIZE] = request sector size
 27057                                  ;	   [SC_CACHE_PTR] = pointer to SC
 27058                                  ; Function:
 27059                                  ;	   Move data from SC to buffer
 27060                                  ; Output:
 27061                                  ;	   carry clear, in SC  and data is moved
 27062                                  ;	   carry set, not in SC and data is not moved
 27063                                  ;---------------------------------------------------------------------------
 27064                                  
 27065                                  SC2BUF:
 27066                                  	; SS override for all variables used
 27067 00004749 E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 27068                                  	;JC	short noSC		    ;AN000;LB. no
 27069                                  	; 24/09/2023
 27070 0000474C 723D                    	jc	short sexit
 27071 0000474E B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 27072 00004751 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 27073 00004753 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 27074 00004758 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 27075                                  ;entry SC2BUF2
 27076                                  SC2BUF2:				    ;AN000;
 27077                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 27078                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 27079                                  	; 24/09/2023
 27080 0000475A 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 27081 0000475E 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 27082 0000475F F7E1                    	mul	cx
 27083 00004761 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 27084 00004766 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 27085 0000476B 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 27086 0000476D 89C6                    	MOV	SI,AX			    ;AN000;LB.
 27087 0000476F 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 27088 00004774 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 27089                                  	; 24/09/2023
 27090                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 27091 00004779 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 27092                                  ;entry MOVWORDS
 27093                                  MOVWORDS:				    ;AN000;
 27094 0000477B 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 27095 00004781 7403                    	JZ	short nodd		    ;AN000;LB. no
 27096 00004783 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 27097 00004785 66                      	DB	66H			    ;AN000;LB. use double word move
 27098                                  nodd:
 27099 00004786 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 27100 00004788 F8                      	CLC				    ;AN000;LB. clear carry
 27101 00004789 C3                      	retn				    ;AN000;LB. exit
 27102                                  noSC:					    ;AN000;
 27103 0000478A F9                      	STC				    ;AN000;LB. set carry
 27104                                  sexit:					    ;AN000;
 27105 0000478B C3                      	retn				    ;AN000;LB.
 27106                                  
 27107                                  ;============================================================================
 27108                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 27109                                  ;============================================================================
 27110                                  ; 29/07/2018 - Retro DOS v3.0
 27111                                  ; 19/05/2019 - Retro DOS v4.0
 27112                                  
 27113                                  ;	TITLE	MKNODE - Node maker
 27114                                  ;	NAME	MKNODE
 27115                                  
 27116                                  ;**	MKNODE.ASM
 27117                                  ;----------------------------------------------------------------------------
 27118                                  ;	Low level routines for making a new local file system node
 27119                                  ;	and filling in an SFT from a directory entry
 27120                                  ;
 27121                                  ;	BUILDDIR
 27122                                  ;	SETDOTENT
 27123                                  ;	MakeNode
 27124                                  ;	NEWENTRY
 27125                                  ;	FREEENT
 27126                                  ;	NEWDIR
 27127                                  ;	DOOPEN
 27128                                  ;	RENAME_MAKE
 27129                                  ;	CHECK_VIRT_OPEN
 27130                                  ;
 27131                                  ;	Revision history:
 27132                                  ;
 27133                                  ;	 AN000	version 4.0  Jan. 1988
 27134                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 27135                                  
 27136                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 27137                                  ;----------------------------------------------------------------------------
 27138                                  ;
 27139                                  ; Procedure Name : BUILDDIR,NEWDIR
 27140                                  ;
 27141                                  ; Inputs:
 27142                                  ;       ES:BP Points to DPB
 27143                                  ;       [THISSFT] Set if using NEWDIR entry point
 27144                                  ;               (used by ALLOCATE)
 27145                                  ;       [LASTENT] current last valid entry number in directory if no free
 27146                                  ;               entries
 27147                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 27148                                  ; Function:
 27149                                  ;       Grow directory if no free entries and not root
 27150                                  ; Outputs:
 27151                                  ;       CARRY SET IF FAILURE
 27152                                  ;       ELSE
 27153                                  ;          AX entry number of new entry
 27154                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 27155                                  ;               AX = first entry of new dir
 27156                                  ;       GETENT should be called to set [LASTENT]
 27157                                  ;
 27158                                  ;----------------------------------------------------------------------------
 27159                                  
 27160                                  ; 19/05/2019 - Retro DOS v4.0
 27161                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 27162                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27163                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 27164                                  
 27165                                  ; 24/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 MSDOS.SYS)
 27166                                  ; DOSCODE:8845h (MSDOS 6.22, MSDOS.SYS)
 27167                                  
 27168                                  BUILDDIR:
 27169                                  	; 29/07/2018 - Retro DOS v3.0
 27170                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 27171                                  
 27172 0000478C A1[D805]                        MOV     AX,[ENTFREE]
 27173 0000478F 83F8FF                          CMP     AX,-1 ; 0FFFFh
 27174                                  	;JZ	short CHECK_IF_ROOT
 27175                                          ;CLC
 27176                                          ;retn
 27177                                  	; 24/09/2023
 27178 00004792 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 27179                                  
 27180                                  CHECK_IF_ROOT:
 27181 00004794 833E[C205]00                    CMP     word [DIRSTART],0
 27182 00004799 7502                            JNZ	short NEWDIR
 27183                                          ;STC
 27184                                  	; 24/09/2023
 27185                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 27186                                  builddir_cmc_retn:
 27187                                  	; 24/09/2023
 27188 0000479B F5                      	cmc	; cf=1 <-> cf=0
 27189                                  builddir_retn:
 27190 0000479C C3                              retn				; Can't grow root
 27191                                  
 27192                                  	;entry   NEWDIR
 27193                                  NEWDIR: 
 27194 0000479D 8B1E[C205]              	MOV     BX,[DIRSTART]
 27195 000047A1 09DB                            OR      BX,BX
 27196 000047A3 7405                            JZ	short NULLDIR
 27197 000047A5 E81A06                  	call	GETEOF
 27198 000047A8 72F2                            jc	short builddir_retn	; Screw up
 27199                                  NULLDIR:
 27200 000047AA B90100                          MOV     CX,1
 27201 000047AD E82B05                  	call	ALLOCATE
 27202 000047B0 72EA                            jc	short builddir_retn
 27203 000047B2 8B16[C205]                      MOV     DX,[DIRSTART]
 27204 000047B6 09D2                            OR      DX,DX
 27205 000047B8 750D                            JNZ	short ADDINGDIR
 27206 000047BA E8FCF5                  	call	SETDIRSRCH
 27207 000047BD 72DD                            jc	short builddir_retn
 27208 000047BF C706[4803]FFFF                  MOV     word [LASTENT],-1
 27209 000047C5 EB29                            JMP     SHORT GOTDIRREC
 27210                                  ADDINGDIR:
 27211 000047C7 53                              PUSH    BX
 27212 000047C8 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27213 000047CC E8130C                          call	IsEOF
 27214 000047CF 5B                              POP     BX
 27215 000047D0 7217                            JB	short NOTFIRSTGROW
 27216                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27217 000047D2 891E[BC05]                      MOV     [CLUSNUM],BX
 27218                                  	; 24/09/2023
 27219                                  	;PUSH	CX ; (not necessary)
 27220 000047D6 50                      	PUSH	AX
 27221 000047D7 55                      	PUSH	BP
 27222 000047D8 B401                            MOV     AH,1			; CLUSNUM update
 27223                                  	; 15/12/2022
 27224 000047DA 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 27225                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27226                                  	;;mov	dl,[es:bp+0]
 27227                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 27228 000047DE 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 27229 000047E2 89DD                            MOV     BP,BX 			; CLUSNUM
 27230 000047E4 E87FDE                  	call	FastOpen_Update
 27231 000047E7 5D                              POP     BP
 27232 000047E8 58                              POP     AX
 27233                                  	; 24/09/2023
 27234                                          ;POP	CX
 27235                                  
 27236                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27237                                  NOTFIRSTGROW:
 27238 000047E9 89DA                            MOV     DX,BX
 27239 000047EB 30DB                            XOR     BL,BL
 27240 000047ED E8C704                  	call	FIGREC
 27241                                  GOTDIRREC:
 27242                                  	;mov	cl,[es:bp+4]
 27243 000047F0 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 27244                                  	;INC	CL
 27245                                  	; 27/06/2024
 27246 000047F4 41                      	inc	cx
 27247 000047F5 30ED                            XOR     CH,CH
 27248                                  ZERODIR:
 27249 000047F7 51                              PUSH    CX
 27250                                  	; 22/09/2023
 27251                                  	;;mov	byte [ALLOWED],18h
 27252                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 27253 000047F8 B0FF                            MOV     AL,0FFH
 27254                                          ;call	GETBUFFR
 27255 000047FA E80310                          call	GETBUFFRD ; *
 27256 000047FD 7302                    	JNC	short GET_SSIZE
 27257 000047FF 59                              POP     CX
 27258 00004800 C3                              retn
 27259                                  
 27260                                  GET_SSIZE:
 27261                                  	;mov	cx,[es:bp+2]
 27262 00004801 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 27263 00004805 06                              PUSH    ES
 27264 00004806 C43E[E205]                      LES     DI,[CURBUF]
 27265                                  	;or	byte [es:di+5],4
 27266 0000480A 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 27267 0000480F 57                              PUSH    DI
 27268                                  	;;add	di,16	; MSDOS 3.3
 27269                                  	;add	di,20	; MSDOS 6.0	
 27270 00004810 83C714                          ADD     DI,BUFINSIZ
 27271 00004813 31C0                            XOR     AX,AX
 27272 00004815 D1E9                            SHR     CX,1
 27273 00004817 F3AB                            REP     STOSW
 27274 00004819 7301                            JNC	short EVENZ
 27275 0000481B AA                              STOSB
 27276                                  EVENZ:
 27277 0000481C 5F                              POP     DI
 27278                                  
 27279                                  	; MSDOS 6.0
 27280 0000481D 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27281                                  					;LB. if already dirty		  ;AN000;
 27282 00004822 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27283 00004824 E8DD11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 27284                                          
 27285                                  	;or	byte [es:di+5],40h
 27286 00004827 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27287                                  yesdirty7:
 27288 0000482C 07                              POP	ES
 27289 0000482D 59                              POP	CX
 27290                                  
 27291                                  	; 19/05/2019 - Retro DOS v4.0
 27292                                  
 27293                                  	; MSDOS 3.3
 27294                                  	;INC	DX
 27295                                  
 27296                                  	; MSDOS 6.0
 27297                                  	; 24/09/2023
 27298                                  	;add	dx,1
 27299                                  	;;adc	word [HIGH_SECTOR],0
 27300                                  	;; 24/09/2023
 27301                                  	;; ax=0
 27302                                  	;adc	[HIGH_SECTOR],ax ; 0
 27303                                  	; 24/09/2023
 27304 0000482E 42                      	inc	dx
 27305 0000482F 7504                    	jnz	short loop_zerodir
 27306 00004831 FF06[0706]              	inc	word [HIGH_SECTOR]
 27307                                  loop_zerodir:
 27308 00004835 E2C0                            LOOP    ZERODIR
 27309                                  
 27310 00004837 A1[4803]                        MOV     AX,[LASTENT]
 27311 0000483A 40                              INC     AX
 27312                                  	; 24/09/2023
 27313                                  	; cf=0
 27314                                  	;CLC
 27315 0000483B C3                              retn
 27316                                  
 27317                                  ;--------------------------------------------------------------------------
 27318                                  ;
 27319                                  ; Procedure Name : SETDOTENT
 27320                                  ;
 27321                                  ; set up a . or .. directory entry for a directory.
 27322                                  ;
 27323                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 27324                                  ;               AX contains ". " or ".."
 27325                                  ;               DX contains first cluster of entry
 27326                                  ;
 27327                                  ;----------------------------------------------------------------------------
 27328                                  
 27329                                  SETDOTENT:
 27330                                  ;	Fill in name field
 27331 0000483C AB                      	STOSW
 27332 0000483D B90400                  	MOV	CX,4
 27333 00004840 B82020                  	MOV	AX,"  " ; 2020h
 27334 00004843 F3AB                    	REP	STOSW
 27335 00004845 AA                      	STOSB
 27336                                  
 27337                                  ;	Set up attribute
 27338                                  	;mov	al, 10h
 27339 00004846 B010                    	MOV	AL,attr_directory
 27340 00004848 AA                      	STOSB
 27341                                  
 27342                                  ;	Initialize time and date of creation
 27343 00004849 83C70A                  	ADD	DI,10
 27344 0000484C 8B36[9E05]              	MOV	SI,[THISSFT]
 27345                                  	;mov	ax,[si+0Dh]
 27346 00004850 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 27347 00004853 AB                      	STOSW
 27348                                  	;mov	ax,[si+0Fh]
 27349 00004854 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 27350 00004857 AB                      	STOSW
 27351                                  
 27352                                  ;	Set up first cluster field
 27353 00004858 89D0                    	MOV	AX,DX
 27354 0000485A AB                      	STOSW
 27355                                  
 27356                                  ;	0 file size
 27357                                  	;XOR	AX,AX
 27358 0000485B 91                      	xchg	ax,cx ; 23/02/2024
 27359 0000485C AB                      	STOSW
 27360 0000485D AB                      	STOSW
 27361 0000485E C3                      	retn
 27362                                  
 27363                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 27364                                  ;---------------------------------------------------------------------------
 27365                                  ;
 27366                                  ; Procedure Name : MakeNode
 27367                                  ;
 27368                                  ; Inputs:
 27369                                  ;       AL - attribute to create
 27370                                  ;       AH = 0 if it is ok to truncate a file already by this name
 27371                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 27372                                  ;               (AH ignored on dirs and devices)
 27373                                  ;
 27374                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 27375                                  ;               a name already existant is ALWAYS an error in these cases.
 27376                                  ;
 27377                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 27378                                  ;               terminated)
 27379                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 27380                                  ;               ( = -1 if current dir not involved, else
 27381                                  ;                Points to first char after last "/" of current dir part)
 27382                                  ;       [THISCDS] Points to CDS being used
 27383                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 27384                                  ; Function:
 27385                                  ;       Make a new node
 27386                                  ; Outputs:
 27387                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27388                                  ;       CARRY SET IF ERROR
 27389                                  ;          AX = 1 A node by this name exists and is a directory
 27390                                  ;          AX = 2 A new node could not be created
 27391                                  ;          AX = 3 A node by this name exists and is a disk file
 27392                                  ;               (AH was NZ on input)
 27393                                  ;          AX = 4 Bad Path
 27394                                  ;               SI return from GetPath maintained
 27395                                  ;          AX = 5 Attribute mismatch
 27396                                  ;          AX = 6 Sharing Violation
 27397                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27398                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27399                                  ;       ELSE
 27400                                  ;          AX = 0 Disk Node
 27401                                  ;          AX = 3 Device Node (error in some cases)
 27402                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27403                                  ;               containing new node.
 27404                                  ;          [CURBUF+2]:BX Points to entry
 27405                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27406                                  ;          [THISSFT] is filled in
 27407                                  ;               sf_mode = unchanged.
 27408                                  ;          Attribute byte in entry is input AL
 27409                                  ; DS preserved, others destroyed
 27410                                  ;
 27411                                  ;-------------------------------------------------------------------------
 27412                                  
 27413                                  ; 19/05/2019 - Retro DOS v4.0
 27414                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27415                                  
 27416                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27417                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27418                                  
 27419                                  ; 23/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 27420                                  ; DOSCODE:8925h (MSDOS 6.22, MSDOS.SYS)
 27421                                  ; DOSCODE:951Ah (PCDOS 7.1, IBMDOS.COM)
 27422                                  
 27423                                  MakeNode:
 27424                                  	;mov	word [CREATING],0E5FFh
 27425 0000485F C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27426 00004865 50                      	PUSH	AX 		; Save AH value
 27427 00004866 C606[4C03]00            	MOV	byte [NoSetDir],0
 27428 0000486B A2[6D05]                	MOV	[SATTRIB],AL
 27429 0000486E E8ABF5                  	call	GetPathNoSet
 27430 00004871 88CA                    	MOV	DL,CL		; Save CL info
 27431                                  	;MOV	CX,AX		; Device ID to CH
 27432                                  	; 23/02/2024
 27433 00004873 91                      	xchg	ax,cx
 27434 00004874 58                      	POP	AX		; Get back AH
 27435 00004875 732D                    	JNC	short make_exists ; File existed
 27436 00004877 7505                    	JNZ	short make_err_4 ; Path bad
 27437 00004879 80FA80                  	CMP	DL,80h		; Check "CL" return from GETPATH
 27438 0000487C 7405                    	JZ	short make_type	; Name simply not found, and no metas
 27439                                  make_err_4:
 27440 0000487E B004                    	MOV	AL,4		; case 1 bad path
 27441                                  make_err_ret:
 27442                                  	;XOR	AH,AH
 27443                                  	; 23/02/2024
 27444 00004880 98                      	cbw
 27445 00004881 F9                      	STC
 27446                                  ;make_retn:	; 22/11/2022
 27447 00004882 C3                      	retn
 27448                                  
 27449                                  	;entry	RENAME_MAKE	; Used by DOS_RENAME to "copy" a node
 27450                                  RENAME_MAKE:
 27451                                  make_type:
 27452                                  ;Extended Open hooks
 27453                                  	; MSDOS 6.0
 27454                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27455 00004883 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27456 00004888 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27457 0000488A 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27458                                  					;FT. set for extended open ;AN000;
 27459                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27460 0000488F F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27461 00004894 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27462 00004896 F9                      	STC				;FT. set carry			;AN000;
 27463 00004897 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27464                                  	; 22/11/2022
 27465                                  make_retn:
 27466                                  	;return
 27467 0000489A C3                      	retn				;FT.				;AN000;
 27468                                  
 27469                                  ;	Extended Open hooks
 27470                                  
 27471                                  make_type2:
 27472 0000489B C43E[9E05]              	LES	DI,[THISSFT]
 27473 0000489F 31C0                    	XOR	AX,AX		; nothing exists Disk Node
 27474 000048A1 F9                      	STC			; Not found
 27475 000048A2 EB59                    	JMP	short make_new
 27476                                  
 27477                                  ; The node exists. It may be either a device, directory or file:
 27478                                  ;   Zero set => directory
 27479                                  ;   High bit of CH on => device
 27480                                  ;   else => file
 27481                                  
 27482                                  make_exists:
 27483 000048A4 7447                    	JZ	short make_exists_dir
 27484 000048A6 B003                    	MOV	AL,3		; file exists type 3  (error or device node)
 27485                                  	;test	byte [ATTRIB],18h
 27486 000048A8 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27487 000048AD 753A                    	JNZ	short make_err_ret_5
 27488                                  				; Cannot already exist as Disk or Device Node
 27489                                  				;  if making DIR or Volume ID
 27490 000048AF 08ED                    	OR	CH,CH
 27491 000048B1 781A                    	JS	short make_share ; No further checks on attributes if device
 27492 000048B3 08E4                    	OR	AH,AH
 27493 000048B5 75C9                    	JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27494 000048B7 51                      	PUSH	CX		; Save device ID
 27495 000048B8 8E06[E405]              	MOV	ES,[CURBUF+2]
 27496                                  	;mov	ch,[es:bx+0Bh]
 27497 000048BC 268A6F0B                	MOV	CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27498                                  	;test	ch,1
 27499 000048C0 F6C501                  	test	CH,attr_read_only
 27500 000048C3 7523                    	JNZ	short make_err_ret_5P ; Cannot create on read only files
 27501 000048C5 E8D9F7                  	call	MatchAttributes
 27502 000048C8 59                      	POP	CX		; Devid back in CH
 27503 000048C9 751E                    	JNZ	short make_err_ret_5 ; Attributes not ok
 27504 000048CB 30C0                    	XOR	AL,AL		; AL = 0, Disk Node
 27505                                  
 27506                                  make_share:
 27507                                  	;XOR	AH,AH
 27508                                  	; 23/02/2024
 27509 000048CD 98                      	cbw
 27510 000048CE 50                      	PUSH	AX		; Save Disk or Device node
 27511 000048CF 51                      	PUSH	CX		; Save Device ID
 27512 000048D0 88EC                    	MOV	AH,CH		; Device ID to AH
 27513 000048D2 E84501                  	CALL	DOOPEN		; Fill in SFT for share check
 27514 000048D5 C43E[9E05]              	LES	DI,[THISSFT]
 27515 000048D9 56                      	push	si
 27516 000048DA 53                      	push	bx		; Save CURBUF pointers
 27517 000048DB E8F228                  	call	ShareEnter
 27518 000048DE 735A                    	jnc	short MakeEndShare
 27519                                  
 27520                                  ; User failed request.
 27521 000048E0 5B                      	pop	bx
 27522 000048E1 5E                      	pop	si
 27523 000048E2 59                      	pop	cx
 27524 000048E3 58                      	pop	ax
 27525                                  
 27526                                  Make_Share_ret:
 27527 000048E4 B006                    	MOV	AL,6
 27528 000048E6 EB98                    	JMP	short make_err_ret
 27529                                  
 27530                                  make_err_ret_5P:
 27531 000048E8 59                      	POP	CX		; Get back device ID
 27532                                  make_err_ret_5:
 27533 000048E9 B005                    	MOV     AL,5		; Attribute mismatch
 27534                                          ; 22/11/2022
 27535 000048EB EB93                    	JMP	short make_err_ret
 27536                                  
 27537                                  make_exists_dir:
 27538 000048ED B001                    	MOV	AL,1		; exists as directory, always an error
 27539                                  	; 22/11/2022
 27540 000048EF EB8F                    	JMP	short make_err_ret
 27541                                  
 27542                                  make_save:
 27543 000048F1 50                      	PUSH	AX		; Save whether Disk or File
 27544 000048F2 89C8                    	MOV	AX,CX		; Device ID to AH
 27545 000048F4 E87400                  	CALL	NEWENTRY
 27546 000048F7 58                      	POP	AX		; 0 if Disk, 3 if File
 27547 000048F8 73A0                    	jnc	short make_retn
 27548 000048FA B002                    	MOV	AL,2		; create failed case 2
 27549                                  make_save_retn:
 27550 000048FC C3                      	retn
 27551                                  
 27552                                  make_new:
 27553 000048FD E8F1FF                  	call	make_save
 27554 00004900 72FA                    	jc	short make_save_retn	; case 2 fail
 27555                                  	;test	byte [ATTRIB],10h
 27556 00004902 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27557 00004907 75F3                    	jnz	short make_save_retn	; Don't "open" directories,
 27558                                  					; so don't tell the sharer about them
 27559 00004909 50                      	push	ax
 27560 0000490A 53                      	push	bx
 27561 0000490B 56                      	push	si
 27562 0000490C E8C128                  	call	ShareEnter
 27563 0000490F 5E                      	pop	si
 27564 00004910 5B                      	pop	bx
 27565 00004911 58                      	pop	ax
 27566 00004912 73E8                    	jnc	short make_save_retn
 27567                                  
 27568                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27569                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27570                                  ; possible: delete the newly created directory entry and return share_error.
 27571                                  
 27572 00004914 50                      	PUSH	AX
 27573 00004915 C43E[E205]              	LES	DI,[CURBUF]
 27574                                  	;mov	byte [es:bx],0E5h
 27575 00004919 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27576                                  	
 27577                                  	; MSDOS 6.0
 27578                                  	;test	byte [es:di+5],40h
 27579 0000491D 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27580                                  					;LB. if already dirty		  ;AN000;
 27581 00004922 7508                    	JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27582                                  	; 22/11/2022
 27583 00004924 E8DD10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27584                                  	;or	byte [es:di+5],40h
 27585 00004927 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27586                                  yesdirty8:
 27587 0000492C C42E[8A05]              	LES	BP,[THISDPB]
 27588                                  	; 15/12/2022
 27589 00004930 268A4600                	mov	al,[ES:BP]
 27590                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27591                                  	;;mov	al,[es:bp+0]
 27592                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27593 00004934 E8CB0F                  	call	FLUSHBUF		; write out buffer.
 27594 00004937 58                      	POP	AX
 27595 00004938 EBAA                    	jmp	short Make_Share_ret
 27596                                  
 27597                                  ; We have found an existing file. We have also entered it into the share set.
 27598                                  ; At this point we need to call newentry to correctly address the problem of
 27599                                  ; getting rid of old data (create an existing file) or creating a new
 27600                                  ; directory entry (create a new file). Unfortunately, this operation may
 27601                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27602                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27603                                  ; the share set now, do the operation and then reassert the share access.
 27604                                  ;
 27605                                  ; We are allowed to do this! There is no window! After all, we are in
 27606                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27607                                  
 27608                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27609                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27610                                  
 27611                                  MakeEndShare:
 27612 0000493A C43E[9E05]              	LES	DI,[THISSFT]		; grab SFT
 27613 0000493E 31C0                    	XOR	AX,AX
 27614 00004940 E89FC9                  	call	ECritSFT
 27615 00004943 268705                  	xchg	AX,[ES:DI]
 27616                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27617 00004946 50                      	push	ax
 27618 00004947 57                      	push	di
 27619 00004948 06                      	push	es
 27620 00004949 9C                      	PUSHF
 27621 0000494A E87E28                  	call	ShareEnd		; remove sharing
 27622 0000494D 9D                      	POPF
 27623 0000494E 07                      	pop	es
 27624 0000494F 5F                      	pop	di
 27625 00004950 268F05                  	pop	word [ES:DI]
 27626                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27627 00004953 E8A7C9                  	call	LCritSFT
 27628                                  	; 22/11/2022
 27629                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27630 00004956 5B                      	pop	bx
 27631 00004957 5E                      	pop	si
 27632 00004958 59                      	pop	cx
 27633 00004959 58                      	pop	ax
 27634 0000495A E894FF                  	CALL	make_save
 27635                                  
 27636                                  ; If the user failed, we do not reenter into the sharing set.
 27637                                  
 27638 0000495D 729D                    	jc	short make_save_retn	; bye if error
 27639 0000495F 50                      	push	ax
 27640 00004960 53                      	push	bx
 27641 00004961 56                      	push	si
 27642 00004962 9C                      	PUSHF
 27643 00004963 E86A28                  	call	ShareEnter
 27644 00004966 9D                      	POPF
 27645 00004967 5E                      	pop	si
 27646 00004968 5B                      	pop	bx
 27647 00004969 58                      	pop	ax
 27648                                  
 27649                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27650                                  
 27651                                  makeendshare_retn:
 27652 0000496A C3                      	retn
 27653                                  
 27654                                  ;---------------------------------------------------------------------------
 27655                                  ;
 27656                                  ; Procedure Name : NEWENTRY
 27657                                  ;
 27658                                  ; Inputs:
 27659                                  ;	  [THISSFT] set
 27660                                  ;	  [THISDPB] set
 27661                                  ;	  [LASTENT] current last valid entry number in directory if no free
 27662                                  ;		  entries
 27663                                  ;	  [VOLID] set if a volume ID was found during search
 27664                                  ;	Attrib Contains attributes for new file
 27665                                  ;	  [DIRSTART] Points to first cluster of dir (0 means root)
 27666                                  ;	  CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27667                                  ;		  NC means file existed (device)
 27668                                  ;		  C  means file did not exist
 27669                                  ;	  AH = Device ID byte
 27670                                  ;	  If FILE
 27671                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27672                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27673                                  ;	  If device
 27674                                  ;	  DS:BX points to start of "fake" directory entry
 27675                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27676                                  ;		  (has DWORD pointer to device header)
 27677                                  ; Function:
 27678                                  ;	  Make a new directory entry
 27679                                  ;	  If an old one existed it is truncated first
 27680                                  ; Outputs:
 27681                                  ;	  Carry set if error
 27682                                  ;		  Can't grow dir, atts didn't match, attempt to make 2nd
 27683                                  ;		  vol ID, user FAILed to I 24
 27684                                  ;	  else
 27685                                  ;		  outputs of DOOPEN
 27686                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27687                                  ;
 27688                                  ;----------------------------------------------------------------------------
 27689                                  
 27690                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27691                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27692                                  
 27693                                  NEWENTRY:
 27694 0000496B C42E[8A05]              	LES	BP,[THISDPB]
 27695 0000496F 7315                    	JNC	short EXISTENT
 27696 00004971 803E[4A03]00            	CMP	byte [FAILERR],0
 27697                                  	;STC
 27698                                  	;jnz	short makeendshare_retn	; User FAILed, node might exist
 27699                                  	; 24/09/2023
 27700 00004976 750C                    	jnz	short ERRRET3
 27701 00004978 E811FE                  	CALL	BUILDDIR	; Try to build dir
 27702 0000497B 72ED                    	jc	short makeendshare_retn	; Failed
 27703 0000497D E80CF4                  	call	GETENT		; Point at that free entry
 27704 00004980 72E8                    	jc	short makeendshare_retn	; Failed
 27705 00004982 EB0E                    	JMP	SHORT FREESPOT
 27706                                  
 27707                                  ERRRET3:
 27708 00004984 F9                      	STC
 27709                                  newentry_retn:
 27710 00004985 C3                      	retn
 27711                                  
 27712                                  EXISTENT:
 27713 00004986 08E4                    	OR	AH,AH		; Check if file is I/O device
 27714 00004988 7903                    	JNS	short NOT_DEV1
 27715 0000498A E98D00                  	JMP	DOOPEN		; If so, proceed with open
 27716                                  
 27717                                  NOT_DEV1:
 27718 0000498D E82801                  	call	FREEENT	; Free cluster chain
 27719 00004990 72F3                    	jc	short newentry_retn ; Failed
 27720                                  FREESPOT:
 27721                                  	;test	byte [ATTRIB],8
 27722 00004992 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27723 00004997 7407                    	JZ	short NOTVOLID
 27724 00004999 803E[7B05]00            	CMP	BYTE [VOLID],0
 27725 0000499E 75E4                    	JNZ	short ERRRET3	; Can't create a second volume ID
 27726                                  NOTVOLID:
 27727 000049A0 8E06[E405]              	MOV	ES,[CURBUF+2]
 27728 000049A4 89DF                    	MOV	DI,BX
 27729                                  
 27730 000049A6 BE[4B05]                	MOV	SI,NAME1
 27731                                  
 27732 000049A9 B90500                  	MOV	CX,5
 27733 000049AC F3A5                    	REP	MOVSW
 27734 000049AE A4                      	MOVSB			; Move name into dir entry
 27735 000049AF A0[6B05]                	MOV	AL,[ATTRIB]
 27736 000049B2 AA                      	STOSB			; Attributes
 27737                                  
 27738                                  ;; File Tagging for Create DOS 4.00
 27739 000049B3 B105                    	MOV	CL,5		;FT. assume normal FBUGBUG	;AN000;
 27740                                  ;; File Tagging for Create DOS 4.00
 27741                                  
 27742 000049B5 31C0                    	XOR	AX,AX
 27743 000049B7 F3AB                    	REP	STOSW		; Zero pad
 27744 000049B9 E824C1                  	call	DATE16
 27745 000049BC 92                      	XCHG	AX,DX
 27746 000049BD AB                      	STOSW			; dir_time
 27747 000049BE 92                      	XCHG	AX,DX
 27748 000049BF AB                      	STOSW			; dir_date
 27749 000049C0 31C0                    	XOR	AX,AX
 27750 000049C2 57                      	PUSH	DI		; Correct SI input value
 27751                                  				; (recomputed for new buffer)
 27752 000049C3 AB                      	STOSW			; Zero dir_first and size
 27753 000049C4 AB                      	STOSW
 27754 000049C5 AB                      	STOSW
 27755                                  updnxt:
 27756 000049C6 8B36[E205]              	MOV	SI,[CURBUF]
 27757                                  
 27758                                  	; 19/05/2019 - Retro DOS v4.0
 27759                                  
 27760                                  	; MSDOS 6.0
 27761 000049CA 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27762                                  				;LB. if already dirty		  ;AN000;
 27763 000049CF 7508                    	JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27764 000049D1 E83010                  	call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27765                                  	
 27766                                  	;or	byte [es:si+5],40h
 27767 000049D4 26804C0540              	OR	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27768                                  yesdirty9:
 27769 000049D9 C42E[8A05]              	LES	BP,[THISDPB]
 27770                                  	; 15/12/2022
 27771 000049DD 268A4600                	MOV	AL,[ES:BP]
 27772                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27773                                  	;;mov	al,[es:bp+0]
 27774                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27775 000049E1 50                      	PUSH	AX
 27776 000049E2 53                      	PUSH	BX
 27777                                  
 27778                                  ; If we have a file, we need to increment the open ref. count so that
 27779                                  ; we have some protection against invalid media changes if an Int 24
 27780                                  ; error occurs.
 27781                                  ; Do nothing for a device.
 27782                                  
 27783 000049E3 06                      	push	es
 27784 000049E4 57                      	push	di
 27785 000049E5 C43E[9E05]              	LES	DI,[THISSFT]
 27786                                  	;test	word [es:di+5],80h
 27787                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27788 000049E9 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27789 000049EE 751A                    	jnz	short GotADevice
 27790 000049F0 1E                      	push	ds
 27791 000049F1 53                      	push	bx
 27792 000049F2 C51E[8A05]              	LDS	BX,[THISDPB]
 27793                                  	;mov	[es:di+7],bx
 27794 000049F6 26895D07                	MOV	[ES:DI+SF_ENTRY.sf_devptr],BX
 27795 000049FA 8CDB                    	MOV	BX,DS
 27796                                  	;mov	[es:di+9],bx
 27797 000049FC 26895D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],BX
 27798 00004A00 5B                      	pop	bx
 27799 00004A01 1F                      	pop	ds ; need to use DS for segment later on
 27800                                  
 27801 00004A02 E8B5FA                  	call	DEV_OPEN_SFT	; increment ref. count
 27802 00004A05 C606[A20A]01            	mov	byte [VIRTUAL_OPEN],1; set flag
 27803                                  
 27804                                  GotADevice:
 27805 00004A0A 5F                      	pop	di
 27806 00004A0B 07                      	pop	es
 27807                                  
 27808 00004A0C E8F30E                  	call	FLUSHBUF
 27809                                  
 27810 00004A0F E8EC00                  	Call	CHECK_VIRT_OPEN	; decrement ref. count	;AN000;
 27811                                  
 27812 00004A12 5B                      	POP	BX
 27813 00004A13 58                      	POP	AX
 27814 00004A14 5E                      	POP	SI		; Get SI input back
 27815 00004A15 88C4                    	MOV	AH,AL		; Get I/O driver number back
 27816 00004A17 7301                    	jnc	short DOOPEN	
 27817 00004A19 C3                      	retn			; Failed
 27818                                  	
 27819                                  ;NOTE FALL THROUGH
 27820                                  
 27821                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27822                                  
 27823                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27824                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27825                                  
 27826                                  ; DOOPEN
 27827                                  ;----------------------------------------------------------------------------
 27828                                  ;
 27829                                  ; Inputs:
 27830                                  ;	  [THISDPB] points to DPB if file
 27831                                  ;	  [THISSFT] points to SFT being used
 27832                                  ;	  AH = Device ID byte
 27833                                  ;	  If FILE
 27834                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27835                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27836                                  ;	  If device
 27837                                  ;	  DS:BX points to start of "fake" directory entry
 27838                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27839                                  ;		  (has DWORD pointer to device header)
 27840                                  ; Function:
 27841                                  ;	  Fill in SFT from dir entry
 27842                                  ; Outputs:
 27843                                  ;	  CARRY CLEAR
 27844                                  ;	  sf_ref_count and sf_mode fields not altered
 27845                                  ;	  sf_flags high byte = 0
 27846                                  ;	  sf_flags low byte = AH except
 27847                                  ;	  sf_flags Bit 6 set (not dirty or not EOF)
 27848                                  ;	  sf_attr sf_date sf_time sf_name set from entry
 27849                                  ;	  sf_position = 0
 27850                                  ;	  If device
 27851                                  ;	  sf_devptr = dword at dir_first (pointer to device header)
 27852                                  ;	  sf_size = 0
 27853                                  ;	  If file
 27854                                  ;	  sf_firclus sf_size set from entry
 27855                                  ;	  sf_devptr = [THISDPB]
 27856                                  ;	  sf_cluspos = 0
 27857                                  ;	  sf_lstclus = sf_firclus
 27858                                  ;	  sf_dirsec sf_dirpos set
 27859                                  ; DS,SI,BX preserved, others destroyed
 27860                                  ;
 27861                                  ;----------------------------------------------------------------------------
 27862                                  
 27863                                  	;entry	DOOPEN
 27864                                  DOOPEN:
 27865                                  ;	Generate and store attribute
 27866                                  
 27867 00004A1A 88E6                    	MOV	DH,AH	  	; AH to different place
 27868 00004A1C C43E[9E05]              	LES	DI,[THISSFT]
 27869                                  	;add	di,4
 27870 00004A20 83C704                  	ADD	DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27871                                  	; 24/09/2023
 27872 00004A23 31C0                    	xor	ax,ax
 27873                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27874                                  				;  attribute of 0 (for R/O testing etc).
 27875 00004A25 08F6                    	OR	DH,DH		; See if our assumption good.
 27876 00004A27 7807                    	JS	short DEV_SFT1	; If device DS=DOSGROUP
 27877 00004A29 8E1E[E405]              	MOV	DS,[CURBUF+2]
 27878                                  	;mov	al,[BX+0Bh]
 27879 00004A2D 8A470B                  	MOV	AL,[BX+dir_entry.dir_attr]
 27880                                  				; If file, get attrib from dir entry
 27881                                  DEV_SFT1:
 27882 00004A30 AA                      	STOSB			; sf_attr, ES:DI -> sf_flags
 27883                                  
 27884                                  ;	Generate and store flags word
 27885                                  
 27886                                  	; 24/09/2023
 27887                                  	;XOR	AX,AX
 27888                                  	; ah=0
 27889 00004A31 88F0                    	MOV	AL,DH
 27890                                  	;or	al,40h
 27891 00004A33 0C40                    	OR	AL,devid_file_clean
 27892 00004A35 AB                      	STOSW			; sf_flags, ES:DI -> sf_devptr
 27893                                  
 27894                                  ;	Generate and store device pointer
 27895                                  
 27896 00004A36 1E                      	PUSH	DS
 27897                                  	;lds	ax,[bx+1Ah]
 27898 00004A37 C5471A                  	LDS	AX,[BX+dir_entry.dir_first] ; Assume device
 27899 00004A3A 08F6                    	OR	DH,DH
 27900 00004A3C 7805                    	JS	short DEV_SFT2
 27901                                  
 27902                                  ;hkn; SS override
 27903 00004A3E 36C506[8A05]            	LDS	AX,[SS:THISDPB]	; Was file
 27904                                  DEV_SFT2:
 27905 00004A43 AB                      	STOSW			; store offset
 27906 00004A44 8CD8                    	MOV	AX,DS
 27907 00004A46 1F                      	POP	DS
 27908 00004A47 AB                      	STOSW			; store segment
 27909                                  				; ES:DI -> sf_firclus
 27910                                  
 27911                                  ;	Generate pointer to, generate and store first cluster
 27912                                  ;	(irrelevant for devices)
 27913                                  
 27914 00004A48 56                      	PUSH	SI		; Save pointer to dir_first
 27915 00004A49 A5                      	MOVSW			; dir_first -> sf_firclus
 27916                                  				; DS:SI -> dir_size_l, ES:DI -> sf_time
 27917                                  
 27918                                  ;	Copy time/date of last modification
 27919                                  
 27920                                  	;sub	si,6
 27921 00004A4A 83EE06                  	SUB	SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27922                                  				; DS:SI->dir_time
 27923 00004A4D A5                      	MOVSW			; dir_time -> sf_time
 27924                                  				; DS:SI -> dir_date, ES:DI -> sf_date
 27925 00004A4E A5                      	MOVSW			; dir_date -> sf_date
 27926                                  				; DS:SI -> dir_first, ES:DI -> sf_size
 27927                                  
 27928                                  ;	Generate and store file size (0 for devices)
 27929                                  
 27930 00004A4F AD                      	LODSW			; skip dir_first, DS:SI -> dir_size_l
 27931 00004A50 AD                      	LODSW			; dir_size_l in AX, DS:SI -> dir_size_h
 27932                                  	;MOV	CX,AX		; dir_size_l in CX
 27933                                  	; 23/02/2024
 27934 00004A51 91                      	xchg	ax,cx
 27935 00004A52 AD                      	LODSW			; dir_size_h (size AX:CX), DS:SI -> ????
 27936 00004A53 08F6                    	OR	DH,DH
 27937 00004A55 7904                    	JNS	short FILE_SFT1
 27938 00004A57 31C0                    	XOR	AX,AX
 27939 00004A59 89C1                    	MOV	CX,AX		; Devices are open ended
 27940                                  FILE_SFT1:
 27941 00004A5B 91                      	XCHG	AX,CX
 27942 00004A5C AB                      	STOSW			; Low word of sf_size
 27943 00004A5D 91                      	XCHG	AX,CX
 27944 00004A5E AB                      	STOSW			; High word of sf_size
 27945                                  				; ES:DI -> sf_position
 27946                                  ; Initialize position to 0
 27947                                  
 27948 00004A5F 31C0                    	XOR	AX,AX
 27949 00004A61 AB                      	STOSW
 27950 00004A62 AB                      	STOSW			; sf_position
 27951                                  				; ES:DI -> sf_cluspos
 27952                                  
 27953                                  ; Generate cluster optimizations for files
 27954                                  
 27955 00004A63 08F6                    	OR	DH,DH
 27956 00004A65 7843                    	JS	short DEV_SFT3
 27957 00004A67 AB                      	STOSW			; sf_cluspos ; 19h
 27958                                  	;mov	ax,[bx+1Ah]
 27959 00004A68 8B471A                  	MOV	AX,[BX+dir_entry.dir_first]
 27960                                  	; 19/05/2019
 27961                                  	; MSDOS 3.3
 27962                                  	;STOSW			; sf_lstclus ; 1Bh
 27963                                  	; MSDOS 6.0
 27964 00004A6B 57                      	PUSH	DI		;AN004; save dirsec offset
 27965                                  	;sub	di,1Bh
 27966 00004A6C 83EF1B                  	SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27967                                  	;mov	[es:di+35h],ax
 27968 00004A6F 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27969 00004A73 5F                      	POP	DI		;AN004; restore dirsec offset
 27970                                  
 27971                                  ; DOS 3.3  FastOpen  6/13/86
 27972                                  
 27973 00004A74 1E                      	PUSH	DS
 27974                                  
 27975                                  ;hkn; SS is DOSDATA
 27976 00004A75 16                      	push	ss
 27977 00004A76 1F                      	pop	ds
 27978                                  	;test	byte [FastOpenFlg],4
 27979 00004A77 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27980 00004A7C 7411                    	JZ	short Not_FastOpen
 27981                                  
 27982                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27983 00004A7E BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 27984                                  
 27985                                  	;mov	ax,[si+1]
 27986 00004A81 8B4401                  	MOV	AX,[SI+FEI.dirsec]
 27987 00004A84 AB                      	STOSW		  	; sf_dirsec
 27988                                  	; MSDOS 6.0
 27989                                  	;mov	ax,[si+3]
 27990 00004A85 8B4403                  	MOV	AX,[SI+FEI.dirsec+2]
 27991                                  		;;; changed for >32mb
 27992 00004A88 AB                      	STOSW		  	; sf_dirsec
 27993                                  	; 19/08//2018
 27994 00004A89 8A04                    	mov	al,[SI]
 27995                                  	;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27996 00004A8B AA                      	STOSB		  	; sf_dirpos
 27997 00004A8C 1F                      	POP	DS
 27998                                  	;JMP	short Next_Name
 27999                                  	; 24/09/2023
 28000 00004A8D EB1E                    	jmp	short FILE_SFT2	; cf=0 (after 'test' instruction)
 28001                                  
 28002                                  ; DOS 3.3  FastOpen  6/13/86
 28003                                  
 28004                                  Not_FastOpen:
 28005                                  	;POP	DS		; normal path
 28006                                  
 28007                                  ;hkn; SS override
 28008                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 28009                                  	; 16/12/2022
 28010                                  	; 28/07/2019
 28011 00004A8F 8B36[E205]              	mov	si,[CURBUF]
 28012 00004A93 1F                      	pop	ds
 28013                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28014                                  	;pop	ds
 28015                                  	;mov	si,[ss:CURBUF]
 28016                                  	
 28017                                  	;mov	ax,[si+6]
 28018 00004A94 8B4406                  	MOV	AX,[SI+BUFFINFO.buf_sector]	;F.C. >32mb ;AN000;
 28019 00004A97 AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 28020                                  	; 19/05/2019	
 28021                                  	; MSDOS 6.0
 28022                                  	;mov	ax,[si+8]
 28023 00004A98 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 28024 00004A9B AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 28025                                  	
 28026 00004A9C 89D8                    	MOV	AX,BX
 28027                                  	;;add	si,16	; MSDOS 3.3
 28028                                  	;add	si,20	; MSDOS 6.0
 28029 00004A9E 83C614                  	ADD	SI,BUFINSIZ	; DS:SI-> start of data in buffer
 28030 00004AA1 29F0                    	SUB	AX,SI		; AX = BX relative to start of sector
 28031                                  	;mov	cl,32
 28032 00004AA3 B120                    	MOV	CL,dir_entry.size
 28033 00004AA5 F6F1                    	DIV	CL
 28034 00004AA7 AA                      	STOSB		  	; sf_dirpos
 28035                                  Next_Name:
 28036 00004AA8 EB03                    	JMP	SHORT FILE_SFT2
 28037                                  
 28038                                  	; 24/09/2023
 28039                                  	; cf=0 (after 'or' instruction)
 28040                                  DEV_SFT3:
 28041                                  	;add	di,7
 28042 00004AAA 83C707                  	ADD	DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 28043                                  FILE_SFT2:
 28044                                  
 28045                                  ; Copy in the object's name
 28046                                  
 28047 00004AAD 89DE                    	MOV	SI,BX		; DS:SI points to dir_name
 28048 00004AAF B90B00                  	MOV	CX,11
 28049 00004AB2 F3A4                    	REP	MOVSB		; sf_name
 28050 00004AB4 5E                      	POP	SI		; recover DS:SI -> dir_first
 28051                                  
 28052                                  ;hkn; SS is DOSDATA
 28053 00004AB5 16                      	push	ss
 28054 00004AB6 1F                      	pop	ds
 28055                                  	; 24/09/2023
 28056                                  	; cf=0
 28057                                  	;CLC
 28058 00004AB7 C3                      	retn
 28059                                  
 28060                                  ;---------------------------------------------------------------------------
 28061                                  ;
 28062                                  ; Procedure Name : FREEENT
 28063                                  ;
 28064                                  ; Inputs:
 28065                                  ;	  ES:BP -> DPB
 28066                                  ;	  [CURBUF] Set
 28067                                  ;	  [CURBUF+2]:BX points to directory entry
 28068                                  ;	  [CURBUF+2]:SI points to above dir_first
 28069                                  ; Function:
 28070                                  ;	  Free the cluster chain for the entry if present
 28071                                  ; Outputs:
 28072                                  ;	  Carry set if error (currently user FAILed to I 24)
 28073                                  ;	  (NOTE dir_firclus and dir_size_l/h are wrong)
 28074                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 28075                                  ;---------------------------------------------------------------------------
 28076                                  
 28077                                  	; 24/02/2024 - Retro DOS v4.2
 28078                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28079                                  FREEENT:
 28080 00004AB8 1E                      	PUSH	DS
 28081 00004AB9 C53E[E205]              	LDS	DI,[CURBUF]
 28082 00004ABD 8B0C                    	MOV	CX,[SI]		; Get pointer to clusters
 28083                                  	; 19/05/2019 - Retro DOS v4.0
 28084                                  	; MSDOS 6.0
 28085 00004ABF 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb  ;AN000;
 28086                                  ;hkn; SS override
 28087 00004AC2 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	      ;F.C. >32mb  ;AN000;
 28088 00004AC7 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]
 28089 00004ACA 1F                      	POP	DS
 28090 00004ACB 83F902                  	CMP	CX,2
 28091 00004ACE 722C                    	JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 28092                                  	;cmp	cx,[es:bp+0Dh]
 28093 00004AD0 263B4E0D                	CMP	CX,[ES:BP+DPB.MAX_CLUSTER]
 28094                                  	;JA	short RET1	; Treat like zero length file (firclus mucked)
 28095 00004AD4 7715                    	ja	short freeent_retn ; 24/02/2024
 28096 00004AD6 29FB                    	SUB	BX,DI
 28097 00004AD8 53                      	PUSH	BX		; Save offset
 28098 00004AD9 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 28099 00004ADD 52                      	PUSH	DX		; Save sector number
 28100 00004ADE 89CB                    	MOV	BX,CX
 28101 00004AE0 E8A402                  	call	RELEASE		; Free any data allocated
 28102 00004AE3 5A                      	POP	DX
 28103 00004AE4 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 28104 00004AE8 7302                    	JNC	short GET_BUF_BACK
 28105 00004AEA 5B                      	POP	BX
 28106                                  freeent_retn:
 28107 00004AEB C3                      	retn			; Screw up
 28108                                  
 28109                                  GET_BUF_BACK:
 28110                                  	; 22/09/2023
 28111                                  	;;mov	byte [ALLOWED],18h
 28112                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 28113                                  	;XOR	AL,AL ; *
 28114                                  	;call	GETBUFFR	; Get sector back
 28115 00004AEC E80F0D                  	call	GETBUFFER ; *	; pre read
 28116                                  
 28117 00004AEF 5B                      	POP	BX		; Get offset back
 28118 00004AF0 72F9                    	jc	short freeent_retn
 28119 00004AF2 E8FDEA                  	call	SET_BUF_AS_DIR
 28120 00004AF5 031E[E205]              	ADD	BX,[CURBUF]	; Correct it for new buffer
 28121                                  
 28122                                  	;MOV	SI,BX
 28123                                  	;;add	si,1Ah
 28124                                  	;ADD	SI,dir_entry.dir_first	; Get corrected SI
 28125                                  	; 24/02/2024
 28126                                  	;lea	si,[bx+1Ah]
 28127 00004AF9 8D771A                  	lea	si,[bx+dir_entry.dir_first]
 28128                                  RET1:
 28129 00004AFC F8                      	CLC
 28130 00004AFD C3                      	retn
 28131                                  
 28132                                  ;---------------------------------------------------------------------------
 28133                                  ;
 28134                                  ; Procedure Name : CHECK_VIRT_OPEN
 28135                                  ;
 28136                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 28137                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 28138                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 28139                                  ; flag [VIRTUAL_OPEN].
 28140                                  ; No registers affected (including flags).
 28141                                  ; On input, [THISSFT] points to current SFT.
 28142                                  ;
 28143                                  ;---------------------------------------------------------------------------
 28144                                  
 28145                                  CHECK_VIRT_OPEN:
 28146 00004AFE 50                      	PUSH	AX
 28147 00004AFF 9F                      	lahf			; preserve flags
 28148 00004B00 803E[A20A]00            	CMP	byte [VIRTUAL_OPEN],0
 28149 00004B05 7410                    	JZ	short ALL_CLOSED
 28150 00004B07 C606[A20A]00            	mov	byte [VIRTUAL_OPEN],0 ; reset flag
 28151 00004B0C 06                      	push	es
 28152 00004B0D 57                      	push	di
 28153 00004B0E C43E[9E05]              	LES	DI,[THISSFT]
 28154 00004B12 E8ADF9                  	call	DEV_CLOSE_SFT
 28155 00004B15 5F                      	pop	di
 28156 00004B16 07                      	pop	es
 28157                                  
 28158                                  ALL_CLOSED:
 28159 00004B17 9E                      	sahf			; restore flags
 28160 00004B18 58                      	POP	AX
 28161 00004B19 C3                      	retn
 28162                                  
 28163                                  ;============================================================================
 28164                                  ; ROM.ASM, MSDOS 6.0, 1991
 28165                                  ;============================================================================
 28166                                  ; 29/07/2018 - Retro DOS v3.0
 28167                                  ; 20/05/2019 - Retro DOS v4.0
 28168                                  
 28169                                  ;	TITLE	ROM - Miscellaneous routines
 28170                                  ;	NAME	ROM
 28171                                  
 28172                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 28173                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 28174                                  ;
 28175                                  ;	SKPCLP
 28176                                  ;	FNDCLUS
 28177                                  ;	BUFSEC
 28178                                  ;	BUFRD
 28179                                  ;	BUFWRT
 28180                                  ;	NEXTSEC
 28181                                  ;	OPTIMIZE
 28182                                  ;	FIGREC
 28183                                  ;	ALLOCATE
 28184                                  ;	RESTFATBYT
 28185                                  ;	RELEASE
 28186                                  ;	RELBLKS
 28187                                  ;	GETEOF
 28188                                  ;
 28189                                  ;	Modification history:
 28190                                  ;
 28191                                  ;		Created: ARR 30 March 1983
 28192                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 28193                                  
 28194                                  ;Break   <FNDCLUS -- Skip over allocation units>
 28195                                  ;--------------------------------------------------------------------------
 28196                                  ;
 28197                                  ; Procedure Name : FNDCLUS
 28198                                  ;
 28199                                  ; Inputs:
 28200                                  ;       CX = No. of clusters to skip
 28201                                  ;       ES:BP = Base of drive parameters
 28202                                  ;       [THISSFT] point to SFT
 28203                                  ; Outputs:
 28204                                  ;       BX = Last cluster skipped to
 28205                                  ;       CX = No. of clusters remaining (0 unless EOF)
 28206                                  ;       DX = Position of last cluster
 28207                                  ;       Carry set if error (currently user FAILed to I 24)
 28208                                  ; DI destroyed. No other registers affected.
 28209                                  ;--------------------------------------------------------------------------
 28210                                  
 28211                                  	; 10/02/2024 - Retro DOS v4.2
 28212                                  FNDCLUS_X:
 28213 00004B1A 8B0E[BC05]              	mov	cx,[CLUSNUM]
 28214                                  
 28215                                  ; 20/05/2019 - Retro DOS v4.0
 28216                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 28217                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28218                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 28219                                  
 28220                                  FNDCLUS:
 28221 00004B1E 06                      	PUSH	ES
 28222 00004B1F C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 28223                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 28224                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 28225 00004B23 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 28226                                  	;mov	dx,[es:di+19h]
 28227 00004B27 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 28228 00004B2B 09DB                    	OR	BX,BX
 28229 00004B2D 7424                    	JZ	short NOCLUS
 28230                                  
 28231 00004B2F 29D1                            SUB     CX,DX
 28232 00004B31 7308                            JNB	short FINDIT
 28233                                  
 28234 00004B33 01D1                            ADD     CX,DX
 28235 00004B35 31D2                            XOR     DX,DX
 28236                                  	;mov	bx,[es:di+0Bh]
 28237 00004B37 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 28238                                  FINDIT:
 28239 00004B3B 07                              POP	ES
 28240 00004B3C E313                    	JCXZ	RET9
 28241                                  
 28242                                  	;entry	SKPCLP
 28243                                  SKPCLP:
 28244 00004B3E E8B808                  	call	UNPACK
 28245 00004B41 7214                            jc	short fndclus_retn	; retc
 28246                                  
 28247                                  	; 09/09/2018
 28248                                  
 28249                                  	; MSDOS 3.3
 28250                                  	;push	bx
 28251                                  	;mov	bx,di
 28252                                  	;call	IsEOF
 28253                                  	;pop	bx	
 28254                                  	;jae	short RET9
 28255                                  
 28256                                  	; 20/05/2019 - Retro DOS v4.0
 28257                                  
 28258                                  	; MSDOS 6.0
 28259 00004B43 87DF                    	xchg	bx,di
 28260 00004B45 E89A08                  	call	IsEOF
 28261 00004B48 87DF                    	xchg	bx,di
 28262 00004B4A 7305                    	jae	short RET9
 28263                                  
 28264 00004B4C 87DF                            XCHG    BX,DI
 28265 00004B4E 42                              INC     DX
 28266                                  
 28267 00004B4F E2ED                    	LOOP	SKPCLP			; RMFS
 28268                                  RET9:	
 28269 00004B51 F8                      	CLC
 28270 00004B52 C3                              retn
 28271                                  NOCLUS:
 28272 00004B53 07                              POP	ES
 28273 00004B54 41                              INC	CX
 28274 00004B55 4A                              DEC	DX
 28275 00004B56 F8                              CLC
 28276                                  
 28277                                  fndclus_retn:
 28278 00004B57 C3                              retn
 28279                                  
 28280                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 28281                                  ;--------------------------------------------------------------------------
 28282                                  ;
 28283                                  ; Procedure Name : BUFSEC
 28284                                  ;
 28285                                  ; Inputs:
 28286                                  ;       AH = priority of buffer
 28287                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 28288                                  ;       ES:BP = Base of drive parameters
 28289                                  ;       [CLUSNUM] = Physical cluster number
 28290                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 28291                                  ;       [BYTCNT1] = Size of transfer
 28292                                  ; Function:
 28293                                  ;       Insure specified sector is in buffer, flushing buffer before
 28294                                  ;       read if necessary.
 28295                                  ; Outputs:
 28296                                  ;       ES:DI = Pointer to buffer
 28297                                  ;       SI = Pointer to transfer address
 28298                                  ;       CX = Number of bytes
 28299                                  ;       [NEXTADD] updated
 28300                                  ;       [TRANS] set to indicate a transfer will occur
 28301                                  ;       Carry set if error (user FAILed to I 24)
 28302                                  ;--------------------------------------------------------------------------
 28303                                  
 28304                                  BUFSEC:
 28305 00004B58 8B16[BC05]              	MOV	DX,[CLUSNUM]
 28306 00004B5C 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 28307                                  	;mov	byte [ALLOWED],38h
 28308 00004B60 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 28309 00004B65 E84F01                  	CALL	FIGREC
 28310 00004B68 E89A0C                  	call	GETBUFFR
 28311 00004B6B 72EA                    	jc	short fndclus_retn
 28312                                  
 28313 00004B6D C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 28314 00004B72 8B36[B805]              	MOV	SI,[NEXTADD]
 28315 00004B76 89F7                    	MOV	DI,SI
 28316 00004B78 8B0E[D205]              	MOV	CX,[BYTCNT1]
 28317 00004B7C 01CF                    	ADD	DI,CX
 28318 00004B7E 893E[B805]              	MOV	[NEXTADD],DI
 28319 00004B82 C43E[E205]              	LES	DI,[CURBUF]
 28320                                  	;or	byte [es:di+5],8
 28321 00004B86 26804D0508              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 28322                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 28323                                  	;lea	di,[di+20] ; MSDOS 6.0
 28324 00004B8B 8D7D14                  	LEA	DI,[DI+BUFINSIZ]        ; Point to buffer
 28325 00004B8E 033E[CC05]              	ADD	DI,[BYTSECPOS]
 28326 00004B92 F8                      	CLC
 28327 00004B93 C3                      	retn
 28328                                  
 28329                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 28330                                  
 28331                                  ;---------------------------------------------------------------------------
 28332                                  ;
 28333                                  ; Procedure Name : BUFRD
 28334                                  ;
 28335                                  ; Do a partial sector read via one of the system buffers
 28336                                  ; ES:BP Points to DPB
 28337                                  ; Carry set if error (currently user FAILed to I 24)
 28338                                  ;
 28339                                  ; DS - set to DOSDATA
 28340                                  ;
 28341                                  ;----------------------------------------------------------------------------
 28342                                  
 28343                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28344                                  	; 20/05/2019 - Retro DOS v4.0
 28345                                  BUFRD:
 28346 00004B94 06                      	PUSH	ES
 28347 00004B95 31C0                    	xor	ax,ax			; pre-read sector
 28348 00004B97 E8BEFF                  	CALL	BUFSEC
 28349 00004B9A 7303                    	JNC	short BUF_OK ; ds=ss
 28350                                  
 28351                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 28352 00004B9C 07                      	POP	ES
 28353 00004B9D EB2D                    	JMP	SHORT RBUFPLACED ; ds=ss ; 25/02/2024 - Retro DOS v4.2
 28354                                  
 28355                                  BUF_OK:
 28356 00004B9F 8CC3                    	MOV	BX,ES
 28357 00004BA1 8E06[2E03]              	MOV	ES,[DMAADD+2]
 28358 00004BA5 8EDB                    	MOV	DS,BX
 28359 00004BA7 87FE                    	XCHG	DI,SI
 28360 00004BA9 D1E9                    	SHR	CX,1
 28361                                  ;M039
 28362                                  	; MSDOS 3.3
 28363                                  	;JNC	short EVENRD
 28364                                  	;MOVSB
 28365                                  ;EVENRD:
 28366                                  	;REP	MOVSW
 28367                                  
 28368                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 28369                                  ;       DS:SI-> Source within Buffer.
 28370                                  ;       ES:DI-> Destination within Transfer memory block.
 28371                                  
 28372                                  	; MSDOS 6.0
 28373 00004BAB F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 28374                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28375                                  	;rep	movsb			;Copy last byte.
 28376                                  	; 16/12/2022
 28377 00004BAD 7301                    	jnc	short EVENRD ; **** 20/05/2019
 28378 00004BAF A4                      	movsb ; ****
 28379                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28380                                  	;adc	cx,0
 28381                                  	;rep	movsb
 28382                                  ;M039
 28383                                  EVENRD: ; ****
 28384 00004BB0 07                      	POP	ES
 28385                                  ;hkn; SS override
 28386 00004BB1 36C53E[E205]            	LDS	DI,[SS:CURBUF]
 28387                                  	;;lea	bx,[di+16]
 28388                                  	;lea	bx,[di+20] ; MSDOS 6.0
 28389 00004BB6 8D5D14                  	LEA	BX,[DI+BUFINSIZ]
 28390 00004BB9 29DE                    	SUB	SI,BX			; Position in buffer
 28391 00004BBB E8E70B                  	call	PLACEBUF
 28392                                  	;cmp	si,[es:bp+2]
 28393 00004BBE 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 28394 00004BC2 7205                    	JB	short RBUFPLACEDC ; ds<>ss ; No, leave buf where it is
 28395                                  ;M039
 28396                                  	; MSDOS 3.3
 28397                                  	;call	PLACEHEAD 		; Make it prime candidate for chucking
 28398                                  					;  even though it is MRU.
 28399                                  	; MSDOS 6.0
 28400 00004BC4 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 28401                                  ;M039					; chucking even though it is MRU.
 28402                                  
 28403                                  RBUFPLACEDC:
 28404 00004BC9 F8                      	CLC
 28405                                  ;RBUFPLACED:
 28406 00004BCA 16                      	push	ss
 28407 00004BCB 1F                      	pop	ds
 28408                                  RBUFPLACED:	; 25/02/2024 (ds=ss)
 28409 00004BCC C3                      	retn
 28410                                  
 28411                                  ;----------------------------------------------------------------------------
 28412                                  ;
 28413                                  ; Procedure : BUFWRT
 28414                                  ;
 28415                                  ; Do a partial sector write via one of the system buffers
 28416                                  ; ES:BP Points to DPB
 28417                                  ; Carry set if error (currently user FAILed to I 24)
 28418                                  ;
 28419                                  ; DS - set to DOSDATA
 28420                                  ;
 28421                                  ;----------------------------------------------------------------------------
 28422                                  
 28423                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28424                                  	; 20/05/2019 - Retro DOS v4.0
 28425                                  BUFWRT:
 28426                                  	;MOV	AX,[SECPOS]
 28427                                  	; MSDOS 6.0
 28428                                  	;ADD	AX,1			; Set for next sector
 28429                                  	;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28430                                  	;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28431                                  	; 24/09/2023
 28432 00004BCD FF06[C405]              	inc	word [SECPOS]
 28433 00004BD1 7504                    	jnz	short bufw_secpos
 28434 00004BD3 FF06[C605]              	inc	word [SECPOS+2]
 28435                                  bufw_secpos:
 28436 00004BD7 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28437 00004BDA 3B06[CA05]              	CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28438 00004BDE B001                    	MOV	AL,1			;F.C. >32mb	;AN000;
 28439 00004BE0 770F                    	JA	short NOREAD		;F.C. >32mb	;AN000;
 28440 00004BE2 720B                    	JB	short _doread		;F.C. >32mb	;AN000;
 28441 00004BE4 A1[C405]                	MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28442                                  
 28443                                  	; MSDOS 3.3
 28444                                  	;INC	AX
 28445                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28446                                  
 28447                                  	; 20/05/2019
 28448                                  	; MSDOS 3.3 & MSDOS 6.0
 28449 00004BE7 3B06[C805]              	CMP	AX,[VALSEC]		; Has sector been written before?
 28450 00004BEB B001                    	MOV	AL,1
 28451 00004BED 7702                    	JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28452                                  _doread:
 28453 00004BEF 30C0                    	XOR	AL,AL
 28454                                  NOREAD:
 28455 00004BF1 06                      	PUSH	ES
 28456 00004BF2 E863FF                  	CALL	BUFSEC
 28457 00004BF5 72A5                    	JC	short BUF_IO_FAIL
 28458 00004BF7 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 28459 00004BFB D1E9                    	SHR	CX,1
 28460                                  ;M039
 28461                                  	; MSDOS 3.3
 28462                                  	;JNC	short EVENWRT ; 09/09/2018
 28463                                  	;MOVSB
 28464                                  ;EVENWRT:
 28465                                  	;REP	MOVSW
 28466                                  
 28467                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28468                                  ;	DS:SI-> Source within Transfer memory block.
 28469                                  ;	ES:DI-> Destination within Buffer.
 28470                                  
 28471                                  	; MSDOS 6.0
 28472 00004BFD F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28473                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28474                                  	;rep	movsb		  	;Copy last byte.
 28475                                  	; 16/12/2022
 28476 00004BFF 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28477 00004C01 A4                      	movsb ; ****
 28478                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28479                                  	;adc	cx,0
 28480                                  	;rep	movsb
 28481                                  ;M039
 28482                                  EVENWRT: ; ****
 28483 00004C02 07                      	POP	ES
 28484                                  
 28485                                  ;hkn; SS override
 28486 00004C03 36C51E[E205]            	LDS	BX,[SS:CURBUF]
 28487                                  
 28488                                  	; MSDOS 6.0
 28489 00004C08 F6470540                	TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28490                                  					;LB. if already dirty		 ;AN000;
 28491 00004C0C 7507                    	JNZ	short yesdirty10	;LB. don't increment dirty count ;AN000;
 28492 00004C0E E8F30D                  	call	INC_DIRTY_COUNT		;LB.				 ;AN000;
 28493                                  	
 28494                                  	;or	byte [bx+5],40h
 28495 00004C11 804F0540                	OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28496                                  yesdirty10:
 28497                                  	;;lea	si,[bx+16]
 28498                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28499 00004C15 8D7714                  	LEA	SI,[BX+BUFINSIZ]
 28500 00004C18 29F7                    	SUB	DI,SI		  	; Position in buffer
 28501                                  ;M039
 28502                                  	; MSDOS 3.3
 28503                                  	;MOV	SI,DI
 28504                                  	;MOV	DI,BX
 28505                                  	;call	PLACEBUF
 28506                                  	;;cmp	si,[es:bp+2]
 28507                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28508                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28509                                  	;call	PLACEHEAD		; Make it prime candidate for chucking
 28510                                  					;  even though it is MRU.
 28511                                  	; 10/02/2024
 28512 00004C1A 16                      	push	ss
 28513 00004C1B 1F                      	pop	ds
 28514                                  
 28515                                  	; MSDOS 6.0
 28516                                  	;cmp	di,[es:bp+2]
 28517 00004C1C 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28518 00004C20 7204                    	JB	short WBUFPLACED	; No, leave buf where it is
 28519                                  
 28520                                  	; 10/02/2024
 28521                                  	;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28522                                  					; chucking even though it is MRU.
 28523 00004C22 891E[6D00]              	mov	[BufferQueue],bx
 28524                                  ;M039
 28525                                  
 28526                                  WBUFPLACED:
 28527 00004C26 F8                      	CLC
 28528                                  	; 10/02/2024
 28529                                  	;push	ss
 28530                                  	;pop	ds
 28531 00004C27 C3                      	retn
 28532                                  
 28533                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28534                                  ;---------------------------------------------------------------------------
 28535                                  ;
 28536                                  ; Procedure Name : NEXTSEC
 28537                                  ;
 28538                                  ; Compute the next sector to read or write
 28539                                  ; ES:BP Points to DPB
 28540                                  ;
 28541                                  ;---------------------------------------------------------------------------
 28542                                  
 28543                                  NEXTSEC:
 28544 00004C28 F606[7405]FF            	test	byte [TRANS],0FFh ; -1
 28545                                  	;JZ	short CLRET
 28546                                  	; 29/02/2024
 28547 00004C2D 7427                    	jz	short CLRET2
 28548                                  
 28549 00004C2F A0[7305]                	MOV	AL,[SECCLUSPOS]
 28550 00004C32 FEC0                    	INC	AL
 28551                                  	;cmp	al,[es:bp+4]
 28552 00004C34 263A4604                	CMP	AL,[ES:BP+DPB.CLUSTER_MASK]
 28553 00004C38 7618                    	JBE	short SAVPOS
 28554                                  
 28555 00004C3A 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 28556 00004C3E E8A107                  	call	IsEOF
 28557 00004C41 7314                    	JAE	short NONEXT
 28558                                  
 28559 00004C43 E8B307                  	call	UNPACK
 28560                                  	;JC	short NONEXT
 28561                                  	; 26/02/2024
 28562 00004C46 7210                    	jc	short NONEXT2
 28563                                  clusgot:
 28564 00004C48 893E[BC05]              	MOV	[CLUSNUM],DI
 28565 00004C4C FF06[BA05]              	INC	word [LASTPOS]
 28566 00004C50 B000                    	MOV	AL,0
 28567                                  SAVPOS:
 28568 00004C52 A2[7305]                	MOV	[SECCLUSPOS],AL
 28569                                  CLRET:
 28570 00004C55 F8                              CLC
 28571                                  CLRET2:		; 29/02/2024
 28572 00004C56 C3                      	retn
 28573                                  NONEXT:
 28574 00004C57 F9                      	STC
 28575                                  NONEXT2:	; 26/02/2024
 28576 00004C58 C3                      	retn
 28577                                  
 28578                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28579                                  ;----------------------------------------------------------------------------
 28580                                  ;
 28581                                  ; Procedure Name : OPTIMIZE
 28582                                  ;
 28583                                  ; Inputs:
 28584                                  ;	  BX = Physical cluster
 28585                                  ;	  CX = No. of records
 28586                                  ;	  DL = sector within cluster
 28587                                  ;	  ES:BP = Base of drive parameters
 28588                                  ;	  [NEXTADD] = transfer address
 28589                                  ; Outputs:
 28590                                  ;	  AX = No. of records remaining
 28591                                  ;	  BX = Transfer address
 28592                                  ;	  CX = No. or records to be transferred
 28593                                  ;	  DX = Physical sector address (LOW)
 28594                                  ;	  [HIGH_SECTOR] = Physical sector address (HIGH)
 28595                                  ;	  DI = Next cluster
 28596                                  ;	  [CLUSNUM] = Last cluster accessed
 28597                                  ;	  [NEXTADD] updated
 28598                                  ;	  Carry set if error (currently user FAILed to I 24)
 28599                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28600                                  ;
 28601                                  ;---------------------------------------------------------------------------
 28602                                  
 28603                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28604                                  OPTIMIZE:
 28605 00004C59 52                      	PUSH	DX
 28606 00004C5A 53                      	PUSH	BX
 28607                                  	;mov	al,[es:bp+4]
 28608 00004C5B 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 28609 00004C5F FEC0                    	INC	AL		; Number of sectors per cluster
 28610 00004C61 88C4                    	MOV	AH,AL
 28611 00004C63 28D0                    	SUB	AL,DL		; AL = Num of sectors left in first cluster
 28612 00004C65 89CA                    	MOV	DX,CX
 28613                                  	;MOV	CX,0
 28614                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28615                                  	; 16/12/2022
 28616 00004C67 31C9                    	xor	cx,cx	; sub cx,cx
 28617                                  OPTCLUS:
 28618                                  ; AL has number of sectors available in current cluster
 28619                                  ; AH has number of sectors available in next cluster
 28620                                  ; BX has current physical cluster
 28621                                  ; CX has number of sequential sectors found so far
 28622                                  ; DX has number of sectors left to transfer
 28623                                  ; ES:BP Points to DPB
 28624                                  ; ES:SI has FAT pointer
 28625                                  
 28626                                  do_norm3:
 28627 00004C69 E88D07                  	call	UNPACK
 28628 00004C6C 7236                    	JC	short OP_ERR
 28629                                  clusgot2:
 28630 00004C6E 00C1                    	ADD	CL,AL
 28631 00004C70 80D500                  	ADC	CH,0
 28632 00004C73 39D1                    	CMP	CX,DX
 28633 00004C75 7332                    	JAE	short BLKDON
 28634 00004C77 88E0                    	MOV	AL,AH
 28635 00004C79 43                      	INC	BX
 28636 00004C7A 39DF                    	CMP	DI,BX
 28637 00004C7C 74EB                    	JZ	short OPTCLUS
 28638 00004C7E 4B                      	DEC	BX
 28639                                  FINCLUS:
 28640 00004C7F 891E[BC05]              	MOV	[CLUSNUM],BX	; Last cluster accessed
 28641 00004C83 29CA                    	SUB	DX,CX		; Number of sectors still needed
 28642 00004C85 52                      	PUSH	DX
 28643 00004C86 89C8                    	MOV	AX,CX
 28644                                  	;mul	word[ES:BP+2]
 28645 00004C88 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28646                                  				; Number of sectors times sector size
 28647 00004C8C 8B36[B805]              	MOV	SI,[NEXTADD]
 28648 00004C90 01F0                    	ADD	AX,SI		; Adjust by size of transfer
 28649 00004C92 A3[B805]                	MOV	[NEXTADD],AX
 28650 00004C95 58                      	POP	AX		; Number of sectors still needed
 28651 00004C96 5A                      	POP	DX		; Starting cluster
 28652 00004C97 29D3                    	SUB	BX,DX		; Number of new clusters accessed
 28653 00004C99 011E[BA05]              	ADD	[LASTPOS],BX
 28654 00004C9D 5B                      	POP	BX		; BL = sector position within cluster
 28655 00004C9E E81600                  	call	FIGREC
 28656 00004CA1 89F3                    	MOV	BX,SI
 28657                                  	; 24/09/2023
 28658                                  	; cf=0 (at the return of FIGREC)
 28659                                  	;CLC
 28660 00004CA3 C3                      	retn
 28661                                  OP_ERR:
 28662 00004CA4 83C404                  	ADD	SP,4
 28663 00004CA7 F9                      	STC
 28664 00004CA8 C3                      	retn
 28665                                  BLKDON:
 28666 00004CA9 29D1                    	SUB	CX,DX	  	; Number of sectors in cluster we don't want
 28667 00004CAB 28CC                    	SUB	AH,CL	  	; Number of sectors in cluster we accepted
 28668 00004CAD FECC                    	DEC	AH		; Adjust to mean position within cluster
 28669 00004CAF 8826[7305]              	MOV	[SECCLUSPOS],AH
 28670 00004CB3 89D1                    	MOV	CX,DX		; Anyway, make the total equal to the request
 28671 00004CB5 EBC8                    	JMP	SHORT FINCLUS
 28672                                  
 28673                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28674                                  ;---------------------------------------------------------------------------
 28675                                  ;
 28676                                  ; Procedure Name : FIGREC
 28677                                  ;
 28678                                  ; Inputs:
 28679                                  ;	  DX = Physical cluster number
 28680                                  ;	  BL = Sector position within cluster
 28681                                  ;	  ES:BP = Base of drive parameters
 28682                                  ; Outputs:
 28683                                  ;	  DX = physical sector number (LOW)
 28684                                  ;	  [HIGH_SECTOR] Physical sector address (HIGH)
 28685                                  ; No other registers affected.
 28686                                  ;
 28687                                  ;---------------------------------------------------------------------------
 28688                                  
 28689                                  	; 10/06/2019
 28690                                  	; 20/05/2019 - Retro DOS v4.0
 28691                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28692                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28693                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)
 28694                                  
 28695                                  	; 27/02/2024 - Retro DOS v4.2
 28696                                  	; (ds=ss)
 28697                                  FIGREC:
 28698 00004CB7 51                      	PUSH	CX
 28699                                  	;
 28700                                  	; 27/02/2024
 28701 00004CB8 31C9                    	xor	cx,cx
 28702 00004CBA 890E[0706]              	mov	[HIGH_SECTOR],cx ;0
 28703                                  	;
 28704                                  	;mov	cl,[es:bp+5]
 28705 00004CBE 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28706 00004CC2 4A                      	DEC	DX
 28707 00004CC3 4A                      	DEC	DX
 28708                                  
 28709                                  	; MSDOS 3.3
 28710                                  	;SHL	DX,CL
 28711                                  
 28712                                  ;hkn; SS override HIGH_SECTOR
 28713                                  	; MSDOS 6.0
 28714                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28715                                  	; 27/02/2024
 28716                                  	;mov	word [HIGH_SECTOR],0
 28717                                  	; 24/09/2023
 28718                                  	;;xor	ch,ch				;F.C. >32mb
 28719                                  	;OR	CL,CL				;F.C. >32mb
 28720                                  	;JZ	short noshift			;F.C. >32mb
 28721                                  	; 27/02/2024
 28722 00004CC4 E309                    	jcxz	noshift
 28723                                  	; 27/02/2024
 28724                                  	;;XOR	CH,CH				;F.C. >32mb
 28725                                  rotleft:					;F.C. >32mb
 28726 00004CC6 F8                      	CLC					;F.C. >32mb
 28727 00004CC7 D1D2                    	RCL	DX,1				;F.C. >32mb
 28728                                  	; 10/06/2019
 28729                                  	;RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28730                                  	; 27/02/2024
 28731 00004CC9 D116[0706]              	rcl	word [HIGH_SECTOR],1
 28732 00004CCD E2F7                    	LOOP	rotleft				;F.C. >32mb
 28733                                  noshift:
 28734                                  	; MSDOS 3.3 & MSDOS 6.0
 28735 00004CCF 08DA                    	OR	DL,BL
 28736                                  	;add	dx,[es:bp+0Bh]
 28737 00004CD1 2603560B                	ADD	DX,[ES:BP+DPB.FIRST_SECTOR]
 28738                                  	; MSDOS 6.0
 28739                                  	; 10/06/2019
 28740                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28741                                  	; 24/09/2023
 28742                                  	; cx=0
 28743                                  	;ADC	word [ss:HIGH_SECTOR],cx ; 0
 28744                                  	; 27/02/2024
 28745 00004CD5 110E[0706]              	adc	word [HIGH_SECTOR],cx ; 0
 28746                                  
 28747                                  	; MSDOS 3.3 & MSDOS 6.0
 28748 00004CD9 59                      	POP	CX
 28749                                  figrec_retn:
 28750 00004CDA C3                      	retn
 28751                                  
 28752                                  ; 20/05/2019 - Retro DOS v4.0
 28753                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28754                                  
 28755                                  ; 30/07/2018 - Retro DOS v3.0
 28756                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28757                                  
 28758                                  ;Break   <ALLOCATE -- Assign disk space>
 28759                                  ;---------------------------------------------------------------------------
 28760                                  ;
 28761                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28762                                  ;
 28763                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28764                                  ;   FAT-chained onto the end of the existing file.
 28765                                  ;
 28766                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28767                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28768                                  ;   numbered clusters, looking for the necessary free blocks.
 28769                                  ;
 28770                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28771                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28772                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28773                                  ;
 28774                                  ;       If we get to the end of the disk without satisfaction:
 28775                                  ;
 28776                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28777                                  ;               return (insufficient_disk_space)
 28778                                  ;           ELSE
 28779                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28780                                  ;
 28781                                  ;   Note that there is no multitasking interlock. There is no race when
 28782                                  ;   examining the entrys in an in-core FAT block since there will be no
 28783                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28784                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28785                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28786                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28787                                  ;   satisfied. We can't allow another activation to think this cluster is
 28788                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28789                                  ;   allocated.
 28790                                  ;
 28791                                  ;   Note that when we run out of space this algorithem will scan from
 28792                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28793                                  ;   redundantly scanning the later part of the disk. This only happens when
 28794                                  ;   we run out of space, so sue me.
 28795                                  ;
 28796                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28797                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28798                                  ;                                                                          ;
 28799                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28800                                  ;   explanation:
 28801                                  ;
 28802                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28803                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28804                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28805                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28806                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28807                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28808                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28809                                  ;   the
 28810                                  ;           LOOP   findfre         ; alloc more if needed
 28811                                  ;   instruction when the first cluster is allocated to the nul file. The
 28812                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28813                                  ;
 28814                                  ;   This method is obviously useless (because it is non-reentrant) for
 28815                                  ;   multitasking, and will have to be changed. Storing the required value on
 28816                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28817                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28818                                  ;   problems with INT 24 well.
 28819                                  ;
 28820                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28821                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28822                                  ;                                                                          ;
 28823                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28824                                  ;               CX = No. of clusters to allocate
 28825                                  ;               ES:BP = Base of drive parameters
 28826                                  ;               [THISSFT] = Points to SFT
 28827                                  ;
 28828                                  ;       EXIT    'C' set if insufficient space
 28829                                  ;                 [FAILERR] can be tested to see the reason for failure
 28830                                  ;                 CX = max. no. of clusters that could be added to file
 28831                                  ;               'C' clear if space allocated
 28832                                  ;                 BX = First cluster allocated
 28833                                  ;                 FAT is fully updated
 28834                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28835                                  ;
 28836                                  ;       USES    ALL but SI, BP
 28837                                  
 28838                                  ;callmagic  proc near
 28839                                  ;       push    ds                             ;push segment of routine 
 28840                                  ;       push    Offset MagicPatch              ;push offset for routine
 28841                                  ;       retf                                   ;simulate jmp far
 28842                                  ;                                              ;far return address is on
 28843                                  ;                                              ;stack, so far return from
 28844                                  ;                                              ;call will return this routine
 28845                                  ;callmagic  endp
 28846                                  
 28847                                  
 28848                                  ; 25/09/2023
 28849                                  %if 0
 28850                                  callmagic:
 28851                                  	push	ds
 28852                                  	push	MagicPatch
 28853                                  	retf	
 28854                                  %endif
 28855                                  
 28856                                  ALLOCATE:
 28857                                  	; 10/09/2018
 28858                                  ;BEGIN MAGICDRV MODIFICATIONS
 28859                                  ;
 28860                                  ;7/5/92 scottq
 28861                                  ;
 28862                                  ;This is the disk compression patch location which allows
 28863                                  ;the disk compression software to fail allocations if the
 28864                                  ;FAT would allows allocation, but the free space for compressed
 28865                                  ;data would not.
 28866                                  ;        
 28867                                  ;;;	call    far ptr MAGICPATCH
 28868                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28869                                  ;;; but we do know the segment and offset of the routine
 28870                                  ;;; so simulate a far call to dosdata:magicpatch
 28871                                  ;;; note dosassume above, so DS -> dosdata
 28872                                  
 28873                                  	; MSDOS 6.0
 28874                                          ;clc				;clear carry so we fall through
 28875                                  	;				;if no patch is present
 28876                                  	;push	cs			;push segment for far return
 28877                                          ;call	callmagic		;this is a near call
 28878                                          ;jnc	short Regular_Allocate_Path
 28879                                  	;jmp	Disk_Full_Return
 28880                                  
 28881                                  ; 25/09/2023
 28882                                  %if 0
 28883                                  	clc
 28884                                  	push	cs
 28885                                  	call	callmagic
 28886                                  	jnc	short Regular_Allocate_Path
 28887                                  	jmp	Disk_Full_Return
 28888                                  Regular_Allocate_Path:
 28889                                  %endif
 28890                                  
 28891                                  	; 20/05/2019 - Retro DOS v4.0
 28892                                  ;END MAGICDRV MODIFICATIONS
 28893                                  
 28894                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28895                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28896                                  
 28897 00004CDB 53                              PUSH    BX                      ; save (bx)
 28898 00004CDC 31DB                            XOR     BX,BX
 28899 00004CDE E81807                  	call	UNPACK
 28900 00004CE1 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28901 00004CE5 5B                              POP     BX
 28902 00004CE6 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28903                                  
 28904 00004CE8 51                              PUSH    CX
 28905 00004CE9 53                              PUSH    BX
 28906                                  
 28907 00004CEA 89DA                            MOV     DX,BX
 28908                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28909                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28910 00004CEC 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28911 00004CF0 83FB02                          cmp     bx,2
 28912 00004CF3 7709                            ja	short FINDFRE
 28913                                  
 28914                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28915                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28916                                  
 28917                                  ads1:
 28918                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28919                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28920 00004CF5 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28921 00004CFB BB0100                          mov     bx,1                    ; Counter next instruction so first
 28922                                                                          ;       cluster examined is 2
 28923                                  
 28924                                  ;   Scanning both forwards and backwards for a free cluster
 28925                                  ;
 28926                                  ;       (BX) = forwards scan pointer
 28927                                  ;       (CX) = clusters remaining to be allocated
 28928                                  ;       (DX) = current last cluster in file
 28929                                  ;       (TOS) = last cluster of file
 28930                                  
 28931                                  FINDFRE:
 28932 00004CFE 43                              INC     BX
 28933                                  	;cmp	bx,[es:bp+0Dh]
 28934 00004CFF 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28935 00004D03 7757                    	ja	short ads7	; at end of disk
 28936 00004D05 E8F106                          call	UNPACK          ; check out this cluster
 28937 00004D08 722F                            jc	short ads4	; FAT error             [INTERR?]
 28938 00004D0A 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28939                                  
 28940                                  ;   Have found a free cluster. Chain it to the file
 28941                                  ;
 28942                                  ;       (BX) = found free cluster #
 28943                                  ;       (DX) = current last cluster in file
 28944                                  
 28945                                  	;;mov	[es:bp+1Ch],bx
 28946                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28947 00004D0C 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28948 00004D10 92                              xchg    ax,dx           ; save (dx) in ax
 28949 00004D11 BA0100                          mov     dx,1            ; mark this free guy as "1"
 28950 00004D14 E83607                  	call	PACK            ; set special "temporary" mark
 28951 00004D17 7220                            jc	short ads4	; FAT error             [INTERR?]
 28952                                  	;;cmp	word [es:bp+1Eh],-1
 28953                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28954 00004D19 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28955 00004D1E 7404                            JZ	short NO_ALLOC	; No
 28956                                  	;;dec	word [es:bp+1Eh]
 28957                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28958 00004D20 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28959                                  NO_ALLOC:
 28960 00004D24 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28961 00004D25 87DA                            XCHG    BX,DX
 28962 00004D27 89D0                            MOV     AX,DX
 28963 00004D29 E82107                  	call	PACK            ; link free cluster onto file
 28964                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28965                                                                  ;    cluster 0 with FIRCLUS value.
 28966 00004D2C 720B                            jc	short ads4	; FAT error [INTERR?]
 28967 00004D2E 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28968 00004D2F 89DA                            mov     dx,bx           ; (dx) = current end of file
 28969 00004D31 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28970                                  
 28971                                  ;   We've successfully extended the file. Clean up and exit
 28972                                  ;
 28973                                  ;       (BX) = last cluster in file
 28974                                  
 28975 00004D33 BAFFFF                          MOV     DX,0FFFFH
 28976 00004D36 E81407                  	call	PACK            ; mark last cluster EOF
 28977                                  
 28978                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28979                                  ;   2 whole bytes. Hope its worth it...
 28980                                  ;
 28981                                  ;       'C' set if error
 28982                                  ;       calling (BX) and (CX) pushed on stack
 28983                                  
 28984                                  ads4:   
 28985 00004D39 5B                      	POP     BX
 28986 00004D3A 59                              POP     CX              ; Don't need this stuff since we're successful
 28987 00004D3B 729D                            jc	short figrec_retn
 28988 00004D3D E8B906                          call	UNPACK          ; Get first cluster allocated for return
 28989                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28990 00004D40 7298                            jc	short figrec_retn
 28991 00004D42 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28992 00004D45 7293                            jc	short figrec_retn
 28993 00004D47 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28994 00004D49 09FF                            OR      DI,DI           ; clear 'C'
 28995 00004D4B 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28996                                  
 28997                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28998                                  ;   info
 28999                                  dofastk:
 29000                                  	; 20/05/2019
 29001                                  	; MSDOS 6.0
 29002                                  	;push	dx ; * MSDOS 6.0
 29003                                  	;;mov	dl,[es:bp+0]
 29004                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 29005                                  	;mov	dl,[es:bp]
 29006                                  
 29007                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29008                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 29009                                  	
 29010                                  	; 16/12/2022
 29011                                  	;push	dx ; *
 29012                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 29013                                  	; 15/12/2022
 29014                                  	;mov	dl,[es:bp]
 29015                                  	
 29016                                  	; MSDOS 3.3 & MSDOS 6.0
 29017 00004D4D 06                      	PUSH	ES
 29018 00004D4E C43E[9E05]              	LES     DI,[THISSFT]
 29019                                  	;mov	[es:di+0Bh],bx
 29020 00004D52 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 29021                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 29022                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 29023 00004D56 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 29024 00004D5A 07                      	POP	ES
 29025                                  	;retn
 29026                                  
 29027                                  	;pop	dx ; * MSDOS 6.0
 29028                                  
 29029                                  	; 16/12/2022
 29030                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29031                                  	;pop	dx ; *
 29032                                  
 29033 00004D5B C3                      	retn	
 29034                                  
 29035                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 29036                                  ;   of the disk...
 29037                                  
 29038                                  ads7:   
 29039 00004D5C 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 29040 00004D61 7592                    	jnz	short ads1	; start scan from front of disk
 29041                                  
 29042                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 29043                                  ;   the space back to the free list and tell the caller how much he could have
 29044                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 29045                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 29046                                  ;
 29047                                  ;       (CX) = clusters remaining to be allocated
 29048                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 29049                                  ;       (TOS+1) = # of clusters wanted to allocate
 29050                                  
 29051 00004D63 5B                              POP     BX              ; (BX) = last cluster of file
 29052 00004D64 BAFFFF                          MOV     DX,0FFFFH
 29053 00004D67 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 29054 00004D6A 58                              POP     AX              ; No. of clusters requested
 29055                                                                  ; Don't "retc". We are setting Carry anyway,
 29056                                                                  ;   Alloc failed, so proceed with return CX
 29057                                                                  ;   setup.
 29058 00004D6B 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 29059 00004D6D E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 29060                                                                  ;   Alloc failed.
 29061                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 29062                                          ; MSDOS 6.0
 29063 00004D70 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 29064 00004D75 F9                              STC
 29065 00004D76 C3                              retn
 29066                                  
 29067                                  ;-----------------------------------------------------------------------
 29068                                  ;
 29069                                  ; Procedure Name : RESTFATBYT
 29070                                  ;
 29071                                  ; SEE ALLOCATE CAVEAT
 29072                                  ;       Carry set if error (currently user FAILed to I 24)
 29073                                  ;-----------------------------------------------------------------------
 29074                                  
 29075                                  RESTFATBYT:
 29076 00004D77 53                              PUSH    BX
 29077 00004D78 52                              PUSH    DX
 29078 00004D79 57                              PUSH    DI
 29079 00004D7A 31DB                            XOR     BX,BX
 29080 00004D7C 8B16[9605]                      MOV     DX,[FATBYT]
 29081 00004D80 E8CA06                  	call	PACK
 29082 00004D83 5F                              POP     DI
 29083 00004D84 5A                              POP     DX
 29084 00004D85 5B                              POP     BX
 29085                                  ; 16/12/2022
 29086                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29087                                  ;RELEASE_flush:
 29088 00004D86 C3                      	retn
 29089                                  
 29090                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 29091                                  ;---------------------------------------------------------------------------
 29092                                  ;
 29093                                  ; Procedure Name : RELEASE
 29094                                  ;
 29095                                  ; Inputs:
 29096                                  ;       BX = Cluster in file
 29097                                  ;       ES:BP = Base of drive parameters
 29098                                  ; Function:
 29099                                  ;       Frees cluster chain starting with [BX]
 29100                                  ;       Carry set if error (currently user FAILed to I 24)
 29101                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 29102                                  ;
 29103                                  ;-----------------------------------------------------------------------------
 29104                                  
 29105                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29106                                  	; 20/05/2019 - Retro DOS v4.0
 29107                                  RELEASE:
 29108 00004D87 31D2                            XOR     DX,DX
 29109                                  
 29110                                  	;entry	RELBLKS
 29111                                  RELBLKS:
 29112                                  
 29113                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 29114                                  ;   and free the rest in the chain.
 29115                                  
 29116 00004D89 E86D06                  	call	UNPACK
 29117 00004D8C 7224                    	jc	short RELEASE_flush
 29118 00004D8E 7422                    	jz	short RELEASE_flush
 29119 00004D90 89F8                            MOV     AX,DI
 29120 00004D92 52                              PUSH    DX
 29121 00004D93 E8B706                  	call	PACK
 29122 00004D96 5A                              POP     DX
 29123 00004D97 7219                    	jc	short RELEASE_flush
 29124 00004D99 09D2                            OR      DX,DX
 29125 00004D9B 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 29126                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 29127                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 29128 00004D9D 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 29129 00004DA2 7404                            JZ	short NO_DEALLOC	; No
 29130 00004DA4 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 29131                                  NO_DEALLOC:
 29132 00004DA8 89C3                            MOV     BX,AX
 29133 00004DAA 48                              dec     ax              ; check for "1"
 29134 00004DAB 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 29135 00004DAD E83206                  	call	IsEOF
 29136 00004DB0 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 29137                                  
 29138                                  	; 16/12/2022
 29139                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29140                                  ;%if 0
 29141                                  RELEASE_flush:
 29142                                  	; MSDOS 6.0
 29143 00004DB2 268A4600                	mov	al,[es:bp]
 29144                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29145 00004DB6 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 29146 00004DB7 51                      	push	cx		;  them to be preserved.
 29147 00004DB8 06                      	push	es
 29148 00004DB9 55                      	push	bp
 29149 00004DBA E8450B                  	call	FLUSHBUF	; commit buffers for this drive
 29150 00004DBD 5D                      	pop	bp
 29151 00004DBE 07                      	pop	es
 29152 00004DBF 59                      	pop	cx
 29153 00004DC0 5E                      	pop	si
 29154                                  ;%endif
 29155                                  RET12:
 29156 00004DC1 C3                      	retn
 29157                                  
 29158                                  ;Break	<GETEOF -- Find the end of a file>
 29159                                  ;------------------------------------------------------------------------
 29160                                  ;
 29161                                  ; Procedure Name : GETEOF
 29162                                  ;
 29163                                  ; Inputs:
 29164                                  ;       ES:BP Points to DPB
 29165                                  ;       BX = Cluster in a file
 29166                                  ;       DS = CS
 29167                                  ; Outputs:
 29168                                  ;       BX = Last cluster in the file
 29169                                  ;       Carry set if error (currently user FAILed to I 24)
 29170                                  ; DI destroyed. No other registers affected.
 29171                                  ;
 29172                                  ;--------------------------------------------------------------------------
 29173                                  
 29174                                  GETEOF:
 29175 00004DC2 E83406                  	call	UNPACK
 29176 00004DC5 72FA                            jc	short RET12
 29177 00004DC7 53                              PUSH    BX
 29178 00004DC8 89FB                            MOV     BX,DI
 29179 00004DCA E81506                  	call	IsEOF
 29180 00004DCD 5B                              POP     BX
 29181 00004DCE 73F1                            JAE     short RET12
 29182 00004DD0 89FB                            MOV     BX,DI
 29183 00004DD2 EBEE                            JMP     short GETEOF
 29184                                  
 29185                                  ;============================================================================
 29186                                  ; FCB.ASM, MSDOS 6.0, 1991
 29187                                  ;============================================================================
 29188                                  ; 30/07/2018 - Retro DOS v3.0
 29189                                  ; 20/05/2019 - Retro DOS v4.0
 29190                                  
 29191                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 29192                                  ;	NAME	FCB
 29193                                  
 29194                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 29195                                  ;		  filename characters
 29196                                  ;
 29197                                  ;	MakeFcb
 29198                                  ;	NameTrans
 29199                                  ;	PATHCHRCMP
 29200                                  ;	GetLet
 29201                                  ;	UCase
 29202                                  ;	GetLet3
 29203                                  ;	GetCharType
 29204                                  ;	TESTKANJ
 29205                                  ;	NORMSCAN
 29206                                  ;	DELIM
 29207                                  ;
 29208                                  ;	Revision history:
 29209                                  ;
 29210                                  ;		A000  version 4.00  Jan. 1988
 29211                                  ;	
 29212                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 29213                                  
 29214                                  TableLook	EQU	-1
 29215                                  
 29216                                  SCANSEPARATOR	EQU	1
 29217                                  DRVBIT		EQU	2
 29218                                  NAMBIT		EQU	4
 29219                                  EXTBIT		EQU	8
 29220                                  
 29221                                  ;----------------------------------------------------------------------------
 29222                                  ;
 29223                                  ; Procedure : MakeFcb
 29224                                  ;
 29225                                  ;----------------------------------------------------------------------------
 29226                                  
 29227                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29228                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 29229                                  
 29230                                  	; 29/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 29231                                  	; (MSDOS 6.22 MSDOS.SYS - DOSCODE:8ED3h)
 29232                                  MAKEFCB:
 29233                                  ;hkn; SS override
 29234                                  	;MOV	BYTE [SS:SpaceFlag],0
 29235 00004DD4 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 29236                                  	; 29/02/2024
 29237 00004DD6 368816[4E03]            	mov	[ss:SpaceFlag],dl ; 0
 29238                                  	;test	al,2
 29239 00004DDB A802                    	test	AL,DRVBIT	; Use current drive field if default?
 29240 00004DDD 7503                    	JNZ	short DEFDRV
 29241                                  	;MOV	BYTE [ES:DI],0	; No - use default drive
 29242                                  	; 29/02/2024
 29243 00004DDF 268815                  	mov	[es:di],dl ; 0
 29244                                  DEFDRV:
 29245 00004DE2 47                      	INC	DI
 29246 00004DE3 B90800                  	MOV	CX,8
 29247                                  	;test	al,4
 29248 00004DE6 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 29249 00004DE8 93                      	XCHG	AX,BX		; Save bits in BX
 29250 00004DE9 B020                    	MOV	AL," "
 29251 00004DEB 7404                    	JZ	short FILLB	; If not, go fill with blanks
 29252 00004DED 01CF                    	ADD	DI,CX
 29253 00004DEF 31C9                    	XOR	CX,CX		; Don't fill any
 29254                                  FILLB:
 29255 00004DF1 F3AA                    	REP	STOSB
 29256 00004DF3 B103                    	MOV	CL,3
 29257 00004DF5 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 29258 00004DF8 7404                    	JZ	short FILLB2
 29259 00004DFA 01CF                    	ADD	DI,CX
 29260 00004DFC 31C9                    	XOR	CX,CX
 29261                                  FILLB2:
 29262 00004DFE F3AA                    	REP	STOSB
 29263 00004E00 91                      	XCHG	AX,CX		; Put zero in AX
 29264 00004E01 AB                      	STOSW
 29265 00004E02 AB                      	STOSW			; Initialize two words after to zero
 29266 00004E03 83EF10                  	SUB	DI,16		; Point back at start
 29267                                  	;test	bl,1
 29268 00004E06 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 29269 00004E09 7409                    	JZ	short SKPSPC
 29270 00004E0B E88800                  	CALL	SCANB		; Peel off blanks and tabs
 29271 00004E0E E81E01                  	CALL	DELIM		; Is it a one-time-only delimiter?
 29272 00004E11 7504                    	JNZ	short NOSCAN
 29273 00004E13 46                      	INC	SI		; Skip over the delimiter
 29274                                  SKPSPC:
 29275 00004E14 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 29276                                  NOSCAN:
 29277 00004E17 E8EC00                  	CALL	GETLET
 29278 00004E1A 761E                    	JBE	short NODRV	; Quit if termination character
 29279 00004E1C 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 29280 00004E1F 7519                    	JNZ	short NODRV
 29281 00004E21 46                      	INC	SI		; Skip over colon
 29282 00004E22 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 29283 00004E24 760F                    	JBE	short BADDRV	; Drive letter out of range
 29284                                  
 29285 00004E26 50                      	PUSH	AX
 29286 00004E27 E8E01A                  	call	GetVisDrv
 29287 00004E2A 58                      	POP	AX
 29288 00004E2B 730A                    	JNC	short HAVDRV
 29289                                  
 29290                                  	; 20/05/2019 - Retro DOS v4.0
 29291                                  	; MSDOS 6.0
 29292                                  ;hkn; SS override
 29293 00004E2D 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 29294                                  					; if not FAT drive ;AN000;
 29295 00004E33 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 29296                                  BADDRV:
 29297 00004E35 B2FF                    	MOV	DL,-1
 29298                                  HAVDRV:
 29299 00004E37 AA                      	STOSB			; Put drive specifier in first byte
 29300 00004E38 46                      	INC	SI
 29301 00004E39 4F                      	DEC	DI		; Counteract next two instructions
 29302                                  NODRV:
 29303 00004E3A 4E                      	DEC	SI		; Back up
 29304 00004E3B 47                      	INC	DI		; Skip drive byte
 29305                                  
 29306                                  	;entry	NORMSCAN
 29307                                  NORMSCAN:
 29308 00004E3C B90800                  	MOV	CX,8
 29309 00004E3F E82200                  	CALL	GETWORD 	; Get 8-letter file name
 29310 00004E42 803C2E                  	CMP	BYTE [SI],"."
 29311 00004E45 7510                    	JNZ	short NODOT
 29312 00004E47 46                      	INC	SI		; Skip over dot if present
 29313                                  
 29314                                  	; 24/09/2023
 29315                                  	;mov	cx,3
 29316 00004E48 B103                    	mov	cl,3	; ch=0
 29317                                  
 29318                                  	; MSDOS 6.0
 29319                                  ;hkn; SS override
 29320                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 29321                                  	; 10/06/2019
 29322 00004E4A 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 29323 00004E50 7402                    	JZ	short VOLOK				;AN000;
 29324 00004E52 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 29325                                  	; 24/09/2023
 29326                                  	;MOV	CX,2					;AN000;
 29327 00004E53 49                      	dec	cx  ; cx=2
 29328                                  	;JMP	SHORT contvol				;AN000;
 29329                                  VOLOK:
 29330                                  	;MOV	CX,3		; Get 3-letter extension
 29331                                  contvol:
 29332 00004E54 E81300                  	CALL	MUSTGETWORD
 29333                                  NODOT:
 29334 00004E57 88D0                    	MOV	AL,DL
 29335                                  
 29336                                  	; MSDOS 6.0
 29337                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 29338                                  	; 18/12/2022
 29339 00004E59 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 29340                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 29341                                  
 29342 00004E5F C3                      	retn
 29343                                  
 29344                                  NONAM:
 29345 00004E60 01CF                    	ADD	DI,CX
 29346 00004E62 4E                      	DEC	SI
 29347 00004E63 C3                      	retn
 29348                                  
 29349                                  GETWORD:
 29350 00004E64 E89F00                  	CALL	GETLET		
 29351 00004E67 76F7                    	JBE	short NONAM	; Exit if invalid character
 29352 00004E69 4E                      	DEC	SI
 29353                                  
 29354                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 29355                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 29356                                  
 29357                                  MUSTGETWORD:
 29358 00004E6A E89900                  	CALL	GETLET
 29359                                  
 29360                                  ;	If spaceFlag is set then we allow spaces in a pathname
 29361                                  
 29362                                  ;IF NOT TABLELOOK
 29363                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 29364                                  ;ENDIF
 29365 00004E6D 750C                    	JNZ	short MustCheckCX
 29366                                  
 29367                                  ;hkn; SS override
 29368 00004E6F 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 29369 00004E75 7419                    	JZ	short FILLNAM
 29370 00004E77 3C20                    	CMP	AL," "
 29371 00004E79 7515                    	JNZ	short FILLNAM
 29372                                  
 29373                                  MustCheckCX:
 29374 00004E7B E3ED                    	JCXZ	MUSTGETWORD
 29375 00004E7D 49                      	DEC	CX
 29376 00004E7E 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 29377 00004E80 7504                    	JNZ	short NOSTAR
 29378 00004E82 B03F                    	MOV	AL,"?"
 29379 00004E84 F3AA                    	REP	STOSB
 29380                                  NOSTAR:
 29381 00004E86 AA                      	STOSB
 29382 00004E87 3C3F                    	CMP	AL,"?"
 29383 00004E89 75DF                    	JNZ	short MUSTGETWORD
 29384 00004E8B 80CA01                  	OR	DL,1		; Flag ambiguous file name
 29385 00004E8E EBDA                    	JMP	short MUSTGETWORD
 29386                                  FILLNAM:
 29387 00004E90 B020                    	MOV	AL," "
 29388 00004E92 F3AA                    	REP	STOSB
 29389 00004E94 4E                      	DEC	SI
 29390 00004E95 C3                      	retn
 29391                                  
 29392                                  SCANB:
 29393 00004E96 AC                      	LODSB
 29394 00004E97 E89D00                  	CALL	SPCHK
 29395 00004E9A 74FA                    	JZ	short SCANB
 29396 00004E9C 4E                      	DEC	SI
 29397                                  scanb_retn:
 29398 00004E9D C3                      	retn
 29399                                  
 29400                                  ;----------------------------------------------------------------------------
 29401                                  ;
 29402                                  ; Procedure Name : NameTrans
 29403                                  ;
 29404                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 29405                                  ; allow spaces in pathnames
 29406                                  ;
 29407                                  ;   Inputs:	DS:SI points to start of path element
 29408                                  ;   Outputs:	Name1 has unpacked name, uppercased
 29409                                  ;		ES = DOSGroup
 29410                                  ;		DS:SI advanced after name
 29411                                  ;   Registers modified: DI,AX,DX,CX
 29412                                  ;
 29413                                  ;----------------------------------------------------------------------------
 29414                                  
 29415                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29416                                  	; 20/05/2019 - Retro DOS v4.0
 29417                                  
 29418                                  	; 29/02/2024 - Retro DOS v4.1
 29419                                  
 29420                                  NameTrans:
 29421                                  ;hkn; SS override
 29422 00004E9E 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 29423 00004EA4 16                      	push	ss
 29424 00004EA5 07                      	pop	es
 29425                                  
 29426                                  ;hkn; NAME1 is in DOSDATA
 29427 00004EA6 BF[4B05]                	MOV	DI,NAME1
 29428 00004EA9 57                      	PUSH	DI
 29429                                  
 29430                                  ; 29/02/2024
 29431                                  %if 0
 29432                                  	MOV	AX,'  '	; 2020h
 29433                                  	MOV	CX,5
 29434                                  	STOSB
 29435                                  	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 29436                                  	XOR	AL,AL		; Set stuff for NORMSCAN
 29437                                  	MOV	DL,AL
 29438                                  %else
 29439                                  	; 29/02/2024
 29440                                  	; (PCDOS 7.1 IBMDOS.COM)
 29441 00004EAA B020                    	mov     al,20h ; ' '
 29442 00004EAC B90B00                  	mov     cx,11
 29443 00004EAF F3AA                    	rep stosb               ; Fill "FCB" at NAME1 with spaces
 29444 00004EB1 91                      	xchg    ax,cx
 29445 00004EB2 99                      	cwd
 29446                                  %endif
 29447                                  
 29448 00004EB3 AA                      	STOSB
 29449 00004EB4 5F                      	POP	DI
 29450                                  
 29451 00004EB5 E884FF                  	CALL	NORMSCAN
 29452                                  
 29453                                  ;hkn; SS override for NAME1
 29454 00004EB8 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 29455 00004EBE 75DD                    	jnz	short scanb_retn
 29456 00004EC0 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 29457 00004EC6 C3                      	retn
 29458                                  
 29459                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 29460                                  ;============================================================================
 29461                                  
 29462                                  ; 20/05/2019 - Retro DOS v4.0
 29463                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29464                                  
 29465                                  ;If TableLook
 29466                                  
 29467                                  ;hkn; Table	SEGMENT
 29468                                  ;	PUBLIC	CharType
 29469                                  ;----------------------------------------------------------------------------
 29470                                  
 29471                                  ; Character type table for file name scanning
 29472                                  ; Table provides a mapping of characters to validity bits.
 29473                                  ; Four bits are provided for each character. Values 7Dh and above
 29474                                  ; have all bits set, so that part of the table is chopped off, and
 29475                                  ; the translation routine is responsible for screening these values.
 29476                                  ; The bit values are defined in DOSSYM.INC
 29477                                  
 29478                                  ;	      ; ^A and NUL
 29479                                  ;CharType:
 29480                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29481                                  ;	      ; ^C and ^B
 29482                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29483                                  ;	      ; ^E and ^D
 29484                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29485                                  ;	      ; ^G and ^F
 29486                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29487                                  ;	      ; TAB and BS
 29488                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29489                                  ;	      ; ^K and ^J
 29490                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29491                                  ;	      ; ^M and ^L
 29492                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29493                                  ;	      ; ^O and ^N
 29494                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29495                                  ;	      ; ^Q and ^P
 29496                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29497                                  ;	      ; ^S and ^R
 29498                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29499                                  ;	      ; ^U and ^T
 29500                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29501                                  ;	      ; ^W and ^V
 29502                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29503                                  ;	      ; ^Y and ^X
 29504                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29505                                  ;	      ; ESC and ^Z
 29506                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29507                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29509                                  ;	      ; ^_ and ^^
 29510                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29511                                  ;	      ; ! and SPACE
 29512                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29513                                  ;	      ; # and "
 29514                                  ;	 db   LOW (NOT FFCB+FCHK)
 29515                                  ;	      ; $ - )
 29516                                  ;	 db   3 dup (0FFh)
 29517                                  ;	      ; + and *
 29518                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29519                                  ;	      ; - and '
 29520                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29521                                  ;	      ; / and .
 29522                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29523                                  ;	      ; 0 - 9
 29524                                  ;	 db   5 dup (0FFh)
 29525                                  ;	      ; ; and :
 29526                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29527                                  ;	      ; = and <
 29528                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29529                                  ;	      ; ? and >
 29530                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29531                                  ;	      ; A - Z
 29532                                  ;	 db   13 dup (0FFh)
 29533                                  ;	      ; \ and [
 29534                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29535                                  ;	      ; ^ and ]
 29536                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29537                                  ;	      ; _ - {
 29538                                  ;	 db   15 dup (0FFh)
 29539                                  ;	      ; } and |
 29540                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29541                                  
 29542                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29543                                  ;					; character in the table
 29544                                  
 29545                                  ;FCHK	equ 1		; normal name char, no chks needed
 29546                                  ;FDELIM	equ 2		; is a delimiter
 29547                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29548                                  ;FFCB	equ 8		; is valid in an FCB
 29549                                  
 29550                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29551                                  ;----------------------------------------------------------------------------
 29552                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29553                                  
 29554                                  CharType: ; 63 bytes
 29555 00004EC7 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29556 00004ECF 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29557 00004ED7 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29558 00004EDF FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29559 00004EE7 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29560 00004EEF FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29561 00004EF7 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29562 00004EFF FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29563                                  
 29564                                  CharType_last equ ($ - CharType) * 2
 29565                                  
 29566                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29567                                  ;----------------------------------------------------------------------------
 29568                                  ;CharType:
 29569                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29570                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29571                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29572                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29573                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29574                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29575                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29576                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29577                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29578                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29579                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29580                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29581                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29582                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29583                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29584                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29585                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29586                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29587                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29588                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29589                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29590                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29591                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29592                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29593                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29594                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29595                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29596                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29597                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29598                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29599                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29600                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29601                                  
 29602                                  ;hkn; Table	ENDS
 29603                                  
 29604                                  ;ENDIF
 29605                                  
 29606                                  ; 20/05/2019 - Retro DOS v4.0
 29607                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29608                                  
 29609                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29610                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29611                                  
 29612                                  ;----------------------------------------------------------------------------
 29613                                  ;
 29614                                  ; Procedure Names : GetLet, UCase, GetLet3
 29615                                  ;
 29616                                  ; These routines take a character, convert it to upper case, and check
 29617                                  ; for delimiters.  Three different entry points:
 29618                                  ;	GetLet -  DS:[SI] = character to convert
 29619                                  ;	UCase  -  AL = character to convert
 29620                                  ;	GetLet3 - AL = character
 29621                                  ;		  [BX] = translation table to use
 29622                                  ;
 29623                                  ;	Exit (in all cases) : AL = upper case character
 29624                                  ;			      CY set if char is control char other than TAB
 29625                                  ;			      ZF set if char is a delimiter
 29626                                  ;	Uses : AX, flags
 29627                                  ;
 29628                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29629                                  ; inline version.  Return with carry set is only possible in the inline
 29630                                  ; version. The table lookup version is the one in use.
 29631                                  ;
 29632                                  ;----------------------------------------------------------------------------
 29633                                  
 29634                                  ; This entry point has character at [SI]
 29635                                  
 29636                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29637                                  GETLET:	
 29638 00004F06 AC                      	LODSB
 29639                                  
 29640                                  ; This entry point has character in AL
 29641                                  
 29642                                  	;entry	UCase
 29643                                  UCase:	
 29644                                  	; 09/08/2018
 29645                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29646                                  _UCase:
 29647 00004F07 53                      	PUSH	BX
 29648 00004F08 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29649                                  
 29650                                  ; Convert the character in AL to upper case
 29651                                  
 29652                                  gl_0:
 29653 00004F0B 3C61                    	CMP	AL,"a"
 29654 00004F0D 7214                    	JB	short gl_2	; Already upper case, go check type
 29655 00004F0F 3C7A                    	CMP	AL,"z"
 29656 00004F11 7702                    	JA	short gl_1
 29657 00004F13 2C20                    	SUB	AL,20H		; Convert to upper case
 29658                                  
 29659                                  ; Map European character to upper case
 29660                                  
 29661                                  gl_1:
 29662 00004F15 3C80                    	CMP	AL,80H
 29663 00004F17 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29664 00004F19 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29665                                  
 29666                                  	; M048 - Start 
 29667                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29668                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29669                                  	; preserve it.
 29670                                  
 29671                                  	; 09/08/2018 - Retro DOS v3.0
 29672                                  	; MSDOS 3.3
 29673                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29674                                  	;CS	XLAT
 29675                                  
 29676                                  	; 20/05/2019 - Retro DOS v4.0
 29677                                  
 29678                                  	; MSDOS 6.0
 29679 00004F1B 1E                      	push	ds
 29680                                  	;getdseg <ds>
 29681 00004F1C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29682 00004F21 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29683 00004F22 1F                      	pop	ds
 29684                                  
 29685                                  	; M048 - End
 29686                                  
 29687                                  ; Now check the type
 29688                                  
 29689                                  ;If TableLook
 29690                                  gl_2:
 29691                                  	; 20/05/2019 - Retro DOS v4.0
 29692 00004F23 50                      	PUSH	AX
 29693                                  
 29694                                  	; MSDOS 3.3
 29695                                  	;mov	bx,CharType
 29696                                  	;; 09/08/2018
 29697                                  	;;xlat	byte [cs:bx]
 29698                                  	;cs	xlat	
 29699                                  	
 29700                                  	; MSDOS 6.0
 29701 00004F24 E81800                  	CALL	GetCharType	; returns type flags in AL
 29702                                  	
 29703                                  	;test	al,1	
 29704 00004F27 A801                    	TEST	AL,FCHK 	; test for normal character
 29705 00004F29 58                      	POP	AX
 29706                                  
 29707 00004F2A 5B                      	POP	BX
 29708 00004F2B C3                      	RETN
 29709                                  
 29710                                  ; This entry has character in AL and lookup table in BX
 29711                                  
 29712                                  	; MSDOS 6.0
 29713                                  ;	;entry GetLet3
 29714                                  GETLET3: ; 10/08/2018
 29715 00004F2C 53                      	PUSH	BX
 29716 00004F2D EBDC                    	JMP	short gl_0
 29717                                  ;ELSE
 29718                                  ;
 29719                                  ;gl_2:
 29720                                  ;	POP	BX
 29721                                  ;	CMP	AL,"."
 29722                                  ;	retz
 29723                                  ;	CMP	AL,'"'
 29724                                  ;	retz
 29725                                  ;	CALL	PATHCHRCMP
 29726                                  ;	retz
 29727                                  ;	CMP	AL,"["
 29728                                  ;	retz
 29729                                  ;	CMP	AL,"]"
 29730                                  ;	retz
 29731                                  ;ENDIF
 29732                                  
 29733                                  ;---------------------------------------------------------------------
 29734                                  ;
 29735                                  ; DELIM - check if character is a delimiter
 29736                                  ;	Entry : AX = character to check
 29737                                  ;	Exit  : ZF set if character is not a delimiter
 29738                                  ;	Uses  : Flags
 29739                                  ;
 29740                                  ;--------------------------------------------------------------------
 29741                                  
 29742                                  	;entry	DELIM
 29743                                  DELIM:
 29744                                  ;IF TableLook
 29745                                  	; 20/05/2019 - Retro DOS v4.0
 29746 00004F2F 50                      	PUSH	AX
 29747                                  
 29748                                  	; MSDOS 3.3
 29749                                  	;push	bx
 29750                                  	;mov	bx,CharType
 29751                                  	;;09/08/2018
 29752                                  	;;xlat	byte [cs:bx]
 29753                                  	;cs	xlat
 29754                                  	;pop	bx
 29755                                  
 29756                                  	; MSDOS 6.0
 29757 00004F30 E80C00                  	CALL	GetCharType
 29758                                  	
 29759                                  	;test	al,2
 29760 00004F33 A802                    	TEST	AL,FDELIM
 29761 00004F35 58                      	POP	AX
 29762 00004F36 C3                      	RETN
 29763                                  ;ELSE
 29764                                  ;	CMP	AL,":"
 29765                                  ;	retz
 29766                                  ;
 29767                                  ;	CMP	AL,"<"
 29768                                  ;	retz
 29769                                  ;	CMP	AL,"|"
 29770                                  ;	retz
 29771                                  ;	CMP	AL,">"
 29772                                  ;	retz
 29773                                  ;
 29774                                  ;	CMP	AL,"+"
 29775                                  ;	retz
 29776                                  ;	CMP	AL,"="
 29777                                  ;	retz
 29778                                  ;	CMP	AL,";"
 29779                                  ;	retz
 29780                                  ;	CMP	AL,","
 29781                                  ;	retz
 29782                                  ;ENDIF
 29783                                  
 29784                                  ;-------------------------------------------------------------------------
 29785                                  ;
 29786                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29787                                  ;	Entry : AL = character to check
 29788                                  ;	Exit  : ZF set if character is a space
 29789                                  ;	Uses  : flags
 29790                                  ;
 29791                                  ;-------------------------------------------------------------------------
 29792                                  
 29793                                  	;entry SPCHK
 29794                                  SPCHK:
 29795                                  ;IF TableLook
 29796                                  	; 20/05/2019 - Retro DOS v4.0
 29797 00004F37 50                      	PUSH	AX
 29798                                  
 29799                                  	; MSDOS 3.3
 29800                                  	;push	bx
 29801                                  	;mov	bx,CharType
 29802                                  	;; 09/08/2018
 29803                                  	;;xlat	byte [cs:bx]
 29804                                  	;cs	xlat
 29805                                  	;pop	bx
 29806                                  
 29807                                  	; MSDOS 6.0
 29808 00004F38 E80400                  	CALL	GetCharType
 29809                                  	
 29810                                  	;test	al,4
 29811 00004F3B A804                    	TEST	AL,FSPCHK
 29812 00004F3D 58                      	POP	AX
 29813 00004F3E C3                      	RETN
 29814                                  ;ELSE
 29815                                  ;	CMP	AL,9		; Filter out tabs too
 29816                                  ;	retz
 29817                                  ;; WARNING! " " MUST be the last compare
 29818                                  ;	CMP	AL," "
 29819                                  ;	return
 29820                                  ;ENDIF
 29821                                  
 29822                                  ;-------------------------------------------------------------------------
 29823                                  ;
 29824                                  ;  GetCharType - return flag bits indicating character type
 29825                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29826                                  ;	defined above at label CharType.
 29827                                  ;
 29828                                  ;	Entry : AL = character to return type flags for
 29829                                  ;	Exit  : AL = type flags
 29830                                  ;	Uses  : AL, flags
 29831                                  ;
 29832                                  ;-------------------------------------------------------------------------
 29833                                  
 29834                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29835                                  
 29836                                  	; 20/05/2019 - Retro DOS v4.0
 29837                                  	; MSDOS 6.0
 29838                                  GetCharType:
 29839                                  	;cmp	al,7Eh
 29840 00004F3F 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29841 00004F41 7316                    	jae	short gct_90		; return standard value
 29842                                  
 29843 00004F43 53                      	push	bx
 29844 00004F44 BB[C74E]                	mov	bx,CharType		; load lookup table
 29845 00004F47 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29846                                  	;xlat	cs:[bx] 		; get flags
 29847 00004F49 2ED7                    	cs	xlat	
 29848 00004F4B 5B                      	pop	bx
 29849                                  
 29850                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29851                                  ; we have to shift the flags down to the low nibble
 29852                                  
 29853 00004F4C 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29854                                  
 29855 00004F4E D0E8                    	shr	al,1			; we want high nibble, shift it down
 29856 00004F50 D0E8                    	shr	al,1
 29857 00004F52 D0E8                    	shr	al,1
 29858 00004F54 D0E8                    	shr	al,1
 29859                                  gct_80:
 29860 00004F56 240F                    	and	al,0Fh			; clear the unused nibble
 29861 00004F58 C3                      	retn
 29862                                  gct_90:
 29863 00004F59 B00F                    	mov	al,0Fh			; set all flags
 29864 00004F5B C3                      	retn
 29865                                  
 29866                                  ;----------------------------------------------------------------------------
 29867                                  ;
 29868                                  ; Procedure : PATHCHRCMP
 29869                                  ;
 29870                                  ;----------------------------------------------------------------------------
 29871                                  
 29872                                  PATHCHRCMP:
 29873 00004F5C 3C2F                    	CMP	AL,'/'
 29874 00004F5E 7606                    	JBE	short PathRet
 29875 00004F60 3C5C                    	CMP	AL,'\'
 29876 00004F62 C3                      	retn
 29877                                  GotFor:
 29878 00004F63 B05C                    	MOV	AL,'\'
 29879 00004F65 C3                      	retn
 29880                                  PathRet:
 29881 00004F66 74FB                    	JZ	short GotFor
 29882 00004F68 C3                      	retn
 29883                                  
 29884                                  ;============================================================================
 29885                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29886                                  ;============================================================================
 29887                                  ; 30/07/2018 - Retro DOS v3.0
 29888                                  ; 29/04/2019 - Retro DOS v4.0
 29889                                  
 29890                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29891                                  
 29892                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29893                                  
 29894                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29895                                  ;	NAME	IBMCTRLC
 29896                                  
 29897                                  ;**	Low level routines for detecting special characters on CON input,
 29898                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29899                                  ;	process termination code, and the INT 0 divide overflow handler.
 29900                                  ;
 29901                                  ;	FATAL
 29902                                  ;	FATAL1
 29903                                  ;	reset_environment
 29904                                  ;	DSKSTATCHK
 29905                                  ;	SPOOLINT
 29906                                  ;	STATCHK
 29907                                  ;	CNTCHAND
 29908                                  ;	DIVOV
 29909                                  ;	CHARHARD
 29910                                  ;	HardErr
 29911                                  ;
 29912                                  ;	Revision history:
 29913                                  ;
 29914                                  ;	    AN000	version 4.0   Jan 1988
 29915                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29916                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29917                                  ;
 29918                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29919                                  ;	      flags register. In order to return to user normally DOS used to
 29920                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29921                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29922                                  ;
 29923                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29924                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29925                                  ;	      charhard.
 29926                                  
 29927                                  ; 29/04/2019 - Retro DOS v4.0
 29928                                  	; MSDOS 6.0
 29929                                  ;		public	LowInt23Addr		
 29930                                  LowInt23Addr: ;	LABEL	DWORD
 29931 00004F69 [E710]0000              	DW	LowInt23, 0
 29932                                  
 29933                                  ;		public	LowInt24Addr
 29934                                  LowInt24Addr: ;	LABEL	DWORD
 29935 00004F6D [FB10]0000              	DW	LowInt24, 0
 29936                                  
 29937                                  ;		public	LowInt28Addr
 29938                                  LowInt28Addr: ;	LABEL	DWORD
 29939 00004F71 [0F11]0000              	DW	LowInt28, 0
 29940                                  
 29941                                  ;Break	<Checks for ^C in CON I/O>
 29942                                  
 29943                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29944                                  ; 05/05/2019 - Retro DOS v4.0
 29945                                  
 29946                                  ;---------------------------------------------------------------------------
 29947                                  ;
 29948                                  ; Procedure Name : DSKSTATCHK
 29949                                  ;
 29950                                  ; Check for ^C if only one level in
 29951                                  ;
 29952                                  ;---------------------------------------------------------------------------
 29953                                  
 29954                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29955                                  
 29956                                  	; 29/02/2024 - Retro DOS v4.2
 29957                                  
 29958                                  DSKSTATCHK:        
 29959                                  	;CMP	BYTE [INDOS],1
 29960 00004F75 36803E[2103]01          	CMP	BYTE [SS:INDOS],1 ; 15/03/2018
 29961                                  	;retnz			; Do NOTHING
 29962                                  	; 16/12/2022
 29963 00004F7B 7537                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018
 29964                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29965                                  	;jz	short _RET37 ; dskstatchk1
 29966                                  	;retn
 29967                                  ;_RET37:
 29968                                  ;dskstatchk1:
 29969 00004F7D 51                      	PUSH    CX
 29970 00004F7E 06                      	PUSH    ES
 29971 00004F7F 53                      	PUSH    BX
 29972 00004F80 1E                      	PUSH    DS
 29973 00004F81 56                      	PUSH    SI
 29974                                          
 29975                                  	;PUSH	CS
 29976                                  	;POP	ES
 29977                                  	;PUSH	CS
 29978                                  	;POP	DS
 29979                                  
 29980 00004F82 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29981 00004F84 8EC3                    	MOV	ES,BX		; for deviocall2
 29982 00004F86 8EDB                    	MOV	DS,BX
 29983                                  
 29984                                  	; 16/12/2022
 29985                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29986                                  
 29987                                  	; 05/05/2019
 29988                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29989                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29990                                  	;mov	word [ss:DSKSTST],0
 29991                                  
 29992                                  	; 16/12/2022
 29993                                  	; 25/06/2019
 29994 00004F88 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29995 00004F8D C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29996 00004F92 C706[9503]0000          	mov	word [DSKSTST],0
 29997                                  
 29998 00004F98 BB[9203]                        MOV     BX,DSKSTCALL
 29999                                  
 30000                                  	;LDS	SI,[ss:BCON]
 30001                                          ; 25/062019
 30002 00004F9B C536[3200]              	lds	si,[BCON]
 30003                                  
 30004                                  ; 16/12/2022
 30005                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30006                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 30007                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 30008                                  ;	mov	word [ss:DSKSTST],0
 30009                                  ;	mov	bx,DSKSTCALL
 30010                                  ;	lds	si,[ss:BCON]
 30011                                  
 30012 00004F9F E899F5                  	CALL	DEVIOCALL2
 30013                                  
 30014                                  	; 29/02/2024
 30015 00004FA2 1E                      	push	ds ; *
 30016 00004FA3 16                      	push	ss
 30017 00004FA4 1F                      	pop	ds
 30018                                  
 30019                                   	; 15/03/2018
 30020                                  	;;test	word [ss:DSKSTST],200h
 30021                                          ;TEST	WORD [SS:DSKSTST],STBUI
 30022                                  	; 05/05/2019
 30023                                  	;test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 30024                                  	; 29/02/2024
 30025 00004FA5 F606[9603]02            	test	byte [DSKSTST+1],(STBUI>>8) ; 2
 30026 00004FAA 7409                    	jz	short _GotCh		; No characters available
 30027                                  
 30028 00004FAC 30C0                    	XOR	AL,AL			; Set zero
 30029                                  RET36:
 30030                                  	; 29/02/2024
 30031 00004FAE 5E                      	pop	si ; *
 30032                                  	;
 30033 00004FAF 5E                      	POP	SI
 30034 00004FB0 1F                      	POP	DS
 30035 00004FB1 5B                      	POP	BX
 30036 00004FB2 07                      	POP	ES
 30037 00004FB3 59                      	POP	CX
 30038                                  	; 16/12/2022
 30039                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30040                                  _RET37:
 30041 00004FB4 C3                      	RETN
 30042                                  
 30043                                  _GotCh:
 30044                                  
 30045                                  ; 29/02/2024
 30046                                  %if 0
 30047                                  	MOV	AL,[SS:DSKCHRET]	; SS override
 30048                                  
 30049                                  	CMP	AL,"C"-"@" ; cmp al,3
 30050                                  	JNZ	SHORT RET36
 30051                                  	MOV	BYTE [SS:DSKSTCOM],DEVRD
 30052                                  	MOV	BYTE [SS:DSKSTCALL],DRDWRHL
 30053                                  	MOV	[SS:DSKCHRET],CL
 30054                                  	; 09/09/2018
 30055                                  	MOV	word [SS:DSKSTST],0
 30056                                  	MOV	word [SS:DSKSTCNT],1
 30057                                  %else
 30058                                  	; 29/02/2024
 30059 00004FB5 A0[9F03]                	mov	al,[DSKCHRET]
 30060                                  
 30061 00004FB8 3C03                    	cmp	al,"C"-"@" ; cmp al,3
 30062 00004FBA 75F2                    	jnz	short RET36
 30063                                  
 30064 00004FBC C606[9403]04            	mov	byte [DSKSTCOM],DEVRD
 30065 00004FC1 C606[9203]16            	mov	byte [DSKSTCALL],DRDWRHL
 30066 00004FC6 880E[9F03]              	mov	[DSKCHRET],cl
 30067 00004FCA C706[9503]0000          	mov	word [DSKSTST],0
 30068 00004FD0 C706[A403]0100          	mov	word [DSKSTCNT],1
 30069 00004FD6 1F                      	pop	ds ; *
 30070                                  %endif
 30071                                  	
 30072 00004FD7 E861F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 30073                                  
 30074 00004FDA 5E                              POP     SI
 30075 00004FDB 1F                              POP     DS
 30076 00004FDC 5B                              POP     BX                      ; Clean stack
 30077 00004FDD 07                              POP     ES
 30078 00004FDE 59                              POP     CX
 30079 00004FDF E9CF00                          JMP	CNTCHAND ; 10/08/2018
 30080                                  
 30081                                  	; 05/05/2019
 30082                                  NOSTOP:
 30083                                  	; MSDOS 6.0
 30084 00004FE2 3C10                    	CMP	AL,"P"-"@"
 30085 00004FE4 7509                    	JNZ	short check_next
 30086                                  				    	; SS override
 30087 00004FE6 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 30088 00004FEC 7405                    	JZ	short INCHKJ		; no
 30089                                  check_end:	; 24/09/2023
 30090 00004FEE C3                      	retn
 30091                                  check_next:
 30092                                  	;IF	NOT TOGLPRN
 30093                                  	;CMP	AL,"N"-"@"
 30094                                  	;JZ	short INCHKJ
 30095                                  	;ENDIF
 30096                                  
 30097 00004FEF 3C03                    	CMP	AL,"C"-"@"
 30098                                  	; 24/09/2023
 30099                                  	;JZ	short INCHKJ
 30100                                  ;check_end:
 30101                                  	;retn
 30102 00004FF1 75FB                    	jnz	short check_end
 30103                                  
 30104                                  	; 24/09/2023
 30105                                  	; 08/09/2018
 30106                                  INCHKJ:	; 10/08/2018
 30107 00004FF3 E9A500                  	jmp	INCHK
 30108                                  
 30109                                  	; MSDOS 3.3
 30110                                          ;CMP	AL,"P"-"@"  ; cmp al,16
 30111                                          ;JZ	short INCHKJ
 30112                                  
 30113                                  	; 15/04/2018
 30114                                          ;;IF	NOT TOGLPRN
 30115                                          ;CMP	AL,"N"-"@"
 30116                                          ;JZ	SHORT INCHKJ
 30117                                          ;;ENDIF
 30118                                  	
 30119                                  	;CMP	AL,"C"-"@"  ; cmp al,3
 30120                                          ;JZ	short INCHKJ
 30121                                  	;RETN
 30122                                  
 30123                                  ;	; 08/09/2018
 30124                                  ;INCHKJ:; 10/08/2018
 30125                                  ;	JMP	INCHK
 30126                                  
 30127                                  ;----------------------------------------------------------------------------
 30128                                  ;
 30129                                  ; Procedure Name : SpoolInt
 30130                                  ;
 30131                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 30132                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 30133                                  ; the middle of an INT 24.
 30134                                  ;
 30135                                  ;----------------------------------------------------------------------------
 30136                                  
 30137                                  SPOOLINT:
 30138 00004FF6 9C                      	PUSHF
 30139                                  	; 15/03/2018
 30140 00004FF7 36803E[5803]00          	CMP	BYTE [SS:IDLEINT],0	; SS override
 30141 00004FFD 7423                    	JZ	SHORT POPFRET
 30142 00004FFF 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0
 30143 00005005 751B                    	JNZ	SHORT POPFRET		; No spool ints in error mode
 30144                                  
 30145                                  	; 30/07/2018
 30146                                  
 30147                                  	; Note that we are going to allow an external program to issue system 
 30148                                  	; calls at this time. We MUST preserve IdleInt across this.
 30149                                  
 30150 00005007 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 30151                                  
 30152                                  	; 05/05/2019 - Retro DOS v4.0
 30153                                   
 30154                                  	; MSDOS 6.0
 30155 0000500C 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30156 00005012 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 30157 00005014 CD28                    	INT	int_spooler  ; int 28h	; N: Execute user int 28 handler
 30158 00005016 EB05                    	jmp	short spool_ret_addr
 30159                                  
 30160                                  do_low_int28:
 30161                                  	;call	far [ss:LowInt28Addr]
 30162 00005018 2EFF1E[714F]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 30163                                  
 30164                                  spool_ret_addr:
 30165                                  	;INT	int_spooler		; INT 28h
 30166                                  
 30167 0000501D 368F06[5803]            	POP	WORD [SS:IDLEINT]
 30168                                  POPFRET:
 30169 00005022 9D                      	POPF
 30170                                  _RET18:  
 30171 00005023 C3                      	RETN
 30172                                  
 30173                                  ; 05/05/2019 - Retro DOS v4.0
 30174                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 30175                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30176                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 30177                                  
 30178                                  ;----------------------------------------------------------------------------
 30179                                  ;
 30180                                  ; Procedure Name : STATCHK
 30181                                  ;
 30182                                  ;----------------------------------------------------------------------------
 30183                                  
 30184                                  STATCHK:
 30185 00005024 E84EFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 30186                                                                          ; input redirection
 30187 00005027 53                              PUSH    BX
 30188 00005028 31DB                            XOR     BX,BX
 30189 0000502A E846E5                          CALL	GET_IO_SFT
 30190 0000502D 5B                              POP     BX
 30191 0000502E 72F3                            JC      SHORT _RET18
 30192                                  
 30193 00005030 B401                            MOV     AH,1
 30194 00005032 E838F3                          CALL	IOFUNC
 30195 00005035 74BF                            JZ      SHORT SPOOLINT
 30196 00005037 3C13                            CMP     AL,'S'-'@'
 30197 00005039 75A7                            JNZ     SHORT NOSTOP
 30198                                  
 30199                                  	; 05/05/2019
 30200                                  	; MSDOS 6.0			; SS override
 30201 0000503B 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 30202 00005041 75AB                    	JNZ	short check_end		; AN000; yes
 30203                                  
 30204 00005043 30E4                            XOR     AH,AH
 30205 00005045 E825F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 30206 00005048 EB4A                            JMP     SHORT PAUSOSTRT
 30207                                  PRINTOFF:
 30208                                  PRINTON:
 30209 0000504A 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 30210                                  
 30211                                  	; 30/07/2018 - Retro DOS v3.0
 30212 0000504F 53                      	PUSH	BX
 30213 00005050 BB0400                  	MOV	BX,4
 30214 00005053 E81DE5                  	call	GET_IO_SFT
 30215 00005056 5B                      	POP	BX
 30216 00005057 72CA                    	jc	short _RET18
 30217 00005059 06                      	PUSH	ES
 30218 0000505A 57                      	PUSH	DI
 30219 0000505B 1E                      	PUSH	DS
 30220 0000505C 07                      	POP	ES
 30221 0000505D 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 30222                                  	;test	word [es:di+5],800h
 30223                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 30224                                  	; 05/05/2019
 30225 0000505F 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 30226 00005064 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 30227                                  
 30228                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 30229                                  					; See if allowed
 30230 00005066 50                      	push	ax
 30231 00005067 B82611                  	mov	ax,1126h
 30232 0000506A CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30233                                  			; Return: CF set on error, AX = error code
 30234                                  			; STACK unchanged
 30235 0000506C 58                      	pop	ax
 30236                                  
 30237 0000506D 730F                    	JNC	short NORM_PR 		; Echo is OK
 30238                                  
 30239                                  					; SS override
 30240 0000506F 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 30241                                  
 30242                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 30243                                  
 30244 00005075 50                      	push    ax
 30245 00005076 B82411                  	mov     ax,1124h
 30246 00005079 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30247                                  			; ES:DI -> SFT, SS = DOS CS
 30248 0000507B 58                      	pop     ax
 30249                                  
 30250 0000507C EB10                    	JMP	SHORT RETP6
 30251                                  NORM_PR:
 30252 0000507E 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 30253 00005084 7505                    	JNZ	short PRNOPN
 30254 00005086 E839F4                  	call	DEV_CLOSE_SFT
 30255 00005089 EB03                    	JMP	SHORT RETP6
 30256                                  PRNOPN:
 30257 0000508B E82CF4                  	call	DEV_OPEN_SFT
 30258                                  RETP6:
 30259 0000508E 5F                      	POP	DI
 30260 0000508F 07                      	POP	ES
 30261                                  STATCHK_RETN:
 30262 00005090 C3                              RETN
 30263                                  PAUSOLP:
 30264 00005091 E862FF                          CALL    SPOOLINT
 30265                                  PAUSOSTRT:
 30266 00005094 B401                            MOV     AH,1
 30267 00005096 E8D4F2                          CALL	IOFUNC
 30268 00005099 74F6                            JZ      SHORT PAUSOLP
 30269                                  INCHK:
 30270 0000509B 53                              PUSH    BX
 30271 0000509C 31DB                            XOR     BX,BX
 30272 0000509E E8D2E4                          CALL	GET_IO_SFT
 30273 000050A1 5B                              POP     BX
 30274 000050A2 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 30275 000050A4 30E4                            XOR     AH,AH
 30276 000050A6 E8C4F2                          CALL	IOFUNC
 30277                                  	; 30/07/2018
 30278                                  	; MSDOS 3.3
 30279                                          ;CMP	AL,'P'-'@' ;cmp al,16
 30280                                          ;JNZ	SHORT NOPRINT
 30281                                  
 30282                                  	;cmp	byte [SS:SCAN_FLAG],0
 30283                                  	;JZ	SHORT PRINTON	
 30284                                  	;mov	byte [ss:SCAN_FLAG],0
 30285                                  
 30286                                  	; 05/05/2019
 30287                                  	; MSDOS 6.0
 30288 000050A9 3C10                    	CMP	AL,"P"-"@"
 30289                                  	;;;;  7/14/86	ALT_Q key fix
 30290 000050AB 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 30291                                  ;NOPRINT:	
 30292                                  	;IF	NOT TOGLPRN
 30293                                  	;CMP	AL,"N"-"@"
 30294                                  	;JZ	short PRINTOFF
 30295                                  	;ENDIF
 30296 000050AD 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 30297                                  	;retnz
 30298 000050AF 75DF                    	jnz	short STATCHK_RETN
 30299                                  
 30300                                  	; !! NOTE: FALL THROUGH !!
 30301                                  
 30302                                  ;---------------------------------------------------------------------------
 30303                                  ;
 30304                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 30305                                  ;
 30306                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 30307                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 30308                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 30309                                  ; processing to continue; 2) the original interrupt return address to the code
 30310                                  ; that performed the function call in the first place. If the user CTRL-C
 30311                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 30312                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 30313                                  ; is simulated.
 30314                                  ;
 30315                                  ;---------------------------------------------------------------------------
 30316                                  
 30317                                  CNTCHAND:
 30318                                  	; MSDOS 6.0			; SS override
 30319                                  					; AN002; from RAWOUT
 30320                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 30321                                  	;JNZ	short around_deadlock 	; AN002;
 30322                                  
 30323                                  	; 05/05/2019 - Retro DOS v4.0
 30324                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 30325 000050B1 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 30326 000050B7 7508                    	JNZ	short around_deadlock 	; AN002;
 30327                                  
 30328 000050B9 B003                            MOV     AL,3			; Display "^C"
 30329 000050BB E80BC6                          CALL	BUFOUT
 30330 000050BE E8A6C4                          CALL	CRLF
 30331                                  around_deadlock:
 30332 000050C1 16                              PUSH    SS
 30333 000050C2 1F                              POP     DS
 30334 000050C3 803E[5703]00                    CMP     BYTE [CONSWAP],0
 30335 000050C8 7403                            JZ      SHORT NOSWAP
 30336 000050CA E83AE1                          CALL	SWAPBACK
 30337                                  NOSWAP:
 30338 000050CD FA                      	CLI				; Prepare to play with stack
 30339 000050CE 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 30340 000050D2 8B26[8405]              	MOV	SP,[USER_SP]
 30341 000050D6 E872B3                          CALL	restore_world       ; User registers now restored
 30342                                  
 30343                                  	; 30/07/2018 - Retro DOS v3.0 
 30344                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 30345                                          ; 14/03/2018 - Retro DOS v2.0
 30346                                  	;MOV	BYTE [CS:INDOS],0	
 30347                                          ;MOV	BYTE [CS:ERRORMODE],0
 30348                                          ;MOV	[CS:ConC_Spsave],SP
 30349                                  	;clc	;30/07/2018
 30350                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 30351                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 30352                                  			; Return: return via RETF 2 with CF set
 30353                                  			; DOS will abort program with errorlevel 0
 30354                                  			; else
 30355                                  			; interrupted DOS call continues
 30356                                  
 30357                                  	; 05/05/2019 - Retro DOS v4.0
 30358                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 30359                                  
 30360                                  	; CS was used to address these variables. We have to use DOSDATA
 30361                                  	
 30362 000050D9 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 30363                                  			; (pop es, after 'call restore_world')	
 30364 000050DA 1E                      	push	ds
 30365                                  	;getdseg <ds>			; ds -> dosdata
 30366 000050DB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30367 000050E0 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 30368 000050E5 C606[2003]00            	mov	byte [ERRORMODE],0
 30369 000050EA 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 30370                                  	; User SP has changed because of push. Adjust for it
 30371 000050EE 8306[3203]02            	add	word [ConC_Spsave],2
 30372                                  
 30373 000050F3 803E[1112]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 30374 000050F8 1F                       	pop	ds	; restore ds
 30375 000050F9 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 30376 000050FB F8                      	CLC				
 30377 000050FC CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 30378 000050FE EB06                    	jmp	short ctrlc_ret_addr
 30379                                  
 30380                                  	; 05/05/2019
 30381                                  do_low_int23:
 30382 00005100 F8                      	clc
 30383 00005101 2EFF1E[694F]            	call	far [cs:LowInt23Addr]	
 30384                                  
 30385                                  	; 30/07/2018 
 30386                                  
 30387                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 30388                                  
 30389                                  ; The user has returned to us. The circumstances we allow are:
 30390                                  ;
 30391                                  ;   IRET	We retry the operation by redispatching the system call
 30392                                  ;   CLC/RETF	POP the stack and retry
 30393                                  ;   ... 	Exit the current process with ^C exit
 30394                                  ;
 30395                                  ; User's may RETURN to us and leave interrupts on. 
 30396                                  ; Turn 'em off just to be sure
 30397                                  
 30398                                  ctrlc_ret_addr: ; 05/05/2019
 30399                                  
 30400 00005106 FA                      	CLI
 30401                                  
 30402                                  	; MSDOS 3.3 
 30403                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 30404                                  	;PUSHF				; and the flags (maybe new call)
 30405                                  	;POP	AX
 30406                                  
 30407                                  	; 05/05/2019
 30408                                  	; MSDOS 6.0
 30409                                  
 30410                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 30411                                  
 30412 00005107 50                      	push	ax
 30413 00005108 8CD8                    	mov	ax,ds
 30414                                  	;getdseg <ds>			; ds -> dosdata
 30415 0000510A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30416 0000510F A3[0A0D]                	mov	[TEMPSEG],ax
 30417 00005112 58                      	pop	ax
 30418 00005113 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 30419 00005116 9C                      	pushf				; and the flags (maybe new call)
 30420 00005117 58                      	pop	ax
 30421                                  
 30422                                  ; See if the input stack is identical to the output stack
 30423                                  
 30424                                  	; MSDOS 3.3
 30425                                  	;CMP	SP,[CS:ConC_Spsave]
 30426                                  	;JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30427                                  
 30428                                  	; MSDOS 6.0
 30429 00005118 3B26[3203]              	CMP	SP,[ConC_Spsave]
 30430 0000511C 750A                    	JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30431                                  
 30432                                  ; Repeat the operation by redispatching the system call.
 30433                                  
 30434                                  ctrlc_repeat:
 30435                                  	; MSDOS 3.3
 30436                                  	;MOV	AX,[CS:USER_IN_AX]
 30437                                  	; 05/05/2019
 30438                                  	; MSDOS 6.0
 30439 0000511E A1[3A03]                	mov	ax,[USER_IN_AX]
 30440 00005121 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 30441                                  	; MSDOS 3.3 & MSDOS 6.0 
 30442                                  	;transfer COMMAND
 30443                                  COMMANDJ:
 30444 00005125 E9E0B1                  	JMP	COMMAND
 30445                                  
 30446                                  ; The current SP is NOT the same as the input SP. Presume that he 
 30447                                  ; RETF'd leaving some flags on the stack and examine the input
 30448                                  
 30449                                  ctrlc_try_new:
 30450                                  	; 29/02/2024
 30451                                  	;ADD	SP,2			; pop those flags
 30452                                  	;
 30453                                  	;;test	ax,1
 30454                                  	;TEST	AX,f_Carry		; did he return with carry?
 30455 00005128 A801                    	test	al,f_Carry ; test al,1
 30456                                  	;
 30457                                  	; 29/02/2024
 30458 0000512A 58                      	pop	ax  ; (PCDOS 7.1 IBMDOS.COM)
 30459                                  	;
 30460 0000512B 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 30461                                  
 30462                                  	; MSDOS 6.0
 30463 0000512D 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 30464                                  
 30465                                  	; Well...  time to abort the user.  
 30466                                  	; Signal a ^C exit and use the EXIT system call..
 30467                                  
 30468                                  ctrlc_abort:
 30469                                  	; MSDOS 3.3
 30470                                          ;;MOV	AX,(EXIT SHL 8) + 0
 30471                                          ;MOV	AX,(EXIT*256) + 0 ; 4C00h
 30472                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 30473                                          ;transfer COMMAND	    ; give up by faking $EXIT
 30474                                  	;;JMP	SHORT COMMANDJ
 30475                                  	;JMP	COMMAND
 30476                                  
 30477                                  	; 05/05/2019 - Retro DOS v4.0
 30478                                  	; MSDOS 6.0
 30479 00005131 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 30480 00005134 1E                      	push	ds
 30481                                  	;getdseg <ds>			; ds -> dosdata
 30482 00005135 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 30483 0000513A C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 30484 0000513F 1F                      	pop	ds
 30485                                  	;transfer COMMAND		; give up by faking $EXIT
 30486 00005140 EBE3                    	JMP	SHORT COMMANDJ
 30487                                  	;JMP	COMMAND
 30488                                  
 30489                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 30490                                  ;----------------------------------------------------------------------------
 30491                                  ;
 30492                                  ; Procedure Name : DIVOV
 30493                                  ;
 30494                                  ; Default handler for division overflow trap
 30495                                  ;
 30496                                  ;----------------------------------------------------------------------------
 30497                                  
 30498                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30499                                  DIVOV: 
 30500                                  	; 05/05/2019 - Retro DOS v4.0
 30501                                  	; 30/07/2018
 30502                                  	; 07/07/2018 - Retro DOS v3.0
 30503 00005142 BE[9709]                	mov	si,DIVMES
 30504 00005145 2E8B1E[AA09]            	mov	bx,[cs:DivMesLen]
 30505                                  	;mov	ax,cs
 30506                                  	;mov	ss,ax
 30507                                  	; 05/05/2019
 30508                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30509 0000514A 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30510 0000514F BC[A007]                	mov     sp,AUXSTACK
 30511                                  	;call	RealDivOv ; MSDOS 3.3
 30512 00005152 E80200                  	call	_OUTMES ; MSDOS 6.0
 30513 00005155 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30514                                  
 30515                                  ; 30/07/2018
 30516                                  
 30517                                  ; MSDOS 6.0
 30518                                  ;---------------------------------------------------------------------------
 30519                                  ;
 30520                                  ; Procedure Name : OutMes
 30521                                  ;
 30522                                  ;
 30523                                  ; OutMes: perform message output
 30524                                  ; Inputs:   SS:SI points to message
 30525                                  ;	    BX has message length
 30526                                  ; Outputs:  message to BCON
 30527                                  ;
 30528                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30529                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30530                                  ;NB. This procedure is called only from DIVOV. -SR
 30531                                  ;
 30532                                  ;---------------------------------------------------------------------------
 30533                                  
 30534                                  ;MSDOS 3.3
 30535                                  ;---------------------------------------------------------------------------
 30536                                  ; RealDivOv: perform actual divide overflow stuff.
 30537                                  ; Inputs:   none
 30538                                  ; Outputs:  message to BCON
 30539                                  ;---------------------------------------------------------------------------
 30540                                  
 30541                                  	; 05/05/2019 - Retro DOS v4.0
 30542                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30543                                  
 30544                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30545                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30546                                  
 30547                                  ;---------------------------------------------------------------------------
 30548                                  ;
 30549                                  ; Procedure Name : OutMes
 30550                                  ;
 30551                                  ; OutMes: perform message output
 30552                                  ; Inputs:   SS:SI points to message
 30553                                  ;	    BX has message length
 30554                                  ; Outputs:  message to BCON
 30555                                  ;
 30556                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30557                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30558                                  ;NB. This procedure is called only from DIVOV. -SR
 30559                                  ;
 30560                                  ;---------------------------------------------------------------------------
 30561                                  
 30562                                  	; 30/07/2018
 30563                                  	; MSDOS 6.0
 30564                                  _OUTMES:
 30565                                  	; MSDOS 3.3
 30566                                  ;RealDivOv:
 30567                                  	; 07/07/2018 - Retro DOS v3.0
 30568                                          ;Context ES
 30569 00005157 16                      	push	ss ; 05/05/2019
 30570                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30571 00005158 07                      	POP	ES
 30572                                          ;Context DS
 30573 00005159 16                      	push	ss ; 05/05/2019	
 30574                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30575 0000515A 1F                      	POP	DS
 30576 0000515B C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30577 00005160 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30578 00005165 C706[9503]0000                  MOV     WORD [DSKSTST],0
 30579                                  	; BX = [DivMesLen] = 19
 30580 0000516B 891E[A403]                      MOV     [DSKSTCNT],BX
 30581 0000516F BB[9203]                        MOV     BX,DSKSTCALL
 30582 00005172 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30583                                  	; 08/09/2018
 30584                                  	;mov	[DEVIOBUF_PTR],si
 30585                                  	; MSDOS 6.0
 30586                                  					; CS is used for string, fill in 
 30587                                  					; segment address 
 30588                                  	;mov	[DOSSEG_INIT],cs ; 29/02/2024
 30589 00005176 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30590                                  
 30591 0000517A C536[3200]                      LDS     SI,[BCON]
 30592 0000517E E8BAF3                          CALL	DEVIOCALL2
 30593                                  
 30594                                  	;; 14/03/2018
 30595                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30596                                  	;; 08/09/2018
 30597                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30598                                          ;MOV	WORD [CS:DSKSTCNT],1
 30599                                          
 30600                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30601                                  
 30602                                  	; ES still points to DOSDATA. ES is
 30603                                  					; not destroyed by deviocall2. So use
 30604                                  					; ES override.
 30605                                  
 30606 00005181 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30607 00005188 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30608                                  
 30609 0000518F C3                      	RETN
 30610                                  
 30611                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30612                                  ;---------------------------------------------------------------------------
 30613                                  ;
 30614                                  ; Procedure Name : CHARHARD
 30615                                  ;
 30616                                  ;
 30617                                  ; Character device error handler
 30618                                  ; Same function as HARDERR
 30619                                  ;
 30620                                  ;---------------------------------------------------------------------------
 30621                                  
 30622                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30623                                  CHARHARD:
 30624                                  	; 05/05/2019 - Retro DOS v4.0
 30625                                  	; 30/07/2018
 30626                                  	; 08/07/2018 - Retro DOS v3.0
 30627                                  
 30628                                  	; MSDOS 6.0
 30629                                  		   			; M024 - start
 30630 00005190 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30631                                  	;jne	short @f		; Y: allow fail
 30632 00005196 750B                    	jne	short chard1
 30633                                  
 30634 00005198 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30635                                  
 30636 0000519B 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30637 000051A1 7503                    	jnz	short ctrlp		; Y: 
 30638                                  ;@@:
 30639                                  chard1:					; M024 - end
 30640                                  	; MSDOS 6.0 & MSDOS 3.3
 30641                                  
 30642                                  ; Character device error handler
 30643                                  ; Same function as HARDERR
 30644                                  
 30645                                  	;or	ah,38h
 30646 000051A3 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30647                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30648 000051A6 368826[4B03]            	mov	[SS:ALLOWED],ah
 30649                                  
 30650                                  	; 15/03/2018
 30651 000051AB 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30652 000051B0 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30653 000051B5 56                              PUSH    SI
 30654                                  	;and	di,0FFh
 30655 000051B6 81E7FF00                        AND     DI,STECODE
 30656 000051BA 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30657 000051BC E86400                          CALL    FATALC
 30658 000051BF 5E                              POP     SI
 30659                                  	;return
 30660 000051C0 C3                              RETN
 30661                                  
 30662                                  ;---------------------------------------------------------------------------
 30663                                  ;
 30664                                  ; Procedure Name : HardErr
 30665                                  ;
 30666                                  ; Hard disk error handler. Entry conditions:
 30667                                  ;	DS:BX = Original disk transfer address
 30668                                  ;	DX = Original logical sector number
 30669                                  ;	CX = Number of sectors to go (first one gave the error)
 30670                                  ;	AX = Hardware error code
 30671                                  ;	DI = Original sector transfer count	
 30672                                  ;	ES:BP = Base of drive parameters
 30673                                  ;	[READOP] = 0 for read, 1 for write
 30674                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30675                                  ; Output:
 30676                                  ;	[FAILERR] will be set if user responded FAIL
 30677                                  ;
 30678                                  ;--------------------------------------------------------------------------
 30679                                  
 30680                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30681                                  HARDERR:
 30682                                  	; 05/05/2019 - Retro DOS v4.0
 30683                                  	; 30/07/2018
 30684                                  	; 08/07/2018 - Retro DOS v3.0
 30685 000051C1 97                      	XCHG    AX,DI			; Error code in DI, count in AX
 30686                                  	;and	di,0FFh
 30687 000051C2 81E7FF00                	AND	DI,STECODE		; And off status bits
 30688                                  	;CMP	DI,WRECODE		; Write Protect Error?
 30689                                  	;cmp	di,0
 30690 000051C6 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30691 000051C9 750A                    	JNZ	short NOSETWRPERR
 30692 000051CB 50                      	PUSH    AX
 30693                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30694                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30695                                  	;;MOV	AL,[ES:BP+0]
 30696                                  	; 15/12/2022
 30697 000051CC 268A4600                	mov	al,[ES:BP]
 30698                                  		; 15/03/2018
 30699 000051D0 36A2[2203]              	MOV	[SS:WPERR],AL		; Flag drive with WP error
 30700 000051D4 58                      	POP	AX
 30701                                  NOSETWRPERR:
 30702 000051D5 29C8                    	SUB	AX,CX		  ; Number of sectors successfully transferred
 30703 000051D7 01C2                    	ADD	DX,AX		  ; First sector number to retry
 30704 000051D9 52                      	PUSH    DX
 30705                                  	; 08/07/2018
 30706                                  	;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30707 000051DA 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30708 000051DE 5A                      	POP	DX
 30709 000051DF 01C3                    	ADD	BX,AX			; First address for retry
 30710 000051E1 30E4                    	XOR	AH,AH			; Flag disk section in error
 30711                                  	;CMP	DX,[ES:BP+6] 		; In reserved area?
 30712 000051E3 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30713 000051E7 721A                    	JB	SHORT ERRINT
 30714 000051E9 FEC4                    	INC	AH			; Flag for FAT
 30715                                  	;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30716                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019
 30717 000051EB 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30718 000051EF 7308                    	JAE	short TESTDIR		; No
 30719                                  		; Err in FAT must force recomp of freespace
 30720                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30721                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30722 000051F1 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30723 000051F7 EB0A                    	JMP	SHORT ERRINT
 30724                                  TESTDIR:
 30725 000051F9 FEC4                    	INC	AH
 30726                                  	;CMP	DX,[ES:BP+0BH]		; In directory?
 30727 000051FB 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR]
 30728 000051FF 7202                    	JB	SHORT ERRINT
 30729 00005201 FEC4                    	INC	AH			; Must be in data area
 30730                                  ERRINT:
 30731 00005203 D0E4                    	SHL	AH,1			; Make room for read/write bit
 30732 00005205 360A26[7505]            	OR	AH,[SS:READOP] ; 15/03/2018
 30733                                  
 30734                                  	; 15/08/2018
 30735                                  					; SS override for allowed and EXITHOLD
 30736 0000520A 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30737                                  
 30738                                  	;entry   FATAL
 30739                                  FATAL:
 30740                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30741                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30742                                  	;;MOV	AL,[ES:BP+0]		; Get drive number
 30743                                  	; 15/12/2022
 30744 0000520F 268A4600                	MOV	AL,[ES:BP]
 30745                                  
 30746                                  	;entry   FATAL1
 30747                                  FATAL1:  
 30748                                  	; 15/03/2018	
 30749 00005213 368C06[8205]            	MOV	[SS:EXITHOLD+2],ES
 30750 00005218 36892E[8005]            	MOV	[SS:EXITHOLD],BP	; The only things we preserve
 30751                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30752                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30753 0000521D 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30754 00005221 8CC5                    	MOV	BP,ES		  ; BP:SI points to the device involved
 30755                                  
 30756                                  	; DI has the INT-24-style extended error. We now map the error code
 30757                                  	; for this into the normalized get extended error set by using the
 30758                                  	; ErrMap24 table as a translate table. Note that we translate ONLY
 30759                                  	; the device returned codes and leave all others beyond the look up
 30760                                  	; table alone.
 30761                                  
 30762                                  	; 08/07/2018 - Retro DOS v3.0
 30763                                  FATALC:
 30764 00005223 E89501                  	call	SET_I24_EXTENDED_ERROR
 30765                                  	;cmp	di,0Ch
 30766 00005226 83FF0C                  	CMP	DI,error_I24_gen_failure
 30767 00005229 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30768 0000522B BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30769                                  					;  Only come via GetExtendedError
 30770                                  ;** ----------------------------------------------------------------
 30771                                  ;
 30772                                  ; Entry point used by REDIRector on Network I 24 errors.
 30773                                  ;
 30774                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30775                                  ;
 30776                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30777                                  ;	EXITHOLD set for restore of ES:BP.
 30778                                  ; ------------------------------------------------------------------
 30779                                  	;entry	NET_I24_ENTRY
 30780                                  NET_I24_ENTRY:
 30781                                  GOT_RIGHT_CODE:
 30782 0000522E 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30783 00005234 7404                    	JZ	SHORT NoSetFail
 30784 00005236 B003                    	MOV	AL,3
 30785 00005238 EB6C                    	JMP	short FailRet
 30786                                  NoSetFail:
 30787 0000523A 368926[8805]            	MOV	[SS:CONTSTK],SP		; SS override
 30788 0000523F 16                      	PUSH	SS
 30789 00005240 07                      	POP	ES
 30790                                      
 30791                                  	; Wango!!! We may need to free some user state info... In 
 30792                                  	; particular, we may have locked down a JFN for a user and he may
 30793                                  	; NEVER return to us. Thus,we need to free it here and then
 30794                                  	; reallocate it when we come back.
 30795                                  
 30796 00005241 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30797 00005247 740C                    	JZ	short _NoFree
 30798 00005249 1E                      	push	ds
 30799 0000524A 56                      	push	si
 30800 0000524B 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30801 00005250 C604FF                  	MOV	BYTE [SI],0FFH
 30802 00005253 5E                      	pop	si
 30803 00005254 1F                      	pop	ds
 30804                                  
 30805                                  _NoFree:
 30806 00005255 FA                      	CLI
 30807                                  					; Prepare to play with stack
 30808 00005256 36FE06[2003]            	INC	BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30809 0000525B 36FE0E[2103]            	DEC	BYTE [SS:INDOS]		; INT 24 handler might not return
 30810                                  
 30811                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30812                                  
 30813                                  	;; Extended Open hooks
 30814                                  					; AN000;IFS.I24 error disabled
 30815                                  	;test	byte [ss:EXTOPEN_ON],2
 30816 00005260 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF
 30817 00005266 7404                    	JZ	short i24yes		; AN000;IFS.no
 30818                                  faili24:				; AN000;
 30819 00005268 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30820 0000526A EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30821                                  i24yes: 				; AN000;
 30822                                  	;; Extended Open hooks
 30823                                  
 30824 0000526C 368E16[8605]            	MOV	SS,[SS:USER_SS]
 30825 00005271 268B26[8405]            	MOV	SP,[ES:USER_SP]	; User stack pointer restored
 30826                                  
 30827                                  	;;int	24h	
 30828                                  	;IN	int_fatal_abort		; Fatal error interrupt vector,
 30829                                  					; must preserve ES
 30830                                  	; 05/05/2019
 30831 00005276 26803E[1112]00          	cmp	byte [es:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30832 0000527C 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30833 0000527E CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30834                                  					; must preserve ES
 30835 00005280 EB05                    	jmp	short criterr_ret_addr
 30836                                  
 30837                                  do_low_int24:
 30838                                  	; 05/05/2019
 30839                                  	; MSDOS 6.0
 30840 00005282 2EFF1E[6D4F]            	call    far [cs:LowInt24Addr]
 30841                                  criterr_ret_addr:
 30842 00005287 268926[8405]            	MOV	[ES:USER_SP],SP	; restore our stack
 30843 0000528C 268C16[8605]            	MOV	[ES:USER_SS],SS
 30844 00005291 8CC5                    	MOV	BP,ES
 30845 00005293 8ED5                    	MOV	SS,BP
 30846                                  passi24:
 30847 00005295 368B26[8805]            	MOV	SP,[SS:CONTSTK]
 30848 0000529A 36FE06[2103]            	INC	BYTE [SS:INDOS]		; Back in the DOS
 30849 0000529F 36C606[2003]00          	MOV	BYTE [SS:ERRORMODE],0	; Back from INT 24
 30850 000052A5 FB                      	STI
 30851                                  FailRet:
 30852 000052A6 36C42E[8005]            	LES	BP,[SS:EXITHOLD]
 30853                                  	
 30854                                  	; 08/07/2018
 30855                                  
 30856                                  	; Triage the user's reply.
 30857                                  
 30858 000052AB 3C01                    	CMP	AL,1
 30859 000052AD 723D                    	JB	short CheckIgnore	; 0 => ignore
 30860 000052AF 7445                    	JZ	short CheckRetry	; 1 => retry
 30861 000052B1 3C03                    	CMP	AL,3			; 3 => fail
 30862 000052B3 7549                    	JNZ	short DoAbort 		; 2, invalid => abort
 30863                                  
 30864                                  	; The reply was fail. See if we are allowed to fail.
 30865                                  
 30866                                  					; SS override for ALLOWED, EXTOPEN_ON,
 30867                                  					; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30868                                  	;test	byte [ss:ALLOWED],8
 30869 000052B5 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30870 000052BB 7441                    	jz	short DoAbort		; No, do abort
 30871                                  DoFail:
 30872 000052BD B003                    	MOV	AL,3			; just in case...
 30873                                  					; AN000;EO. I24 error disabled
 30874                                  	; 05/05/2019
 30875                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30876 000052BF 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30877 000052C5 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30878                                  	
 30879 000052C7 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30880                                  CleanUp:
 30881 000052CC 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30882 000052D2 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30883                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30884                                  	;jnz	short CleanUp2
 30885                                  	;retn
 30886                                  	; 17/12/2022
 30887 000052D8 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30888                                  CleanUp2:
 30889 000052DA 1E                      	push	ds
 30890 000052DB 56                      	push	si
 30891 000052DC 50                      	push	ax
 30892 000052DD 36A1[AA05]              	MOV	AX,[ss:SFN]
 30893 000052E1 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30894 000052E6 8804                    	MOV	[SI],AL
 30895 000052E8 58                      	pop	ax
 30896 000052E9 5E                      	pop	si
 30897 000052EA 1F                      	pop	ds
 30898                                  Cleanup_retn:
 30899 000052EB C3                      	retn
 30900                                  
 30901                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30902                                  
 30903                                  CheckIgnore:
 30904                                  	;test	byte [ss:ALLOWED],20h
 30905 000052EC 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30906                                  CheckRI:	; 29/02/2024
 30907 000052F2 74C9                    	jz	short DoFail			; No, do fail
 30908 000052F4 EBD6                    	jmp	short CleanUp
 30909                                  
 30910                                  	; The reply was RETRY. See if we are allowed to retry.
 30911                                  
 30912                                  CheckRetry:
 30913                                  	;test	byte [ss:ALLOWED],10h
 30914 000052F6 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30915                                  	;jz	short DoFail			; No, do fail
 30916                                  	;JMP	short CleanUp
 30917                                  	; 29/02/2024 (PCDOS 7.1 IBMDOS.COM)
 30918 000052FC EBF4                    	jmp	short CheckRI
 30919                                  
 30920                                  	; The reply was ABORT.
 30921                                  DoAbort:
 30922 000052FE 16                      	push	ss
 30923 000052FF 1F                      	pop	ds
 30924                                  
 30925 00005300 803E[5703]00            	CMP	byte [CONSWAP],0
 30926 00005305 7403                    	JZ	short NOSWAP2
 30927 00005307 E8FDDE                  	call	SWAPBACK
 30928                                  NOSWAP2:
 30929                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30930                                  	; turn this abort into a fail.
 30931                                  
 30932                                  	;test	[fAborting],0FFh
 30933                                  	;jnz	short DoFail
 30934                                  
 30935 0000530A 803E[5903]00            	cmp	byte [fAborting],0
 30936 0000530F 75AC                    	JNZ	short DoFail
 30937                                  
 30938                                  	; Set return code
 30939                                  
 30940 00005311 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30941 00005316 30C0                    	XOR	AL,AL
 30942                                  
 30943                                  	; we are truly aborting the process. Go restore information from 
 30944                                  	; the PDB as necessary.
 30945                                  
 30946 00005318 E9700D                  	jmp	exit_inner
 30947                                  
 30948                                  ;** --------------------------------------------------------------------------
 30949                                  ;
 30950                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30951                                  ; different, then an old-style return is performed. If they are the same,
 30952                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30953                                  ; the source of the terminate addresses.
 30954                                  ;
 30955                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30956                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30957                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30958                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30959                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30960                                  ; operation. In essence, we dis-allow the abort response.
 30961                                  ;
 30962                                  ; output:   none.
 30963                                  ; ----------------------------------------------------------------------------
 30964                                  
 30965                                  	;entry	reset_environment
 30966                                  	
 30967                                  reset_environment:
 30968                                  	; 30/07/2018 - Retro DOS v3.0
 30969                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30970                                  
 30971                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30972                                  
 30973 0000531B 1E                      	PUSH	DS			; save PDB of process
 30974                                  
 30975                                  	; There are no critical sections in force. Although we may enter
 30976                                  	; here with critical sections locked down, they are no longer 
 30977                                  	; relevant. We may safely free all allocated resources.
 30978                                  
 30979 0000531C B482                    	MOV	AH,82h
 30980                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30981                                  	;int	2Ah 	
 30982 0000531E CD2A                    	INT	int_IBM
 30983                                  
 30984                                  					; SS override
 30985 00005320 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30986                                  
 30987                                  					; DOS 4.00 doesn't need it
 30988                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30989                                  					; Allow REDIR to clear some stuff
 30990                                  					; On process exit.
 30991 00005326 B82211                  	mov	ax, 1122h
 30992 00005329 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30993                                  			; SS = DOS CS
 30994                                  	;mov	al,22h	
 30995 0000532B B022                    	MOV	AL,int_terminate
 30996 0000532D E842BB                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30997                                  
 30998 00005330 59                      	POP	CX			; get ThisPDB
 30999 00005331 06                      	push	es
 31000 00005332 53                      	push	bx			; save return address
 31001                                  
 31002 00005333 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 31003 00005338 8EDB                    	MOV	DS,BX
 31004 0000533A A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 31005                                  
 31006                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 31007                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper
 31008                                  	; is not Exit_keep_process
 31009                                  	
 31010 0000533D 39D8                    	CMP	AX,BX
 31011 0000533F 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 31012 00005341 39CB                    	CMP	BX,CX
 31013 00005343 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 31014 00005345 50                      	PUSH	AX			; save parent
 31015                                  
 31016                                  					; SS override
 31017                                  	;cmp	byte [SS:EXIT_TYPE],3
 31018 00005346 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 31019 0000534C 7406                    	JZ	short reset_to_parent 	; keeping this process
 31020                                  
 31021                                  	; We are truly removing a process. Free all allocation blocks
 31022                                  	; belonging to this PDB
 31023                                  
 31024                                  	;invoke	arena_free_process
 31025 0000534E E8720D                  	call	arena_free_process
 31026                                  
 31027                                  	; Kill off remainder of this process. Close file handles and signal
 31028                                  	; to relevant network folks that this process is dead. Remember that
 31029                                  	; CurrentPDB is STILL the current process!
 31030                                  
 31031                                  	;invoke	DOS_ABORT
 31032 00005351 E8D0DA                  	call	DOS_ABORT
 31033                                  
 31034                                  reset_to_parent:
 31035                                  					; SS override
 31036 00005354 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 31037                                  
 31038                                  reset_return:				; come here for normal return
 31039                                  	;Context DS			; DS is used to refer to DOSDATA
 31040 00005359 16                      	push	ss
 31041 0000535A 1F                      	pop	ds	
 31042                                  
 31043 0000535B B0FF                    	MOV	AL,-1
 31044                                  
 31045                                  	; make sure that everything is clean In this case ignore any errors,
 31046                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 31047                                  
 31048                                  	;EnterCrit critDisk
 31049 0000535D E882BF                  	call	ECritDisk
 31050                                  	;invoke	FLUSHBUF
 31051 00005360 E89F05                  	call	FLUSHBUF
 31052                                  	;LeaveCrit critDisk
 31053 00005363 E897BF                  	call	LCritDisk
 31054                                  
 31055                                  	; Decrement open ref. count if we had done a virtual open earlier.
 31056                                  
 31057 00005366 E895F7                  	call	CHECK_VIRT_OPEN
 31058 00005369 FA                      	CLI
 31059 0000536A C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 31060 0000536F C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 31061 00005374 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 31062 00005379 8F06[8005]              	POP	WORD [EXITHOLD]
 31063 0000537D 8F06[8205]              	POP	WORD [EXITHOLD+2]
 31064                                  
 31065                                  	; Snake into multitasking... Get stack from CurrentPDB person
 31066                                  
 31067 00005381 8E1E[3003]              	MOV	DS,[CurrentPDB]
 31068 00005385 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 31069 00005389 8B262E00                	MOV	SP,[PDB.USER_STACK]
 31070                                  
 31071 0000538D E8BBB0                  	call	restore_world
 31072                                  
 31073                                  	; 05/05/2019
 31074 00005390 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 31075                                  
 31076                                  	; MSDOS 6.0
 31077 00005391 50                      	push	ax			; set up ds, but save ds in TEMPSEG
 31078 00005392 8CD8                    	mov	ax,ds			; and not on stack.
 31079                                  	;getdseg <ds>			; ds -> dosdata
 31080 00005394 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 31081 00005399 A3[0A0D]                	mov	[TEMPSEG],ax
 31082 0000539C 58                      	pop	ax
 31083                                  					; set up ds to DOSDATA
 31084                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 31085 0000539D A3[8405]                	mov	[USER_SP],ax
 31086                                  
 31087 000053A0 58                      	POP	AX			; suck off CS:IP of interrupt...
 31088 000053A1 58                      	POP	AX
 31089 000053A2 58                      	POP	AX
 31090                                  
 31091                                  ; M011 : BEGIN
 31092                                  
 31093                                  	; MSDOS 3.3
 31094                                  ;	MOV	AX,0F202h	; STI
 31095                                  
 31096                                  	; MSDOS 6.0
 31097 000053A3 9F                      	LAHF
 31098 000053A4 86E0                    	XCHG	AH,AL
 31099 000053A6 2402                    	AND	AL,2
 31100 000053A8 B4F2                    	MOV	AH,0F2h
 31101                                  
 31102                                  ; M011 : END
 31103                                  
 31104                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31105 000053AA 50                      	PUSH	AX
 31106                                   
 31107                                  	;PUSH	word [CS:EXITHOLD+2]
 31108                                  	;PUSH	word [CS:EXITHOLD]
 31109                                  	
 31110                                  	; MSDOS 6.0
 31111 000053AB FF36[8205]              	PUSH	word [EXITHOLD+2]
 31112 000053AF FF36[8005]              	PUSH	word [EXITHOLD]
 31113                                  
 31114                                  	;MOV	AX,[CS:USER_SP]
 31115                                  
 31116                                  	; MSDOS 6.0
 31117 000053B3 A1[8405]                	MOV	AX,[USER_SP]
 31118 000053B6 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 31119                                  
 31120 000053BA CF                      	IRET			; Long return back to user terminate address
 31121                                  
 31122                                  ;---------------------------------------------------------------------------
 31123                                  ;
 31124                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 31125                                  ;
 31126                                  ; This routine handles extended error codes.
 31127                                  ; Input : DI = error code from device
 31128                                  ; Output: All EXTERR fields are set
 31129                                  ;
 31130                                  ;--------------------------------------------------------------------------
 31131                                  
 31132                                  SET_I24_EXTENDED_ERROR:
 31133 000053BB 50                      	PUSH	AX
 31134                                  					; ErrMap24End is in DOSDATA
 31135 000053BC B8[BB0E]                	MOV	AX,ErrMap24End
 31136 000053BF 2D[AB0E]                	SUB	AX,ErrMap24
 31137                                  					; Change to dosdata to access
 31138                                  					; ErrMap24 and EXTERR -SR
 31139                                  	; 05/05/2019 - Retro DOS v4.0
 31140                                  	
 31141                                  	; MSDOS 6.0
 31142 000053C2 1E                      	push	ds
 31143                                  	;getdseg <ds>			; ds ->dosdata
 31144 000053C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 31145                                  
 31146                                  	; AX is the index of the first unavailable error. Do not translate
 31147                                  	; if greater or equal to AX.
 31148                                  
 31149 000053C8 39C7                    	CMP	DI,AX
 31150 000053CA 89F8                    	MOV	AX,DI
 31151 000053CC 7306                    	JAE	short NoTrans
 31152                                  
 31153                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 31154 000053CE 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 31155 000053D2 30E4                    	XOR	AH,AH
 31156                                  NoTrans:
 31157                                  	;MOV	[CS:EXTERR],AX
 31158 000053D4 A3[2403]                	mov	[EXTERR],AX
 31159 000053D7 1F                      	pop	ds
 31160                                  	;assume	ds:nothing
 31161 000053D8 58                      	POP	AX
 31162                                  
 31163                                  	; Now Extended error is set correctly. Translate it to get correct
 31164                                  	; error locus class and recommended action.
 31165                                  
 31166 000053D9 56                      	PUSH	SI
 31167                                  					; ERR_TABLE_24 is in DOSCODE 
 31168 000053DA BE[5B0E]                	MOV	SI,ERR_TABLE_24
 31169 000053DD E894B2                  	call	CAL_LK			; Set other extended error fields
 31170 000053E0 5E                      	POP	SI
 31171 000053E1 C3                      	retn
 31172                                  
 31173                                  ;============================================================================
 31174                                  ; FAT.ASM, MSDOS 6.0, 1991
 31175                                  ;============================================================================
 31176                                  ; 30/07/2018 - Retro DOS v3.0
 31177                                  ; 20/05/2019 - Retro DOS v4.0
 31178                                  
 31179                                  ;	TITLE	FAT - FAT maintenance routines
 31180                                  ;	NAME	FAT
 31181                                  
 31182                                  ;**	FAT.ASM
 31183                                  ;----------------------------------------------------------------------------
 31184                                  ;	Low level local device routines for performing disk change sequence,
 31185                                  ;	setting cluster validity, and manipulating the FAT
 31186                                  ;
 31187                                  ;	IsEof
 31188                                  ;	UNPACK
 31189                                  ;	PACK
 31190                                  ;	MAPCLUSTER
 31191                                  ;	FATREAD_SFT
 31192                                  ;	FATREAD_CDS
 31193                                  ;	FAT_operation
 31194                                  ;
 31195                                  ;	Revision history:
 31196                                  ;
 31197                                  ;	  AN000  version Jan. 1988
 31198                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 31199                                  ;
 31200                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 31201                                  ;	       from CL0FATENTRY rather than disk.
 31202                                  
 31203                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 31204                                  
 31205                                  ;Break <IsEOF - check the quantity in BX for EOF>
 31206                                  ;----------------------------------------------------------------------------
 31207                                  ;
 31208                                  ; Procedure Name : IsEOF
 31209                                  ;
 31210                                  ; IsEOF - check the fat value in BX for eof.
 31211                                  ;
 31212                                  ;   Inputs:	ES:BP point to DPB
 31213                                  ;		BX has fat value
 31214                                  ;   Outputs:	JAE eof
 31215                                  ;   Registers modified: none
 31216                                  ;
 31217                                  ;---------------------------------------------------------------------------
 31218                                  
 31219                                  IsEOF:
 31220                                  	;cmp	word [es:bp+0Dh],0FF6h
 31221 000053E2 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 31222 000053E8 730B                    	JAE	short EOF16			; yes, check for eof there
 31223                                  
 31224                                  ;J.K. 8/27/86
 31225                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 31226                                  ;of any media that has "F0"(Other) as a MediaByte.
 31227                                  ;Hopely, this does not create any side effect for those who may use any value
 31228                                  ;other than "FF8-FFF" as an EOF for their own file.
 31229                                  
 31230 000053EA 81FBF00F                	cmp	bx,0FF0h
 31231 000053EE 7404                    	je	short IsEOF_other
 31232                                  
 31233 000053F0 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 31234                                  IsEOF_other:
 31235 000053F4 C3                      	retn
 31236                                  EOF16:
 31237 000053F5 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 31238 000053F8 C3                      	retn
 31239                                  
 31240                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 31241                                  
 31242                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 31243                                  ;---------------------------------------------------------------------------
 31244                                  ;
 31245                                  ; Procedur Name : UNPACK
 31246                                  ;
 31247                                  ; Inputs:
 31248                                  ;	BX = Cluster number (may be full 16-bit quantity)
 31249                                  ;	ES:BP = Base of drive parameters
 31250                                  ; Outputs:
 31251                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 31252                                  ;	Zero set means DI=0 (free cluster)
 31253                                  ;	Carry set means error (currently user FAILed to I 24)
 31254                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 31255                                  ;
 31256                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 31257                                  ;
 31258                                  ;----------------------------------------------------------------------------
 31259                                  	
 31260                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31261                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 31262                                  
 31263                                  	; 20/05/2019 - Retro DOS v4.0
 31264                                  UNPACK:
 31265                                  	; MSDOS 6.0			; M014 - Start
 31266 000053F9 09DB                    	or	bx,bx			; Q: are we unpacking cluster 0
 31267 000053FB 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 31268 000053FD 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 31269 00005401 09FF                    	or	di,di 			; return z if di=0
 31270 00005403 C3                      	retn				; done
 31271                                  up_cont:				; M014 - End
 31272                                  	; MSDOS 3.3 & MSDOS 6.0
 31273                                  	;cmp	bx,[es:bp+0Dh]
 31274 00005404 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 31275 00005408 7726                    	JA	short HURTFAT
 31276 0000540A E8D600                  	CALL	MAPCLUSTER
 31277 0000540D 721E                    	jc	short _DoContext
 31278 0000540F 8B3D                    	MOV	DI,[DI]
 31279 00005411 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 31280 00005413 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 31281 00005417 81FEF60F                	CMP	SI,4096-10
 31282 0000541B 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 31283 0000541D 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 31284 0000541F EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 31285                                  High12:
 31286 00005421 D1EF                    	SHR	DI,1
 31287 00005423 D1EF                    	SHR	DI,1
 31288 00005425 D1EF                    	SHR	DI,1
 31289 00005427 D1EF                    	SHR	DI,1
 31290                                  Unpack12:
 31291 00005429 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 31292                                  _DoContext:
 31293 0000542D 16                      	PUSH	SS
 31294 0000542E 1F                      	POP	DS
 31295 0000542F C3                      	retn
 31296                                  HURTFAT:
 31297                                  	;;mov	word [es:bp+1Eh],0FFFFh
 31298                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31299 00005430 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 31300 00005436 50                      	PUSH	AX
 31301 00005437 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 31302                                  
 31303                                  ;hkn; SS override
 31304 00005439 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 31305                                  ;
 31306                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 31307                                  ;
 31308 0000543F BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 31309 00005442 E8CAFD                  	call	FATAL
 31310 00005445 3C03                    	CMP	AL,3
 31311 00005447 F8                      	CLC
 31312 00005448 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 31313 0000544A F9                      	STC				; User said FAIL
 31314                                  OKU_RET:
 31315 0000544B 58                      	POP	AX
 31316                                  hurtfat_retn:
 31317 0000544C C3                      	retn
 31318                                  
 31319                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 31320                                  
 31321                                  ;Break	<PACK -- PACK FAT ENTRIES>
 31322                                  ;----------------------------------------------------------------------------
 31323                                  ;
 31324                                  ; Procedure Name : PACK
 31325                                  ;
 31326                                  ; Inputs:
 31327                                  ;	BX = Cluster number
 31328                                  ;	DX = Data
 31329                                  ;	ES:BP = Pointer to drive DPB
 31330                                  ; Outputs:
 31331                                  ;	The data is stored in the FAT at the given cluster.
 31332                                  ;	SI,DX,DI all destroyed
 31333                                  ;	Carry set means error (currently user FAILed to I 24)
 31334                                  ;	No other registers affected
 31335                                  ;
 31336                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 31337                                  ;
 31338                                  ;---------------------------------------------------------------------------
 31339                                  
 31340                                  	; 02/01/2024
 31341                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31342                                  	; 20/05/2019 - Retro DOS v4.0
 31343                                  PACK:
 31344                                  	; MSDOS 6.0			; M014 - start
 31345 0000544D 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 31346 0000544F 7505                    	jnz	short p_cont		; N: proceed with normal pack
 31347 00005451 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 31348 00005455 C3                      	retn				; done
 31349                                  p_cont:					; M014 - end
 31350                                  	; MSDOS 3.3 & MSDOS 6.0
 31351 00005456 E88A00                  	CALL	MAPCLUSTER
 31352 00005459 72D2                    	JC	short _DoContext
 31353 0000545B 8B35                    	MOV	SI,[DI]
 31354 0000545D 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 31355 0000545F 51                      	PUSH	CX			; move data to upper 12 bits
 31356 00005460 B104                    	MOV	CL,4
 31357 00005462 D3E2                    	SHL	DX,CL
 31358 00005464 59                      	POP	CX
 31359 00005465 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 31360 00005468 EB14                    	JMP	SHORT PACKIN
 31361                                  ALIGNED:
 31362                                  	;cmp	word [es:bp+0Dh],0FF6h
 31363 0000546A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 31364 00005470 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 31365 00005472 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 31366 00005476 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 31367 0000547A EB02                    	JMP	SHORT PACKIN		; MZ go store
 31368                                  Pack16:
 31369 0000547C 31F6                    	XOR	SI,SI			; MZ no original data
 31370                                  PACKIN:
 31371 0000547E 09D6                    	OR	SI,DX
 31372 00005480 8935                    	MOV	[DI],SI
 31373                                  
 31374                                  ;hkn; SS override
 31375 00005482 36C536[E205]            	LDS	SI,[SS:CURBUF]
 31376                                  	; MSDOS 6.0
 31377 00005487 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31378                                  					;LB. if already dirty		  ;AN000;
 31379 0000548B 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 31380                                  	; 10/06/2019
 31381 0000548D E87405                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 31382                                  	
 31383                                  	;or	byte [si+5],40h
 31384 00005490 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31385                                  yesdirty11:				;LB.				;AN000;
 31386                                  ;hkn; SS override
 31387 00005494 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 31388                                  ;hkn; SS is DOSDATA
 31389 0000549A 16                      	push	ss
 31390 0000549B 1F                      	pop	ds
 31391 0000549C 74AE                    	jz	short hurtfat_retn	; Carry clear
 31392 0000549E 50                      	PUSH	AX
 31393 0000549F 53                      	PUSH	BX
 31394 000054A0 51                      	PUSH	CX
 31395 000054A1 A1[8E05]                	MOV	AX,[CLUSSAVE]
 31396 000054A4 8E1E[E405]              	MOV	DS,[CURBUF+2]
 31397                                  	;;add	si,16 ; MSDOS 3.3
 31398                                  	;add	si,20 ; MSDOS 6.0
 31399 000054A8 83C614                  	ADD	SI,BUFINSIZ
 31400 000054AB 8824                    	MOV	[SI],AH
 31401                                  ;hkn; SS is DOSDATA
 31402                                  	;Context DS
 31403 000054AD 16                      	push	ss
 31404 000054AE 1F                      	pop	ds
 31405                                  	
 31406 000054AF 50                      	PUSH	AX
 31407                                  	
 31408                                  	; MSDOS 6.0
 31409 000054B0 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 31410 000054B4 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 31411                                  
 31412                                  	; MSDOS 3.3 & MSDOS 6.0
 31413 000054B8 8B16[9005]              	MOV	DX,[CLUSSEC]
 31414                                  
 31415                                  	;MOV	SI,1	  ; *
 31416                                  	;XOR	AL,AL     ; *
 31417                                  	;call	GETBUFFRB ; *
 31418                                  	; 22/09/2023
 31419 000054BC E83803                  	call	GETBUFFRA ; *
 31420                                  
 31421 000054BF 58                      	POP	AX
 31422 000054C0 721B                    	JC	short POPP_RET
 31423 000054C2 C53E[E205]              	LDS	DI,[CURBUF]
 31424                                  	
 31425                                  	; MSDOS 6.0
 31426 000054C6 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 31427                                  					;LB. if already dirty		  ;AN000;
 31428 000054CA 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 31429 000054CC E83505                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 31430                                  	
 31431                                  	;or	byte [di+5],40h
 31432 000054CF 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 31433                                  yesdirty12:
 31434                                  	;;add	di,16
 31435                                  	;add	di,20 ; MSDOS 6.0
 31436                                  	; 02/01/2024
 31437                                  	;ADD	DI,BUFINSIZ
 31438                                  	;DEC	DI
 31439 000054D3 83C713                  	add	di,BUFINSIZ-1 ; 19
 31440                                  
 31441                                  	;add	di,[es:bp+2]
 31442 000054D6 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 31443 000054DA 8805                    	MOV	[DI],AL
 31444 000054DC F8                      	CLC
 31445                                  POPP_RET:
 31446 000054DD 16                      	PUSH	SS
 31447 000054DE 1F                      	POP	DS
 31448 000054DF 59                      	POP	CX
 31449 000054E0 5B                      	POP	BX
 31450 000054E1 58                      	POP	AX
 31451 000054E2 C3                      	retn
 31452                                  
 31453                                  ; 31/07/2018 - Retro DOS v3.0
 31454                                  
 31455                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 31456                                  ;---------------------------------------------------------------------------
 31457                                  ;
 31458                                  ; Procedure Name : MAPCLUSTER
 31459                                  ;
 31460                                  ; Inputs:
 31461                                  ;	ES:BP Points to DPB
 31462                                  ;	BX Is cluster number
 31463                                  ; Function:
 31464                                  ;	Get a pointer to the cluster
 31465                                  ; Outputs:
 31466                                  ;	DS:DI Points to contents of FAT for given cluster
 31467                                  ;	DS:SI Points to start of buffer
 31468                                  ;	Zero Not set if cluster data is in high 12 bits of word
 31469                                  ;	Zero set if cluster data is in low 12 or 16 bits
 31470                                  ;	Carry set if failed.
 31471                                  ; SI is destroyed.
 31472                                  ;
 31473                                  ;---------------------------------------------------------------------------
 31474                                  
 31475                                  	; 20/05/2019 - Retro DOS v4.0
 31476                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 31477                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31478                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 31479                                  
 31480                                  MAPCLUSTER:
 31481                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 31482 000054E3 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 31483                                  	;SAVE	<AX,BX,CX,DX>
 31484 000054E8 50                      	push	ax
 31485 000054E9 53                      	push	bx
 31486 000054EA 51                      	push	cx
 31487 000054EB 52                      	push	dx
 31488 000054EC 89D8                    	MOV	AX,BX			; AX = BX
 31489 000054EE 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 31490 000054F4 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 31491 000054F6 D1E8                    	SHR	AX,1			; AX = BX/2
 31492                                  Map16:	
 31493                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 31494 000054F8 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 31495                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31496 000054FA 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 31497 000054FC 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 31498 000054FE 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 31499                                  
 31500                                  ;IF FastDiv
 31501                                  ;
 31502                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 31503                                  ; case and apply a really fast algorithm to get the desired results
 31504                                  ;
 31505                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 31506                                  ; Fast method takes 39+20*4=119
 31507                                  ;
 31508                                  ; This saves a bunch.
 31509                                  
 31510 00005502 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31511 00005506 7510                    	jne	short _DoDiv		; 4  for no jump
 31512 00005508 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31513 0000550A 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31514 0000550E 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31515                                  	; MDOS 3.3
 31516                                  	;shr	al,1	
 31517                                  	; MDOS 6.0
 31518 00005510 D1EF                    	shr	di,1			; 2
 31519 00005512 D0D8                    	rcr	al,1			; 2
 31520                                  	; MDOS 3.3 (& MSDOS 6.0)
 31521 00005514 30E4                    	xor	ah,ah			; 3
 31522 00005516 EB04                    	jmp	short DivDone		; 16
 31523                                  _DoDiv:
 31524                                  ;ENDIF
 31525                                  	; MSDOS 3.3
 31526                                  	;xor	dx,dx
 31527                                  	; MSDOS 6.0
 31528 00005518 89FA                    	mov	dx,di			; 2
 31529                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31530 0000551A F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31531                                  ;IF FastDiv
 31532                                  DivDone:
 31533                                  ;ENDIF
 31534                                  	;add	ax,[es:bp+6]
 31535 0000551C 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31536 00005520 49                      	DEC	CX			; CX is sector size - 1
 31537                                  	;SAVE	<AX,DX,CX>
 31538 00005521 50                      	push	ax
 31539 00005522 52                      	push	dx
 31540 00005523 51                      	push	cx
 31541 00005524 89C2                    	MOV	DX,AX
 31542                                  
 31543                                  	; MSDOS 6.0
 31544                                  	; 22/09/2023
 31545                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31546                                  	;
 31547                                  	; MDOS 3.3 (& MSDOS 6.0)
 31548                                  	;XOR	AL,AL	   ; *
 31549                                  	;MOV	SI,1	   ; *
 31550                                  	;;invoke GETBUFFRB ; *
 31551                                  	;call	GETBUFFRB  ; *
 31552                                  	; 22/09/2023
 31553 00005526 E8C802                  	call	GETBUFFRC  ; *!
 31554                                  
 31555                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31556 00005529 59                      	pop	cx
 31557 0000552A 58                      	pop	ax
 31558 0000552B 5A                      	pop	dx
 31559 0000552C 724C                    	JC	short MAP_POP
 31560                                  
 31561 0000552E C536[E205]              	LDS	SI,[CURBUF]
 31562                                  	;;lea	di,[si+16]
 31563                                  	;lea	di,[si+20] ; MSDOS 6.0
 31564 00005532 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31565 00005535 01C7                    	ADD	DI,AX
 31566 00005537 39C8                    	CMP	AX,CX
 31567 00005539 752C                    	JNZ	short MAPRET
 31568 0000553B 8A05                    	MOV	AL,[DI]
 31569                                  	;Context DS		 	;hkn; SS is DOSDATA
 31570 0000553D 16                      	push	ss
 31571 0000553E 1F                      	pop	ds	
 31572 0000553F FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31573 00005543 A2[8E05]                	MOV	[CLUSSAVE],AL
 31574 00005546 8916[9005]              	MOV	[CLUSSEC],DX
 31575                                  	; MSDOS 6.0
 31576 0000554A C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31577 00005550 42                      	INC	DX
 31578                                  
 31579                                  	; 22/09/2023
 31580                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31581                                  	;
 31582                                  	; MDOS 3.3 (& MSDOS 6.0)
 31583                                  	;XOR	AL,AL	   ; *
 31584                                  	;MOV	SI,1	   ; *
 31585                                  	;;invoke GETBUFFRB ; *
 31586                                  	;call	GETBUFFRB  ; *
 31587                                  	; 22/09/2023
 31588 00005551 E89D02                  	call	GETBUFFRC  ; *!
 31589 00005554 7224                    	JC	short MAP_POP
 31590                                  
 31591 00005556 C536[E205]              	LDS	SI,[CURBUF]
 31592 0000555A 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31593 0000555D 8A05                    	MOV	AL,[DI]
 31594                                  	;Context DS			;hkn; SS is DOSDATA
 31595 0000555F 16                      	push	ss
 31596 00005560 1F                      	pop	ds
 31597 00005561 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31598                                  
 31599                                  ;hkn; CLUSSAVE is in DOSDATA
 31600 00005564 BF[8E05]                	MOV	DI,CLUSSAVE
 31601                                  MAPRET:
 31602                                  	;RESTORE <DX,CX,BX>
 31603 00005567 5A                      	pop	dx
 31604 00005568 59                      	pop	cx
 31605 00005569 5B                      	pop	bx
 31606 0000556A 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31607 0000556C 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31608 00005572 7302                    	JAE	short MapSet		; MZ no, set flags
 31609 00005574 89D8                    	MOV	AX,BX
 31610                                  MapSet:
 31611 00005576 A801                    	TEST	AL,1			; set zero flag if not on boundary
 31612                                  	;RESTORE <AX>
 31613 00005578 58                      	pop	ax
 31614 00005579 C3                      	retn
 31615                                  
 31616                                  MAP_POP:
 31617                                  	;RESTORE <DX,CX,BX,AX>
 31618 0000557A 5A                      	pop	dx
 31619 0000557B 59                      	pop	cx
 31620 0000557C 5B                      	pop	bx
 31621 0000557D 58                      	pop	ax
 31622                                  fatread_sft_retn: ; 17/12/2022
 31623 0000557E C3                      	retn
 31624                                  
 31625                                  ; 20/05/2019 - Retro DOS v4.0
 31626                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31627                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31628                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31629                                  
 31630                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31631                                  ;----------------------------------------------------------------------------
 31632                                  ;
 31633                                  ; Procedure Name : FATREAD_SFT
 31634                                  ;
 31635                                  ; Inputs:
 31636                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31637                                  ;		giving a NET SFT will produce system crashing results).
 31638                                  ;	DS DOSDATA
 31639                                  ; Function:
 31640                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31641                                  ;	if disk changed.
 31642                                  ;	In other respects, same as FATREAD_CDS.
 31643                                  ;	(note ES:DI destroyed!)
 31644                                  ; Outputs:
 31645                                  ;	Carry set if error (currently user FAILed to I 24)
 31646                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31647                                  ;	as far as invalidating curdir_ID is concerned.
 31648                                  ;	Since getting a true disk changed on this call is a screw up
 31649                                  ;	anyway, that's the way it goes.
 31650                                  ;
 31651                                  ;---------------------------------------------------------------------------
 31652                                  
 31653                                  FATREAD_SFT:
 31654 0000557F 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31655                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31656                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31657                                  	; 15/12/2022
 31658 00005583 268A4600                	mov	AL,[ES:BP]
 31659 00005587 A2[7605]                	MOV	[THISDRV],AL
 31660 0000558A E89BB0                  	call	GOTDPB			;Set THISDPB
 31661                                  	;CALL	FAT_GOT_DPB
 31662                                  	; 17/12/2022
 31663 0000558D EB78                    	jmp	FAT_GOT_DPB
 31664                                  ;fatread_sft_retn:
 31665                                  	;retn
 31666                                  
 31667                                  ;----------------------------------------------------------------------------
 31668                                  ;
 31669                                  ; Procedure Name : FATREAD_CDS
 31670                                  ;
 31671                                  ; Inputs:
 31672                                  ;	DS:DOSDATA
 31673                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31674                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31675                                  ; Function:
 31676                                  ;	If disk may have been changed, media is determined and buffers are
 31677                                  ;	flagged invalid. If not, no action is taken.
 31678                                  ; Outputs:
 31679                                  ;	ES:BP = Drive parameter block
 31680                                  ;	THISDPB = ES:BP
 31681                                  ;	THISDRV set
 31682                                  ;	Carry set if error (currently user FAILed to I 24)
 31683                                  ; DS preserved , all other registers destroyed
 31684                                  ;
 31685                                  ;---------------------------------------------------------------------------
 31686                                  
 31687                                  	; 20/05/2019 - Retro DOS v4.0
 31688                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31689                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31690                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31691                                  
 31692                                  FATREAD_CDS:
 31693 0000558F 06                      	PUSH	ES
 31694 00005590 57                      	PUSH	DI
 31695                                  	;les	bp,[es:di+45h]
 31696 00005591 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31697                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31698                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31699                                  	; 15/12/2022
 31700 00005595 268A4600                	mov	AL,[ES:BP]
 31701 00005599 A2[7605]                	MOV	[THISDRV],AL
 31702 0000559C E889B0                  	call	GOTDPB			;Set THISDPB
 31703 0000559F E86500                  	CALL	FAT_GOT_DPB
 31704 000055A2 5F                      	POP	DI			;Get back CDS pointer
 31705 000055A3 07                      	POP	ES
 31706 000055A4 72D8                    	jc	short fatread_sft_retn
 31707 000055A6 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31708                                  
 31709                                  ;	Media changed. We now need to find all CDS structures which use this
 31710                                  ;	DPB and invalidate their ID pointers.
 31711                                  
 31712                                  MED_CHANGE:
 31713 000055A8 31C0                    	XOR	AX,AX
 31714 000055AA 48                      	DEC	AX			; AX = -1
 31715 000055AB 1E                      	PUSH	DS
 31716 000055AC 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31717 000055B0 30ED                    	XOR	CH,CH			; CX is number of structures
 31718                                  	;lds	si,[es:di+45h]
 31719 000055B2 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31720                                  
 31721                                  ;hkn; SS override
 31722                                  
 31723                                  ;	Find all CDSs with this DevPtr
 31724                                  ;
 31725                                  ;	(ax) = -1
 31726                                  ;	(ds:si) = DevPtr
 31727                                  
 31728 000055B6 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31729                                  frcd20: 
 31730                                  	;;test	word [es:di+43h],8000h
 31731                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31732 000055BB 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31733 000055C0 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31734                                  
 31735                                  	; MSDOS 3.3
 31736                                  	;push	es
 31737                                  	;push	di
 31738                                  	;les	di,[es:di+45h]
 31739                                  	;;les	di,[ES:DI+curdir.devptr]
 31740                                  	;call	POINTCOMP
 31741                                  	;pop	di
 31742                                  	;pop	es
 31743                                  	;jnz	short frcd25
 31744                                  
 31745                                  	; MSDOS 6.0
 31746 000055C2 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31747 000055C6 7512                    	jne	short frcd25		; no match
 31748 000055C8 8CDB                    	mov	bx,ds
 31749 000055CA 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31750 000055CE 750A                    	jne	short frcd25		; CDS not for this drive
 31751                                  
 31752                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31753                                  	;test	[es:di+49h],ax
 31754 000055D0 26854549                	test	[ES:DI+curdir.ID],AX
 31755 000055D4 7404                    	JZ	short frcd25		; If root (0), leave root
 31756                                  	;mov	[es:di+49h],ax
 31757 000055D6 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31758                                  frcd25:	
 31759                                  	;;add	di,81  ; MSDOS 3.3
 31760                                  	;add	di,88  ; MSDOS 6.0	 
 31761 000055DA 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31762 000055DD E2DC                    	LOOP	frcd20
 31763 000055DF 1F                      	POP	DS
 31764                                  NO_CHANGE:
 31765 000055E0 C42E[8A05]              	LES	BP,[THISDPB]
 31766 000055E4 F8                      	CLC
 31767 000055E5 C3                      	retn
 31768                                  
 31769                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31770                                  ;----------------------------------------------------------------------------
 31771                                  ;
 31772                                  ; Procedure Name : FAT_operation
 31773                                  ;
 31774                                  ;----------------------------------------------------------------------------
 31775                                  
 31776                                  	; 03/01/2024
 31777                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31778                                  
 31779                                  FAT_operation:
 31780                                  	; 31/07/2018 - Retro DOS v3.0
 31781                                  FATERR:
 31782                                  	;mov	word [es:bp+1Eh],-1
 31783                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31784 000055E6 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31785                                  					; Err in FAT must force recomp of freespace
 31786                                  	;and	di,0FFh
 31787 000055EC 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31788                                  	;mov	byte [ALLOWED],18h
 31789 000055F0 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31790                                  	;mov	ah,1Ah
 31791 000055F5 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31792 000055F7 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31793 000055FA E816FC                  	call	FATAL1
 31794 000055FD C42E[8A05]              	LES	BP,[THISDPB]
 31795 00005601 3C03                    	CMP	AL,3
 31796 00005603 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31797 00005605 F9                      	STC				; User said FAIL
 31798 00005606 C3                      	retn
 31799                                  
 31800                                  FAT_GOT_DPB:
 31801                                  	;Context DS			;hkn; SS is DOSDATA
 31802 00005607 16                      	push	ss			
 31803 00005608 1F                      	pop	ds
 31804                                  	;mov	al,0Fh
 31805 00005609 B00F                    	MOV	AL,DMEDHL
 31806                                  	;mov	ah,[es:bp+1]
 31807 0000560B 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31808 0000560F A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31809 00005612 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31810 00005617 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31811                                  	;;mov	al,[es:bp+16h]
 31812                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31813 0000561D 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31814 00005621 A2[6703]                	MOV	[CALLMED],AL
 31815 00005624 06                      	PUSH	ES
 31816 00005625 1E                      	PUSH	DS
 31817                                  
 31818                                  ;hkn; DEVCALL is in DOSDATA
 31819 00005626 BB[5A03]                	MOV	BX,DEVCALL
 31820                                  	;;lds	si,[es:bp+12h]
 31821                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31822 00005629 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31823 0000562D 07                      	POP	ES			; ES:BX Points to call header
 31824 0000562E E80AEF                  	call	DEVIOCALL2
 31825                                  	;Context DS		 	;hkn; SS is DOSDATA
 31826 00005631 16                      	push	ss
 31827 00005632 1F                      	pop	ds
 31828 00005633 07                      	POP	ES			; Restore ES:BP
 31829 00005634 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31830                                  	;test	di,8000h
 31831                                  	;jnz	short FATERR
 31832 00005638 09FF                    	or	di,di
 31833 0000563A 78AA                    	js	short FATERR		; have error
 31834 0000563C 30E4                    	XOR	AH,AH
 31835                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31836                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31837 0000563E 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31838 00005642 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31839                                  ; See if we had changed volume id by creating one on the diskette
 31840 00005645 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31841 00005649 7508                    	jnz	short CHECK_BYT
 31842 0000564B C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31843 00005650 E9A300                  	jmp	GOGETBPB		; Need to get device driver to read in
 31844                                  					; new volume label.
 31845                                  CHECK_BYT:
 31846 00005653 0A26[6803]              	OR	AH,[CALLRBYT]
 31847                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31848                                  	;JMP	short NEWDSK
 31849                                  	; 17/12/2022
 31850 00005657 7861                    	js	short NEWDSK
 31851                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31852                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31853                                  	;JMP	short NEWDSK
 31854                                  
 31855                                  CHECK_ZR:
 31856 00005659 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31857                                  	; 24/09/2023
 31858                                  	; cf=0 (after 'or' instruction)
 31859                                  	;CLC
 31860 0000565B C3                      	retn				; If Media not changed (NZ)
 31861                                  
 31862                                  DISK_CHNG_ERR:
 31863 0000565C 06                      	PUSH	ES
 31864 0000565D 55                      	PUSH	BP
 31865                                  	;;les	bp,[es:bp+12h]
 31866                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31867 0000565E 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31868                                  	;;test	word [es:bp+4],800h
 31869                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31870 00005662 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31871 00005667 5D                      	POP	BP
 31872 00005668 07                      	POP	ES
 31873                                  	;JZ	short FAIL_OPJ2		; Nope, FAIL
 31874                                  	; 03/03/2024
 31875 00005669 7443                    	jz	short FAIL_OP
 31876 0000566B 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31877 0000566C 57                      	PUSH	DI
 31878 0000566D 16                      	push	ss			;hkn; SS is DOSDATA
 31879 0000566E 1F                      	pop	ds
 31880                                  	;mov	byte [ALLOWED],18h
 31881 0000566F C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31882 00005674 06                      	PUSH	ES
 31883 00005675 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31884 00005679 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31885 0000567D 07                      	POP	ES
 31886 0000567E 893E[2803]              	MOV	[EXTERRPT],DI
 31887                                  	;mov	ax,0Fh
 31888 00005682 B80F00                  	MOV	AX,error_I24_wrong_disk
 31889 00005685 C606[7505]01            	MOV	byte [READOP],1		; Write
 31890                                  	;invoke	HARDERR
 31891 0000568A E834FB                  	call	HARDERR
 31892 0000568D 5F                      	POP	DI			; Get back buffer for ignore
 31893 0000568E 1F                      	POP	DS
 31894 0000568F 3C03                    	CMP	AL,3
 31895                                  FAIL_OPJ2:
 31896 00005691 741B                    	JZ	short FAIL_OP
 31897 00005693 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31898                                  
 31899                                  CHKBUFFDIRT:
 31900                                  	; 20/05/2019 - Retro DOS v4.0
 31901                                  
 31902                                  	; MSDOS 3.3
 31903                                  	;lds	di,[BUFFHEAD]
 31904                                  
 31905                                  	; MSDOS 6.0
 31906                                  	;cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31907                                  	; 03/03/2024
 31908                                  	; ds=ss
 31909                                  	;;;
 31910 00005696 833E[7100]00            	cmp	word [DirtyBufferCount],0 ; (Win ME IO.SYS - BIOSCODE:0C7A7h)
 31911                                  	;;;
 31912 0000569B 741D                    	je	short NEWDSK			; no, skip the check
 31913 0000569D E8EC00                  	call	GETCURHEAD			; get pointer to first buffer
 31914                                  nbuffer:
 31915                                  	;cmp	al,[di+4]
 31916 000056A0 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31917 000056A3 750C                    	jne	short lfnxt			; no, go for next buffer
 31918                                  	;test   byte [di+5],40h
 31919 000056A5 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31920 000056A9 7406                    	jz	short lfnxt			; no, go for next buffer
 31921                                  
 31922                                  FAIL_OP2:	; 03/03/2024
 31923                                  	;Context DS
 31924 000056AB 16                      	push	ss
 31925 000056AC 1F                      	pop	ds
 31926                                  	; 24/09/2023
 31927                                  	; cf=0 (after 'test' instruction)
 31928                                  	;clc
 31929 000056AD C3                      	retn
 31930                                  
 31931                                  FAIL_OP:					; This label & code is here
 31932                                  	;Context DS				;  for reachability
 31933                                  	;push	ss
 31934                                  	;pop	ds
 31935 000056AE F9                      	STC
 31936                                  	; 03/03/2024
 31937                                  	;retn
 31938 000056AF EBFA                    	jmp	short FAIL_OP2 ; cf=1
 31939                                  
 31940                                  lfnxt:
 31941                                  	; 15/08/2018 - Retro DOS v3.0
 31942                                  	; MSDOS 3.3
 31943                                  	;lds	di,[di]
 31944                                  
 31945                                  	; 20/05/2019 - Retro DOS v4.0
 31946 000056B1 8B3D                    	mov	di,[di]
 31947                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31948                                  	
 31949                                  	; MSDOS 3.3
 31950                                  	;cmp	di,-1
 31951                                  	;jne	short nbuffer
 31952                                  	
 31953                                  	; MSDOS 6.0
 31954 000056B3 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31955 000056B8 75E6                    	jne	short nbuffer			; no, check this guy also
 31956                                  
 31957                                  ; If no dirty buffers, assume Media changed
 31958                                  NEWDSK:
 31959                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31960                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31961 000056BA 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31962                                  						;  recompute
 31963                                  	; MSDOS 3.3
 31964                                  	;call	SETVISIT
 31965                                  	; MSDOS 6.0
 31966 000056C0 E8C900                  	call	 GETCURHEAD
 31967                                  nxbuffer:
 31968                                  	; MSDOS 3.3
 31969                                  	;or 	byte [di+5],20h
 31970                                  	; MSDOS 3.3 & MSDOS 6.0
 31971                                  	;cmp	[di+4],al
 31972 000056C3 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31973 000056C6 7510                    	jne	short lfnxt2
 31974                                  	;test	byte [di+5],40h
 31975 000056C8 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31976 000056CC 758E                    	jnz	short DISK_CHNG_ERR
 31977                                  	;mov	word [di+4],20FFh
 31978 000056CE C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31979 000056D3 E8C800                  	call	SCANPLACE
 31980                                  	; MSDOS 6.0
 31981 000056D6 EB02                    	jmp	short skpbuff
 31982                                  lfnxt2:
 31983 000056D8 8B3D                    	mov	di,[di]
 31984                                  	;mov	di,[di+BUFFINFO.buf_next]
 31985                                  skpbuff:
 31986                                  	; MSDOS 6.0
 31987 000056DA 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31988 000056DF 75E2                    	jne	short nxbuffer
 31989                                  
 31990 000056E1 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31991 000056E7 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31992 000056E9 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31993 000056EE 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31994 000056F0 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31995                                  ;lfnxt2:
 31996                                  	; MSDOS 3.3
 31997                                  	;call	SKIPVISIT
 31998                                  	;jnz	short nxbuffer
 31999                                  GOGETBPB:
 32000                                  	; MSDOS 3.3 & MSDOS 6.0
 32001                                  	;;lds	di,[es:bp+12h]
 32002                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 32003 000056F6 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 32004                                  	; 20/05/2019
 32005                                  	;test	word [di+4],2000h
 32006                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 32007 000056FA F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 32008 000056FE 7510                    	JNZ	short GETFREEBUF
 32009                                  	;context DS	    		;hkn; SS is DOSDATA
 32010 00005700 16                      	push	ss
 32011 00005701 1F                      	pop	ds
 32012 00005702 BB0200                  	MOV	BX,2
 32013 00005705 E8F1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 32014                                  FAIL_OPJ:
 32015                                  	;JC	short FAIL_OP
 32016                                  	; 03/03/2024
 32017 00005708 72A1                    	jc	short FAIL_OP2 ; cf=1
 32018 0000570A C53E[E205]              	LDS	DI,[CURBUF]
 32019 0000570E EB13                    	JMP	SHORT GOTGETBUF
 32020                                  
 32021                                  GETFREEBUF:
 32022 00005710 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 32023 00005711 55                      	PUSH	BP
 32024                                  	; MSDOS 3.3
 32025                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 32026                                  	; MSDOS 6.0
 32027 00005712 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 32028                                  ;hkn; SS override
 32029 00005714 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX ; 0	;LB.  buffer addr	  ;AN000;
 32030 00005719 E87000                  	call	GETCURHEAD		;LB.			  ;AN000;
 32031                                  	; MSDOS 3.3 & MSDOS 6.0
 32032 0000571C E84B02                  	call	BUFWRITE
 32033 0000571F 5D                      	POP	BP
 32034 00005720 07                      	POP	ES
 32035                                  	;;JC	short FAIL_OPJ
 32036                                  	;jc	short FAIL_OP
 32037                                  	; 03/03/2024
 32038 00005721 7288                    	jc	short FAIL_OP2 ; cf=1
 32039                                  
 32040                                  GOTGETBUF:
 32041                                  	;;add	di,16
 32042                                  	;add	di,20 ; MSDOS 6.0
 32043 00005723 83C714                  	ADD	DI,BUFINSIZ
 32044                                  
 32045                                  ;hkn; SS override
 32046 00005726 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 32047                                  	;Context DS			;hkn; SS is DOSDATA
 32048 0000572B 16                      	push	ss
 32049 0000572C 1F                      	pop	ds
 32050 0000572D 893E[6803]              	MOV	[CALLXAD],DI
 32051                                  	;mov	al,16h
 32052 00005731 B016                    	MOV	AL,DBPBHL
 32053                                  	;mov	ah,[es:bp+1]
 32054 00005733 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 32055 00005737 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 32056 0000573A C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 32057 0000573F C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 32058                                  	;;mov	al,[es:bp+16h]
 32059                                  	;mov	al,[es:bp+17h]
 32060 00005745 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 32061 00005749 A2[6703]                	MOV	[CALLMED],AL
 32062 0000574C 06                      	PUSH	ES ; **
 32063 0000574D 1E                      	PUSH	DS ; *
 32064                                  	;;
 32065                                  ; 03/01/2024
 32066                                  %if 0
 32067                                  	;;push	word [es:bp+14h]
 32068                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 32069                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 32070                                  	;;push	word [es:bp+12h]
 32071                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 32072                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 32073                                  
 32074                                  ;hkn; DEVCALL is in DOSDATA
 32075                                  	MOV	BX,DEVCALL
 32076                                  	POP	SI
 32077                                  	POP	DS			; DS:SI Points to device header
 32078                                  %endif
 32079                                  	; 03/01/2024
 32080 0000574E BB[5A03]                	mov	bx,DEVCALL
 32081                                  	;lds	si,[es:bp+13h]
 32082 00005751 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 32083                                  					; DS:SI Points to device header
 32084                                  	;;
 32085 00005755 07                      	POP	ES ; *			; ES:BX Points to call header
 32086                                  	;invoke	DEVIOCALL2
 32087 00005756 E8E2ED                  	call	DEVIOCALL2
 32088 00005759 07                      	POP	ES ; **			; Restore ES:BP
 32089                                  	;Context DS
 32090 0000575A 16                      	push	ss		 	;hkn; SS is DOSDATA
 32091 0000575B 1F                      	pop	ds
 32092 0000575C 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 32093                                  	; MSDOS 3.3
 32094                                  	;test	di,8000h
 32095                                  	;jnz	short FATERRJ
 32096                                  	; MSDOS 6.0
 32097 00005760 09FF                    	or	di,di
 32098 00005762 7825                    	js	short FATERRJ 		; have error
 32099                                  
 32100                                  ; 04/03/2024
 32101                                  %if 0
 32102                                  	;;mov	al,[es:bp+16h]
 32103                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 32104                                  	MOV	AL,[ES:BP+DPB.MEDIA]
 32105                                  %endif
 32106                                  
 32107 00005764 C536[6C03]              	LDS	SI,[CALLBPB]
 32108                                  	;;mov	word [es:bp+1Ch],0
 32109                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 32110 00005768 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 32111                                  	;invoke	$SETDPB
 32112 0000576E E83DB8                  	call	_$SETDPB
 32113                                  
 32114                                  ;hkn; SS override
 32115 00005771 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 32116                                  	;mov	al,[es:bp+8]
 32117 00005776 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 32118                                  
 32119                                  	; MSDOS 3.3
 32120                                  	;;mov	ah,[es:bp+0Fh]
 32121                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32122                                  	;;mov	[DI-8],ax
 32123                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 32124                                  
 32125                                  	; MSDOS 6.0
 32126                                  	;mov	[di-0Ah],al
 32127 0000577A 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 32128                                  						;>32mb		  ;AN000;
 32129                                  	;mov	ax,[es:bp+0Fh]
 32130 0000577D 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 32131                                  	;mov	[di-9h],ax			  ;AC000;
 32132 00005781 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 32133                                  					;>32mb Correct buffer info ;AC000;
 32134                                  	;Context DS			;hkn; SS is DOSDATA
 32135 00005784 16                      	push	ss
 32136 00005785 1F                      	pop	ds
 32137 00005786 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 32138 00005788 C3                      	retn
 32139                                  
 32140                                  FATERRJ: 
 32141 00005789 E95AFE                  	JMP	FATERR
 32142                                  
 32143                                  ;============================================================================
 32144                                  ; STDBUF.ASM
 32145                                  ;============================================================================
 32146                                  ; Retro DOS v2.0 - 12/03/2018
 32147                                  
 32148                                  ;
 32149                                  ; Standard buffer management for MSDOS
 32150                                  ;
 32151                                  
 32152                                  ;.xlist
 32153                                  ;.xcref
 32154                                  ;INCLUDE STDSW.ASM
 32155                                  ;.cref
 32156                                  ;.list
 32157                                  
 32158                                  ;TITLE	STDBUF - MSDOS buffer management
 32159                                  ;NAME	STDBUF
 32160                                  
 32161                                  ;INCLUDE BUF.ASM
 32162                                  
 32163                                  ;============================================================================
 32164                                  ; BUF.ASM
 32165                                  ;============================================================================
 32166                                  ; 31/07/2018 - Retro DOS v3.0
 32167                                  ; Retro DOS v2.0 - 12/03/2018
 32168                                  ;
 32169                                  ; buffer management for MSDOS
 32170                                  ;
 32171                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 32172                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 32173                                  ;
 32174                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 32175                                  ;
 32176                                  ;SETVISIT:
 32177                                  ;	; 31/07/2018 - Retro DOS v3.0
 32178                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 32179                                  ;; Inputs:
 32180                                  ;;      None
 32181                                  ;; Function:
 32182                                  ;;      Set up a scan of I/O buffers
 32183                                  ;; Outputs:
 32184                                  ;;      All visit flags = 0
 32185                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 32186                                  ;;                    may cause a scan to stop in the middle leaving some
 32187                                  ;;                    visit flags set, and some not set.
 32188                                  ;;      DS:DI Points to [BUFFHEAD]
 32189                                  ;; No other registers altered
 32190                                  ;
 32191                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32192                                  ;	PUSH    AX
 32193                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 32194                                  ;	;mov	al,0DFh
 32195                                  ;	mov	al,~buf_visit
 32196                                  ;SETLOOP:
 32197                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 32198                                  ;	;and	[DI+5],al
 32199                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 32200                                  ;       LDS     DI,[DI]
 32201                                  ;       CMP     DI,-1
 32202                                  ;       JNZ     SHORT SETLOOP
 32203                                  ;       POP     AX ; 09/09/2018
 32204                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32205                                  ;SVISIT_RETN:
 32206                                  ;       RETN
 32207                                  ;
 32208                                  ;SKIPVISIT:
 32209                                  ;	; 31/07/2018 - Retro DOS v3.0
 32210                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 32211                                  ;
 32212                                  ;; Inputs:
 32213                                  ;;      DS:DI Points to a buffer
 32214                                  ;; Function:
 32215                                  ;;      Skip visited buffers
 32216                                  ;; Outputs:
 32217                                  ;;      DS:DI Points to next unvisited buffer
 32218                                  ;;      Zero is set if skip to LAST buffer
 32219                                  ;; No other registers altered
 32220                                  ;
 32221                                  ;       CMP     DI,-1
 32222                                  ;       ;retz
 32223                                  ;       JZ	SHORT SVISIT_RETN
 32224                                  ;
 32225                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 32226                                  ;       ;;;retnz
 32227                                  ;       ;;JNZ	SHORT SVISIT_RETN
 32228                                  ;
 32229                                  ;	;test	byte [di+5],20h
 32230                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 32231                                  ;	JNZ	short SKIPLOOP
 32232                                  ;	
 32233                                  ;	push	ax
 32234                                  ;	or	al,1
 32235                                  ;	pop	ax
 32236                                  ;	retn	
 32237                                  ;
 32238                                  ;SKIPLOOP:
 32239                                  ;	LDS     DI,[DI]
 32240                                  ;       JMP     SHORT SKIPVISIT
 32241                                  
 32242                                  ;============================================================================
 32243                                  ; BUF.ASM, MSDOS 6.0, 1991
 32244                                  ;============================================================================
 32245                                  ; 31/07/2018 - Retro DOS v3.0
 32246                                  ; 04/05/2019 - Retro DOS v4.0
 32247                                  
 32248                                  ;	TITLE	BUF - MSDOS buffer management
 32249                                  ;	NAME	BUF
 32250                                  
 32251                                  ;**	BUF.ASM - Low level routines for buffer cache management
 32252                                  ;
 32253                                  ;	GETCURHEAD
 32254                                  ;	ScanPlace
 32255                                  ;	PLACEBUF
 32256                                  ;	PLACEHEAD
 32257                                  ;	PointComp
 32258                                  ;	GETBUFFR
 32259                                  ;	GETBUFFRB
 32260                                  ;	FlushBuf
 32261                                  ;	BufWrite
 32262                                  ;	SET_RQ_SC_PARMS
 32263                                  ;
 32264                                  ;	Revision history:
 32265                                  ;
 32266                                  ;		AN000  version 4.00  Jan. 1988
 32267                                  ;		A004   PTM 3765 -- Disk reset failed
 32268                                  ;		M039 DB 10/17/90 - Disk write optimization
 32269                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 32270                                  
 32271                                  ;Break	<GETCURHEAD -- Get current buffer header>
 32272                                  ;----------------------------------------------------------------------------
 32273                                  ; Procedure Name : GetCurHead
 32274                                  ; Inputs:
 32275                                  ;	 No Inputs
 32276                                  ; Function:
 32277                                  ;	Returns the pointer to the first buffer in Queue
 32278                                  ;	and updates FIRST_BUFF_ADDR
 32279                                  ;       and invalidates LASTBUFFER (recency pointer)
 32280                                  ; Outputs:
 32281                                  ;	DS:DI = pointer to the first buffer in Queue
 32282                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 32283                                  ;       LASTBUFFER = -1
 32284                                  ; No other registers altered
 32285                                  ;----------------------------------------------------------------------------
 32286                                  
 32287                                  ; 04/05/2019 - Retro DOS v4.0
 32288                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 32289                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32290                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 32291                                  
 32292                                  GETCURHEAD:
 32293 0000578C 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 32294 00005791 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 32295 00005798 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 32296 0000579D C3                      	retn
 32297                                  
 32298                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 32299                                  ;----------------------------------------------------------------------------
 32300                                  ; Procedure Name : ScanPlace
 32301                                  ; Inputs:
 32302                                  ;	Same as PLACEBUF
 32303                                  ; Function:
 32304                                  ;	Save scan location and call PLACEBUF
 32305                                  ; Outputs:
 32306                                  ;	DS:DI Points to saved scan location
 32307                                  ; All registers, except DS:DI, preserved.
 32308                                  ;----------------------------------------------------------------------------
 32309                                  ;M039: Rewritten to preserve registers.
 32310                                  
 32311                                  ;SCANPLACE:
 32312                                  ;	; 31/07/2018 - Retro DOS v3.0
 32313                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32314                                  ;	push	es
 32315                                  ;	les	si,[di]
 32316                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 32317                                  ;	call	PLACEBUF
 32318                                  ;	push	es
 32319                                  ;	pop	ds
 32320                                  ;	mov	di,si
 32321                                  ;	pop	es
 32322                                  ;scanplace_retn:
 32323                                  ;	retn	
 32324                                  	
 32325                                  	; MSDOS 6.0
 32326                                  SCANPLACE:
 32327 0000579E FF35                    	push	word [di]
 32328                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 32329 000057A0 E80200                  	call	PLACEBUF
 32330 000057A3 5F                      	pop	di
 32331 000057A4 C3                      	retn
 32332                                  
 32333                                  ;----------------------------------------------------------------------------
 32334                                  ; Procedure Name : PlaceBuf
 32335                                  ; Input:
 32336                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 32337                                  ; Function:
 32338                                  ;	Remove buffer from queue and re-insert it in proper place.
 32339                                  ; NO registers altered
 32340                                  ;----------------------------------------------------------------------------
 32341                                  
 32342                                  ;procedure PLACEBUF,NEAR
 32343                                  
 32344                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32345                                  	; 20/05/2019 - Retro DOS v4.0
 32346                                  PLACEBUF:
 32347                                  	; 31/07/2018 - Retro DOS v3.0
 32348                                  
 32349                                  	; MSDOS 6.0
 32350 000057A5 50                      	push	AX			;Save only regs we modify	;AN000;
 32351 000057A6 53                      	push	BX							;AN000;
 32352                                  	; 23/09/2023
 32353                                  	;push	SI							;AN000;
 32354                                  	
 32355 000057A7 8B05                    	mov	ax,[di]
 32356                                  	;mov	ax,[di+BUFFINFO.buf_next]
 32357 000057A9 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 32358                                  	
 32359 000057AE 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 32360 000057B0 7422                    	je	short nret			;Yes, special case	;AN000;
 32361 000057B2 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 32362 000057B4 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 32363 000057B6 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 32364 000057BA EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 32365                                  not_first:
 32366                                  	; 23/09/2023
 32367 000057BC 56                      	push	si
 32368                                  	;mov	si,[di+2]
 32369 000057BD 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 32370 000057C0 8904                    	mov	[si],ax
 32371                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 32372 000057C2 96                      	xchg	si,ax
 32373                                  	;mov	[si+2],ax
 32374 000057C3 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 32375                                  	
 32376 000057C6 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 32377 000057C9 893C                    	mov	[si],di
 32378                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 32379 000057CB 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 32380 000057CE 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 32381 000057D1 891D                    	mov	[di],bx
 32382                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 32383                                  	; 23/09/2023
 32384 000057D3 5E                      	pop	si
 32385                                  nret:	
 32386                                  	; 23/09/2023							;AN000;
 32387                                  	;pop	SI							;AN000;
 32388 000057D4 5B                      	pop	BX							;AN000;
 32389 000057D5 58                      	pop	AX							;AN000;
 32390                                  									;AN000;
 32391                                  	;cmp	byte [di+4],0FFh
 32392 000057D6 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 32393 000057DA 7505                            jne	short pbx			; M039: -no, jump.
 32394 000057DC 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 32395                                  pbx:	
 32396 000057E1 C3                      	retn								;AN000;
 32397                                  
 32398                                  	; 31/07/2018 - Retro DOS v3.0
 32399                                  
 32400                                  	; MSDOS 3.3
 32401                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32402                                  
 32403                                  ;PLACEBUF:
 32404                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32405                                  ;	
 32406                                  ;       CALL	save_world
 32407                                  ;       LES     CX,[DI]
 32408                                  ;       CMP     CX,-1           	; Buf is LAST?
 32409                                  ;       JZ      SHORT NRET		; Buffer already last
 32410                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 32411                                  ;       PUSH    DS
 32412                                  ;       POP     ES              	; Buf is ES:DI
 32413                                  ;	; 15/03/2018
 32414                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 32415                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 32416                                  ;       JNZ     SHORT BUFLOOP
 32417                                  ;       MOV     [SS:BUFFHEAD],CX
 32418                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 32419                                  ;       JMP     SHORT LOOKEND
 32420                                  ;BUFLOOP:
 32421                                  ;	; 31/07/2018
 32422                                  ;	mov	ax,ds
 32423                                  ;	mov	bx,si
 32424                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32425                                  ;       LDS     SI,[SI]
 32426                                  ;       CALL    POINTCOMP
 32427                                  ;       jnz	short BUFLOOP
 32428                                  ;	;
 32429                                  ;	mov	ds,ax
 32430                                  ;	mov	si,bx
 32431                                  ;	mov	[SI],cx
 32432                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 32433                                  ;	mov	[SI+2],bp
 32434                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 32435                                  ;LOOKEND:
 32436                                  ;	mov	ax,ds
 32437                                  ;	mov	bx,si
 32438                                  ;       LDS     SI,[SI]
 32439                                  ;       CMP     SI,-1
 32440                                  ;       jnz     short LOOKEND
 32441                                  ;GOTHEEND:
 32442                                  ;       mov	ds,ax
 32443                                  ;	mov	[BX],di
 32444                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 32445                                  ;       MOV     WORD [ES:DI],-1
 32446                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 32447                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 32448                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 32449                                  ;NRET:
 32450                                  ;       CALL	restore_world
 32451                                  ;	
 32452                                  ;	;cmp	byte [di+4],-1
 32453                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 32454                                  ;	jnz     short scanplace_retn
 32455                                  ;	call    PLACEHEAD
 32456                                  ;	retn
 32457                                  
 32458                                  ;EndProc PLACEBUF
 32459                                  
 32460                                  ;M039 - Removed PLACEHEAD.
 32461                                  ;----------------------------------------------------------------------------
 32462                                  ; places buffer at head
 32463                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 32464                                  ;	ONE IN THE LIST!!!!!!!
 32465                                  ; BUGBUG ---- this routine can be removed because it has only
 32466                                  ; BUGBUG ---- one instruction. This routine is called from
 32467                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 32468                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 32469                                  ; BUGBUG ---- But kept as it is for modularity
 32470                                  ;----------------------------------------------------------------------------
 32471                                  ;procedure   PLACEHEAD,NEAR
 32472                                  ;	mov	word ptr [BufferQueue], di
 32473                                  ;	ret
 32474                                  ;EndProc PLACEHEAD
 32475                                  ;M039
 32476                                  
 32477                                  ;----------------------------------------------------------------------------
 32478                                  ; Procedure Name : PLACEHEAD
 32479                                  ;
 32480                                  ; SAME AS PLACEBUF except places buffer at head
 32481                                  ;----------------------------------------------------------------------------
 32482                                  
 32483                                  	; MSDOS 3.3 (Retro DOS v3.0)
 32484                                  	; 05/09/2018
 32485                                  	; MSDOS 2.11 (Retro DOS v2.0)
 32486                                  ;PLACEHEAD:
 32487                                  ;	; 31/07/2018 - Retro DOS v3.0
 32488                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 32489                                  ;
 32490                                  ;       CALL	save_world
 32491                                  ;       PUSH	DS
 32492                                  ;       POP	ES
 32493                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32494                                  ;       LDS     SI,[SS:BUFFHEAD]
 32495                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 32496                                  ;	CALL    POINTCOMP
 32497                                  ;       JZ      SHORT GOTHEEND2
 32498                                  ;	MOV	[ES:DI],SI
 32499                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 32500                                  ;       MOV	[ES:DI+2],DS
 32501                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 32502                                  ;       MOV	[SS:BUFFHEAD],DI
 32503                                  ;       MOV	[SS:BUFFHEAD+2],ES
 32504                                  ;LOOKEND2:
 32505                                  ;       mov	ax,ds
 32506                                  ;	mov	bx,si
 32507                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32508                                  ;       LDS     SI,[SI]
 32509                                  ;       CALL    POINTCOMP
 32510                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 32511                                  ;       mov	ds,ax
 32512                                  ;	mov	word [bx],-1
 32513                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 32514                                  ;	mov	word [bx+2],-1
 32515                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 32516                                  ;GOTHEEND2:
 32517                                  ;      	call	restore_world
 32518                                  ;placehead_retn:
 32519                                  ;	retn
 32520                                  
 32521                                  ; 20/05/2019 - Retro DOS v4.0
 32522                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 32523                                  
 32524                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 32525                                  ;----------------------------------------------------------------------------
 32526                                  ;
 32527                                  ; Procedure Name : PointComp
 32528                                  ; Inputs:
 32529                                  ;         DS:SI & ES:DI
 32530                                  ; Function:
 32531                                  ;          Checks for ((SI==DI) && (ES==DS))
 32532                                  ;	   Assumes that pointers are normalized for the
 32533                                  ;	   same segment
 32534                                  ;
 32535                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32536                                  ; DO NOT USE FOR < or >
 32537                                  ; No Registers altered
 32538                                  ;
 32539                                  ;----------------------------------------------------------------------------
 32540                                  
 32541                                  POINTCOMP:
 32542                                  	; 31/07/2018 - Retro DOS v3.0
 32543                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32544 000057E2 39FE                    	CMP	SI,DI
 32545 000057E4 750A                    	jnz	short _ret_label	; return if nz
 32546                                  	;jnz	short placehead_retn 
 32547 000057E6 51                      	PUSH	CX
 32548 000057E7 52                      	PUSH	DX
 32549 000057E8 8CD9                    	MOV	CX,DS
 32550 000057EA 8CC2                    	MOV	DX,ES
 32551 000057EC 39D1                    	CMP	CX,DX
 32552 000057EE 5A                      	POP	DX
 32553 000057EF 59                      	POP	CX
 32554                                  _ret_label:
 32555 000057F0 C3                      	retn
 32556                                  
 32557                                  ; 01/08/2018 - Retro DOS v3.0
 32558                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32559                                  
 32560                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32561                                  
 32562                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32563                                  ;----------------------------------------------------------------------------
 32564                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32565                                  ;	It gets the specified local sector into one of the I/O buffers
 32566                                  ;	and shuffles the queue
 32567                                  ; 
 32568                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32569                                  ;		       ELSE no pre-read
 32570                                  ;		(DX) = Desired physical sector number	      (LOW)
 32571                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32572                                  ;		(ES:BP) = Pointer to drive parameters
 32573                                  ;		ALLOWED set in case of INT 24
 32574                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32575                                  ;		'C' clear if OK
 32576                                  ;		CURBUF Points to the Buffer for the sector
 32577                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32578                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32579                                  ;----------------------------------------------------------------------------
 32580                                  
 32581                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32582                                  ;----------------------------------------------------------------------------
 32583                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32584                                  ;	It gets the specified sector into one of the I/O buffers
 32585                                  ;	and shuffles the queue. We need a special entry point so that
 32586                                  ;	we can read the alternate FAT sector if the first read fails, also
 32587                                  ;	so we can mark the buffer as a FAT sector.
 32588                                  ; 
 32589                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32590                                  ;		       ELSE no pre-read
 32591                                  ;		(DX) = Desired physical sector number	     (LOW)
 32592                                  ;		(SI) != 0
 32593                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32594                                  ;		(ES:BP) = Pointer to drive parameters
 32595                                  ;		ALLOWED set in case of INT 24
 32596                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32597                                  ;		'C' clear if OK
 32598                                  ;		CUR ddBUF Points to the Buffer for the sector
 32599                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32600                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32601                                  ;----------------------------------------------------------------------------
 32602                                  
 32603                                  	; 22/09/2023 - RetroDOS v4.2 MSDOS.SYS (optimization)
 32604                                  GETBUFFRC:
 32605 000057F1 C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32606                                  GETBUFFRA:
 32607 000057F7 30C0                    	xor	al,al
 32608 000057F9 BE0100                  	mov	si,1
 32609 000057FC EB09                    	jmp	short GETBUFFRB
 32610                                  
 32611                                  	; 22/09/2023
 32612                                  GETBUFFER:
 32613 000057FE 30C0                    	xor	al,al
 32614                                  GETBUFFRD:
 32615                                  	;mov	byte [ALLOWED],18h
 32616 00005800 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32617                                  
 32618                                  	; 20/05/2019 - Retro DOS v4.0
 32619                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32620                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32621                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32622                                  GETBUFFR:
 32623 00005805 31F6                    	XOR	SI,SI
 32624                                  
 32625                                  ;	This entry point is called for FAT buffering with SI != 0
 32626                                  
 32627                                  GETBUFFRB:
 32628 00005807 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32629                                  	; 15/12/2022
 32630 0000580A 268A4600                	mov	al,[ES:BP]
 32631                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32632                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32633 0000580E C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32634                                  	; MSDOS 6.0
 32635                                  ;hkn; SS override
 32636 00005812 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32637                                  
 32638                                  ;	See if this is the buffer that was most recently returned.
 32639                                  ;	A big performance win if it is.
 32640                                  
 32641 00005817 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32642 0000581A 7412                    	je	short getb5			; No
 32643                                  	;cmp	dx,[di+6]
 32644 0000581C 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32645 0000581F 750D                    	JNZ	short getb5			; Wrong sector
 32646                                  	
 32647                                  	; MSDOS 6.0
 32648                                  	;cmp	cx,[di+8]
 32649 00005821 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32650 00005824 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32651                                  	
 32652                                  	;cmp	al,[di+4]
 32653 00005826 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32654                                  	;JZ	getb35				; Just asked for same buffer
 32655 00005829 7503                    	jnz	short getb5
 32656                                  	;jmp	getb35
 32657                                  	; 17/12/2022
 32658                                  	; 28/07/2019
 32659 0000582B E9C700                  	jmp	getb35x
 32660                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32661                                  	;jmp	getb35
 32662                                  
 32663                                  ;	It's not the buffer most recently returned. See if it's in the
 32664                                  ;	cache.
 32665                                  ;
 32666                                  ;	(cx:dx) = sector #
 32667                                  ;	(al) = drive #
 32668                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32669                                  ;	??? list may be incomplete ???
 32670                                  
 32671                                  getb5:	
 32672                                  	; MSDOS 3.3
 32673                                  	;lds	di,[SS:BUFFHEAD]
 32674                                  	; MSDOS 6.0
 32675 0000582E E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32676                                  getb10:	
 32677                                  	;cmp	dx,[di+6]
 32678 00005831 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32679 00005834 750D                    	jne	short getb12			; wrong sector lo
 32680                                  	
 32681                                  	; MSDOS 6.0
 32682                                  	;cmp	cx,[di+8]
 32683 00005836 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32684 00005839 7508                    	jne	short getb12			; wrong sector hi
 32685                                  	
 32686                                  	;cmp	al,[di+4]
 32687 0000583B 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32688                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32689 0000583E 7503                    	jne	short getb12
 32690 00005840 E98C00                  	jmp	getb25
 32691                                  getb12:	
 32692                                  	; MSDOS 3.3
 32693                                  	;;mov	di,[DI]
 32694                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32695                                  	;
 32696                                  	; 15/08/2018
 32697                                  	;lds	di,[di]
 32698                                  
 32699                                  	;cmp	di,-1 ; 0FFFFh
 32700                                  	;jne	short getb10
 32701                                  	;lds	di,[SS:BUFFHEAD]
 32702                                  
 32703                                  	; MSDOS 6.0
 32704 00005843 8B3D                    	mov	di,[di]
 32705                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32706 00005845 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32707 0000584A 75E5                    	jne	short getb10			; no, continue looking
 32708                                  
 32709                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32710                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32711                                  ;	new sector into it.
 32712                                  ;
 32713                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32714                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32715                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32716                                  ;	down a chain, but should be hashed.
 32717                                  ;
 32718                                  ;	(DS:DI) = first buffer in the queue
 32719                                  ;	(CX:DX) = sector # we want
 32720                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32721                                  
 32722                                  	; MSDOS 3.3 & MSDOS 6.0
 32723                                  ;hkn; SS override
 32724 0000584C 51                      	PUSH	CX  ; MSDOS 6.0
 32725 0000584D 56                      	push	si
 32726 0000584E 52                      	push	dx
 32727 0000584F 55                      	push	bp
 32728 00005850 06                      	push	es
 32729 00005851 E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32730 00005854 07                      	pop	es
 32731 00005855 5D                      	pop	bp
 32732 00005856 5A                      	pop	dx
 32733 00005857 5E                      	pop	si
 32734 00005858 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32735                                  	;jc	short getbx			; if got hard error
 32736 0000585D 7303                    	jnc	short getb13
 32737 0000585F E99D00                  	jmp	getbx
 32738                                  
 32739                                  getb13:
 32740                                  	; MSDOS 6.0
 32741 00005862 E88C01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32742                                  
 32743                                  ;	We're ready to read in the buffer, if need be. If the caller
 32744                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32745                                  
 32746 00005865 30E4                    	XOR	AH,AH				; initial flags
 32747                                  ;hkn; SS override
 32748                                  	;test	byte [ss:PREREAD],0FFh
 32749                                  	;jnz	short getb20
 32750 00005867 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32751 0000586C 7549                    	JNZ	short getb20			; no, we're done
 32752                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32753                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32754 0000586E 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32755                                  	;MOV	CX,1
 32756                                  	; 22/09/2023
 32757 00005871 29C9                    	sub	cx,cx ; 0
 32758 00005873 56                      	push	si
 32759 00005874 57                      	push	di
 32760 00005875 52                      	push	dx
 32761                                  	; MSDOS 6.0
 32762 00005876 06                      	push	es ; ***
 32763                                  
 32764                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32765                                  ;	this point. -mrw 10/88
 32766                                  	
 32767                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32768                                  	; 22/09/2023
 32769 00005877 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32770 0000587C 7407                    	jz	short getb14
 32771 0000587E 1E                      	push	ds ; **
 32772 0000587F 53                      	push	bx ; *
 32773 00005880 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32774                                  getb14:
 32775                                  ;M039: Eliminated redundant HMA code.
 32776                                  
 32777                                  	; 22/09/2023
 32778 00005885 41                      	inc	cx ; cx = 1
 32779                                  
 32780                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32781 00005886 09F6                    	OR	SI,SI			; FAT sector ?
 32782 00005888 7407                    	JZ	short getb15		
 32783                                  
 32784 0000588A E872DD                  	call	FATSECRD
 32785                                  	;mov	ah,2
 32786 0000588D B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32787                                  
 32788 0000588F EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32789                                  
 32790                                  getb15:
 32791 00005891 E897DD                  	call	DREAD			; Buffer is marked free if read barfs
 32792 00005894 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32793                                  getb17:
 32794                                  	; 17/12/2022	
 32795                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32796                                  ;%if 0
 32797                                  	; MSDOS 6.0							  ;I001
 32798 00005896 9C                      	pushf								  ;I001
 32799 00005897 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32800 0000589D 7411                    	jz	short not_in_hma	; no				  ;I001
 32801                                  	;mov	cx,[es:bp+2]
 32802 0000589F 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32803 000058A3 D1E9                    	shr	cx,1							  ;I001
 32804 000058A5 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32805 000058A6 89DE                    	mov	si,bx							  ;I001
 32806 000058A8 5F                      	pop	di ; *							  ;I001
 32807 000058A9 07                      	pop	es ; **							  ;I001
 32808 000058AA FC                      	cld								  ;I001
 32809 000058AB 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32810 000058AC F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32811 000058AE 06                      	push	es							  ;I001
 32812 000058AF 1F                      	pop	ds							  ;I001
 32813                                  ;%endif
 32814                                  
 32815                                  ; 17/12/2022
 32816                                  %if 0
 32817                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32818                                  	; MSDOS 5.0
 32819                                  	pushf
 32820                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32821                                  	jz	short not_in_hma	; no
 32822                                  	popf
 32823                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32824                                  	shr	cx,1
 32825                                  	mov	si,bx
 32826                                  	pop	di ; *
 32827                                  	pop	es ; **
 32828                                  	cld
 32829                                  	rep	movsw
 32830                                  	push	es
 32831                                  	pop	ds
 32832                                  	jmp	short getb19 ; 27/11/2022
 32833                                  %endif
 32834                                  
 32835                                  not_in_hma:								  ;I001
 32836 000058B0 9D                      	popf							 	  ;I001
 32837                                  getb19:
 32838 000058B1 07                      	pop	es ; ***
 32839 000058B2 5A                      	pop	dx
 32840 000058B3 5F                      	pop	di
 32841 000058B4 5E                      	pop	si
 32842 000058B5 7248                    	JC	short getbx
 32843                                  
 32844                                  ;	The buffer has the data setup in it (if we were to read)
 32845                                  ;	Setup the various buffer fields
 32846                                  ;
 32847                                  ;	(ds:di) = buffer address
 32848                                  ;	(es:bp) = DPB address
 32849                                  ;	(HIGH_SECTOR:DX) = sector #
 32850                                  ;	(ah) = BUF_FLAGS value
 32851                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32852                                  
 32853                                  ;hkn; SS override
 32854                                  getb20:	; MSDOS 6.0
 32855 000058B7 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32856                                  	;mov	[di+8],cx
 32857 000058BC 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32858                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32859                                   	;mov	[di+6],dx
 32860 000058BF 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32861                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32862                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32863 000058C2 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32864                                  	;;mov	[di+0Ch],es
 32865                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32866 000058C5 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32867                                  	; 15/12/2022
 32868 000058C8 268A4600                	mov	al,[es:bp]
 32869                                  	;mov	al,[es:bp+0]
 32870                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32871                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32872                                  	;mov	[di+4],ax
 32873 000058CC 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32874                                  getb25:	
 32875                                  	; MSDOS 3.3
 32876                                  	;mov     ax,1
 32877                                  
 32878                                  	; MSDOS 6.0
 32879                                  	;mov	byte [di+0Ah],1
 32880 000058CF C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32881 000058D3 31C0                    	XOR	AX,AX
 32882                                  
 32883                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32884 000058D5 09F6                    	OR	SI,SI				; FAT sector ?
 32885 000058D7 740B                    	JZ	short getb30
 32886                                  
 32887                                  	;mov	al,[es:bp+8]
 32888 000058D9 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32889                                  	
 32890                                  	; MSDOS 6.0
 32891 000058DD 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32892                                  	;mov	ax,[es:bp+0Fh]
 32893 000058E0 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32894                                  						;  sectors
 32895                                  	; MSDOS 3.3
 32896                                  	;;mov	ah,[es:bp+0Fh]
 32897                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32898                                  
 32899                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32900                                  ;		is set
 32901                                  
 32902                                  getb30:	
 32903                                  	; MSDOS 6.0
 32904                                  	;mov	[di+0Bh],ax
 32905 000058E4 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32906                                  
 32907                                  	; MSDOS 3.3
 32908                                  	;;mov	[di+8],ax ; 15/08/2018	
 32909                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32910                                  
 32911 000058E7 E8BBFE                  	CALL	PLACEBUF
 32912                                  
 32913                                  ;hkn; SS override for next 4
 32914                                  getb35: 
 32915                                  	; 17/12/2022
 32916                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32917                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32918                                  	;MOV	[SS:CURBUF+2],DS
 32919                                  	;MOV	[SS:LastBuffer+2],DS
 32920                                  	;MOV	[SS:CURBUF],DI
 32921                                  	;MOV	[SS:LastBuffer],DI
 32922                                  	;CLC
 32923                                  
 32924                                  	; 17/12/2022
 32925                                  	; 07/12/2022
 32926                                  	; Retro DOS v4.0
 32927 000058EA 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32928 000058EF 36893E[1E00]            	mov	[ss:LastBuffer],di
 32929 000058F4 F8                      	clc
 32930                                  getb35x: ; 28/07/2019
 32931 000058F5 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32932 000058FA 36893E[E205]            	MOV	[ss:CURBUF],di
 32933                                  
 32934                                  ;	Return with 'C' set appropriately
 32935                                  ;	(dx) = caller's original value
 32936                                  
 32937                                  getbx:	
 32938 000058FF 16                      	push	ss
 32939 00005900 1F                      	pop	ds
 32940                                  	;retn
 32941                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32942                                  getbuffrb_retn:
 32943                                  ;flushbuf_retn:	; 17/12/2022
 32944 00005901 C3                      	retn
 32945                                  
 32946                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32947                                  ;----------------------------------------------------------------------------
 32948                                  ; Input:
 32949                                  ;	DS = DOSGROUP
 32950                                  ;	AL = Physical unit number local buffers only
 32951                                  ;	   = -1 for all units and all remote buffers
 32952                                  ; Function:
 32953                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32954                                  ;	Carry set if error (user FAILed to I 24)
 32955                                  ;	    Flush operation completed.
 32956                                  ; DS Preserved, all others destroyed (ES too)
 32957                                  ;----------------------------------------------------------------------------
 32958                                  
 32959                                  	; 20/05/2019 - Retro DOS v4.0
 32960                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32961                                  
 32962                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32963                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32964                                  FLUSHBUF:
 32965                                  	; MSDOS 3.3
 32966                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32967                                  	;lds	di,[BUFFHEAD]
 32968                                  
 32969                                  	; MSDOS 6.0
 32970 00005902 E887FE                  	call	GETCURHEAD
 32971                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32972 00005905 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32973 0000590B 7508                    	jnz	short scan_buf_queue
 32974 0000590D 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32975 00005913 7423                    	je	short end_scan
 32976                                  	
 32977                                  scan_buf_queue:
 32978 00005915 E82900                  	call	CHECKFLUSH
 32979                                  	;push	ax  ; MSDOS 3.3
 32980                                  	; MSDOS 6.0
 32981                                  	;mov	ah,[di+4]
 32982 00005918 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32983 0000591B 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32984 00005920 7408                    	je	short free_the_buf
 32985                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32986 00005922 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32987 00005928 7405                    	jz	short dont_free_the_buf
 32988                                  	; MSDOS 3.3
 32989                                  	;;mov	al,[di+4]
 32990                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32991                                  	;cmp	[SS:WPERR],al					;hkn;
 32992                                  	; 15/08/2018
 32993                                  	;jne	short dont_free_the_buf	
 32994                                  free_the_buf:
 32995                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32996 0000592A C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32997                                  dont_free_the_buf:
 32998                                  	;pop	ax  ; MSDOS 3.3 	   	
 32999                                  
 33000                                  	; MSDOS 3.3
 33001                                  	;mov	di,[DI]
 33002                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 33003                                  	;
 33004                                  	; 15/08/2018
 33005                                  	;lds	di,[di]
 33006                                  	;
 33007                                  	;cmp	di,-1 ; 0FFFFh
 33008                                  	;jnz	short scan_buf_queue 
 33009                                  	
 33010                                  	; MSDOS 6.0
 33011 0000592F 8B3D                    	mov	di,[di]
 33012                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 33013 00005931 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 33014 00005936 75DD                    	jne	short scan_buf_queue
 33015                                  
 33016                                  end_scan:
 33017 00005938 16                      	push	ss
 33018 00005939 1F                      	pop	ds
 33019                                  	; 01/08/2018 - Retro DOS v3.0
 33020                                  	;cmp	byte [FAILERR],0
 33021                                  	;jne	short bad_flush
 33022                                  	;retn
 33023                                  ;bad_flush:
 33024                                  	;stc
 33025                                  	;retn
 33026                                  
 33027                                  	; 17/12/2022
 33028                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33029                                  	; 01/08/2018 - Retro DOS v3.0
 33030 0000593A 803E[4A03]01            	cmp	byte [FAILERR],1
 33031 0000593F F5                      	cmc
 33032                                  flushbuf_retn:
 33033 00005940 C3                      	retn
 33034                                  	
 33035                                  	; 17/12/2022
 33036                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33037                                  	;cmp	byte [FAILERR],0
 33038                                  	;jne	short bad_flush
 33039                                  	;retn
 33040                                  ;bad_flush:
 33041                                  	;stc
 33042                                  	;retn
 33043                                  
 33044                                  ;----------------------------------------------------------------------------
 33045                                  ;
 33046                                  ; Procedure Name : CHECKFLUSH
 33047                                  ;
 33048                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 33049                                  ;	   DS:DI - pointer to buffer
 33050                                  ;
 33051                                  ; Function : Write out a buffer if it is dirty
 33052                                  ;
 33053                                  ; Carry set if problem (currently user FAILed to I 24)
 33054                                  ;
 33055                                  ;----------------------------------------------------------------------------
 33056                                  
 33057                                  CHECKFLUSH:
 33058                                  	; MSDOS 6.0
 33059 00005941 B4FF                    	mov	ah,-1	; 01/08/2018 Retro DOS v3.0
 33060                                  	;cmp	[di+4],ah
 33061 00005943 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 33062 00005946 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 33063 00005948 38C4                    	CMP	AH,AL			; 
 33064 0000594A 7406                    	JZ	short DOBUFFER		; do this buffer
 33065                                  	;cmp	al,[di+4]
 33066 0000594C 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 33067 0000594F F8                      	CLC
 33068 00005950 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 33069                                  DOBUFFER:
 33070                                  	;test	byte [di+5],40h
 33071 00005952 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 33072 00005956 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 33073 00005958 50                      	PUSH	AX
 33074                                  	;push	word [di+4]
 33075 00005959 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 33076 0000595C E80B00                  	CALL	BUFWRITE
 33077 0000595F 58                      	POP	AX
 33078 00005960 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 33079                                  	;and	ah,0BFh
 33080 00005962 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 33081                                  	;mov	[di+4],ax
 33082 00005965 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 33083                                  LEAVE_BUF:
 33084 00005968 58                      	POP	AX			; Search info
 33085                                  checkflush_retn:
 33086 00005969 C3                      	retn
 33087                                  
 33088                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 33089                                  ;----------------------------------------------------------------------------
 33090                                  ;
 33091                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 33092                                  ;
 33093                                  ;	ENTRY	DS:DI Points to the buffer
 33094                                  ;
 33095                                  ;	EXIT	Buffer marked free
 33096                                  ;		Carry set if error (currently user FAILed to I 24)
 33097                                  ;
 33098                                  ;	USES	All buf DS:DI
 33099                                  ;		HIGH_SECTOR
 33100                                  ;----------------------------------------------------------------------------
 33101                                  
 33102                                  	; 20/05/2019 - Retro DOS v4.0
 33103                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 33104                                  
 33105                                  
 33106                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33107                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 33108                                  
 33109                                  BUFWRITE:
 33110                                  	; 10/09/2018
 33111                                  	; 01/08/2018 - Retro DOS v3.0
 33112                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 33113 0000596A B8FF00                  	MOV	AX,00FFH
 33114                                  	;xchg	ax,[di+4]
 33115 0000596D 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 33116 00005970 3CFF                    	CMP	AL,0FFH
 33117 00005972 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 33118                                  	;test	ah,40h
 33119 00005974 F6C440                  	test	AH,buf_dirty
 33120 00005977 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 33121                                  	; MSDOS 6.0
 33122 00005979 E88E00                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 33123                                  
 33124                                  ;hkn; SS override
 33125 0000597C 363A06[2203]            	CMP	AL,[SS:WPERR]
 33126 00005981 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 33127                                  
 33128                                  ;hkn; SS override
 33129                                  	; MSDOS 6.0
 33130 00005983 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 33131                                  	
 33132                                  	; 07/03/2024
 33133                                  	;;;les	bp,[di+10] ; MSDOS 3.3
 33134                                  	;;les	bp,[di+13] ; MSDOS 6.0
 33135                                  	;LES	BP,[DI+BUFFINFO.buf_DPB]
 33136                                  
 33137                                  	;;lea	bx,[di+16]
 33138                                  	;lea	bx,[di+20] ; MSDOS 6.0
 33139 00005987 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 33140                                  
 33141                                  ; 07/03/2024
 33142                                  %if 0
 33143                                  	;mov	dx,[di+6]
 33144                                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 33145                                  	
 33146                                  	; MSDOS 6.0
 33147                                  	;mov	cx,[di+8]
 33148                                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 33149                                  
 33150                                  ;hkn; SS override
 33151                                  	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 33152                                  %else
 33153                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 33154                                  	;;;
 33155                                  	;les	dx,[di+6]
 33156 0000598A C45506                  	les	dx,[di+BUFFINFO.buf_sector]
 33157 0000598D 368C06[0706]            	mov	[ss:HIGH_SECTOR],es
 33158                                  
 33159                                  	;;les	bp,[di+10] ; MSDOS 3.3
 33160                                  	;les	bp,[di+13] ; MSDOS 6.0
 33161 00005992 C46D0D                  	les	bp,[di+BUFFINFO.buf_DPB]
 33162                                  	;;;
 33163                                  %endif
 33164                                  
 33165 00005995 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 33166                                  	; MSDOS 3.3
 33167                                  	;;mov	cx,[DI+8]
 33168                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 33169                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 33170 00005998 30ED                    	XOR	CH,CH
 33171                                  	;;mov	ah,ch ; MSDOS 3.3
 33172                                  
 33173                                  ;hkn; SS override for ALLOWED
 33174                                  	;mov	byte [SS:ALLOWED],18h
 33175 0000599A 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 33176                                  	;test	byte [di+5],8
 33177                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 33178                                  	;test	ah,8
 33179 000059A0 F6C408                  	test	AH,buf_isDATA
 33180 000059A3 7406                    	JZ	short NO_IGNORE
 33181                                  	;or	byte [SS:ALLOWED],20h
 33182 000059A5 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 33183                                  NO_IGNORE:
 33184                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 33185                                  	; MSDOS 6.0
 33186                                  	;mov	ax,[di+11]
 33187 000059AB 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 33188                                  
 33189 000059AE 57                      	PUSH	DI		; Save buffer pointer
 33190 000059AF 31FF                    	XOR	DI,DI		; Indicate failure
 33191                                  
 33192 000059B1 1E                      	push	ds ; *
 33193 000059B2 53                      	push	bx ; **
 33194                                  WRTAGAIN:
 33195 000059B3 57                      	push	di ; ***
 33196 000059B4 51                      	push	cx ; ****
 33197 000059B5 50                      	push	ax ; *****
 33198                                  	;MOV	CX,1
 33199                                  	; 17/12/2022
 33200                                  	; ch = 0
 33201 000059B6 B101                    	mov	cl,1 ; 24/07/2019
 33202                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33203                                  	;mov	cx,1
 33204 000059B8 53                      	push	bx ; ******
 33205 000059B9 52                      	push	dx ; *******
 33206 000059BA 1E                      	push	ds ; ********
 33207                                  
 33208                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 33209                                  
 33210                                  	; MSDOS 6.0
 33211                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 33212                                  	; 22/09/2023
 33213 000059BB 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 33214 000059C0 7418                    	jz	short NBUFFINHMA
 33215 000059C2 51                      	push	cx
 33216 000059C3 06                      	push	es
 33217 000059C4 89DE                    	mov	si,bx
 33218 000059C6 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 33219 000059CA D1E9                    	shr	cx,1
 33220 000059CC 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 33221 000059D1 89FB                    	mov	bx,di
 33222 000059D3 FC                      	cld
 33223 000059D4 F3A5                    	rep	movsw
 33224 000059D6 06                      	push	es
 33225 000059D7 1F                      	pop	ds
 33226 000059D8 07                      	pop	es
 33227 000059D9 59                      	pop	cx
 33228                                  NBUFFINHMA:
 33229 000059DA E8AEDC                  	call	DWRITE		; Write out the dirty buffer
 33230 000059DD 1F                      	pop	ds ; ********
 33231 000059DE 5A                      	pop	dx ; *******
 33232 000059DF 5B                      	pop	bx ; ******
 33233 000059E0 58                      	pop	ax ; *****
 33234 000059E1 59                      	pop	cx ; ****
 33235 000059E2 5F                      	pop	di ; ***
 33236 000059E3 7201                    	JC	short NOSET
 33237 000059E5 47                      	INC	DI		; If at least ONE write succeedes, the operation
 33238                                  NOSET:				;	succeedes.
 33239 000059E6 01C2                    	ADD	DX,AX
 33240 000059E8 E2C9                    	LOOP	WRTAGAIN
 33241 000059EA 5B                      	pop	bx ; **
 33242 000059EB 1F                      	pop	ds ; *
 33243                                  	;OR	DI,DI		; Clears carry
 33244                                  	;JNZ	short BWROK	; At least one write worked
 33245                                  	;STC			; DI never got INCed, all writes failed.
 33246                                  	; 22/09/2023
 33247 000059EC 83FF01                  	cmp	di,1
 33248                                  BWROK:	
 33249 000059EF 5F                      	POP	DI
 33250 000059F0 C3                      	retn
 33251                                  
 33252                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 33253                                  ;----------------------------------------------------------------------------
 33254                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 33255                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 33256                                  ;	SC_DRIVE even if SC is disabled to save the testing
 33257                                  ;	code and time
 33258                                  ;
 33259                                  ;	ENTRY	ES:BP = drive parameter block
 33260                                  ;
 33261                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 33262                                  ;		[SC_DRIVE]= drive #
 33263                                  ;
 33264                                  ;	USES	Flags
 33265                                  ;----------------------------------------------------------------------------
 33266                                  
 33267                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33268                                  ; 04/05/2019 - Retro DOS v4.0
 33269                                  
 33270                                  SET_RQ_SC_PARMS:
 33271                                  ;hkn; SS override for all variables used in this procedure.
 33272 000059F1 50                      	push	ax
 33273                                  	;mov	ax,[es:bp+2]
 33274 000059F2 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 33275 000059F6 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 33276                                  	;;mov	al,[es:bp+0]
 33277                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33278                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 33279                                  	; 15/12/2022
 33280 000059FA 268A4600                	mov	al,[ES:BP]
 33281 000059FE 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 33282 00005A02 58                      	pop	ax
 33283                                  srspx:	
 33284 00005A03 C3                      	retn					;LB. return
 33285                                  
 33286                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 33287                                  ;----------------------------------------------------------------------------
 33288                                  ; Input:
 33289                                  ;	none
 33290                                  ; Function:
 33291                                  ;	increment dirty buffers count
 33292                                  ; Output:
 33293                                  ;	dirty buffers count is incremented
 33294                                  ;
 33295                                  ; All registers preserved
 33296                                  ;----------------------------------------------------------------------------
 33297                                  
 33298                                  INC_DIRTY_COUNT:
 33299                                  ;; BUGBUG  ---- remove this routine
 33300                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 33301 00005A04 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 33302 00005A09 C3                      	retn
 33303                                  
 33304                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 33305                                  ;----------------------------------------------------------------------------
 33306                                  ; Input:
 33307                                  ;	none
 33308                                  ; Function:
 33309                                  ;	decrement dirty buffers count
 33310                                  ; Output:
 33311                                  ;	dirty buffers count is decremented
 33312                                  ;
 33313                                  ; All registers preserved
 33314                                  ;----------------------------------------------------------------------------
 33315                                  
 33316                                  DEC_DIRTY_COUNT:
 33317 00005A0A 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 33318 00005A10 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 33319 00005A12 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 33320                                  					; error condition to underflow here? ;hkn;
 33321                                  ddcx:	
 33322 00005A17 C3                      	retn
 33323                                  
 33324                                  ;============================================================================
 33325                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 33326                                  ;============================================================================
 33327                                  ; 02/08/2018 - Retro DOS v3.0
 33328                                  ; 29/04/2019 - Retro DOS v4.0
 33329                                  
 33330                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 33331                                  
 33332                                  ; Pseudo EXEC system call for DOS
 33333                                  
 33334                                  ;	TITLE	MSPROC - process maintenance
 33335                                  ;	NAME	MSPROC
 33336                                  
 33337                                  ; =========================================================================
 33338                                  ;**	Process related system calls and low level routines for DOS 2.X.
 33339                                  ;	I/O specs are defined in DISPATCH.
 33340                                  ;
 33341                                  ;	$WAIT
 33342                                  ;	$EXEC
 33343                                  ;	$Keep_process
 33344                                  ;	Stay_resident
 33345                                  ;	$EXIT
 33346                                  ;	$ABORT
 33347                                  ;	abort_inner
 33348                                  ;
 33349                                  ;	Modification history:
 33350                                  ;
 33351                                  ;		Created: ARR 30 March 1983
 33352                                  ;		AN000	version 4.0 jan. 1988
 33353                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 33354                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 33355                                  ;
 33356                                  ;		M000	added support for loading programs into UMBs 7/9/90
 33357                                  ;
 33358                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 33359                                  ;		       dossym.inc. 7/30/90
 33360                                  ;		M005 - Support for EXE programs with out STACK segment and 
 33361                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 33362                                  ;		       stack is provided at the end of the program. Note that
 33363                                  ;		       only SP is changed.
 33364                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 33365                                  ;
 33366                                  ;		M028 - 4b04 implementation
 33367                                  ;
 33368                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 33369                                  ;			in memory block >= 64K, sp = 0. If memory block
 33370                                  ;			obtained is <64K, point sp at the end of the memory
 33371                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 33372                                  ;			added for a stack segment which may be needed if it
 33373                                  ;			is loaded in low memory situations.
 33374                                  ;
 33375                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 33376                                  ;
 33377                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 33378                                  ;			a bad environment if it reached 32767 bytes. Changed
 33379                                  ;			to allow 32768 bytes of environment.
 33380                                  ;
 33381                                  ;		M047 - Release the allocated UMB when we failed to load a 
 33382                                  ;		       COM file high. Also ensure that if the biggest block
 33383                                  ;		       into which we load the com file is less than 64K then
 33384                                  ;		       we provide atleast 256 bytes of stack to the user.
 33385                                  ;
 33386                                  ;		M050 - Made Lie table search CASE insensitive
 33387                                  ;
 33388                                  ;		M060 - Removed special version table from the kernal and
 33389                                  ;                      put it in a device drive which puts the address
 33390                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 33391                                  ;		       as a DWORD.
 33392                                  ;
 33393                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 33394                                  ;		       entry do not try to load low if there is no space in
 33395                                  ;		       UMBs.
 33396                                  ;
 33397                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 33398                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 33399                                  ;		       change return address to LeaveDos if AL=5.
 33400                                  ;
 33401                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 33402                                  ;                      controls building a version of MSDOS.SYS that only
 33403                                  ;                      runs programs from a fixed list (defined in the
 33404                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 33405                                  ;                      for details.  This feature is used to build a
 33406                                  ;                      "special" version of DOS that can be handed out to
 33407                                  ;                      OEM/ISV customers as part of a "service" disk.
 33408                                  ;
 33409                                  ; =========================================================================
 33410                                  
 33411                                  ;SAVEXIT  EQU  10
 33412                                  
 33413                                  ;BREAK	<$WAIT - return previous process error code>
 33414                                  ; =========================================================================
 33415                                  ;	$WAIT - Return previous process error code.
 33416                                  ;
 33417                                  ;	Assembler usage:
 33418                                  ;
 33419                                  ;	    MOV     AH, WaitProcess
 33420                                  ;	    INT     int_command
 33421                                  ;
 33422                                  ;	ENTRY	none
 33423                                  ;	EXIT	(ax) = exit code
 33424                                  ;	USES	all
 33425                                  ; =========================================================================
 33426                                  
 33427                                  	; 20/05/2019 - Retro DOS v4.0
 33428                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 33429                                  
 33430                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33431                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 33432                                  _$WAIT:
 33433                                  	; 02/08/2018 - Retro DOS v3.0
 33434                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 33435                                  
 33436 00005A18 31C0                    	xor	AX,AX
 33437 00005A1A 368706[3403]            	xchg	AX,[ss:exit_code]
 33438 00005A1F E90FAC                  	jmp	SYS_RET_OK
 33439                                  
 33440                                  ; =========================================================================
 33441                                  ;BREAK <$exec - load/go a program>
 33442                                  ;	EXEC.ASM - EXEC System Call
 33443                                  ;
 33444                                  ;
 33445                                  ; Assembler usage:
 33446                                  ;	    lds     DX, Name
 33447                                  ;	    les     BX, Blk
 33448                                  ;	    mov     AH, Exec
 33449                                  ;	    mov     AL, FUNC
 33450                                  ;	    int     INT_COMMAND
 33451                                  ;
 33452                                  ;	AL  Function
 33453                                  ;	--  --------
 33454                                  ;	 0  Load and execute the program.
 33455                                  ;	 1  Load, create the program header but do not
 33456                                  ;	    begin execution.
 33457                                  ;	 3  Load overlay. No header created.
 33458                                  ;
 33459                                  ;	    AL = 0 -> load/execute program
 33460                                  ;
 33461                                  ;	    +---------------------------+
 33462                                  ;	    | WORD segment address of	|
 33463                                  ;	    | environment.		|
 33464                                  ;	    +---------------------------+
 33465                                  ;	    | DWORD pointer to ASCIZ	|
 33466                                  ;	    | command line at 80h	|
 33467                                  ;	    +---------------------------+
 33468                                  ;	    | DWORD pointer to default	|
 33469                                  ;	    | FCB to be passed at 5Ch	|
 33470                                  ;	    +---------------------------+
 33471                                  ;	    | DWORD pointer to default	|
 33472                                  ;	    | FCB to be passed at 6Ch	|
 33473                                  ;	    +---------------------------+
 33474                                  ;
 33475                                  ;	    AL = 1 -> load program
 33476                                  ;
 33477                                  ;	    +---------------------------+
 33478                                  ;	    | WORD segment address of	|
 33479                                  ;	    | environment.		|
 33480                                  ;	    +---------------------------+
 33481                                  ;	    | DWORD pointer to ASCIZ	|
 33482                                  ;	    | command line at 80h	|
 33483                                  ;	    +---------------------------+
 33484                                  ;	    | DWORD pointer to default	|
 33485                                  ;	    | FCB to be passed at 5Ch	|
 33486                                  ;	    +---------------------------+
 33487                                  ;	    | DWORD pointer to default	|
 33488                                  ;	    | FCB to be passed at 6Ch	|
 33489                                  ;	    +---------------------------+
 33490                                  ;	    | DWORD returned value of	|
 33491                                  ;	    | CS:IP			|
 33492                                  ;	    +---------------------------+
 33493                                  ;	    | DWORD returned value of	|
 33494                                  ;	    | SS:IP			|
 33495                                  ;	    +---------------------------+
 33496                                  ;
 33497                                  ;	    AL = 3 -> load overlay
 33498                                  ;
 33499                                  ;	    +---------------------------+
 33500                                  ;	    | WORD segment address where|
 33501                                  ;	    | file will be loaded.	|
 33502                                  ;	    +---------------------------+
 33503                                  ;	    | WORD relocation factor to |
 33504                                  ;	    | be applied to the image.	|
 33505                                  ;	    +---------------------------+
 33506                                  ;
 33507                                  ; Returns:
 33508                                  ;	    AX = error_invalid_function
 33509                                  ;	       = error_bad_format
 33510                                  ;	       = error_bad_environment
 33511                                  ;	       = error_not_enough_memory
 33512                                  ;	       = error_file_not_found
 33513                                  ; =========================================================================
 33514                                  ;
 33515                                  ;   Revision history:
 33516                                  ;
 33517                                  ;	 A000	version 4.00  Jan. 1988
 33518                                  ;
 33519                                  ; =========================================================================
 33520                                  
 33521                                  Exec_Internal_Buffer		EQU	OPENBUF
 33522                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 33523                                  
 33524                                  ; =========================================================================
 33525                                  
 33526                                  ;IF1		; warning message on buffers
 33527                                  ;%out	Please make sure that the following are contiguous and of the
 33528                                  ;%out	following sizes:
 33529                                  ;%out
 33530                                  ;%out	OpenBuf     128
 33531                                  ;%out	RenBuf	    128
 33532                                  ;%out	SearchBuf    53
 33533                                  ;%out	DummyCDS    curdirLen
 33534                                  ;ENDIF
 33535                                  
 33536                                  ; =========================================================================
 33537                                  
 33538                                  ; =========================================================================
 33539                                  ;
 33540                                  ; =========================================================================
 33541                                  
 33542                                  	; 20/05/2019 - Retro DOS v4.0
 33543                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 33544                                  
 33545                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33546                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 33547                                  	
 33548                                  _$EXEC:
 33549                                  	; 02/08/2018 - Retro DOS v3.0
 33550                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33551                                  
 33552                                  EXEC001S:
 33553                                  	;LocalVar    Exec_Blk		,DWORD
 33554                                  	;LocalVar    Exec_Func		,BYTE
 33555                                  	;LocalVar    Exec_Load_High	,BYTE
 33556                                  	;LocalVar    Exec_FH		,WORD
 33557                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33558                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33559                                  	;LocalVar    Exec_Environ	,WORD
 33560                                  	;LocalVar    Exec_Size		,WORD
 33561                                  	;LocalVar    Exec_Load_Block	,WORD
 33562                                  	;LocalVar    Exec_DMA		,WORD
 33563                                  	;LocalVar    ExecNameLen 	,WORD
 33564                                  	;LocalVar    ExecName		,DWORD
 33565                                  	;
 33566                                  	;LocalVar    Exec_DMA_Save	,WORD
 33567                                  	;LocalVar    Exec_NoStack	,BYTE
 33568                                  
 33569                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33570                                  	;%define	Exec_Blk	dword [bp-4]
 33571                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33572                                  	%define		Exec_BlkL	word [bp-4]	
 33573                                  	%define		Exec_BlkH	word [bp-2]
 33574                                  	%define		Exec_Func	byte [bp-5]
 33575                                  	%define		Exec_Load_High	byte [bp-6]
 33576                                  	%define		Exec_FH		word [bp-8]
 33577                                  	%define		Exec_Rel_Fac	word [bp-10]
 33578                                  	%define		Exec_Res_Len_Para word [bp-12]
 33579                                  	%define		Exec_Environ	word [bp-14]
 33580                                  	%define		Exec_Size	word [bp-16]
 33581                                  	%define		Exec_Load_Block	word [bp-18]
 33582                                  	%define		Exec_DMA	word [bp-20]
 33583                                  	%define		ExecNameLen	word [bp-22]
 33584                                  	;%define	ExecName	dword [bp-26]
 33585                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33586                                  	%define		ExecNameL	word [bp-26]	
 33587                                  	%define		ExecNameH	word [bp-24]
 33588                                  	; MSDOS 6.0
 33589                                  	%define		Exec_DMA_Save	word [bp-28]
 33590                                  	%define		Exec_NoStack	byte [bp-29]
 33591                                  	
 33592                                  	; ==================================================================
 33593                                  	; validate function
 33594                                  	; ==================================================================
 33595                                  		      	
 33596                                  	; M068 - Start
 33597                                  	;
 33598                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33599                                  	; possibility that the count may not be decremented all the way to
 33600                                  	; 0. A typical case is if the program for which we intended to keep 
 33601                                  	; the A20 off for a sufficiently long time (A20OFF_COUNT int 21 
 33602                                  	; calls), exits pre-maturely due to error conditions.
 33603                                  
 33604                                  	; MSDOS 6.0
 33605 00005A22 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33606                                  
 33607                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33608                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33609                                  	; bit set in DOS_FLAG by ExecReady is not cleared in msdisp.asm
 33610                                  
 33611 00005A28 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33612                                  	;jne	short @f
 33613 00005A2A 7505                    	jne	short Exec_@f		; N: continue
 33614                                  					; Y: change ret addr. to LeaveDos.
 33615 00005A2C 59                      	pop	cx			; Note CX is not input to ExecReady
 33616 00005A2D B9[0404]                	mov	cx,LeaveDOS
 33617 00005A30 51                      	push	cx
 33618                                  ;@@:
 33619                                  Exec_@f:
 33620                                  	; M068 - End
 33621                                  	
 33622                                  	;Enter
 33623                                  
 33624 00005A31 55                      	push	bp
 33625 00005A32 89E5                    	mov	bp,sp
 33626                                  	;;sub	sp,26	; MSDOS 3.3
 33627                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33628                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33629                                  	; 17/12/2022
 33630                                  	; 20/05/2019
 33631 00005A34 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33632                                  
 33633                                  	; MSDOS 6.0
 33634 00005A37 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33635                                  					; M030
 33636 00005A39 7614                    	jna	short Exec_Check_2
 33637                                  
 33638                                  	; MSDOS 3.3
 33639                                  	;cmp	AL,3
 33640                                  	;jna	short Exec_Check_2
 33641                                  
 33642                                  Exec_Bad_Fun:
 33643 00005A3B 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33644                                  					; Extended Error Locus	;smr;SS Override
 33645                                  	;mov	al,1
 33646 00005A41 B001                    	mov	al,error_invalid_function
 33647                                  
 33648                                  Exec_Ret_Err:
 33649                                  	;Leave
 33650 00005A43 89EC                    	mov	sp,bp
 33651 00005A45 5D                      	pop	bp
 33652                                  	;transfer SYS_RET_ERR
 33653 00005A46 E9F1AB                  	jmp	SYS_RET_ERR
 33654                                  
 33655                                  	; MSDOS 6.0
 33656                                  ExecReadyJ:
 33657 00005A49 E8A617                  	call	ExecReady		; M028
 33658 00005A4C E90204                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33659                                  
 33660                                  Exec_Check_2:
 33661 00005A4F 3C02                    	cmp	AL,2			
 33662 00005A51 74E8                    	je	short Exec_Bad_Fun
 33663                                  
 33664                                  	; MSDOS 6.0
 33665 00005A53 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33666 00005A55 74E4                    	je	short Exec_Bad_Fun
 33667                                  	
 33668 00005A57 3C05                    	cmp	al,5			; M028 ; M030
 33669 00005A59 74EE                    	je	short ExecReadyJ	; M028
 33670                                  
 33671                                  	;mov	[bp-4],bx
 33672 00005A5B 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33673                                  	;mov	[bp-2],es
 33674 00005A5E 8C46FE                  	mov	Exec_BlkH,ES
 33675                                  	;mov	[bp-5],al
 33676 00005A61 8846FB                  	mov	Exec_Func,AL
 33677                                  	;mov	byte [bp-6],0
 33678 00005A64 C646FA00                	mov	Exec_Load_High,0
 33679                                  
 33680                                  	;mov	[bp-26],dx
 33681 00005A68 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33682                                  	;mov	[bp-24],ds
 33683 00005A6B 8C5EE8                  	mov	ExecNameH,DS
 33684 00005A6E 89D6                    	mov	SI,DX			; move pointer to convenient place
 33685                                  	;invoke	DStrLen
 33686 00005A70 E864B7                  	call	DStrLen
 33687                                  	;mov	[bp-22],cx
 33688 00005A73 894EEA                  	mov	ExecNameLen,CX		; save length
 33689                                  
 33690                                  	; MSDOS 6.0
 33691 00005A76 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33692 00005A7A 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33693                                  
 33694 00005A7E 30C0                    	xor	AL,AL			; open for reading
 33695 00005A80 55                      	push	BP
 33696                                  
 33697                                  	; MSDOS 6.0
 33698                                  	;or	byte [ss:DOS_FLAG],1
 33699 00005A81 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33700                                  					; the redir that this open call is
 33701                                  					; due to an exec.
 33702                                  
 33703                                  	;invoke	$OPEN			; is the file there?
 33704 00005A87 E8E212                  	call	_$OPEN
 33705                                  
 33706                                  	; MSDOS 6.0
 33707 00005A8A 9C                      	pushf
 33708                                  	; 02/06/2019
 33709                                  	;and	byte [ss:DOS_FLAG],0FEh
 33710 00005A8B 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33711 00005A91 9D                      	popf
 33712                                  
 33713 00005A92 5D                      	pop	BP
 33714                                  
 33715                                  	; MSDOS 3.3 & MSDOS 6.0
 33716 00005A93 72AE                    	jc	short Exec_Ret_Err
 33717                                  
 33718                                  	;mov	[bp-8],ax
 33719 00005A95 8946F8                  	mov	Exec_FH,AX
 33720 00005A98 89C3                    	mov	BX,AX
 33721 00005A9A 30C0                    	xor	AL,AL
 33722                                  	;invoke	$Ioctl
 33723 00005A9C E865C7                  	call	_$IOCTL
 33724 00005A9F 7207                    	jc	short Exec_BombJ
 33725                                  
 33726                                  	;test	dl,80h
 33727 00005AA1 F6C280                  	test	DL,devid_ISDEV
 33728 00005AA4 740A                    	jz	short Exec_Check_Environ
 33729                                  
 33730                                  	;mov	al,2
 33731 00005AA6 B002                    	mov	AL,error_file_not_found
 33732                                  Exec_BombJ:
 33733 00005AA8 E9C800                  	jmp	Exec_Bomb
 33734                                  
 33735                                  BadEnv:
 33736                                  	;mov	al,0Ah
 33737 00005AAB B00A                    	mov	AL,error_bad_environment
 33738 00005AAD E9C300                  	jmp	Exec_Bomb
 33739                                  
 33740                                  Exec_Check_Environ:
 33741                                  	;mov	word [bp-18],0
 33742 00005AB0 C746EE0000              	mov	Exec_Load_Block,0
 33743                                  	;mov	word [bp-14],0
 33744 00005AB5 C746F20000              	mov	Exec_Environ,0
 33745                                  					; overlays... no environment
 33746                                  	;test	byte [bp-5],2
 33747 00005ABA F646FB02                	test	Exec_Func,exec_func_overlay
 33748 00005ABE 7552                    	jnz	short Exec_Read_Header
 33749                                  
 33750                                  	;lds	si,[bp-4]
 33751 00005AC0 C576FC                  	lds	SI,Exec_Blk		; get block
 33752 00005AC3 8B04                    	mov	ax,[SI]
 33753                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33754 00005AC5 09C0                    	or	AX,AX
 33755 00005AC7 750C                    	jnz	short Exec_Scan_Env
 33756                                  
 33757 00005AC9 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33758                                  	;mov	ax,[44]
 33759 00005ACE A12C00                  	mov	AX,[PDB.ENVIRON]
 33760                                  
 33761                                  ; MSDOS 6.0
 33762                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33763                                  ;
 33764                                  ; Exec_environ is being correctly initialized after the environment has been
 33765                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33766                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33767                                  ; parent's environment.
 33768                                  ;	mov	Exec_Environ,AX
 33769                                  ;
 33770                                  ;----------------------------------------------------------------------------
 33771                                  
 33772                                  	;mov	[bp-14],ax
 33773                                  	;mov	Exec_Environ,ax
 33774                                  
 33775 00005AD1 09C0                    	or	AX,AX
 33776 00005AD3 743D                    	jz	short Exec_Read_Header
 33777                                  
 33778                                  Exec_Scan_Env:
 33779 00005AD5 8EC0                    	mov	ES,AX
 33780 00005AD7 31FF                    	xor	DI,DI
 33781                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33782 00005AD9 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33783 00005ADC 30C0                    	xor	AL,AL
 33784                                  
 33785                                  Exec_Get_Environ_Len:
 33786 00005ADE F2AE                    	repnz	scasb			; find that nul byte
 33787 00005AE0 75C9                    	jnz	short BadEnv
 33788                                  
 33789 00005AE2 49                      	dec	CX			; Dec CX for the next nul byte test
 33790 00005AE3 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33791                                  
 33792 00005AE5 AE                      	scasb				; is there another nul byte?
 33793 00005AE6 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33794                                  
 33795 00005AE8 57                      	push	DI
 33796                                  	;lea	bx,[DI+11h]
 33797 00005AE9 8D5D11                  	lea	BX,[DI+0Fh+2]
 33798                                  	;add	bx,[bp-22]
 33799 00005AEC 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33800                                  					; remember argv[0] length
 33801                                  					; round up and remember argc
 33802 00005AEF B104                    	mov	CL,4
 33803 00005AF1 D3EB                    	shr	BX,CL			; number of paragraphs needed
 33804 00005AF3 06                      	push	ES
 33805                                  	;invoke	$Alloc			; can we get the space?
 33806 00005AF4 E83706                  	call	_$ALLOC
 33807 00005AF7 1F                      	pop	DS
 33808 00005AF8 59                      	pop	CX
 33809                                  
 33810                                  	;jnc	short Exec_Save_Environ
 33811                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33812                                  	; 17/12/2022
 33813 00005AF9 7272                    	jc	short Exec_No_Mem ; 02/06/2019
 33814                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33815                                  	;jnc	short Exec_Save_Environ
 33816                                  	;jmp	SHORT Exec_No_Mem
 33817                                  
 33818                                  Exec_Save_Environ:
 33819 00005AFB 8EC0                    	mov	ES,AX
 33820                                  	;mov	[bp-14],ax
 33821 00005AFD 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33822 00005B00 31F6                    	xor	SI,SI
 33823 00005B02 89F7                    	mov	DI,SI
 33824 00005B04 F3A4                    	rep	movsb			; copy the environment
 33825 00005B06 B80100                  	mov	AX,1
 33826 00005B09 AB                      	stosw
 33827                                  	;lds	si,[bp-26]
 33828 00005B0A C576E6                  	lds	SI,ExecName
 33829                                  	;mov	cx,[bp-22]
 33830 00005B0D 8B4EEA                  	mov	CX,ExecNameLen
 33831 00005B10 F3A4                    	rep	movsb
 33832                                  
 33833                                  Exec_Read_Header:
 33834                                  	; We read in the program header into the above data area and
 33835                                  	; determine where in this memory the image will be located.
 33836                                  
 33837                                  	;Context DS
 33838 00005B12 16                      	push	ss
 33839 00005B13 1F                      	pop	ds
 33840                                  	;mov	cx,26
 33841 00005B14 B91A00                  	mov	CX,exec_header_len	; header size
 33842 00005B17 BA[C80F]                	mov	DX,exec_signature
 33843 00005B1A 06                      	push	ES
 33844 00005B1B 1E                      	push	DS
 33845 00005B1C E87704                  	call	ExecRead
 33846 00005B1F 1F                      	pop	DS
 33847 00005B20 07                      	pop	ES
 33848 00005B21 724E                    	jc	short Exec_Bad_File
 33849                                  
 33850 00005B23 09C0                    	or	AX,AX
 33851 00005B25 744A                    	jz	short Exec_Bad_File
 33852                                  	;cmp	ax,26
 33853 00005B27 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33854 00005B2A 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33855                                  
 33856 00005B2C F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33857 00005B32 7504                    	jnz	short Exec_Check_Sig
 33858                                  
 33859                                  	;mov	byte [bp-6],0FFh
 33860 00005B34 C646FAFF                	mov	Exec_Load_High,-1
 33861                                  
 33862                                  Exec_Check_Sig:
 33863 00005B38 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33864                                  	;cmp	ax,5A4Dh ; 'MZ'
 33865 00005B3B 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33866 00005B3E 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33867                                  
 33868                                  	;cmp	ax,4D5Ah ; 'ZM'
 33869 00005B40 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33870 00005B43 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33871                                  
 33872                                  Exec_Com_Filej:
 33873 00005B45 E9E701                  	jmp	Exec_Com_File
 33874                                  
 33875                                  	; We have the program header... determine memory requirements
 33876                                  
 33877                                  Exec_Save_Start:
 33878 00005B48 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33879 00005B4B B105                    	mov	CL,5			; convert to paragraphs
 33880 00005B4D D3E0                    	shl	AX,CL
 33881 00005B4F 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33882                                  	;mov	[bp-12],ax
 33883 00005B53 8946F4                  	mov	Exec_Res_Len_Para,AX
 33884                                  
 33885                                  		; Do we need to allocate memory?
 33886                                  		; Yes if function is not load-overlay
 33887                                  
 33888                                  	;test	byte [bp-5],2
 33889 00005B56 F646FB02                	test	Exec_Func,exec_func_overlay
 33890 00005B5A 7443                    	jz	short Exec_Allocate	; allocation of space
 33891                                  
 33892                                  		; get load address from block
 33893                                  
 33894                                  	;les	di,[bp-4]
 33895 00005B5C C47EFC                  	les	DI,Exec_Blk
 33896                                  
 33897                                  ; 07/03/2024
 33898                                  %if 0
 33899                                  	mov	ax,[es:di]
 33900                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33901                                  	;mov	[bp-20],ax
 33902                                  	mov	Exec_DMA,AX
 33903                                  
 33904                                  	; 17/12/2022
 33905                                  	;;mov	ax,[es:di+2]
 33906                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33907                                  	;;mov	[bp-10],ax
 33908                                  	;mov	Exec_Rel_Fac,AX
 33909                                  
 33910                                  	; 17/12/2022
 33911                                  	; 30/11/2022 (!most proper code!)
 33912                                  	;mov	dx,[es:di+2]
 33913                                  	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33914                                  	;mov	[bp-10],dx
 33915                                  	mov	Exec_Rel_Fac,dx
 33916                                  %else
 33917                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 33918                                  	;;;
 33919 00005B5F 06                      	push	es
 33920 00005B60 26C405                  	les	ax,[es:di]
 33921                                  	;les	ax,[ES:DI+EXEC3.load_addr]
 33922                                  	;mov	[bp-20],ax
 33923 00005B63 8946EC                  	mov	Exec_DMA,ax
 33924                                  	;mov	[bp-10],es
 33925 00005B66 8C46F6                  	mov	Exec_Rel_Fac,es
 33926 00005B69 07                      	pop	es
 33927                                  	;;;
 33928                                  %endif
 33929                                  	; ax = Exec_DMA
 33930 00005B6A E9DE00                  	jmp	Exec_Find_Res
 33931                                  
 33932                                  ; 17/12/2022
 33933                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33934                                  ; 27/09/2023
 33935                                  %if 0
 33936                                  	; 02/06/2019 - Retro DOS v4.0
 33937                                  	;mov	ax,[bp-20]  ; *+*
 33938                                  	mov	AX,Exec_DMA ; *+*
 33939                                  	; 10/08/2018
 33940                                  	jmp	Exec_Find_Res		; M000
 33941                                  %endif
 33942                                  
 33943                                  Exec_No_Mem:
 33944                                  	;mov	al,8
 33945 00005B6D B008                    	mov	AL,error_not_enough_memory
 33946 00005B6F EB02                    	jmp	short Exec_Bomb
 33947                                  
 33948                                  Exec_Bad_File:
 33949                                  	;mov	al,0Bh
 33950 00005B71 B00B                    	mov	AL,error_bad_format
 33951                                  
 33952                                  Exec_Bomb:
 33953                                  	;mov	bx,[bp-8]
 33954 00005B73 8B5EF8                  	mov	BX,Exec_FH
 33955 00005B76 E83604                  	call	Exec_Dealloc
 33956                                  	;LeaveCrit CritMem
 33957 00005B79 E881B7                  	call	LCritMEM
 33958                                  	;save	<AX,BP>
 33959 00005B7C 50                      	push	ax
 33960 00005B7D 55                      	push	bp
 33961                                  	;invoke	$CLOSE
 33962 00005B7E E82D0A                  	call	_$CLOSE
 33963                                  	;restore <BP,AX>
 33964 00005B81 5D                      	pop	bp
 33965 00005B82 58                      	pop	ax
 33966 00005B83 E9BDFE                  	jmp	Exec_Ret_Err
 33967                                  
 33968                                  Exec_Chk_Mem: 
 33969                                  
 33970                                  	; 24/09/2023
 33971                                  	; ds = DOSDATA
 33972                                  ; 17/12/2022
 33973                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33974                                  ;%if 0
 33975                                  	; MSDOS 6.0    			; M063 - Start
 33976                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33977                                  	; 10/06/2019
 33978 00005B86 A0[0203]                	mov	al,[AllocMethod]
 33979                                  	;mov	bl,[ss:ALLOCMSAVE]
 33980 00005B89 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33981                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33982 00005B8D 881E[0203]              	mov	[AllocMethod],bl
 33983                                  	
 33984 00005B91 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33985 00005B94 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33986                                  	;				; N: continue
 33987                                  	;
 33988 00005B96 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33989 00005B98 74D3                    	jz	short Exec_No_Mem	; N: no memory
 33990                                  	; 02/06/2019
 33991                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33992 00005B9A A1[8A00]                	mov	ax,[SAVE_AX]
 33993                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33994                                  					; M063 - End
 33995 00005B9D EB2B                    	jmp	short Exec_Norm_Alloc1
 33996                                  ;%endif
 33997                                  
 33998                                  ; 17/12/2022
 33999                                  %if 0
 34000                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34001                                  	; MSDOS 6.0    			; M063 - Start
 34002                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 34003                                  	mov	bl,[ss:ALLOCMSAVE]
 34004                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 34005                                  
 34006                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 34007                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 34008                                  	;				; N: continue
 34009                                  	;
 34010                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 34011                                  	jz	short Exec_No_Mem	; N: no memory
 34012                                  
 34013                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 34014                                  	jmp	short Exec_Norm_Alloc	;    Try again
 34015                                  					; M063 - End
 34016                                  %endif
 34017                                  
 34018                                  Exec_Allocate:
 34019                                  	; 09/09/2018
 34020                                  
 34021                                  	; M005 - START
 34022                                  	; If there is no STACK segment for this exe file and if this
 34023                                  	; not an overlay and the resident size is less than 64K - 
 34024                                  	; 256 bytes we shall add 256 bytes to the programs 
 34025                                  	; resident memory requirement and set Exec_SP to this value.
 34026                                  	
 34027                                  	; 17/12/2022
 34028 00005B9F 29DB                    	sub	bx,bx ; 0	
 34029                                  
 34030                                  	; MSDOS 6.0
 34031                                  	;;mov	byte [bp-29],0
 34032                                  	;mov	Exec_NoStack,0
 34033                                  	; 17/12/2022
 34034 00005BA1 885EE3                  	mov	Exec_NoStack,bl ; 0
 34035 00005BA4 391E[D60F]              	cmp	[exec_SS],bx ; 0
 34036                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 34037 00005BA8 7511                    	jne	short ea1		; Y: continue normal processing
 34038 00005BAA 391E[D80F]              	cmp	[exec_SP],bx ; 0
 34039                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 34040 00005BAE 750B                    	jne	short ea1		; Y: continue normal processing
 34041                                  
 34042                                  	;inc	byte [bp-29]
 34043 00005BB0 FE46E3                  	inc	Exec_NoStack
 34044 00005BB3 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 34045 00005BB6 7303                    	jae	short ea1		; Y: don't set Exec_SP
 34046                                  
 34047 00005BB8 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 34048                                  ea1:
 34049                                  	; M005 - END
 34050                                  
 34051                                  	; MSDOS 6.0			; M000 - start
 34052                                  	; 20/05/2019
 34053                                  	; (ds = ss = DOSDATA)
 34054 00005BBB F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 34055                                  					; Q: is the alloc strat high_first
 34056 00005BC0 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 34057                                  					; Y: set high_only bit
 34058 00005BC2 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 34059                                  					; M000 - end
 34060                                  Exec_Norm_Alloc:
 34061 00005BC7 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd
 34062                                  Exec_Norm_Alloc1:	; 02/06/2019
 34063                                  					; M000: attempt at allocating memory
 34064                                  	; MSDOS 3.3
 34065                                  	;push	ax			; M000
 34066                                  
 34067 00005BCA BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 34068 00005BCD 1E                      	push	DS
 34069                                  	;invoke	$Alloc			; should have carry set and BX has max
 34070 00005BCE E85D05                  	call	_$ALLOC
 34071 00005BD1 1F                      	pop	DS
 34072                                  
 34073                                  	; MSDOS 6.0
 34074 00005BD2 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 34075                                  	; MSDOS 3.3
 34076                                  	;pop	ax			; M000
 34077                                  
 34078 00005BD5 83C010                  	add	AX,10h			; room for header
 34079 00005BD8 83FB11                  	cmp	BX,11h			; enough room for a header
 34080                                  	; MSDOS 6.0
 34081 00005BDB 72A9                    	jb	short Exec_Chk_Mem	; M000
 34082                                  	; MSDOS 3.3	
 34083                                  	;jb	short Exec_No_Mem
 34084                                  
 34085 00005BDD 39D8                    	cmp	AX,BX			; is there enough for bare image?
 34086                                  	; MSDOS 6.0
 34087 00005BDF 77A5                    	ja	short Exec_Chk_Mem	; M000
 34088                                  	; MSDOS 3.3
 34089                                  	;ja	short Exec_No_Mem
 34090                                  
 34091                                  	;test	byte [bp-6],0FFh
 34092 00005BE1 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 34093 00005BE5 7518                    	jnz	short Exec_BX_Max	; use max
 34094                                  
 34095                                  	; 09/09/2018
 34096                                  
 34097 00005BE7 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 34098                                  	; MSDOS 6.0
 34099 00005BEB 7299                    	jc	short Exec_Chk_Mem	; M000
 34100                                  	; MSDOS 3.3
 34101                                  	;jc	short Exec_No_Mem
 34102                                  
 34103 00005BED 39D8                    	cmp	AX,BX			; enough space?
 34104                                  	; MSDOS 6.0
 34105 00005BEF 7795                    	ja	short Exec_Chk_Mem	; M000: nope...
 34106                                  	; MSDOS 3.3
 34107                                  	;ja	short Exec_No_Mem
 34108                                  
 34109 00005BF1 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 34110 00005BF5 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 34111 00005BF9 7204                    	jc	short Exec_BX_Max
 34112                                  
 34113 00005BFB 39D8                    	cmp	AX,BX
 34114 00005BFD 7602                    	jbe	short Exec_Got_Block
 34115                                  
 34116                                  Exec_BX_Max:
 34117 00005BFF 89D8                    	mov	AX,BX
 34118                                  
 34119                                  Exec_Got_Block:
 34120                                  	; 03/08/2018 - Retro DOS v3.0
 34121                                  
 34122 00005C01 1E                      	push	DS
 34123 00005C02 89C3                    	mov	BX,AX
 34124                                  	;mov	[bp-16],bx
 34125 00005C04 895EF0                  	mov	Exec_Size,BX
 34126                                  	;invoke	$Alloc			; get the space
 34127 00005C07 E82405                  	call	_$ALLOC
 34128 00005C0A 1F                      	pop	DS
 34129                                  	; MSDOS 6.0
 34130                                  	;jc	short Exec_Chk_Mem	; M000
 34131                                  	; MSDOS 3.3
 34132                                  	;;jc	short Exec_No_Mem
 34133                                  	; 20/05/2019
 34134 00005C0B 7303                    	jnc	short ea0
 34135 00005C0D E976FF                  	jmp	Exec_Chk_Mem
 34136                                  ea0:
 34137                                  	; MSDOS 6.0
 34138 00005C10 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 34139 00005C14 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 34140                                  
 34141                                  ;M029; Begin changes
 34142                                  ; This code does special handling for programs with no stack segment. If so,
 34143                                  ;check if the current block is larger than 64K. If so, we do not modify
 34144                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 34145                                  ;case Exec_SS is not changed.
 34146                                  
 34147                                  	; MSDOS 6.0
 34148                                  	;cmp	byte [bp-29],0
 34149 00005C18 807EE300                	cmp	Exec_NoStack,0
 34150                                  	;je	@f
 34151 00005C1C 7412                    	je	short ea2
 34152                                  
 34153 00005C1E 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 34154                                  	;jae	@f			; Y: Exec_SP = 0
 34155 00005C22 730C                    	jae	short ea2
 34156                                  
 34157                                  ;Make Exec_SP point at the top of the memory block
 34158                                  
 34159 00005C24 B104                    	mov	cl,4
 34160 00005C26 D3E3                    	shl	bx,cl			; get byte offset
 34161 00005C28 81EB0001                	sub	bx,100h			; take care of PSP
 34162 00005C2C 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 34163                                  ea2:
 34164                                  ;@@:
 34165                                  ;M029; end changes
 34166                                  
 34167                                  	;mov	[bp-18],ax
 34168 00005C30 8946EE                  	mov	Exec_Load_Block,AX
 34169 00005C33 83C010                  	add	AX,10h
 34170                                  	;test	byte [bp-6],0FFh
 34171 00005C36 F646FAFF                	test	Exec_Load_High,-1
 34172 00005C3A 7409                    	jz	short Exec_Use_AX	; use ax for load info
 34173                                  
 34174                                  	;add	ax,[bp-16]
 34175 00005C3C 0346F0                  	add	AX,Exec_Size		; go to end
 34176                                  	;sub	ax,[bp-12]
 34177 00005C3F 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 34178 00005C42 83E810                  	sub	AX,10h			; drop off pdb
 34179                                  
 34180                                  Exec_Use_AX:
 34181                                  	;mov	[bp-10],ax
 34182 00005C45 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 34183                                  	;mov	[bp-20],ax
 34184 00005C48 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 34185                                  
 34186                                  	; Determine the location in the file of the beginning of
 34187                                  	; the resident
 34188                                  
 34189                                  ; 17/12/2022
 34190                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34191                                  ;%if 0
 34192                                  
 34193                                  Exec_Find_Res:
 34194                                  	; MSDOS 6.0
 34195                                  	;;mov	dx,[bp-20]
 34196                                  	;mov	DX,Exec_DMA ; *+*
 34197                                  	;;mov	[bp-28],dx
 34198                                  	;mov	Exec_DMA_Save,DX
 34199                                  
 34200                                  	; 17/12/2022
 34201                                  	; AX = Exec_DMA
 34202                                  
 34203                                  	; 02/06/2019 - Retro DOS v4.0
 34204                                  	;mov	[bp-28],ax ; *+*
 34205 00005C4B 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 34206                                  
 34207                                  ;%endif
 34208                                  
 34209                                  ; 17/12/2022
 34210                                  %if 0
 34211                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34212                                  Exec_Find_Res:
 34213                                  	;mov	dx,[bp-20]
 34214                                  	mov	DX,Exec_DMA ; *+*
 34215                                  	;mov	[bp-28],dx
 34216                                  	mov	Exec_DMA_Save,DX
 34217                                  %endif
 34218                                  
 34219                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34220 00005C4E 8B16[D00F]              	mov	DX,[exec_par_dir]
 34221 00005C52 52                      	push	DX
 34222 00005C53 B104                    	mov	CL,4
 34223 00005C55 D3E2                    	shl	DX,CL			; low word of location
 34224 00005C57 58                      	pop	AX
 34225 00005C58 B10C                    	mov	CL,12
 34226 00005C5A D3E8                    	shr	AX,CL			; high word of location
 34227 00005C5C 89C1                    	mov	CX,AX			; CX <- high
 34228                                  
 34229                                  		; Read in the resident image (first, seek to it)
 34230                                  	;mov	bx,[bp-8]
 34231 00005C5E 8B5EF8                  	mov	BX,Exec_FH
 34232 00005C61 1E                      	push	DS
 34233 00005C62 30C0                    	xor	AL,AL
 34234                                  	;invoke	$Lseek			; Seek to resident
 34235 00005C64 E8B20A                  	call	_$LSEEK
 34236 00005C67 1F                      	pop	DS
 34237 00005C68 7303                    	jnc	short Exec_Big_Read
 34238                                  
 34239 00005C6A E906FF                  	jmp	Exec_Bomb
 34240                                  
 34241                                  Exec_Big_Read:				; Read resident into memory
 34242                                  	;mov	bx,[bp-12]
 34243 00005C6D 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 34244 00005C70 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 34245 00005C74 7203                    	jb	short Exec_Read_OK
 34246                                  
 34247 00005C76 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 34248                                  
 34249                                  Exec_Read_OK:
 34250                                  	;sub	[bp-12],bx
 34251 00005C79 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 34252 00005C7C 53                      	push	BX
 34253 00005C7D B104                    	mov	CL,4
 34254 00005C7F D3E3                    	shl	BX,CL			; Get count in bytes from paras
 34255 00005C81 89D9                    	mov	CX,BX			; Count in correct register
 34256 00005C83 1E                      	push	DS
 34257                                  	;mov	ds,[bp-20]
 34258 00005C84 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 34259                                  
 34260 00005C87 31D2                    	xor	DX,DX
 34261 00005C89 51                      	push	CX			; Save our count
 34262 00005C8A E80903                  	call	ExecRead
 34263 00005C8D 59                      	pop	CX			; Get old count to verify
 34264 00005C8E 1F                      	pop	DS
 34265 00005C8F 7248                    	jc	short Exec_Bad_FileJ
 34266                                  
 34267 00005C91 39C1                    	cmp	CX,AX			; Did we read enough?
 34268 00005C93 5B                      	pop	BX			; Get paragraph count back
 34269 00005C94 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 34270                                  
 34271                                  	; The read did not match the request. If we are off by 512
 34272                                  	; bytes or more then the header lied and we have an error.
 34273                                  
 34274 00005C96 29C1                    	sub	CX,AX
 34275 00005C98 81F90002                	cmp	CX,512
 34276 00005C9C 733B                    	jae	short Exec_Bad_FileJ
 34277                                  
 34278                                  	; We've read in CX bytes... bump DTA location
 34279                                  
 34280                                  ExecCheckEnd:
 34281                                  	;add	[bp-20],bx
 34282 00005C9E 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 34283                                  	;test	word [bp-12],0FFFFh
 34284 00005CA1 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 34285 00005CA6 75C5                    	jnz	short Exec_Big_Read
 34286                                  
 34287                                  	; The image has now been read in. We must perform relocation
 34288                                  	; to the current location.
 34289                                  
 34290                                  exec_do_reloc:
 34291                                  	;mov	cx,[bp-10]
 34292 00005CA8 8B4EF6                  	mov	CX,Exec_Rel_Fac
 34293 00005CAB A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 34294 00005CAE 01C8                    	add	AX,CX			; and relocate him
 34295 00005CB0 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 34296                                  
 34297 00005CB3 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 34298 00005CB6 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 34299                                  
 34300 00005CB9 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 34301 00005CBD A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 34302 00005CC0 8CC0                    	mov	AX,ES			; rms;NSS
 34303 00005CC2 01C8                    	add	AX,CX			; relocated...
 34304 00005CC4 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 34305                                  
 34306 00005CC7 31C9                    	xor	CX,CX
 34307 00005CC9 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 34308                                  	;mov	bx,[bp-8]
 34309 00005CCD 8B5EF8                  	mov	BX,Exec_FH
 34310 00005CD0 1E                      	push	DS
 34311 00005CD1 31C0                    	xor	AX,AX
 34312                                  	;invoke	$Lseek
 34313 00005CD3 E8430A                  	call	_$LSEEK
 34314 00005CD6 1F                      	pop	DS
 34315 00005CD7 7303                    	jnc	short exec_get_entries
 34316                                  
 34317                                  Exec_Bad_FileJ:
 34318 00005CD9 E995FE                  	jmp	Exec_Bad_File
 34319                                  
 34320                                  exec_get_entries:
 34321 00005CDC 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 34322                                  
 34323                                  exec_read_reloc:
 34324 00005CE0 52                      	push	DX
 34325                                  	;mov	dx,OPENBUF
 34326 00005CE1 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 34327                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 34328                                  	;mov	cx,396 ; MSDOS 6.0
 34329 00005CE4 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 34330 00005CE7 1E                      	push	DS
 34331 00005CE8 E8AB02                  	call	ExecRead
 34332 00005CEB 07                      	pop	ES
 34333 00005CEC 5A                      	pop	DX
 34334 00005CED 72EA                    	jc	short Exec_Bad_FileJ
 34335                                  
 34336                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 34337                                  	;mov	cx,99 ;  MSDOS 6.0
 34338 00005CEF B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 34339                                  					; Pointer to byte location in header
 34340                                  	;mov	di,OPENBUF
 34341 00005CF2 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 34342                                  	;mov	si,[bp-10]
 34343 00005CF5 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 34344                                  
 34345                                  exec_reloc_one:
 34346 00005CF8 09D2                    	or	DX,DX			; Any more entries?
 34347 00005CFA 7416                    	jz	short Exec_Set_PDBJ
 34348                                  
 34349                                  exec_get_addr:
 34350 00005CFC 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 34351 00005CFF 8CD8                    	mov	AX,DS			; Relocate address of item
 34352                                  
 34353                                  	; MSDOS 6.0
 34354                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 34355                                  	;add	ax,[bp-28]
 34356 00005D01 0346E4                  	add	AX,Exec_DMA_Save
 34357                                  
 34358 00005D04 8ED8                    	mov	DS,AX
 34359 00005D06 0137                    	add	[BX],SI
 34360 00005D08 83C704                  	add	DI,4
 34361 00005D0B 4A                      	dec	DX
 34362 00005D0C E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 34363                                  
 34364                                  	; We've exhausted a single buffer's worth. Read in the next
 34365                                  	; piece of the relocation table.
 34366                                  
 34367 00005D0E 06                      	push	ES
 34368 00005D0F 1F                      	pop	DS
 34369 00005D10 EBCE                    	jmp	short exec_read_reloc
 34370                                  
 34371                                  Exec_Set_PDBJ:
 34372                                  	; MSDOS 6.0
 34373                                  	
 34374                                  	; We now determine if this is a buggy exe packed file and if
 34375                                  	; so we patch in the right code. Note that fixexepatch will
 34376                                  	; point to a ret if dos loads low. The load segment as
 34377                                  	; determined above will be in exec_dma_save
 34378                                  	
 34379 00005D12 06                      	push	es
 34380 00005D13 50                      	push	ax			; M030
 34381 00005D14 51                      	push	cx			; M030
 34382                                  	;mov	es,[bp-28]
 34383 00005D15 8E46E4                  	mov	es,Exec_DMA_Save
 34384 00005D18 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 34385 00005D1C 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 34386 00005D21 36FF16[1212]            	call	word [ss:FixExePatch]
 34387                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34388                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 34389                                  	;call	word [ss:Rational386PatchPtr]
 34390 00005D26 59                      	pop	cx			; M030
 34391 00005D27 58                      	pop	ax			; M030
 34392 00005D28 07                      	pop	es
 34393                                  
 34394 00005D29 E9DD00                  	jmp	Exec_Set_PDB
 34395                                  
 34396                                  Exec_No_Memj:
 34397 00005D2C E93EFE                  	jmp	Exec_No_Mem
 34398                                  
 34399                                  	; we have a .COM file. First, determine if we are merely
 34400                                  	; loading an overlay.
 34401                                  
 34402                                  Exec_Com_File:
 34403                                  	;test	byte [bp-5],2
 34404 00005D2F F646FB02                	test	Exec_Func,exec_func_overlay
 34405 00005D33 742D                    	jz	short Exec_Alloc_Com_File
 34406                                  	;lds	si,[bp-4]
 34407 00005D35 C576FC                  	lds	SI,Exec_Blk		; get arg block
 34408 00005D38 AD                      	lodsw				; get load address
 34409                                  	;mov	[bp-20],ax
 34410 00005D39 8946EC                  	mov	Exec_DMA,AX
 34411 00005D3C B8FFFF                  	mov	AX,0FFFFh
 34412 00005D3F EB63                    	jmp	short Exec_Read_Block	; read it all!
 34413                                  
 34414                                  Exec_Chk_Com_Mem:			
 34415                                  	; MSDOS 6.0	     		; M063 - Start
 34416 00005D41 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 34417 00005D45 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 34418 00005D4A 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 34419 00005D4F F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 34420 00005D52 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 34421                                  					; N: continue
 34422                                  	
 34423 00005D54 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 34424 00005D56 74D4                    	jz	short Exec_No_Memj	; N: no memory
 34425                                  	
 34426                                  	;mov	ax,[bp-18]
 34427 00005D58 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated
 34428 00005D5B 31DB                    	xor	bx,bx			; M047: bx => free arena
 34429 00005D5D E86B02                  	call	ChangeOwner		; M047: free this block
 34430                                  	
 34431 00005D60 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 34432                                  					; M063 - End
 34433                                  	
 34434                                  	; We must allocate the max possible size block (ick!)
 34435                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 34436                                  	; size of block.
 34437                                  
 34438                                  Exec_Alloc_Com_File:
 34439                                  	; MSDOS 6.0			; M000 -start
 34440 00005D62 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 34441                                  					; Q: is the alloc strat high_first
 34442 00005D68 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 34443                                  					; Y: set high_only bit
 34444 00005D6A 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 34445                                  					; M000 - end
 34446                                  Exec_Norm_Com_Alloc:			; M000
 34447                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34448 00005D70 BBFFFF                  	mov	BX,0FFFFh
 34449                                  	;invoke	$Alloc			; largest piece available as error
 34450 00005D73 E8B803                  	call	_$ALLOC
 34451 00005D76 09DB                    	or	BX,BX
 34452                                  	; MSDOS 6.0
 34453 00005D78 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 34454                                  	; MSDOS 3.3
 34455                                  	;jz	short Exec_No_Memj
 34456                                  
 34457                                  	;mov	[bp-16],bx
 34458 00005D7A 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 34459 00005D7D 53                      	push	BX
 34460                                  	;invoke	$ALLOC			; largest piece available
 34461 00005D7E E8AD03                  	call	_$ALLOC
 34462 00005D81 5B                      	pop	BX			; get size of block...
 34463                                  	;mov	[bp-18],ax
 34464 00005D82 8946EE                  	mov	Exec_Load_Block,AX
 34465                                  
 34466 00005D85 83C010                  	add	AX,10h			; increment for header
 34467                                  	;mov	[bp-20],ax
 34468 00005D88 8946EC                  	mov	Exec_DMA,AX
 34469                                  
 34470 00005D8B 31C0                    	xor	AX,AX			; presume 64K read...
 34471 00005D8D 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 34472 00005D91 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 34473                                  
 34474 00005D93 89D8                    	mov	AX,BX			; convert size to bytes
 34475 00005D95 B104                    	mov	CL,4
 34476 00005D97 D3E0                    	shl	AX,CL
 34477                                  	; 17/12/2022
 34478                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34479                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 34480                                  	; MSDOS 5.0
 34481                                  	;cmp	AX,100h   
 34482                                  	; 02/06/2019 - Retro DOS v4.0
 34483                                  	; MSDOS 6.0
 34484                                          ; 17/12/2022
 34485 00005D99 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 34486 00005D9C 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34487                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 34488                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 34489                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34490                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 34491                                  
 34492                                  					; M047: size of the block is < 64K
 34493 00005D9E 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 34494                                  
 34495                                  Exec_Read_Com:
 34496                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34497 00005DA1 2D0001                  	sub	AX,100h 		; remember size of psp
 34498                                  Exec_Read_Block:
 34499 00005DA4 50                      	push	AX			; save number to read
 34500                                  	;mov	bx,[bp-8]
 34501 00005DA5 8B5EF8                  	mov	BX,Exec_FH		; of com file
 34502 00005DA8 31C9                    	xor	CX,CX			; but seek to 0:0
 34503 00005DAA 31C0                    	xor	AX,AX			; seek relative to beginning
 34504                                  	;mov	DX,CX
 34505                                  	; 08/03/2024
 34506 00005DAC 99                      	cwd
 34507                                  	;invoke	$Lseek			; back to beginning of file
 34508 00005DAD E86909                  	call	_$LSEEK
 34509 00005DB0 59                      	pop	CX			; number to read
 34510                                  	;mov	ds,[bp-20]
 34511 00005DB1 8E5EEC                  	mov	DS,Exec_DMA
 34512 00005DB4 31D2                    	xor	DX,DX
 34513 00005DB6 51                      	push	CX
 34514 00005DB7 E8DC01                  	call	ExecRead
 34515 00005DBA 5E                      	pop	SI			; get number of bytes to read
 34516 00005DBB 7303                    	jnc	short OkRead
 34517 00005DBD E9B1FD                  	jmp	Exec_Bad_File
 34518                                  
 34519                                  	; 10/09/2018
 34520                                  OkRead:
 34521 00005DC0 39F0                    	cmp	AX,SI			; did we read them all?
 34522                                  	; MSDOS 6.0
 34523                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no
 34524                                  	; MSDOS 3.3
 34525                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 34526 00005DC2 7503                    	jne	short OkRead2
 34527 00005DC4 E97AFF                  	jmp	Exec_Chk_Com_Mem
 34528                                  OkRead2:
 34529                                  	; MSDOS 6.0
 34530 00005DC7 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 34531 00005DCC 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 34532                                  
 34533                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34534                                  	;test	byte [bp-5],2
 34535 00005DD1 F646FB02                	test	Exec_Func,exec_func_overlay
 34536 00005DD5 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 34537                                  
 34538                                  	;mov	ax,[bp-20]
 34539 00005DD7 8B46EC                  	mov	AX,Exec_DMA
 34540 00005DDA 83E810                  	sub	AX,10h
 34541 00005DDD 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 34542 00005DE1 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 34543                                  
 34544                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 34545                                  	; of 0 on stack.
 34546                                  
 34547 00005DE8 81C6FE00                	add	SI,0FEh 		; make room for stack
 34548                                  
 34549                                  	; MSDOS 6.0
 34550 00005DEC 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 34551 00005DEF 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 34552 00005DF1 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 34553                                  
 34554                                  Exec_St_Ok:
 34555                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34556 00005DF5 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 34557 00005DFA 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 34558 00005DFE 8ED8                    	mov	DS,AX
 34559 00005E00 C7040000                	mov	WORD [SI],0		; 0 for return
 34560                                  
 34561                                  	; MSDOS 6.0
 34562                                  
 34563                                  	; M068
 34564                                  	;
 34565                                  	; We now determine if this is a Copy Protected App. If so the
 34566                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to
 34567                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34568                                  
 34569 00005E04 36FF16[6100]            	call	word [ss:ChkCopyProt]
 34570                                  
 34571                                  Exec_Set_PDB:
 34572                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34573                                  	;mov	bx,[bp-8]
 34574 00005E09 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34575 00005E0C E8A001                  	call	Exec_Dealloc
 34576 00005E0F 55                      	push	BP
 34577                                  	;invoke	$Close			; release the jfn
 34578 00005E10 E89B07                  	call	_$CLOSE
 34579 00005E13 5D                      	pop	BP
 34580 00005E14 E88A01                  	call	Exec_Alloc
 34581                                  	;test	byte [bp-5],2
 34582 00005E17 F646FB02                	test	Exec_Func,exec_func_overlay
 34583 00005E1B 743A                    	jz	short Exec_Build_Header
 34584                                  
 34585                                  	; MSDOS 6.0
 34586 00005E1D E8B901                  	call	Scan_Execname
 34587 00005E20 E8CD01                  	call	Scan_Special_Entries
 34588                                  ;SR;
 34589                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34590                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34591                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34592                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34593                                  ;Sysinit and therefore must be a device driver load. We then get the lie
 34594                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34595                                  ;issues the version check, it gets the lie version until the next overlay
 34596                                  ;call is issued.
 34597                                  
 34598 00005E23 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34599 00005E29 7426                    	je	short norm_ovl		;yes, no special handling
 34600 00005E2B 56                      	push	si
 34601 00005E2C 06                      	push	es
 34602 00005E2D 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34603                                  	 
 34604                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s)
 34605 00005E32 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34606 00005E36 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34607                                  	
 34608 00005E38 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34609 00005E3D 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34610 00005E42 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34611                                  		;;; PDB.VERSION
 34612 00005E47 EB06                    	jmp	short setver_done
 34613                                  sysinit_done:
 34614 00005E49 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34615                                  setver_done:
 34616 00005E4F 07                      	pop	es
 34617 00005E50 5E                      	pop	si
 34618                                  norm_ovl:
 34619                                  	;leave
 34620 00005E51 89EC                    	mov	sp,bp
 34621 00005E53 5D                      	pop	bp
 34622                                  
 34623                                  	;transfer SYS_RET_OK		; overlay load -> done
 34624 00005E54 E9DAA7                  	jmp	SYS_RET_OK
 34625                                  
 34626                                  Exec_Build_Header:
 34627                                  	;mov	dx,[bp-18]
 34628 00005E57 8B56EE                  	mov	DX,Exec_Load_Block
 34629                                  					; assign the space to the process
 34630                                  	;mov	si,1
 34631 00005E5A BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34632                                  	;mov	ax,[bp-14]
 34633 00005E5D 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34634 00005E60 09C0                    	or	AX,AX
 34635 00005E62 7405                    	jz	short No_Owner		; no environment
 34636                                  
 34637 00005E64 48                      	dec	AX			; point to header
 34638 00005E65 8ED8                    	mov	DS,AX
 34639 00005E67 8914                    	mov	[SI],DX 		; assign ownership
 34640                                  No_Owner:
 34641                                  	;mov	ax,[bp-18]
 34642                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34643                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34644                                  	; 17/12/2022
 34645 00005E69 89D0                    	mov	ax,dx ; 06/06/2019
 34646                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34647                                  	
 34648 00005E6B 48                      	dec	AX
 34649 00005E6C 8ED8                    	mov	DS,AX			; point to header
 34650 00005E6E 8914                    	mov	[SI],DX 		; assign ownership
 34651                                  
 34652                                  	; MSDOS 6.0
 34653 00005E70 1E                      	push	DS			;AN000;MS. make ES=DS
 34654 00005E71 07                      	pop	ES			;AN000;MS.
 34655                                  	;mov	di,8
 34656 00005E72 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34657 00005E75 E86101                  	call	Scan_Execname		;AN007;MS. parse execname
 34658                                  					;	   ds:si->name, cx=name length
 34659 00005E78 51                      	push	CX			;AN007;;MS. save for fake version
 34660 00005E79 56                      	push	SI			;AN007;;MS. save for fake version
 34661                                  
 34662                                  MoveName:				;AN000;
 34663 00005E7A AC                      	lodsb				;AN000;;MS. get char
 34664 00005E7B 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.', may be name.exe
 34665 00005E7D 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34666                                  					;AN000;
 34667 00005E7F AA                      	stosb				;AN000;;MS. move char
 34668                                  					; MSKK bug fix - limit length copied
 34669 00005E80 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34670 00005E83 7302                    	jae	short Mem_Done		; jump if so
 34671                                  	;
 34672 00005E85 E2F3                    	loop	MoveName		;AN000;;MS. continue
 34673                                  Mem_Done:				;AN000;
 34674 00005E87 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34675                                  	;cmp	di,16
 34676 00005E89 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34677 00005E8C 7301                    	jae	short Fill8		;AN000;MS.
 34678                                  	
 34679 00005E8E AA                      	stosb				;AN000;MS.
 34680                                  	
 34681                                  Fill8:					;AN000;
 34682 00005E8F 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34683 00005E90 59                      	pop	CX			;AN007;MS.
 34684                                  	
 34685 00005E91 E85C01                  	call	Scan_Special_Entries	;AN007;MS.
 34686                                  
 34687                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34688 00005E94 52                      	push	DX
 34689                                  	;mov	si,[bp-16]
 34690 00005E95 8B76F0                  	mov	SI,Exec_Size
 34691 00005E98 01D6                    	add	SI,DX
 34692                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34693 00005E9A E8D8B1                  	call	_$DUP_PDB
 34694 00005E9D 5A                      	pop	DX
 34695                                  
 34696                                  	;push	word [bp-14]
 34697 00005E9E FF76F2                  	push	Exec_Environ
 34698                                  	;pop	WORD [ES:2Ch]
 34699 00005EA1 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34700                                  
 34701                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34702                                  					; version number in PSP
 34703 00005EA6 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34704 00005EAB 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34705                                  		; PDB.VERSION
 34706                                  
 34707                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34708                                  	;lds	si,[bp-4]
 34709 00005EB0 C576FC                  	lds	SI,Exec_Blk		; get the block
 34710 00005EB3 1E                      	push	DS			; save its location
 34711 00005EB4 56                      	push	SI
 34712                                  	;lds	si,[si+6]
 34713 00005EB5 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34714                                  
 34715                                  	; DS points to user space 5C FCB
 34716                                  
 34717 00005EB8 B90C00                  	mov	CX,12			; copy drive, name and ext
 34718 00005EBB 51                      	push	CX
 34719 00005EBC BF5C00                  	mov	DI,5Ch
 34720 00005EBF 8A1C                    	mov	BL,[SI]
 34721 00005EC1 F3A4                    	rep	movsb
 34722                                  
 34723                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34724                                  
 34725                                  	;xor	AX,AX			; zero extent, etc for CPM
 34726 00005EC3 91                      	xchg	ax,cx	; 08/03/2024
 34727 00005EC4 AB                      	stosw
 34728 00005EC5 AB                      	stosw
 34729                                  
 34730                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34731                                  
 34732 00005EC6 59                      	pop	CX
 34733 00005EC7 5E                      	pop	SI			; get block
 34734 00005EC8 1F                      	pop	DS
 34735 00005EC9 1E                      	push	DS			; save (again)
 34736 00005ECA 56                      	push	SI
 34737                                  	;lds	si,[si+0Ah]
 34738 00005ECB C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34739                                  
 34740                                  	; DS points to user space 6C FCB
 34741                                  
 34742 00005ECE 8A3C                    	mov	BH,[SI] 		; do same as above
 34743 00005ED0 F3A4                    	rep	movsb
 34744 00005ED2 AB                      	stosw
 34745 00005ED3 AB                      	stosw
 34746 00005ED4 5E                      	pop	SI			; get block (last time)
 34747 00005ED5 1F                      	pop	DS
 34748                                  	;ld	si,[si+2]
 34749 00005ED6 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34750                                  
 34751                                  	; DS points to user space 80 command line
 34752                                  
 34753 00005ED9 80C980                  	or	CL,80h
 34754 00005EDC 89CF                    	mov	DI,CX
 34755 00005EDE F3A4                    	rep	movsb			; Wham!
 34756                                  
 34757                                  	; Process BX into default AX (validity of drive specs on args).
 34758                                  	; We no longer care about DS:SI.
 34759                                  
 34760 00005EE0 FEC9                    	dec	CL			; get 0FFh in CL
 34761 00005EE2 88F8                    	mov	AL,BH
 34762 00005EE4 30FF                    	xor	BH,BH
 34763                                  	;invoke	GetVisDrv
 34764 00005EE6 E8210A                  	call	GetVisDrv
 34765 00005EE9 7302                    	jnc	short Exec_BL
 34766                                  
 34767 00005EEB 88CF                    	mov	BH,CL
 34768                                  
 34769                                  Exec_BL:
 34770 00005EED 88D8                    	mov	AL,BL
 34771 00005EEF 30DB                    	xor	BL,BL
 34772                                  	;invoke	GetVisDrv
 34773 00005EF1 E8160A                  	call	GetVisDrv
 34774 00005EF4 7302                    	jnc	short Exec_Set_Return
 34775                                  
 34776 00005EF6 88CB                    	mov	BL,CL
 34777                                  
 34778                                  Exec_Set_Return:
 34779                                  	;invoke	Get_User_Stack			; get his return address
 34780 00005EF8 E886A5                  	call	Get_User_Stack
 34781                                  
 34782                                  ; 08/03/2024
 34783                                  %if 0
 34784                                  	;push	word [si+14h]
 34785                                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34786                                  	;push	word [si+12h]
 34787                                  	push	word [SI+user_env.user_IP]
 34788                                  	;push	word [si+14h]
 34789                                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34790                                  	;push	word [si+12h]
 34791                                  	push	word [SI+user_env.user_IP]
 34792                                  	;pop	word [ES:0Ah]
 34793                                  	pop	WORD [ES:PDB.EXIT]
 34794                                  	;pop	word [ES:0Ch]
 34795                                  	pop	WORD [ES:PDB.EXIT+2]
 34796                                  %else
 34797                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 34798                                  	;;;
 34799                                  	;lds	ax,[si+12h]
 34800 00005EFB C54412                  	lds	ax,[SI+user_env.user_IP] ; suck out the CS and IP
 34801 00005EFE 1E                      	push	ds              
 34802 00005EFF 50                      	push	ax
 34803                                  	;mov	[es:0Ah],ax
 34804 00005F00 26A30A00                	mov	[ES:PDB.EXIT],ax
 34805                                  	;mov	[es:0Ch],ds
 34806 00005F04 268C1E0C00              	mov	[ES:PDB.EXIT+2],ds
 34807                                  	;;;
 34808                                  %endif
 34809                                  	
 34810 00005F09 31C0                    	xor	AX,AX
 34811 00005F0B 8ED8                    	mov	DS,AX
 34812                                  					; save them where we can get them
 34813                                  					; later when the child exits.
 34814                                  	;pop	word [88h]
 34815 00005F0D 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34816                                  	;pop	word [90h]
 34817 00005F11 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34818                                  
 34819 00005F15 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34820 00005F1C 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34821 00005F21 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34822                                  
 34823                                  	;test	byte [bp-5],1
 34824 00005F26 F646FB01                	test	Exec_Func,exec_func_no_execute
 34825 00005F2A 7427                    	jz	short exec_go
 34826                                  
 34827 00005F2C 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34828                                  	;les	di,[bp-4]
 34829 00005F31 C47EFC                  	les	DI,Exec_Blk		; and block for return
 34830                                  	;mov	[es:di+10h],ds
 34831 00005F34 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34832                                  
 34833 00005F38 4E                      	dec	SI			; 'push' default AX
 34834 00005F39 4E                      	dec	SI
 34835 00005F3A 891C                    	mov	[SI],BX 		; save default AX reg
 34836                                  	;mov	[es:di+0Eh], si
 34837 00005F3C 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34838                                  
 34839 00005F40 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34840                                  	;mov	[es:di+14h],ds
 34841 00005F45 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34842                                  	;mov	[es:di+12h],ax
 34843 00005F49 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34844                                  	
 34845                                  	;leave
 34846 00005F4D 89EC                    	mov	sp,bp
 34847 00005F4F 5D                      	pop	bp	
 34848                                  
 34849                                  	;transfer SYS_RET_OK
 34850 00005F50 E9DEA6                  	jmp	SYS_RET_OK
 34851                                  
 34852                                  exec_go:
 34853 00005F53 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34854 00005F58 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34855 00005F5D 8CC0                    	mov	AX,ES
 34856                                  
 34857                                  	; MSDOS 6.0
 34858 00005F5F 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34859 00005F65 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34860                                  
 34861 00005F67 1E                      	push	ds			; Y: control must go to low mem stub
 34862                                  		
 34863 00005F68 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34864                                  					;    control to user 
 34865 00005F6D 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34866                                  					; M004: Set bit to signal int 21
 34867                                  					; ah = 25 & ah= 49. See dossym.inc 
 34868                                  					; under TAG M003 & M009 for 
 34869                                  					; explanation
 34870 00005F72 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34871                                  					; M068: going to be turned OFF.
 34872                                  	
 34873 00005F76 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34874 00005F78 1F                      	pop	ds
 34875                                  	
 34876 00005F79 50                      	push	ax			; ret far into the low mem stub
 34877 00005F7A B8[1511]                	mov	ax,disa20_xfer
 34878 00005F7D 50                      	push	ax
 34879 00005F7E 8CC0                    	mov	AX,ES			; restore ax
 34880 00005F80 CB                      	retf
 34881                                  
 34882                                  Xfer_To_User:
 34883                                  	; DS:SI points to entry point
 34884                                  	; AX:DI points to initial stack
 34885                                  	; DX has PDB pointer
 34886                                  	; BX has initial AX value
 34887                                  
 34888 00005F81 FA                      	cli
 34889                                  	; 15/08/2018
 34890 00005F82 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34891                                  
 34892 00005F88 8ED0                    	mov	SS,AX			; set up user's stack
 34893 00005F8A 89FC                    	mov	SP,DI			; and SP
 34894 00005F8C FB                      	sti
 34895                                  
 34896 00005F8D 1E                      	push	DS			; fake long call to entry
 34897 00005F8E 56                      	push	SI
 34898 00005F8F 8EC2                    	mov	ES,DX			; set up proper seg registers
 34899 00005F91 8EDA                    	mov	DS,DX
 34900 00005F93 89D8                    	mov	AX,BX			; set up proper AX
 34901                                  
 34902 00005F95 CB                      	retf
 34903                                  
 34904                                  ; 04/08/2018 - Retro DOS v3.0
 34905                                  
 34906                                  ;----------------------------------------------------------------------------
 34907                                  ;
 34908                                  ;----------------------------------------------------------------------------
 34909                                  
 34910                                  ExecRead:
 34911 00005F96 E81600                  	CALL	Exec_Dealloc
 34912                                  	;mov	bx,[bp-8]
 34913 00005F99 8B5EF8                  	MOV	bx,Exec_FH
 34914                                  
 34915 00005F9C 55                      	PUSH	BP
 34916 00005F9D E81707                  	call	_$READ
 34917 00005FA0 5D                      	POP	BP
 34918                                  
 34919                                  	;CALL	Exec_Alloc
 34920                                  	;retn
 34921                                  	; 18/12/2022
 34922                                  	;jmp	short Exec_Alloc
 34923                                  
 34924                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34925                                  
 34926                                  ;----------------------------------------------------------------------------
 34927                                  ;
 34928                                  ;----------------------------------------------------------------------------
 34929                                  
 34930                                  Exec_Alloc:
 34931 00005FA1 53                      	push	BX
 34932                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34933                                  	; 20/05/2019 - Retro DOS v4.0
 34934                                  	; MSDOS 6.0
 34935 00005FA2 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34936 00005FA7 E81000                  	call	ChangeOwners
 34937 00005FAA E850B3                  	call	LCritMEM
 34938 00005FAD 5B                      	pop	BX
 34939 00005FAE C3                      	retn
 34940                                  
 34941                                  ;----------------------------------------------------------------------------
 34942                                  ;
 34943                                  ;----------------------------------------------------------------------------
 34944                                  
 34945                                  Exec_Dealloc:
 34946 00005FAF 53                      	push	BX
 34947                                  	;mov	bx,0
 34948 00005FB0 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34949 00005FB2 E82DB3                  	call	ECritMEM
 34950 00005FB5 E80200                  	call	ChangeOwners
 34951 00005FB8 5B                      	pop	BX
 34952 00005FB9 C3                      	retn
 34953                                  
 34954                                  ; 18/12/2022
 34955                                  %if 0
 34956                                  ;----------------------------------------------------------------------------
 34957                                  ;
 34958                                  ;----------------------------------------------------------------------------
 34959                                  
 34960                                  Exec_Alloc:
 34961                                  	push	BX
 34962                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34963                                  	; 20/05/2019 - Retro DOS v4.0
 34964                                  	; MSDOS 6.0
 34965                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34966                                  	call	ChangeOwners
 34967                                  	call	LCritMEM
 34968                                  	pop	BX
 34969                                  	retn
 34970                                  
 34971                                  %endif
 34972                                  
 34973                                  ;----------------------------------------------------------------------------
 34974                                  ;
 34975                                  ;----------------------------------------------------------------------------
 34976                                  
 34977                                  ChangeOwners:
 34978 00005FBA 9C                      	pushf
 34979 00005FBB 50                      	push	AX
 34980                                  	;mov	ax,[bp-14]
 34981 00005FBC 8B46F2                  	mov	AX,Exec_Environ
 34982 00005FBF E80900                  	call	ChangeOwner
 34983                                  	;mov	ax,[bp-18]
 34984 00005FC2 8B46EE                  	mov	AX,Exec_Load_Block
 34985 00005FC5 E80300                  	call	ChangeOwner
 34986 00005FC8 58                      	pop	AX
 34987 00005FC9 9D                      	popf
 34988                                  chgown_retn:
 34989 00005FCA C3                      	retn
 34990                                  
 34991                                  ;----------------------------------------------------------------------------
 34992                                  ;
 34993                                  ;----------------------------------------------------------------------------
 34994                                  
 34995                                  ChangeOwner:
 34996 00005FCB 09C0                    	or	AX,AX			; is area allocated?
 34997 00005FCD 74FB                    	jz	short chgown_retn	; no, do nothing
 34998 00005FCF 48                      	dec	AX
 34999 00005FD0 1E                      	push	DS
 35000 00005FD1 8ED8                    	mov	DS,AX
 35001 00005FD3 891E0100                	mov	[ARENA.OWNER],BX
 35002 00005FD7 1F                      	pop	DS
 35003 00005FD8 C3                      	retn
 35004                                  
 35005                                  ;----------------------------------------------------------------------------
 35006                                  ;
 35007                                  ;----------------------------------------------------------------------------
 35008                                  
 35009                                  ; 20/05/2019 - Retro DOS v4.0
 35010                                  
 35011                                  	; MSDOS 6.0
 35012                                  Scan_Execname:
 35013 00005FD9 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 35014                                  Scan_Execname1:				; M028
 35015                                  Save_Begin:				;
 35016 00005FDC 89F1                    	mov	CX,SI			; CX= starting addr
 35017                                  Scan0:					;
 35018 00005FDE AC                      	lodsb				; get char
 35019                                  
 35020 00005FDF 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 35021 00005FE1 74F9                    	jz	short Save_Begin	; yes, save si
 35022 00005FE3 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 35023 00005FE5 74F5                    	jz	short Save_Begin	; yes, save si
 35024 00005FE7 3C00                    	cmp	AL,0			; is end of name
 35025 00005FE9 75F3                    	jnz	short Scan0		; no, continue scanning
 35026 00005FEB 29CE                    	sub	SI,CX			; get name's length
 35027 00005FED 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 35028                                  
 35029 00005FEF C3                      	retn
 35030                                  
 35031                                  ;----------------------------------------------------------------------------
 35032                                  ;
 35033                                  ;----------------------------------------------------------------------------
 35034                                  
 35035                                  ; 20/05/2019 - Retro DOS v4.0
 35036                                  
 35037                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35038                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 35039                                  
 35040                                  	; MSDOS 6.0
 35041                                  
 35042                                  Scan_Special_Entries:
 35043                                  
 35044 00005FF0 49                      	dec	CX			; cx= name length
 35045                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 35046                                  					;reset to current version
 35047                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 35048                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 35049                                  	;mov	word [ss:SPECIAL_VERSION],5
 35050                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 35051                                  
 35052                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 35053 00005FF1 36C706[BD0E]0616        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 35054                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 35055                                  				; 24/09/2023
 35056                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 35057                                  ;***	call	Reset_Version
 35058                                  
 35059                                  ;M060	push	SS
 35060                                  ;M060	pop	ES
 35061                                  
 35062 00005FF8 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 35063 00005FFD 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 35064 00005FFF 09F8                    	or	AX,DI			;M060; be sure the table exists
 35065 00006001 7427                    	jz	short End_List		;M060; If ZR then no table
 35066                                  
 35067                                  GetEntries:
 35068 00006003 268A05                  	mov	AL,[ES:DI]		; end of list
 35069 00006006 08C0                    	or	AL,AL
 35070 00006008 7420                    	jz	short End_List		; yes
 35071                                  
 35072 0000600A 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 35073 0000600F 38C8                    	cmp	AL,CL			; same length ?
 35074 00006011 751B                    	jnz	short SkipOne 		; no
 35075                                  
 35076 00006013 47                      	inc	DI			; es:di -> special name
 35077 00006014 51                      	push	CX			; save length and name addr
 35078 00006015 56                      	push	SI
 35079                                  
 35080                                  ; M050 - BEGIN
 35081                                  
 35082 00006016 50                      	push	ax			; save len
 35083                                  sse_next_char:
 35084 00006017 AC                      	lodsb
 35085 00006018 E8ECEE                  	call	UCase
 35086 0000601B AE                      	scasb
 35087 0000601C 750D                    	jne	short Not_Matched
 35088 0000601E E2F7                    	loop	sse_next_char
 35089                                  	
 35090                                  ;	repz	cmpsb			; same name ?
 35091                                  ;	jnz	short Not_Matched	; no
 35092                                  
 35093 00006020 58                      	pop	ax			; take len off the stack
 35094                                  
 35095                                  ; M050 - END
 35096                                  
 35097 00006021 268B05                  	mov	AX,[ES:DI]		; get special version
 35098 00006024 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 35099                                  
 35100                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 35101                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 35102                                  
 35103 00006028 5E                      	pop	SI
 35104 00006029 59                      	pop	CX
 35105                                  	; 18/12/2022
 35106                                  	;jmp	SHORT End_List
 35107                                  
 35108                                  	; 18/12/2022
 35109                                  End_List:
 35110 0000602A C3                      	retn
 35111                                  
 35112                                  Not_Matched:
 35113 0000602B 58                      	pop	ax			; get len from stack ; M050
 35114 0000602C 5E                      	pop	SI			; restore si,cx
 35115 0000602D 59                      	pop	CX
 35116                                  
 35117                                  SkipOne:
 35118 0000602E 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 35119 00006033 30E4                    	xor	AH,AH			; position to next entry
 35120 00006035 01C7                    	add	DI,AX
 35121                                  
 35122 00006037 83C703                  	add	DI,3			; DI -> next entry length
 35123                                  ;***	add	DI,4			; DI -> next entry length
 35124                                  
 35125 0000603A EBC7                    	jmp	short GetEntries
 35126                                  
 35127                                  	; 18/12/2022
 35128                                  ;End_List:
 35129                                  	;retn
 35130                                  
 35131                                  ; 04/08/2018 - Retro DOS v3.0
 35132                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 633Dh
 35133                                  
 35134                                  ;----------------------------------------------------------------------------
 35135                                  ;SUBTTL Terminate and stay resident handler
 35136                                  ;
 35137                                  ; Input:    DX is an offset from CurrentPDB at which to
 35138                                  ;	    truncate the current block.
 35139                                  ;
 35140                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 35141                                  ;	    paragraphs long. An exit is simulated via resetting CurrentPDB
 35142                                  ;	    and restoring the vectors.
 35143                                  ;
 35144                                  ;----------------------------------------------------------------------------
 35145                                  
 35146                                  	; 20/05/2019 - Retro DOS v4.0
 35147                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 35148                                  
 35149                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35150                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 35151                                  
 35152                                  _$KEEP_PROCESS:
 35153 0000603C 50                      	push	AX			; keep exit code around
 35154                                  	;mov	byte [SS:EXIT_TYPE],3
 35155 0000603D 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 35156 00006043 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 35157 00006048 83FA06                  	cmp	DX,6h			; keep enough space around for system
 35158 0000604B 7303                    	jae	short Keep_Shrink	; info
 35159                                  
 35160 0000604D BA0600                  	mov	DX,6h
 35161                                  
 35162                                  Keep_Shrink:
 35163 00006050 89D3                    	mov	BX,DX
 35164 00006052 53                      	push	BX
 35165 00006053 06                      	push	ES
 35166 00006054 E82D02                  	call	_$SETBLOCK		; ignore return codes.
 35167 00006057 1F                      	pop	DS
 35168 00006058 5B                      	pop	BX
 35169 00006059 7207                    	jc	short Keep_Done		; failed on modification
 35170                                  
 35171 0000605B 8CD8                    	mov	AX,DS
 35172 0000605D 01D8                    	add	AX,BX
 35173                                  	;mov	[2],ax
 35174 0000605F A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 35175                                  
 35176                                  Keep_Done:
 35177 00006062 58                      	pop	AX
 35178 00006063 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 35179                                  
 35180                                  ;----------------------------------------------------------------------------
 35181                                  ;
 35182                                  ;----------------------------------------------------------------------------
 35183                                  
 35184                                  STAY_RESIDENT:
 35185                                  	;mov	ax,3100h
 35186 00006065 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 35187 00006068 83C20F                  	add	DX,15
 35188 0000606B D1DA                    	rcr	DX,1
 35189 0000606D B103                    	mov	CL,3
 35190 0000606F D3EA                    	shr	DX,CL
 35191                                  
 35192 00006071 E994A2                  	jmp	COMMAND
 35193                                  
 35194                                  ;----------------------------------------------------------------------------
 35195                                  ;SUBTTL $EXIT - return to parent process
 35196                                  ;   Assembler usage:
 35197                                  ;	    MOV     AL, code
 35198                                  ;	    MOV     AH, Exit
 35199                                  ;	    INT     int_command
 35200                                  ;   Error return:
 35201                                  ;	    None.
 35202                                  ;
 35203                                  ;----------------------------------------------------------------------------
 35204                                  
 35205                                  	; 20/05/2019 - Retro DOS v4.0
 35206                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 35207                                  
 35208                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35209                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 35210                                  _$EXIT:
 35211                                  	; 04/08/2018 - Retro DOS v3.0
 35212                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 35213 00006074 30E4                    	xor	AH,AH
 35214 00006076 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 35215 0000607B 08E4                    	or	AH,AH
 35216                                  	;mov	BYTE [SS:EXIT_TYPE],0
 35217 0000607D 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 35218 00006083 7406                    	jz	short exit_inner
 35219                                  	;mov	BYTE [SS:EXIT_TYPE],1
 35220 00006085 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 35221                                  
 35222                                  	;entry	Exit_inner
 35223                                  exit_inner:
 35224 0000608B E8F3A3                  	call	Get_User_Stack		;PBUGBUG
 35225                                  
 35226 0000608E 36FF36[3003]            	push	word [ss:CurrentPDB]
 35227                                  	;pop	word [si+14h]
 35228 00006093 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 35229 00006096 EB08                    	jmp	short abort_inner
 35230                                  
 35231                                  ;BREAK <$ABORT -- Terminate a process>
 35232                                  ;----------------------------------------------------------------------------
 35233                                  ; Inputs:
 35234                                  ;	user_CS:00 must point to valid program header block
 35235                                  ; Function:
 35236                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 35237                                  ;	to the terminate address
 35238                                  ; Returns:
 35239                                  ;	TO THE TERMINATE ADDRESS
 35240                                  ;----------------------------------------------------------------------------
 35241                                  
 35242                                  _$ABORT:
 35243 00006098 30C0                    	xor	AL,AL
 35244                                  	;mov	byte [SS:EXIT_TYPE],0
 35245                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 35246 0000609A 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 35247                                  
 35248                                  	; abort_inner must have AL set as the exit code! The exit type
 35249                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 35250                                  	; to be correct as the one that is terminating.
 35251                                  
 35252                                  abort_inner:
 35253 000060A0 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 35254 000060A5 36A3[3403]              	mov	[SS:exit_code],AX
 35255 000060A9 E8D5A3                  	call	Get_User_Stack
 35256                                  
 35257                                  	;mov	ds,[si+14h]
 35258 000060AC 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 35259 000060AF 31C0                    	xor	AX,AX
 35260 000060B1 8EC0                    	mov	ES,AX
 35261                                  	;mov	si,10
 35262 000060B3 BE0A00                  	mov	SI,SAVEXIT
 35263                                  	;mov	di,88h
 35264 000060B6 BF8800                  	mov	DI,addr_int_terminate
 35265 000060B9 A5                      	movsw
 35266 000060BA A5                      	movsw
 35267 000060BB A5                      	movsw
 35268 000060BC A5                      	movsw
 35269 000060BD A5                      	movsw
 35270 000060BE A5                      	movsw
 35271 000060BF E959F2                  	jmp	reset_environment
 35272                                  
 35273                                  ;----------------------------------------------------------------------------
 35274                                  ;
 35275                                  ; fixexepatch will point to this is DOS loads low. 
 35276                                  ;
 35277                                  ;----------------------------------------------------------------------------
 35278                                  ; MSDOS 6.0
 35279                                  
 35280                                  ; 29/04/2019 - Retro DOS v4.0
 35281                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 35282                                  
 35283                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35284                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 35285                                  
 35286                                  RetExePatch: ; proc near
 35287                                  	
 35288 000060C2 C3                      	retn
 35289                                  
 35290                                  ;============================================================================
 35291                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 35292                                  ;============================================================================
 35293                                  ; 04/08/2018 - Retro DOS v3.0
 35294                                  ; 14/05/2019 - Retro DOS v4.0
 35295                                  
 35296                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 35297                                  
 35298                                  ;**
 35299                                  ;	Microsoft Confidential
 35300                                  ;	Copyright (C) Microsoft Corporation 1991
 35301                                  ;	All Rights Reserved.
 35302                                  ;
 35303                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 35304                                  ;	I/O specs are defined in DISPATCH.
 35305                                  ;
 35306                                  ;	$ALLOC
 35307                                  ;	$SETBLOCK
 35308                                  ;	$DEALLOC
 35309                                  ;	$AllocOper
 35310                                  ;	arena_free_process
 35311                                  ;	arena_next
 35312                                  ;	check_signature
 35313                                  ;	Coalesce
 35314                                  ;
 35315                                  ;	Modification history:
 35316                                  ;
 35317                                  ;	    Created: ARR 30 March 1983
 35318                                  ;
 35319                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 35320                                  ;		      M003 - added support for link/unlink UMBs from
 35321                                  ;			     DOS arena chain. 7/18/90
 35322                                  ;		      M009 - Added error returns invalid function and 
 35323                                  ;			     arena trashed in set link state call.
 35324                                  ;		      M010 - Release UMB arenas allocated to current PDB
 35325                                  ;			     if UMB_HEAD is initialized.
 35326                                  ;
 35327                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 35328                                  ;			     support. Please see under M009 in 
 35329                                  ;			     ..\inc\dossym.inc. 8/31/90.
 35330                                  ;
 35331                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 35332                                  ;			     sure that umb_head arena is valid and also make
 35333                                  ;			     sure that the previous arena is pointing to 
 35334                                  ;			     umb_head.
 35335                                  ;
 35336                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 35337                                  ;			     set allloc strategy.
 35338                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 35339                                  ;			     bx in AllocSetStrat.
 35340                                  ;
 35341                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 35342                                  ;			     a bit to indicate to dos dispatcher to turn
 35343                                  ;			     a20 off before iret. See M016.
 35344                                  ;
 35345                                  
 35346                                  ;	BREAK	<memory allocation utility routines>
 35347                                  
 35348                                  
 35349                                  ; 15/04/2018 - Retro DOS v2.0
 35350                                  ;----------------------------------------------------------------------------
 35351                                  ; xenix memory calls for MSDOS
 35352                                  ;
 35353                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 35354                                  ; arena_owner_system are all equal to zero and are contained in DI.
 35355                                  ;
 35356                                  ;INCLUDE DOSSEG.ASM
 35357                                  
 35358                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 35359                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 35360                                  
 35361                                  ;.xlist
 35362                                  ;.xcref
 35363                                  ;INCLUDE DOSSYM.ASM
 35364                                  ;INCLUDE DEVSYM.ASM
 35365                                  ;.cref
 35366                                  ;.list
 35367                                  
 35368                                  ;TITLE ALLOC.ASM - memory arena manager
 35369                                  ;NAME Alloc
 35370                                  
 35371                                  ;SUBTTL memory allocation utility routines
 35372                                  ;PAGE
 35373                                  ;
 35374                                  ; arena data
 35375                                  ;
 35376                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 35377                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 35378                                  ;       i_need  FirstArena,WORD         ; first free block found
 35379                                  ;       i_need  BestArena,WORD          ; best free block found
 35380                                  ;       i_need  LastArena,WORD          ; last free block found
 35381                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 35382                                  
 35383                                  ;**	Arena_Free_Process
 35384                                  ;----------------------------------------------------------------------------
 35385                                  ;	Free all arena blocks allocated to a prOcess
 35386                                  ;
 35387                                  ;	ENTRY	(bx) = PID of process
 35388                                  ;	EXIT	none
 35389                                  ;	USES	????? BUGBUG
 35390                                  ;----------------------------------------------------------------------------
 35391                                  
 35392                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35393                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 35394                                  
 35395                                  arena_free_process:
 35396                                  	; 14/05/2019 - Retro DOS v4.0
 35397                                  	; 04/08/2018 - Retro DOS v3.0
 35398 000060C3 36A1[2400]                      MOV	AX,[SS:arena_head]
 35399                                  arena_free_process_start:
 35400 000060C7 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 35401                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 35402 000060CA E82F00                          CALL	check_signature         ; ES <- AX, check for valid block
 35403                                  
 35404                                  arena_free_process_loop:
 35405                                          ;retc
 35406 000060CD 7225                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 35407 000060CF 06                      	PUSH    ES
 35408 000060D0 1F                              POP     DS
 35409                                  	;cmp	[1],bx 
 35410 000060D1 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 35411 000060D5 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 35412                                  	;mov	[1],di
 35413 000060D7 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 35414                                  
 35415                                  arena_free_next:
 35416                                  	;cmp	byte [di],5Ah ;'Z'
 35417 000060DB 803D5A                          CMP     BYTE [DI],arena_signature_end
 35418                                                                          ; end of road, Jack?
 35419                                          ;retz				; never come back no more
 35420                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 35421                                  	; 14/05/2019
 35422                                  	; MSDOS 6.0
 35423 000060DE 7405                    	jz	short arena_chk_umbs
 35424                                          
 35425 000060E0 E81200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 35426 000060E3 EBE8                            JMP     SHORT arena_free_process_loop
 35427                                  
 35428                                  	; MSDOS 6.0
 35429                                  arena_chk_umbs:				; M010 - Start
 35430                                  	; 20/05/2019
 35431 000060E5 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 35432 000060E9 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 35433 000060EC 741D                    	je	short ret_label		; N: we're done
 35434                                  	
 35435 000060EE 8CDF                    	mov	di,ds			; di = last arena
 35436 000060F0 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 35437                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 35438                                  	;jmp	short arena_free_process_start
 35439                                  					; M010 - End
 35440                                  	; 10/03/2024 (PCDOS 7.1 IBMDOS.COM)
 35441 000060F2 72D3                    	jb	short arena_free_process_start
 35442                                  
 35443                                  	; 10/03/2024
 35444                                  AFP_RETN:
 35445 000060F4 C3                      	RETN
 35446                                  
 35447                                  ;	BREAK	<Arena Helper Routines>
 35448                                  
 35449                                  ;**	Arena_Next - Find Next item in Arena
 35450                                  ;----------------------------------------------------------------------------
 35451                                  ;	ENTRY	DS - pointer to block head
 35452                                  ;		(di) = 0
 35453                                  ;	EXIT	AX,ES - pointers to next head
 35454                                  ;		'C' set iff arena damaged
 35455                                  ;----------------------------------------------------------------------------
 35456                                  
 35457                                  arena_next:
 35458 000060F5 8CD8                            MOV     AX,DS                   ; AX <- current block
 35459 000060F7 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 35460 000060FB 40                              INC     AX                      ; remember that header!
 35461                                  
 35462                                  ;       fall into check_signature and return
 35463                                  ;
 35464                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 35465                                  ;       RETN
 35466                                  
 35467                                  ;**	Check_Signature - Check Memory Block Signature
 35468                                  ;----------------------------------------------------------------------------
 35469                                  ;	ENTRY	(AX) = address of block header
 35470                                  ;		(di) = 0
 35471                                  ;	EXIT	 ES = AX
 35472                                  ;		'C' clear if signature good
 35473                                  ;		'C' set if signature bad
 35474                                  ;	USES	ES, Flags
 35475                                  ;----------------------------------------------------------------------------
 35476                                  
 35477                                  check_signature:        
 35478                                  
 35479 000060FC 8EC0                    	MOV     ES,AX                   ; ES <- AX
 35480                                  	;cmp	byte [es:di],4Dh ; 'M'
 35481 000060FE 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 35482                                                                          ; IF next signature = not_end THEN
 35483 00006102 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 35484                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 35485 00006104 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 35486                                                                          ; IF next signature = end then
 35487 00006108 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 35488 0000610A F9                              STC                             ; set error
 35489                                  ret_label: ; MSDOS 6.0
 35490                                  ;AFP_RETN:	; 10/03/2024
 35491                                   	; Retro DOS v2.0 - 05/03/2018
 35492                                  check_signature_ok:
 35493                                  COALESCE_RETN:
 35494 0000610B C3                      	RETN
 35495                                  
 35496                                  ;**	Coalesce - Combine free blocks ahead with current block
 35497                                  ;----------------------------------------------------------------------------
 35498                                  ;	Coalesce adds the block following the argument to the argument block,
 35499                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 35500                                  ;	some callers (such as $setblock) use it to join a free block to it's
 35501                                  ;	preceeding allocated block.
 35502                                  ;
 35503                                  ;	ENTRY	(ds) = pointer to the head of a free block
 35504                                  ;		(di) = 0
 35505                                  ;	EXIT	'C' clear if OK
 35506                                  ;		  (ds) unchanged, this block updated
 35507                                  ;		  (ax) = address of next block, IFF not at end
 35508                                  ;		'C' set if arena trashed
 35509                                  ;	USES	(cx)
 35510                                  ;----------------------------------------------------------------------------
 35511                                          
 35512                                  Coalesce:
 35513                                  	;cmp	byte [di],5Ah ; 'Z'
 35514 0000610C 803D5A                  	CMP     BYTE [DI],arena_signature_end
 35515                                                                          ; IF current signature = END THEN
 35516                                          ;retz				;   GOTO ok
 35517 0000610F 74FA                            jz	short COALESCE_RETN
 35518 00006111 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 35519                                          ;retc				; IF no error THEN GOTO check
 35520 00006114 72F5                    	jc	short COALESCE_RETN
 35521                                  
 35522                                  coalesce_check:
 35523                                  	;cmp	[es:1],di
 35524 00006116 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 35525                                          ;retnz				; IF next block isnt free THEN return
 35526 0000611B 75EE                            JNZ	SHORT COALESCE_RETN
 35527                                  	;mov	cx,[ES:3]
 35528 0000611D 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 35529 00006122 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 35530                                          ;ADD	[3],CX
 35531 00006123 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 35532 00006127 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 35533 0000612A 880D                            MOV     [DI],CL
 35534 0000612C EBDE                            JMP     SHORT Coalesce		; try again
 35535                                  
 35536                                  ; 04/08/2018 - Retro DOS v3.0
 35537                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 35538                                  
 35539                                  ;	BREAK  <$Alloc - allocate space in memory>
 35540                                  
 35541                                  ; MSDOS 6.0
 35542                                  ;----------------------------------------------------------------------------
 35543                                  ;**	$Alloc - Allocate Memory Space
 35544                                  ;
 35545                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 35546                                  ;	Alloc returns a pointer to a free block of memory that
 35547                                  ;	has the requested size in paragraphs.
 35548                                  ;
 35549                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 35550                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 35551                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 35552                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 35553                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 35554                                  ;
 35555                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 35556                                  ;	starts from arena_head.
 35557                                  ;
 35558                                  ;	Assembler usage:
 35559                                  ;           MOV     BX,size
 35560                                  ;           MOV     AH,Alloc
 35561                                  ;           INT     21h
 35562                                  ;
 35563                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 35564                                  ;	so that we start searching the arena at it's first non-trivial free
 35565                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 35566                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 35567                                  ;	doesn't have too many memory objects in it beyond the first free one.
 35568                                  ;	verify that this is true; if so, this can stay as is
 35569                                  ;
 35570                                  ;	ENTRY	(bx) = requested size, in bytes
 35571                                  ;		(DS) = (ES) = DOSGROUP
 35572                                  ;	EXIT	'C' clear if memory allocated
 35573                                  ;		  (ax:0) = address of requested memory
 35574                                  ;		'C' set if request failed
 35575                                  ;		  (AX) = error_not_enough_memory
 35576                                  ;		    (bx) = max size we could have allocated
 35577                                  ;		  (ax) = error_arena_trashed
 35578                                  ;	USES	All
 35579                                  ;----------------------------------------------------------------------------
 35580                                  
 35581                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35582                                  ;----------------------------------------------------------------------------
 35583                                  ;SUBTTL $Alloc - allocate space in memory
 35584                                  ;
 35585                                  ;   Assembler usage:
 35586                                  ;           MOV     BX,size
 35587                                  ;           MOV     AH,Alloc
 35588                                  ;           INT     21h
 35589                                  ;         AX:0 is pointer to allocated memory
 35590                                  ;         BX is max size if not enough memory
 35591                                  ;
 35592                                  ;   Description:
 35593                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35594                                  ;       memory that has the requested  size  in  paragraphs.
 35595                                  ;
 35596                                  ;   Error return:
 35597                                  ;           AX = error_not_enough_memory
 35598                                  ;              = error_arena_trashed
 35599                                  ;----------------------------------------------------------------------------
 35600                                  
 35601                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35602                                  
 35603                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35604                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35605                                  
 35606                                  _$ALLOC:
 35607                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35608                                  	; 14/05/2019 - Retro DOS v4.0
 35609                                  	; 04/08/2018 - Retro DOS v3.0
 35610                                  	;EnterCrit critMem
 35611 0000612E E8B1B1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35612                                  
 35613                                  ; 17/12/2022
 35614                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35615                                  ;%if 0
 35616                                  	; 14/05/2019
 35617 00006131 16                      	push	ss
 35618 00006132 1F                      	pop	ds
 35619                                  
 35620                                  	; MSDOS 6.0
 35621                                  	;mov	ax,[ss:arena_head]
 35622                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35623                                  
 35624 00006133 A1[2400]                	mov	ax,[arena_head]
 35625 00006136 A3[8E00]                	mov	[START_ARENA],ax
 35626                                  	
 35627                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35628 00006139 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35629                                  					; Q: should we start scanning from
 35630                                  					;    UMB's
 35631 0000613E 740D                    	jz	short norm_alloc	; N: scan from arena_head
 35632                                  		
 35633                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35634                                  	;cmp	word [UMB_HEAD],-1
 35635                                  	;je	short norm_alloc	; N: scan from arena_head
 35636                                  
 35637                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35638 00006140 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 35639 00006145 7406                    	jz	short norm_alloc	; N: scan from arena_head
 35640                                  	
 35641                                  	;mov	ax,[ss:UMB_HEAD]
 35642                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35643 00006147 A1[8C00]                	mov	ax,[UMB_HEAD]
 35644 0000614A A3[8E00]                	mov	[START_ARENA],ax
 35645                                  					; M000 - end
 35646                                  norm_alloc:
 35647 0000614D 31C0                            XOR     AX,AX
 35648 0000614F 89C7                            MOV     DI,AX
 35649                                  	; 15/03/2018
 35650                                          ;MOV	[SS:FirstArena],AX	; init the options
 35651                                          ;MOV	[SS:BestArena],AX
 35652                                          ;MOV	[SS:LastArena],AX
 35653                                  	; 14/05/2019
 35654 00006151 A3[4003]                	MOV	[FirstArena],AX		; init the options
 35655 00006154 A3[4203]                        MOV	[BestArena],AX
 35656 00006157 A3[4403]                        MOV	[LastArena],AX
 35657 0000615A 50                              PUSH    AX                      ; alloc_max <- 0
 35658                                  	; 04/08/2018
 35659                                  start_scan:
 35660                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35661                                  	;MOV	AX,[arena_head]
 35662                                  
 35663                                  	; 14/05/2019	
 35664                                  	; MSDOS 6.0
 35665                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35666 0000615B A1[8E00]                	mov	ax,[START_ARENA]
 35667                                  
 35668                                  	; 27/09/2023 (BugFix) (*)
 35669                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35670                                  start_scan_x:
 35671                                  
 35672 0000615E E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35673 00006161 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35674                                  
 35675                                  ;%endif
 35676                                  
 35677                                  ; 17/12/2022
 35678                                  %if 0
 35679                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35680                                  
 35681                                  	; MSDOS 6.0
 35682                                  	mov	ax,[ss:arena_head]
 35683                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35684                                  
 35685                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35686                                  					; Q: should we start scanning from
 35687                                  					;    UMB's
 35688                                  	jz	short norm_alloc	; N: scan from arena_head
 35689                                  		
 35690                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35691                                  	;je	short norm_alloc	; N: scan from arena_head
 35692                                  
 35693                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35694                                  	jz	short norm_alloc	; N: scan from arena_head
 35695                                  	
 35696                                  	mov	ax,[ss:UMB_HEAD]
 35697                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35698                                  					; M000 - end
 35699                                  norm_alloc:
 35700                                          XOR     AX,AX
 35701                                          MOV     DI,AX
 35702                                  	; 15/03/2018
 35703                                  	MOV	[SS:FirstArena],AX	; init the options
 35704                                  	MOV	[SS:BestArena],AX
 35705                                  	MOV	[SS:LastArena],AX
 35706                                          PUSH    AX                      ; alloc_max <- 0
 35707                                  	; 04/08/2018
 35708                                  start_scan:
 35709                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35710                                  	; 14/05/2019	
 35711                                  	; MSDOS 6.0
 35712                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35713                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35714                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35715                                  %endif
 35716                                  
 35717                                  alloc_scan:
 35718 00006163 06                              PUSH    ES
 35719 00006164 1F                              POP     DS                      ; DS <- ES
 35720 00006165 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35721 00006169 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35722                                  
 35723                                  alloc_next:
 35724                                  	; MSDOS 6.0			; M000 - start 
 35725 0000616B 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35726 00006171 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35727                                  	
 35728 00006173 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35729                                  					; Q: is alloc strategy high_first
 35730 00006179 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35731 0000617B 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35732 0000617F 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35733                                  					;    arena_head
 35734 00006184 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35735 00006186 8CD8                    	mov	ax,ds			; ax = current block
 35736 00006188 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35737 0000618D EB03                    	jmp	short alloc_chk_end
 35738                                  
 35739                                  norm_strat:
 35740                                  	;cmp	byte [di],5Ah ; 'Z'
 35741 0000618F 803D5A                          CMP     BYTE [DI],arena_signature_end
 35742                                                                          ; IF current block is last THEN
 35743                                  alloc_chk_end:
 35744 00006192 740E                            JZ      SHORT alloc_end		;   GOTO end
 35745 00006194 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35746 00006197 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35747                                  
 35748                                  alloc_err:
 35749 00006199 58                              POP     AX
 35750                                  
 35751                                  alloc_trashed:
 35752                                  	;LeaveCrit critMem
 35753 0000619A E860B1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35754                                          ;error	error_arena_trashed
 35755                                  	;mov	al,7
 35756 0000619D B007                    	MOV	AL,error_arena_trashed
 35757                                  alloc_errj:
 35758 0000619F E998A4                  	JMP	SYS_RET_ERR
 35759                                  
 35760                                  alloc_end:
 35761                                  	; 18/05/2019
 35762 000061A2 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35763 000061A8 7403                    	jz	short alloc_chk 
 35764 000061AA E98400                  	jmp	alloc_do_split
 35765                                  
 35766                                  alloc_chk:
 35767                                  	; MSDOS 6.0
 35768 000061AD 36A1[2400]              	mov	ax,[ss:arena_head]
 35769 000061B1 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35770 000061B6 740E                    	je	short alloc_fail	; Y: not enough memory
 35771                                  					; N:
 35772                                  					; Q: is the alloc strat HIGH_ONLY
 35773 000061B8 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35774 000061BE 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35775                                  	
 35776 000061C0 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35777                                  	; 27/09/2023 (*)
 35778 000061C4 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35779                                  	;jmp	short start_scan
 35780                                  					; M000 - end
 35781                                  
 35782                                  alloc_fail:
 35783                                          ;invoke Get_User_Stack
 35784 000061C6 E8B8A2                          CALL	Get_User_Stack
 35785 000061C9 5B                      	POP     BX
 35786                                          ;MOV	[SI].user_BX,BX
 35787                                  	;MOV	[SI+2],BX
 35788 000061CA 895C02                  	mov	[SI+user_env.user_BX],bx
 35789                                  	;LeaveCrit critMem
 35790 000061CD E82DB1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35791                                  	;error	error_not_enough_memory
 35792                                  	;mov	al,8
 35793 000061D0 B008                    	MOV	AL,error_not_enough_memory
 35794                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35795 000061D2 EBCB                    	jmp	short alloc_errj
 35796                                  	;JMP	SYS_RET_ERR
 35797                                  
 35798                                  alloc_free:
 35799 000061D4 E835FF                          CALL    Coalesce		; add following free block to current
 35800 000061D7 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35801 000061D9 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35802 000061DD 5A                              POP     DX                      ; check for max found size
 35803 000061DE 39D1                            CMP     CX,DX
 35804 000061E0 7602                            JNA     SHORT alloc_test
 35805 000061E2 89CA                            MOV     DX,CX
 35806                                  
 35807                                  alloc_test:
 35808 000061E4 52                              PUSH    DX
 35809 000061E5 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35810 000061E7 7782                    	JA      SHORT alloc_next	;   GOTO next
 35811                                  
 35812                                  	; 15/03/2018
 35813 000061E9 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35814 000061EF 7505                    	JNZ	SHORT alloc_best
 35815 000061F1 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 35816                                  alloc_best:
 35817 000061F6 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35818 000061FC 740E                            JZ      SHORT alloc_make_best	; initial best
 35819 000061FE 06                              PUSH	ES
 35820 000061FF 368E06[4203]                    MOV     ES,[SS:BestArena]
 35821 00006204 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35822 00006209 07                              POP	ES
 35823 0000620A 7605                            JBE     SHORT alloc_last
 35824                                  alloc_make_best:
 35825 0000620C 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35826                                  alloc_last:
 35827 00006211 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35828 00006216 E952FF                          JMP     alloc_next
 35829                                  ;
 35830                                  ; split the block high
 35831                                  ;
 35832                                  alloc_do_split_high:
 35833 00006219 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35834 0000621E 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35835 00006222 29D9                            SUB     CX,BX
 35836 00006224 8CDA                            MOV     DX,DS
 35837 00006226 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35838 00006228 01CA                            ADD     DX,CX                   ; point to next block
 35839 0000622A 8EC2                            MOV     ES,DX                   ; no decrement!
 35840 0000622C 49                              DEC     CX
 35841 0000622D 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35842 0000622F EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35843                                  ;
 35844                                  ; we have scanned memory and have found all appropriate blocks
 35845                                  ; check for the type of allocation desired; first and best are identical
 35846                                  ; last must be split high
 35847                                  ;
 35848                                  alloc_do_split:
 35849                                  
 35850                                  ; 17/12/2022
 35851                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35852                                  ;%if 0
 35853                                  	; 14/05/2019
 35854                                  	; MSDOS 6.0			; M000 - start
 35855                                  	;xor	cx,cx
 35856 00006231 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35857                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35858 00006236 80E13F                  	and	cl,3Fh
 35859                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35860 00006239 80F901                  	cmp	cl,BEST_FIT
 35861 0000623C 77DB                    	ja	short alloc_do_split_high
 35862                                  ;%endif
 35863                                  
 35864                                  	; 17/12/2022
 35865                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35866                                  	; MSDOS 6.0 & MSDOS 5.0
 35867                                  	;xor	cx,cx
 35868                                  	;mov	cl,[ss:AllocMethod]
 35869                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35870                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35871                                  	;ja	short alloc_do_split_high
 35872                                  
 35873                                  	; 15/03/2018
 35874                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35875                                  	; 04/08/2018
 35876                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35877                                          ;JA	SHORT alloc_do_split_high
 35878                                          
 35879 0000623E 368E1E[4003]            	MOV     DS,[SS:FirstArena]
 35880 00006243 7205                    	JB      SHORT alloc_get_size
 35881 00006245 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35882                                  
 35883                                  alloc_get_size:
 35884 0000624A 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35885 0000624E 29D9                            SUB     CX,BX                   ; get room left over
 35886 00006250 8CD8                            MOV     AX,DS
 35887 00006252 89C2                            MOV     DX,AX                   ; save for owner setting
 35888 00006254 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35889 00006256 01D8                            ADD     AX,BX
 35890 00006258 40                              INC     AX                      ; remember the header
 35891 00006259 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35892 0000625B 49                              DEC     CX                      ; CX <- size of split block
 35893                                  alloc_set_sizes:
 35894 0000625C 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35895 00006260 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35896                                  	;mov	bl,4Dh ; 'M'
 35897 00006265 B34D                            MOV     BL,arena_signature_normal
 35898 00006267 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35899 00006269 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35900 0000626C 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35901                                  
 35902                                  alloc_set_owner:
 35903 00006271 8EDA                            MOV     DS,DX
 35904 00006273 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35905 00006277 A30100                          MOV     [ARENA.OWNER],AX
 35906 0000627A 8CD8                            MOV     AX,DS
 35907 0000627C 40                              INC     AX
 35908 0000627D 5B                              POP     BX
 35909                                  	;LeaveCrit critMem
 35910 0000627E E87CB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35911                                  	
 35912                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35913                                  alloc_ok:
 35914                                          ;transfer SYS_RET_OK
 35915 00006281 E9ADA3                  	JMP	SYS_RET_OK
 35916                                  
 35917                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35918                                  
 35919                                  ; MSDOS 6.0
 35920                                  ;----------------------------------------------------------------------------
 35921                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35922                                  ;
 35923                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35924                                  ;	any following free space onto this block; then we try to trim the
 35925                                  ;	block down to the size requested.
 35926                                  ;
 35927                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35928                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35929                                  ;	Thus the maximum-size-possible value that we return has already
 35930                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35931                                  ;
 35932                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35933                                  ;		finish it's work. For this reason we build the allocsf
 35934                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35935                                  ;		code.
 35936                                  ;
 35937                                  ;	ENTRY	(es) = segment of old block
 35938                                  ;		(bx) = newsize
 35939                                  ;		(ah) = SETBLOCK
 35940                                  ;
 35941                                  ;	EXIT	'C' clear if OK
 35942                                  ;		'C' set if error
 35943                                  ;		  (ax) = error_invalid_block
 35944                                  ;		       = error_arena_trashed
 35945                                  ;		       = error_not_enough_memory
 35946                                  ;		       = error_invalid_function
 35947                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35948                                  ;	USES	???? BUGBUG
 35949                                  ;----------------------------------------------------------------------------
 35950                                  
 35951                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35952                                  ;----------------------------------------------------------------------------
 35953                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35954                                  ;
 35955                                  ;   Assembler usage:
 35956                                  ;           MOV     ES,block
 35957                                  ;           MOV     BX,newsize
 35958                                  ;           MOV     AH,setblock
 35959                                  ;           INT     21h
 35960                                  ;         if setblock fails for growing, BX will have the maximum
 35961                                  ;         size possible
 35962                                  ;   Error return:
 35963                                  ;           AX = error_invalid_block
 35964                                  ;              = error_arena_trashed
 35965                                  ;              = error_not_enough_memory
 35966                                  ;              = error_invalid_function
 35967                                  ;----------------------------------------------------------------------------
 35968                                  
 35969                                  _$SETBLOCK:        
 35970                                  	; 04/08/2018 - Retro DOS v3.0
 35971                                  	;EnterCrit   critMem
 35972 00006284 E85BB0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35973                                  
 35974 00006287 BF0000                  	MOV     DI,ARENA.SIGNATURE
 35975 0000628A 8CC0                            MOV     AX,ES
 35976 0000628C 48                              DEC     AX
 35977 0000628D E86CFE                          CALL    check_signature
 35978 00006290 7303                            JNC     SHORT setblock_grab
 35979                                  
 35980                                  setblock_bad:
 35981 00006292 E905FF                          JMP     alloc_trashed
 35982                                  
 35983                                  setblock_grab:
 35984 00006295 8ED8                            MOV     DS,AX
 35985 00006297 E872FE                          CALL    Coalesce
 35986 0000629A 72F6                            JC      SHORT setblock_bad
 35987 0000629C 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35988 000062A0 51                              PUSH    CX
 35989 000062A1 39CB                            CMP     BX,CX
 35990 000062A3 76A5                            JBE     SHORT alloc_get_size
 35991 000062A5 E91EFF                          JMP     alloc_fail
 35992                                  
 35993                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35994                                  
 35995                                  ; MSDOS 6.0
 35996                                  ;----------------------------------------------------------------------------
 35997                                  ;**	$DEALLOC - Free Heap Memory
 35998                                  ;
 35999                                  ;	ENTRY	(es) = address of item
 36000                                  ;
 36001                                  ;	EXIT	'C' clear of OK
 36002                                  ;		'C' set if error
 36003                                  ;		  (AX) = error_invalid_block
 36004                                  ;	USES	???? BUGBUG
 36005                                  
 36006                                  ; MSDOS 2.11 (& MSDOS 3.3)
 36007                                  ;----------------------------------------------------------------------------
 36008                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 36009                                  ;
 36010                                  ;   Assembler usage:
 36011                                  ;           MOV     ES,block
 36012                                  ;           MOV     AH,dealloc
 36013                                  ;           INT     21h
 36014                                  ;
 36015                                  ;   Error return:
 36016                                  ;           AX = error_invalid_block
 36017                                  ;              = error_arena_trashed
 36018                                  ;---------------------------------------------------------------------------- 
 36019                                  
 36020                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36021                                  _$DEALLOC:
 36022                                  	; 14/05/2019 - Retro DOS v4.0    
 36023                                  	; 04/08/2018 - Retro DOS v3.0
 36024                                  	;EnterCrit   critMem
 36025 000062A8 E837B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 36026                                  
 36027                                  	; MSDOS 6.0			; M016, M068 - Start
 36028 000062AB 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 36029                                  					; Q: was the previous call an int 21
 36030                                  					;    exec call
 36031 000062B1 740D                    	jz	short deallocate	; N: continue
 36032 000062B3 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 36033 000062B9 7505                    	jne	short deallocate	; N: continue
 36034                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 36035                                  	; 25/09/2023
 36036 000062BB 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 36037                                  deallocate:				; M016, M068 - End
 36038 000062C0 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 36039 000062C3 8CC0                            MOV     AX,ES
 36040 000062C5 48                              DEC     AX
 36041 000062C6 E833FE                          CALL    check_signature
 36042 000062C9 720A                            JC      SHORT dealloc_err
 36043 000062CB 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 36044                                  	;LeaveCrit critMem
 36045 000062D0 E82AB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 36046                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36047                                          ;transfer SYS_RET_OK
 36048                                  dealloc_ok:
 36049 000062D3 EBAC                    	jmp	short alloc_ok
 36050                                  	;JMP	SYS_RET_OK
 36051                                  
 36052                                  dealloc_err:
 36053                                  	;LeaveCrit critMem
 36054 000062D5 E825B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 36055                                          ;error	error_invalid_block
 36056                                  	;mov	al,9
 36057 000062D8 B009                    	MOV	AL,error_invalid_block
 36058                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36059                                  dealloc_errj:
 36060                                  AllocOperErrj:	; 17/12/2022
 36061 000062DA E95DA3                  	JMP	SYS_RET_ERR
 36062                                  
 36063                                  ;	BREAK $AllocOper - get/set allocation mechanism
 36064                                  
 36065                                  ; MSDOS 6.0
 36066                                  ;----------------------------------------------------------------------------
 36067                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 36068                                  ;
 36069                                  ;	Assembler usage:
 36070                                  ;           MOV     AH,AllocOper
 36071                                  ;           MOV     BX,method
 36072                                  ;           MOV     AL,func
 36073                                  ;           INT     21h
 36074                                  ;
 36075                                  ;	ENTRY	
 36076                                  ;		(al) = 0
 36077                                  ;		  Get allocation Strategy in (ax)
 36078                                  ;
 36079                                  ;		(al) = 1, (bx) = method = zw0000xy
 36080                                  ;		  Set allocation strategy.
 36081                                  ;		   w  = 1  => HIGH_ONLY
 36082                                  ;		   z  = 1  => HIGH_FIRST
 36083                                  ;		   xy = 00 => FIRST_FIT
 36084                                  ;		      = 01 => BEST_FIT
 36085                                  ;		      = 10 => LAST_FIT
 36086                                  ;
 36087                                  ;		(al) = 2
 36088                                  ;		  Get UMB link state in (al)
 36089                                  ;
 36090                                  ;		(al) = 3
 36091                                  ;		  Set UMB link state
 36092                                  ;		   (bx) = 0 => Unlink UMBs
 36093                                  ;		   (bx) = 1 => Link UMBs
 36094                                  ;
 36095                                  ;
 36096                                  ;	EXIT	'C' clear if OK
 36097                                  ;
 36098                                  ;		 if (al) = 0
 36099                                  ;		  (ax) = existing method
 36100                                  ;		 if (al) = 1
 36101                                  ;		  Sets allocation strategy
 36102                                  ;		 if (al) = 2
 36103                                  ;		  (al) = 0 => UMBs not linked
 36104                                  ;		  (al) = 1 => UMBs linked in
 36105                                  ;		 if (al) = 3
 36106                                  ;		  Links/Unlinks the UMBs into DOS chain
 36107                                  ;
 36108                                  ;		'C' set if error
 36109                                  ;		  AX = error_invalid_function
 36110                                  ;
 36111                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 36112                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 36113                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 36114                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 36115                                  ;		    arena' if an arena sig is damaged.
 36116                                  ;----------------------------------------------------------------------------
 36117                                  
 36118                                  ; MSDOS 2.11 (& MSDOS 3.3)
 36119                                  ;----------------------------------------------------------------------------
 36120                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 36121                                  ;
 36122                                  ;   Assembler usage:
 36123                                  ;           MOV     AH,AllocOper
 36124                                  ;           MOV     BX,method
 36125                                  ;           MOV     AL,func
 36126                                  ;           INT     21h
 36127                                  ;
 36128                                  ;   Error return:
 36129                                  ;           AX = error_invalid_function
 36130                                  ;----------------------------------------------------------------------------
 36131                                  
 36132                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36133                                  _$ALLOCOPER:
 36134                                  	; 14/05/2019 - Retro DOS v4.0
 36135                                  	; MSDOS 6.0
 36136 000062DD 08C0                    	or	al,al ; 0
 36137 000062DF 741E                    	jz	short AllocGetStrat
 36138                                  	; 17/12/2022
 36139                                  	;cmp	al,1
 36140                                  	;jz	short AllocSetStrat
 36141                                  
 36142                                  	; 01/12/2022
 36143                                  	;cmp	al, 2
 36144                                  	;jb	short AllocSetStrat
 36145                                  	;ja	short AllocSetLink
 36146                                  	;;jmp	short AllocGetLink
 36147                                  ;AllocGetLink:
 36148                                  	; MSDOS 6.0
 36149                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 36150                                  	;and 	al,LINKSTATE
 36151                                  	;;transfer SYS_RET_OK
 36152                                  	;jmp	SYS_RET_OK
 36153                                  
 36154 000062E1 3C02                    	cmp	al,2
 36155                                  	; 17/12/2022
 36156 000062E3 7223                    	jb	short AllocSetStrat ; al = 1
 36157 000062E5 7432                    	je	short AllocGetLink
 36158                                  
 36159                                  	;cmp	al,2
 36160                                  	;jz	short AllocGetLink
 36161 000062E7 3C03                    	cmp	al,3
 36162 000062E9 7436                    	jz	short AllocSetLink
 36163                                  
 36164                                  	; 15/04/2018
 36165                                  	;CMP	AL,1
 36166                                          ;JB	SHORT AllocOperGet
 36167                                          ;JZ	SHORT AllocOperSet
 36168                                  
 36169                                  AllocOperError:
 36170                                  	; 04/08/2018 - Retro DOS v3.0
 36171                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus
 36172                                  	;mov	byte [ss:EXTERR_LOCUS],5
 36173 000062EB 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 36174                                  	;error	error_invalid_function
 36175                                  	;mov	al,1
 36176 000062F1 B001                    	MOV	AL,error_invalid_function
 36177                                  	; 17/12/2022
 36178                                  ;AllocOperErrj:
 36179                                  	;JMP	SYS_RET_ERR
 36180                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36181                                  	;jmp	short dealloc_errj
 36182                                  	; 17/12/2022
 36183 000062F3 EBE5                    	jmp	short AllocOperErrj
 36184                                  
 36185                                  AllocArenaError:
 36186                                  	; MSDOS 6.0
 36187 000062F5 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 36188                                  					; M009: Extended Error Locus
 36189                                  	;error	error_arena_trashed	; M009:
 36190                                  	;mov	al,7
 36191 000062FB B007                    	MOV	AL,error_arena_trashed
 36192                                  	;JMP	SYS_RET_ERR
 36193 000062FD EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 36194                                  
 36195                                  AllocGetStrat: 
 36196                                  	; MSDOS 6.0
 36197                                  AllocOperGet:
 36198 000062FF 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 36199 00006303 30E4                            XOR     AH,AH
 36200                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36201                                  	;transfer SYS_RET_OK
 36202                                  AllocOperOk:
 36203                                  	; 17/12/2022
 36204                                  	;jmp	short dealloc_ok
 36205 00006305 E929A3                  	JMP	SYS_RET_OK
 36206                                  
 36207                                  AllocSetStrat: 
 36208                                  	; 14/05/2019
 36209                                  	; MSDOS 6.0
 36210 00006308 53                      	push	bx			; M000 - start
 36211                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36212                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 36213                                  	; 17/12/2022
 36214 00006309 80E33F                  	and	bl,3Fh
 36215 0000630C 83FB02                  	cmp	bx,2			; BX must be 0-2
 36216                                  	;cmp	bl,2
 36217 0000630F 5B                      	pop	bx			; M000 - end
 36218 00006310 77D9                    	ja	short AllocOperError
 36219                                  
 36220                                  AllocOperSet:
 36221 00006312 36881E[0203]                    MOV     [SS:AllocMethod],BL
 36222                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36223                                  	;transfer SYS_RET_OK
 36224                                  AllocOperOkj:
 36225 00006317 EBEC                    	jmp	short AllocOperOk
 36226                                  	;JMP	SYS_RET_OK
 36227                                  
 36228                                  AllocGetLink:
 36229                                  	; MSDOS 6.0
 36230 00006319 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 36231                                  	;and	al,1
 36232 0000631D 2401                    	and 	al,LINKSTATE
 36233                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36234                                  	;transfer SYS_RET_OK
 36235                                  AllocOperOkj2:
 36236                                  	; 17/12/2022
 36237 0000631F EBE4                    	jmp	short AllocOperOk
 36238                                  	;jmp	short AllocOperOkj
 36239                                  	;;JMP	SYS_RET_OK
 36240                                  
 36241                                  AllocSetLink:
 36242                                  	; MSDOS 6.0			; M009 - start
 36243 00006321 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 36244 00006326 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 36245 00006329 74C0                    	je	short AllocOperError	; N: error
 36246                                  					; Y: continue
 36247                                  					; M009 - end
 36248 0000632B 83FB01                  	cmp	bx,1
 36249                                  	;jb	short UnlinkUmbs
 36250                                  	;jz	short LinkUmbs
 36251                                  	;jmp	short AllocOperError
 36252                                  	; 10/03/2024
 36253 0000632E 741C                    	jz	short LinkUmbs
 36254 00006330 77B9                    	ja	short AllocOperError
 36255                                  
 36256                                  UnlinkUmbs:
 36257                                  	;test	byte [ss:UMBFLAG],1
 36258 00006332 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 36259 00006338 7410                    	jz	short unlinked		; Y: return 
 36260                                  	
 36261 0000633A E82900                  	call	GetLastArena		; get arena before umb_head in DS
 36262 0000633D 72B6                    	jc	short AllocArenaError	; M009: arena trashed
 36263                                  	
 36264                                  					; make it last
 36265 0000633F C60600005A              	mov	byte [0],arena_signature_end
 36266                                  	
 36267                                  	;and	byte [ss:UMBFLAG],0FEh
 36268 00006344 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 36269                                  	
 36270                                  unlinked:
 36271                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36272                                  	;transfer SYS_RET_OK
 36273                                  	; 17/12/2022
 36274 0000634A EBB9                    	jmp	short AllocOperOk
 36275                                  	;jmp	short AllocOperOkj2
 36276                                  	;;JMP	SYS_RET_OK
 36277                                  
 36278                                  LinkUmbs:
 36279 0000634C 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 36280 00006352 7510                    	jnz	short linked		; Y: return
 36281                                  	
 36282 00006354 E80F00                  	call	GetLastArena		; get arena before umb_head
 36283 00006357 729C                    	jc	short AllocArenaError	; M009: arena trashed
 36284                                  	
 36285                                  					; make it normal. M061: ds points to
 36286                                  					; arena before umb_head
 36287 00006359 C60600004D              	mov	byte [0],arena_signature_normal
 36288                                  	
 36289 0000635E 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 36290                                  linked:
 36291                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36292                                  	;transfer SYS_RET_OK
 36293                                  	; 17/12/2022
 36294 00006364 EB9F                    	jmp	short AllocOperOk
 36295                                  	;jmp	short unlinked
 36296                                  	;;JMP	SYS_RET_OK
 36297                                  
 36298                                  ; MSDOS 6.0
 36299                                  ;--------------------------------------------------------------------------
 36300                                  ; Procedure Name : GetLastArena		-  M003
 36301                                  ;
 36302                                  ; Inputs	 : cx = umb_head
 36303                                  ;
 36304                                  ;
 36305                                  ; Outputs	 : If UMBs are linked
 36306                                  ;			ES = umb_head
 36307                                  ;			DS = arena before umb_head
 36308                                  ;		   else
 36309                                  ;			DS = last arena
 36310                                  ;			ES = next arena. will be umb_head if NC.
 36311                                  ;
 36312                                  ;		   CY if error
 36313                                  ;
 36314                                  ; Uses		 : DS, ES, DI, BX
 36315                                  ;--------------------------------------------------------------------------
 36316                                  
 36317                                  ; 14/05/2019 - Retro DOS v4.0
 36318                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 36319                                  
 36320                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36321                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 36322                                  	
 36323                                  GetLastArena:
 36324 00006366 50                      	push	ax			; save ax
 36325                                  
 36326 00006367 36A1[2400]              	mov	ax,[ss:arena_head]
 36327 0000636B 8EC0                    	mov	es,ax			; es = arena_head
 36328 0000636D 31FF                    	xor	di,di
 36329                                  
 36330 0000636F 26803D5A                	cmp     byte [es:di],arena_signature_end
 36331                                  					; Q: is this the last arena
 36332 00006373 7419                    	je	short GLA_done		; Y: return last arena in ES
 36333                                  
 36334                                  GLA_next:
 36335 00006375 8ED8                    	mov	ds,ax
 36336 00006377 E87BFD                  	call	arena_next		; ax, es -> next arena
 36337                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36338                                  	;jc	short GLA_err
 36339                                  	; 17/12/2022
 36340 0000637A 7228                    	jc	short GLA_err2
 36341                                  
 36342 0000637C 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36343 00006382 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is
 36344                                  					;    umb_head
 36345                                  					; N: terminating condition is 05Ah
 36346                                  
 36347 00006384 26803D5A                	cmp     byte [es:di],arena_signature_end
 36348                                  					; Q: is this the last arena
 36349 00006388 EB02                    	jmp	short GLA_@f
 36350                                  GLA_chkumb:
 36351 0000638A 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36352                                  GLA_@f:
 36353 0000638C 75E7                    	jne	short GLA_next		; N: get next arena
 36354                                  
 36355                                  GLA_done:
 36356                                  					; M061 - Start
 36357 0000638E 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36358 00006394 750B                    	jnz	short GLA_ret		; Y: we're done
 36359                                  					; N: let us confirm that the next
 36360                                  					;    arena is umb_head
 36361 00006396 8ED8                    	mov	ds,ax
 36362 00006398 E85AFD                  	call	arena_next		; ax, es -> next arena
 36363                                  	;jc	short GLA_err
 36364 0000639B 7207                    	jc	short GLA_err2
 36365 0000639D 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36366 0000639F 7502                    	jne	short GLA_err		; N: error
 36367                                  					; M061 - End
 36368                                  GLA_ret:
 36369                                  	; 17/12/2022
 36370                                  	;clc
 36371                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36372                                  	;clc
 36373 000063A1 58                      	pop	ax			; M061
 36374 000063A2 C3                      	retn				; M061
 36375                                  
 36376                                  GLA_err:
 36377 000063A3 F9                      	stc				; M061
 36378                                  GLA_err2:
 36379 000063A4 58                      	pop	ax
 36380 000063A5 C3                      	retn
 36381                                  
 36382                                  ;============================================================================
 36383                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 36384                                  ;============================================================================
 36385                                  ; 04/08/2018 - Retro DOS v3.0
 36386                                  
 36387                                  ;	TITLE SRVCALL - Server DOS call
 36388                                  ;	NAME  SRVCALL
 36389                                  
 36390                                  ;**	SRVCALL.ASM - Server DOS call functions
 36391                                  ;
 36392                                  ;
 36393                                  ;	$ServerCall
 36394                                  ;
 36395                                  ;	Modification history:
 36396                                  ;
 36397                                  ;	    Created: ARR 08 August 1983
 36398                                  
 36399                                  ;AsmVars <Installed>
 36400                                  
 36401                                  ;include dpl.asm
 36402                                  
 36403                                  ;Installed = TRUE
 36404                                  
 36405                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 36406                                  ; ---------------------------------------------------------------------------
 36407                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36408                                  
 36409                                  ;BREAK <ServerCall -- Server DOS call>
 36410                                  
 36411                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 36412                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 36413                                  
 36414                                  ;hkn; TABLE	SEGMENT
 36415                                  ;Public SRVC001S,SRVC001E
 36416                                  ;SRVC001S label byte
 36417                                  
 36418                                  SRVC001S:
 36419                                  
 36420 000063A6 [AA63]                  SERVERTAB:	dw	SERVER_DISP
 36421 000063A8 [FC63]                  SERVERLEAVE:	dw	SERVERRETURN
 36422 000063AA 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 36423 000063AB [6264]                  		dw	SRV_CALL	; 0
 36424 000063AD [FD63]                  		dw	COMMIT_ALL	; 1
 36425 000063AF [3364]                  		dw	CLOSE_NAME	; 2
 36426 000063B1 [3C64]                  		dw	CLOSE_UID	; 3
 36427 000063B3 [4364]                  		dw	CLOSE_UID_PID	; 4
 36428 000063B5 [4A64]                  		dw	GET_LIST	; 5
 36429 000063B7 [A364]                  		dw	GET_DOS_DATA	; 6
 36430 000063B9 [C764]                  		dw	SPOOL_OPER	; 7
 36431 000063BB [C764]                  		dw	SPOOL_OPER	; 8
 36432 000063BD [C764]                  		dw	SPOOL_OPER	; 9
 36433 000063BF [D364]                  		dw	_$SetExtendedError  ; 10
 36434                                  
 36435                                  SERVER_DISP_END:  ;  LABEL BYTE
 36436                                  
 36437                                  ;SRVC001E label byte
 36438                                  
 36439                                  SRVC001E:
 36440                                  
 36441                                  ;hkn; TABLE	ENDS
 36442                                  
 36443                                  ;----------------------------------------------------------------------------
 36444                                  ;
 36445                                  ; Procedure Name : $ServerCall
 36446                                  ;
 36447                                  ; Inputs:
 36448                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 36449                                  ; Function:
 36450                                  ;	AL=0	Server DOS call
 36451                                  ;	AL=1	Commit All files
 36452                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 36453                                  ;	AL=3	Close all files for DPL_UID
 36454                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 36455                                  ;	AL=5	Get open file list entry
 36456                                  ;		    IN: BX File Index
 36457                                  ;			CX User Index
 36458                                  ;		    OUT:ES:DI -> Name
 36459                                  ;			BX = UID
 36460                                  ;		    CX = # locked blocks held by this UID
 36461                                  ;	AL=6	Get DOS data area
 36462                                  ;		    OUT: DS:SI -> Start
 36463                                  ;			CX size in bytes of swap if indos
 36464                                  ;			DX size in bytes of swap always
 36465                                  ;	AL=7	Get truncate flag
 36466                                  ;	AL=8	Set truncate flag
 36467                                  ;	AL=9	Close all spool files
 36468                                  ;	AL=10	SetExtendedError
 36469                                  ;
 36470                                  ;----------------------------------------------------------------------------
 36471                                  
 36472                                  _$ServerCall:
 36473                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36474                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 36475                                  	; 10/06/2019
 36476                                  	; 29/04/2019 - Retro DOS v4.0
 36477                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 36478                                  
 36479                                  	; 05/08/2018 - Retro DOS v3.0
 36480                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 36481 000063C1 3C07                    	CMP	AL,7
 36482 000063C3 7204                    	JB	short SET_STUFF
 36483 000063C5 3C09                    	CMP	AL,9
 36484 000063C7 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 36485                                  SET_STUFF:
 36486 000063C9 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 36487                                  	;mov	bx,[si+12h]
 36488 000063CB 8B5C12                  	MOV	BX,[SI+DPL.UID]
 36489                                  
 36490                                  	; MSDOS 6.0
 36491                                  ;SR;
 36492                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 36493                                  ; of USER_ID
 36494                                  
 36495 000063CE 36F606[3010]01          	test	byte [SS:IsWin386],1
 36496 000063D4 7505                    	jnz	short skip_win386
 36497                                  
 36498                                  ;hkn; SS override for user_id and proc_id
 36499                                  	; 15/08/2018
 36500 000063D6 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 36501                                  
 36502                                  skip_win386:
 36503 000063DB 8B5C14                  	MOV	BX,[SI+DPL.PID]
 36504 000063DE 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 36505                                  NO_SET_ID:
 36506                                  	; 10/06/2019 - Retro DOS v4.0
 36507 000063E3 2EFF36[A863]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 36508 000063E8 2EFF36[A663]            	PUSH	word [cS:SERVERTAB]	; push table address
 36509 000063ED 50                      	PUSH	AX
 36510 000063EE E80DAE                  	call	TableDispatch
 36511                                  
 36512                                  ;hkn; SS override
 36513                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 36514 000063F1 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36515                                  	;error	error_invalid_function
 36516                                  	;mov	al,1
 36517 000063F7 B001                    	MOV	AL,error_invalid_function
 36518                                  servercall_error:
 36519 000063F9 E93EA2                  	JMP	SYS_RET_ERR
 36520                                  
 36521                                  SERVERRETURN:
 36522 000063FC C3                      	retn
 36523                                  
 36524                                  ; Commit - iterate through the open file list and make sure that the
 36525                                  ; directory entries are correctly updated.
 36526                                  
 36527                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36528                                  COMMIT_ALL:
 36529 000063FD 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 36530 000063FF 16                      	push	ss
 36531 00006400 1F                      	pop	ds
 36532 00006401 E8DEAE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 36533                                  CommitLoop:
 36534 00006404 53                      	push	bx
 36535 00006405 E82201                  	call	SFFromSFN
 36536 00006408 7222                    	JC	short CommitDone
 36537 0000640A 26833D00                	cmp	word [es:di],0
 36538                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 36539                                  					; if (ThisSFT->refcount != 0)
 36540 0000640E 7418                    	JZ	short CommitNext
 36541                                  	;cmp	word [es:di],0FFFFh ; -1
 36542 00006410 26833DFF                	cmp	word [ES:DI],sf_busy
 36543                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 36544                                  					; BUSY SFTs have god knows what
 36545 00006414 7412                    	JZ	short CommitNext	;   in them.
 36546                                  	; 17/12/2022
 36547 00006416 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 36548                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 36549 0000641B 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 36550                                  					;	doesn't deadlock
 36551 0000641D 893E[9E05]              	MOV	[THISSFT],DI
 36552 00006421 8C06[A005]              	MOV	[THISSFT+2],ES
 36553 00006425 E8A9CB                  	call	DOS_COMMIT		;	DOSCommit ();
 36554                                  CommitNext:
 36555 00006428 5B                      	pop	bx
 36556 00006429 43                      	INC	BX
 36557 0000642A EBD8                    	JMP	short CommitLoop
 36558                                  CommitDone:
 36559 0000642C E8CEAE                  	call	LCritSFT
 36560 0000642F 5B                      	pop	bx
 36561                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36562                                  Commit_Ok:
 36563 00006430 E9FEA1                  	jmp	SYS_RET_OK
 36564                                  	
 36565                                  CLOSE_NAME:
 36566                                  
 36567                                  ;if installed
 36568                                  
 36569                                  ;hkn; SS override
 36570                                  	;call	far [ss:MFTcloN]
 36571 00006433 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 36572                                  ;else
 36573                                  ;	Call	MFTcloN
 36574                                  ;endif
 36575                                  
 36576                                  CheckReturns:
 36577                                  
 36578                                  ; 10/03/2024
 36579                                  %if 0
 36580                                  	JC	short func_err
 36581                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36582                                  	;transfer SYS_RET_OK
 36583                                  Commit_Okj:
 36584                                  	jmp	short Commit_Ok
 36585                                  	;jmp	SYS_RET_OK
 36586                                  %else
 36587 00006438 73F6                    	jnc	short Commit_Ok
 36588                                  %endif
 36589                                  
 36590                                  func_err:
 36591                                  	;transfer SYS_RET_ERR
 36592                                  	;jmp	SYS_RET_ERR
 36593 0000643A EBBD                    	jmp	short servercall_error
 36594                                  
 36595                                  CLOSE_UID:
 36596                                  
 36597                                  ;if installed
 36598                                  ;hkn; SS override
 36599                                  	;call	far [ss:MFTclU]
 36600 0000643C 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36601                                  ;else
 36602                                  ;	Call	MFTclU
 36603                                  ;endif
 36604 00006441 EBF5                    	JMP	short CheckReturns
 36605                                  
 36606                                  CLOSE_UID_PID:
 36607                                  
 36608                                  ;if installed
 36609                                  ;hkn; SS override
 36610                                  	;call	far [ss:MFTCloseP]
 36611 00006443 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP
 36612                                  ;else
 36613                                  ;	Call	MFTCloseP
 36614                                  ;endif
 36615 00006448 EBEE                    	JMP	short CheckReturns
 36616                                  
 36617                                  GET_LIST:
 36618                                  
 36619                                  ;if installed
 36620                                  ;hkn; SS override
 36621                                  	;call	far [ss:MFT_get]
 36622 0000644A 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36623                                  ;else
 36624                                  ;	Call	MFT_get
 36625                                  ;endif
 36626 0000644F 72E9                    	JC	short func_err
 36627 00006451 E82DA0                  	call	Get_User_Stack
 36628                                  	;mov	[si+2],bx
 36629 00006454 895C02                  	MOV	[SI+user_env.user_BX],BX
 36630                                  	;mov	[si+10],di
 36631 00006457 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36632                                  	;mov	[si+16],es
 36633 0000645A 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36634                                  SetCXOK:
 36635                                  	;mov	[si+4],cx
 36636 0000645D 894C04                  	MOV	[SI+user_env.user_CX],CX
 36637                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36638                                  	;transfer SYS_RET_OK
 36639                                  Commit_Okj2:
 36640                                  	; 17/12/2022
 36641 00006460 EBCE                    	jmp	short Commit_Ok
 36642                                  	;jmp	short Commit_Okj
 36643                                  	;;jmp	SYS_RET_OK
 36644                                  
 36645                                  SRV_CALL:
 36646 00006462 58                      	POP	AX			; get rid of call to $srvcall
 36647 00006463 1E                      	push	ds
 36648 00006464 56                      	push	si
 36649 00006465 E819A0                  	call	Get_User_Stack
 36650 00006468 5F                      	pop	di
 36651 00006469 07                      	pop	es
 36652                                  
 36653                                  ; DS:SI point to stack
 36654                                  ; ES:DI point to DPL
 36655                                  
 36656 0000646A E870AD                  	call	XCHGP
 36657                                  
 36658                                  ; DS:SI point to DPL
 36659                                  ; ES:DI point to stack
 36660                                  ;
 36661                                  ; We now copy the registers from DPL to save stack
 36662                                  
 36663 0000646D 56                      	push	si
 36664 0000646E B90600                  	MOV	CX,6
 36665 00006471 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36666 00006473 47                      	INC	DI
 36667 00006474 47                      	INC	DI			; Skip user_BP
 36668 00006475 A5                      	MOVSW				; DS
 36669 00006476 A5                      	MOVSW				; ES
 36670 00006477 5E                      	pop	si			; DS:SI -> DPL
 36671 00006478 8B04                    	mov	ax,[SI]
 36672                                  	;MOV	AX,[SI+DPL.AX]
 36673                                  	;mov	bx,[si+2]
 36674 0000647A 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36675                                  	;mov	cx,[si+4]
 36676 0000647D 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36677                                  	;mov	dx,[si+6]
 36678 00006480 8B5406                  	MOV	DX,[SI+DPL.DX]
 36679                                  	;mov	di,[si+10]
 36680 00006483 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36681                                  	;mov	es,[si+14]
 36682 00006486 8E440E                  	MOV	ES,[SI+DPL.ES]
 36683                                  	;push	word [si+8]
 36684 00006489 FF7408                  	PUSH	word [SI+DPL.SI]
 36685                                  	;mov	ds,[si+12]
 36686 0000648C 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36687 0000648F 5E                      	POP	SI
 36688                                  
 36689                                  ;hkn; SS override for next 3
 36690 00006490 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36691 00006495 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36692 0000649A 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36693 000064A0 E9E59E                  	jmp	REDISP
 36694                                  
 36695                                  GET_DOS_DATA:
 36696 000064A3 16                      	push	ss
 36697 000064A4 07                      	pop	es
 36698 000064A5 BF[2003]                	MOV     DI,SWAP_START
 36699 000064A8 B9[AC0A]                	MOV     CX,SWAP_END
 36700 000064AB BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36701 000064AE 29F9                    	SUB     CX,DI
 36702 000064B0 29FA                    	SUB     DX,DI
 36703 000064B2 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36704 000064B4 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36705 000064B7 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36706 000064B9 E8C59F                  	call	Get_User_Stack
 36707                                  	;mov	[si+14],es
 36708 000064BC 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36709                                  	;mov	[si+8],di
 36710 000064BF 897C08                  	MOV     [SI+user_env.user_SI],DI
 36711                                  	;mov	[si+6],dx
 36712 000064C2 895406                  	MOV     [SI+user_env.user_DX],DX
 36713 000064C5 EB96                    	JMP	short SetCXOK
 36714                                  
 36715                                  SPOOL_OPER:
 36716                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36717                                  
 36718 000064C7 50                      	push    ax
 36719 000064C8 B82511                  	mov     ax,1125h
 36720 000064CB CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36721                                  			; STACK: WORD subfunction
 36722                                  			; Return: CF set on error, AX = error code
 36723                                  			; STACK unchanged
 36724 000064CD 5B                      	pop	bx
 36725                                  	; 17/12/2022
 36726                                  	;JC	short func_err2
 36727 000064CE 7390                    	jnc	short Commit_Okj2
 36728                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36729                                  	;;jmp	SYS_RET_OK
 36730                                  	;jmp	short Commit_Okj2
 36731                                  	
 36732                                  func_err2:
 36733 000064D0 E967A1                  	jmp	SYS_RET_ERR
 36734                                  
 36735                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36736                                  ;--------------------------------------------------------------------------
 36737                                  ;
 36738                                  ; Procedure Name : $SetExtendedError
 36739                                  ;
 36740                                  ; $SetExtendedError takes extended error information and loads it up for the
 36741                                  ; next extended error call. This is used by interrupt-level proccessors to
 36742                                  ; mask their actions.
 36743                                  ;
 36744                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36745                                  ;   Outputs: none
 36746                                  ;
 36747                                  ;---------------------------------------------------------------------------
 36748                                  
 36749                                  _$SetExtendedError:
 36750                                  
 36751                                  ;hkn; SS override for all variables used
 36752                                  
 36753 000064D3 8B04                    	mov	ax,[si]
 36754                                  	;MOV	AX,[SI+DPL.AX]
 36755 000064D5 36A3[2403]              	MOV	[SS:EXTERR],AX
 36756                                  	;mov	ax,[si+10]
 36757 000064D9 8B440A                  	MOV	AX,[SI+DPL.DI]
 36758 000064DC 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36759                                  	;mov	ax,[si+14]
 36760 000064E0 8B440E                  	MOV	AX,[SI+DPL.ES]
 36761 000064E3 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36762                                  	;mov	ax,[si+2]
 36763 000064E7 8B4402                  	MOV	AX,[SI+DPL.BX]
 36764 000064EA 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36765                                  	;mov	ax,[si+4]
 36766 000064EE 8B4404                  	MOV	AX,[SI+DPL.CX]
 36767 000064F1 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36768 000064F6 C3                      	retn
 36769                                  
 36770                                  ;============================================================================
 36771                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36772                                  ;============================================================================
 36773                                  ; 05/08/2018 - Retro DOS v3.0
 36774                                  ; 05/05/2019 - Retro DOS v4.0
 36775                                  
 36776                                  ;**	Handle related utilities for MSDOS 2.X.
 36777                                  ;----------------------------------------------------------------------------
 36778                                  ;	pJFNFromHandle	written
 36779                                  ;	SFFromHandle	written
 36780                                  ;	SFFromSFN	written
 36781                                  ;	JFNFree 	written
 36782                                  ;	SFNFree 	written
 36783                                  ;
 36784                                  ;	Modification history:
 36785                                  ;
 36786                                  ;	    Created: MZ 1 April 1983
 36787                                  ;----------------------------------------------------------------------------
 36788                                  
 36789                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36790                                  
 36791                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36792                                  ;----------------------------------------------------------------------------
 36793                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36794                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36795                                  ;
 36796                                  ;	NOTE:
 36797                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36798                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36799                                  ;
 36800                                  ;	ENTRY	(bx) = handle
 36801                                  ;	EXIT	'C' clear if ok
 36802                                  ;		  (es:di) = address of JFN value
 36803                                  ;		'C' set if error
 36804                                  ;		  (ax) = error code
 36805                                  ;	USES	AX, DI, ES, Flags
 36806                                  ;----------------------------------------------------------------------------
 36807                                  
 36808                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36809                                  
 36810                                  pJFNFromHandle:
 36811                                  	; 05/05/2019 - Retro DOS v4.0
 36812                                  	;getdseg <es>			; es -> dosdata
 36813 000064F7 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36814                                  	
 36815                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36816 000064FC 268E06[3003]            	mov	es,[es:CurrentPDB]
 36817                                  
 36818                                  	;cmp	bx,[ES:32h]
 36819 00006501 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36820 00006506 7204                    	JB	short pjfn10		; no, get offset
 36821                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36822                                  	;mov	al,6
 36823 00006508 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36824                                  ReturnCarry:
 36825 0000650A F9                      	STC                             ; signal error
 36826 0000650B C3                      	retn				; go back
 36827                                  pjfn10: 
 36828                                  	;les	di,[es:34h]
 36829 0000650C 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36830 00006511 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36831                                  	;clc
 36832                                  pJFNFromHandle_error:
 36833 00006513 C3                      	retn
 36834                                  
 36835                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36836                                  ;----------------------------------------------------------------------------
 36837                                  ;
 36838                                  ; Procedure Name : SFFromHandle
 36839                                  ;
 36840                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36841                                  ;
 36842                                  ;   Input:      BX has handle
 36843                                  ;   Output:     Carry Set
 36844                                  ;                   AX has error code
 36845                                  ;               Carry Reset
 36846                                  ;                   ES:DI has pointer to SF entry
 36847                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36848                                  ; NOTE:
 36849                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36850                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36851                                  ;
 36852                                  ;----------------------------------------------------------------------------
 36853                                  
 36854                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36855                                  
 36856                                  SFFromHandle:
 36857 00006514 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36858                                  	;retc				; return if error
 36859 00006517 72FA                    	jc	short pJFNFromHandle_error
 36860 00006519 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36861                                  	;JNZ	short GetSF		; nope, suck out SF
 36862                                  	;;mov	al,6
 36863                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36864                                  	;jmp	short ReturnCarry	; signal it
 36865                                  	; 17/12/2022
 36866                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36867 0000651D 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36868                                  	;JNZ	short GetSF		; nope, suck out SF
 36869                                  	;;mov	al,6
 36870                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36871                                  	;jmp	short ReturnCarry	; signal it
 36872                                  GetSF:
 36873 0000651F 53                      	push	bx			; save handle
 36874 00006520 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36875 00006523 30FF                    	XOR     BH,BH                   ; ignore upper half
 36876 00006525 E80200                  	CALL    SFFromSFN               ; get real sf spot
 36877 00006528 5B                      	pop	bx			; restore
 36878 00006529 C3                      	retn                        	; say goodbye
 36879                                  
 36880                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36881                                  
 36882                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36883                                  ;----------------------------------------------------------------------------
 36884                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36885                                  ;	is more than just a simple index instruction because the SF table
 36886                                  ;	can be made up of multiple pieces chained together. We follow the
 36887                                  ;	chain to the right piece and then do the index operation.
 36888                                  ;
 36889                                  ;   NOTE:
 36890                                  ;	This routine is called from SFFromHandle which is called
 36891                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36892                                  ;
 36893                                  ;	ENTRY	BX has SF index
 36894                                  ;	EXIT	'C' clear if OK
 36895                                  ;		  ES:DI points to SF entry
 36896                                  ;		'C' set if index too large
 36897                                  ;	USES	BX, DI, ES
 36898                                  ;----------------------------------------------------------------------------
 36899                                  
 36900                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36901                                  
 36902                                  SFFromSFN:
 36903                                  	; 05/05/2019 - Retro DOS v4.0
 36904                                  	;getdseg <es>			; es -> dosdata
 36905 0000652A 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36906                                  
 36907                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36908 0000652F 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36909                                  sfsfn5:	
 36910                                  	;cmp	bx,[es:di+4]
 36911 00006534 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36912 00006538 720E                    	JB	short sfsfn7		; yes, go grab it
 36913                                  	;sub	bx,[es:di+4]
 36914 0000653A 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36915 0000653E 26C43D                  	les	di,[es:di] ; 14/08/2018
 36916                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36917 00006541 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36918 00006544 75EE                    	JNZ	short sfsfn5		; no, try again
 36919 00006546 F9                      	STC
 36920 00006547 C3                      	retn				; return with error, not found
 36921                                  sfsfn7:
 36922 00006548 50                      	push	ax
 36923                                  	;mov	ax,53 ; MSDOS 3.3
 36924                                  	;mov	ax,59 ; MSDOS 6.0
 36925                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36926                                  	
 36927                                  	; 17/12/2022
 36928 00006549 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36929                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36930                                  	;mov	ax,SF_ENTRY.size ; 59
 36931                                  	
 36932 0000654B F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36933 0000654D 01C7                    	ADD	DI,AX			; add base of SF block
 36934 0000654F 58                      	pop	ax
 36935                                  	;add	di,6
 36936 00006550 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36937 00006553 C3                      	retn				; return with 'C' clear
 36938                                  
 36939                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36940                                  
 36941                                  ;**	JFNFree - Find a Free JFN Slot
 36942                                  ;----------------------------------------------------------------------------
 36943                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36944                                  ;
 36945                                  ;	ENTRY	(ss) = DOSDATA
 36946                                  ;	EXIT	'C' clear if OK
 36947                                  ;		  (bx) = new handle
 36948                                  ;		  (es:di) = pointer to JFN slot
 36949                                  ;		'C' set if error
 36950                                  ;		  (al) = error code
 36951                                  ;	USES	bx, di, es, flags
 36952                                  ;----------------------------------------------------------------------------
 36953                                  
 36954                                  JFNFree:
 36955 00006554 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36956                                  jfnf1:	
 36957 00006556 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36958 00006559 7209                    	JC	short jfnf5		; no more handles
 36959 0000655B 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36960 0000655F 7405                    	je	short jfnfx		; yes, carry is clear
 36961 00006561 43                      	INC     BX                      ; no, next handle
 36962 00006562 EBF2                    	JMP	short jfnf1		; and try again
 36963                                  
 36964                                  	; Error. 'C' set
 36965                                  jfnf5:	
 36966                                  	;mov	al,4
 36967 00006564 B004                    	MOV	AL,error_too_many_open_files
 36968                                  jfnfx:	
 36969 00006566 C3                      	retn				; bye
 36970                                  
 36971                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36972                                  
 36973                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36974                                  ;----------------------------------------------------------------------------
 36975                                  ;	SFNFree scans through the sf table looking for a free entry
 36976                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36977                                  ;
 36978                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36979                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36980                                  ;	we can't just mark it busy because we may get blown out of our open
 36981                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36982                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36983                                  ;	an SFT with this value we look to see if it belongs to this user
 36984                                  ;	and process.  If it does belong to us then it must be an orphan
 36985                                  ;	and we reclaim it.
 36986                                  ;
 36987                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36988                                  ;		over and over, but we could at least set a high water mark...
 36989                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36990                                  ;		even though this is not a frequently called routine - jgl
 36991                                  ;
 36992                                  ;	ENTRY	(ss) = DOSDATA
 36993                                  ;	EXIT	'C' clear if no error
 36994                                  ;		  (bx) = SFN
 36995                                  ;		  (es:di) = pointer to SFT
 36996                                  ;		  es:[di].SFT_REF_COUNT = -1
 36997                                  ;		'C' set if error
 36998                                  ;		  (al) = error code
 36999                                  ;	USES	bx, di, es, Flags
 37000                                  ;----------------------------------------------------------------------------
 37001                                  
 37002                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37003                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 37004                                  
 37005                                  SFNFree:
 37006                                  	; 12/08/2018
 37007                                  	; 05/08/2018 - Retro DOS v3.0
 37008                                  	;
 37009                                  	; MSDOS 6.0
 37010 00006567 50                      	push	ax
 37011 00006568 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 37012                                  sfnf5:	
 37013 0000656A 53                      	push	bx
 37014 0000656B E8BCFF                  	call	SFFromSFN		; get the potential handle
 37015 0000656E 5B                      	pop	bx
 37016 0000656F 723A                    	jc	short sfnf95		; no more free SFNs
 37017 00006571 26833D00                	cmp	word [ES:DI],0
 37018                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 37019 00006575 741D                    	je	short sfnf20			; yep, got one
 37020                                  	
 37021                                  	;cmp	word [es:di],0FFFFh ; -1
 37022 00006577 26833DFF                	cmp	word [ES:DI],sf_busy
 37023                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 37024 0000657B 7403                    	je	short sfnf10		; special busy mark
 37025                                  sfnf7:	
 37026 0000657D 43                      	inc	bx			; try the next one
 37027 0000657E EBEA                    	jmp	short sfnf5
 37028                                  
 37029                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 37030                                  ;	it was abandoned during a earlier call and we can use it.
 37031                                  ;
 37032                                  ;	(bx)	= SFN
 37033                                  ;	(es:di) = pointer to SFT
 37034                                  ;	(TOS)	= caller's (ax)
 37035                                  
 37036                                  sfnf10:	
 37037 00006580 36A1[3E03]              	mov	ax,[SS:USER_ID]
 37038                                  	;cmp	[es:di+2Fh],ax
 37039 00006584 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 37040 00006588 75F3                    	jnz	short sfnf7		; not ours
 37041 0000658A 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 37042                                  	;cmp	[es:di+31h],ax
 37043 0000658E 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 37044 00006592 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 37045                                  
 37046                                  ;	We have an SFT to allocate
 37047                                  ;
 37048                                  ;	(bx)	= SFN
 37049                                  ;	(es:di) = pointer to SFT
 37050                                  ;	(TOS)	= caller's (ax)
 37051                                  
 37052                                  sfnf20:
 37053                                  	; cf = 0 ;; Retro DOS v3.0
 37054                                  
 37055                                  	;mov	word [es:di],0FFFFh
 37056 00006594 26C705FFFF              	mov	word [ES:DI],sf_busy
 37057                                  					; make sure that this is allocated
 37058                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 37059                                  
 37060 00006599 36A1[3E03]              	mov	ax,[SS:USER_ID]
 37061                                  	;mov	[es:di+2Fh],ax
 37062 0000659D 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 37063 000065A1 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 37064                                  	;mov	[es:di+31h],ax
 37065 000065A5 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 37066                                  sfnf21: ;; Retro DOS v3.0
 37067                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37068                                  	;pop	ax
 37069                                  	;;clc
 37070                                  	;retn				; return with no error
 37071                                  	; 17/12/2022
 37072 000065A9 58                      	pop	ax
 37073                                  	;clc
 37074 000065AA C3                      	retn
 37075                                  
 37076                                  ;**	Error - no more free SFNs
 37077                                  ;
 37078                                  ;	'C' set
 37079                                  ;	(TOS) = saved ax
 37080                                  
 37081                                  sfnf95: 
 37082 000065AB 58                      	pop	ax
 37083                                  
 37084                                  ; 11/03/2024
 37085                                  %if 0
 37086                                  	;mov	al,4
 37087                                  	mov	al,error_too_many_open_files
 37088                                  	retn				; return with 'C' and error
 37089                                  %else
 37090                                  	; 11/03/2024
 37091 000065AC EBB6                    	jmp	short jfnf5
 37092                                  %endif
 37093                                  
 37094                                  ;============================================================================
 37095                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 37096                                  ;============================================================================
 37097                                  ; 13/07/2018 - Retro DOS v3.0
 37098                                  ; 20/05/2019 - Retro DOS v4.0
 37099                                  
 37100                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 37101                                  
 37102                                  ;	BREAK <$Close - return a handle to the system>
 37103                                  ;----------------------------------------------------------------------------
 37104                                  ;
 37105                                  ;**	$Close - Close a file Handle
 37106                                  ;
 37107                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 37108                                  ;		path
 37109                                  ;
 37110                                  ;	Assembler usage:
 37111                                  ;	    MOV     BX, handle
 37112                                  ;	    MOV     AH, Close
 37113                                  ;	    INT     int_command
 37114                                  ;
 37115                                  ;	ENTRY	(bx) = handle
 37116                                  ;	EXIT	<normal INT21 return convention>
 37117                                  ;	USES	all
 37118                                  ;
 37119                                  ;----------------------------------------------------------------------------
 37120                                  
 37121                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37122                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 37123                                  
 37124                                  _$CLOSE:
 37125                                  ;	Grab the SFT pointer from the JFN.
 37126                                  
 37127 000065AE E84902                  	call	CheckOwner		; get system file entry
 37128 000065B1 722B                    	jc	short CloseError	; error return
 37129 000065B3 16                      	push	ss
 37130 000065B4 1F                      	pop	ds			; For DOS_CLOSE
 37131 000065B5 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 37132 000065B9 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 37133                                  
 37134                                  ; DS:SI point to JFN table entry.
 37135                                  ; ES:DI point to SFT
 37136                                  ;
 37137                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 37138                                  ; FCB, we examine the ref count on the SFT; if it was 1, we free the JFN.
 37139                                  ; If the file was not a net FCB, we free the JFN too.
 37140                                  
 37141                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 37142 000065BD 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 37143 000065C1 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 37144                                  	;mov	al,[ES:DI+2]
 37145 000065C3 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 37146                                  	;and	al,0F0h
 37147 000065C7 24F0                    	AND	AL,SHARING_MASK
 37148                                  	;cmp	al,70h
 37149 000065C9 3C70                    	CMP	AL,SHARING_NET_FCB
 37150 000065CB 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 37151                                  
 37152                                  ; The JFN must be freed. Get the pointer to it and replace the contents with
 37153                                  ; -1.
 37154                                  
 37155                                  FreeJFN:
 37156 000065CD E827FF                  	call	pJFNFromHandle		; d = pJFN (handle);
 37157 000065D0 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 37158                                  PostFree:
 37159                                  
 37160                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 37161                                  
 37162 000065D4 E8B9C8                  	call	DOS_CLOSE
 37163                                  
 37164                                  ; DOS_Close may return an error. If we see such an error, we report it but
 37165                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 37166                                  
 37167 000065D7 7205                    	JC	short CloseError
 37168                                  	;mov	ah,3Eh
 37169 000065D9 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 37170                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37171                                  CloseOk:
 37172 000065DB E953A0                  	jmp	SYS_RET_OK
 37173                                  CloseError:
 37174                                  CommitError:	; 11/03/2024
 37175 000065DE E959A0                  	jmp	SYS_RET_ERR
 37176                                  
 37177                                  ;	BREAK <$Commit - commit the file>
 37178                                  ;----------------------------------------------------------------------------
 37179                                  ;
 37180                                  ;**	$Commit - Commit a File
 37181                                  ;
 37182                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 37183                                  ;	flushed out. BUGBUG - I'm pretty sure that $Commit doesn't update
 37184                                  ;	the directory entry, etc., so this commit is pretty useless. check
 37185                                  ;	and fix this!! jgl
 37186                                  ;
 37187                                  ;	Assembler usage:
 37188                                  ;	    MOV     BX, handle
 37189                                  ;	    MOV     AH, Commit
 37190                                  ;	    INT     int_command
 37191                                  ;
 37192                                  ;	ENTRY	(bx) = handle
 37193                                  ;	EXIT	none
 37194                                  ;	USES	all
 37195                                  ;;----------------------------------------------------------------------------
 37196                                  
 37197                                  _$COMMIT:
 37198                                  ;	Grab the SFT pointer from the JFN.
 37199                                  
 37200 000065E1 E81602                  	call	CheckOwner		; get system file entry
 37201                                  	;JC	short CommitError	; error return
 37202                                  	; 11/03/2024
 37203 000065E4 72F8                    	jc	short CommitError
 37204                                  
 37205 000065E6 16                      	push	ss
 37206 000065E7 1F                      	pop	ds			; For DOS_COMMIT
 37207 000065E8 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 37208 000065EC 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 37209                                  
 37210                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 37211                                  ;
 37212                                  ;	ES:DI point to SFT
 37213                                  
 37214 000065F0 E8DEC9                  	call	DOS_COMMIT
 37215 000065F3 72E9                    	JC	short CommitError
 37216                                  	; 07/12/2022
 37217                                  	;jc	short CloseError
 37218                                  	;mov	ah,68h
 37219 000065F5 B468                    	MOV	AH,COMMIT
 37220                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37221                                  	;jmp	SYS_RET_OK
 37222                                  CommitOk:
 37223 000065F7 EBE2                    	jmp	short CloseOk
 37224                                  
 37225                                  ; 11/03/2024
 37226                                  ;CommitError:
 37227                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37228                                  ;	;jmp	SYS_RET_ERR
 37229                                  ;	jmp	short CloseError
 37230                                  
 37231                                  ;	BREAK <$ExtHandle - extend handle count>
 37232                                  
 37233                                  ;**	$ExtHandle - Extend Handle Count
 37234                                  ;----------------------------------------------------------------------------
 37235                                  ;	Assembler usage:
 37236                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 37237                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 37238                                  ;	    INT     int_command 		 busy )
 37239                                  ;
 37240                                  ;	ENTRY	(bx) = new number of handles
 37241                                  ;	EXIT	'C' clear if OK
 37242                                  ;		'C' set iff err
 37243                                  ;		  (ax) = error code
 37244                                  ;			 AX = error_not_enough_memory
 37245                                  ;			      error_too_many_open_files
 37246                                  ;	USES	all
 37247                                  ;----------------------------------------------------------------------------
 37248                                  
 37249                                  _$ExtHandle:
 37250 000065F9 31ED                    	XOR	BP,BP			; 0: enlarge  1: shrink  2:psp
 37251                                  	;cmp	bx,20
 37252 000065FB 83FB14                  	CMP	BX,FILPERPROC
 37253 000065FE 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 37254 00006600 BB1400                  	MOV	BX,FILPERPROC
 37255                                  exth2:	
 37256 00006603 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 37257                                  	;mov	cx,[ES:32h]
 37258 00006608 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 37259 0000660D 39CB                    	CMP	BX,CX			; the requested == current
 37260                                  	;JE	short ok_done 		; yes and exit
 37261                                  	; 11/03/2024
 37262 0000660F 74CA                    	je	short CloseOk
 37263 00006611 771E                    	JA	short larger		; go allocate new table
 37264                                  
 37265                                  ;	We're going to shrink the # of handles available
 37266                                  
 37267                                  	;MOV	BP,1			; shrink
 37268                                  	; 11/03/2024
 37269 00006613 45                      	inc	bp
 37270                                  	;mov	ds,[ES:36h]
 37271 00006614 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 37272 00006619 89DE                    	MOV	SI,BX			;
 37273 0000661B 29D9                    	SUB	CX,BX			; get difference
 37274                                  
 37275                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 37276                                  chck_handles:
 37277 0000661D 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 37278 00006620 753B                    	JNZ	short too_many_files	; status
 37279 00006622 46                      	INC	SI
 37280 00006623 E2F8                    	LOOP	chck_handles
 37281 00006625 83FB14                  	CMP	BX,FILPERPROC		; = 20
 37282 00006628 7707                    	JA	short larger		; no
 37283                                  
 37284                                  	;MOV	BP,2			; psp
 37285                                  	; 11/03/2024
 37286 0000662A 45                      	inc	bp
 37287                                  	;mov	di,24
 37288 0000662B BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 37289 0000662E 53                      	PUSH	BX
 37290 0000662F EB1D                    	JMP	short movhandl
 37291                                  
 37292                                  larger:
 37293 00006631 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 37294 00006634 747D                    	JZ	short invalid_func	; 10/08/2018
 37295 00006636 F8                      	CLC
 37296 00006637 53                      	PUSH	BX			; save requested number
 37297 00006638 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 37298 0000663B B104                    	MOV	CL,4
 37299                                  	;ror	bx,cl			; MSDOS 3.3
 37300 0000663D D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 37301 0000663F 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 37302                                  
 37303 00006643 55                      	PUSH	BP
 37304 00006644 E8E7FA                  	call	_$ALLOC			; allocate memory
 37305 00006647 5D                      	POP	BP
 37306 00006648 7264                    	JC	short no_memory		; not enough memory
 37307                                  
 37308 0000664A 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 37309 0000664C 31FF                    	XOR	DI,DI
 37310                                  movhandl:
 37311 0000664E 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 37312                                  
 37313 00006653 F7C50300                	test	BP,3			; enlarge ?
 37314 00006657 7409                    	JZ	short enlarge 		; yes
 37315 00006659 59                      	POP	CX			; cx = the amount you shrink
 37316 0000665A 51                      	PUSH	CX
 37317 0000665B EB09                    	JMP	short copy_hand
 37318                                  
 37319                                  ;	Done.  'C' clear
 37320                                  
 37321                                  ; 17/12/2022
 37322                                  ;ok_done:
 37323                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37324                                  ;	;jmp	short CommitOk
 37325                                  ;	; 17/12/2022
 37326                                  ;	jmp	SYS_RET_OK
 37327                                  
 37328                                  too_many_files:
 37329                                  	;mov	al,4
 37330 0000665D B004                    	MOV	AL,error_too_many_open_files
 37331                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37332                                  	;jmp	SYS_RET_ERR
 37333                                  CommitErrorj:
 37334                                  	;jmp	short CommitError
 37335                                  	; 17/12/2022
 37336 0000665F E9D89F                  	jmp	SYS_RET_ERR
 37337                                  
 37338                                  ; 11/03/2024
 37339                                  ; 17/12/2022
 37340                                  ;ok_done:
 37341                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37342                                  ;	;jmp	short CommitOk
 37343                                  ;	; 17/12/2022
 37344                                  ;	jmp	SYS_RET_OK
 37345                                  
 37346                                  enlarge:
 37347                                  	;mov	cx,[32h]
 37348 00006662 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 37349                                  copy_hand:
 37350 00006666 89CA                    	MOV	DX,CX
 37351                                  	;lds	si,[34h]
 37352 00006668 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 37353 0000666C F3A4                    	REP	MOVSB			; copy information to new table
 37354 0000666E 59                      	POP	CX			; get new number of handles
 37355 0000666F 51                      	PUSH	CX			; save it again
 37356 00006670 29D1                    	SUB	CX,DX			; get the difference
 37357 00006672 B0FF                    	MOV	AL,-1			; set availability to handles
 37358 00006674 F3AA                    	REP	STOSB
 37359 00006676 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 37360                                  	;cmp	word [34h],0
 37361 0000667B 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 37362 00006680 750D                    	JNZ	short update_info	; yes, go update PDB entries
 37363 00006682 55                      	PUSH	BP
 37364 00006683 1E                      	PUSH	DS			; save old table segment
 37365 00006684 06                      	PUSH	ES			; save new table segment
 37366 00006685 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 37367 00006689 E81CFC                  	call	_$DEALLOC		; deallocate old table memory
 37368 0000668C 07                      	POP	ES			; restore new table segment
 37369 0000668D 1F                      	POP	DS			; restore old table segment
 37370 0000668E 5D                      	POP	BP
 37371                                  
 37372                                  update_info:
 37373 0000668F F7C50200                	test	BP,2			; psp?
 37374 00006693 7408                    	JZ	short non_psp 		; no
 37375                                  	;mov	word [34h],18h ; 24
 37376 00006695 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 37377 0000669B EB06                    	JMP	short final
 37378                                  non_psp:
 37379                                  	;mov	word [34h],0
 37380 0000669D C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 37381                                  final:
 37382                                  	;mov	[36h],es	
 37383 000066A3 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 37384                                  	;pop	word [32h]
 37385 000066A7 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 37386                                  	; 11/03/2024
 37387                                  ok_done:
 37388                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37389 000066AB E9839F                  	jmp	SYS_RET_OK
 37390                                  ;ok_done_j:
 37391                                  ;	jmp	short ok_done
 37392                                  
 37393                                  no_memory:
 37394 000066AE 5B                      	POP	BX			; clean stack
 37395                                  	;mov	al,8
 37396 000066AF B008                    	MOV	AL,error_not_enough_memory
 37397                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37398                                  	;jmp	SYS_RET_ERR
 37399                                  CommitErrorj2:
 37400 000066B1 EBAC                    	jmp	short CommitErrorj
 37401                                  
 37402                                  invalid_func:
 37403                                  	;mov	al,1
 37404 000066B3 B001                    	MOV	AL,error_invalid_function
 37405                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37406                                  	;jmp	SYS_RET_ERR
 37407                                  CommitErrorj3:
 37408                                  	;jmp	short CommitErrorj2
 37409                                  	; 17/12/2022
 37410 000066B5 EBA8                    	jmp	short CommitErrorj
 37411                                  
 37412                                  ; 20/05/2019 - Retro DOS v4.0
 37413                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 37414                                  
 37415                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37416                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 37417                                  
 37418                                  ;	BREAK <$READ - Read from a file handle>
 37419                                  ;----------------------------------------------------------------------------
 37420                                  ;
 37421                                  ;**	$Read - Read from a File Handle
 37422                                  ;
 37423                                  ;   Assembler usage:
 37424                                  ;
 37425                                  ;	LDS	DX, buf
 37426                                  ;	MOV	CX, count
 37427                                  ;	MOV	BX, handle
 37428                                  ;	MOV	AH, Read
 37429                                  ;	INT	int_command
 37430                                  ;	  AX has number of bytes read
 37431                                  ;
 37432                                  ;	ENTRY	(bx) = file handle
 37433                                  ;		(cx) = byte count
 37434                                  ;		(ds:dx) = buffer address
 37435                                  ;	EXIT	Through system call return so that to user:
 37436                                  ;		  'C' clear if OK
 37437                                  ;		    (ax) = bytes read
 37438                                  ;		  'C' set if error
 37439                                  ;		    (ax) = error code
 37440                                  ;
 37441                                  ;----------------------------------------------------------------------------
 37442                                  
 37443                                  	; 12/03/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 37444                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:0A83Ah
 37445                                  
 37446                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0BA2Eh)
 37447                                  	; (Windows ME IO.SYS - BIOSCODE:0A256h)
 37448                                  
 37449                                  _$READ:
 37450 000066B7 BE[2132]                	MOV	SI,DOS_READ
 37451                                  ReadDo:
 37452 000066BA E83AFE                  	call	pJFNFromHandle
 37453 000066BD 7208                    	JC	short ReadError
 37454                                  
 37455 000066BF 268A05                  	MOV	AL,[ES:DI]
 37456 000066C2 E83501                  	call	CheckOwner		; get the handle
 37457 000066C5 7303                    	JNC	short ReadSetup		; no errors do the operation
 37458                                  
 37459                                  ;	Have an error. 'C' set
 37460                                  
 37461                                  ReadError:
 37462                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37463                                  	;;jmp	SYS_RET_ERR		; go to error traps
 37464                                  	;jmp	short CommitErrorj3
 37465                                  	; 17/12/2022
 37466 000066C7 E9709F                  	jmp	SYS_RET_ERR
 37467                                  
 37468                                  ReadSetup:
 37469 000066CA 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 37470 000066CF 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 37471                                  	; 20/05/2019 - Retro DOS v4.0
 37472                                  	; MSDOS 6.0 
 37473                                  ;; Extended Open
 37474                                  	;test	byte [es:di+3],20h
 37475 000066D4 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 37476                                  						 ;AN000;;EO. need i24
 37477 000066D9 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 37478 000066DB 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 37479                                  					;AN000;;EO. set it off;smr;SS Override
 37480                                  needi24:				;AN000;
 37481                                  
 37482                                  ; 12/03/2024
 37483                                  %if 0
 37484                                  
 37485                                  ;; Extended Open
 37486                                  	push	word [SS:DMAADD]
 37487                                  	push	word [SS:DMAADD+2]	;smr;SS Override
 37488                                  
 37489                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37490                                  
 37491                                  	; 26/07/2019
 37492                                  
 37493                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37494                                  	;
 37495                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 37496                                  	; there is not another caller; it is better to put the code in this proc
 37497                                   	; here instead of calling it as a subroutine; but I have modified code
 37498                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 37499                                  
 37500                                  	; MSDOS 6.0
 37501                                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 37502                                  	
 37503                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37504                                  	; MSDOS 3.3
 37505                                  	;MOV	BX,DX			; copy offset
 37506                                  	;push	cx			; don't stomp on count
 37507                                  	;MOV	CL,4			; bits to shift bytes->para
 37508                                  	;SHR	BX,CL			; get number of paragraphs
 37509                                  	;pop	cx			; get count back
 37510                                  	;MOV	AX,DS			; get original segment
 37511                                  	;ADD	AX,BX			; get new segment
 37512                                  	;MOV	DS,AX			; in seg register
 37513                                  	;AND	DX,0Fh			; normalize offset
 37514                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37515                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37516                                  						;smr;SS Override
 37517                                  %else
 37518                                  	; 12/03/2024 (PCDOS 7.1 IBMDOS.COM)
 37519                                  	;;;
 37520 000066E1 8CD8                    	mov	ax,ds			; original segment
 37521 000066E3 36C51E[2C03]            	lds	bx,[ss:DMAADD]
 37522 000066E8 53                      	push	bx
 37523 000066E9 1E                      	push	ds
 37524 000066EA 89D3                    	mov	bx,dx
 37525 000066EC D1EB                    	shr	bx,1
 37526 000066EE D1EB                    	shr 	bx,1
 37527 000066F0 D1EB                    	shr	bx,1
 37528 000066F2 D1EB                    	shr	bx,1
 37529 000066F4 01D8                    	add	ax,bx			; new segment
 37530 000066F6 83E20F                  	and	dx,0Fh			; normalize offset
 37531                                  	;mov	[ss:DMAADD],dx		; use user DX as offset
 37532                                  	; 23/03/2024
 37533 000066F9 36A3[2E03]              	mov	[ss:DMAADD+2],ax 	; use user DS as segment for DMA
 37534                                  	;;;
 37535                                  
 37536                                  %endif
 37537                                  
 37538                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37539                                  	
 37540 000066FD 16                      	push	ss			; go for DOS addressability
 37541 000066FE 1F                      	pop	ds
 37542                                  
 37543                                  	; 12/03/2024 - Retro DOS v4.2
 37544                                  	;;;
 37545 000066FF 8916[2C03]              	mov	[DMAADD],dx	
 37546                                  	;;;
 37547                                  
 37548 00006703 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 37549                                  
 37550 00006705 8F06[2E03]              	pop	word [DMAADD+2]
 37551 00006709 8F06[2C03]              	pop	word [DMAADD]
 37552                                  	;JNC	short READ_OK		;AN002;
 37553                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 37554                                  	; 17/12/2022
 37555 0000670D 72B8                    	jc	short ReadError
 37556                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37557                                  	;jnc	short READ_OK		;AN002;
 37558                                  	;jmp	short ReadError
 37559                                  
 37560                                  READ_OK:
 37561 0000670F 89C8                    	MOV	AX,CX			; get correct return in correct reg
 37562                                  Read_Okj:
 37563                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37564                                  	;;jmp	SYS_RET_OK		; successful return
 37565                                  	;jmp	short ok_done_j
 37566                                  	; 17/12/2022
 37567 00006711 E91D9F                  	jmp	SYS_RET_OK
 37568                                  
 37569                                  ; 13/07/2018 - Retro DOS v3.0
 37570                                  
 37571                                  ;----------------------------------------------------------------------------
 37572                                  
 37573                                  ; 12/03/2024
 37574                                  %if 0
 37575                                  
 37576                                  ;   Input: DS:DX points to user's buffer addr
 37577                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 37578                                  ;   Output: [DMAADD] set
 37579                                  
 37580                                  ; 20/05/2019 - Retro DOS v4.0
 37581                                  ; 26/07/2019
 37582                                  ;	; MSDOS 6.0
 37583                                  ;Align_Buffer:
 37584                                  ;	MOV	BX,DX			; copy offset
 37585                                  ;	push	cx			; don't stomp on count
 37586                                  ;	MOV	CL,4			; bits to shift bytes->para
 37587                                  ;	SHR	BX,CL			; get number of paragraphs
 37588                                  ;	pop	cx			; get count back
 37589                                  ;	MOV	AX,DS			; get original segment
 37590                                  ;	ADD	AX,BX			; get new segment
 37591                                  ;	MOV	DS,AX			; in seg register
 37592                                  ;	AND	DX,0Fh			; normalize offset
 37593                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37594                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37595                                  ;						;smr;SS Override
 37596                                  ;	retn
 37597                                  
 37598                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37599                                  Align_Buffer:
 37600                                  	MOV	BX,DX			; copy offset
 37601                                  	push	cx			; don't stomp on count
 37602                                  	MOV	CL,4			; bits to shift bytes->para
 37603                                  	SHR	BX,CL			; get number of paragraphs
 37604                                  	pop	cx			; get count back
 37605                                  	MOV	AX,DS			; get original segment
 37606                                  	ADD	AX,BX			; get new segment
 37607                                  	MOV	DS,AX			; in seg register
 37608                                  	AND	DX,0Fh			; normalize offset
 37609                                  	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37610                                  	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37611                                  						;smr;SS Override
 37612                                  	retn
 37613                                  
 37614                                  %endif
 37615                                  
 37616                                  ; 20/05/2019 - Retro DOS v4.0
 37617                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 37618                                  
 37619                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37620                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 37621                                  
 37622                                  ; 12/03/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 37623                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:0A8A0h
 37624                                  
 37625                                  ; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0BA8Ch)
 37626                                  ; (Windows ME IO.SYS - BIOSCODE:0A2B9h)
 37627                                  
 37628                                  ;BREAK <$WRITE - write to a file handle>
 37629                                  ;----------------------------------------------------------------------------
 37630                                  ;
 37631                                  ;   Assembler usage:
 37632                                  ;	    LDS     DX, buf
 37633                                  ;	    MOV     CX, count
 37634                                  ;	    MOV     BX, handle
 37635                                  ;	    MOV     AH, Write
 37636                                  ;	    INT     int_command
 37637                                  ;	  AX has number of bytes written
 37638                                  ;   Errors:
 37639                                  ;	    AX = write_invalid_handle
 37640                                  ;	       = write_access_denied
 37641                                  ;
 37642                                  ;   Returns in register AX
 37643                                  ;
 37644                                  ;----------------------------------------------------------------------------
 37645                                  
 37646                                  _$WRITE:
 37647 00006714 BE[2134]                	MOV	SI,DOS_WRITE
 37648 00006717 EBA1                    	JMP	short ReadDo
 37649                                  
 37650                                  ;BREAK <$LSEEK - move r/w pointer>
 37651                                  ;----------------------------------------------------------------------------
 37652                                  ;
 37653                                  ;   Assembler usage:
 37654                                  ;	    MOV     DX, offsetlow
 37655                                  ;	    MOV     CX, offsethigh
 37656                                  ;	    MOV     BX, handle
 37657                                  ;	    MOV     AL, method
 37658                                  ;	    MOV     AH, LSeek
 37659                                  ;	    INT     int_command
 37660                                  ;	  DX:AX has the new location of the pointer
 37661                                  ;   Error returns:
 37662                                  ;	    AX = error_invalid_handle
 37663                                  ;	       = error_invalid_function
 37664                                  ;   Returns in registers DX:AX
 37665                                  ;
 37666                                  ;----------------------------------------------------------------------------
 37667                                  
 37668                                  ; 21/05/2019 - Retro DOS v4.0
 37669                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37670                                  
 37671                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37672                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37673                                  
 37674                                  _$LSEEK:
 37675 00006719 E8DE00                  	call	CheckOwner		; get system file entry
 37676                                  
 37677                                  	; 17/12/2022
 37678                                  ;LSeekError:
 37679                                  	;JNC	short CHKOWN_OK		;AN002;
 37680                                  	;JMP	short ReadError		;AN002; error return
 37681                                  	; 17/12/2022
 37682                                  	; 02/06/2019
 37683 0000671C 72A9                    	jc	short ReadError
 37684                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37685                                  	;JNC	short CHKOWN_OK		;AN002;
 37686                                  	;JMP	short ReadError		;AN002; error return
 37687                                  
 37688                                  CHKOWN_OK:
 37689                                  					;AN002;
 37690 0000671E 3C02                    	CMP	AL,2			; is the seek value correct?
 37691 00006720 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37692                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37693 00006722 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37694                                  					;smr;SS Override
 37695                                  	;mov	al,1
 37696 00006728 B001                    	mov	al,error_invalid_function ; invalid method
 37697                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37698                                  LSeekError2:
 37699 0000672A EB9B                    	jmp	short ReadError
 37700                                  
 37701                                  LSeekDisp:
 37702 0000672C 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37703 0000672E 720A                    	JB	short LSeekStore	; just store CX:DX
 37704 00006730 771B                    	JA	short LSeekEOF		; seek from end of file
 37705                                  	;add	dx,[es:di+21]
 37706 00006732 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37707                                  	;adc	cx,[es:di+23]
 37708 00006736 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37709                                  LSeekStore:
 37710 0000673A 89C8                    	MOV	AX,CX			; AX:DX
 37711 0000673C 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37712                                  LSeekSetpos:
 37713                                  	;mov	[es:di+21],ax
 37714 0000673D 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37715                                  	;mov	[es:di+23],dx
 37716 00006741 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37717 00006745 E8399D                  	call	Get_User_Stack
 37718                                  	;mov	[si+6],dx
 37719 00006748 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37720                                  	;jmp	SYS_RET_OK		; successful return
 37721                                  	; 25/06/2019
 37722                                  	;jmp	SYS_RET_OK_clc
 37723                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37724                                  	;jmp	SYS_RET_OK_clc
 37725                                  LSeekOk:
 37726 0000674B EBC4                    	jmp     short Read_Okj
 37727                                  
 37728                                  LSeekEOF:
 37729                                  	;;test	word [es:di+5],8000h
 37730                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37731                                  	; 21/05/2019 - Retro DOS v4.0
 37732 0000674D 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37733 00006752 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37734                                  LOCAL_LSeek:
 37735                                  	;add	dx,[es:di+17]
 37736 00006754 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37737                                  	;adc	cx,[es:di+19]
 37738 00006758 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37739 0000675C EBDC                    	JMP	short LSeekStore	; go and set the position
 37740                                  
 37741                                  Check_LSeek_Mode:
 37742                                  	;;test	word [es:di+2],8000h
 37743                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37744                                  	; 21/05/2019
 37745 0000675E 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37746 00006763 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37747                                  	;mov	ax,[es:di+2]
 37748 00006765 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37749                                  	;and	ax,0F0h
 37750 00006769 25F000                  	AND	AX,SHARING_MASK
 37751                                  	;cmp	ax,40h
 37752 0000676C 83F840                  	CMP	AX,SHARING_DENY_NONE
 37753 0000676F 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37754                                  	;cmp	ax,30h
 37755 00006771 83F830                  	CMP	AX,SHARING_DENY_READ
 37756 00006774 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37757                                  NET_LSEEK:
 37758                                  ;	JMP	short LOCAL_LSeek
 37759                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37760                                  	;CallInstall Net_Lseek,MultNET,33
 37761                                  	;JNC	short LSeekSetPos
 37762                                  
 37763 00006776 B82111                  	mov     ax,1121h
 37764 00006779 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37765                                  			; CX:DX = offset (in bytes) from end
 37766                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37767                                  			; SS = DOS CS
 37768                                  			; Return: CF set on error
 37769                                  			; CF clear if successful, DX:AX = new file position
 37770 0000677B 73C0                    	jnb     short LSeekSetpos
 37771                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37772                                  	;jmp	SYS_RET_ERR
 37773                                  ;LSeekError3:
 37774                                  	; 17/12/2022
 37775                                  LSeekError:
 37776                                  	;jmp	short LSeekError2
 37777                                  DupErr:	; 17/12/2022
 37778 0000677D E9BA9E                  	jmp	SYS_RET_ERR
 37779                                  
 37780                                  ;BREAK <FileTimes - modify write times on a handle>
 37781                                  ;----------------------------------------------------------------------------
 37782                                  ;
 37783                                  ;   Assembler usage:
 37784                                  ;	    MOV AH, FileTimes (57H)
 37785                                  ;	    MOV AL, func
 37786                                  ;	    MOV BX, handle
 37787                                  ;	; if AL = 1 then then next two are mandatory
 37788                                  ;	    MOV CX, time
 37789                                  ;	    MOV DX, date
 37790                                  ;	    INT 21h
 37791                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37792                                  ;	; for the handle.
 37793                                  ;
 37794                                  ;	AL=02		 get extended attributes
 37795                                  ;	   BX=handle
 37796                                  ;	   CX=size of buffer (0, return max size )
 37797                                  ;	   DS:SI query list (si=-1, selects all EA)
 37798                                  ;	   ES:DI buffer to hold EA list
 37799                                  ;
 37800                                  ;	AL=03		 get EA name list
 37801                                  ;	   BX=handle
 37802                                  ;	   CX=size of buffer (0, return max size )
 37803                                  ;	   ES:DI buffer to hold name list
 37804                                  ;
 37805                                  ;	AL=04		 set extended attributes
 37806                                  ;	   BX=handle
 37807                                  ;	   ES:DI buffer of EA list
 37808                                  ;
 37809                                  ;
 37810                                  ;   Error returns:
 37811                                  ;	    AX = error_invalid_function
 37812                                  ;	       = error_invalid_handle
 37813                                  ;
 37814                                  ;----------------------------------------------------------------------------
 37815                                  
 37816                                  ; 21/05/2019 - Retro DOS v4.0
 37817                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37818                                  
 37819                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37820                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37821                                  
 37822                                  _$FILE_TIMES:
 37823                                  	; 13/07/2018 - Retro DOS v3.0
 37824                                  
 37825                                  	; MSDOS 3.3
 37826                                  	;cmp	al,2			; correct subfunction ?
 37827                                  	;jb	short ft1
 37828                                  
 37829                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37830                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37831                                  						;SS Overr
 37832                                  	;;mov	al,1
 37833                                  	;mov	al,error_invalid_function ; give bad return
 37834                                  	;jmp	SYS_RET_ERR
 37835                                  
 37836                                  	; MSDOS 6.0
 37837 00006780 3C02                    	cmp	al,2			; correct subfunction ?
 37838 00006782 7340                    	jae	short inval_func
 37839                                  ;ft1:
 37840 00006784 E87300                  	call	CheckOwner		; get sft
 37841                                  	; 17/12/2022
 37842 00006787 72F4                    	jc	short LSeekError	; bad handle
 37843                                  
 37844 00006789 08C0                    	or	al,al			; get time/date ?
 37845 0000678B 7515                    	jnz	short ft_set_time
 37846                                  
 37847                                  ;------ here we get the time & date from the sft for the user
 37848                                  
 37849 0000678D FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37850                                  	;mov	cx,[es:di+13]
 37851 0000678E 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37852                                  	;mov	dx,[es:di+15]
 37853 00006792 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37854 00006796 FB                      	sti
 37855 00006797 E8E79C                  	call	Get_User_Stack
 37856                                  	;mov	[si+4],cx
 37857 0000679A 894C04                  	mov	[si+user_env.user_CX],cx
 37858                                  	;mov	[si+6],dx
 37859 0000679D 895406                  	mov	[si+user_env.user_DX],dx
 37860 000067A0 EB1F                    	jmp	short ok_ret
 37861                                  
 37862                                  ;------ here we set the time in sft
 37863                                  
 37864                                  ft_set_time:
 37865 000067A2 E83DAB                  	call    ECritSFT
 37866                                  	;mov	[es:di+13],cx
 37867 000067A5 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37868                                  	;mov	[es:di+15],dx
 37869 000067A9 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37870                                  
 37871 000067AD 31C0                    	xor	ax, ax
 37872 000067AF 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37873                                  
 37874                                  ;------ set the flags in SFT entry
 37875                                  	;and	word [es:di+5],0FFBFh
 37876                                  	; 18/12/2022
 37877                                  	;and	byte [es:di+5],0BFh
 37878 000067B4 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37879                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37880                                  							; mark file as dirty
 37881                                  	;or	word [es:di+5],4000h
 37882                                  	; 17/12/2022
 37883                                  	;or	byte [es:di+6],40h
 37884 000067B9 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37885                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37886                                  							; ask close not to
 37887                                  							;   bother about date
 37888                                  							;   and time
 37889 000067BE E83CAB                  	call	LCritSFT
 37890                                  ok_ret:
 37891                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37892                                  	; 17/12/2022
 37893 000067C1 E96D9E                  	jmp	SYS_RET_OK
 37894                                  	;jmp	short LSeekOk
 37895                                  
 37896                                  inval_func:
 37897                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37898 000067C4 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37899                                  						;SS Overr
 37900                                  	;mov	al,1
 37901 000067CA B001                    	mov	al,error_invalid_function ; give bad return
 37902                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37903                                  ft_error:
 37904                                  	;;jmp	SYS_RET_ERR
 37905                                  	;jmp	short LSeekError3
 37906                                  	; 17/12/2022
 37907 000067CC EBAF                    	jmp	short LSeekError
 37908                                  
 37909                                  ; 21/05/2019 - Retro DOS v4.0
 37910                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37911                                  
 37912                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37913                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37914                                  
 37915                                  ;BREAK <$DUP - duplicate a jfn>
 37916                                  ;----------------------------------------------------------------------------
 37917                                  ;
 37918                                  ;   Assembler usage:
 37919                                  ;	    MOV     BX, fh
 37920                                  ;	    MOV     AH, Dup
 37921                                  ;	    INT     int_command
 37922                                  ;	  AX has the returned handle
 37923                                  ;   Errors:
 37924                                  ;	    AX = dup_invalid_handle
 37925                                  ;	       = dup_too_many_open_files
 37926                                  ;
 37927                                  ;----------------------------------------------------------------------------
 37928                                  
 37929                                  _$DUP:
 37930 000067CE 89D8                    	MOV	AX,BX			; save away old handle in AX
 37931 000067D0 E881FD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37932                                  DupErrorCheck:
 37933 000067D3 72A8                    	JC	short DupErr		; nope, bye
 37934 000067D5 06                      	push	es
 37935 000067D6 57                      	push	di			; save away SFT
 37936 000067D7 5E                      	pop	si			; into convenient place DS:SI
 37937 000067D8 1F                      	pop	ds
 37938 000067D9 93                      	XCHG	AX,BX			; get back old handle
 37939 000067DA E81D00                  	call	CheckOwner		; get sft in ES:DI
 37940 000067DD 729E                    	JC	short DupErr		; errors go home
 37941 000067DF E8C7C1                  	call	DOS_Dup_Direct
 37942 000067E2 E812FD                  	call	pJFNFromHandle		; get pointer
 37943 000067E5 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37944 000067E8 881C                    	MOV	[SI],BL			; stuff in new SFT
 37945                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37946                                  	;jmp	SYS_RET_OK		; and go home
 37947 000067EA EBD5                    	jmp	short ok_ret
 37948                                  
 37949                                  	; 17/12/2022
 37950                                  ;DupErr:
 37951                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37952                                  	;;jmp	SYS_RET_ERR
 37953                                  	;jmp	short ft_error
 37954                                  
 37955                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37956                                  ;----------------------------------------------------------------------------
 37957                                  ;
 37958                                  ;   Assembler usage:
 37959                                  ;	    MOV     BX, fh
 37960                                  ;	    MOV     CX, newfh
 37961                                  ;	    MOV     AH, Dup2
 37962                                  ;	    INT     int_command
 37963                                  ;   Error returns:
 37964                                  ;	    AX = error_invalid_handle
 37965                                  ;
 37966                                  ;----------------------------------------------------------------------------
 37967                                  
 37968                                  _$DUP2:
 37969 000067EC 53                      	push	bx
 37970 000067ED 51                      	push	cx			; save source
 37971 000067EE 89CB                    	MOV	BX,CX			; get one to close
 37972 000067F0 E8BBFD                  	call	_$CLOSE			; close destination handle
 37973 000067F3 5B                      	pop	bx
 37974 000067F4 58                      	pop	ax			; old in AX, new in BX
 37975 000067F5 E8FFFC                  	call	pJFNFromHandle		; get pointer
 37976 000067F8 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37977                                  
 37978                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37979                                  ;----------------------------------------------------------------------------
 37980                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37981                                  ;   process without the process knowing it (delete/rename of open files, for
 37982                                  ;   example), it is possible for the redirector to issue a call to a handle
 37983                                  ;   that it soes not rightfully own. We check here to make sure that the
 37984                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37985                                  ;   SFFromHandle to really make sure that the SFT is good.
 37986                                  ;
 37987                                  ;	ENTRY	BX has the handle
 37988                                  ;		User_ID is the current user
 37989                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37990                                  ;		Carry Set => AX has error code
 37991                                  ;	USES	none
 37992                                  ;----------------------------------------------------------------------------
 37993                                  
 37994                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37995                                  	; 21/05/2019 - Retro DOS v4.0
 37996                                  CheckOwner:
 37997                                  	; 13/07/2018 - Retro DOS v3.0
 37998                                  
 37999 000067FA E817FD                  	call	SFFromHandle
 38000 000067FD 721B                    	jc	short co_ret_label	; retc
 38001                                  
 38002 000067FF 50                      	push	ax
 38003                                  
 38004                                  	; MSDOS 6.0
 38005                                  
 38006                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 38007                                  ;SR; are shared across multiple VMs in win386.
 38008                                  
 38009 00006800 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 38010 00006806 7404                    	jz	short no_win386		;win386 is not present
 38011 00006808 31C0                    	xor	ax,ax			;set the zero flag
 38012 0000680A EB08                    	jmp	short _skip_win386	
 38013                                  
 38014                                  no_win386:
 38015 0000680C 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 38016                                  	;cmp	ax,[es:di+47]
 38017 00006810 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 38018                                  
 38019                                  _skip_win386:
 38020 00006814 58                      	pop	ax
 38021                                  	
 38022                                  	; 17/12/2022
 38023 00006815 7403                    	jz	short co_ret_label
 38024                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38025                                  	;jnz	short CheckOwner_err
 38026                                  	;retn
 38027                                  	
 38028                                  CheckOwner_err:
 38029                                  	;mov	al,6
 38030 00006817 B006                    	mov	al,error_invalid_handle
 38031 00006819 F9                      	stc
 38032                                  
 38033                                  co_ret_label:
 38034 0000681A C3                      	retn
 38035                                  
 38036                                  ;============================================================================
 38037                                  ; MACRO.ASM, MSDOS 6.0, 1991
 38038                                  ;============================================================================
 38039                                  ; Retro	DOS v3.0 - 11/07/2018
 38040                                  ; 21/05/2019 - Retro DOS v4.0
 38041                                  
 38042                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 38043                                  ;	NAME	MACRO
 38044                                  
 38045                                  ;	Microsoft Confidential
 38046                                  ;	Copyright (C) Microsoft Corporation 1991
 38047                                  ;	All Rights Reserved.
 38048                                  
 38049                                  ;**	MACRO.ASM
 38050                                  ;
 38051                                  ;	$AssignOper
 38052                                  ;	FIND_DPB
 38053                                  ;	InitCDS
 38054                                  ;	$UserOper
 38055                                  ;	GetVisDrv
 38056                                  ;	GetThisDrv
 38057                                  ;	GetCDSFromDrv
 38058                                  ;
 38059                                  ;   Revision history:
 38060                                  ;
 38061                                  ;	Created: MZ 4 April 1983
 38062                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 38063                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 38064                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 38065                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 38066                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 38067                                  ;				    aliasing.
 38068                                  ;
 38069                                  ;   MSDOS performs several types of name translation. First, we maintain for
 38070                                  ;   each valid drive letter the text of the current directory on that drive.
 38071                                  ;   For invalid drive letters, there is no current directory so we pretend to
 38072                                  ;   be at the root. A current directory is either the raw local directory
 38073                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 38074                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 38075                                  ;
 38076                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 38077                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 38078                                  ;   this and all * are expanded into ?'s.
 38079                                  ;
 38080                                  ;   The second part of name translation involves subtree aliasing. A list of
 38081                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 38082                                  ;   the previous 'canonicalization' are then examined to see if any of the
 38083                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 38084                                  ;   replaced with the other subtree in the pair.
 38085                                  ;
 38086                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 38087                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 38088                                  ;   The output of the previous translation is examined to see if any of the
 38089                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 38090                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 38091                                  ;   'mount' one device under another.
 38092                                  ;
 38093                                  ;   The final form of name translation involves the mapping of a user's
 38094                                  ;   logical drive number into the internal physical drive. This is
 38095                                  ;   accomplished by converting the drive number into letter:CON, performing
 38096                                  ;   the above translation and then converting the character back into a drive
 38097                                  ;   number.
 38098                                  ;
 38099                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 38100                                  ;   take a path and form the real text of the pathname with all . and ..
 38101                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 38102                                  ;   TransPath.
 38103                                  ;
 38104                                  ;	A000	version 4.00  Jan. 1988
 38105                                  
 38106                                  ;Installed = TRUE
 38107                                  
 38108                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 38109                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 38110                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 38111                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 38112                                  ;					; current drive)
 38113                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 38114                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 38115                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 38116                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 38117                                  ;	I_need	MYNAME,16		; machine name
 38118                                  ;	I_need	MYNUM,WORD		; machine number
 38119                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 38120                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 38121                                  ;	I_need	DrvErr,BYTE		; drive error
 38122                                  
 38123                                  ;BREAK <$AssignOper -- Set up a Macro>
 38124                                  ;----------------------------------------------------------------------------
 38125                                  ; Inputs:
 38126                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 38127                                  ;	AL = 01 set assign mode 		    (SetMode)
 38128                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 38129                                  ;	AL = 03 Define Macro (attch start)
 38130                                  ;	    BL = Macro type
 38131                                  ;	       = 0 alias
 38132                                  ;	       = 1 file/device
 38133                                  ;	       = 2 drive
 38134                                  ;	       = 3 Char device -> network
 38135                                  ;	       = 4 File device -> network
 38136                                  ;	    DS:SI -> ASCIZ source name
 38137                                  ;	    ES:DI -> ASCIZ destination name
 38138                                  ;	AL = 04 Cancel Macro
 38139                                  ;	    DS:SI -> ASCIZ source name
 38140                                  ;	AL = 05 Modified get attach list entry
 38141                                  ;	AL = 06 Get ifsfunc item
 38142                                  ;	AL = 07 set in_use of a drive's CDS
 38143                                  ;	     DL = drive number, 0=default  0=A,,
 38144                                  ;	AL = 08 reset in_use of a drive's CDS
 38145                                  ;	     DL = drive number, 0=A, 1=B,,,
 38146                                  ; Function:
 38147                                  ;	Do macro stuff
 38148                                  ; Returns:
 38149                                  ;	Std Xenix style error return
 38150                                  ;----------------------------------------------------------------------------
 38151                                  
 38152                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38153                                  	; 21/05/2019 - Retro DOS v4.0
 38154                                  _$AssignOper:
 38155                                  	; MSDOS 6.0
 38156 0000681B 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 38157 0000681D 7525                    	JNZ	short chk08		      ; no			;AN000;
 38158                                  srinuse:								;AN000;
 38159 0000681F 50                      	PUSH	AX			      ; save al 		;AN000;
 38160 00006820 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 38161 00006822 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 38162 00006825 58                      	POP	AX			      ; 			;AN000;
 38163 00006826 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 38164                                  	;cmp	word [si+45h],0
 38165 00006828 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 38166 0000682C 7410                    	JZ	short baddrv		      ;     no			;AN000;
 38167 0000682E 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 38168 00006830 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 38169                                  	;or	word [si+43h],4000h
 38170                                  	; 17/12/2022
 38171                                  	;or	byte [si+44h],40h
 38172 00006832 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38173                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 38174 00006836 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 38175                                  resetdrv:
 38176                                  	;and	word [si+43h],0BFFFh									;AN000;
 38177                                  	; 18/12/2022
 38178 00006838 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 38179                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 38180 0000683C EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 38181                                  
 38182                                  	; 17/12/2022
 38183                                  baddrv: 								;AN000;
 38184 0000683E B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 38185                                  
 38186                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38187                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 38188                                  	; 17/12/2022
 38189                                  	; 21/05/2019
 38190                                  ASS_ERR:
 38191 00006841 E9F69D                  	jmp	SYS_RET_ERR
 38192                                  
 38193                                  chk08:									;AN000;
 38194 00006844 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 38195 00006846 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 38196                                  
 38197                                    ;IF	NOT INSTALLED
 38198                                  	;transfer NET_ASSOPER
 38199                                    ;ELSE
 38200                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38201 00006848 50                      	PUSH	AX
 38202                                  	;mov	ax,111Eh
 38203                                  	;MOV	AX,(MultNET SHL 8) OR 30
 38204 00006849 B81E11                  	mov	ax,(MultNET*256)+30
 38205 0000684C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 38206                                  			; SS = DOS CS
 38207                                  			; STACK: WORD function to execute
 38208                                  			; Return: CF set on error, AX = error code
 38209                                  			; STACK unchanged
 38210 0000684E 5B                      	POP	BX			; Don't zap error code in AX
 38211 0000684F 72F0                    	JC	short ASS_ERR
 38212                                  okdone:
 38213 00006851 E9DD9D                  	jmp	SYS_RET_OK
 38214                                  
 38215                                  	; 17/12/2022
 38216                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38217                                  ;ASS_ERR:
 38218                                  	;jmp	SYS_RET_ERR
 38219                                  
 38220                                    ;ENDIF
 38221                                  
 38222                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 38223                                  ;----------------------------------------------------------------------------
 38224                                  ;**	FIND_DPB - Find a DPB from a Drive #
 38225                                  ;
 38226                                  ;	ENTRY	AL has drive number A = 0
 38227                                  ;	EXIT	'C' set
 38228                                  ;		    No DPB for this drive number
 38229                                  ;		'C' clear
 38230                                  ;		    DS:SI points to DPB for drive
 38231                                  ;	USES	SI, DS, Flags
 38232                                  ;----------------------------------------------------------------------------
 38233                                  
 38234                                  	; 21/05/2019 - Retro DOS v4.0
 38235                                  FIND_DPB:
 38236 00006854 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 38237                                  fdpb5:	
 38238 00006859 83FEFF                  	CMP	SI,-1
 38239 0000685C 7409                    	JZ	short fdpb10
 38240 0000685E 3A04                    	cmp	al,[si]
 38241                                  	;CMP	AL,[SI+DPB.DRIVE]
 38242 00006860 7406                    	jz	short ret_label15	; Carry clear (retz)
 38243                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 38244                                  	;lds	si,[si+19h] ; MSDOS 6.0
 38245 00006862 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 38246 00006865 EBF2                    	JMP	short fdpb5
 38247                                  fdpb10:	
 38248 00006867 F9                      	STC
 38249                                  ret_label15:
 38250 00006868 C3                      	retn
 38251                                  
 38252                                  ;	Break <InitCDS - set up an empty CDS>
 38253                                  ;----------------------------------------------------------------------------
 38254                                  ;**	InitCDS - Setup an Empty CDS
 38255                                  ;
 38256                                  ;	ENTRY	ThisCDS points to CDS
 38257                                  ;		AL has uppercase drive letter
 38258                                  ;	EXIT	ThisCDS is now empty
 38259                                  ;		(ES:DI) = CDS
 38260                                  ;		'C' set if no DPB associated with drive
 38261                                  ;	USES	AH,ES,DI, Flags
 38262                                  ;----------------------------------------------------------------------------
 38263                                  
 38264                                  ; 21/05/2019 - Retro DOS v4.0
 38265                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 38266                                  
 38267                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38268                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 38269                                  
 38270                                  InitCDS:
 38271                                  	; 19/08/2018
 38272                                  	; 05/08/2018 - Retro DOS v3.0
 38273                                  	; MSDOS 6.0
 38274 00006869 50                      	push	ax			; save (AL) for caller
 38275 0000686A 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 38276                                  	;mov	word [es:di+67],0
 38277 0000686F 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 38278 00006875 2C40                    	SUB	AL,"A"-1                ; A = 1
 38279 00006877 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 38280 0000687C 7236                    	JC	short icdsx		; Drive does not map a physical drive
 38281 0000687E 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 38282 0000687F 50                      	PUSH	AX			; save drive number for later
 38283 00006880 0441                    	add	al,"A"
 38284 00006882 B43A                    	MOV	AH,':'
 38285 00006884 268905                  	mov	[ES:DI],ax
 38286                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 38287                                  	;mov	ax,"\"
 38288                                  	;mov	[es:di+2],ax
 38289                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 38290 00006887 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 38291                                  	;or	word [es:di+67],4000h
 38292                                  	;or	byte [es:di+68],40h
 38293 0000688D 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38294 00006892 29C0                    	sub	ax,ax
 38295                                  	;MOV	[es:di+73],ax ; 0
 38296 00006894 26894549                	MOV	[ES:DI+curdir.ID],ax
 38297                                  	;mov	[es:di+75],ax ; 0
 38298 00006898 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 38299 0000689C B002                    	mov	al,2
 38300                                  	;mov	[es:di+79],aX ; 2
 38301 0000689E 2689454F                	MOV	[ES:DI+curdir.end],ax
 38302 000068A2 58                      	POP	AX			; (al) = drive number
 38303 000068A3 1E                      	push	ds
 38304 000068A4 56                      	push	si
 38305 000068A5 E8ACFF                  	call	FIND_DPB
 38306 000068A8 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 38307                                  	;mov	[es:di+69],si
 38308 000068AA 26897545                	MOV	[ES:DI+curdir.devptr],SI
 38309                                  	;mov	[es:di+71],ds
 38310 000068AE 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 38311                                  icds5:	
 38312 000068B2 5E                      	pop	si
 38313 000068B3 1F                      	pop	ds
 38314                                  icdsx:	
 38315 000068B4 58                      	pop	ax
 38316                                  RET45:
 38317 000068B5 C3                      	retn
 38318                                  
 38319                                  ;Break <$UserOper - get/set current user ID (for net)>
 38320                                  ;----------------------------------------------------------------------------
 38321                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 38322                                  ;	maintain this string and do no verifications.
 38323                                  ;
 38324                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 38325                                  ;				      4-printer-set-flags,5-printer-get-flags)
 38326                                  ;		DS:DX is user string pointer (calls 1,2)
 38327                                  ;		ES:DI is user buffer (call 3)
 38328                                  ;		BX is assign index (calls 2,3,4,5)
 38329                                  ;		CX is user number (call 1)
 38330                                  ;		DX is flag word (call 4)
 38331                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 38332                                  ;			and user CX is set to the user number
 38333                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 38334                                  ;		If AL = 5 then DX is flag word
 38335                                  ;----------------------------------------------------------------------------
 38336                                  
 38337                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38338                                  	; 21/05/2019 - Retro DOS v4.0
 38339                                  _$UserOper:
 38340                                  	; 05/08/2018 - Retro DOS v3.0
 38341                                  	; MSDOS 6.0 (& MSDOS 3.3)
 38342 000068B6 50                      	PUSH	AX
 38343 000068B7 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 38344 000068B9 58                      	POP	AX
 38345 000068BA 7211                    	JB	short UserGet 		; return to user the string
 38346 000068BC 742E                    	JZ	short UserSet 		; set the current user
 38347 000068BE 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 38348 000068C0 763D                    	JBE	short UserPrint		; yep
 38349                                  	;mov	byte [ss:EXTERR_LOCUS],1
 38350 000068C2 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 38351                                  					; Extended Error Locus
 38352                                  	;error	error_invalid_function	; not 0,1,2,3
 38353                                  	;mov	al,1
 38354 000068C8 B001                    	MOV	AL,error_invalid_function
 38355                                  useroper_error:
 38356                                  	; 17/12/2022
 38357                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38358 000068CA E96D9D                  	JMP	SYS_RET_ERR
 38359                                  	;jmp	short ASS_ERR
 38360                                  
 38361                                  UserGet:
 38362                                  ; Transfer MYNAME to DS:DX
 38363                                  ; Set Return CX to MYNUM
 38364 000068CD 1E                      	PUSH	DS			; switch registers
 38365 000068CE 07                      	POP	ES
 38366 000068CF 89D7                    	MOV	DI,DX			; destination
 38367 000068D1 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 38368 000068D6 E8A89B                  	call	Get_User_Stack
 38369                                  	;mov	[si+4],cx
 38370 000068D9 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 38371 000068DC 16                      	push	ss			; point to DOSDATA
 38372 000068DD 1F                      	pop	ds
 38373 000068DE BE[0503]                	MOV	SI,MYNAME		; point source to user string
 38374                                  UserMove:
 38375 000068E1 B90F00                  	MOV	CX,15
 38376 000068E4 F3A4                    	REP	MOVSB			; blam.
 38377 000068E6 31C0                    	XOR	AX,AX			; 16th byte is 0
 38378 000068E8 AA                      	STOSB
 38379                                  UserBye:
 38380 000068E9 E9459D                  	jmp	SYS_RET_OK		; no errors here
 38381                                  
 38382                                  UserSet:
 38383                                  ; Transfer DS:DX to MYNAME
 38384                                  ; CX to MYNUM
 38385 000068EC 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 38386 000068F1 89D6                    	MOV	SI,DX			; user space has source
 38387 000068F3 16                      	push	ss
 38388 000068F4 07                      	pop	es
 38389 000068F5 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 38390 000068F8 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 38391 000068FD EBE2                    	JMP	short UserMove
 38392                                  
 38393                                  UserPrint:
 38394                                  
 38395                                    ;IF NOT Installed
 38396                                    ;	transfer PRINTER_GETSET_STRING
 38397                                    ;ELSE
 38398 000068FF 50                      	PUSH	AX
 38399                                  	;mov	ax,111Fh
 38400                                  	;MOV	AX,(MultNET SHL 8) OR 31
 38401 00006900 B81F11                  	mov	ax,(MultNET<<8)|31
 38402 00006903 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 38403                                  			; STACK: WORD function
 38404                                  			; Return: CF set on error, AX = error code
 38405                                  			; STACK unchanged
 38406 00006905 5A                      	POP	DX			; Clean stack
 38407                                  	;JNC	short OKPA
 38408 00006906 73E1                    	jnc	short UserBye ; 21/05/2019
 38409                                  	; 17/12/2022
 38410 00006908 EBC0                    	jmp	short useroper_error
 38411                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38412                                  	;jnb     short OKPA
 38413                                  	;jmp     short useroper_error
 38414                                  
 38415                                  	; 17/12/2022
 38416                                  ;OKPA:
 38417                                  ;	jmp	short UserBye
 38418                                  
 38419                                    ;ENDIF
 38420                                  
 38421                                  
 38422                                  ;Break	<GetVisDrv - return visible drive>
 38423                                  ;----------------------------------------------------------------------------
 38424                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 38425                                  ;
 38426                                  ;   Inputs:	AL has drive identifier (0=default)
 38427                                  ;   Outputs:	Carry Set - invalid drive/macro
 38428                                  ;		Carry Clear - AL has physical drive (0=A)
 38429                                  ;		    ThisCDS points to CDS
 38430                                  ;   Registers modified: AL
 38431                                  ;----------------------------------------------------------------------------
 38432                                  
 38433                                  	; 21/05/2019 - Retro DOS v4.0
 38434                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 38435                                  
 38436                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38437                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 38438                                  GetVisDrv:
 38439                                  	; 05/08/2018 - Retro DOS v3.0
 38440                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 38441 0000690A E81900                  	CALL	GETTHISDRV		; get inuse drive
 38442 0000690D 72A6                    	jc	short RET45
 38443 0000690F 1E                      	push	ds
 38444 00006910 56                      	push	si
 38445 00006911 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 38446                                  	;test	word [si+67],2000h
 38447                                  	; 17/12/2022
 38448                                  	;test	byte [si+68],20h
 38449 00006916 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 38450                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38451 0000691A 5E                      	pop	si
 38452 0000691B 1F                      	pop	ds
 38453 0000691C 7497                    	jz	short RET45		; if not spliced, return OK
 38454                                  	; MSDOS 6.0
 38455                                  	;mov	byte [ss:DrvErr],0Fh
 38456 0000691E 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 38457 00006924 F9                      	STC				; signal error
 38458 00006925 C3                      	retn
 38459                                  
 38460                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 38461                                  ;----------------------------------------------------------------------------
 38462                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 38463                                  ;	macro pointer
 38464                                  ;
 38465                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 38466                                  ;   Outputs:
 38467                                  ;		Carry Set - invalid drive/macro
 38468                                  ;		Carry Clear - AL has physical drive (0=A)
 38469                                  ;		   ThisCDS points to macro
 38470                                  ;   Registers modified: AL
 38471                                  ;----------------------------------------------------------------------------
 38472                                  
 38473                                  	; 21/05/2019 - Retro DOS v4.0
 38474                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 38475                                  
 38476                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38477                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)
 38478                                  GETTHISDRV:
 38479                                  	; 05/08/2018
 38480                                  	; 12/07/2018 - Retro DOS v3.0
 38481                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 38482                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38483 00006926 08C0                    	OR	AL,AL			; are we using default drive?
 38484 00006928 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 38485 0000692A 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 38486                                  	;INC	ax			; Counteract next instruction
 38487                                  	; 04/09/2018
 38488                                  	;inc	al
 38489                                  	; 07/12/2022
 38490 0000692E 40                      	inc	ax
 38491                                  GTD10:	
 38492                                  	;DEC	AX
 38493                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38494 0000692F 48                      	dec	ax			; 0 = A
 38495                                  	;dec	al
 38496 00006930 1E                      	PUSH	DS			; save world
 38497 00006931 56                      	PUSH	SI
 38498                                  	;mov	byte [ss:EXTERR_LOCUS],2
 38499 00006932 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 38500                                  
 38501                                  	;TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 38502                                  	;JZ	SHORT GTD20		; Logical
 38503                                  	; 13/03/2024 (PCDOS71. IBMDOS.COM)
 38504                                  	;;;
 38505 00006938 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 38506 0000693E 7420                    	jz	short GTD20
 38507                                  	;;;
 38508                                  
 38509 00006940 50                      	PUSH	AX
 38510 00006941 06                      	PUSH	ES
 38511 00006942 57                      	PUSH	DI
 38512 00006943 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 38513                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 38514 0000694A 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 38515 0000694F 0441                    	ADD	AL,'A'
 38516 00006951 E815FF                  	CALL	InitCDS			; InitCDS(c);
 38517                                  	;test	word [es:di+67],4000h
 38518                                  	; 17/12/2022
 38519                                  	;test	byte [es:di+68],40h
 38520 00006954 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38521                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 38522 00006959 5F                      	POP	DI
 38523 0000695A 07                      	POP	ES
 38524 0000695B 58                      	POP	AX
 38525 0000695C 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 38526 0000695E EB18                    	JMP	SHORT GTDX		; carry clear
 38527                                  GTD20:
 38528 00006960 E81800                  	CALL	GetCDSFromDrv
 38529 00006963 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 38530                                  	;test	word [si+43h],4000h
 38531                                  	; 17/12/2022
 38532                                  	;test	byte [si+44h],40h
 38533 00006965 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38534                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 38535 00006969 750D                    	JNZ	SHORT GTDX		; carry clear
 38536                                  GTD30:	
 38537                                  	; 21/05/2019
 38538                                  	; MSDOS 6.0
 38539 0000696B B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 38540 0000696D 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 38541                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 38542 00006971 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 38543 00006977 F9                      	STC
 38544                                  GTDX:	
 38545 00006978 5E                      	POP	SI			; restore world
 38546 00006979 1F                      	POP	DS
 38547 0000697A C3                      	RETN
 38548                                  
 38549                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 38550                                  ;----------------------------------------------------------------------------
 38551                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 38552                                  ;	pointer, returning an error if the drive number is greater than the
 38553                                  ;	number of CDS's
 38554                                  ;
 38555                                  ;   Inputs:	AL is physical unit # A=0...
 38556                                  ;   Outputs:	Carry Set if Bad Drive
 38557                                  ;		Carry Clear
 38558                                  ;		    DS:SI -> CDS
 38559                                  ;		    [THISCDS] = DS:SI
 38560                                  ;   Registers modified: DS,SI
 38561                                  ;----------------------------------------------------------------------------
 38562                                  
 38563                                  	; 21/05/2019 - Retro DOS v4.0
 38564                                  GetCDSFromDrv:
 38565 0000697B 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 38566                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 38567                                  	;STC				; signal error
 38568                                  	;RETN				; bye
 38569                                  	; 23/09/2023
 38570 00006980 F5                      	cmc	; cf=1 <-> cf=0
 38571 00006981 7217                    	jc	short GetCDS_retn
 38572                                  GetCDS:
 38573                                  	; 23/09/2023
 38574                                  	;PUSH	BX
 38575 00006983 50                      	PUSH	AX
 38576 00006984 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 38577                                  	;mov	bl,81 ; MSDOS 3.3
 38578                                  	;mov	bl,88 ; MSDOS 6.0 
 38579                                  	; 23/09/2023
 38580                                  	;MOV	BL,curdir.size		; size in convenient spot
 38581                                  	;MUL	BL			; get net offset
 38582 00006989 B458                    	mov	ah,curdir.size
 38583 0000698B F6E4                    	mul	ah
 38584 0000698D 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 38585 0000698F 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 38586 00006994 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 38587 00006999 58                      	POP	AX
 38588                                  	; 23/09/2023
 38589                                  	;POP	BX
 38590                                  	; (cf must be 0 here) ; *
 38591                                  	;CLC				; no error
 38592                                  GetCDS_retn:
 38593 0000699A C3                      	RETN				; bye!
 38594                                  
 38595                                  ;============================================================================
 38596                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 38597                                  ;============================================================================
 38598                                  ; Retro	DOS v3.0 - 12/07/2018
 38599                                  ; 22/05/2019 - Retro DOS v4.0
 38600                                  
 38601                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 38602                                  ;----------------------------------------------------------------------------
 38603                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 38604                                  ;       gritty substitution.
 38605                                  ;
 38606                                  ;   Inputs:     DS:DX - pointer to FCB
 38607                                  ;               ES:DI - point to destination
 38608                                  ;   Outputs:    Carry Set - invalid path in final map
 38609                                  ;               Carry Clear - FCB has been mapped into ES:DI
 38610                                  ;                   Sattrib is set from possibly extended FCB
 38611                                  ;                   ExtFCB set if extended FCB found
 38612                                  ;   Registers modified: most
 38613                                  ;----------------------------------------------------------------------------
 38614                                  
 38615                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38616                                  TransFCB:
 38617                                  	; 22/05/2019 - Retro DOS v4.0
 38618                                  	; 12/07/2018 - Retro DOS v3.0
 38619                                  	;LocalVar FCBTmp,16
 38620                                  	;ENTER
 38621 0000699B 55                      	push	bp
 38622 0000699C 89E5                    	mov	bp,sp
 38623                                  	;sub	sp,15	; MSDOS 3.3
 38624 0000699E 83EC10                  	sub	sp,16	; MSDOS 6.0
 38625 000069A1 16                      	push	ss
 38626 000069A2 07                      	pop	es
 38627 000069A3 06                      	push	es
 38628 000069A4 57                      	push	di
 38629                                  	;lea	di,[bp-15] ; MSDOS 3.3
 38630                                  	;LEA	DI,FCBTmp 
 38631 000069A5 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 38632 000069A8 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 38633 000069AE 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 38634 000069B4 E866B2                  	call	GetExtended             ; get FCB, extended or not
 38635                                  	; 06/12/2022
 38636 000069B7 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 38637 000069B9 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 38638 000069BC 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 38639 000069C0 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 38640                                  GetDrive:
 38641 000069C6 AC                      	lodsb				; get drive byte
 38642 000069C7 E85CFF                  	call	GETTHISDRV
 38643 000069CA 722A                    	jc	short BadPack
 38644 000069CC E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 38645                                  
 38646                                  ; Scan the source to see if there are any illegal chars
 38647                                  
 38648                                  	;mov	bx,CharType		; load lookup table
 38649 000069CF B90B00                  	mov	cx,11
 38650 000069D2 56                      	push	si			; back over name, ext
 38651                                  FCBScan:
 38652 000069D3 AC                      	lodsb				; get a byte
 38653                                  	
 38654                                  	; 09/08/2018
 38655                                  	;;xlat	byte [es:bx]
 38656                                  	;es	xlat
 38657                                  
 38658                                  	; 22/05/2019 - Retro DOS v4.0	
 38659 000069D4 E868E5                  	call	GetCharType		; get flags
 38660                                  
 38661                                  	;test	al,8	
 38662 000069D7 A808                    	test	al,FFCB
 38663 000069D9 741B                    	jz	short BadPack
 38664                                  NextCh: 
 38665 000069DB E2F6                    	loop	FCBScan
 38666 000069DD 5E                      	pop	si
 38667 000069DE 89FB                    	mov	bx,di
 38668 000069E0 E876B6                  	call	PackName                ; crunch the path
 38669 000069E3 5F                      	pop	di			; get original destination
 38670 000069E4 07                      	pop	es
 38671 000069E5 16                      	push	ss			; get DS addressability
 38672 000069E6 1F                      	pop	ds
 38673                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38674                                  	;LEA	SI,FCBTmp		; point at new pathname
 38675 000069E7 8D76F0                  	lea	si,[bp-16]
 38676 000069EA 803F00                  	cmp	byte [bx],0
 38677 000069ED 7407                    	jz	short BadPack
 38678 000069EF 55                      	push	bp
 38679 000069F0 E80E00                  	call	TransPathSet            ; convert the path
 38680 000069F3 5D                      	pop	bp
 38681 000069F4 7303                    	jnc	short FCBRet		; bye with transPath error code
 38682                                  BadPack:
 38683 000069F6 F9                      	STC
 38684                                  	;mov	al,3
 38685 000069F7 B003                    	MOV     AL,error_path_not_found
 38686                                  FCBRet: 
 38687                                  	;LEAVE
 38688 000069F9 89EC                    	mov	sp,bp
 38689 000069FB 5D                      	pop	bp
 38690                                  TransPath_retn:
 38691 000069FC C3                      	retn
 38692                                  
 38693                                  ; 12/07/2018 - Retro DOS v3.0
 38694                                  
 38695                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38696                                  ;----------------------------------------------------------------------------
 38697                                  ;
 38698                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38699                                  ;       substitution, insertion of current directory and fixing . and ..
 38700                                  ;       entries. Perform splicing. Allow input string to match splice
 38701                                  ;       exactly.
 38702                                  ;
 38703                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38704                                  ;       matches splice.
 38705                                  ;
 38706                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38707                                  ;
 38708                                  ;   The following anomalous behaviour is required:
 38709                                  ;
 38710                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38711                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38712                                  ;       Raw net I/O sets ThisCDS => NULL.
 38713                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38714                                  ;
 38715                                  ;   Other behaviour:
 38716                                  ;
 38717                                  ;       ThisCDS set up.
 38718                                  ;       FatRead done on local CDS.
 38719                                  ;       ValidateCDS done on local CDS.
 38720                                  ;
 38721                                  ;   Brief flowchart:
 38722                                  ;
 38723                                  ;       if fSharing then
 38724                                  ;           set up DummyCDS (ThisCDS)
 38725                                  ;           canonicalize (sets cMeta)
 38726                                  ;           splice
 38727                                  ;           fatRead
 38728                                  ;           return
 38729                                  ;       if \\ or d:\\ lead then
 38730                                  ;           set up null CDS (ThisCDS)
 38731                                  ;           canonicalize (sets cMeta)
 38732                                  ;           return
 38733                                  ;       if device then
 38734                                  ;           set up dummyCDS (ThisCDS)
 38735                                  ;           canonicalize (sets cMeta)
 38736                                  ;           return
 38737                                  ;       if file then
 38738                                  ;           getCDS (sets (ThisCDS) from name)
 38739                                  ;           validateCDS (may reset current dir)
 38740                                  ;           Copy current dir
 38741                                  ;           canonicalize (set cMeta)
 38742                                  ;           splice
 38743                                  ;           generate correct CDS (ThisCDS)
 38744                                  ;           if local then
 38745                                  ;               fatread
 38746                                  ;           return
 38747                                  ;
 38748                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38749                                  ;               DI - point to buffer in DOSDATA
 38750                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38751                                  ;                   syntax, etc. or user FAILed to I 24.
 38752                                  ;               WFP_Start - points to beginning of buffer
 38753                                  ;               Curr_Dir_End - points to end of current dir in path
 38754                                  ;               DS - DOSDATA
 38755                                  ;   Registers modified: most
 38756                                  ;
 38757                                  ;----------------------------------------------------------------------------
 38758                                  
 38759                                  ; 22/05/2019
 38760                                  ; 13/05/2019 - Retro DOS v4.0
 38761                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38762                                  
 38763                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38764                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38765                                  
 38766                                  TransPath:
 38767 000069FD 30C0                    	XOR     AL,AL
 38768 000069FF EB02                    	JMP     SHORT SetSplice
 38769                                  TransPathSet:
 38770 00006A01 B0FF                    	MOV     AL,-1
 38771                                  SetSplice:
 38772 00006A03 36A2[4C03]              	MOV	[SS:NoSetDir],AL	; NoSetDir = !fExact;	;smr;SS Override
 38773 00006A07 B0FF                    	MOV     AL,-1
 38774                                  TransPathNoSet:
 38775 00006A09 36A2[7105]              	MOV	[SS:FSPLICE],AL		; fSplice = TRUE;	;smr;SS Override
 38776 00006A0D 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38777 00006A13 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38778 00006A18 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38779 00006A1F 16                      	push	ss
 38780 00006A20 07                      	pop	es
 38781                                  	;lea	bp,[di+134]
 38782 00006A21 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38783                                  ;
 38784                                  ; if this is through the server dos call, fsharing is set. We set up a
 38785                                  ; dummy cds and let the operation go.
 38786                                  ;
 38787                                  	;TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38788                                  	;JZ	short CheckUNC		; skip to UNC check
 38789                                  	; 13/03/2024 (PCDOS 7.1 IBMDOS.COM)
 38790                                  	;;;
 38791 00006A25 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 38792 00006A2B 7435                    	jz	short CheckUNC
 38793                                  	;;;
 38794                                  ;
 38795                                  ; ES:DI point to buffer
 38796                                  ;
 38797 00006A2D E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38798 00006A30 E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38799 00006A33 722A                    	jc	short NoPath
 38800 00006A35 E80A03                  	CALL	TextFromDrive		; drop in new
 38801 00006A38 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38802 00006A3B E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38803 00006A3E 72BC                    	jc	short TransPath_retn	; errors
 38804                                  ;
 38805                                  ; Perform splices for net guys.
 38806                                  ;
 38807 00006A40 16                      	push	ss
 38808 00006A41 1F                      	pop	ds
 38809 00006A42 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38810 00006A46 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38811 00006A4B 7403                    	JZ	short NoServerSplice
 38812 00006A4D E83102                  	CALL    Splice
 38813                                  NoServerSplice:
 38814 00006A50 16                      	push	ss
 38815 00006A51 1F                      	pop	ds                      ; for FATREAD
 38816 00006A52 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38817 00006A56 E889A8                  	call	ECritDisk
 38818 00006A59 E833EB                  	call	FATREAD_CDS
 38819 00006A5C E89EA8                  	call	LCritDisk
 38820                                  NoPath:
 38821                                  	;mov	al,3
 38822 00006A5F B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38823 00006A61 C3                      	retn				; any errors are in Carry flag
 38824                                  
 38825                                  ; Let the network decide if the name is for a spooled device. It will map
 38826                                  ; the name if so.
 38827                                  
 38828                                  CheckUNC:
 38829 00006A62 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38830                                  	;CallInstall NetSpoolCheck,MultNET,35
 38831 00006A69 B82311                  	mov	ax,1123h
 38832 00006A6C CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38833                                  			; DS:SI -> ASCIZ filename to canonicalize
 38834                                  			; ES:DI -> 128-byte buffer for qualified name
 38835                                  			; Return: CF set if not resolved
 38836 00006A6E 7329                    	JNC	short UNCDone
 38837                                  
 38838                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38839                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38840                                  ; input, then the name has been changed to the remote spooler by the above net
 38841                                  ; call. Also, there may be a drive in front of the \\.
 38842                                  
 38843                                  NO_CHECK:
 38844 00006A70 E8B902                  	CALL    DriveFromText		; eat drive letter
 38845 00006A73 50                      	PUSH    AX                      ; save it
 38846 00006A74 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38847 00006A76 E8E3E4                  	call    PATHCHRCMP              ; convert to normal form
 38848 00006A79 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38849 00006A7B E8DEE4                  	call    PATHCHRCMP              ; convert to normal form
 38850 00006A7E 751F                    	JNZ	short CheckDevice	; not a path char
 38851 00006A80 38C4                    	CMP     AH,AL                   ; are they same?
 38852 00006A82 751B                    	JNZ	short CheckDevice	; nope
 38853                                  
 38854                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38855                                  ; local machine root path
 38856                                  
 38857 00006A84 58                      	POP     AX
 38858 00006A85 A5                      	MOVSW                           ; get the lead \\.
 38859                                  UNCCpy:
 38860 00006A86 AC                      	LODSB                           ; get a byte
 38861 00006A87 E87DE4                   	call	UCase                   ;AN000;; convert the char
 38862 00006A8A 08C0                    	OR      AL,AL
 38863 00006A8C 740E                    	JZ	short UNCTerm		; end of string. All done.
 38864 00006A8E E8CBE4                  	call    PATHCHRCMP              ; is it a path char?
 38865 00006A91 89FB                    	MOV     BX,DI                   ; backup position
 38866 00006A93 AA                      	STOSB
 38867 00006A94 75F0                    	JNZ	short UNCCpy		; no, go copy
 38868 00006A96 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38869                                  UNCDone:
 38870 00006A99 16                      	push	ss
 38871 00006A9A 1F                      	pop	ds
 38872 00006A9B C3                       	retn				; return error code
 38873                                  UNCTerm:
 38874 00006A9C AA                      	STOSB                           ;AN000;
 38875 00006A9D EBFA                    	JMP	short UNCDone		;AN000;
 38876                                  
 38877                                  CheckDevice:
 38878                                  
 38879                                  ; Check DS:SI for device. First eat any path stuff
 38880                                  
 38881 00006A9F 58                      	POP     AX                      ; retrieve drive info
 38882 00006AA0 803C00                  	CMP     BYTE [SI],0		; check for null file
 38883 00006AA3 7504                    	JNZ	short CheckPath
 38884                                  	;mov	al,2 
 38885 00006AA5 B002                    	MOV     AL,error_file_not_found ; bad file error
 38886 00006AA7 F9                      	STC                             ; signal error on null input
 38887 00006AA8 C3                      	RETN				; bye!
 38888                                  CheckPath:
 38889 00006AA9 50                      	push	ax
 38890 00006AAA 55                      	push	bp			; save drive number
 38891                                  
 38892                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38893                                  %if 0
 38894                                  	; MSDOS 6.0
 38895                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38896                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38897                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38898                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38899                                  ;;;end up having a 5D in the opcode's displacement field. The
 38900                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38901                                  ;;;
 38902                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38903                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38904                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38905                                  ;;;
 38906                                  ;;;More info:
 38907                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38908                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38909                                  ;;;
 38910                                  	call	no5Dshere
 38911                                  start5Dhack:
 38912                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice
 38913                                  backfrom5Dhack:
 38914                                  
 38915                                  %endif
 38916                                  
 38917                                  ; 13/03/2024
 38918                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:AC47h
 38919                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:BECBh
 38920                                  ; (Windows ME IO.SYS - BIOSCODE:A6C2h)
 38921                                  %if 0
 38922                                  	call	no5Dshere
 38923                                  %else
 38924                                  ; 13/03/2024 - Retro DOS v4.2
 38925                                  
 38926                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38927                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38928 00006AAB E843D7                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38929                                  %endif
 38930 00006AAE 5D                      	pop	bp
 38931 00006AAF 58                      	pop	ax			; get drive letter back
 38932 00006AB0 731C                    	JNC	short DoFile		; yes we have a file.
 38933                                  
 38934                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38935                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38936                                  ; call.
 38937                                  
 38938 00006AB2 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38939 00006AB8 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38940 00006ABB 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38941                                  
 38942                                  ; Now that we have noted that we have a device, we put it into a form that
 38943                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38944                                  ; string. We relax this to state that if the d:\ is present then the path
 38945                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38946                                  ; a device.
 38947                                  
 38948 00006AC1 E87E02                  	CALL    TextFromDrive
 38949 00006AC4 B02F                    	MOV     AL,'/'                  ; path sep.
 38950 00006AC6 AA                      	STOSB
 38951 00006AC7 E8E7A6                  	call	StrCpy			; move remainder of string
 38952                                  
 38953 00006ACA F8                      	CLC                             ; everything OK.
 38954 00006ACB 16                      	push	ss
 38955 00006ACC 1F                      	pop	ds                      ; remainder of OK stuff
 38956                                  DoFile_retn:
 38957 00006ACD C3                      	retn
 38958                                  
 38959                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38960                                  %if 0
 38961                                  
 38962                                  no5Dshere:
 38963                                  	; 10/08/2018
 38964                                  	jmp	CheckThisDevice		; snoop for device
 38965                                  %endif
 38966                                  
 38967                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38968                                  
 38969                                  ; We have a file. Get the raw CDS.
 38970                                  
 38971                                  DoFile:
 38972                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38973                                  
 38974 00006ACE E839FE                  	call	GetVisDrv               ; get proper CDS
 38975                                  	;mov	al,3 
 38976 00006AD1 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38977 00006AD3 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38978                                  
 38979                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38980                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38981                                  ; Use the one that we are going to use (ES:DI).
 38982                                  
 38983                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38984 00006AD5 1E                      	push	ds
 38985 00006AD6 56                      	push	si
 38986 00006AD7 06                      	push	es
 38987 00006AD8 57                      	push	di
 38988 00006AD9 E85ED6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38989                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38990 00006ADC 5F                      	pop	di
 38991 00006ADD 07                      	pop	es
 38992 00006ADE 5E                      	pop	si
 38993 00006ADF 1F                      	pop	ds
 38994                                  	;mov	al,3
 38995 00006AE0 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38996                                  	;retc				; someone failed an operation
 38997 00006AE2 72E9                    	jc	short DoFile_retn
 38998                                  
 38999                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 39000                                  ; current directory. Copy it in.
 39001                                  
 39002 00006AE4 1E                      	push	ds
 39003 00006AE5 56                      	push	si
 39004 00006AE6 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 39005 00006AEB 89FB                    	MOV     BX,DI                   ; point to destination
 39006                                  	;add	bx,[si+79] ; MSDOS 6.0
 39007 00006AED 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 39008                                  	;lea	bp,[di+134]
 39009 00006AF0 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 39010                                  					;AN000;
 39011 00006AF4 E8C9A6                  	call	FStrCpy                 ; copy string. ES:DI point to end
 39012 00006AF7 4F                      	DEC     DI                      ; point to NUL byte
 39013                                  
 39014                                  ; Make sure that there is a path char at end.
 39015                                  
 39016 00006AF8 B05C                    	MOV     AL,'\'
 39017 00006AFA 263845FF                	CMP     [ES:DI-1],AL
 39018 00006AFE 7401                    	JZ	short GetOrig
 39019 00006B00 AA                      	STOSB
 39020                                  
 39021                                  ; Now get original string.
 39022                                  
 39023                                  GetOrig:
 39024 00006B01 4F                      	DEC     DI                      ; point to path char
 39025 00006B02 5E                      	pop	si
 39026 00006B03 1F                      	pop	ds
 39027                                  
 39028                                  ; BX points to the end of the root part of the CDS (at where a path char
 39029                                  ; should be). Now, we decide whether we use this root or extend it with the
 39030                                  ; current directory. See if the input string begins with a leading 
 39032 00006B04 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 39033 00006B07 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 39034 00006B09 08C0                    	OR      AL,AL                   ; end of string?
 39035 00006B0B 7410                    	JZ	short DoCanon		; yes, skip.
 39036                                  ;
 39037                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 39038                                  ; to this root. Make sure that there is a path char there and advance the
 39039                                  ; source string over all leading \'s.
 39040                                  ;
 39041 00006B0D 89DF                    	MOV     DI,BX                   ; back up to root point.
 39042                                  SkipPath:
 39043 00006B0F AC                      	LODSB
 39044 00006B10 E849E4                  	call    PATHCHRCMP
 39045 00006B13 74FA                    	JZ	short SkipPath
 39046 00006B15 4E                      	DEC     SI
 39047 00006B16 08C0                    	OR      AL,AL
 39048 00006B18 7403                    	JZ	short DoCanon
 39049                                  
 39050                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 39051                                  ; for yucks.
 39052                                  
 39053                                  PathAssure:
 39054 00006B1A B05C                    	MOV     AL,'\'	; 5Ch
 39055 00006B1C AA                      	STOSB
 39056                                  
 39057                                  ; ES:DI point to the correct spot for canonicalization to begin.
 39058                                  ; BP is the max extent to advance DI
 39059                                  ; BX is the backup limit for ..
 39060                                  
 39061                                  DoCanon:
 39062 00006B1D E85200                  	CALL    Canonicalize            ; wham.
 39063                                  	;retc				; badly formatted path.
 39064 00006B20 72AB                    	jc	short DoFile_retn
 39065                                  
 39066                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 39067                                  ; to wfp_start and do string substitution. BP is still the max position in
 39068                                  ; buffer.
 39069                                  
 39070 00006B22 16                      	push	ss
 39071 00006B23 1F                      	pop	ds
 39072 00006B24 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 39073 00006B28 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 39074 00006B2C E81B02                  	CALL    PathPref                ; is there a prefix?
 39075 00006B2F 7514                    	JNZ	short DoSplice		; no, do splice
 39076                                  
 39077                                  ; We have a match. Check to see if we ended in a path char.
 39078                                  
 39079 00006B31 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 39080 00006B34 E825E4                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 39081 00006B37 740C                    	JZ	short DoSplice		; yes, no current dir here.
 39082                                  Pathline:                               ; 2/13/KK
 39083 00006B39 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 39084 00006B3D 7406                    	JZ	short DoSplice
 39085 00006B3F 47                      	INC     DI                      ; point to after current path char
 39086 00006B40 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 39087                                  
 39088                                  ; Splice the result.
 39089                                  
 39090                                  DoSplice:
 39091 00006B45 16                      	push	ss
 39092 00006B46 1F                      	pop	ds			; back to DOSDATA
 39093 00006B47 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 39094 00006B4B 31C9                    	XOR     CX,CX
 39095 00006B4D F606[7105]FF            	TEST	byte [FSPLICE],-1
 39096 00006B52 7403                    	JZ	short SkipSplice
 39097 00006B54 E82A01                  	CALL    Splice                  ; replaces in place.
 39098                                  SkipSplice:
 39099                                  
 39100                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 39101                                  ; device.
 39102                                  
 39103 00006B57 16                      	push	ss
 39104 00006B58 1F                      	pop	ds
 39105 00006B59 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 39106                                  	;test	word [es:di+67],8000h
 39107                                  	; 17/12/2022
 39108                                  	;test	byte [es:di+68],80h
 39109 00006B5D 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 39110                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 39111 00006B62 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 39112 00006B64 E30B                    	JCXZ    Done
 39113 00006B66 E879A7                  	call	ECritDisk
 39114 00006B69 E823EA                  	call	FATREAD_CDS
 39115 00006B6C E88EA7                  	call	LCritDisk
 39116                                  	;mov	al, 3
 39117 00006B6F B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 39118                                  Done:   
 39119 00006B71 C3                      	retn                         ; any errors in carry flag.
 39120                                  
 39121                                  ; 13/07/2018
 39122                                  
 39123                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 39124                                  ;----------------------------------------------------------------------------
 39125                                  ;   Canonicalize - copy path removing . and .. entries.
 39126                                  ;
 39127                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 39128                                  ;               ES:DI - point to buffer
 39129                                  ;               BX - backup limit (offset from ES) points to slash
 39130                                  ;               BP - end of buffer
 39131                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 39132                                  ;                   syntax, etc.
 39133                                  ;               Carry Clear -
 39134                                  ;                   DS:DI - advanced to end of string
 39135                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 39136                                  ;   Registers modified: AX CX DX (in addition to those above)
 39137                                  ;----------------------------------------------------------------------------
 39138                                  
 39139                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39140                                  
 39141                                  Canonicalize:
 39142                                  
 39143                                  ; We copy all leading path separators.
 39144                                  
 39145 00006B72 AC                      	LODSB                           ;   while (PathChr (*s))
 39146 00006B73 E8E6E3                  	call    PATHCHRCMP
 39147 00006B76 7507                    	JNZ	short CanonDec
 39148 00006B78 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 39149 00006B7A 7319                    	JAE	short CanonBad		;           goto error;
 39150 00006B7C AA                      	STOSB
 39151 00006B7D EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 39152                                  CanonDec:
 39153 00006B7F 4E                      	DEC     SI
 39154                                  
 39155                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 39156                                  ; component (no leading path separators) and ES:DI being the destination
 39157                                  ; buffer.
 39158                                  
 39159                                  CanonLoop:
 39160                                  
 39161                                  ; If we are at the end of the source string, then we need to check to see that
 39162                                  ; a potential drive specifier is correctly terminated with a path sep char.
 39163                                  ; Otherwise, do nothing
 39164                                  
 39165 00006B80 31C0                    	XOR     AX,AX
 39166 00006B82 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 39167 00006B84 751A                    	JNZ	short DoComponent
 39168 00006B86 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 39169 00006B8B 7505                    	JNZ	short DoTerminate
 39170 00006B8D B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 39171 00006B8F AA                      	STOSB
 39172 00006B90 88E0                    	MOV     AL,AH
 39173                                  DoTerminate:
 39174 00006B92 AA                      	STOSB                           ;           *d++ = 0;
 39175 00006B93 F8                      	CLC                             ;           return (0);
 39176 00006B94 C3                      	retn
 39177                                  
 39178                                  CanonBad:
 39179 00006B95 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 39180                                  	;mov	al,3
 39181 00006B98 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 39182 00006B9A 7402                    	JZ	short PathEnc		; path character encountered in string
 39183                                  	;mov	al,2
 39184 00006B9C B002                    	MOV     AL,error_file_not_found ; Set bad file error
 39185                                  PathEnc:
 39186 00006B9E F9                      	STC
 39187                                  CanonBad_retn:
 39188 00006B9F C3                      	retn
 39189                                  
 39190                                  ; We have a textual component that we must copy. We uppercase it and truncate
 39191                                  ; it to 8.3
 39192                                  
 39193                                  DoComponent:                            ;           }
 39194 00006BA0 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 39195 00006BA3 72FA                    	jc	short CanonBad_retn	;           return (-1);
 39196                                  
 39197                                  ; We special case the . and .. cases. These will be backed up.
 39198                                  
 39199                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 39200 00006BA5 26833D2E                	CMP	WORD [ES:DI],002Eh
 39201 00006BA9 7408                    	JZ	short Skip1
 39202                                  	;CMP	WORD PTR ES:[DI],'..'
 39203 00006BAB 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 39204 00006BB0 750A                    	JNZ	short CanonNormal
 39205 00006BB2 4F                      	DEC     DI                      ;           d--;
 39206                                  Skip1:  
 39207 00006BB3 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 39208                                  	;mov	al,3
 39209 00006BB6 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 39210 00006BB8 72E5                    	jc	short CanonBad_retn
 39211 00006BBA EB02                    	JMP     short CanonPath         ;           }
 39212                                  
 39213                                  ; We have a normal path. Advance destination pointer over it.
 39214                                  
 39215                                  CanonNormal:                            ;       else
 39216 00006BBC 01CF                    	ADD     DI,CX                   ;           d += ct;
 39217                                  
 39218                                  ; We have successfully copied a component. We are now pointing at a path
 39219                                  ; sep char or are pointing at a nul or are pointing at something else.
 39220                                  ; If we point at something else, then we have an error.
 39221                                  
 39222                                  CanonPath:
 39223 00006BBE E81600                  	CALL    PathSep
 39224 00006BC1 75D2                    	JNZ	short CanonBad		; something else...
 39225                                  
 39226                                  ; Copy the first path char we see.
 39227                                  
 39228 00006BC3 AC                      	LODSB                           ; get the char
 39229 00006BC4 E895E3                  	call    PATHCHRCMP              ; is it path char?
 39230 00006BC7 75B6                    	JNZ	short CanonDec		; no, go test for nul
 39231 00006BC9 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 39232 00006BCB 73C8                    	JAE	short CanonBad		; yep, error.
 39233 00006BCD AA                      	STOSB                           ; copy the one byte
 39234                                  
 39235                                  ; Skip all remaining path chars
 39236                                  
 39237                                  CanonPathLoop:
 39238 00006BCE AC                      	LODSB                           ; get next byte
 39239 00006BCF E88AE3                  	call    PATHCHRCMP              ; path char again?
 39240 00006BD2 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 39241 00006BD4 4E                      	DEC     SI                      ; back up
 39242 00006BD5 EBA9                    	JMP	short  CanonLoop	; go copy component
 39243                                  
 39244                                  ;BREAK <PathSep - determine if char is a path separator>
 39245                                  ;----------------------------------------------------------------------------
 39246                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 39247                                  ;   Inputs:     DS:SI - point to a char
 39248                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 39249                                  ;               Zero set if AL is / \ or NUL
 39250                                  ;               Zero reset otherwise
 39251                                  ;   Registers modified: AL
 39252                                  ;----------------------------------------------------------------------------
 39253                                  
 39254                                  PathSep:
 39255 00006BD7 8A04                    	MOV     AL,[SI]                 ; get the character
 39256                                  PathSepGotCh:				; already have character
 39257 00006BD9 08C0                    	OR      AL,AL                   ; test for zero
 39258 00006BDB 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 39259                                  	;call	PATHCHRCMP              ; check for path character
 39260                                  	;retn				; and return HIS determination
 39261                                  	; 18/12/2022
 39262 00006BDD E97CE3                  	jmp	PATHCHRCMP
 39263                                  
 39264                                  ;BREAK <SkipBack - move backwards to a path separator>
 39265                                  ;----------------------------------------------------------------------------
 39266                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 39268                                  ;               BX has current directory back up limit (point to a / \)
 39269                                  ;   Outputs:    ES:DI backed up to point to a path char
 39270                                  ;               AL has char from output ES:DI (path sep if carry clear)
 39271                                  ;               Carry set if illegal backup
 39272                                  ;               Carry Clear if ok
 39273                                  ;   Registers modified: DI,AL
 39274                                  ;----------------------------------------------------------------------------
 39275                                  
 39276                                  SkipBack:
 39277 00006BE0 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 39278 00006BE2 720B                    	JB	short SkipBad		;       if (d < dlim)
 39279 00006BE4 4F                      	DEC     DI                      ;           goto err;
 39280 00006BE5 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 39281 00006BE8 E871E3                  	call    PATHCHRCMP              ;           break;
 39282 00006BEB 75F3                    	JNZ	short SkipBack		;       }
 39283 00006BED F8                      	CLC                             ;   return (0);
 39284 00006BEE C3                      	retn				;
 39285                                  SkipBad:                                ;err:
 39286                                  	;mov	al,3
 39287 00006BEF B003                    	MOV     AL,error_path_not_found ; bad path error
 39288 00006BF1 F9                      	STC                             ;   return (-1);
 39289 00006BF2 C3                      	retn				;
 39290                                  
 39291                                  ;Break <CopyComponent - copy out a file path component>
 39292                                  ;----------------------------------------------------------------------------
 39293                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 39294                                  ;
 39295                                  ;   Inputs:     DS:SI - source path
 39296                                  ;               ES:DI - destination
 39297                                  ;               ES:BP - end of buffer
 39298                                  ;   Outputs:    Carry Set - too long
 39299                                  ;               Carry Clear - DS:SI moved past component
 39300                                  ;                   CX has length of destination
 39301                                  ;   Registers modified: AX,CX,DX
 39302                                  ;----------------------------------------------------------------------------
 39303                                  
 39304                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39305                                  
 39306                                  CopyComponent:
 39307                                  
 39308                                  %define CopyBP	 [BP]		; word
 39309                                  %define CopyD	 [BP+2]		; dword
 39310                                  %define CopyDoff [BP+2]		; word
 39311                                  %define CopyS	 [BP+6]		; dword
 39312                                  %define CopySoff [BP+6]		; word
 39313                                  %define CopyTemp [BP+10]	; byte
 39314                                  
 39315 00006BF3 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 39316 00006BF6 1E                      	push	ds
 39317 00006BF7 56                      	push	si
 39318 00006BF8 06                      	push	es
 39319 00006BF9 57                      	push	di
 39320 00006BFA 55                      	push	bp
 39321 00006BFB 89E5                    	MOV     BP,SP
 39322 00006BFD B42E                    	MOV     AH,'.'
 39323 00006BFF AC                      	LODSB
 39324 00006C00 AA                      	STOSB
 39325 00006C01 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 39326 00006C03 7518                    	JNZ	short NormalComp
 39327 00006C05 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 39328 00006C08 740B                    	JZ	short NulTerm
 39329                                  TryTwoDot:
 39330 00006C0A AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 39331 00006C0B AA                      	STOSB
 39332 00006C0C 38E0                    	CMP     AL,AH
 39333 00006C0E 7557                    	JNZ	short CopyBad
 39334 00006C10 E8C4FF                  	CALL    PathSep
 39335 00006C13 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 39336                                  NulTerm:                                ;               return -1;
 39337 00006C15 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 39338 00006C17 AA                      	STOSB
 39339 00006C18 897606                  	MOV     CopySoff,SI
 39340 00006C1B EB47                    	JMP     SHORT _GoodRet		;       }
 39341                                  NormalComp:                             ;   else {
 39342 00006C1D 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 39343 00006C20 E87BE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 39344 00006C23 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 39345 00006C26 743F                    	JZ	short CopyBad		;           return (-1);
 39346 00006C28 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 39347 00006C2E 7510                    	JNZ	short DoPack
 39348 00006C30 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 39349 00006C33 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 39350 00006C38 7F2D                    	JG	short CopyBad		;               return (-1);
 39351 00006C3A 7504                    	JNZ	short DoPack		;           else
 39352 00006C3C 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 39353 00006C3E 742F                    	JZ	short CopyBadPath	;               return (-1);
 39354                                  DoPack:                                 ;           }
 39355 00006C40 897606                  	MOV     CopySoff,SI ; [bp+6]
 39356 00006C43 16                      	push	ss
 39357 00006C44 1F                      	pop	ds
 39358 00006C45 BE[4B05]                	MOV     SI,NAME1
 39359 00006C48 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 39360 00006C4B 57                      	push	di
 39361 00006C4C E80AB4                  	call	PackName                ;       PackName (Name1, temp);
 39362 00006C4F 5F                      	pop	di
 39363 00006C50 E876A5                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 39364 00006C53 49                      	DEC     CX
 39365 00006C54 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 39366                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39367                                  	;cmp	cx,[bp+0]
 39368                                  	; 15/12/2022
 39369                                  	;cmp	cx,[bp]
 39370 00006C57 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 39371 00006C5A 730B                    	JAE	short CopyBad		;           return (-1);
 39372 00006C5C 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 39373 00006C5E C47E02                  	LES     DI,CopyD    ; [bp+2]	
 39374 00006C61 E85CA5                  	call	FStrCpy
 39375                                  _GoodRet:				;       }
 39376 00006C64 F8                      	CLC
 39377 00006C65 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 39378                                  CopyBad:
 39379 00006C67 F9                      	STC
 39380 00006C68 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 39381                                  	;mov	al,2
 39382 00006C6B B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 39383 00006C6D 7503                    	JNZ	short CopyEnd
 39384                                  CopyBadPath:
 39385 00006C6F F9                      	STC
 39386                                  	;mov	al,3
 39387 00006C70 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 39388                                  CopyEnd:
 39389 00006C72 5D                      	pop	bp
 39390 00006C73 5F                      	pop	di
 39391 00006C74 07                      	pop	es
 39392 00006C75 5E                      	pop	si
 39393 00006C76 1F                      	pop	ds
 39394 00006C77 9F                      	LAHF
 39395 00006C78 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 39396 00006C7B E84BA5                  	call	StrLen
 39397 00006C7E 49                      	DEC     CX
 39398 00006C7F 9E                      	SAHF
 39399 00006C80 C3                      	retn
 39400                                  
 39401                                  ; 14/05/2019 - Retro DOS v4.0
 39402                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 39403                                  
 39404                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39405                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 39406                                  
 39407                                  ;Break <Splice - pseudo mount by string substitution>
 39408                                  ;----------------------------------------------------------------------------
 39409                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 39410                                  ;       ThisCDS to point to physical drive CDS.
 39411                                  ;   Inputs:     DS:SI point to string
 39412                                  ;               NoSetDir = TRUE => exact matches with splice fail
 39413                                  ;   Outputs:    DS:SI points to thisCDS
 39414                                  ;               ES:DI points to DPB
 39415                                  ;               String at DS:SI may be reduced in length by removing prefix
 39416                                  ;               and substituting drive letter.
 39417                                  ;               CX = 0 If no splice done
 39418                                  ;               CX <> 0 otherwise
 39419                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 39420                                  ;                   left alone
 39421                                  ;               ThisDPB points to proper DPB
 39422                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 39423                                  ;----------------------------------------------------------------------------
 39424                                  
 39425                                  Splice:
 39426 00006C81 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 39427 00006C87 7469                    	JZ	short AllDone
 39428 00006C89 36FF36[A205]            	push	word [SS:THISCDS]
 39429 00006C8E 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 39430 00006C93 1E                      	push	ds
 39431 00006C94 56                      	push	si
 39432 00006C95 5F                      	pop	di
 39433 00006C96 07                      	pop	es
 39434 00006C97 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 39435                                  SpliceScan:
 39436 00006C99 E8DFFC                  	call	GetCDSFromDrv
 39437 00006C9C 724A                    	JC	short SpliceDone
 39438 00006C9E FEC0                    	INC     AL
 39439                                  	; 17/12/2022
 39440                                  	;test	byte [si+68],20h
 39441 00006CA0 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 39442                                  	;;test	word [si+67],2000h
 39443                                  	;TEST	word [SI+curdir.flags],curdir_splice
 39444 00006CA4 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 39445 00006CA6 57                      	push	di
 39446 00006CA7 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 39447 00006CAA 7403                    	JZ	short SpliceFound	;
 39448                                  SpliceSkip:
 39449 00006CAC 5F                      	pop	di
 39450 00006CAD EBEA                    	JMP	short SpliceScan	;               continue;
 39451                                  SpliceFound:
 39452 00006CAF 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 39453 00006CB3 7508                    	JNZ	short SpliceDo
 39454 00006CB5 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 39455 00006CBB 75EF                    	JNZ	short SpliceSkip
 39456                                  SpliceDo:
 39457 00006CBD 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 39458 00006CBF 06                      	push	es
 39459 00006CC0 1F                      	pop	ds
 39460 00006CC1 5F                      	pop	di
 39461 00006CC2 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 39462 00006CC5 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 39463 00006CC9 09C0                    	OR      AX,AX
 39464 00006CCB 7808                    	JS	short NoPoke
 39465 00006CCD 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 39466 00006CCF 29F0                    	SUB     AX,SI
 39467 00006CD1 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 39468                                  NoPoke:
 39469 00006CD5 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 39470 00006CD8 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 39471 00006CDA B05C                    	MOV     AL,"\"
 39472 00006CDC AA                      	STOSB
 39473                                  SpliceCopy:                             ;               strcpy (src, p);
 39474 00006CDD E8E0A4                  	call	FStrCpy
 39475 00006CE0 83C404                  	ADD     SP,4                    ; throw away saved stuff
 39476 00006CE3 80C901                  	OR      CL,1                    ; signal splice done.
 39477 00006CE6 EB0C                    	JMP     SHORT DoSet             ;               return;
 39478                                  SpliceDone:                             ;               }
 39479 00006CE8 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 39480 00006CED 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 39481                                  AllDone:
 39482 00006CF2 31C9                    	XOR     CX,CX
 39483                                  DoSet:
 39484 00006CF4 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 39485                                  	;les	di,[si+69]
 39486 00006CF9 C47C45                  	LES     DI,[SI+curdir.devptr]	
 39487 00006CFC 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 39488 00006D01 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 39489                                  Splice_retn:
 39490 00006D06 C3                      	retn
 39491                                  
 39492                                  ; 15/05/2019 - Retro DOS v4.0
 39493                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 39494                                  
 39495                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39496                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 39497                                  
 39498                                  ;Break <$NameTrans - partially process a name>
 39499                                  ;----------------------------------------------------------------------------
 39500                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 39501                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 39502                                  ;   to Transpath playing games with devices, we need to insure that the output
 39503                                  ;   has drive letter and : in it.
 39504                                  ;
 39505                                  ;   Inputs:     DS:SI - source string for translation
 39506                                  ;               ES:DI - pointer to buffer
 39507                                  ;   Outputs:
 39508                                  ;       Carry Clear
 39509                                  ;               Buffer at ES:DI is filled in with data
 39510                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 39511                                  ;       Carry Set
 39512                                  ;               AX = error_path_not_found
 39513                                  ;   Registers modified: all
 39514                                  ;----------------------------------------------------------------------------
 39515                                  
 39516                                  _$NameTrans:
 39517 00006D07 1E                      	push	ds
 39518 00006D08 56                      	push	si
 39519 00006D09 06                      	push	es
 39520 00006D0A 57                      	push	di
 39521 00006D0B 51                      	push	cx ; MSDOS 6.0
 39522                                  	
 39523                                  	; MSDOS 6.0	
 39524                                  ; M027 - Start
 39525                                  ;
 39526                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 39527                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 39528                                  ; device if the old call set the volume attribute bit. Note that devname in
 39529                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 39530                                  ; and restore CX.
 39531                                  
 39532                                  	;mov	ch,16h
 39533 00006D0C B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 39534 00006D0E E8B402                  	call	SetAttrib
 39535                                  
 39536                                  ; M027 - End
 39537                                  
 39538                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39539 00006D11 BF[BE03]                	MOV     DI,OPENBUF
 39540 00006D14 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 39541 00006D17 59                      	pop	cx ; MSDOS 6.0
 39542 00006D18 5F                      	pop     di
 39543 00006D19 07                      	pop	es
 39544 00006D1A 5E                      	pop     si
 39545 00006D1B 1F                      	pop     ds
 39546 00006D1C 7303                    	JNC	short TransOK
 39547 00006D1E E91999                  	jmp	SYS_RET_ERR
 39548                                  TransOK:
 39549 00006D21 BE[BE03]                	MOV     SI,OPENBUF
 39550 00006D24 16                      	push	ss
 39551 00006D25 1F                      	pop	ds
 39552                                  ;GotText:
 39553 00006D26 E897A4                  	call	FStrCpy
 39554 00006D29 E90599                  	jmp	SYS_RET_OK
 39555                                  
 39556                                  ;Break   <DriveFromText - return drive number from a text string>
 39557                                  ;----------------------------------------------------------------------------
 39558                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 39559                                  ;   pointer.
 39560                                  ;
 39561                                  ;   Inputs:     DS:SI point to a text string
 39562                                  ;   Outputs:    AL has drive number
 39563                                  ;               DS:SI advanced
 39564                                  ;   Registers modified: AX,SI.
 39565                                  ;----------------------------------------------------------------------------
 39566                                  
 39567                                  DriveFromText:
 39568 00006D2C 30C0                    	XOR     AL,AL                   ;       drive = 0;
 39569                                  	;CMP	BYTE [SI],0		;       if (*s &&
 39570                                  	; 23/09/2023
 39571 00006D2E 3804                    	cmp	[si],al ; 0
 39572 00006D30 74D4                    	jz	short Splice_retn
 39573 00006D32 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 39574 00006D36 75CE                    	jnz	short Splice_retn
 39575 00006D38 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 39576 00006D39 0C20                    	OR      AL,20h
 39577                                  	;sub	al,60h
 39578 00006D3B 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 39579 00006D3D 75C7                    	jnz	short Splice_retn
 39580 00006D3F B0FF                    	MOV	AL,-1                   ; nuke AL...
 39581                                  	; 23/09/2023
 39582                                  	;dec	al ; -1
 39583 00006D41 C3                      	retn				;           }
 39584                                  
 39585                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 39586                                  ;----------------------------------------------------------------------------
 39587                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 39588                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 39589                                  ;
 39590                                  ;   Inputs:     AL has 0-based drive number
 39591                                  ;   Outputs:    ES:DI advanced
 39592                                  ;   Registers modified: AX
 39593                                  ;----------------------------------------------------------------------------
 39594                                  
 39595                                  TextFromDrive:
 39596 00006D42 FEC0                    	INC     AL
 39597                                  TextFromDrive1:
 39598                                  	;add	al,40h
 39599 00006D44 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 39600 00006D46 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 39601 00006D48 AB                      	STOSW
 39602                                  PathPref_retn:
 39603 00006D49 C3                      	retn
 39604                                  
 39605                                  ;Break   <PathPref - see if one path is a prefix of another>
 39606                                  ;----------------------------------------------------------------------------
 39607                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 39608                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 39609                                  ;   prefix: A:\ and A:\FOO
 39610                                  ;
 39611                                  ;   Inputs:     DS:SI potential prefix
 39612                                  ;               ES:DI string
 39613                                  ;   Outputs:    Zero set => prefix found
 39614                                  ;                   DI/SI advanced past matching part
 39615                                  ;               Zero reset => no prefix, DS/SI garbage
 39616                                  ;   Registers modified: CX
 39617                                  ;----------------------------------------------------------------------------
 39618                                  
 39619                                  PathPref:
 39620 00006D4A E88AA4                  	call	DStrLen                 ; get length
 39621 00006D4D 49                      	DEC     CX                      ; do not include nul byte
 39622 00006D4E F3A6                    	REPZ    CMPSB                   ; compare
 39623 00006D50 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 39624 00006D52 50                      	push	ax			; save char register
 39625 00006D53 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 39626 00006D56 E803E2                  	call    PATHCHRCMP              ; is it a path char (Root!)
 39627 00006D59 7406                    	JZ	short Prefix		; yes, match root (I hope)
 39628                                  NotSep:                                 ; 2/13/KK
 39629 00006D5B 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 39630 00006D5E E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 39631                                  Prefix:
 39632 00006D61 58                      	pop	ax			; get back original
 39633 00006D62 C3                      	retn
 39634                                  
 39635                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 39636                                  ;----------------------------------------------------------------------------
 39637                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 39638                                  ;     a path separator.
 39639                                  ;
 39640                                  ;     Input:    DS:SI target string (null terminated)
 39641                                  ;     Output:   Zero set => path separator encountered in string
 39642                                  ;               Zero clear => null encountered
 39643                                  ;     Registers modified: SI
 39644                                  ;----------------------------------------------------------------------------
 39645                                  
 39646                                  ScanPathChar:
 39647 00006D63 AC                      	LODSB                           ; fetch a character
 39648 00006D64 E872FE                  	call    PathSepGotCh
 39649 00006D67 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 39650                                  	;call	PATHCHRCMP              ; path separator?
 39651                                  	;retn
 39652                                  	; 18/12/2022
 39653 00006D69 E9F0E1                  	jmp	PATHCHRCMP
 39654                                  
 39655                                  ;============================================================================
 39656                                  ; FILE.ASM, MSDOS 6.0, 1991
 39657                                  ;============================================================================
 39658                                  ; 14/07/2018 - Retro DOS v3.0
 39659                                  
 39660                                  ; 13/05/2019 - Retro DOS v4.0
 39661                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 39662                                  
 39663                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39664                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 39665                                  
 39666                                  ; MSDOS 2.11
 39667                                  ;BREAK <$Open - open a file handle>
 39668                                  ;----------------------------------------------------------------------------
 39669                                  ;   Assembler usage:
 39670                                  ;           LDS     DX, Name
 39671                                  ;           MOV     AH, Open
 39672                                  ;           MOV     AL, access
 39673                                  ;           INT     int_command
 39674                                  ;
 39675                                  ;       ACCESS          Function
 39676                                  ;       ------          --------
 39677                                  ;       open_for_read   file is opened for reading
 39678                                  ;       open_for_write  file is opened for writing
 39679                                  ;       open_for_both   file is opened for both reading and writing.
 39680                                  ;
 39681                                  ;   Error returns:
 39682                                  ;           AX = error_invalid_access
 39683                                  ;              = error_file_not_found
 39684                                  ;              = error_access_denied
 39685                                  ;              = error_too_many_open_files
 39686                                  ;----------------------------------------------------------------------------
 39687                                  
 39688                                  ; MSDOS 6.0
 39689                                  ;	BREAK <$Open - open a file from a path string>
 39690                                  ;----------------------------------------------------------------------------
 39691                                  ;
 39692                                  ;**	$OPen - Open a File
 39693                                  ;
 39694                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39695                                  ;	file and and returns a handle
 39696                                  ;
 39697                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39698                                  ;		(AL) = open mode
 39699                                  ;	EXIT	'C' clear if OK
 39700                                  ;		  (ax) = file handle
 39701                                  ;		'C' set if error
 39702                                  ;		  (ax) = error code
 39703                                  ;	USES	all
 39704                                  ;
 39705                                  ;----------------------------------------------------------------------------
 39706                                  
 39707                                  ; 13/05/2019 - Retro DOS v4.0
 39708                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39709                                  
 39710                                  _$OPEN:       
 39711 00006D6C 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39712                                  _$Open2:
 39713                                  	;mov	ch,16h
 39714 00006D6E B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39715 00006D70 E85202                  	call	SetAttrib
 39716 00006D73 B9[DB2A]                	mov	cx,DOS_OPEN
 39717                                  
 39718                                  	;xor	ah,ah  ; MSDOS 3.3
 39719                                  
 39720 00006D76 50                      	push	ax
 39721                                  
 39722                                  ;*	General file open/create code. The $CREATE call and the various
 39723                                  ;	$OPEN calls all come here.
 39724                                  ;
 39725                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39726                                  ;	path names, etc., and then dispatch to our individual handlers.
 39727                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39728                                  ;
 39729                                  ;	(TOS) = create mode
 39730                                  ;	(CX) = address of routine to call to do actual function
 39731                                  ;	(DS:DX) = ASCIZ name
 39732                                  ;	SAttrib = Attribute mask
 39733                                  
 39734                                  ;	Get a free SFT and mark it "being allocated"
 39735                                  
 39736                                  AccessFile:
 39737 00006D77 E868A5                  	call	ECritSFT
 39738 00006D7A E8EAF7                  	call	SFNFree			; get a free sfn
 39739 00006D7D E87DA5                  	call	LCritSFT
 39740 00006D80 7214                    	jc	short OpenFailJ		; oops, no free sft's
 39741 00006D82 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39742 00006D87 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39743 00006D8C 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39744                                  
 39745                                  ;	Find a free area in the user's JFN table.
 39746                                  
 39747 00006D91 E8C0F7                  	call	JFNFree			; get a free jfn
 39748 00006D94 7303                    	jnc	short SaveJFN
 39749                                  OpenFailJ:
 39750 00006D96 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 39751                                  
 39752                                  SaveJFN:
 39753 00006D99 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39754 00006D9E 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39755 00006DA3 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39756                                  
 39757                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39758                                  ;	reusing the same JFN.
 39759                                  
 39760 00006DA8 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39761 00006DAD 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39762 00006DB0 89D6                    	MOV	SI,DX			; get name in appropriate place
 39763 00006DB2 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39764 00006DB5 51                      	push	cx			; save routine to call
 39765 00006DB6 E844FC                  	call	TransPath		; convert the path
 39766 00006DB9 5B                      	pop	bx			; (bx) = routine to call
 39767                                  
 39768 00006DBA 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39769                                  	;JC	short OpenCleanJ	; no error, go and open file
 39770                                  	; 14/03/2024
 39771 00006DBF 725C                    	jc	short OpenClean
 39772                                  
 39773 00006DC1 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39774 00006DC7 7404                    	JZ	short SetSearch
 39775                                  	;mov	al,2
 39776 00006DC9 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39777                                  OpenCleanJ:
 39778 00006DCB EB50                    	JMP	short OpenClean
 39779                                  
 39780                                  SetSearch:
 39781 00006DCD 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39782                                  
 39783                                  ;	We need to get the new inheritance bits.
 39784                                  
 39785 00006DCE 31C9                    	xor	cx,cx
 39786                                  	; MSDOS 6.0
 39787                                  	;mov	[si+2],cx ; 0
 39788 00006DD0 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39789                                  	;mov    [si+51],cx ; 0
 39790 00006DD3 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39791                                  	;
 39792 00006DD6 81FB[DB2A]              	CMP	BX,DOS_OPEN
 39793 00006DDA 7509                    	JNZ	short _DoOper
 39794                                  	;test   al,80h
 39795 00006DDC A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39796 00006DDE 7405                    	JZ	short _DoOper ; 10/08/2018
 39797 00006DE0 247F                    	AND	AL,7Fh			; mask off inherit bit
 39798                                  	;mov	cx,1000h
 39799 00006DE2 B90010                  	MOV	CX,sf_no_inherit
 39800                                  _DoOper:
 39801                                  	;; MSDOS 3.3
 39802                                  	;;mov	word [si+2], 0
 39803                                  	;;mov	word [si+33h], 0
 39804                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39805                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39806                                  
 39807                                  	; MSDOS 6.0
 39808                                  ;**	Check if this is an extended open. If so you must set the
 39809                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39810                                  ;	Set_EXT_mode in creat.asm
 39811                                  
 39812                                  	; MSDOS 6.0
 39813                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39814 00006DE5 57                      	push	di
 39815 00006DE6 06                      	push	es
 39816 00006DE7 1E                      	push	ds
 39817 00006DE8 07                      	pop	es
 39818 00006DE9 56                      	push	si
 39819 00006DEA 5F                      	pop	di			; (es:di) = SFT address
 39820 00006DEB E8D9BC                  	call	Set_EXT_mode
 39821                                  	;RESTORE <es, di>
 39822 00006DEE 07                      	pop	es
 39823 00006DEF 5F                      	pop	di
 39824                                  
 39825                                  	;Context DS
 39826 00006DF0 16                      	push	ss
 39827 00006DF1 1F                      	pop	ds	
 39828                                  
 39829 00006DF2 51                      	push	cx
 39830 00006DF3 FFD3                    	CALL	BX			; blam!
 39831 00006DF5 59                      	pop	cx
 39832 00006DF6 C536[9E05]              	LDS	SI,[THISSFT]
 39833 00006DFA 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39834                                  	;jc	short OpenE ; MSDOS 3.3
 39835                                  
 39836                                  ;	The SFT was successfully opened. Remove busy mark.
 39837                                  
 39838                                  OpenOK:
 39839                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39840 00006DFC C7040100                	mov	word [SI],1
 39841                                  	;or	[SI+5],cx
 39842 00006E00 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39843                                  
 39844                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39845                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39846                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39847                                  ;
 39848                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39849                                  ; sharer.
 39850                                  
 39851 00006E03 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39852 00006E07 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39853                                  
 39854 00006E0C 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39855                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39856                                  OpenOkj:
 39857 00006E13 E91B98                  	jmp	SYS_RET_OK		; bye with no errors
 39858                                  
 39859                                  	; MSDOS 6.0
 39860                                  ;Extended Open hooks check
 39861                                  OpenE2:					;AN000;;EO.
 39862 00006E16 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39863 00006E19 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39864 00006E1B EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39865                                  
 39866                                  ;	Extended Open hooks check
 39867                                  ;
 39868                                  ;	AL has error code. Stack has argument to dos_open/dos_create.
 39869                                  
 39870                                  OpenClean:
 39871 00006E1D 5B                      	pop	bx			; clean off stack
 39872                                  OpenE:
 39873                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39874 00006E1E C7040000                	mov	word [SI],0
 39875 00006E22 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39876 00006E27 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39877 00006E2A EB02                    	JMP	SHORT OpenCritLeave
 39878                                  
 39879                                  OpenFail:
 39880 00006E2C FB                      	STI
 39881 00006E2D 59                      	pop	cx			; Clean stack
 39882                                  OpenCritLeave:
 39883 00006E2E 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39884                                  
 39885                                  	; MSDOS 6.0
 39886                                  ; File Tagging DOS 4.00
 39887 00006E35 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39888                                  					;AN000;;FT. code page mismatch
 39889 00006E3B 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39890 00006E3D E90298                  	jmp	From_GetSet		;AN000;;FT. yes
 39891                                  NORERR: 				;AN000;
 39892                                  ; File Tagging DOS 4.00
 39893                                  
 39894 00006E40 E9F797                  	jmp	SYS_RET_ERR		; no free, return error
 39895                                  
 39896                                  ; MSDOS 2.11
 39897                                  ;BREAK <$CREAT - creat a new file and open him for input>
 39898                                  ;----------------------------------------------------------------------------
 39899                                  ;   Assembler usage:
 39900                                  ;           LDS     DX, name
 39901                                  ;           MOV     AH, Creat
 39902                                  ;           MOV     CX, access
 39903                                  ;           INT     21h
 39904                                  ;       ; AX now has the handle
 39905                                  ;
 39906                                  ;   Error returns:
 39907                                  ;           AX = error_access_denied
 39908                                  ;              = error_path_not_found
 39909                                  ;              = error_too_many_open_files
 39910                                  ;----------------------------------------------------------------------------
 39911                                  
 39912                                  ; MSDOS 6.0
 39913                                  ;	BREAK <$Creat - create a brand-new file>
 39914                                  ;----------------------------------------------------------------------------
 39915                                  ;
 39916                                  ;**	$Creat - Create a File
 39917                                  ;
 39918                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39919                                  ;	initial attributes contained in CX
 39920                                  ;
 39921                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39922                                  ;		(CX) = initial attributes
 39923                                  ;	EXIT	'C' set if error
 39924                                  ;		  (ax) = error code
 39925                                  ;		'C' clear if OK
 39926                                  ;		  (ax) = file handle
 39927                                  ;	USES	all
 39928                                  ;
 39929                                  ;----------------------------------------------------------------------------
 39930                                  
 39931                                  _$CREAT:
 39932 00006E43 51                      	push	cx			; Save attributes on stack
 39933 00006E44 B9[B529]                	mov	CX,DOS_CREATE		; routine to call
 39934                                  AccessSet:
 39935                                  	;mov	byte [ss:SATTRIB],6
 39936 00006E47 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39937                                  	; 10/08/2018
 39938 00006E4D E927FF                  	JMP	AccessFile		; use good ol' open
 39939                                  
 39940                                  ; MSDOS 6.0 (MSDOS 3.3)
 39941                                  ;	BREAK <$CHMOD - change file attributes>
 39942                                  ;----------------------------------------------------------------------------
 39943                                  ;
 39944                                  ;**	$CHMOD - Change File Attributes
 39945                                  ;
 39946                                  ;   Assembler usage:
 39947                                  ;	    LDS     DX, name
 39948                                  ;	    MOV     CX, attributes
 39949                                  ;	    MOV     AL,func (0=get, 1=set)
 39950                                  ;	    INT     21h
 39951                                  ;   Error returns:
 39952                                  ;	    AX = error_path_not_found
 39953                                  ;	    AX = error_access_denied
 39954                                  ;
 39955                                  ;----------------------------------------------------------------------------
 39956                                  
 39957                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39958                                  _$CHMOD:
 39959                                  	; 05/08/2018 - Retro DOS v3.0
 39960                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 39961 00006E50 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39962 00006E53 50                      	push	ax
 39963 00006E54 51                      	push	cx			; save function and attributes
 39964 00006E55 89D6                    	MOV	SI,DX			; get things in appropriate places
 39965 00006E57 E8A7FB                  	call	TransPathSet		; get correct path
 39966 00006E5A 59                      	pop	cx
 39967 00006E5B 58                      	pop	ax			; and get function and attrs back
 39968 00006E5C 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39969 00006E5E 16                      	push	ss			; set up for later possible calls
 39970 00006E5F 1F                      	pop	ds
 39971 00006E60 803E[7A05]FF            	CMP	byte [CMETA],-1
 39972 00006E65 754E                    	JNZ	short ChModErr
 39973                                  	;mov	byte [SATTRIB],16h
 39974 00006E67 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39975 00006E6C 2C01                    	SUB	AL,1			; fast way to discriminate
 39976 00006E6E 720B                    	JB	short ChModGet		; 0 -> go get value
 39977 00006E70 7417                    	JZ	short ChModSet		; 1 -> go set value
 39978                                  	;mov	byte [EXTERR_LOCUS],1
 39979 00006E72 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39980                                  	;mov	al,1
 39981 00006E77 B001                    	mov	al,error_invalid_function ; bad value
 39982                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39983                                  chmod_errj:	
 39984                                  	;;jmp	SYS_RET_ERR
 39985                                  	;jmp	short ChModE	
 39986 00006E79 EBC5                    	jmp	short NORERR	; 06/12/2022
 39987                                  ChModGet:
 39988 00006E7B E822BA                  	call	GET_FILE_INFO		; suck out the ol' info
 39989 00006E7E 7237                    	JC	short ChModE		; error codes are already set for ret
 39990 00006E80 E8FE95                  	call	Get_User_Stack		; point to user saved vaiables
 39991                                  	;mov	[SI+4],ax
 39992 00006E83 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39993                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39994                                  OpenOkj2:
 39995                                  	; 17/12/2022
 39996                                  	;;jmp	SYS_RET_OK		; say sayonara
 39997                                  	;jmp	short OpenOkj
 39998                                  	; 25/06/2019
 39999 00006E86 E9AB97                  	jmp	SYS_RET_OK_clc
 40000                                  
 40001                                  ChModSet:
 40002 00006E89 89C8                    	MOV	AX,CX			; get attrs in position
 40003 00006E8B E870BA                  	call	SET_FILE_ATTRIBUTE	; go set
 40004 00006E8E 7227                    	JC	short ChModE		; errors are set
 40005                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 40006                                  	;jmp	SYS_RET_OK
 40007                                  OpenOkj3:
 40008                                  	;jmp	short OpenOkj2
 40009                                  	; 17/12/2022
 40010 00006E90 E99E97                  	jmp	SYS_RET_OK
 40011                                  
 40012                                  ; 17/12/2022
 40013                                  %if 0
 40014                                  ChModErr:
 40015                                  NotFound:	; 17/12/2022
 40016                                  	;mov	al,3
 40017                                  	mov	al,error_path_not_found
 40018                                  ChModE:
 40019                                  UnlinkE:	; 17/12/2022
 40020                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40021                                  	;;jmp	SYS_RET_ERR
 40022                                  	;jmp	short chmod_errj
 40023                                  	; 17/12/2022
 40024                                  	jmp	short NORERR
 40025                                  %endif
 40026                                  
 40027                                  ; 22/05/2019 - Retro DOS v4.0
 40028                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 40029                                  
 40030                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40031                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 40032                                  
 40033                                  ;	BREAK <$UNLINK - delete a file entry>
 40034                                  ;----------------------------------------------------------------------------
 40035                                  ;
 40036                                  ;**	$UNLINK - Delete a File
 40037                                  ;
 40038                                  ;
 40039                                  ;	Assembler usage:
 40040                                  ;	    LDS     DX, name
 40041                                  ;	    IF VIA SERVER DOS CALL
 40042                                  ;	     MOV     CX,SEARCH_ATTRIB
 40043                                  ;	    MOV     AH, Unlink
 40044                                  ;	    INT     21h
 40045                                  ;
 40046                                  ;	ENTRY	(ds:dx) = path name
 40047                                  ;		(cx) = search_attribute, if via server_dos
 40048                                  ;	EXIT	'C' clear if no error
 40049                                  ;		'C' set if error
 40050                                  ;		  (ax) = error code
 40051                                  ;			= error_file_not_found
 40052                                  ;			= error_access_denied
 40053                                  ;
 40054                                  ;----------------------------------------------------------------------------
 40055                                  
 40056                                  _$UNLINK:
 40057 00006E93 51                      	push	cx			; Save possible CX input parm
 40058 00006E94 89D6                    	MOV	SI,DX			; Point at input string
 40059 00006E96 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 40060 00006E99 E865FB                  	call	TransPathSet		; go get normalized path
 40061 00006E9C 59                      	pop	cx
 40062 00006E9D 7216                    	JC	short ChModErr		; badly formed path
 40063 00006E9F 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 40064 00006EA5 750E                    	JNZ	short NotFound
 40065 00006EA7 16                      	push	ss
 40066 00006EA8 1F                      	pop	ds
 40067                                  	;mov	ch,6
 40068 00006EA9 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 40069 00006EAB E81701                  	call	SetAttrib
 40070 00006EAE E8F1B5                  	call	DOS_DELETE		; remove that file
 40071                                  	;JC	short UnlinkE 		; error is there
 40072                                  	; 17/12/2022
 40073 00006EB1 728D                    	jc	short NORERR
 40074                                  
 40075                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40076                                  UnlinkOk:
 40077                                  	;jmp	SYS_RET_OK		; okey doksy
 40078 00006EB3 EBDB                    	jmp	short OpenOkj3
 40079                                  
 40080                                  	; 17/12/2022
 40081                                  ChModErr:	; 17/12/2022
 40082                                  NotFound:
 40083                                  	;mov	al,3
 40084 00006EB5 B003                    	MOV	AL,error_path_not_found
 40085                                  ChModE:		; 17/12/2022
 40086                                  UnlinkE:
 40087                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40088                                  	;;jmp	SYS_RET_ERR		; bye
 40089                                  	;jmp	short ChModE
 40090                                  	; 17/12/2022
 40091 00006EB7 EB87                    	jmp	short NORERR
 40092                                  
 40093                                  ;BREAK <$RENAME - move directory entries around>
 40094                                  ;----------------------------------------------------------------------------
 40095                                  ;
 40096                                  ;   Assembler usage:
 40097                                  ;	    LDS     DX, source
 40098                                  ;	    LES     DI, dest
 40099                                  ;	    IF VIA SERVER DOS CALL
 40100                                  ;	      MOV   CX,SEARCH_ATTRIB
 40101                                  ;	    MOV     AH, Rename
 40102                                  ;	    INT     21h
 40103                                  ;
 40104                                  ;   Error returns:
 40105                                  ;	    AX = error_file_not_found
 40106                                  ;	       = error_not_same_device
 40107                                  ;	       = error_access_denied
 40108                                  ;
 40109                                  ;----------------------------------------------------------------------------
 40110                                  
 40111                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40112                                  _$RENAME:
 40113                                  	; MSDOS 3.3 (& MSDOS 6.0)
 40114 00006EB9 51                      	push	cx
 40115 00006EBA 1E                      	push	ds
 40116 00006EBB 52                      	push	dx			; save source and possible CX arg
 40117 00006EBC 06                      	PUSH	ES
 40118 00006EBD 1F                      	POP	DS			; move dest to source
 40119 00006EBE 89FE                    	MOV	SI,DI			; save for offsets
 40120 00006EC0 BF[3E04]                	MOV	DI,RENBUF
 40121 00006EC3 E83BFB                  	call	TransPathSet		; munge the paths
 40122 00006EC6 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 40123 00006ECB 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 40124 00006ED0 5E                      	pop	si
 40125 00006ED1 1F                      	pop	ds
 40126 00006ED2 59                      	pop	cx			; get back source and possible CX arg
 40127                                  epjc2:	
 40128 00006ED3 72E0                    	JC	short ChModErr		; get old error
 40129 00006ED5 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 40130 00006EDB 75D8                    	JNZ	short NotFound
 40131 00006EDD 51                      	push	cx			; Save possible CX arg
 40132 00006EDE BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 40133 00006EE1 E81DFB                  	call	TransPathSet		; wham
 40134 00006EE4 59                      	pop	cx
 40135                                  	;JC	short epjc2
 40136                                  	; 15/03/2024
 40137 00006EE5 72CE                    	jc	short ChModErr
 40138                                  
 40139 00006EE7 16                      	push	ss
 40140 00006EE8 1F                      	pop	ds
 40141 00006EE9 803E[7A05]FF            	CMP	byte [CMETA],-1
 40142 00006EEE 72C5                    	JB	short NotFound
 40143                                  
 40144                                  	; MSDOS 6.0
 40145                                  	;PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 40146                                  	;PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 40147                                  	; 15/03/2024
 40148                                  	;;;
 40149 00006EF0 C43E[A205]              	les	di,[THISCDS]
 40150 00006EF4 57                      	push	di
 40151 00006EF5 06                      	push	es
 40152                                  	;;;
 40153                                  
 40154 00006EF6 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 40155 00006EF9 16                      	PUSH	SS			   ;AN000;;MS.
 40156 00006EFA 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 40157 00006EFB 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 40158                                  rnloop:					   ;AN000;
 40159 00006EFD E87BFA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 40160 00006F00 720F                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 40161 00006F02 E88AA2                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 40162 00006F05 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 40163 00006F07 FEC0                    	INC	AL			   ;AN000;;MS.	next
 40164 00006F09 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 40165                                  rnerr:					   ;AN000;
 40166                                  	;ADD	SP,4			   ;AN000;;MS. pop thiscds
 40167                                  	; 15/03/2024 (PCDOS 7.1 IBMDOS.COM)
 40168 00006F0B 58                      	pop	ax
 40169 00006F0C 58                      	pop	ax
 40170                                  
 40171                                  	;error	error_current_directory    ;AN000;;MS.
 40172 00006F0D B010                    	mov	al,error_current_directory 
 40173                                  	;jmp	SYS_RET_ERR
 40174                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40175 00006F0F EBA6                    	jmp	short UnlinkE
 40176                                  dorn:
 40177                                  
 40178                                  ; 15/03/2024
 40179                                  %if 0					   ;AN000;
 40180                                  	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 40181                                  	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 40182                                  %endif
 40183 00006F11 16                      	push	ss
 40184 00006F12 1F                      	pop	ds
 40185                                  
 40186                                  ; 15/03/2024
 40187                                  %if 1
 40188 00006F13 8F06[A405]              	pop	word [THISCDS+2]
 40189 00006F17 8F06[A205]              	pop	word [THISCDS]
 40190                                  %endif
 40191                                  	; MSDOS 3.3 (& MSDOS 6.0)
 40192                                  	;mov	ch,16h
 40193 00006F1B B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 40194                                  					; rename appropriate files
 40195 00006F1D E8A500                  	call	SetAttrib
 40196 00006F20 E853B7                  	call	DOS_RENAME		; do the deed
 40197 00006F23 7292                    	JC	short UnlinkE 		; errors
 40198                                  
 40199                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40200                                  	;jmp	SYS_RET_OK
 40201 00006F25 EB8C                    	jmp	short UnlinkOk
 40202                                  
 40203                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40204                                  
 40205                                  ; 14/07/2018 - Retro DOS v3.0
 40206                                  ; MSDOS 3.3 (& MSDOS 6.0)
 40207                                  
 40208                                  ;Break <$CreateNewFile - Create a new directory entry>
 40209                                  ;----------------------------------------------------------------------------
 40210                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 40211                                  ;	was no previous directory entry, and fail if a directory entry with
 40212                                  ;	the same name existed previously.
 40213                                  ;
 40214                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 40215                                  ;		CX contains default file attributes
 40216                                  ;   Outputs:	Carry Clear:
 40217                                  ;		    AX has file handle opened for read/write
 40218                                  ;		Carry Set:
 40219                                  ;		    AX has error code
 40220                                  ;   Registers modified: All
 40221                                  ;----------------------------------------------------------------------------
 40222                                  
 40223                                  _$CreateNewFile:
 40224 00006F27 51                      	push	cx			; Save attributes on stack
 40225 00006F28 B9[7E2A]                	MOV	CX,DOS_Create_New	; routine to call
 40226 00006F2B E919FF                  	JMP	AccessSet		; use good ol' open
 40227                                  
 40228                                  ;**	BinToAscii - convert a number to a string.
 40229                                  ;----------------------------------------------------------------------------
 40230                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 40231                                  ;	This routine is used to generate temp file names so we don't spend
 40232                                  ;	the time and code needed for a true hex number, we just use
 40233                                  ;	A thorugh O.
 40234                                  ;
 40235                                  ;	ENTRY	(ax) = value
 40236                                  ;		(es:di) = destination
 40237                                  ;	EXIT	(es:di) updated by 4
 40238                                  ;	USES	cx, di, flags
 40239                                  ;----------------------------------------------------------------------------
 40240                                  
 40241                                  ; MSDOS 3.3
 40242                                  ;BinToAscii:
 40243                                  ;	mov     cx,4
 40244                                  ;bta5:
 40245                                  ;	push    cx
 40246                                  ;	mov     cl,4
 40247                                  ;	rol     ax,cl
 40248                                  ;	push    ax
 40249                                  ;	and     al,0Fh
 40250                                  ;	add     al,'0'
 40251                                  ;	cmp     al,'9'
 40252                                  ;	jbe     short bta6
 40253                                  ;	add     al,7
 40254                                  ;bta6: 
 40255                                  ;	stosb
 40256                                  ;	pop     ax
 40257                                  ;	pop     cx
 40258                                  ;	loop    bta5
 40259                                  ;	retn
 40260                                  
 40261                                  ; 15/03/2024
 40262                                  ; MSDOS 5.0-6.22 & Windows ME
 40263                                  ; (MSDOS 6.22 MSDOS.SYS - DOSCODE:0B0D9h)
 40264                                  ; (Windows ME IO.SYS - BIOSCODE:0ABA4h)
 40265                                  %if 1
 40266                                  
 40267                                  ; MSDOS 6.0
 40268                                  BinToAscii:
 40269 00006F2E B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 40270                                  bta5:	
 40271 00006F31 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 40272 00006F33 50                      	push	ax			; preserve remainder of digits
 40273 00006F34 240F                    	AND	AL,0Fh			; grab low nibble
 40274 00006F36 0441                    	ADD	AL,'A'			; turn into ascii
 40275 00006F38 AA                      	STOSB				; drop in the character
 40276 00006F39 58                      	pop	ax			; (ax) = shifted number
 40277 00006F3A FECD                    	dec	ch
 40278 00006F3C 75F3                    	jnz	short bta5		; process 4 digits
 40279 00006F3E C3                      	retn
 40280                                  %else
 40281                                  ; 15/03/2024
 40282                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:0C385h
 40283                                  
 40284                                  BinToAscii:
 40285                                  	push	ax		; convert a number to a string ; ax = value
 40286                                  	xchg	ah,al
 40287                                  	;db	0D4h,10h
 40288                                  	aam	10h		; AH = AL / 16 and AL = remainder
 40289                                  	add	ax,4141h	; 'AA'
 40290                                  	stosw
 40291                                  	pop	ax
 40292                                  	;db	0D4h,10h
 40293                                  	aam	10h
 40294                                  	add	ax,4141h	; add ax,'AA'
 40295                                  	stosw
 40296                                  	retn	
 40297                                  %endif
 40298                                  
 40299                                  ;Break	<$CreateTempFile - create a unique name>
 40300                                  ;----------------------------------------------------------------------------
 40301                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 40302                                  ;	Method used is to get the current time, convert to a name and attempt
 40303                                  ;	a create new. Repeat until create new succeeds.
 40304                                  ;
 40305                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 40306                                  ;		CX  contains default attributes
 40307                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 40308                                  ;		AX has handle
 40309                                  ;   Registers modified: all
 40310                                  ;----------------------------------------------------------------------------
 40311                                  
 40312                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40313                                  
 40314                                  _$CreateTempFile:
 40315                                  	;Enter
 40316 00006F3F 55                      	push	bp
 40317 00006F40 89E5                    	mov	bp,sp
 40318                                  
 40319                                  	;LocalVar  EndPtr,DWORD
 40320                                  	;LocalVar  FilPtr,DWORD
 40321                                  	;LocalVar  Attr,WORD
 40322                                  
 40323 00006F42 83EC0A                  	sub	sp,10
 40324                                  
 40325                                  	;test	cx,0FFD8h
 40326 00006F45 F7C1D8FF                	test	CX,~attr_changeable
 40327 00006F49 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 40328                                  
 40329                                  ; We need this "hook" here to detect these cases (like user sets one both of
 40330                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 40331                                  ; below. The code loops on error_access_denied, but if one of the non
 40332                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 40333                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 40334                                  ; need to detect these cases before getting to the loop.
 40335                                  
 40336                                  	;mov	ax, 5
 40337 00006F4B B80500                  	MOV	AX,error_access_denied
 40338 00006F4E EB69                    	JMP	SHORT SETTMPERR
 40339                                  
 40340                                  OKatts:
 40341                                  	;MOV	attr,CX 		; save attribute
 40342 00006F50 894EF6                  	mov     [bp-10],cx
 40343                                  	;MOV	FilPtrL,DX		; pointer to file
 40344 00006F53 8956F8                  	mov	[bp-8],dx
 40345                                  	;MOV	FilPtrH,DS
 40346 00006F56 8C5EFA                  	mov	[bp-6],ds
 40347                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 40348 00006F59 8C5EFE                  	mov	[bp-2],ds
 40349 00006F5C 1E                      	PUSH	DS
 40350 00006F5D 07                      	POP	ES			; destination for nul search
 40351 00006F5E 89D7                    	MOV	DI,DX
 40352 00006F60 89F9                    	MOV	CX,DI
 40353 00006F62 F7D9                    	NEG	CX			; number of bytes remaining in segment
 40354                                  	; MSDOS 6.0
 40355 00006F64 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 40356 00006F66 7501                    	JNZ	short okok		;AN000;MS. no
 40357                                  	;MOV	CX,-1			;AN000;MS.
 40358                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40359                                  	; 17/12/2022
 40360 00006F68 49                      	dec	cx  ; mov cx,-1
 40361                                  	;mov	cx,-1 ; 0FFFh
 40362                                  okok:					;AN000;
 40363 00006F69 31C0                    	XOR	AX,AX			;AN000;
 40364 00006F6B F2AE                    	REPNZ	SCASB			;AN000;
 40365                                  					;AN000;
 40366 00006F6D 4F                      	DEC	DI			; point back to the null
 40367 00006F6E 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 40368 00006F72 E8E7DF                  	call	PATHCHRCMP		; Is it a path separator?
 40369 00006F75 7403                    	JZ	short SETENDPTR		; Yes
 40370                                  STOREPTH:
 40371 00006F77 B05C                    	MOV	AL,'\'
 40372 00006F79 AA                      	STOSB				; Add a path separator (and INC DI)
 40373                                  SETENDPTR:
 40374                                  	;MOV	EndPtrL,DI		; pointer to the tail
 40375 00006F7A 8856FC                  	mov	[bp-4],dl
 40376                                  CreateLoop:
 40377 00006F7D 16                      	push	ss			; let ReadTime see variables
 40378 00006F7E 1F                      	pop	ds
 40379 00006F7F 55                      	push	bp
 40380 00006F80 E8879B                  	call	READTIME		; go get time
 40381 00006F83 5D                      	pop	bp
 40382                                  ;
 40383                                  ; Time is in CX:DX. Go drop it into the string.
 40384                                  ;
 40385                                  	;les	di,EndPtr		; point to the string
 40386 00006F84 C47EFC                  	les	di,[BP-4]
 40387 00006F87 89C8                    	mov	ax,cx
 40388 00006F89 E8A2FF                  	call	BinToAscii		; store upper word
 40389 00006F8C 89D0                    	mov	ax,dx
 40390 00006F8E E89DFF                  	call	BinToAscii		; store lower word
 40391 00006F91 30C0                    	xor	al,al
 40392 00006F93 AA                      	STOSB				; nul terminate
 40393                                  	;LDS	DX,FilPtr		; get name
 40394 00006F94 C556F8                  	lds	dx,[bp-8]
 40395                                  	;MOV	CX,Attr 		; get attr
 40396 00006F97 8B4EF6                  	mov	cx,[bp-10]
 40397 00006F9A 55                      	push	bp
 40398 00006F9B E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 40399 00006F9E 5D                      	pop	bp
 40400 00006F9F 7319                    	JNC	short CreateDone	; failed, go try again
 40401                                  
 40402                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 40403                                  ; error and figure out what to do.
 40404                                  
 40405                                  	;; MSDOS 3.3			; M049 - start
 40406                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 40407                                  ;;	cmp	al,error_file_exists
 40408                                  ;;	jz	short CreateLoop	; file existed => try with new name
 40409                                  ;;	cmp	al,error_access_denied
 40410                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 40411                                  
 40412                                  	; MSDOS 6.0
 40413                                  	;cmp	al,50h
 40414 00006FA1 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 40415 00006FA3 74D8                    	JZ	short CreateLoop	; Y: try again
 40416                                  	;cmp	al,5
 40417 00006FA5 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 40418 00006FA7 7510                    	JNZ	short SETTMPERR		; N: Error out
 40419                                  					; Y: Check to see if we got this due
 40420                                  					;    to the network drive. Note that
 40421                                  					;    the redir will set the exterr
 40422                                  					;    to error_cannot_make if this is 
 40423                                  					;    so. 
 40424 00006FA9 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 40425                                  					; See if it's REALLY an att mismatch
 40426 00006FAF 7408                    	je	short SETTMPERR		; no, network error, stop
 40427                                  ;M070
 40428                                  ; If the user failed on an I24, we do not want to try again
 40429                                  ;
 40430 00006FB1 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 40431                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 40432                                  
 40433                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 40434                                  	; 17/12/2022
 40435 00006FB7 75C4                    	jne	short CreateLoop ; 10/06/2019 
 40436                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40437                                  	;jz	short SETTMPERR
 40438                                  	;jmp	short CreateLoop
 40439                                  
 40440                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 40441                                  					; M049 - end
 40442                                  SETTMPERR:
 40443 00006FB9 F9                      	STC
 40444                                  CreateDone:
 40445                                  	;Leave
 40446 00006FBA 89EC                    	mov	sp,bp
 40447 00006FBC 5D                      	pop	bp
 40448 00006FBD 7203                    	JC	short CreateFail
 40449 00006FBF E96F96                  	jmp	SYS_RET_OK		; success!
 40450                                  CreateFail:
 40451 00006FC2 E97596                  	jmp	SYS_RET_ERR
 40452                                  
 40453                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 40454                                  ;   (CH) or to the value in CL if the current system call is through
 40455                                  ;   serverdoscall.
 40456                                  ;
 40457                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 40458                                  ;		fSharing == TRUE => set sattrib to CL
 40459                                  ;   Outputs:	none
 40460                                  ;   Registers changed:	CX
 40461                                  
 40462                                  SetAttrib:
 40463                                  	;test	byte [SS:FSHARING],-1		;smr;SS Override
 40464                                  	;jnz	short Set
 40465                                  	; 15/03/2024
 40466 00006FC5 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 40467 00006FCB 7502                    	jnz	short Set
 40468                                  
 40469 00006FCD 88E9                    	mov	cl,ch
 40470                                  Set:
 40471 00006FCF 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 40472 00006FD4 C3                      	retn
 40473                                  
 40474                                  ;----------------------------------------------------------------------------
 40475                                  	; 16/03/2024 - Retro DOS v4.2
 40476                                  ext_inval2:
 40477                                  	;mov	al,1
 40478 00006FD5 B001                    	mov	al,error_invalid_function
 40479                                  eo_err:
 40480                                  	;jmp	SYS_RET_ERR
 40481 00006FD7 EBE9                    	jmp	short CreateFail
 40482                                  
 40483                                  ; 14/07/2018 - Retro DOS v3.0
 40484                                  ; MSDOS 6.0
 40485                                  
 40486                                  ; 29/04/2019 - Retro DOS v4.0
 40487                                  
 40488                                  ;Break	<Extended_Open- Extended open the file>
 40489                                  ;----------------------------------------------------------------------------
 40490                                  ; Input: AL= 0 reserved  AH=6CH
 40491                                  ;	 BX= mode
 40492                                  ;	 CL= create attribute  CH=search attribute (from server)
 40493                                  ;	 DX= flag
 40494                                  ;	 DS:SI = file name
 40495                                  ;	 ES:DI = parm list
 40496                                  ;			   DD  SET EA list (-1) null
 40497                                  ;			   DW  n  parameters
 40498                                  ;			   DB  type (TTTTTTLL)
 40499                                  ;			   DW  IOMODE
 40500                                  ; Function: Extended Open
 40501                                  ; Output: carry clear
 40502                                  ;		     AX= handle
 40503                                  ;		     CX=1 file opened
 40504                                  ;			2 file created/opened
 40505                                  ;			3 file replaced/opened
 40506                                  ;	  carry set: AX has error code
 40507                                  ;----------------------------------------------------------------------------
 40508                                  
 40509                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40510                                  _$Extended_Open:			  ;AN000;
 40511                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 40512 00006FD9 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 40513 00006FDE 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 40514                                  	; 17/12/2022
 40515 00006FE5 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 40516                                  	;;test	dx,0FE00h
 40517                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0 ?
 40518 00006FE8 75EB                    	JNZ	short ext_inval2	  ;AN000;EO. no
 40519 00006FEA 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 40520 00006FEC 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 40521 00006FEF 74E4                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 40522                                  	;and	dl,0Fh
 40523 00006FF1 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 40524 00006FF4 80FA02                  	CMP	DL,2			  ;AN000;EO, > 2
 40525 00006FF7 77DC                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 40526                                  	;and	ah,0F0h
 40527 00006FF9 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 40528 00006FFC 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 40529 00006FFF 77D4                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 40530                                  
 40531 00007001 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 40532 00007006 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 40533 0000700B 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 40534 00007010 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 40535 00007015 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 40536 0000701A 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 40537 0000701F 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 40538 00007024 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 40539 00007029 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 40540 0000702B 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 40541                                  ; 16/03/2024
 40542                                  %if 0
 40543                                  	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 40544                                  ext_inval2:				  ;AN000;;EO.
 40545                                  	;mov	al,1
 40546                                  	mov	al,error_invalid_function ;AN000;EO.. invalid function
 40547                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40548                                  eo_err:
 40549                                  	;jmp	SYS_RET_ERR
 40550                                  	jmp	short CreateFail
 40551                                  %endif
 40552                                  
 40553                                  ; 16/03/2024
 40554                                  %if 0
 40555                                  ext_inval_parm:				  ;AN000;EO..
 40556                                  	POP	CX			  ;AN000;EO..  pop up satck
 40557                                  	POP	SI			  ;AN000;EO..
 40558                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 40559                                  	;mov	al,13
 40560                                  	mov	al,error_invalid_data
 40561                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40562                                  	;;jmp	SYS_RET_ERR
 40563                                  	;jmp	short eo_err
 40564                                  	; 17/12/2022
 40565                                  	jmp	short CreateFail
 40566                                  %endif
 40567                                  	; 17/12/2022	
 40568                                  ;error_return:				  ;AN000;EO.
 40569                                  ;	retn				  ;AN000;EO.. return with error
 40570                                  
 40571                                  goopen2:				  ;AN000;
 40572                                  	; 17/12/2022
 40573                                  	;test	bh,20h				 
 40574 0000702D F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 40575                                  	;;test	bx,2000h
 40576                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 40577 00007030 7406                    	JZ	short goopen		  ;AN000;EO.. no
 40578                                  	;or	byte [SS:EXTOPEN_ON],2
 40579 00007032 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 40580                                  goopen:					  ;AN000;
 40581                                  	;or	byte [SS:EXTOPEN_ON],1 
 40582 00007038 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 40583                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 40584                                  	; 18/12/2022
 40585 0000703E 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 40586                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 40587 00007044 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 40588 0000704A 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 40589 0000704C E8D8FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 40590 0000704F 723F                    	JC	short error_return	  ;AN000;;EO. error
 40591                                  
 40592 00007051 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40593 00007057 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40594                                  
 40595                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40596 00007059 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. created/opened;smr;SS Override
 40597 00007060 EB7F                    	JMP	short setXAttr ; 16/03/2024 ;AN000;;EO. set XAs
 40598                                  
 40599                                  	; 17/12/2022
 40600                                  ;ok_return2:
 40601                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 40602                                  
 40603                                  chknext:
 40604                                  	; 17/12/2022
 40605 00007062 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 40606                                  	;;test	word [SS:EXTOPEN_FLAG],1
 40607                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 40608 00007068 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 40609 0000706A E8D6FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 40610 0000706D 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 40611 0000706F 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40612 00007075 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40613 00007077 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 40614 0000707E 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 40615 00007084 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 40616 00007086 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 40617 0000708D EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40618                                  
 40619                                  error_return2:
 40620 0000708F F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 40621                                  error_return:	 ; 17/12/2022
 40622 00007090 C3                      	retn				  ;AN000;;EO. return with error
 40623                                  
 40624                                  	; 17/12/2022
 40625                                  ok_return:
 40626                                  ok_return2:
 40627 00007091 E99D95                  	jmp	SYS_RET_OK
 40628                                  
 40629                                  exist_open:				  ;AN000;
 40630                                  	;test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 40631                                  	;jz	short noserver		  ;AN000;;EO. no
 40632                                  	; 16/03/2024
 40633                                  	;;;
 40634 00007094 36803E[7205]00          	cmp	byte [ss:FSHARING],0	; server doscall?
 40635 0000709A 7402                    	jz	short noserver		; no
 40636                                  	;;;
 40637 0000709C 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 40638                                  noserver:
 40639 0000709E E8CDFC                  	call	_$Open2			  ;AN000;;EO. do open
 40640 000070A1 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 40641 000070A3 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 40642 000070A9 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 40643                                  local_extopen:
 40644                                  	;cmp	ax,2
 40645 000070AB 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 40646 000070AE 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 40647                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 40648                                  	; 17/12/2022
 40649 000070B0 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 40650                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 40651                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 40652                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 40653                                  	; 17/12/2022
 40654 000070B6 7446                    	jz	short extexit ; 10/06/2019
 40655                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40656                                  	;jnz	short do_creat
 40657                                  	;jmp	short extexit
 40658                                  do_creat:
 40659 000070B8 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 40660 000070BD 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 40661 000070C2 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 40662 000070C4 E87CFD                  	call	_$CREAT			  ;AN000;;EO. do create
 40663 000070C7 7235                    	JC	short extexit 		  ;AN000;;EO. error
 40664                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40665 000070C9 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40666                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 40667 000070D0 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40668                                  
 40669                                  ext_ok:
 40670 000070D2 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 40671 000070D8 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 40672                                  	;mov	word [SS:EXTOPEN_FLAG],1
 40673 000070DA 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 40674                                  setXAttr:
 40675                                  	; 29/04/2019
 40676 000070E1 50                      	push	ax
 40677 000070E2 E89C93                  	call	Get_User_Stack		  ;AN000;;EO.
 40678 000070E5 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 40679                                  	;mov	[si+4],ax
 40680 000070E9 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 40681 000070EC 58                      	pop	ax			  ;AN000;;EO.
 40682 000070ED 8904                    	mov	[si],ax
 40683                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 40684                                  	; 17/12/2022
 40685 000070EF EBA0                    	jmp	short ok_return
 40686                                  ;ok_return:				  ;AN000;
 40687                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 40688                                  
 40689                                  ; 16/03/2024
 40690                                  %if 0
 40691                                  extexit2:				  ;AN000; ERROR RECOVERY
 40692                                  	POP	BX			  ;AN000;EO. close the handle
 40693                                  	PUSH	AX			  ;AN000;EO. save error code from set XA
 40694                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 40695                                  	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40696                                  					  ;AN000;EO. from create;smr;SS Override
 40697                                  	JNZ	short justopen		  ;AN000;EO.
 40698                                  	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 40699                                  	LDS	DX,[SI]			  ;AN000;EO.
 40700                                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 40701                                  	JMP	SHORT reserror		  ;AN000;EO.
 40702                                  
 40703                                  justopen:				  ;AN000;
 40704                                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 40705                                  reserror:				  ;AN000;
 40706                                  	POP	AX			  ;AN000;EO. restore error code from set XA
 40707                                  
 40708                                  	JMP	SHORT extexit		  ;AN000;EO.
 40709                                  
 40710                                  ext_file_unfound:			  ;AN000;
 40711                                  	;mov	ax,2
 40712                                  	MOV	AX,error_file_not_found   ;AN000;EO.
 40713                                  	JMP	SHORT extexit		  ;AN000;EO.
 40714                                  ext_inval:				  ;AN000;
 40715                                  	;mov	ax,1
 40716                                  	MOV	AX,error_invalid_function ;AN000;EO.
 40717                                  
 40718                                  lockoperr:	; 17/12/2022
 40719                                  extexit:
 40720                                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 40721                                  
 40722                                  %endif
 40723                                  
 40724                                  ;============================================================================
 40725                                  ; LOCK.ASM, MSDOS 6.0, 1991
 40726                                  ;============================================================================
 40727                                  ; 14/07/2018 - Retro DOS v3.0
 40728                                  ; 22/05/2019 - Retro DOS v4.0
 40729                                  
 40730                                  ;BREAK <$LockOper - Lock Calls>
 40731                                  ;----------------------------------------------------------------------------
 40732                                  ;
 40733                                  ;   Assembler usage:
 40734                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 40735                                  ;	    MOV     CX, OffsetHigh
 40736                                  ;	    MOV     DX, OffsetLow
 40737                                  ;	    MOV     SI, LengthHigh
 40738                                  ;	    MOV     DI, LengthLow
 40739                                  ;	    MOV     AH, LockOper
 40740                                  ;	    MOV     AL, Request
 40741                                  ;	    INT     21h
 40742                                  ;
 40743                                  ;   Error returns:
 40744                                  ;	    AX = error_invalid_handle
 40745                                  ;	       = error_invalid_function
 40746                                  ;	       = error_lock_violation
 40747                                  ;
 40748                                  ;   Assembler usage:
 40749                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 40750                                  ;
 40751                                  ;				    0? lock all
 40752                                  ;				    8? lock write
 40753                                  ;				    ?2 lock multiple
 40754                                  ;				    ?3 unlock multiple
 40755                                  ;				    ?4 lock/read
 40756                                  ;				    ?5 write/unlock
 40757                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 40758                                  ;	    MOV     BX, Handle
 40759                                  ;	    MOV     CX, count or size
 40760                                  ;	    LDS     DX, buffer
 40761                                  ;	    INT     21h
 40762                                  ;
 40763                                  ;   Error returns:
 40764                                  ;	    AX = error_invalid_handle
 40765                                  ;	       = error_invalid_function
 40766                                  ;	       = error_lock_violation
 40767                                  ;
 40768                                  ;----------------------------------------------------------------------------
 40769                                  
 40770                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40771                                  
 40772                                  	; 17/03/2024
 40773                                  	; 16/03/2024 - Retro DOS v4.2
 40774                                  _$LockOper:
 40775 000070F1 3C01                    	CMP	AL,1
 40776 000070F3 770C                    	JA	short lock_bad_func
 40777                                  
 40778 000070F5 57                      	PUSH	DI			       ; Save LengthLow
 40779 000070F6 E81BF4                  	call	SFFromHandle		       ; ES:DI -> SFT
 40780 000070F9 731E                    	JNC	short lock_do 		       ; have valid handle
 40781 000070FB 5F                      	POP	DI			       ; Clean stack
 40782                                  	;mov	al,6
 40783 000070FC B006                    	mov	al,error_invalid_handle
 40784                                  
 40785                                  	; 16/03/2024
 40786                                  extexit:
 40787                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40788                                  lockoperr:
 40789 000070FE E93995                  	jmp	SYS_RET_ERR
 40790                                  	; 17/12/2022
 40791                                  	;jmp	short lockoperr ; jmp SYS_RET_ERR
 40792                                  
 40793                                  lock_bad_func:
 40794                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40795 00007101 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40796                                  	;mov	al,1
 40797 00007107 B001                    	mov	al,error_invalid_function
 40798                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40799                                  lockoperrj:
 40800                                  	;jmp	SYS_RET_ERR
 40801 00007109 EBF3                    	jmp	short lockoperr
 40802                                  
 40803                                  	; 22/05/2019 - Retro DOS v4.0
 40804                                  
 40805                                  	; MSDOS 6.0 
 40806                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40807                                  ; Dead code deleted, MD, 23 Mar 90
 40808                                  
 40809                                  ;lock_do:
 40810                                  ;	; MSDOS 3.3
 40811                                  ;	or	al,al
 40812                                  ;	pop	ax
 40813                                  ;	jz	short DOS_Lock
 40814                                  ;DOS_Unlock:
 40815                                  ;	;test	word [es:di+5],8000h
 40816                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40817                                  ;	JZ	short LOCAL_UNLOCK
 40818                                  ;	push    ax
 40819                                  ;	mov     ax,110Bh
 40820                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40821                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40822                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40823                                  ;			; SFT DPB field -> DPB of drive containing file
 40824                                  ;			; Return: CF set error
 40825                                  ;	pop     bx
 40826                                  ;	jmp     short ValChk
 40827                                  ;
 40828                                  ;LOCAL_UNLOCK:
 40829                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40830                                  ;ValChk:
 40831                                  ;	JNC	short Lock_OK
 40832                                  ;lockerror:
 40833                                  ;	jmp	SYS_RET_ERR
 40834                                  ;Lock_OK:
 40835                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40836                                  ;	jmp	SYS_RET_OK
 40837                                  ;DOS_Lock:
 40838                                  ;	;test	word [es:di+5],8000h
 40839                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40840                                  ;	JZ	short LOCAL_LOCK
 40841                                  ;	;CallInstall NET_XLock,MultNET,10
 40842                                  ;	mov     ax, 110Ah
 40843                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40844                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40845                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40846                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40847                                  ;			; Return: CF set error
 40848                                  ;	JMP	short ValChk
 40849                                  ;
 40850                                  ;LOCAL_LOCK:
 40851                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40852                                  ;	JMP	short ValChk
 40853                                  
 40854                                  ; 17/12/2022
 40855                                  LOCAL_UNLOCK:
 40856                                  	; MSDOS 3.3
 40857                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40858                                  	; MSDOS 6.0
 40859 0000710B FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40860                                  ValChk:
 40861 0000710F 7302                    	JNC	short Lock_OK
 40862                                  lockerror:
 40863                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40864                                  	;;jmp	SYS_RET_ERR
 40865                                  	;jmp	short lockoperrj
 40866                                  	; 17/12/2022
 40867 00007111 EBEB                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40868                                  Lock_OK:
 40869                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40870                                  	; 10/06/2019
 40871 00007113 A1[0C06]                	mov	ax,[TEMP_VAR]
 40872 00007116 E91895                  	jmp	SYS_RET_OK
 40873                                  
 40874                                  	; 22/05/2019
 40875                                  lock_do:
 40876                                  	; MSDOS 6.0
 40877 00007119 89C3                    	MOV	BX,AX				; save AX
 40878 0000711B BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40879                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40880                                  	;;mov	[bp+0],dx
 40881                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40882                                  	; 15/12/2022
 40883 0000711E 895600                  	mov	[bp],dx
 40884                                  	;mov	[bp+2],cx
 40885 00007121 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40886                                  
 40887                                  	; 16/03/2024
 40888                                  	;POP	CX				; get low length
 40889                                  	;;mov	[bp+4],cx
 40890                                  	;MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40891 00007124 8F4604                  	pop	word [bp+LockBuf.Lock_length]
 40892                                  
 40893                                  	;mov	[bp+6],si
 40894 00007127 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40895 0000712A B90100                  	MOV	CX,1				; one range
 40896                                  
 40897                                  ;	PUSH	CS				;
 40898                                  ;	POP	DS				; DS:DX points to
 40899                                  
 40900 0000712D 16                      	push	ss
 40901 0000712E 1F                      	pop	ds
 40902                                  
 40903 0000712F 89EA                    	MOV	DX,BP				; Lock_Buffer
 40904                                  	;test	al,1
 40905 00007131 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40906                                  	;JNZ	short DOS_Unlock		; yes
 40907                                  	;JMP	short DOS_Lock			; function 0
 40908                                  	; 17/12/2022
 40909                                  	; 10/06/2019
 40910 00007133 740E                    	jz	short DOS_Lock
 40911                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40912                                  	;JNZ	short DOS_Unlock
 40913                                  	;JMP	short DOS_Lock
 40914                                  
 40915                                  DOS_Unlock:
 40916                                  	;;test	word [es:di+5],8000h
 40917                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40918 00007135 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40919 0000713A 74CF                    	JZ	short LOCAL_UNLOCK
 40920                                  
 40921                                  ; 17/03/2024
 40922                                  ;lock_unlock: ; 22/05/2019
 40923                                  
 40924                                  	;CallInstall Net_Xlock,MultNET,10
 40925                                  ;	
 40926                                  ;	; MSDOS 3.3
 40927                                  ;	;mov     ax,110Bh
 40928                                  ;	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40929                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40930                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40931                                  ;			; SFT DPB field -> DPB of drive containing file
 40932                                  ;			; Return: CF set error
 40933                                  
 40934                                  ; 17/03/2024 - Retro DOS v4.2
 40935                                  lock_unlock:
 40936                                  
 40937                                  	; MSDOS 6.0
 40938 0000713C B80A11                  	mov     ax,110Ah
 40939 0000713F CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40940                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40941                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40942                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40943                                  			; Return: CF set error
 40944                                  
 40945 00007141 EBCC                    	JMP	SHORT ValChk
 40946                                  
 40947                                  ; 17/12/2022
 40948                                  %if 0
 40949                                  LOCAL_UNLOCK:
 40950                                  	; MSDOS 3.3
 40951                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40952                                  	; MSDOS 6.0
 40953                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40954                                  ValChk:
 40955                                  	JNC	short Lock_OK
 40956                                  lockerror:
 40957                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40958                                  	;jmp	SYS_RET_ERR
 40959                                  	jmp	short lockoperrj
 40960                                  Lock_OK:
 40961                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40962                                  	; 10/06/2019
 40963                                  	mov	ax,[TEMP_VAR]
 40964                                  	jmp	SYS_RET_OK
 40965                                  %endif
 40966                                  
 40967                                  DOS_Lock:
 40968                                  	;;test	word [es:di+5],8000h
 40969                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40970 00007143 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40971                                  	;JZ	short LOCAL_LOCK
 40972                                  	; 17/03/2024
 40973 00007148 75F2                    	jnz	short lock_unlock
 40974                                  
 40975                                  	;CallInstall NET_XLock,MultNET,10
 40976                                  
 40977 0000714A B80A11                  	mov     ax,110Ah
 40978 0000714D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40979                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40980                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40981                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40982                                  			; Return: CF set error
 40983                                  
 40984 0000714F EBBE                    	JMP	short ValChk
 40985                                  
 40986                                  LOCAL_LOCK:
 40987                                  	; MSDOS 3.3
 40988                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40989                                  	; MSDOS 6.0
 40990 00007151 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40991                                  
 40992 00007155 EBB8                    	JMP	short ValChk
 40993                                  
 40994                                  ; 14/07/2018 - Retro DOS v3.0
 40995                                  ; LOCK_CHECK
 40996                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40997                                  
 40998                                  ;----------------------------------------------------------------------------
 40999                                  ; Inputs:
 41000                                  ;	Outputs of SETUP
 41001                                  ;	[USER_ID] Set
 41002                                  ;	[PROC_ID] Set
 41003                                  ; Function:
 41004                                  ;	Check for lock violations on local I/O
 41005                                  ;	Retries are attempted with sleeps in between
 41006                                  ; Outputs:
 41007                                  ;    Carry clear
 41008                                  ;	Operation is OK
 41009                                  ;    Carry set
 41010                                  ;	A lock violation detected
 41011                                  ; Outputs of SETUP preserved
 41012                                  ;----------------------------------------------------------------------------
 41013                                  
 41014                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41015                                  	; 22/05/2019 - Retro DOS v4.0
 41016                                  LOCK_CHECK:
 41017 00007157 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 41018                                  LockRetry:
 41019 0000715B 53                      	push	bx		; save regs
 41020 0000715C 50                      	push	ax ; MSDOS 6.0
 41021                                  
 41022                                  	;MSDOS 3.3
 41023                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 41024                                  	;MSDOS 6.0
 41025 0000715D FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 41026                                  
 41027 00007161 58                      	pop	ax ; MSDOS 6.0
 41028 00007162 5B                      	pop	bx		; restrore regs
 41029 00007163 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 41030                                  LockN:
 41031 00007165 E87CA0                  	call	Idle		; wait a while
 41032 00007168 4B                      	DEC	BX		; remember a retry
 41033 00007169 75F0                    	JNZ	short LockRetry	; more retries left...
 41034 0000716B F9                      	STC
 41035                                  lc_ret_label:
 41036 0000716C C3                      	retn
 41037                                  
 41038                                  ; 14/07/2018 - Retro DOS v3.0
 41039                                  ; LOCK_VIOLATION
 41040                                  ;MSDOS 6.0 (& MSDOS 3.3)
 41041                                  
 41042                                  ;----------------------------------------------------------------------------
 41043                                  ; Inputs:
 41044                                  ;	[THISDPB] set
 41045                                  ;	[READOP] indicates whether error on read or write
 41046                                  ; Function:
 41047                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 41048                                  ; Outputs:
 41049                                  ;	Carry set if user says FAIL, causes error_lock_violation
 41050                                  ;	Carry clear if user wants a retry
 41051                                  ;
 41052                                  ; DS, ES, DI, CX preserved, others destroyed
 41053                                  ;----------------------------------------------------------------------------
 41054                                  
 41055                                  LOCK_VIOLATION:
 41056 0000716D 1E                      	PUSH	DS
 41057 0000716E 06                      	PUSH	ES
 41058 0000716F 57                      	PUSH	DI
 41059 00007170 51                      	PUSH	CX
 41060                                  	;mov	ax,21h
 41061 00007171 B82100                  	MOV	AX,error_lock_violation
 41062                                  	;mov	byte [ALLOWED],18h
 41063 00007174 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 41064 00007179 C42E[8A05]              	LES	BP,[THISDPB]
 41065 0000717D BF0100                  	MOV	DI,1		; Fake some registers
 41066 00007180 89F9                    	MOV	CX,DI
 41067                                  	;mov	dx,[es:bp+11]
 41068 00007182 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 41069 00007186 E838E0                  	call	HARDERR
 41070 00007189 59                      	POP	CX
 41071 0000718A 5F                      	POP	DI
 41072 0000718B 07                      	POP	ES
 41073 0000718C 1F                      	POP	DS
 41074 0000718D 3C01                    	CMP	AL,1
 41075 0000718F 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 41076 00007191 F9                      	STC
 41077 00007192 C3                      	retn
 41078                                  
 41079                                  ; 14/07/2018 - Retro DOS v3.0
 41080                                  
 41081                                  ;----------------------------------------------------------------------------
 41082                                  
 41083                                  ;	do a retz to return error
 41084                                  
 41085                                  	; 22/05/2019 - Retro DOS v4.0
 41086                                  CheckShare:
 41087                                  	; MSDOS 3.3
 41088                                  	;cmp	byte [cs:fShare],0
 41089                                  	;retn
 41090                                  
 41091                                  	; MSDOS 6.0
 41092 00007193 1E                      	push	ds			;smr;
 41093                                  	;getdseg <ds>			; ds -> dosdata
 41094 00007194 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 41095 00007199 803E[0303]00            	cmp	byte [fShare],0
 41096 0000719E 1F                      	pop	ds			;smr;
 41097 0000719F C3                      	retn
 41098                                  	
 41099                                  ;============================================================================
 41100                                  ; SHARE.ASM, MSDOS 6.0, 1991
 41101                                  ;============================================================================
 41102                                  ; 14/07/2018 - Retro DOS v3.0
 41103                                  ; 22/05/2019 - Retro DOS v4.0
 41104                                  
 41105                                  ; SHARE_CHECK
 41106                                  ;----------------------------------------------------------------------------
 41107                                  ; Inputs:
 41108                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 41109                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 41110                                  ;       [WFP_START] has full path of name
 41111                                  ;       [USER_ID] Set
 41112                                  ;       [PROC_ID] Set
 41113                                  ; Function:
 41114                                  ;       Check for sharing violations on local file/device access
 41115                                  ; Outputs:
 41116                                  ;    Carry clear
 41117                                  ;       Sharing approved
 41118                                  ;    Carry set
 41119                                  ;       A sharing violation detected
 41120                                  ;           AX is error code
 41121                                  ; USES    ALL but DS
 41122                                  ;----------------------------------------------------------------------------
 41123                                  
 41124                                  	; 22/05/2019 - Retro DOS v4.0
 41125                                  SHARE_CHECK:
 41126                                  	; 26/07/2019
 41127 000071A0 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 41128                                  shchk_retn:
 41129 000071A4 C3                      	retn
 41130                                  
 41131                                  ; SHARE_VIOLATION
 41132                                  ;----------------------------------------------------------------------------
 41133                                  ; Inputs:
 41134                                  ;       [THISDPB] Set
 41135                                  ;       AX has error code
 41136                                  ; Function:
 41137                                  ;       Handle Sharing errors
 41138                                  ; Outputs:
 41139                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 41140                                  ;       Carry clear if user wants a retry
 41141                                  ;
 41142                                  ; DS, ES, DI preserved, others destroyed
 41143                                  ;----------------------------------------------------------------------------
 41144                                  
 41145                                  SHARE_VIOLATION:
 41146 000071A5 1E                      	PUSH    DS
 41147 000071A6 06                      	PUSH	ES
 41148 000071A7 57                      	PUSH    DI
 41149 000071A8 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 41150                                  	;mov	byte [ALLOWED],18h
 41151 000071AD C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 41152 000071B2 C42E[8A05]              	LES     BP,[THISDPB]
 41153 000071B6 BF0100                  	MOV     DI,1			; Fake some registers
 41154 000071B9 89F9                    	MOV     CX,DI
 41155                                  	;mov	dx,[es:bp+17]
 41156 000071BB 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 41157 000071BF E8FFDF                  	call	HARDERR
 41158 000071C2 5F                      	POP     DI
 41159 000071C3 07                      	POP	ES
 41160 000071C4 1F                      	POP     DS
 41161 000071C5 3C01                    	CMP     AL,1
 41162 000071C7 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 41163 000071C9 F9                      	STC
 41164 000071CA C3                      	retn
 41165                                  
 41166                                  ;----------------------------------------------------------------------------
 41167                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 41168                                  ;       NOT perform a close, it merely asserts that the sharing information
 41169                                  ;       for the SFT/UID/PID may be safely released.
 41170                                  ;
 41171                                  ;   Inputs:     ES:DI points to an SFT
 41172                                  ;   Outputs:    None
 41173                                  ;   Registers modified: all except DS,ES,DI
 41174                                  ;----------------------------------------------------------------------------
 41175                                  
 41176                                  ShareEnd:
 41177                                  	; 26/07/2019
 41178 000071CB FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 41179 000071CF C3                      	retn
 41180                                  
 41181                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 41182                                  ;----------------------------------------------------------------------------
 41183                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 41184                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 41185                                  ;
 41186                                  ;   Inputs:     ThisSFT points to the SFT
 41187                                  ;               WFP_Start points to the WFP
 41188                                  ;   Outputs:    Carry clear => successful entry
 41189                                  ;               Carry set => failed system call
 41190                                  ;   Registers modified: all
 41191                                  ;----------------------------------------------------------------------------
 41192                                  
 41193                                  ShareEnter:
 41194 000071D0 51                      	push	cx
 41195                                  retry:
 41196 000071D1 8B0E[1A00]              	mov     cx,[RetryCount]
 41197                                  attempt:
 41198 000071D5 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 41199 000071D9 31C0                    	XOR     AX,AX
 41200                                   	;mov	[es:di+51],ax
 41201 000071DB 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 41202 000071DF 51                      	push	cx
 41203 000071E0 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 41204 000071E3 59                      	pop	cx
 41205 000071E4 730A                    	jnc	short done		; success, let the user see this
 41206 000071E6 E8FB9F                  	call	Idle                    ; wait a while
 41207 000071E9 E2EA                    	loop    attempt                 ; go back for another attempt
 41208 000071EB E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 41209 000071EE 73E1                    	jnc	short retry		; user said to retry, go do it
 41210                                  done:
 41211 000071F0 59                      	pop	cx
 41212 000071F1 C3                      	retn
 41213                                  
 41214                                  ;============================================================================
 41215                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 41216                                  ;============================================================================
 41217                                  ; 29/04/2019 - Retro DOS 4.0
 41218                                  
 41219                                  ;** EXEPATCH.ASM 
 41220                                  ;----------------------------------------------------------------------------
 41221                                  ;	Contains the foll:
 41222                                  ;
 41223                                  ;		- code to find and overlay buggy unpack code
 41224                                  ;		- new code to be overlayed on buggy unpack code 
 41225                                  ;		- old code sequence to identify buggy unpack code
 41226                                  ;
 41227                                  ;	Revision history:
 41228                                  ;
 41229                                  ;		Created: 5/14/90
 41230                                  ;----------------------------------------------------------------------------
 41231                                  
 41232                                  ;----------------------------------------------------------------------------
 41233                                  ;
 41234                                  ; M020 : Fix for rational bug - for details see routine header
 41235                                  ; M028 : 4b04 implementation
 41236                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 41237                                  ; M032 : set turnoff bit only if DOS in HMA.
 41238                                  ; M033 : if IP < 2 then not exepacked.
 41239                                  ; M046 : support for a 4th version of exepacked files.
 41240                                  ; M068 : support for copy protected apps.
 41241                                  ; M071 : use A20OFF_COUNT of 10.
 41242                                  ;
 41243                                  ;----------------------------------------------------------------------------
 41244                                  
 41245                                  PATCH1_COM_OFFSET	EQU	06CH
 41246                                  PATCH1_OFFSET		EQU	028H
 41247                                  PATCH1_CHKSUM		EQU	0EF4EH
 41248                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 41249                                  
 41250                                  PATCH2_COM_OFFSET	EQU	076H
 41251                                  PATCH2_OFFSET		EQU	032H
 41252                                  
 41253                                  	; The strings that start at offset 076h have two possible 
 41254                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 41255                                  
 41256                                  PATCH2_CHKSUM		EQU	78B2H
 41257                                  CHKSUM2_LEN		EQU	119H/2
 41258                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 41259                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 41260                                  
 41261                                  PATCH3_COM_OFFSET	EQU	074H
 41262                                  PATCH3_OFFSET		EQU	032H
 41263                                  PATCH3_CHKSUM		EQU	4EDEH
 41264                                  CHKSUM3_LEN		EQU	117H/2
 41265                                  
 41266                                  ;**	Data structure passed for ExecReady call
 41267                                  ;
 41268                                  ;struc ERStruc
 41269                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 41270                                  ; .ER_Flags:	resw	1
 41271                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 41272                                  ; .ER_PSP:	resw	1	; PSP of the program
 41273                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 41274                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 41275                                  ; .size:
 41276                                  ;endstruc
 41277                                  
 41278                                  ;DOSCODE SEGMENT
 41279                                  
 41280                                  	; 22/05/2019 - Retro DOS v4.0
 41281                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 41282                                  
 41283                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41284                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 41285                                  
 41286                                  ; M028 - BEGIN
 41287                                  
 41288                                  ;--------------------------------------------------------------------------
 41289                                  ;
 41290                                  ;	Procedure Name		: ExecReady
 41291                                  ;
 41292                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 41293                                  ;
 41294                                  ;--------------------------------------------------------------------------
 41295                                  
 41296                                  ExecReady:
 41297 000071F2 89D6                    	mov	si,dx			; move the pointer into a friendly one
 41298                                  	;;test	word [si+2],1
 41299                                  	; 17/12/2022
 41300 000071F4 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 41301                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 41302 000071F8 7413                    	jz	short er_setver		; only setver for .COM files
 41303                                  
 41304                                  	;mov	ax,[si+8]
 41305 000071FA 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 41306 000071FD 83C010                  	add	ax,10h
 41307 00007200 8EC0                    	mov	es,ax
 41308                                  
 41309                                  	;mov	cx,[si+10]
 41310 00007202 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 41311                                  	;mov	ax,[si+12]	; 11/04/2024
 41312 00007205 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 41313                                  
 41314                                  	;call	[ss:FixExePatch]
 41315 00007208 36FF16[1212]            	call	word [ss:FixExePatch] ; 28/12/2022
 41316                                  	
 41317                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41318                                  	;call	[ss:Rational386PatchPtr]
 41319                                  
 41320                                  er_setver:
 41321                                  	;;test	word [si+2],2		; Q: is this an overlay
 41322                                  	; 17/12/2022
 41323 0000720D F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 41324                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 41325 00007211 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 41326                                  					; N: set up lie version first
 41327 00007213 1E                      	push	ds
 41328 00007214 56                      	push	si
 41329                                  	;lds	si,[si+4]
 41330 00007215 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 41331 00007218 E8C1ED                  	call	Scan_Execname1
 41332 0000721B E8D2ED                  	call	Scan_Special_Entries
 41333 0000721E 5E                      	pop	si
 41334 0000721F 1F                      	pop	ds
 41335                                  	;mov	es,[si+8]
 41336 00007220 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 41337 00007223 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 41338 00007227 26A34000                	mov	[es:PDB.Version],ax
 41339                                  
 41340                                  er_chkdoshi:
 41341 0000722B 36803E[1112]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 41342 00007231 741F                    	je	short er_done		; M032: N: done
 41343                                  
 41344                                  					; M068 - Start
 41345                                  	;mov	ax,[si+8]
 41346 00007233 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 41347                                  
 41348                                  	;or	byte [ss:DOS_FLAG],4
 41349 00007236 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 41350                                  					; ah = 25 & ah= 49. See dossym.inc 
 41351                                  					; under TAG M003 & M009 for 
 41352                                  					; explanation
 41353                                  	;;test	word [si+2],1
 41354                                  	; 17/12/2022
 41355 0000723C F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 41356                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 41357 00007240 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 41358                                  					;    a20off_psp and ret
 41359 00007242 1E                         	push	ds
 41360 00007243 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 41361 00007245 E87E02                  	call	IsCopyProt		; check if copy protected
 41362 00007248 1F                      	pop	ds
 41363                                  
 41364                                  er_setA20:
 41365                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 41366                                  	; is non-zero at this point it indicates that the A20 is to be 
 41367                                  	; turned off for that many int 21 calls made by the app. In 
 41368                                  	; addition the A20 has to be turned off when we exit from this 
 41369                                  	; call. Hence the inc.
 41370                                  
 41371 00007249 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 41372 0000724E 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 41373                                  					; turned OFF.
 41374                                  er_done:				; M068 - End
 41375 00007252 31C0                    	xor	ax,ax
 41376 00007254 C3                      	retn
 41377                                  
 41378                                  ; M028 - END
 41379                                  
 41380                                  ; 23/03/2024
 41381                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41382                                  %if 0
 41383                                  
 41384                                  ;----------------------------------------------------------------------------
 41385                                  ;
 41386                                  ; procedure : Rational386Patch
 41387                                  ;
 41388                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 41389                                  ; 386 registers (usually just the high word of 32 bit registers) during
 41390                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 41391                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 41392                                  ;
 41393                                  ; This routine applies patches to the Rational DOS Extender to work around
 41394                                  ; most of the register trashing bugs.
 41395                                  ;
 41396                                  ; Note that there are additional register trashing bugs not fixed by these
 41397                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 41398                                  ; may be modified on interrupts.
 41399                                  ;
 41400                                  ; There are two different Rational DOS Extender patchs in this module.
 41401                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 41402                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 41403                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 41404                                  ; or not.
 41405                                  ;
 41406                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 41407                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 41408                                  ; running in the HMA.
 41409                                  ;
 41410                                  ; This patch detection and replacement is based on an example supplied by
 41411                                  ; Ben Williams at Rational.
 41412                                  ;
 41413                                  ;----------------------------------------------------------------------------
 41414                                  
 41415                                  ; 22/05/2019 - Retro DOS v4.0
 41416                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 41417                                  
 41418                                  ;----------------------------------------------------------------------------
 41419                                  ;
 41420                                  ; INPUT : ES = segment where program got loaded
 41421                                  ;
 41422                                  ;----------------------------------------------------------------------------
 41423                                  
 41424                                  rpFind1:
 41425                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 41426                                  
 41427                                  rpFind1Len equ	$ - rpFind1
 41428                                  
 41429                                  ;	cli
 41430                                  ;	in	al, 21h
 41431                                  ;	pusha
 41432                                  ;	xor	ax, ax
 41433                                  ;	out	43h, al
 41434                                  ;	mov	dx, ...
 41435                                  
 41436                                  rpFind1a:
 41437                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 41438                                  
 41439                                  rpFind1aLen equ	$ - rpFind1a
 41440                                  
 41441                                  ;	mov	al, 0Eh
 41442                                  ;	out	37h, al
 41443                                  ;	xor	ax, ax
 41444                                  ;	out	0F2h, al
 41445                                  
 41446                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41447                                  
 41448                                  rpFind2:
 41449                                  	db	0Fh, 20h, 0C0h
 41450                                  
 41451                                  rpFind2Len equ	$ - rpFind2
 41452                                  
 41453                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 41454                                  
 41455                                  rpFind3:
 41456                                  	db	0Fh, 22h, 0C0h, 0EAh
 41457                                  
 41458                                  rpFind3Len equ	$ - rpFind3
 41459                                  
 41460                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 41461                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 41462                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 41463                                  
 41464                                  ; note, there is no rpRepl1 string
 41465                                  
 41466                                  rpRepl2:
 41467                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 41468                                  
 41469                                  rpRepl2Len equ	$ - rpRepl2
 41470                                  
 41471                                  ;	push	eax
 41472                                  ;	push	cx
 41473                                  ;	mov	eax, cr0
 41474                                  
 41475                                  rpRepl3:
 41476                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 41477                                  
 41478                                  rpRepl3Len equ	$ - rpRepl3
 41479                                  
 41480                                  ;	mov	ss, bx
 41481                                  ;	pop	cx
 41482                                  ;	pop	eax
 41483                                  
 41484                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 41485                                  
 41486                                  rpFind4:
 41487                                  	db	93h, 58h, 8Bh, 0CCh
 41488                                  
 41489                                  rpFind4Len equ	$ - rpFind4
 41490                                  
 41491                                  ;	xchg	bx, ax
 41492                                  ;	pop	ax
 41493                                  ;	mov	cx, sp
 41494                                  
 41495                                  rpFind5:
 41496                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 41497                                  
 41498                                  rpFind5Len equ	$ - rpFind5
 41499                                  
 41500                                  ;	mov	ax, DE0Ch
 41501                                  ;	int	67h
 41502                                  ;	mov	sp, cx
 41503                                  ;	jmp	bx
 41504                                  
 41505                                  rpRepl4:
 41506                                  	db	93h, 58h, 8Bh, 0CCh
 41507                                  	db	02Eh, 066h, 0A3h
 41508                                  
 41509                                  rpRepl4o1Len equ $ - rpRepl4
 41510                                  
 41511                                  	db	00h, 00h
 41512                                  	db	02Eh, 066h, 89h, 36h
 41513                                  
 41514                                  rpRepl4o2Len equ $ - rpRepl4
 41515                                  
 41516                                  	db	00h, 00h
 41517                                  
 41518                                  rpRepl4Len equ	$ - rpRepl4
 41519                                  
 41520                                  ;	xchg	bx, ax
 41521                                  ;	pop	ax
 41522                                  ;	mov	cx, sp
 41523                                  ;	mov	dword ptr cs:[xxxx], eax
 41524                                  ;	mov	dword ptr cs:[xxxx], esi
 41525                                  
 41526                                  rpRepl5:
 41527                                  	db	8Bh, 0E1h
 41528                                  	db	2Eh, 66h, 0A1h
 41529                                  
 41530                                  rpRepl5o1Len equ $ - rpRepl5
 41531                                  
 41532                                  	db	00h, 00h
 41533                                  	db	2Eh, 66h, 8Bh, 36h
 41534                                  
 41535                                  rpRepl5o2Len equ $ - rpRepl5
 41536                                  
 41537                                  	db	00h, 00h
 41538                                  	db	0FFh, 0E3h
 41539                                  
 41540                                  rpRepl5Len equ	$ - rpRepl5
 41541                                  
 41542                                  ;	mov	sp, cx
 41543                                  ;	mov	eax, dword ptr cs:[xxxx]
 41544                                  ;	mov	esi, dword ptr cs:[xxxx]
 41545                                  ;	jmp	bx
 41546                                  
 41547                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 41548                                  
 41549                                  rpFind6:
 41550                                  	db	0FAh, 52h, 51h
 41551                                  
 41552                                  rpFind6Len equ	$ - rpFind6
 41553                                  
 41554                                  ;	cli
 41555                                  ;	push	dx
 41556                                  ;	push	cx
 41557                                  
 41558                                  rpFind7a:
 41559                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 41560                                  
 41561                                  rpFind7aLen equ	$ - rpFind7a
 41562                                  
 41563                                  ;	mov	ax, 0DE0Ch
 41564                                  ;	call	fword ptr es:[xxxx]
 41565                                  
 41566                                  rpFind7b:
 41567                                  	db	59h, 5Ah, 5Bh
 41568                                  
 41569                                  rpFind7bLen equ	$ - rpFind7b
 41570                                  
 41571                                  ;	pop	cx
 41572                                  ;	pop	dx
 41573                                  ;	pop	bx
 41574                                  
 41575                                  rpRepl6:
 41576                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 41577                                  
 41578                                  rpRepl6Len equ	$ - rpRepl6
 41579                                  
 41580                                  ;	cli
 41581                                  ;	push	eax
 41582                                  ;	push	ebx
 41583                                  ;	push	ecx
 41584                                  ;	push	edx
 41585                                  
 41586                                  rpRepl7:
 41587                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 41588                                  
 41589                                  rpRepl7Len equ	$ - rpRepl7
 41590                                  
 41591                                  ;	pop	edx
 41592                                  ;	pop	ecx
 41593                                  ;	pop	ebx
 41594                                  ;	pop	eax
 41595                                  ;	pop	bx
 41596                                  
 41597                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 41598                                  
 41599                                  rpFind8:
 41600                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 41601                                  
 41602                                  rpFind8Len equ	$ - rpFind8
 41603                                  
 41604                                  ;	pusha
 41605                                  ;	push	es
 41606                                  ;	push	ds
 41607                                  ;	mov	ax, dgroup	;jump back to here from replace8
 41608                                  ;	mov	ds, ax
 41609                                  
 41610                                  rpFind9 :
 41611                                  	db	1Fh, 07h, 61h
 41612                                  
 41613                                  rpFind9Len equ	$ - rpFind9
 41614                                  
 41615                                  ;	pop	ds
 41616                                  ;	pop	es
 41617                                  ;	popa
 41618                                  
 41619                                  rpRepl8:
 41620                                   	db	66h, 60h, 06h, 1Eh
 41621                                  
 41622                                  rpRepl8Len equ	$ - rpRepl8
 41623                                  
 41624                                  ;	pushad
 41625                                  ;	push	es
 41626                                  ;	push	ds
 41627                                  
 41628                                  rpRepl9:
 41629                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 41630                                  
 41631                                  rpRepl9Len equ	$ - rpRepl9
 41632                                  
 41633                                  ;	pop	ds
 41634                                  ;	pop	es
 41635                                  ;	popad
 41636                                  ;	retn			;no need to jmp back to main-line
 41637                                  
 41638                                  ;----------------------------------------------------------------------------
 41639                                  
 41640                                  struc SearchPair
 41641                                   .sp_off1: resw 1	; offset of 1st search string
 41642                                   .sp_len1: resw 1	; length of 1st search string
 41643                                   .sp_off2: resw 1	; 2nd string
 41644                                   .sp_len2: resw 1	; 2nd string
 41645                                   .sp_diff: resw 1	; max difference between offsets
 41646                                   .size:
 41647                                  endstruc
 41648                                  
 41649                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 41650                                  
 41651                                  rpBug1Strs:
 41652                                  	dw	rpFind2
 41653                                  	dw	rpFind2Len ; 3
 41654                                  	dw	rpFind3
 41655                                  	dw	rpFind3Len ; 4
 41656                                  	dw	20h
 41657                                  
 41658                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 41659                                  
 41660                                  rpBug2Strs:
 41661                                  	dw	rpFind4
 41662                                  	dw	rpFind4Len ; 4
 41663                                  	dw	rpFind5
 41664                                  	dw	rpFind5Len ; 9
 41665                                  	dw	80h
 41666                                  
 41667                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 41668                                  
 41669                                  rpBug3Strs:
 41670                                  	dw	rpFind6
 41671                                  	dw	rpFind6Len ; 3
 41672                                  	dw	rpFind7a
 41673                                  	dw	rpFind7aLen ; 7
 41674                                  	dw	80h
 41675                                  
 41676                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 41677                                  
 41678                                  rpBug4Strs:
 41679                                  	dw	rpFind8
 41680                                  	dw	4
 41681                                  	dw	rpFind9
 41682                                  	dw	rpFind9Len ; 3
 41683                                  	dw	80h
 41684                                  
 41685                                  ;----------------------------------------------------------------------------
 41686                                  
 41687                                  struc StackVars
 41688                                   .sv_wVersion:	resw 1		; Rational extender version #
 41689                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 41690                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 41691                                   .size:
 41692                                  endstruc
 41693                                  
 41694                                  ;----------------------------------------------------------------------------
 41695                                  
 41696                                  ; 22/05/2019 - Retro DOS v4.0
 41697                                  
 41698                                  Rational386Patch:
 41699                                  	; Do a few quick checks to see if this looks like a Rational
 41700                                  	; Extended application. Hopefully this will quickly weed out
 41701                                  	; most non Rational apps.
 41702                                  
 41703                                  	cmp	word [es:0],395		; version number goes here - versions
 41704                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 41705                                  
 41706                                  	cmp	word [es:0Ch],20h	; always has this value here
 41707                                  	jne	short rp3QuickOut
 41708                                  
 41709                                  	push	ax
 41710                                  
 41711                                  	mov	ax,18h 			; extender has 18h at
 41712                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 41713                                  	jne	short rp3QO_ax
 41714                                  	cmp	[es:28],ax
 41715                                  	jne	short rp3QO_ax
 41716                                  	cmp	[es:36],ax
 41717                                  	je	short rp3Maybe
 41718                                  rp3QO_ax:
 41719                                  	pop	ax
 41720                                  rp3QuickOut:
 41721                                  	retn
 41722                                  
 41723                                  ; It might be the rational extender, do more extensive checking
 41724                                  
 41725                                  rp3Maybe:
 41726                                  	cld
 41727                                  	push	bx			; note ax pushed above
 41728                                  	push	cx
 41729                                  	push	dx
 41730                                  	push	si
 41731                                  	push	di
 41732                                  	push	es
 41733                                  	push	ds			; we use all of them
 41734                                  	push	bp
 41735                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 41736                                  	mov	bp,sp
 41737                                  
 41738                                  	push	cs
 41739                                  	pop	ds
 41740                                  
 41741                                  	mov	ax,[es:0]		; save version #
 41742                                  	;mov	[bp+StackVars.sv_wVersion],ax
 41743                                  	mov	[bp],ax	
 41744                                  					; check that binary version # matches
 41745                                  	call	VerifyVersion		;   ascii string
 41746                                  	jne	short rp3Exit_j
 41747                                  
 41748                                  ; Looks like this is it, find where to put the patch code.  The
 41749                                  ; patch will be located on top of Rational code specific to 80286
 41750                                  ; processors, so these patchs MUST NOT be applied if running on
 41751                                  ; an 80286 system.
 41752                                  
 41753                                  	; Rational says the code to patch will never be beyond offset 46xxh
 41754                                  
 41755                                  	mov	cx,4500h		; force search len to 4700h (searches
 41756                                  	;mov	[bp+2],cx
 41757                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 41758                                  
 41759                                  	mov	es,[es:20h]		; es=code segment
 41760                                  
 41761                                  	mov	si,rpFind1		; string to find
 41762                                  	mov	dx,rpFind1Len ; 10	; length to match
 41763                                  	call	ScanCodeSeq		; look for code seq
 41764                                  	jz	short rpGotPatch
 41765                                  
 41766                                  ; According to Rational, some very old versions of the extender may not
 41767                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 41768                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 41769                                  
 41770                                  	mov	si,rpFind1a
 41771                                  	mov	dx,rpFind1aLen  ;8
 41772                                  	call	ScanCodeSeq
 41773                                  	jz	short rpGotPatch
 41774                                  
 41775                                  rp3Exit_j:
 41776                                  	jmp	rp3Exit
 41777                                  
 41778                                  ; Found the location to write patch code! DI = offset in code seg.
 41779                                  
 41780                                  rpGotPatch:
 41781                                  	;mov	[bp+4],di
 41782                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41783                                  
 41784                                  ;----------------------------------------------------------------------------
 41785                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41786                                  
 41787                                  	;cmp	word [bp+0],381
 41788                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41789                                  	cmp	word [bp],381
 41790                                  	jae	short rpBug2			;   < 3.81
 41791                                  
 41792                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41793                                  	call	FindBadCode
 41794                                  	jc	short rpBug2
 41795                                  
 41796                                  ; si = rpFind2 offset, di = rpFind3 offset
 41797                                  
 41798                                  	push	di
 41799                                  	mov	di,si				; rpFind2 offset
 41800                                  	mov	dx,rpFind2Len ; 3
 41801                                  
 41802                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41803                                  	jne	short rp_no_cx
 41804                                  
 41805                                  	dec	di				;   yes, gobble up push cx too
 41806                                  	inc	dx
 41807                                  rp_no_cx:
 41808                                  	mov	si,rpRepl2			; patch out find2 sequence
 41809                                  	mov	cx,rpRepl2Len  ; 6
 41810                                  	call	GenPatch
 41811                                  
 41812                                  	pop	di				; rpFind3 offset
 41813                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41814                                  	jne	short rp_no_cx2
 41815                                  
 41816                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41817                                  rp_no_cx2:
 41818                                  	;mov	ax,[bp+4]
 41819                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41820                                  	;mov	[es:di+4],ax
 41821                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41822                                  
 41823                                  	push	di				; save find3 offset
 41824                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41825                                  	mov	cx,rpRepl3Len ; 5
 41826                                  	call	CopyPatch
 41827                                  
 41828                                  	pop	bx				; find3 offset
 41829                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41830                                  	call	GenJump 			; jmp back from patch area
 41831                                  	;mov	[bp+4],di
 41832                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41833                                  						;   area pointer
 41834                                  
 41835                                  ;----------------------------------------------------------------------------
 41836                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41837                                  
 41838                                  rpBug2:
 41839                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41840                                  	call	FindBadCode
 41841                                  	jc	short rpBug3
 41842                                  
 41843                                  ; si = rpFind4 offset, di = rpFind5 offset
 41844                                  
 41845                                  	;push	word [bp+4]
 41846                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41847                                  						;   (where repl4 goes)
 41848                                  	push	di				; save find5 offset
 41849                                  
 41850                                  	mov	di,si
 41851                                  	mov	dx,rpFind4Len ; 4
 41852                                  	mov	si,rpRepl4
 41853                                  	mov	cx,rpRepl4Len ; 15
 41854                                  	call	GenPatch			; patch out find4 code
 41855                                  
 41856                                  	pop	di				; find5 offset
 41857                                  	add	di,5				; keep 5 bytes of find5 code
 41858                                  	;mov	bx,[bp+4]
 41859                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41860                                  	push	bx				; save repl5 location
 41861                                  	call	GenJump
 41862                                  
 41863                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41864                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41865                                  	call	CopyPatch			;   so no need to jmp back to
 41866                                  						;   main-line code
 41867                                  
 41868                                  ; patches have been made, now update the patch code to store/load dwords just
 41869                                  ; after the code in the patch area
 41870                                  
 41871                                  	pop	di				; repl5 location
 41872                                  	pop	si				; repl4 location
 41873                                  
 41874                                  	;mov	ax,[bp+4]
 41875                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41876                                  
 41877                                  	;mov	[es:si+7],ax
 41878                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41879                                  	;mov	[es:di+5],ax
 41880                                  	mov	[es:di+rpRepl5o1Len],ax
 41881                                  	add	ax,4
 41882                                  	;mov	[es:si+0Dh],ax
 41883                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41884                                  	;mov	[es:di+0Bh],ax
 41885                                  	mov	[es:di+rpRepl5o2Len],ax
 41886                                  
 41887                                  	;add	word [bp+4],8
 41888                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41889                                  						; patch area
 41890                                  
 41891                                  ;----------------------------------------------------------------------------
 41892                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41893                                  
 41894                                  rpBug3:
 41895                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41896                                  	call	FindBadCode
 41897                                  	jc	short rpBug4
 41898                                  
 41899                                  	;add	di,9
 41900                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41901                                  	push	si				;   code and locate find7b
 41902                                  	mov	si,rpFind7b			;   sequence
 41903                                  	mov	dx,rpFind7bLen ; 3
 41904                                  	call	ScanCodeSeq_di
 41905                                  	pop	si
 41906                                  	jnz	short rpBug4
 41907                                  
 41908                                  	push	di				; save find7b code offset
 41909                                  
 41910                                  	mov	di,si
 41911                                  	mov	dx,rpFind6Len ; 3
 41912                                  	mov	si,rpRepl6
 41913                                  	mov	cx,rpRepl6Len ; 9
 41914                                  	call	GenPatch			; patch out find6 code
 41915                                  
 41916                                  	pop	di
 41917                                  	mov	dx,rpFind7bLen ; 3
 41918                                  	mov	si,rpRepl7
 41919                                  	mov	cx,rpRepl7Len ; 9
 41920                                  	call	GenPatch			; patch out find7b code
 41921                                  
 41922                                  ;----------------------------------------------------------------------------
 41923                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41924                                  
 41925                                  rpBug4:
 41926                                  	;cmp	word [bp+0],360
 41927                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41928                                  	cmp	word [bp],360
 41929                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41930                                  
 41931                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41932                                  	call	FindBadCode
 41933                                  	jc	short rp3Exit
 41934                                  
 41935                                  	push	di				; save find9 code offset
 41936                                  
 41937                                  	mov	di,si
 41938                                  	mov	dx,3
 41939                                  	mov	si,rpRepl8
 41940                                  	mov	cx,rpRepl8Len ; 4
 41941                                  	call	GenPatch			; patch out find8 code
 41942                                  
 41943                                  	pop	di				; find9 offset
 41944                                  	;mov	bx,[bp+4]
 41945                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41946                                  	call	GenJump 			;   patch area
 41947                                  
 41948                                  	mov	si,rpRepl9			; copy replacement code to
 41949                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41950                                  	call	CopyPatch			;   so no jmp back to main-line
 41951                                  
 41952                                  rp3Exit:
 41953                                  	add	sp,StackVars.size
 41954                                  	pop	bp
 41955                                  	pop	ds
 41956                                  	pop	es
 41957                                  	pop	di
 41958                                  	pop	si
 41959                                  	pop	dx
 41960                                  	pop	cx
 41961                                  	pop	bx
 41962                                  	pop	ax
 41963                                  	retn
 41964                                  
 41965                                  ;----------------------------------------------------------------------------
 41966                                  ;
 41967                                  ; FindBadCode
 41968                                  ;
 41969                                  ; Searches Rational code segment looking for a pair of find strings (all
 41970                                  ; patches have at least two find strings).
 41971                                  ;
 41972                                  ; Entry:
 41973                                  ;	ES    = code segment to search
 41974                                  ;	DS:BX = search pair structure for this search
 41975                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41976                                  ;
 41977                                  ; Exit:
 41978                                  ;	CY flag clear if both strings found, and
 41979                                  ;	SI    = offset in ES of 1st string
 41980                                  ;	DI    = offset in ES of 2nd string
 41981                                  ;	CY set if either string not found, or strings too far apart
 41982                                  ;
 41983                                  ; Used:
 41984                                  ;	CX
 41985                                  ;
 41986                                  ;----------------------------------------------------------------------------
 41987                                  
 41988                                  ;struc SearchPair
 41989                                  ; .sp_off1: resw 1	; offset of 1st search string
 41990                                  ; .sp_len1: resw 1	; length of 1st search string
 41991                                  ; .sp_off2: resw 1	; 2nd string
 41992                                  ; .sp_len2: resw 1	; 2nd string
 41993                                  ; .sp_diff: resw 1	; max difference between offsets
 41994                                  ; .size:
 41995                                  ;endstruc
 41996                                  
 41997                                  FindBadCode:
 41998                                  	;mov	cx,[bp+2]
 41999                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 42000                                  
 42001                                  	mov	si,[bx]	; mov si,[bx+0]
 42002                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 42003                                  	
 42004                                  	;mov	dx,[bx+2]
 42005                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 42006                                  	call	ScanCodeSeq
 42007                                  	jnz	short fbc_error		; done if 1st not found
 42008                                  
 42009                                  	push	di			; save 1st string offset
 42010                                  
 42011                                  	;mov	si,[bx+4]
 42012                                  	mov	si,[bx+SearchPair.sp_off2]
 42013                                  	;mov	dx,[bx+6]
 42014                                  	mov	dx,[bx+SearchPair.sp_len2]
 42015                                  	call	ScanCodeSeq_di		; don't change flags after this!
 42016                                  
 42017                                  	pop	si			; restore 1st string offset
 42018                                  	jnz	short fbc_error
 42019                                  
 42020                                  	mov	ax,di			; sanity check that
 42021                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 42022                                  	jc	short fbc_error
 42023                                  	;cmp	ax,[bx+8]
 42024                                  	cmp	ax,[bx+SearchPair.sp_diff]
 42025                                  	ja	short fbc_error
 42026                                  
 42027                                  	clc
 42028                                  	retn
 42029                                  
 42030                                  fbc_error:
 42031                                  	stc
 42032                                  	retn
 42033                                  
 42034                                  ;----------------------------------------------------------------------------
 42035                                  ;
 42036                                  ; GenPatch
 42037                                  ;
 42038                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 42039                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 42040                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 42041                                  ; code.
 42042                                  ;
 42043                                  ; Entry:
 42044                                  ;	ES:DI = start of buggy code to be patched
 42045                                  ;	DX    = length of buggy code to be patched
 42046                                  ;	DS:SI = replacement patch code
 42047                                  ;	CX    = length of replacement patch code
 42048                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 42049                                  ;
 42050                                  ; Exit:
 42051                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 42052                                  ;
 42053                                  ; Used:
 42054                                  ;	AX, BX, SI, Flags
 42055                                  ;
 42056                                  ;----------------------------------------------------------------------------
 42057                                  
 42058                                  GenPatch:
 42059                                  	push	di			;save offset of buggy code
 42060                                  
 42061                                  	;mov	bx,[bp+4]
 42062                                  	mov	bx,[bp+StackVars.sv_pPatch]
 42063                                  					;jump from buggy code to patch area
 42064                                  	call	GenJump
 42065                                  
 42066                                  	call	CopyPatch		;copy replacement code to patch area
 42067                                  
 42068                                  	pop	bx			;offset of buggy code + buggy code
 42069                                  	add	bx,dx			;  length = return from patch offset
 42070                                  
 42071                                  	call	GenJump 		;jump from patch area back to main-
 42072                                  	;mov	[bp+4],di
 42073                                  	mov	[bp+StackVars.sv_pPatch],di
 42074                                  					;  line code, update patch pointer
 42075                                  	retn
 42076                                  
 42077                                  ;----------------------------------------------------------------------------
 42078                                  ;
 42079                                  ; CopyPatch
 42080                                  ;
 42081                                  ; Copies patch code to patch location.
 42082                                  ;
 42083                                  ; Entry:
 42084                                  ;	DS:SI = patch code to be copied
 42085                                  ;	ES    = segment of code to patch
 42086                                  ;	CX    = length of code to copy
 42087                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 42088                                  ;
 42089                                  ; Exit:
 42090                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 42091                                  ;
 42092                                  ; Used:
 42093                                  ;	SI, Flags
 42094                                  ;
 42095                                  ;----------------------------------------------------------------------------
 42096                                  
 42097                                  CopyPatch:
 42098                                  	push	cx
 42099                                  	;mov	di,[bp+4]
 42100                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 42101                                  	cld
 42102                                  	rep movsb
 42103                                  	pop	cx
 42104                                  	;mov	[bp+4],di
 42105                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 42106                                  	retn
 42107                                  
 42108                                  ;----------------------------------------------------------------------------
 42109                                  ;
 42110                                  ; GenJump
 42111                                  ;
 42112                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 42113                                  ;
 42114                                  ; Entry:
 42115                                  ;	ES:DI = from location (where to put jmp instruction)
 42116                                  ;	BX    = to location (where to jump to)
 42117                                  ;
 42118                                  ; Exit:
 42119                                  ;	DI = byte after generated jump
 42120                                  ;
 42121                                  ; Used:
 42122                                  ;	AX
 42123                                  ;
 42124                                  ;----------------------------------------------------------------------------
 42125                                  
 42126                                  GenJump:
 42127                                  	mov	al,0E9h		; jmp rel16 opcode
 42128                                  	stosb
 42129                                  
 42130                                  	mov	ax,bx		; calc offset to 'to' location
 42131                                  	sub	ax,di
 42132                                  	sub	ax,2
 42133                                  
 42134                                  	stosw			; output offset
 42135                                  
 42136                                  	retn
 42137                                  
 42138                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42139                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42140                                  
 42141                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42142                                  ; 21/03/2024 - Retro DOS v4.2
 42143                                  ; DOSCODE:B6BEh (MSDOS 6.22, MSDOS.SYS)
 42144                                  
 42145                                  ;----------------------------------------------------------------------------
 42146                                  ;
 42147                                  ; ScanCodeSeq
 42148                                  ;
 42149                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42150                                  ;
 42151                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42152                                  ;
 42153                                  ;----------------------------------------------------------------------------
 42154                                  
 42155                                  ScanCodeSeq:
 42156                                  	mov	di,200h
 42157                                  ScanCodeSeq_di:
 42158                                  	push	cx
 42159                                  	sub	cx,dx
 42160                                  	inc	cx
 42161                                  scsagain:
 42162                                  	push	si
 42163                                  	push	di
 42164                                  	push	cx
 42165                                  	mov	cx,dx
 42166                                  	rep	cmpsb
 42167                                  	pop	cx
 42168                                  	pop	di
 42169                                  	pop	si
 42170                                  	je	short scsfound
 42171                                  	inc	di
 42172                                  	loop	scsagain
 42173                                  scsfound:
 42174                                  	pop	cx
 42175                                  vvexit:		; 18/12/2022
 42176                                  	retn
 42177                                  
 42178                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42179                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42180                                  
 42181                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42182                                  ; 21/03/2024 - Retro DOS v4.2
 42183                                  ; DOSCODE:B6D6h (MSDOS 6.22, MSDOS.SYS)
 42184                                  	
 42185                                  ;----------------------------------------------------------------------------
 42186                                  ;
 42187                                  ; VerifyVersion
 42188                                  ;
 42189                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42190                                  ; from ES:2A.
 42191                                  ;
 42192                                  ;       Entry: AX = binary version number 
 42193                                  ;       Exit : Z flag set if version numbers match
 42194                                  ;
 42195                                  ;----------------------------------------------------------------------------
 42196                                  
 42197                                  VerifyVersion:
 42198                                  	mov	si,[es:2Ah]		; offset of version number
 42199                                  					;  in ascii
 42200                                  	mov	bl,10
 42201                                  	add	si,3			; point to last digit
 42202                                  
 42203                                  	call	VVDigit
 42204                                  	jne	short vvexit
 42205                                  	call	VVDigit
 42206                                  	jne	short vvexit
 42207                                  	cmp	byte [es:si],'.'
 42208                                  	jne	short vvexit
 42209                                  	dec	si
 42210                                  	;call	VVDigit
 42211                                  	; 18/12/2022
 42212                                  	;jmp	short VVDigit
 42213                                  ;vvexit:
 42214                                  	;retn
 42215                                  VVDigit:
 42216                                  	div	bl
 42217                                  	add	ah,'0'
 42218                                  	dec	si
 42219                                  	cmp	[es:si+1],ah
 42220                                  	mov	ah,0			; do not xor or sub we need Z
 42221                                  	retn
 42222                                  
 42223                                  %endif
 42224                                  
 42225                                  ;-----------------------------------------------------------------------
 42226                                  
 42227                                  ; 23/05/2019 - Retro DOS v4.0
 42228                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 42229                                  
 42230                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42231                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 42232                                  
 42233                                  exepatch_start:	 ; label byte
 42234                                  
 42235                                  	; The following is the code that'll be layed over the buggy unpack
 42236                                  	; code.
 42237                                  str1:
 42238 00007255 06                      	db  06h	  		;push	es
 42239 00007256 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42240                                  
 42241                                  first_stop equ	$-str1
 42242                                  			
 42243 00007258 2BC2                    	db  2Bh, 0C2h		;sub	ax,dx
 42244                                  
 42245                                  first:  ; label	byte
 42246                                  
 42247 0000725A 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42248 0000725C 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42249 0000725E BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42250 00007261 57                      	db  57h	    		;push	di
 42251 00007262 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42252 00007265 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH
 42253 00007267 F3AE                    	db  0F3h,0AEh 		;repz	scasb
 42254 00007269 47                      	db  47h	    		;inc	di
 42255 0000726A 8BF7                    	db  8Bh,0F7h  		;mov	si,di
 42256 0000726C 5F                      	db  5Fh	    		;pop	di
 42257 0000726D 58                      	db  58h	    		;pop	ax
 42258                                  
 42259                                  second_stop equ	$-first
 42260                                  
 42261 0000726E 2BC2                    	db  2Bh,0C2h  		;sub	ax,dx
 42262                                  
 42263                                  second: ; label	byte
 42264                                  
 42265 00007270 8EC0                    	db  8Eh,0C0h  		;mov	es,ax
 42266                                  		    		;NextRec:
 42267 00007272 B90402                  	db  0B9h,04h,02h	;mov	cx,0204h
 42268                                  		    		;norm_agn:
 42269 00007275 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42270 00007277 F7D0                    	db  0F7h,0D0h		;not	ax
 42271 00007279 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42272 0000727B 7413                    	db  74h,13h		;jz	short SI_ok
 42273 0000727D 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42274 0000727F 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42275 00007282 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42276 00007284 7308                    	db  73h,08h		;jnc	short SItoDS
 42277 00007286 F7DA                    	db  0F7h,0DAh		;neg	dx
 42278 00007288 D3E2                    	db  0D3h,0E2h		;shl	dx,cl
 42279 0000728A 2BF2                    	db  2Bh,0F2h		;sub	si,dx
 42280 0000728C 33D2                    	db  33h,0D2h		;xor	dx,dx
 42281                                  				;SItoDS:
 42282 0000728E 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42283                                  				;SI_ok:
 42284 00007290 87F7                    	db  87h,0F7h		;xchg	si,di
 42285 00007292 1E                      	db  1Eh			;push	ds
 42286 00007293 06                      	db  06h			;push	es
 42287 00007294 1F                      	db  1Fh			;pop	ds
 42288 00007295 07                      	db  07h			;pop	es
 42289 00007296 FECD                    	db  0FEh,0CDh		;dec	ch
 42290 00007298 75DB                    	db  75h,0DBh		;jnz	short norm_agn
 42291 0000729A AC                      	db  0ACh		;lodsb
 42292 0000729B 92                      	db  92h			;xchg	dx,ax
 42293 0000729C 4E                      	db  4Eh			;dec	si
 42294 0000729D AD                      	db  0ADh		;lodsw
 42295 0000729E 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 42296 000072A0 46                      	db  46h			;inc	si
 42297 000072A1 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42298 000072A3 24FE                    	db  24h,0FEh		;and	al,0FEH
 42299 000072A5 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42300 000072A7 7505                    	db  75h,05h		;jne	short TryEnum
 42301 000072A9 AC                      	db  0ACh		;lodsb
 42302 000072AA F3AA                    	db  0F3h,0AAh		;rep stosb
 42303                                  
 42304                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 42305 000072AC EB06                    	db  0EBh,06h		;jmp	short TryNext
 42306                                  
 42307                                  				;TryEnum:
 42308 000072AE 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42309 000072B0 756C                    	db  75h,6Ch		;jne	short CorruptExe
 42310 000072B2 F3A4                    	db  0F3h,0A4h		;rep movsb
 42311                                  				;TryNext:
 42312                                  
 42313 000072B4 92                      	db  92h			;xchg	dx,ax
 42314                                  ;	db  8Ah,0C2h		;mov	al,dl
 42315                                  
 42316 000072B5 A801                    	db  0A8h,01h		;test	al,1
 42317 000072B7 74B9                    	db  74h,0B9h		;jz	short NextRec
 42318 000072B9 9090                    	db  90h,90h		;nop,nop
 42319                                  	
 42320                                  last_stop equ $-second
 42321                                  size_str1 equ $-str1
 42322                                  
 42323                                  	; The following is the code that we need to look for in the exe
 42324                                  	; file.
 42325                                  
 42326                                  scan_patch1: ; label byte
 42327                                  
 42328 000072BB 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42329 000072BD 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42330 000072BF 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 42331 000072C1 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42332 000072C3 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42333 000072C5 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42334 000072C8 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42335 000072CB B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42336 000072CD F3AE                    	db  0F3h,0AEh		;repz	scasb
 42337 000072CF 47                      	db  47h			;inc	di
 42338 000072D0 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42339 000072D2 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42340 000072D4 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 42341 000072D6 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42342 000072D8 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42343                                  				;NextRec:
 42344 000072DB B104                    	db  0B1h,04h		;mov	cl,4
 42345 000072DD 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42346 000072DF F7D0                    	db  0F7h,0D0h		;not	ax
 42347 000072E1 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42348 000072E3 7409                    	db  74h,09h		;jz	short SI_ok
 42349 000072E5 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42350 000072E7 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42351 000072E9 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42352 000072EB 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42353                                  	       			;SI_ok:
 42354 000072EE 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42355 000072F0 F7D0                    	db  0F7h,0D0h		;not	ax
 42356 000072F2 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42357 000072F4 7409                    	db  74h,09h		;jz	short DI_ok
 42358 000072F6 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42359 000072F8 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42360 000072FA 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42361 000072FC 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42362                                  				;DI_ok:
 42363                                  
 42364                                  size_scan_patch1 equ $-scan_patch1
 42365                                  
 42366                                  scan_patch2: ; label byte
 42367                                  			
 42368 000072FF 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42369 00007301 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42370 00007303 48                      	db  48h			;dec	ax
 42371 00007304 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42372 00007306 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42373 00007308 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42374 0000730B B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42375 0000730E B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42376 00007310 F3AE                    	db  0F3h,0AEh		;repz	scasb
 42377 00007312 47                      	db  47h			;inc	di
 42378 00007313 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42379 00007315 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42380 00007317 48                      	db  48h			;dec	ax
 42381 00007318 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42382 0000731A BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42383                                  				;NextRec:
 42384 0000731D B104                    	db  0B1h,04h		;mov	cl,4
 42385 0000731F 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42386 00007321 F7D0                    	db  0F7h,0D0h		;not	ax
 42387 00007323 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42388 00007325 740A                    	db  74h,0Ah		;jz	short SI_ok
 42389 00007327 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42390 00007329 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42391 0000732B 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42392 0000732D 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 42393                                  				;or	si,0FFF0H
 42394                                  				;SI_ok:
 42395 00007331 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42396 00007333 F7D0                    	db  0F7h,0D0h		;not	ax
 42397 00007335 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42398 00007337 740A                    	db  74h,0Ah		;jz	short DI_ok
 42399 00007339 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42400 0000733B 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42401 0000733D 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42402 0000733F 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 42403                                  				;or	di,0FFF0H
 42404                                  				;DI_ok:
 42405                                  
 42406                                  size_scan_patch2 equ $-scan_patch2
 42407                                  
 42408                                  scan_patch3: ; label byte
 42409                                  
 42410 00007343 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42411 00007345 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42412 00007347 48                      	db  48h			;dec	ax
 42413 00007348 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42414 0000734A 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42415 0000734C BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42416 0000734F B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42417 00007352 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42418 00007354 F3AE                    	db  0F3h,0AEh		;repz	scasb
 42419 00007356 47                      	db  47h			;inc	di
 42420 00007357 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42421 00007359 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42422 0000735B 48                      	db  48h			;dec	ax
 42423 0000735C 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42424 0000735E BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42425                                  				;NextRec:
 42426 00007361 B104                    	db  0B1h,04h		;mov	cl,4
 42427 00007363 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42428 00007365 F7D0                    	db  0F7h,0D0h		;not	ax
 42429 00007367 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42430 00007369 7409                    	db  74h,09h		;jz	short SI_ok
 42431 0000736B 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42432 0000736D 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42433 0000736F 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42434 00007371 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42435                                  				;SI_ok:
 42436 00007374 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42437 00007376 F7D0                    	db  0F7h,0D0h		;not	ax
 42438 00007378 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42439 0000737A 7409                    	db  74h,09h		;jz	short DI_ok
 42440 0000737C 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42441 0000737E 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42442 00007380 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42443 00007382 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42444                                  				;DI_ok:
 42445                                  
 42446                                  size_scan_patch3 equ $-scan_patch3
 42447                                  
 42448                                  scan_com: ; label byte
 42449                                  
 42450 00007385 AC                      	db  0ACh		;lodsb
 42451 00007386 8AD0                    	db  8Ah,0D0h		;mov	dl,al
 42452 00007388 4E                      	db  4Eh			;dec	si
 42453 00007389 AD                      	db  0ADh		;lodsw
 42454 0000738A 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 42455 0000738C 46                      	db  46h			;inc	si
 42456 0000738D 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42457 0000738F 24FE                    	db  24h,0FEh		;and	al,0FEH
 42458 00007391 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42459 00007393 7506                    	db  75h,06h		;jne	short TryEnum
 42460 00007395 AC                      	db  0ACh		;lodsb
 42461 00007396 F3AA                    	db  0F3h,0AAh		;rep stosb
 42462 00007398 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 42463                                  				;TryEnum:
 42464 0000739B 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42465 0000739D 756B                    	db  75h,6Bh		;jne	short CorruptExe
 42466 0000739F F3A4                    	db  0F3h,0A4h		;rep movsb
 42467                                  				;TryNext:
 42468 000073A1 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42469 000073A3 A801                    	db  0A8h,01h		;test	al,1
 42470                                  ;	db  74h,0BAh		;jz	short NextRec
 42471                                  
 42472                                  size_scan_com	equ	$-scan_com
 42473                                  
 42474                                  ;-----------------------------------------------------------------------
 42475                                  
 42476                                  ; 23/05/2019 - Retro DOS v4.0
 42477                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 42478                                  
 42479                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42480                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 42481                                  
 42482                                  ExePatch:
 42483                                  	; 28/12/2022 - Retro DOS v4.1
 42484                                  	;call	ExePackPatch
 42485                                  	;;call	word [ss:RationalPatchPtr]
 42486                                  	;retn
 42487                                  	; 28/12/2022
 42488                                  	;jmp	short ExePackPatch
 42489                                  
 42490                                  ;-----------------------------------------------------------------------
 42491                                  ;
 42492                                  ; Procedure Name 	: ExePackPatch
 42493                                  ;
 42494                                  ; Inputs	 	: DS 			-> DOSDATA
 42495                                  ;			  ES:0 			-> read in image
 42496                                  ;			  ax:cx = start cs:ip of program
 42497                                  ; Output		:		
 42498                                  ;
 42499                                  ;	1. If ES <= 0fffh
 42500                                  ;	   2. if exepack signature ('RB') found
 42501                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 42502                                  ;	       	 4. if rest of the code & checksum compares
 42503                                  ;	  	    5. overlay buggy code with code in 
 42504                                  ;		       doscode:str1.
 42505                                  ;		 6. endif
 42506                                  ;	      7. endif
 42507                                  ;	   8. endif
 42508                                  ;	9. endif
 42509                                  ;
 42510                                  ;
 42511                                  ; Uses			: NONE
 42512                                  ;
 42513                                  ;-----------------------------------------------------------------------
 42514                                  
 42515                                  	; 21/03/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 42516                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42517                                  	; 23/05/2019 - Retro DOS v4.0	
 42518                                  ExePackPatch:
 42519 000073A5 53                      	push	bx
 42520 000073A6 8CC3                    	mov	bx,es			; bx has load segment
 42521 000073A8 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 42522 000073AC 7602                    	jbe	short ep_cont		; N: 
 42523 000073AE 5B                      	pop	bx			; Y: no need to patch
 42524 000073AF C3                      	retn
 42525                                  ep_cont:
 42526 000073B0 1E                      	push	ds
 42527 000073B1 06                      	push	es
 42528 000073B2 50                      	push	ax
 42529 000073B3 51                      	push	cx
 42530 000073B4 56                      	push	si
 42531 000073B5 57                      	push	di
 42532                                  	
 42533                                  		; M033 - start
 42534                                  		; exepacked programs have an IP of 12h (>=2)
 42535                                  
 42536 000073B6 83E902                  	sub	cx,2			; Q: is IP >=2
 42537 000073B9 7303                    	jnb	short epp_1		; N: exit
 42538 000073BB E9B500                  	jmp	ep_notpacked
 42539                                  					; ax:cx now points to location of
 42540                                  					; 'RB' if this is an exepacked file.
 42541                                  		; M033 - end
 42542                                  epp_1:
 42543 000073BE 89CF                    	mov	di,cx
 42544 000073C0 8EC0                    	mov	es,ax
 42545 000073C2 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in
 42546                                  					; unpack_offset
 42547                                  
 42548 000073C7 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 42549                                  	;ljne	ep_notpacked
 42550 000073CC 7403                    	je	short epp_2
 42551 000073CE E9A200                  	jmp	ep_notpacked
 42552                                  epp_2:
 42553 000073D1 0E                      	push	cs
 42554 000073D2 1F                      	pop	ds			; set ds to cs
 42555                                  
 42556                                  	;add	di,6Ch
 42557 000073D3 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed
 42558                                  					;          file where we hope to find
 42559                                  					;	   scan string. 
 42560                                  
 42561 000073D6 E8A200                  	call	chk_common_str		; check for match
 42562                                  
 42563 000073D9 7521                    	jnz	short ep_chkpatch2	; Q: does the patch match
 42564                                  					; N: check at patch2_offset
 42565                                  					; Y: check for rest of patch string
 42566 000073DB BE[BB72]                	mov	si,scan_patch1
 42567                                  					; ds:si -> scan string 
 42568 000073DE 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 42569                                  
 42570                                  	;add	di,28h
 42571                                  	; 07/12/2022
 42572 000073E3 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed
 42573                                  					;          file where we hope to find
 42574                                  					;	   scan string. 
 42575                                  	;;mov	cx,68
 42576                                  	;mov	cx,size_scan_patch1
 42577                                  	; 21/03/2024
 42578 000073E6 B144                    	mov	cl,size_scan_patch1 ; 68
 42579                                  
 42580                                  	;mov	bx,142
 42581 000073E8 BB8E00                  	mov	bx,CHKSUM1_LEN
 42582                                  	;mov	ax,0EF4Eh
 42583 000073EB B84EEF                  	mov	ax,PATCH1_CHKSUM
 42584 000073EE E89E00                  	call	chk_patchsum		; check if patch and chk sum compare
 42585 000073F1 7207                    	jc	short ep_done1		; Q: did we pass the test
 42586                                  					; N: exit
 42587                                  					; Y: overlay code with new 
 42588 000073F3 BE[5572]                	mov	si,str1
 42589                                  	;;mov	cx,102
 42590                                  	;mov	cx,size_str1
 42591                                  	; 21/03/2024
 42592 000073F6 B166                    	mov	cl,size_str1 ; 102
 42593                                  
 42594 000073F8 F3A4                    	rep	movsb
 42595                                  ep_done1:
 42596 000073FA EB77                    	jmp	short ep_done ; 21/03/2024
 42597                                  
 42598                                  ep_chkpatch2:
 42599                                  	;mov	di,76h
 42600 000073FC BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 42601                                  					; in another version of unpack
 42602 000073FF E87900                  	call	chk_common_str		; check for match
 42603                                  
 42604 00007402 753D                    	jnz	short ep_chkpatch3	; Q: does the patch match
 42605                                  					; N: check for patch3_offset
 42606                                  					; Y: check for rest of patch string
 42607                                  
 42608 00007404 BE[FF72]                	mov	si,scan_patch2
 42609                                  					; ds:si -> scan string
 42610                                  	;mov	di,32h
 42611 00007407 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed
 42612                                  					;          file where we hope to find
 42613                                  	;;mov	cx,68			;	   scan string.
 42614                                  	;mov	cx,size_scan_patch2
 42615                                  	; 21/03/2024
 42616 0000740A B144                    	mov	cl,size_scan_patch2 ; 68
 42617                                  	;mov	bx,140
 42618 0000740C BB8C00                  	mov	bx,CHKSUM2_LEN
 42619                                  	;mov	ax,78B2h
 42620 0000740F B8B278                  	mov	ax,PATCH2_CHKSUM
 42621 00007412 E87A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42622                                  
 42623                                  					; M046 - Start
 42624                                  					; Q: did we pass the test
 42625 00007415 7310                    	jnc	short ep_patchcode2	; Y: overlay code with new
 42626                                  					; N: try with a different chksum
 42627                                  
 42628 00007417 BE[FF72]                	mov	si,scan_patch2
 42629                                  					; ds:si -> scan string
 42630                                  	;;mov	cx,68
 42631                                  	;mov	cx,size_scan_patch2
 42632                                  	; 21/03/2024
 42633 0000741A B144                    	mov	cl,size_scan_patch2 ; 68
 42634                                  	;mov	bx,129
 42635 0000741C BB8100                  	mov	bx,CHKSUM2A_LEN
 42636                                  	;mov	ax,1C47h
 42637 0000741F B8471C                  	mov	ax,PATCH2A_CHKSUM
 42638 00007422 E86A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42639                                  					; Q: did we pass the test
 42640 00007425 724C                    	jc	short ep_notpacked	; N: try with a different chksum
 42641                                  					; Y: overlay code with new
 42642                                  						
 42643                                  ep_patchcode2:			       	; M046 - End
 42644 00007427 BE[5572]                	mov	si,str1
 42645                                  	;;mov	cx,3
 42646                                  	;mov	cx,first_stop
 42647                                  	; 21/03/2024
 42648 0000742A B103                    	mov	cl,first_stop ; 3
 42649 0000742C F3A4                    	rep	movsb
 42650 0000742E B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 42651 00007431 AB                      	stosw
 42652                                  	;add	si,2
 42653                                  	; 21/03/2024
 42654 00007432 46                      	inc	si
 42655 00007433 46                      	inc	si	
 42656                                  	;;mov	cx,20
 42657                                  	;mov	cx,second_stop
 42658                                  	; 21/03/2024
 42659 00007434 B114                    	mov	cl,second_stop ; 20
 42660 00007436 F3A4                    	rep	movsb
 42661 00007438 AB                      	stosw				; put in dec ax and nop
 42662                                  	;add	si,2
 42663                                  	; 21/03/2024
 42664 00007439 46                      	inc	si
 42665 0000743A 46                      	inc	si
 42666                                  	;;mov	cx,75
 42667                                  	;mov	cx,last_stop
 42668                                  	; 21/03/2024
 42669 0000743B B14B                    	mov	cl,last_stop ; 75
 42670 0000743D F3A4                    	rep	movsb
 42671 0000743F EB32                    	jmp	short ep_done
 42672                                  
 42673                                  ep_chkpatch3:
 42674                                  	;mov	di,74h
 42675 00007441 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 42676                                  					; in another version of unpack
 42677 00007444 E83400                  	call	chk_common_str		; check for match
 42678                                  
 42679 00007447 752A                    	jnz	short ep_notpacked	; Q: does the patch match
 42680                                  					; N: exit
 42681                                  					; Y: check for rest of patch string
 42682 00007449 BE[4373]                	mov	si,scan_patch3
 42683                                  					; ds:si -> scan string
 42684                                  	;mov	di,32h
 42685 0000744C BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed
 42686                                  					;          file where we hope to find
 42687                                  					;	   scan string. 
 42688                                  	;;mov	cx,66
 42689                                  	;mov	cx,size_scan_patch3
 42690                                  	; 21/03/2024
 42691 0000744F B142                    	mov	cl,size_scan_patch3 ; 66
 42692                                  	;mov	bx,139
 42693 00007451 BB8B00                  	mov	bx,CHKSUM3_LEN
 42694                                  	;mov	ax,4EDEh
 42695 00007454 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 42696 00007457 E83500                  	call	chk_patchsum		; check if patch and chk sum compare
 42697 0000745A 7217                    	jc	short ep_notpacked	; Q: did we pass the test
 42698                                  					; N: exit
 42699                                  					; Y: overlay code with new
 42700 0000745C BE[5572]                	mov	si,str1
 42701                                  	;;mov	cx,3
 42702                                  	;mov	cx,first_stop
 42703                                  	; 21/03/2024
 42704 0000745F B103                    	mov	cl,first_stop ; 3
 42705 00007461 F3A4                    	rep	movsb
 42706 00007463 B048                    	mov	al,48h			; al = opcode for dec ax
 42707 00007465 AA                      	stosb
 42708                                  	;add	si,2
 42709                                  	; 21/03/2024
 42710 00007466 46                      	inc	si
 42711 00007467 46                      	inc	si
 42712                                  	;;mov	cx,20
 42713                                  	;mov	cx,second_stop
 42714                                  	; 21/03/2024
 42715 00007468 B114                    	mov	cl,second_stop ; 20
 42716 0000746A F3A4                    	rep	movsb
 42717 0000746C AA                      	stosb				; put in dec ax
 42718                                  	;add	si,2
 42719                                  	; 21/03/2024
 42720 0000746D 46                      	inc	si
 42721 0000746E 46                      	inc	si
 42722                                  	;;mov	cx,75
 42723                                  	;mov	cx,last_stop
 42724                                  	; 21/03/2024
 42725 0000746F B14B                    	mov	cl,last_stop ; 75
 42726 00007471 F3A4                    	rep	movsb
 42727                                  
 42728                                  ep_notpacked:
 42729                                  	;stc
 42730                                  ep_done:
 42731 00007473 5F                      	pop	di
 42732 00007474 5E                      	pop	si
 42733 00007475 59                      	pop	cx
 42734 00007476 58                      	pop	ax
 42735 00007477 07                      	pop	es
 42736 00007478 1F                      	pop	ds
 42737 00007479 5B                      	pop	bx
 42738 0000747A C3                      	retn
 42739                                  
 42740                                  ;-------------------------------------------------------------------------
 42741                                  ;
 42742                                  ; 	Procedure Name	: chk_common_str
 42743                                  ;
 42744                                  ;	Input		: DS = DOSCODE
 42745                                  ;			; ES:DI points to string in packed file
 42746                                  ;
 42747                                  ;	Output		; Z if match else NZ
 42748                                  ;
 42749                                  ;-------------------------------------------------------------------------
 42750                                  
 42751                                  	; 23/05/2019 - Retro DOS v4.0
 42752                                  chk_common_str:
 42753 0000747B BE[8573]                	mov	si,scan_com
 42754                                  					; ds:si -> scan string
 42755                                  	;mov	cx,32
 42756 0000747E B92000                  	mov	cx,size_scan_com
 42757                                  
 42758 00007481 F3A6                    	repe	cmpsb
 42759                                  
 42760                                  					; M046 - start
 42761                                  	; a fourth possible version of these exepacked programs have a
 42762                                  	; 056h instead of 06Bh. See scan_com above
 42763                                  	;
 42764                                  	; 	db  75h, 6Bh		;jne CorruptExe
 42765                                  	;
 42766                                  	; If the mismatch at this point is due to a 56h instead of 6Bh
 42767                                  	; we shall try to match the rest of the string
 42768                                  	;
 42769                                  
 42770 00007483 7409                    	jz	short ccs_done
 42771 00007485 26807DFF56              	cmp	byte [es:di-1],56h
 42772 0000748A 7502                    	jnz	short ccs_done
 42773                                  
 42774 0000748C F3A6                    	repe	cmpsb
 42775                                  ccs_done:				; M046 - end
 42776 0000748E C3                      	retn
 42777                                  
 42778                                  ;-------------------------------------------------------------------------
 42779                                  ;
 42780                                  ;	Procedure Name	: chk_patchsum
 42781                                  ;
 42782                                  ;	Input		: DS:SI -> string we're looking for
 42783                                  ;			: ES:DI -> offset in packed file
 42784                                  ;			: CX 	= scan length
 42785                                  ;			: BX	= length of check sum
 42786                                  ;			: AX 	= value of check sum
 42787                                  ;
 42788                                  ;	Output		: if patch & check sum compare
 42789                                  ;				NC
 42790                                  ;			  else
 42791                                  ;				CY
 42792                                  ;
 42793                                  ;	Uses		: AX, BX, CX, SI
 42794                                  ;
 42795                                  ;-------------------------------------------------------------------------
 42796                                  
 42797                                  	; 23/05/2019 - Retro DOS v4.0
 42798                                  chk_patchsum:
 42799 0000748F 57                      	push	di
 42800                                  
 42801 00007490 F3A6                    	repe	cmpsb
 42802                                  
 42803 00007492 7518                    	jnz	short cp_fail		; Q: does the patch match
 42804                                  					; N: exit
 42805                                  					; Y:
 42806                                  
 42807                                  		; we do a check sum starting from the location of the
 42808                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 42809                                  		; unpacking code.
 42810                                  
 42811 00007494 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 42812 00007499 89D9                    	mov	cx,bx			; cx = length of check sum
 42813                                  
 42814 0000749B 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 42815 0000749D 31C0                    	xor	ax,ax
 42816                                  ep_chksum:
 42817 0000749F 260305                  	add	ax,[es:di]
 42818 000074A2 83C702                  	add	di,2
 42819 000074A5 E2F8                    	loop	ep_chksum
 42820                                  
 42821 000074A7 5F                      	pop	di			; restore di
 42822                                  
 42823 000074A8 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 42824                                  	;jne	short cp_fail		; N: exit
 42825                                  					; Y:
 42826                                  	; 25/09/2023
 42827                                  	;clc
 42828                                  	;retn
 42829 000074AA 74E2                    	je	short ccs_done ; cf=0
 42830                                  	
 42831                                  cp_fail:
 42832 000074AC F9                      	stc
 42833 000074AD C3                      	retn
 42834                                  
 42835                                  ; 28/12/2022 - Retro DOS v4.1
 42836                                  %if 0
 42837                                  ;--------------------------------------------------------------------------- 
 42838                                  
 42839                                  
 42840                                  ; M020 : BEGIN
 42841                                  ;
 42842                                  ;---------------------------------------------------------------------------
 42843                                  ;
 42844                                  ; procedure : RationalPatch
 42845                                  ;
 42846                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42847                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42848                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42849                                  ;
 42850                                  ; THE BUG is in the following code sequence:
 42851                                  ;
 42852                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42853                                  ;90		even				; word align
 42854                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42855                                  ;e8 xx xx	call	set_A20			; enable A20
 42856                                  ;
 42857                                  ; This patch routine replaces the mov & the loop with a far call into a
 42858                                  ; routine in DOS data segment which is in low memory (because A20 line
 42859                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42860                                  ; a mov & loop.
 42861                                  ;
 42862                                  ; Identification of Buggy Rational EXE
 42863                                  ; ====================================
 42864                                  ;
 42865                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42866                                  ;
 42867                                  ; OFFSET				Contains
 42868                                  ; ------				--------
 42869                                  ; 0000h			100 times Version number in binary
 42870                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42871                                  ;
 42872                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42873                                  ;
 42874                                  ; 002ah			offset where version number is stored in ASCII
 42875                                  ;				e.g. '3.48A'
 42876                                  ;
 42877                                  ; 0030h			offset of copyright string. Copyright strings either
 42878                                  ;			start with "DOS/16M Copyright...." or
 42879                                  ;			"Copyright.....". The string contains
 42880                                  ;			"Rational Systems, Inc."
 42881                                  ;
 42882                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42883                                  ;				from the program image
 42884                                  ; 0016h			word : size of buggy code segment
 42885                                  ;
 42886                                  ;	Buggy code is definite to start after offset 200h in its segment
 42887                                  ;
 42888                                  ;----------------------------------------------------------------------------
 42889                                  
 42890                                  ; 23/05/2019 - Retro DOS v4.0
 42891                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42892                                  
 42893                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42894                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42895                                  
 42896                                  RScanPattern1:
 42897                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42898                                  
 42899                                  RLen1 equ $ - RScanPattern1
 42900                                  
 42901                                  RScanPattern2:
 42902                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42903                                  
 42904                                  RLen2 equ $ - RScanPattern2
 42905                                  
 42906                                  RScanPattern3:
 42907                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42908                                  
 42909                                  RLen3 equ $ - RScanPattern2
 42910                                  
 42911                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42912                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42913                                  
 42914                                  ;----------------------------------------------------------------------------
 42915                                  ;
 42916                                  ; INPUT : ES = segment where program got loaded
 42917                                  ;
 42918                                  ;----------------------------------------------------------------------------
 42919                                  
 42920                                  RationalPatch:
 42921                                  	cld
 42922                                  
 42923                                  ; 21/03/2024
 42924                                  %if 0
 42925                                  	push	ax
 42926                                  	push	bx
 42927                                  	push	cx
 42928                                  	push	dx
 42929                                  	push	si
 42930                                  	push	di
 42931                                  %else
 42932                                  	; 21/03/2024 (PCDOS 7.1 IBMDOS.COM)
 42933                                  	;;;
 42934                                  	pusha
 42935                                  	;;;
 42936                                  %endif
 42937                                  	push	es
 42938                                  	push	ds			; we use all of them
 42939                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42940                                  	push	cs
 42941                                  	pop	ds
 42942                                  	
 42943                                  	mov	si,RScanPattern1
 42944                                  	;mov	cx,10
 42945                                  	mov	cx,RLen1
 42946                                  	rep	cmpsb			; do we have the pattern ?
 42947                                  	jne	short rpexit
 42948                                  	mov	ax,[es:0]
 42949                                  	cmp	ax,348			; is it a buggy version ?
 42950                                  	jb	short rpexit
 42951                                  	cmp	ax,383			; is it a buggy version ?
 42952                                  	ja	short rpexit
 42953                                  
 42954                                  	call	VerifyVersion
 42955                                  	jne	short rpexit
 42956                                  
 42957                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42958                                  	sub	cx,200h			; Length we search (we start
 42959                                  					;  at offset 200h)
 42960                                  	mov	es,[es:20h]		; es=buggy code segment
 42961                                  	mov	si,RScanPattern2
 42962                                  	;mov	dx,8	
 42963                                  	mov	dx,RLen2
 42964                                  	call	ScanCodeSeq		; look for code seq with nop
 42965                                  	jz	short rpfound
 42966                                  
 42967                                  	mov	si,RScanPattern3
 42968                                  	;mov	dx,15
 42969                                  	mov	dx,RLen3
 42970                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42971                                  	jnz	short rpexit
 42972                                  
 42973                                  rpfound:
 42974                                  	
 42975                                  ;	we set up a far call into DOS data
 42976                                  ;	dx has the length of the code seq we were searching for
 42977                                  
 42978                                  	mov	al,9Ah			; far call opcode
 42979                                  	stosb
 42980                                  	mov	ax,RatBugCode
 42981                                  	stosw
 42982                                  	mov	ax,ss
 42983                                  	stosw
 42984                                  	mov	cx,dx
 42985                                  	sub	cx,6			; filler (with NOPs)
 42986                                  	mov	al,90h
 42987                                  	rep	stosb
 42988                                  rpexit:
 42989                                  	pop	ds
 42990                                  	pop	es
 42991                                  
 42992                                  ; 21/03/2024
 42993                                  %if 0
 42994                                  	pop	di
 42995                                  	pop	si
 42996                                  	pop	dx
 42997                                  	pop	cx
 42998                                  	pop	bx
 42999                                  	pop	ax
 43000                                  %else
 43001                                  	; 21/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43002                                  	;;;
 43003                                  	popa
 43004                                  	;;;
 43005                                  %endif
 43006                                  	retn
 43007                                  
 43008                                  ; M020 END
 43009                                  
 43010                                  ;--------------------------------------------------------------------------- 
 43011                                  %endif	; 28/12/2022
 43012                                  
 43013                                  ;---------------------------------------------------------------------------
 43014                                  ;
 43015                                  ;	M068
 43016                                  ;
 43017                                  ; 	Procedure Name	: IsCopyProt
 43018                                  ;
 43019                                  ;	Inputs		: DS:100 -> start of com file just read in
 43020                                  ;
 43021                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 43022                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 43023                                  ;			  copy protect scheme that relies on the A20 line
 43024                                  ;			  being turned off for it's scheme to work.
 43025                                  ;
 43026                                  ;			  Note: The int 21 function dispatcher will turn 
 43027                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 43028                                  ;				and dec the A20OFF_COUNT before	iretting 
 43029                                  ;				to the user. 
 43030                                  ;
 43031                                  ;	Uses		: ES, DI, SI, CX
 43032                                  ;
 43033                                  ;---------------------------------------------------------------------------
 43034                                  
 43035                                  ; 23/05/2019 - Retro DOS v4.0
 43036                                  
 43037                                  CPStartOffset	EQU	0175h
 43038                                  CPID1Offset	EQU	011Bh
 43039                                  CPID2Offset	EQU	0173h
 43040                                  CPID3Offset	EQU	0146h
 43041                                  CPID4Offset	EQU	0124h
 43042                                  ID1		EQU	05343h
 43043                                  ID2		EQU	05044h
 43044                                  ID3		EQU	0F413h
 43045                                  ID4		EQU	08000h
 43046                                  
 43047                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 43048                                  
 43049                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43050                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 43051                                  
 43052                                  CPScanPattern:
 43053 000074AE 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 43054 000074B2 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 43055 000074B6 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 43056 000074BC 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 43057 000074C0 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 43058 000074C3 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 43059                                  
 43060                                  CPSPlen	EQU $ - CPScanPattern
 43061                                  
 43062                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 43063                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 43064                                  
 43065                                  IsCopyProt:
 43066 000074C6 813E1B014353            	cmp	word [CPID1Offset],ID1
 43067 000074CC 752D                    	jne	short CP_done
 43068                                  
 43069 000074CE 813E73014450            	cmp	word [CPID2Offset],ID2
 43070 000074D4 7525                    	jne	short CP_done
 43071                                  
 43072 000074D6 813E460113F4            	cmp	word [CPID3Offset],ID3
 43073 000074DC 751D                    	jne	short CP_done
 43074                                  
 43075 000074DE 813E24010080            	cmp	word [CPID4Offset],ID4
 43076 000074E4 7515                    	jne	short CP_done
 43077                                  
 43078 000074E6 0E                      	push	cs
 43079 000074E7 07                      	pop	es
 43080 000074E8 BF[AE74]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 43081                                  
 43082 000074EB BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 43083                                  					; of pattern
 43084                                  
 43085 000074EE B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 43086 000074F1 F3A6                    	repe	cmpsb
 43087 000074F3 7506                    	jnz	short CP_done
 43088                                  
 43089 000074F5 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 43090                                  CP_done:
 43091 000074FB C3                      	retn
 43092                                  	
 43093                                  ;DOSCODE ENDS
 43094                                  
 43095                                  	;END
 43096                                  
 43097                                  ;----------------------------------------------------------------------------
 43098                                  
 43099                                  ;align 2 ; 05/09/2018 (Error!)
 43100                                  
 43101                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43102                                  ;align 16 ; 08/09/2018 (OK.)
 43103                                  align 2
 43104                                  
 43105                                  ; 06/08/2018 - Retro DOS v3.0
 43106                                  ;============================================================================
 43107                                  ; MSINIT.ASM
 43108                                  ;============================================================================
 43109                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 43110                                  ;
 43111                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 43112                                  ;
 43113                                  	; 15/07/2018 - Retro DOS v3.0
 43114                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 43115                                  
 43116                                  ; temp iret instruction
 43117                                  
 43118                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43119                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 43120                                  
 43121                                  initiret: ; MSDOS 6.0
 43122                                  SYSBUF:
 43123                                  ;IRETT: ; 06/05/2019
 43124 000074FC CF                      	iret
 43125                                  
 43126                                  ; 22/04/2019 - Retro DOS v4.0
 43127                                  
 43128                                  ; pointer to the BIOS data segment that will be available just to the
 43129                                  ; initialization code
 43130                                  
 43131 000074FD 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 43132                                  
 43133                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43134                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 43135                                  
 43136                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 43137                                  
 43138                                  ParaRound:
 43139 000074FF 83C00F                  	add	ax, 15
 43140 00007502 D1D8                    	rcr	ax, 1
 43141 00007504 D1E8                    	shr	ax, 1
 43142 00007506 D1E8                    	shr	ax, 1
 43143 00007508 D1E8                    	shr	ax, 1
 43144 0000750A C3                      	retn
 43145                                  
 43146                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 43147                                  
 43148                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43149                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 43150                                  	
 43151                                  	; 30/05/2019
 43152                                  	; 22/04/2019 - Retro DOS v4.0
 43153                                  	; 07/07/2018 - Retro DOS v3.0
 43154                                  	; Retro DOS v2.0 - 03/03/2018
 43155                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43156                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 43157                                  DOSINIT:
 43158                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 43159                                  	;
 43160                                  	; Far call from SYSINIT
 43161                                  	; DX = Memory size in paragraphs
 43162                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 43163                                  	;	  (Retro DOS v2.0, 16/03/2018)
 43164                                  	;
 43165                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 43166                                  	;	  (Retro DOS v4.0, 20/04/2019)
 43167                                  
 43168 0000750B FA                              CLI
 43169 0000750C FC                              CLD
 43170                                  
 43171                                  	; 03/11/2022
 43172                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 43173                                  	
 43174                                  	; 17/12/2022
 43175                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43176                                  	;push	dx ; =*=		; save parameters from BIOS
 43177                                  	
 43178 0000750D 56                      	push	si
 43179 0000750E 1E                      	push	ds
 43180 0000750F 57                      	push	di			;save di (ptr to BiosComBlock)
 43181                                  
 43182 00007510 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 43183                                  
 43184                                  ; First, move the DOS data segment to its final location in low memory
 43185                                  
 43186                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 43187                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h
 43188 00007512 B8[8379]                	mov	ax,MEMSTRT		; get offset of end of init code
 43189                                  
 43190                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 43191                                  	;and	ax,~15	; 0FFF0h	; boundary
 43192                                  
 43193                                  	;mov	si,ax			; si = offset of DOSDATA in current
 43194                                  					; code segment
 43195                                  
 43196                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43197 00007515 83C00F                  	add	ax,15			; round to nearest paragraph
 43198                                  	;and	ax,~15			; boundary
 43199                                  	; 12/04/2024
 43200 00007518 24F0                    	and	al,0F0h
 43201                                  
 43202 0000751A 89C6                    	mov	si,ax			; si = offset of DOSDATA in current
 43203                                  					; code segment
 43204                                  	; 05/12/2022
 43205                                  	; 30/04/2019 - Retro DOS v4.0
 43206                                  	;xor	si,si
 43207                                  	
 43208                                  	;mov	ax,cs
 43209                                  	;mov	ds,ax			; ds = current code segment
 43210                                  					; DS:SI now points to dosdata
 43211                                  	; 22/03/2024
 43212 0000751C 0E                      	push	cs
 43213 0000751D 1F                      	pop	ds
 43214                                  
 43215                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 43216                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 43217                                  					;  BData segment. Cannot use
 43218                                  					;  getdseg macro here!!!
 43219                                  	; 17/12/2022
 43220 0000751E 8E06[FD74]              	mov	es,[InitBioDataSeg]
 43221                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43222                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 43223                                  
 43224                                  	;mov	es,[es:3]
 43225 00007522 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 43226                                  
 43227 00007527 31FF                    	xor	di,di			; ES:DI now points to RAM data
 43228                                  
 43229                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 43230                                  	;mov	cx,4976  ; 25/05/2019
 43231                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43232                                  	;mov	cx,4962
 43233                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 43234 00007529 B9CF12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 43235 0000752C F3A4                    	rep	movsb			; move data to final location
 43236                                  	
 43237 0000752E 5F                      	pop	di			; restore ptr to BiosComBlock
 43238 0000752F 1F                      	pop	ds			; restore parms from BIOS
 43239 00007530 5E                      	pop	si
 43240                                  	; 17/12/2022
 43241                                  	;pop	dx ; 30/05/2019
 43242                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43243                                  	;pop	dx ; =*=
 43244                                  
 43245 00007531 06                      	push	es
 43246 00007532 1E                      	push	ds
 43247 00007533 07                      	pop	es			; es:si -> device chain
 43248 00007534 1F                      	pop	ds			; ds points to dosdata
 43249                                  
 43250                                  ;SR;
 43251                                  ;We get a ptr to the BIOS exchange data block. This has been setup right
 43252                                  ;now so that the EXEC call knows when SysInit is present to do the special
 43253                                  ;lie table handling for device drivers. This can be expanded later on to
 43254                                  ;establish a communication block from the BIOS to the DOS.
 43255                                  
 43256                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 43257                                  	;mov	[1042h],bx
 43258 00007535 893E[4010]              	mov	[BiosDataPtr],di
 43259 00007539 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 43260                                  
 43261 0000753D 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 43262                                  
 43263                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 43264                                  
 43265 00007542 2E8C1E[6B4F]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 43266 00007547 2E8C1E[6F4F]            	mov	[cs:LowInt24Addr+2],ds
 43267 0000754C 2E8C1E[734F]            	mov	[cs:LowInt28Addr+2],ds
 43268                                  
 43269                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 43270                                  	;mov	[584h],sp
 43271                                  	;mov	[586h],ss
 43272 00007551 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 43273 00007555 8926[8405]              	mov	[USER_SP],sp
 43274 00007559 8C16[8605]              	mov	[USER_SS],ss
 43275                                  
 43276 0000755D 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 43277 0000755F 8ED0                    	mov	ss,ax
 43278                                  
 43279                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 43280                                  	;mov	sp,offset dosdata:dskstack
 43281 00007561 BC[2009]                	mov	sp,DSKSTACK
 43282                                  
 43283                                  ;M023
 43284                                  ; Init patch ptrs to default values
 43285                                  
 43286                                  ; 22/03/2024
 43287                                  %if 0
 43288                                  	;mov	word [1212h],RetExePatch
 43289                                  	;mov	word [1214h],RetExePatch
 43290                                  	;mov	word [61h],RetExePatch
 43291                                  	mov	word [FixExePatch],RetExePatch	; M023
 43292                                  	; 28/12/2022 - Retro DOS v4.1
 43293                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 43294                                  	mov	word [ChkCopyProt],RetExePatch	; M068
 43295                                  %else
 43296                                  	; 22/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43297                                  	;;;	
 43298 00007564 B8[C260]                	mov	ax,RetExePatch
 43299 00007567 A3[1212]                	mov	[FixExePatch],ax
 43300                                  	;mov	[RationalPatchPtr],ax
 43301 0000756A A3[6100]                	mov	[ChkCopyProt],ax
 43302                                  	;;;
 43303                                  %endif
 43304                                  
 43305                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43306                                  %if 0	; 19/09/2023
 43307                                  
 43308                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 43309                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 43310                                  ; running in the HMA.
 43311                                  
 43312                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 43313                                  	cmp	al,2		;   386 or later?
 43314                                  	mov	ax,Rational386Patch
 43315                                  	jae	short di_set_patch
 43316                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 43317                                  di_set_patch:
 43318                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 43319                                  
 43320                                  %endif
 43321                                  	; Set up the variable temp_dosloc to point to the dos code segment
 43322                                  
 43323 0000756D 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 43324                                  
 43325                                  	; ax now holds segment of DOS code
 43326 0000756F A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 43327                                  
 43328 00007572 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 43329 00007576 8936[4800]              	mov	word [NULDEV],si
 43330                                  ;SR;
 43331                                  ; There are some locations in the Win386 instance data structures
 43332                                  ; which need to be set up with the DOS data segment. First, initialize
 43333                                  ; the segment part of the instance table pointer in the SIS.
 43334                                  
 43335                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]
 43336 0000757A 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 43337                                  
 43338                                  ; Now initialize the segment part of the pointer to the data in each
 43339                                  ; instance table entry.
 43340                                  
 43341 0000757E 56                      	push	si		; preserve pointer to device chain
 43342                                  	; 18/12/2022
 43343                                  	; cx = 0
 43344 0000757F B107                    	mov	cl,7
 43345                                  	;mov	cx,7		; There are 7 entries in the instance table
 43346                                  				; M019
 43347                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 43348 00007581 BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 43349                                  Instance_init_loop:
 43350 00007584 8C1C                    	mov	[si],ds		; set offset in instance entry
 43351                                  	;add	si,6
 43352 00007586 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 43353 00007589 E2F9                    	loop	Instance_init_loop
 43354                                  
 43355                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 43356                                  
 43357                                  	; 18/12/2022
 43358 0000758B B105                    	mov	cl,5
 43359                                  	;mov	cx,5		; There are five entries in the instance table
 43360                                  
 43361                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 43362                                  	;mov	si,11EDh	; point si to segment field
 43363 0000758D BE[ED11]                	mov	si,OldInstanceJunk+6
 43364                                  OldInstance_init_loop:
 43365 00007590 8C1C                    	mov	[si],ds		; set offset in instance entry
 43366 00007592 83C606                  	add	si,6		; move on to next entry
 43367 00007595 E2F9                    	loop	OldInstance_init_loop
 43368 00007597 5E                      	pop	si		; restore pointer to device chain
 43369                                  
 43370                                  ; End of WIN386 2.xx compatibility bullshit
 43371                                  
 43372                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43373                                  %if 0	
 43374                                     	; 30/04/2019
 43375                                  	;push	es
 43376                                  	;pop	ds
 43377                                  			; ds:si points to console device
 43378                                  
 43379                                  	; 24/04/2019 - Retro DOS v4.0
 43380                                  
 43381                                  	; 15/07/2018
 43382                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 43383                                  	; (Set INT 2Ah handler address to an 'IRET')
 43384                                  
 43385                                  	; need crit vector inited to use deviocall
 43386                                  	;push	ds			; preserve segment of device chain
 43387                                  	push	es ; 30/04/2019
 43388                                  
 43389                                  %endif
 43390                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43391 00007598 06                      	push	es
 43392                                  	; 17/12/2022
 43393                                  	;pop	ds
 43394                                  	;push	ds
 43395                                  
 43396 00007599 31C0                    	xor	ax,ax
 43397 0000759B 8ED8                    	mov	ds,ax			; point DS to int vector table
 43398 0000759D B8[FC74]                	mov	ax,initiret
 43399                                  	;mov	[0A8h],ax  ; [2Ah*4]
 43400 000075A0 A3A800                  	mov	[addr_int_ibm],ax
 43401 000075A3 8CC8                    	mov	ax,cs
 43402                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2]
 43403 000075A5 A3AA00                  	mov	[addr_int_ibm+2],ax
 43404 000075A8 1F                      	pop	ds			; restore segment of device chain
 43405                                  
 43406 000075A9 E81A02                  	call	CHARINIT  		; initialize console driver
 43407 000075AC 56                      	push	si			; save pointer to header
 43408                                  
 43409 000075AD 16                      	push	ss			; move pointer to dos data...
 43410 000075AE 07                      	pop	es			; ...into ES
 43411                                  
 43412                                  	;initialize sft for file 0 (CON)
 43413                                  
 43414                                          ; 07/07/2018 - Retro DOS v3.0
 43415                                  	; 24/04/2019 - Retro DOS v4.0
 43416                                  	;mov	di,SFTABL+6 
 43417 000075AF BF[D200]                	MOV	DI,SFTABL+SFT.SFTable	; Point to sft 0
 43418 000075B2 B80300                  	MOV	AX,3
 43419 000075B5 AB                      	STOSW           	; Refcount
 43420                                          ;DEC	AL
 43421                                  	; 22/03/2024
 43422 000075B6 48                      	dec	ax
 43423 000075B7 AB                      	STOSW			; Access rd/wr, compatibility
 43424 000075B8 30C0                    	XOR	AL,AL
 43425 000075BA AA                      	STOSB           	; attribute
 43426                                  	;mov	al,0C3h
 43427 000075BB B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 43428 000075BD AB                      	STOSW			; flags
 43429 000075BE 89F0                    	mov	ax,si
 43430 000075C0 AB                      	stosw			; device pointer in devptr
 43431 000075C1 8CD8                    	mov	ax,ds
 43432 000075C3 AB                      	stosw
 43433 000075C4 31C0                    	xor	ax,ax	; 0
 43434 000075C6 AB                      	stosw			; firclus
 43435 000075C7 AB                      	stosw			; time
 43436 000075C8 AB                      	stosw			; date
 43437 000075C9 48                      	dec	ax	; -1
 43438 000075CA AB                      	stosw			; size
 43439 000075CB AB                      	stosw
 43440 000075CC 40                      	inc	ax	; 0
 43441 000075CD AB                      	stosw			; position
 43442 000075CE AB                      	stosw
 43443                                  	;add	di,7
 43444 000075CF 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 43445                                  				; point at name
 43446                                  	;add	si,10
 43447 000075D2 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 43448                                  				; point to name
 43449 000075D5 B90400                  	mov	cx,4
 43450 000075D8 F3A5                    	rep	movsw		; name
 43451 000075DA B103                    	mov	cl,3
 43452 000075DC B020                    	mov	al," "
 43453 000075DE F3AA                    	rep	stosb		; extension
 43454                                  
 43455 000075E0 5E                      	pop	si		; get back pointer to header
 43456                                  
 43457                                  				; mark device as CON I/O
 43458                                  	; 15/07/2018
 43459                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 43460 000075E1 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 43461                                  	; 12/03/2018
 43462                                  	;mov	[ss:32h],si
 43463 000075E5 368936[3200]            	MOV     [SS:BCON],SI
 43464                                  	;mov	[ss:34h],ds
 43465 000075EA 368C1E[3400]                    MOV     [SS:BCON+2],DS
 43466                                  
 43467                                  	; initialize each device until the clock device is found
 43468                                  
 43469                                  CHAR_INIT_LOOP:
 43470 000075EF C534                            LDS     SI,[SI]			; AUX device
 43471 000075F1 E8D201                  	call	CHARINIT
 43472                                         	;15/07/2018
 43473                                  	;test	byte [SI+4],8
 43474 000075F4 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 43475 000075F8 74F5                            JZ      SHORT CHAR_INIT_LOOP
 43476                                  	; 12/03/2018
 43477                                  	;mov	[ss:2Eh],si
 43478 000075FA 368936[2E00]                    MOV     [SS:BCLOCK],SI
 43479                                  	;mov	[ss:30h],ds
 43480 000075FF 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 43481                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 43482                                  
 43483                                  	;mov	bp,4970			; bp = pointer to free mem
 43484                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 43485                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 43486                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 43487 00007604 BDCF12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 43488                                  
 43489 00007607 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 43490 0000760C 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 43491                                  PERDRV:
 43492                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 43493 00007611 C534                            LDS	SI,[SI]			; Next device
 43494 00007613 83FEFF                          CMP	SI,-1	; 0FFFFh
 43495 00007616 7479                    	JZ	SHORT CONTINIT
 43496                                  
 43497 00007618 E8AB01                          call	CHARINIT
 43498                                  
 43499                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 43500                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 43501                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 43502                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 43503                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 43504                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 43505                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 43506                                  
 43507                                          ; 15/07/2018
 43508                                  	;test	word [SI+4],8000h		; DEVTYP
 43509                                          ; 17/12/2022
 43510                                  	;test	byte [SI+5],80h
 43511 0000761B F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 43512                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 43513 0000761F 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 43514                                  
 43515 00007621 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 43516 00007626 30ED                    	XOR     CH,CH
 43517                                          ; 07/07/2018
 43518                                  	;MOV	[SI+10],CL		; Number of units in name field
 43519 00007628 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname
 43520 0000762B 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 43521 00007630 30F6                    	XOR     DH,DH
 43522 00007632 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 43523 00007637 1E                      	PUSH    DS
 43524 00007638 56                              PUSH    SI
 43525 00007639 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 43526                                  
 43527                                  PERUNIT:
 43528 0000763E 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 43529 00007640 43                              INC     BX
 43530 00007641 43                              INC     BX                      ; On to next BPB
 43531                                  	; 15/12/2022
 43532                                  	; 07/07/2018
 43533                                          ;mov	[ES:BP+DPB.DRIVE],DL
 43534 00007642 26885600                	MOV     [ES:BP],DL
 43535                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43536                                  	;;mov	[ES:BP+0],DL
 43537                                  	;mov	[ES:BP+DPB.DRIVE],DL
 43538                                  
 43539                                  	;MOV	[ES:BP+1],DH
 43540 00007646 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 43541 0000764A 53                              PUSH    BX
 43542 0000764B 51                              PUSH    CX
 43543 0000764C 52                              PUSH    DX
 43544                                  
 43545                                          ;invoke	$SETDPB
 43546 0000764D E85E99                          CALL	_$SETDPB		; build DPB!
 43547                                  
 43548                                  	; 07/07/2018
 43549                                  	;MOV	AX,[ES:BP+2]
 43550 00007650 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 43551                                          ; 12/03/2018
 43552 00007654 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 43553 00007659 7604                    	JBE     SHORT NOTMAX		; N:
 43554 0000765B 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 43555                                  NOTMAX:					
 43556                                  	; set the next dpb field in the currently built bpb
 43557                                  	; and mark as never accessed
 43558                                          
 43559                                  	; 24/04/2019
 43560 0000765F 89E8                    	mov	ax,bp			; get pointer to DPB
 43561                                  	;add	ax,33
 43562 00007661 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 43563                                  					; set seg & offset of next DPB
 43564                                  	;mov	[es:bp+25],ax
 43565 00007664 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 43566                                  	;mov	[es:bp+27],es
 43567 00007668 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 43568                                  					; mark as never accessed
 43569                                  	;mov	byte [es:bp+24],0FFh
 43570 0000766C 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 43571                                  
 43572 00007671 5A                      	POP     DX
 43573 00007672 59                              POP     CX
 43574 00007673 5B                              POP     BX
 43575 00007674 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 43576 00007676 5E                              POP     SI
 43577 00007677 1F                              POP     DS
 43578                                  					; ds:si -> device header
 43579                                  					; store it in the corresponding dpb
 43580                                  	; 07/07/2018
 43581                                  	;MOV	[ES:BP+19],SI ; 24/04/2019
 43582 00007678 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 43583                                  	;MOV	[ES:BP+21],DS ; 24/04/2019
 43584 0000767C 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 43585                                  
 43586 00007680 1E                      	PUSH	DS			; save pointer to device header
 43587 00007681 56                      	PUSH	SI
 43588 00007682 FEC6                    	INC	DH			; inc unit #
 43589 00007684 FEC2                    	INC	DL			; inc drive #
 43590 00007686 8ED8                    	MOV	DS,AX			; restore segment of BPB array
 43591                                  	;add	bp,33 ; 24/04/2019
 43592 00007688 83C521                  	ADD	BP,DPBSIZ		; advance pointer to next dpb
 43593 0000768B E2B1                    	LOOP	PERUNIT			; process all units in each driver
 43594                                  
 43595 0000768D 5E                      	POP     SI			; restore pointer to device header
 43596 0000768E 1F                      	POP     DS
 43597 0000768F EB80                    	JMP	PERDRV			; process all drivers in chain
 43598                                  
 43599                                  CONTINIT:
 43600                                  	; 24/04/2019
 43601                                  	;sub	bp,33			; set link in last DPB to -1
 43602 00007691 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 43603                                  					; set last link offset & segment
 43604                                  ; 23/03/2024 - Retro DOS v4.2
 43605                                  %if 0
 43606                                  	;mov	word [bp+25],0FFFFh
 43607                                  	mov	word [bp+DPB.NEXT_DPB],-1
 43608                                  	;mov	word [bp+27],0FFFFh
 43609                                  	mov	word [bp+DPB.NEXT_DPB+2],-1
 43610                                  %else
 43611                                  	; 23/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43612                                  	;;;
 43613 00007694 B8FFFF                  	mov	ax,0FFFFh ; -1
 43614                                  	;mov	word [bp+25],ax
 43615 00007697 894619                  	mov	word [bp+DPB.NEXT_DPB],ax ; -1
 43616                                  	;mov	word [bp+27],ax
 43617 0000769A 89461B                  	mov	word [bp+DPB.NEXT_DPB+2],ax ; -1
 43618                                  	;;;
 43619                                  %endif
 43620                                  	;add	bp,33
 43621 0000769D 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 43622                                  					; the DPB chain is done.
 43623 000076A0 16                      	push	ss
 43624 000076A1 1F                      	pop	ds
 43625                                  
 43626 000076A2 89E8                    	mov	ax,bp
 43627 000076A4 E858FE                  	call	ParaRound		; round up to segment
 43628                                  
 43629 000076A7 8CDA                    	mov	dx,ds			; dx = dosdata segment
 43630 000076A9 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 43631                                  
 43632 000076AB BB0F00                  	mov	bx,0Fh
 43633                                  	
 43634                                  	; 24/05/2019
 43635                                  	;mov	cx,[ENDMEM]
 43636                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43637                                  	; 17/12/2022
 43638                                  	;mov	cx,[ENDMEM] 
 43639                                  					; set seg inpacketto dosdata
 43640 000076AE 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds
 43641                                  
 43642                                  ; Patch in the segments of the interrupt vectors with current code segment.
 43643                                  ; Also patch in the segment of the pointers in the dosdata area.
 43644                                  ;
 43645                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 43646                                  ; calls were done. The procedure patch_misc_segments is called multiple
 43647                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 43648                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 43649                                  
 43650 000076B2 52                      	push	dx			; preserve first free segment
 43651                                  
 43652 000076B3 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 43653 000076B6 8EC0                    	mov	es,ax			; es = segment of DOS
 43654 000076B8 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 43655                                  
 43656 000076BE E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 43657 000076C1 E8E401                  	call	patch_misc_segments	; patch in segments for sharer and
 43658                                  					; other tables with seg in ES.
 43659                                  	; 17/12/2022
 43660                                  	; cx = 0
 43661 000076C4 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 43662                                  
 43663 000076C8 5A                      	pop	dx			; restore first free segment
 43664                                  
 43665                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 43666                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 43667                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 43668                                  ; low_mem_stub by seg_reinit.
 43669                                  
 43670                                  	;xor	ax,ax ; 0
 43671                                  	;mov	ds,ax
 43672                                  	;mov	es,ax
 43673                                  	; 17/12/2022
 43674                                  	; cx = 0
 43675                                  	;xor	cx,cx ; 0
 43676 000076C9 8ED9                    	mov	ds,cx
 43677 000076CB 8EC1                    	mov	es,cx
 43678                                  
 43679                                  	; set the segment of int 24 vector that was
 43680                                  	; left out by patch_vec_segments above.
 43681                                  
 43682                                  	; 17/12/2022
 43683                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43684                                  ;%if 0
 43685                                  	; 24/05/2019
 43686                                  	;;mov	di,90h
 43687                                  	;;mov	di,4*int_fatal_abort
 43688                                  	;mov	di,addr_int_fatal_abort
 43689 000076CD BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 43690                                  
 43691 000076D0 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 43692                                  	;mov	[di+2],ax  ; int 24h segment
 43693 000076D4 8905                    	mov	[di],ax ; 24/05/2019
 43694                                  
 43695                                  	;;mov	di,82h
 43696                                  	;mov	di,INTBASE+2
 43697                                  
 43698                                  ;%endif
 43699                                  	; 17/12/2022
 43700                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43701                                  	;;mov	di,90h
 43702                                  	;;mov	di,4*int_fatal_abort
 43703                                  	;mov	di,addr_int_fatal_abort
 43704                                  	;mov	ax,[ss:TEMP_DOSLOC]
 43705                                  	;mov	[di+2],ax  ; int 24h segment
 43706                                  	;;mov	di,82h
 43707                                  	;mov	di,INTBASE+2
 43708                                  
 43709                                  	; set default divide trap offset
 43710                                  
 43711                                  	;mov	word ptr ds:[0],offset doscode:divov
 43712 000076D6 C7060000[4251]          	mov	word [0],DIVOV
 43713                                  
 43714                                  	; set vectors 20-28 and 2a-3f to point to iret.
 43715                                  
 43716                                  	;mov	di,80h
 43717 000076DC BF8000                  	mov	di,INTBASE
 43718                                  	;mov	ax,offset doscode:irett
 43719 000076DF B8[E202]                	mov	ax,IRETT
 43720                                  
 43721                                  	; 17/12/2022
 43722                                  	; cx = 0
 43723 000076E2 B109                    	mov	cl,9
 43724                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 43725                                  					;   sets offsets for ints 20h-28h
 43726                                  iset1:
 43727 000076E4 AB                      	stosw
 43728                                  	;add	di,2
 43729                                  	; 20/09/2023
 43730 000076E5 47                      	inc	di
 43731 000076E6 47                      	inc	di
 43732 000076E7 E2FB                    	loop	iset1
 43733                                  
 43734 000076E9 83C704                  	add	di,4			; skip vector 29h
 43735                                  
 43736                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 43737                                  ;					;   sets offsets for ints 2ah-2fh
 43738                                  ;iset2:
 43739                                  ;	stosw
 43740                                  ;	add	di,2
 43741                                  ;	loop	iset2
 43742                                  
 43743                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43744                                  ; patch_vec_segments above. So skip it.
 43745                                  
 43746                                  ;	add	di,8			; skip vector 30h & 31h 
 43747                                  
 43748                                  	;;;
 43749                                  	; 06/05/2019 - Retro DOS v4.0
 43750                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 43751                                  	; 17/12/2022
 43752 000076EC B105                    	mov	cl,5 ; 28/06/2019
 43753                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43754                                  	;mov	cx,6
 43755                                  iset2:
 43756 000076EE AB                      	stosw
 43757                                  	;add	di,2
 43758                                  	; 20/09/2023
 43759 000076EF 47                      	inc	di
 43760 000076F0 47                      	inc	di
 43761 000076F1 E2FB                    	loop	iset2
 43762                                  
 43763                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43764                                  	; 17/12/2022
 43765 000076F3 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 43766                                  	;add	di,8
 43767                                  	;;;
 43768                                  
 43769                                  	; 17/12/2022
 43770 000076F6 B10E                    	mov	cl,14
 43771                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 43772                                  					;   sets offsets for ints 32h-3fh
 43773                                  iset3:
 43774 000076F8 AB                      	stosw
 43775                                  	;add	di,2
 43776                                  	; 20/09/2023
 43777 000076F9 47                      	inc	di
 43778 000076FA 47                      	inc	di
 43779 000076FB E2FB                    	loop	iset3
 43780                                  
 43781                                  ;if installed
 43782                                  	; set the offset of int2f handler
 43783                                  	;mov	word [0BCh],INT2F
 43784 000076FD C706BC00[FD06]          	mov	word [02Fh*4],INT2F
 43785                                  	; set segment to doscode as we have to do int 2f to check for XMS
 43786 00007703 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 43787                                  	;mov	[0BEh],ax
 43788 00007707 A3BE00                  	mov	[(02Fh*4)+2],ax
 43789                                  ;endif
 43790                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 43791                                  	; long jump will be patched in by seg_reinit
 43792                                  
 43793                                  	;mov	byte [C0h],0EAh
 43794 0000770A C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43795                                  	;mov	byte [C1h],CALL_ENTRY
 43796 0000770F C706C100[E302]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43797                                  
 43798 00007715 C7068000[DC02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43799 0000771B C7068400[0803]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43800 00007721 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43801 00007727 89168A00                	mov	word [addr_int_terminate+2],dx
 43802 0000772B C7069400[2D05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43803 00007731 C7069800[B405]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43804 00007737 C7069C00[6560]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43805                                  
 43806 0000773D 16                      	push	ss
 43807 0000773E 1F                      	pop	ds
 43808                                  	
 43809                                  	; 24/05/2019
 43810                                  	;push	ss
 43811                                  	;pop	es
 43812                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43813                                  	; 17/12/2022
 43814                                  	;push	ss
 43815                                  	;pop	es
 43816                                  
 43817 0000773F 52                      	push	dx			; remember address of arena
 43818                                  
 43819 00007740 42                      	inc	dx			; leave room for arena header
 43820                                  	;mov	[330h],dx
 43821 00007741 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43822                                  
 43823 00007745 31FF                    	xor	di,di			; point es:di at end of memory
 43824 00007747 8EC2                    	mov	es,dx			; ...where psp will be
 43825 00007749 31C0                    	xor	ax,ax
 43826                                  	;mov	cx,80h			; psp is 128 words
 43827                                  	; 17/12/2022
 43828 0000774B B180                    	mov	cl,128 ; 28/06/2019
 43829                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43830                                  	;mov	cx,128
 43831                                  
 43832 0000774D F3AB                    	rep	stosw			; zero out psp area
 43833 0000774F A1[4603]                        mov     ax,[ENDMEM]
 43834                                  	
 43835                                  	; 17/12/2022
 43836                                  	; cx = 0
 43837 00007752 E8A799                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43838                                  
 43839                                  	; ds, es now point to PSP
 43840                                  
 43841 00007755 16                      	push	ss
 43842 00007756 1F                      	pop	ds
 43843                                  
 43844                                  	;mov	di,24
 43845 00007757 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43846 0000775A 31C0                    	xor	ax,ax
 43847 0000775C AB                      	stosw
 43848 0000775D AA                      	stosb				; 0,1 and 2 are con device
 43849 0000775E B0FF                    	mov	al,0FFh
 43850                                  	;mov	cx,FILPERPROC-3 ; 17
 43851                                  	; 17/12/2022
 43852                                  	; cx = 4
 43853 00007760 B111                    	mov	cl,FILPERPROC-3 ; 17
 43854 00007762 F3AA                    	rep	stosb			; rest are unused
 43855                                  
 43856 00007764 16                      	push	ss
 43857 00007765 07                      	pop	es
 43858                                  					; must be set to print messages
 43859 00007766 8C1E[2C00]              	mov	[SFT_ADDR+2],ds
 43860                                  
 43861                                  ; after this point the char device functions for con will work for
 43862                                  ; printing messages
 43863                                  
 43864                                  	; 24/04/2019 - Retro DOS v4.0
 43865                                  
 43866                                  ; 12/05/2019
 43867                                  ;
 43868                                  ;write_version_msg:
 43869                                  ;
 43870                                  ;	;if	(not ibm)
 43871                                  ;	;mov	si,offset doscode:header
 43872                                  ;	mov	si,HEADER
 43873                                  ;outmes:
 43874                                  ;	;lods	cs:byte ptr [si]
 43875                                  ;	cs
 43876                                  ;	lodsb
 43877                                  ;	cmp	al,"$"
 43878                                  ;	je	short outdone
 43879                                  ;	call	OUTT
 43880                                  ;	jmp	short outmes
 43881                                  ;outdone:
 43882                                  ;	push	ss			; out stomps on segments
 43883                                  ;	pop	ds
 43884                                  ;	push	ss
 43885                                  ;	pop	es
 43886                                  ;	;endif
 43887                                  
 43888                                  	; at this point es is dosdata
 43889                                  
 43890                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 43891                                  	; in sysinittable (ms_data.asm)
 43892                                  
 43893                                  	;mov	si,0D28h
 43894 0000776A BE[280D]                	mov	si,SysInitTable
 43895                                  
 43896                                  	; 17/12/2022
 43897                                  	; ds = es = ss
 43898                                  
 43899                                  	; 17/12/2022
 43900                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43901                                  ;%if 0
 43902                                  	;;mov	[es:si+6],es
 43903                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43904                                  	;;mov	[es:si+2],es
 43905                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43906                                  	
 43907 0000776D 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43908 00007770 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43909                                  
 43910                                  	; buffhead -> dosdata:hashinitvar
 43911                                  
 43912                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43913 00007773 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43914                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43915                                  	;mov	si,6Dh
 43916 00007777 BE[6D00]                	mov	si,HASHINITVAR
 43917                                  	;mov	[es:BUFFHEAD],si
 43918 0000777A 8936[3800]              	mov	[BUFFHEAD],si
 43919                                  
 43920 0000777E 5A                              pop     dx                      ; restore address of arena
 43921                                  
 43922                                  	;mov	[032Ch+2],dx
 43923 0000777F 8916[2E03]                      mov     [DMAADD+2],dx
 43924                                  
 43925                                  	;mov	[es:arena_head],dx
 43926 00007783 8916[2400]              	mov	[arena_head],dx
 43927                                  
 43928                                  ;%endif
 43929                                  
 43930                                  ; 17/12/2022
 43931                                  %if 0
 43932                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43933                                  	;;;
 43934                                  	;mov	[es:si+6],es
 43935                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43936                                  	;mov	[es:si+2],es
 43937                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43938                                  
 43939                                  	; buffhead -> dosdata:hashinitvar 
 43940                                  
 43941                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43942                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43943                                  	;mov	si,6Dh
 43944                                  	mov	si,HASHINITVAR
 43945                                  	mov	[es:BUFFHEAD],si
 43946                                  
 43947                                          pop     dx                      ; restore address of arena
 43948                                  
 43949                                  	;mov	[032Ch+2],dx
 43950                                          mov     [DMAADD+2],dx
 43951                                  
 43952                                  	mov	[es:arena_head],dx
 43953                                  	;;;
 43954                                  %endif
 43955                                  
 43956 00007787 8EDA                            mov     ds,dx
 43957                                  
 43958                                  	;mov	byte [0],'Z'
 43959 00007789 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43960                                          ;mov	word [1],0
 43961 0000778E C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43962                                  
 43963 00007794 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43964 00007798 29D0                    	sub	ax,dx
 43965 0000779A 48                              dec     ax
 43966 0000779B A30300                          mov     [ARENA.SIZE],ax
 43967                                  
 43968                                  	; point to sft 0
 43969                                  
 43970                                  	;mov	di,offset dosdata:sftabl + sftable
 43971                                  	;mov	di,SFTABL+6
 43972 0000779E BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43973 000077A1 B80300                          mov     ax,3
 43974 000077A4 AB                              stosw           		; adjust refcount
 43975                                  
 43976                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43977                                  
 43978                                  	;mov	di,offset dosdata:sysinittable
 43979                                  	;mov	di,0D28h
 43980 000077A5 BF[280D]                	mov	di,SysInitTable	
 43981                                  
 43982 000077A8 42                      	inc	dx			; advance dx from arena to psp
 43983 000077A9 8EDA                    	mov	ds,dx			; point ds to psp
 43984                                  
 43985                                  					; pass the address os seg_reinit
 43986                                  					; in dx
 43987 000077AB BA[1978]                	mov	dx,seg_reinit
 43988 000077AE B9[5572]                	mov	cx,exepatch_start
 43989 000077B1 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43990                                  
 43991 000077B5 B8[FC74]                	mov	ax,SYSBUF
 43992 000077B8 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43993                                  	
 43994 000077BB 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43995 000077C0 368E16[8605]                    mov     ss,[ss:USER_SS]
 43996                                  
 43997 000077C5 CB                              retf
 43998                                  
 43999                                  ;
 44000                                  ; END OF DOSINIT
 44001                                  ;
 44002                                  ;--------------------------------------------------------------------------
 44003                                  
 44004                                  CHARINIT:
 44005                                  	; 24/04/2019 - Retro DOS v4.0
 44006                                  	; 07/07/2018 - Retro DOS v3.0
 44007                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 44008 000077C6 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 44009                                  	;mov	byte [ss:035Bh],0
 44010 000077CC 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 44011                                  	;mov	byte [ss:035Ch],0
 44012 000077D2 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 44013                                  	;mov	word [ss:035BD],0
 44014 000077D8 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 44015 000077DF 06                              PUSH	ES
 44016 000077E0 53                              PUSH	BX
 44017 000077E1 50                              PUSH	AX
 44018 000077E2 BB[5A03]                        MOV	BX,DEVCALL
 44019                                          ;PUSH	CS
 44020 000077E5 16                      	PUSH	SS ; 30/04/2019
 44021 000077E6 07                              POP	ES
 44022 000077E7 E851CD                          CALL	DEVIOCALL2
 44023 000077EA 58                      	POP	AX
 44024 000077EB 5B                              POP	BX
 44025 000077EC 07                              POP	ES
 44026 000077ED C3                              RETN
 44027                                  
 44028                                  ; 25/04/2019 - Retro DOS v4.0
 44029                                  
 44030                                  ;-----------------------------------------------------------------------------
 44031                                  ;
 44032                                  ;	check_XMM: routine to check presence of XMM driver
 44033                                  ;
 44034                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 44035                                  ;
 44036                                  ;	USED:	none
 44037                                  ;
 44038                                  ;-----------------------------------------------------------------------------
 44039                                  
 44040                                  check_XMM: ; proc near
 44041                                  ;
 44042                                  ; determine whether or not an XMM driver is installed
 44043                                  ;
 44044 000077EE 50                      	push	ax
 44045                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 44046 000077EF B80043                  	mov	ax,4300h
 44047 000077F2 CD2F                    	int	2Fh
 44048                                  		; - Multiplex - XMS - INSTALLATION CHECK
 44049                                  		; Return: AL = 80h XMS driver installed
 44050                                  		; AL <> 80h no driver
 44051 000077F4 3C80                    	cmp	al,80h			; Q: installed
 44052 000077F6 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 44053                                  ;
 44054                                  ; get the XMM control functions entry point, save it, we
 44055                                  ; need to call it later.
 44056                                  ;
 44057 000077F8 53                      	push	bx
 44058 000077F9 52                      	push	dx
 44059 000077FA 1E                      	push	ds
 44060 000077FB 06                      	push	es
 44061                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 44062 000077FC B81043                  	mov	ax,4310h
 44063 000077FF CD2F                    	int	2Fh
 44064                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 44065                                  		; Return: ES:BX -> driver entry point
 44066                                  
 44067 00007801 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 44068                                  
 44069 00007806 891E[6311]              	mov	[XMMcontrol],bx
 44070 0000780A 8C06[6511]              	mov	[XMMcontrol+2],es
 44071                                  cXMMexit:
 44072 0000780E F8                      	clc
 44073 0000780F 07                      	pop	es
 44074 00007810 1F                      	pop	ds
 44075 00007811 5A                      	pop	dx
 44076 00007812 5B                      	pop	bx
 44077 00007813 58                      	pop	ax
 44078 00007814 C3                      	retn				; done
 44079                                  ;
 44080                                  ; set carry if XMM driver not present
 44081                                  ;
 44082                                  cXMM_no_driver:
 44083 00007815 F9                      	stc
 44084 00007816 58                      	pop	ax
 44085 00007817 C3                      	retn
 44086                                  
 44087                                  ;-----------------------------------------------------------------------------
 44088                                  ;
 44089                                  ; Procedure Name : seg_reinit
 44090                                  ;
 44091                                  ; Inputs	 : ES has final dos code location
 44092                                  ;		   AX = 0 / 1
 44093                                  ;
 44094                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 44095                                  ;		   if AX =0
 44096                                  ;		      if first entry
 44097                                  ;			 patch segment & offset of vectors with stub
 44098                                  ;			 and stub with segment in ES
 44099                                  ;		      else
 44100                                  ;			 patch stub with segment in ES
 44101                                  ;
 44102                                  ;		   else if AX = 1
 44103                                  ;			patch segment of vectors with segment in ES	
 44104                                  ;
 44105                                  ; NOTE		 : This routine can be called at most twice!
 44106                                  ;
 44107                                  ; Regs Mod.	 : es, ax, di, cx, bx
 44108                                  ;-----------------------------------------------------------------------------
 44109                                  
 44110 00007818 00                      num_entry: db	0		; keeps track of the # of times this routine
 44111                                  				; has been called. (0 or 1)
 44112                                  
 44113                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 44114                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 44115                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 44116                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 44117                                  
 44118                                  seg_reinit:	; proc	far
 44119 00007819 1E                      	push	ds
 44120                                  
 44121 0000781A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 44122                                  
 44123 0000781F E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 44124                                  					; other tables with seg in ES.
 44125                                  	; 17/12/2022
 44126                                  	; cx = 0
 44127 00007822 39C8                    	cmp	ax,cx ; 0
 44128                                  	;cmp	ax,0
 44129 00007824 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 44130                                  
 44131                                  	; 17/12/2022
 44132 00007826 2E380E[1878]            	cmp	[cs:num_entry],cl ; 0
 44133                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 44134 0000782B 7508                    	jne	short second_entry	; N: just patch the stub with 
 44135                                  					;    segment in ES
 44136                                  					; Y: patch the vectors with stub 
 44137 0000782D 8CD8                    	mov	ax,ds
 44138 0000782F E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 44139 00007832 E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 44140                                  					; with those in the stub.
 44141                                  	; 17/12/2022
 44142                                  	; cx = 0
 44143                                  second_entry:
 44144 00007835 8CC0                    	mov	ax,es			; patch the stub with segment in es
 44145                                  
 44146                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 44147                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 44148 00007837 BF[6210]                	mov	di,DOSINTTABLE
 44149                                  	; 17/12/2022
 44150                                  	; cx = 0
 44151                                  	;mov	cx,9
 44152 0000783A B109                    	mov	cl,9
 44153 0000783C 1E                      	push	ds			
 44154 0000783D 07                      	pop	es			; es:di -> DOSINTTABLE
 44155                                  
 44156                                  dosinttabloop:
 44157                                  	;add	di,2
 44158                                  	; 19/06/2023
 44159 0000783E 47                      	inc	di
 44160 0000783F 47                      	inc	di
 44161 00007840 AB                      	stosw
 44162 00007841 E2FB                    	loop	dosinttabloop	
 44163                                  
 44164                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 44165                                  ; use the HMA, so we don't want to check CS
 44166                                  
 44167                                  ;ifndef ROMDOS
 44168 00007843 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 44169 00007846 7220                    	jb	short sr_done		; N: done
 44170                                  ;endif
 44171 00007848 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 44172 0000784B 721B                    	jc	short sr_done		; failed to set up XMS do not do
 44173                                  					; A20 toggling in the stub.
 44174                                  	; 17/12/2022
 44175                                  	; cx = 0
 44176 0000784D E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 44177                                  ; M021-
 44178                                  	;mov	byte [1211h],1
 44179 00007850 C606[1112]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 44180                                  				
 44181                                  					; set pointer to the routine that 
 44182                                  					; patches buggy exepacked code.
 44183                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 44184 00007855 C706[1212][A573]        	mov	word [FixExePatch],ExePatch
 44185                                  					; M068: set pointer to the routine 
 44186                                  					; M068: that detects copy protected
 44187                                  					; M068: apps
 44188                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 44189 0000785B C706[6100][C674]        	mov	word [ChkCopyProt],IsCopyProt
 44190                                  
 44191                                  	; 19/09/2023
 44192 00007861 EB05                    	jmp	short sr_done
 44193                                  
 44194                                  ; 28/12/2022 - Retro DOS v4.1
 44195                                  %if 0
 44196                                  ;----------------------------------------------------------------------------
 44197                                  
 44198                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 44199                                  
 44200                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44201                                  ;
 44202                                  ;; M020 - begin
 44203                                  ;
 44204                                  ;	call	WhatCPUType
 44205                                  ;	cmp	al,1
 44206                                  ;	jne	short sr_done 		; we need Rational Patch only
 44207                                  ;					;  on 286 systems
 44208                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 44209                                  ;	mov	word [RationalPatchPtr],RationalPatch
 44210                                  ;
 44211                                  ;; M020 - end
 44212                                  ;
 44213                                  ;	jmp	short sr_done
 44214                                  ;
 44215                                  ;patch_vec_seg:				; patch vectors with segment in es
 44216                                  ;	mov	ax,es
 44217                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 44218                                  ;					; NOTE we don't have to patch the 
 44219                                  ;					; offsets as they have been already
 44220                                  ;					; set to the doscode offsets at
 44221                                  ;					; DOSINIT.
 44222                                  ;sr_done:
 44223                                  ;	mov	byte [cs:num_entry],1
 44224                                  ;	pop	ds
 44225                                  ;	retf	; ! far return !
 44226                                  
 44227                                  ;----------------------------------------------------------------------------
 44228                                  ;
 44229                                  ; Procedure Name : WhatCPUType
 44230                                  ;
 44231                                  ; Inputs	 : none
 44232                                  ;
 44233                                  ; Outputs	 : AL = 0 if CPU <  286
 44234                                  ;		      = 1 if CPU == 286
 44235                                  ;		      = 2 if CPU >= 386
 44236                                  ;
 44237                                  ; Regs. Mod.	 : AX
 44238                                  ;
 44239                                  ;----------------------------------------------------------------------------
 44240                                  
 44241                                  WhatCPUType:
 44242                                  	; 25/04/2019 - Retro DOS v4.0
 44243                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 44244                                  
 44245                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 44246                                  
 44247                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 44248                                  ; 	it is called from both CODE and SYSINITSEG.
 44249                                  ;
 44250                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 44251                                  ;  Returns: AX = 0 if 8086 or 8088
 44252                                  ;              = 1 if 80286
 44253                                  ;              = 2 if 80386
 44254                                  
 44255                                  	; 04/11/2022
 44256                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 44257                                  
 44258                                  Get_CPU_Type:	;macro
 44259                                  	pushf
 44260                                  	push	bx			; preserve bx
 44261                                  	xor	bx,bx			; init bx to zero
 44262                                  
 44263                                  	xor	ax,ax			; 0000 into AX
 44264                                  	push	ax			; put it on the stack...
 44265                                  	popf				; ...then shove it into the flags
 44266                                  	pushf				; get it back out of the flags...
 44267                                  	pop	ax			; ...and into ax
 44268                                  	and	ax,0F000h		; mask off high four bits
 44269                                  	cmp	ax,0F000h		; was it all 1's?
 44270                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 44271                                  
 44272                                  	mov	ax,0F000h		; now try to set the high four bits..
 44273                                  	push	ax
 44274                                  	popf
 44275                                  	pushf
 44276                                  	pop	ax			; ...and see what happens
 44277                                  	and	ax,0F000h		; any high bits set ?
 44278                                  	jz	short cpu_286		; nay; it's an 80286
 44279                                  
 44280                                  cpu_386:				; bx starts as zero
 44281                                  	inc	bx			; inc twice if 386
 44282                                  cpu_286:				; just inc once if 286
 44283                                  	inc	bx
 44284                                  cpu_8086:				; don't inc at all if 086
 44285                                  	mov	ax,bx			; put CPU type value in ax
 44286                                  	pop	bx			; restore original bx
 44287                                  	popf
 44288                                  	
 44289                                  	;endm
 44290                                  
 44291                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 44292                                  	retn	; 19/09/2023
 44293                                  
 44294                                  ; 19/09/2023
 44295                                  ;	; 04/11/2022
 44296                                  ;	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 44297                                  ;	cmp	al,1
 44298                                  ;	jne	short sr_done 		; we need Rational Patch only
 44299                                  ;					;  on 286 systems
 44300                                  ;	mov	word [RationalPatchPtr],RationalPatch
 44301                                  
 44302                                  ;----------------------------------------------------------------------------
 44303                                  %endif	; 28/12/2022
 44304                                  
 44305                                  	; 19/09/2023
 44306                                  	;jmp	short sr_done
 44307                                  
 44308                                  patch_vec_seg:				; patch vectors with segment in es
 44309 00007863 8CC0                    	mov	ax,es
 44310 00007865 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 44311                                  					; NOTE we don't have to patch the 
 44312                                  					; offsets as they have been already
 44313                                  					; set to the doscode offsets at
 44314                                  					; DOSINIT.
 44315                                  sr_done:
 44316 00007868 2EC606[1878]01          	mov	byte [cs:num_entry],1
 44317 0000786E 1F                      	pop	ds
 44318 0000786F CB                      	retf	; ! far return !
 44319                                  
 44320                                  ;----------------------------------------------------------------------------
 44321                                  ;
 44322                                  ; Procedure Name : patch_vec_segments
 44323                                  ;
 44324                                  ; Inputs	 : ax -> has segment address to patch in
 44325                                  ;		   ds -> DOSDATA
 44326                                  ;
 44327                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 44328                                  ;			
 44329                                  ;			0,20-28,3a-3f
 44330                                  ;
 44331                                  ; Regs. Mod.	 : DI,CX,DX,AX
 44332                                  ;
 44333                                  ;----------------------------------------------------------------------------
 44334                                  
 44335                                  patch_vec_segments:
 44336                                  
 44337 00007870 06                      	push	es
 44338                                  
 44339 00007871 31C9                    	xor	cx,cx ; 0
 44340 00007873 8EC1                    	mov	es,cx
 44341                                  
 44342                                  	;mov	di,82h
 44343 00007875 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 44344                                  
 44345 00007878 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 44346                                  
 44347                                  					; set vectors 20 & 21
 44348                                  	; 04/11/2022
 44349                                  	;mov	cx,2
 44350                                  	; 17/12/2022
 44351                                  	;mov	cl,2
 44352                                  ps_set1:
 44353 0000787C AB                      	stosw	; int 20h segment
 44354                                  	;add	di,2
 44355                                  	; 17/12/2022
 44356 0000787D 47                      	inc	di
 44357 0000787E 47                      	inc	di
 44358                                  	;loop	ps_set1
 44359                                  
 44360                                  	; 17/12/2022
 44361 0000787F AB                      	stosw	; int 21h segment
 44362                                  	;inc	di
 44363                                  	;inc	di
 44364                                  
 44365                                  	;add	di,4			; skip int 22h vector
 44366 00007880 83C706                  	add	di,6 ; *
 44367                                  
 44368 00007883 AB                      	stosw				; set int 23h
 44369 00007884 83C706                  	add	di,6			; skip int 24h
 44370                                  
 44371                                  					; set vectors 25-28 and 2a-3f
 44372                                  	; 04/11/2022
 44373                                  	;mov	cx,4			; set 4 segments
 44374                                  	; 17/12/2022
 44375 00007887 B104                    	mov	cl,4
 44376                                  ps_set2:
 44377 00007889 AB                      	stosw
 44378                                  	;add	di,2
 44379                                  	; 17/12/2022
 44380 0000788A 47                      	inc	di
 44381 0000788B 47                      	inc	di
 44382 0000788C E2FB                    	loop	ps_set2
 44383                                  
 44384 0000788E 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 44385                                  					;   already be set.
 44386                                  	; 04/11/2022
 44387                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 44388                                  	; 17/12/2022
 44389 00007891 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 44390                                  ps_set3:
 44391 00007893 AB                      	stosw
 44392                                  	;add	di,2
 44393                                  	; 17/12/2022
 44394 00007894 47                      	inc	di
 44395 00007895 47                      	inc	di
 44396 00007896 E2FB                    	loop	ps_set3
 44397                                  
 44398                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 44399                                  ; below. So skip it.
 44400                                  
 44401 00007898 83C708                  	add	di,8			; skip vector 30h & 31h 
 44402                                  	
 44403                                  	; 04/11/2022
 44404                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 44405                                  	; 17/12/2022
 44406 0000789B B10E                    	mov	cl,14			;  sets segs for ints 32h-3fh
 44407                                  ps_set4:
 44408 0000789D AB                      	stosw
 44409                                  	;add	di,2
 44410                                  	; 17/12/2022
 44411 0000789E 47                      	inc	di
 44412 0000789F 47                      	inc	di
 44413 000078A0 E2FB                    	loop	ps_set4
 44414                                  
 44415                                  ; set offset of int2f
 44416                                  
 44417                                  ;if installed
 44418                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 44419                                  ;endif
 44420                                  	;mov	[es:0C3h],ax
 44421 000078A2 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 44422                                  	; 17/12/2022
 44423                                  	; cx = 0
 44424 000078A6 07                      	pop	es
 44425 000078A7 C3                      	retn
 44426                                  
 44427                                  ;---------------------------------------------------------------------------
 44428                                  ;
 44429                                  ; Procedure Name : patch_misc_segments
 44430                                  ;
 44431                                  ; Inputs	 : es = segment to patch in
 44432                                  ;		   ds = dosdata
 44433                                  ;
 44434                                  ; outputs	 : patches in the sharer and other tables in the dos
 44435                                  ;		   with right dos code segment in es
 44436                                  ;
 44437                                  ; Regs Mod	 : DI,SI,CX
 44438                                  ;
 44439                                  ;---------------------------------------------------------------------------
 44440                                  
 44441                                  patch_misc_segments:
 44442                                  
 44443 000078A8 53                      	push	bx
 44444 000078A9 06                      	push	es
 44445 000078AA 50                      	push	ax
 44446                                  
 44447 000078AB 8CC0                    	mov	ax,es			; ax - > DOS segment
 44448                                  	
 44449 000078AD 1E                      	push	ds
 44450 000078AE 07                      	pop	es			; es -> DOSDATA
 44451                                  	
 44452                                  ; initialize the jump table for the sharer...
 44453                                  
 44454                                  	;mov	di,offset dosdata:jshare
 44455                                  	;mov	di,90h
 44456 000078AF BF[9000]                	mov	di,JShare
 44457                                  	;mov	bx,[0AAAh]
 44458 000078B2 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 44459                                  					; table was patched during the first
 44460                                  					; call to this routine
 44461 000078B6 B90F00                  	mov	cx,15
 44462                                  jumptabloop:
 44463                                  	;add	di,2			; skip offset
 44464                                  	; 17/12/2022
 44465 000078B9 47                      	inc	di
 44466 000078BA 47                      	inc	di
 44467 000078BB 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 44468 000078BE 7405                    	je	short share_patch	; Y: patch in sharer table
 44469                                  					; N: 
 44470 000078C0 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 44471 000078C3 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 44472                                  share_patch:
 44473 000078C5 AB                      	stosw				; drop in segment
 44474                                  no_share_patch:
 44475 000078C6 E2F1                    	loop	jumptabloop
 44476                                  					; BUGBUG patching the country info 
 44477                                  					; with dosdata can be done inline
 44478                                  					; in dosinit.
 44479                                  					; for dos 3.3 country info
 44480                                  					; table address
 44481                                  
 44482                                  	;mov	si,offset dosdata:country_cdpg
 44483                                  	;mov	si,122Ah   
 44484 000078C8 BE[2A12]                	mov	si,COUNTRY_CDPG
 44485                                  					; initialize double word
 44486                                  					; pointers with dosdata in ds
 44487                                  	;mov	[si+4Fh],ds
 44488                                  	;mov	[si+54h],ds
 44489                                  	;mov	[si+59h],ds
 44490                                  	;mov	[si+5Eh],ds
 44491                                  	;mov	[si+80h],ds
 44492                                  	;mov	[si+63h],ds
 44493 000078CB 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 44494 000078CE 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 44495 000078D1 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 44496 000078D4 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 44497 000078D7 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 44498 000078DB 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 44499                                  
 44500                                  					; fastopen routines are in doscode
 44501                                  					; so patch with doscode seg in ax
 44502                                  
 44503                                  	;mov	si,offset dosdata:fastopentable
 44504                                  	;mov	si,0D30h
 44505 000078DE BE[300D]                	mov	si,FastOpenTable
 44506                                  
 44507                                  	; 17/12/2022
 44508                                  	; bx = [TEMP_DOSLOC]
 44509 000078E1 83FBFF                  	cmp	bx,-1
 44510                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 44511 000078E4 7405                    	je	short fast_patch	; Y: patch segment
 44512                                  	;mov	cx,[TEMP_DOSLOC]
 44513                                  					; Q: has fastopen patched in it's
 44514                                  					;    segment
 44515                                  	; 17/12/2022
 44516 000078E6 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 44517                                  	;;cmp	cx,[si+4]
 44518                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 44519 000078E9 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 44520                                  
 44521                                  fast_patch:
 44522                                  	;mov	[si+4],ax
 44523 000078EB 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 44524                                  no_fast_patch:
 44525                                  	; 17/12/2022
 44526                                  	; cx = 0
 44527 000078EE 58                      	pop	ax
 44528 000078EF 07                      	pop	es
 44529 000078F0 5B                      	pop	bx
 44530                                  
 44531 000078F1 C3                      	retn
 44532                                  
 44533                                  ;--------------------------------------------------------------------------
 44534                                  ;
 44535                                  ; Procedure Name : patch_offset
 44536                                  ; 
 44537                                  ; Inputs	 : NONE
 44538                                  ;
 44539                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 44540                                  ;		   0,20-28,3a-3f, and 30,31
 44541                                  ;
 44542                                  ;
 44543                                  ; Regs. Mod	 : AX,DI,CX
 44544                                  ;--------------------------------------------------------------------------
 44545                                  
 44546                                  patch_offset:
 44547 000078F2 06                      	push	es		; preserve es
 44548                                  
 44549 000078F3 31C0                    	xor	ax,ax
 44550 000078F5 8EC0                    	mov	es,ax
 44551                                  				; set default divide trap address
 44552                                  	;mov	word ptr es:[0],offset dosdata:ldivov
 44553                                  	;mov	word [es:0],108Ah
 44554 000078F7 26C7060000[8A10]        	mov	word [es:0],ldivov
 44555                                  
 44556                                  	;mov	di,80h
 44557 000078FE BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 44558                                  	;mov	ax,offset dosdata:lirett
 44559                                  	;mov	ax,10DAh
 44560 00007901 B8[DA10]                	mov	ax,lirett
 44561                                  				; set vectors 20 & 21 to point to iret.
 44562                                  	; 17/12/2022
 44563                                  	; cx = 0
 44564                                  
 44565                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 44566                                  po_iset1:
 44567 00007904 AB                      	stosw	; int 20h offset
 44568                                  	;add	di,2 ; *
 44569                                  	;loop	po_iset1
 44570                                  	; 17/12/2022
 44571 00007905 47                      	inc	di
 44572 00007906 47                      	inc	di
 44573 00007907 AB                      	stosw	; int 21h offset
 44574                                  
 44575                                  	;add	di,4		; skip vector 22h
 44576                                  	; 17/12/2022
 44577 00007908 83C706                  	add	di,6 ; *
 44578                                  
 44579 0000790B AB                      	stosw			; set offset of 23h
 44580                                  	;add	di,6		; skip 24h
 44581                                  	; 19/09/2023
 44582 0000790C 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 44583                                  
 44584                                  				; set vectors 25-28 and 2a-3f to iret.
 44585                                  	; 04/11/2022
 44586                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 44587                                  	; 19/09/2023
 44588                                  	; 17/12/2022
 44589                                  	;mov	cl,4		; sets offsets for ints 25h-28h
 44590                                  po_iset2:
 44591 0000790F AB                      	stosw		; set offset for int 28h ; 19/09/2023
 44592                                  	;add	di,2
 44593                                  	; 19/09/2023
 44594                                  	; 17/12/2022
 44595                                  	;inc	di
 44596                                  	;inc	di
 44597                                  	; 19/09/2023
 44598                                  	;loop	po_iset2
 44599                                  
 44600                                  	;add	di,4		; skip vector 29h
 44601                                  	; 19/09/2023
 44602 00007910 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 44603                                  
 44604                                  	; 04/11/2022
 44605                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 44606                                  	; 17/12/2022
 44607                                  	;mov	cl,6		; sets offsets for ints 2ah-2fh
 44608 00007913 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 44609                                  po_iset3:
 44610 00007915 AB                      	stosw
 44611                                  	;add	di,2
 44612                                  	; 17/12/2022
 44613 00007916 47                      	inc	di
 44614 00007917 47                      	inc	di
 44615 00007918 E2FB                    	loop	po_iset3
 44616                                  
 44617                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 44618                                  ; below. So skip it.
 44619                                  
 44620                                  	;add	di,8		; skip vector 30h & 31h
 44621                                  	; 17/12/2022
 44622 0000791A 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 44623                                  
 44624                                  	; 04/11/2022
 44625                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 44626                                  				;  sets offsets for ints 32h-3fh
 44627                                  	; 17/12/2022
 44628 0000791D B10E                    	mov	cl,14 ; 26/06/2019
 44629                                  po_iset4:
 44630 0000791F AB                      	stosw
 44631                                  	;add	di,2
 44632                                  	; 17/12/2022
 44633 00007920 47                      	inc	di
 44634 00007921 47                      	inc	di
 44635 00007922 E2FB                    	loop	po_iset4
 44636                                  
 44637                                  ;if installed
 44638                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 44639                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 44640 00007924 26C706BC00[C610]        	mov	word [es:(2Fh*4)],lint2f
 44641                                  ;endif
 44642                                  
 44643                                  ; set up entry point call at vectors 30-31h
 44644                                  	;mov	byte [es:0C0h],0EAh
 44645 0000792B 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 44646                                  	;mov	word [es:0C1h],10D0h
 44647                                  
 44648 00007931 26C706C100[D010]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 44649                                  
 44650                                  							; 19/09/2023
 44651                                  	;mov	word [es:80h],1094h
 44652 00007938 26C7068000[9410]        	mov	word [es:addr_int_abort],lquit		; int 20h
 44653                                  	;mov	word [es:84h],109Eh
 44654 0000793F 26C7068400[9E10]        	mov	word [es:addr_int_command],lcommand	; int 21h
 44655                                  	;mov	word [es:94h],10A8h
 44656 00007946 26C7069400[A810]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 44657                                  	;mov	word [es:98h],10B2h
 44658 0000794D 26C7069800[B210]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 44659                                  	;mov	word [es:9Ch],10BCh
 44660 00007954 26C7069C00[BC10]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 44661                                  
 44662                                  	; 17/12/2022
 44663                                  	; CX = 0
 44664 0000795B 07                      	pop	es		; restore es
 44665 0000795C C3                      	retn
 44666                                  
 44667                                  ;--------------------------------------------------------------------------
 44668                                  ;
 44669                                  ; 	Procedure Name	:	patch_in_nops
 44670                                  ;
 44671                                  ; 	Entry		: 	ES -> DOSDATA
 44672                                  ;
 44673                                  ;	Regs Mod	: 	cx, di
 44674                                  ;
 44675                                  ;	Description:
 44676                                  ;		This routine patches in 2 nops at the offsets specified in 
 44677                                  ;	patch_table. This basically enables the low mem stub to start 
 44678                                  ;	making XMS calls.
 44679                                  ;
 44680                                  ;--------------------------------------------------------------------------
 44681                                  
 44682                                  	; 04/11/2022
 44683                                  	; (MSDOS 5.0 MSDOS.SYS)
 44684                                  	; DOSCODE:0BC50h
 44685                                  
 44686                                  patch_table:	; label	byte
 44687                                  	;dw	offset dosdata:i0patch
 44688                                  	;dw	offset dosdata:i20patch
 44689                                  	;dw	offset dosdata:i21patch
 44690                                  	;dw	offset dosdata:i25patch
 44691                                  	;dw	offset dosdata:i26patch
 44692                                  	;dw	offset dosdata:i27patch
 44693                                  	;dw	offset dosdata:i2fpatch
 44694                                  	;dw	offset dosdata:cpmpatch
 44695 0000795D [8A10]                  	dw	i0patch
 44696 0000795F [9410]                  	dw	i20patch
 44697 00007961 [9E10]                  	dw	i21patch
 44698 00007963 [A810]                  	dw	i25patch
 44699 00007965 [B210]                  	dw	i26patch
 44700 00007967 [BC10]                  	dw	i27patch
 44701 00007969 [C610]                  	dw	i2fpatch
 44702 0000796B [D010]                  	dw	cpmpatch
 44703                                  
 44704                                  patch_table_size equ ($-patch_table)/2
 44705                                  
 44706                                  patch_in_nops:
 44707 0000796D 50                      	push	ax
 44708 0000796E 56                      	push	si
 44709 0000796F BE[5D79]                	mov	si,patch_table
 44710 00007972 B89090                  	mov	ax,9090h ; nop, nop
 44711                                  	; 17/12/2022
 44712                                  	; cx = 0
 44713                                  	;mov	cx,8
 44714                                  	;mov	cx,patch_table_size ; 8
 44715 00007975 B108                    	mov	cl,patch_table_size ; 8
 44716                                  pin_loop:
 44717 00007977 2E8B3C                  	mov	di,[cs:si]
 44718 0000797A AB                      	stosw
 44719                                  	;add	si,2
 44720                                  	; 17/12/2022
 44721 0000797B 46                      	inc	si
 44722 0000797C 46                      	inc	si
 44723 0000797D E2F8                    	loop	pin_loop
 44724 0000797F 5E                      	pop	si
 44725 00007980 58                      	pop	ax
 44726 00007981 C3                      	retn
 44727                                  
 44728                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 44729                                  ; ---------------------------------------------------------------------------
 44730                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 44731                                  ; ---------------------------------------------------------------------------
 44732                                  ; 23/03/2024 - Retro DOS v4.2
 44733                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:0BF69h
 44734                                  ; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0D20Fh)
 44735                                  
 44736                                  	; 05/12/2022 - temporary ; (paragraph alinment)
 44737                                  DOSCODE_END:
 44738                                  	; 23/03/2024
 44739                                  	;times	7 db 0	; MSDOS 6.22 MSDOS.SYS
 44740                                  
 44741                                  	; 23/03/2024
 44742                                  	;times	9 db 0	; db 9 dup(0)
 44743                                  	; 18/12/2022
 44744                                  	;dw	0	; times 2 db 0
 44745                                  
 44746                                  	; 23/03/2024 - Retro DOS v4.2		
 44747                                  	; 23/03/2024 - Retro DOS v5.0
 44748 00007982 00                      	db	0	; PCDOS 7.1 IBMDOS.COM
 44749                                  
 44750                                  ;align 16
 44751                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 44752                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 44753                                  
 44754                                  	; 23/03/2024 - Retro DOS v4.2
 44755                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:0BF70h
 44756                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0D210h)
 44757                                  
 44758                                  ; ---------------------------------------------------------------------------
 44759                                  
 44760                                  ;memstrt label word
 44761                                  ; ---------------------------------------------------------------------------
 44762                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 44763                                  ; ---------------------------------------------------------------------------
 44764                                  
 44765                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 44766                                  
 44767                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 44768                                  ; the dos initialization segment
 44769                                  
 44770                                  ;ifndef ROMDOS
 44771                                  
 44772                                  ;doscode ends
 44773                                  
 44774                                  ;else
 44775                                  
 44776                                  ;;dosinitseg ends
 44777                                  
 44778                                  ;endif ; ROMDOS
 44779                                  
 44780                                  ;============================================================================
 44781                                  
 44782                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 44783                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 44784                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 44785                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 44786                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 44787                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 44788                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 44789                                  
 44790                                  ;; burasý doscode sonu
 44791                                  
 44792                                  ;============================================================================
 44793                                  ; DOSDATA
 44794                                  ;============================================================================
 44795                                  ; 29/04/2019 - Retro DOS 4.0
 44796                                  
 44797                                  ;[BITS 16]
 44798                                  
 44799                                  ;[ORG 0]
 44800                                  
 44801                                  ; 25/04/2019 - Retro DOS v4.0
 44802                                  
 44803                                  ;============================================================================
 44804                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44805                                  ;============================================================================
 44806                                  
 44807                                  ;align 16
 44808                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44809                                  	; (4970 bytes for MSDOS 6.21)
 44810                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44811                                  
 44812                                  ;============================================================================
 44813                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44814                                  ;============================================================================
 44815                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44816                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44817                                  ; 16/07/2018 - Retro DOS 3.0	
 44818                                  
 44819                                  ;Break <Initialized data and data used at DOS initialization>
 44820                                  ;----------------------------------------------------------------------------
 44821                                  
 44822                                  ; We need to identify the parts of the data area that are relevant to tasks
 44823                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44824                                  ; data will be gathered with the system code. The process data under 2.x will
 44825                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44826                                  ;
 44827                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44828                                  ; describing that data item.
 44829                                  
 44830                                  ;DOSDATA SEGMENT
 44831                                  
 44832                                  ; 04/11/2022
 44833                                  ;[ORG 0]
 44834                                  
 44835                                  ; ----------------------------------------------------------------------------
 44836                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44837                                  ; ----------------------------------------------------------------------------
 44838                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44839                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44840                                  ; ----------------------------------------------------------------------------
 44841                                  
 44842                                  ; 04/11/2022
 44843                                  
 44844                                  ;DOSDATA:0000h
 44845                                  
 44846 00007983 90<rep Dh>              align 16
 44847                                  
 44848                                  ; ----------------------------------------------------------------------------
 44849                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44850                                  ; ----------------------------------------------------------------------------
 44851                                  
 44852                                  segment .data  vstart=0 ; 06/12/2022
 44853                                  								
 44854                                  ; ============================================================================
 44855                                  
 44856                                  ; 06/12/2022
 44857                                  ;DOSDATASTART equ $
 44858                                  DOSDATASTART:
 44859                                  
 44860                                  
 44861                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44862                                  
 44863                                  	;; 03/11/2022
 44864                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44865                                  
 44866                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44867                                  	;db	4 dup (?)	
 44868 00000000 00<rep 4h>              	times	4 db 0
 44869                                  
 44870                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44871                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44872                                  	;dw	0
 44873                                  
 44874                                  	;EVEN
 44875                                  
 44876                                  ;align 2
 44877                                  
 44878                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44879                                  ; area compatability. This location must be incremented EACH TIME the data
 44880                                  ; area here gets mucked with.
 44881                                  ;
 44882                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44883                                  
 44884                                  MSCT001S:	; LABEL BYTE
 44885                                  	
 44886                                  DataVersion:	
 44887 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44888                                  
 44889                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44890                                  ;hkn; been removed to DOSCODE above
 44891                                  
 44892                                  ;M044
 44893                                  ; First part of save area for saving last para of Window memory
 44894                                  
 44895                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44896 00000006 00<rep 8h>              	times	8 db 0
 44897                                  
 44898                                  	; MSDOS 6.21 DOSDATA:000Eh
 44899                                  MYNUM:			; Offset 000Eh
 44900 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44901                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44902 00000010 0000                    	dw	0
 44903                                  OpenLRU:
 44904 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44905                                  OEM_HANDLER: 		
 44906 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44907                                  
 44908                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44909                                  ;;			way that we leave DOS???? - jgl
 44910                                  
 44911                                  LeaveAddr:
 44912 00000018 [0404]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44913                                  RetryCount:		
 44914 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44915                                  RetryLoop:
 44916 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44917                                  LastBuffer:
 44918 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44919                                  CONTPOS:
 44920 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44921                                  arena_head:
 44922 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44923                                  
 44924                                  ;; 16/07/2018
 44925                                  ;;***************************************************************************
 44926                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44927                                  ;;***************************************************************************
 44928                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44929                                  ;;
 44930                                  ;;	AH = 52h
 44931                                  ;;
 44932                                  ;;	on return:
 44933                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44934                                  ;;		Known "invars" fields follow (varies with DOS version):
 44935                                  ;;
 44936                                  ;;	Offset Size		 Description
 44937                                  ;;
 44938                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44939                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44940                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44941                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44942                                  ;;		      0 indicates no unread input (DOS 3.x)
 44943                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44944                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44945                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44946                                  ;;	  08   dword  pointer to $CLOCK device driver
 44947                                  ;;	  0C   dword  pointer to CON device driver
 44948                                  ;;	  10   byte   number of logical drives in system
 44949                                  ;;	  11   word   maximum bytes/block of any block device
 44950                                  ;;	  13   dword  pointer to DOS cache buffer header
 44951                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44952                                  ;;		      point to the next device in device chain
 44953                                  ;;
 44954                                  ;;***************************************************************************
 44955                                  
 44956                                  ; The following block of data is used by SYSINIT. 
 44957                                  ; Do not change the order or size of this block
 44958                                  
 44959                                  ;SYSINITVAR:
 44960                                  ;----------------------------------------------------------------------------
 44961                                  SYSINITVARS:
 44962                                  DPBHEAD:
 44963 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44964                                  SFT_ADDR:
 44965 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44966                                  BCLOCK:
 44967 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44968                                  BCON:
 44969 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44970                                  MAXSEC:
 44971 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44972                                  BUFFHEAD:
 44973 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44974                                  CDSADDR:
 44975 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44976                                  SFTFCB:
 44977 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44978                                  KEEPCOUNT:
 44979 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44980                                  NUMIO:
 44981 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44982                                  CDSCOUNT:
 44983 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44984                                  
 44985                                  ; A fake header for the NUL device
 44986                                  NULDEV:
 44987 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44988                                  	;dw	8004h
 44989 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44990 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44991 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44992 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44993                                  SPLICES:
 44994 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44995                                  
 44996                                  Special_Entries:
 44997 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44998                                  UU_IFS_DOS_CALL:
 44999 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 45000                                  ; 
 45001                                  ; UU_IFS_HEADER:
 45002                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 45003                                  
 45004                                  ChkCopyProt:
 45005 00000061 0000                    	dw	0	; M068
 45006                                  A20OFF_PSP:
 45007 00000063 0000                    	dw	0	; M068
 45008                                  BUFFERS_PARM1:
 45009 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 45010                                  BUFFERS_PARM2:
 45011 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 45012                                  BOOTDRIVE:
 45013 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 45014                                  DDMOVE:
 45015 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 45016                                  EXT_MEM_SIZE:
 45017 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 45018                                  
 45019                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 45020                                  ;
 45021                                  ; Replaced by next two declarations
 45022                                  ;
 45023                                  ;UU_BUF_HASH_PTR:
 45024                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 45025                                  ;UU_BUF_HASH_COUNT:
 45026                                  ;	dw	1	; [SYSTEM] number of Hash entries
 45027                                  
 45028                                  BufferQueue:
 45029 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 45030                                  DirtyBufferCount:
 45031 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 45032                                  			; BUGBUG ---- change to byte
 45033                                  SC_CACHE_PTR:
 45034 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 45035                                  SC_CACHE_COUNT:
 45036 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 45037                                  BuffInHMA:
 45038 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 45039                                  LoMemBuff:
 45040 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 45041                                  			;  in Low mem when buffs are in HMA
 45042                                  ;
 45043                                  ; All variables which have UU_ as prefix can be reused for other
 45044                                  ; purposes and can be renamed. All these variables were used for
 45045                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 45046                                  ; manager ---- MOHANS
 45047                                  ;
 45048                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 45049                                  UU_BUF_EMS_FIRST_PAGE:	
 45050 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 45051                                  
 45052                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 45053                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 45054                                  ;	dw	0			
 45055                                  
 45056                                  CL0FATENTRY:
 45057 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 45058                                  			; is used in pack/unpack rts.
 45059                                  			; in fat.asm if cluster 0 is specified.
 45060                                  			; SR;
 45061                                  IoStatFail:
 45062 00000083 00                      	db	0	; IoStatFail has been added to 
 45063                                  			; record a fail on an I24 
 45064                                  			; issued from IOFUNC on a status call. 
 45065                                  
 45066                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 45067                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 45068                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 45069                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 45070                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 45071                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 45072                                  ;
 45073                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 45074                                  						; state of the 	buffers page.
 45075                                  						; This one byte is retained to 
 45076                                  						; keep the size of this data 
 45077                                  						; block the same.;
 45078                                  ALLOCMSAVE:
 45079 00000084 00                      	db	0	; M063: temp var. used to 
 45080                                  			; M063: save alloc method in
 45081                                  			; M063: msproc.asm
 45082                                  A20OFF_COUNT:
 45083 00000085 00                      	db	0	; M068: indiactes the # of 
 45084                                  			; M068: int 21 calls for 
 45085                                  			; M068: which A20 is off
 45086                                  DOS_FLAG:
 45087 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 45088                                  			; definitions
 45089                                  UNPACK_OFFSET:
 45090 00000087 0000                    	dw	0	; saves pointer to the start
 45091                                  			; of unpack code in exepatch.
 45092                                  			; asm.
 45093                                  UMBFLAG:
 45094 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 45095                                  			; M003: link state of the UMBs
 45096                                  			; M003: whether linked or not 
 45097                                  			; M003: to the DOS arena chain
 45098                                  SAVE_AX:
 45099 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 45100                                  			; M000: in msproc.asm
 45101                                  UMB_HEAD:
 45102 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 45103                                  			; M000: the first umb arena by 
 45104                                  			; M000: BIOS sysinit.
 45105                                  START_ARENA:
 45106 0000008E 0100                    	dw	1	; M000: this is the first arena 
 45107                                  			; M000: from which DOS will 
 45108                                  			; M000: start its scan for alloc.
 45109                                  
 45110                                  ; End of SYSINITVar block
 45111                                  ;----------------------------------------------------------------------------
 45112                                  
 45113                                  ; 25/04/2019 - Retro DOS v4.0
 45114                                  
 45115                                  ; 16/07/2018
 45116                                  ; MSDOS 3.3 (& MDOS 6.0)
 45117                                  
 45118                                  ;
 45119                                  ; Sharer jump table
 45120                                  ;
 45121                                  
 45122                                  ;PUBLIC	JShare
 45123                                  	;EVEN
 45124                                  
 45125                                  ;JShare	LABEL	DWORD
 45126                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 45127                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 45128                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 45129                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 45130                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 45131                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 45132                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 45133                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 45134                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 45135                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 45136                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 45137                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 45138                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 45139                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 45140                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 45141                                  
 45142                                  align 2
 45143                                  
 45144                                  JShare:
 45145 00000090 [F706]0000              		DW	BadCall,0
 45146 00000094 [FB06]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 45147 00000098 [FB06]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 45148 0000009C [F706]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 45149 000000A0 [F706]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 45150 000000A4 [F706]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 45151 000000A8 [F706]0000              set_block:	DW	BadCall,0  ; 6   set_block
 45152 000000AC [F706]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 45153 000000B0 [FB06]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 45154 000000B4 [F706]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 45155 000000B8 [F706]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 45156 000000BC [F706]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 45157 000000C0 [FB06]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 45158 000000C4 [F706]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 45159 000000C8 [F706]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 45160                                  
 45161                                  
 45162                                  ;============================================================================
 45163                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 45164                                  ;============================================================================
 45165                                  ; 25/04/2019 - Retro DOS 4.0 
 45166                                  ; 16/07/2018 - Retro DOS 3.0	
 45167                                  
 45168                                  ;Break <Initialized data and data used at DOS initialization>
 45169                                  ;----------------------------------------------------------------------------
 45170                                  
 45171                                  ; We need to identify the parts of the data area that are relevant to tasks
 45172                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 45173                                  ; data will be gathered with the system code.  The process data under 2.x will
 45174                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 45175                                  ;
 45176                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 45177                                  ; describing that data item.
 45178                                  
 45179                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 45180                                  
 45181                                  ;
 45182                                  ; Table of routines for assignable devices
 45183                                  ;
 45184                                  ; MSDOS allows assignment if the following standard devices:
 45185                                  ;   stdin  (usually CON input)
 45186                                  ;   stdout (usually CON output)
 45187                                  ;   auxin  (usually AUX input)
 45188                                  ;   auxout (usually AUX output)
 45189                                  ;   stdlpt (usually PRN output)
 45190                                  ;
 45191                                  ; SPECIAL NOTE:
 45192                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 45193                                  ;   If we're not at end-of-file, then we always say that we have a character.
 45194                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 45195                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 45196                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 45197                                  ;   as EOF).
 45198                                  
 45199                                  ; Default SFTs for boot up
 45200                                  
 45201                                  		;PUBLIC	SFTABL
 45202                                  
 45203                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 45204 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 45205 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 45206 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 45207                                  		;times 295 db 0 ; MSDOS 6.0
 45208 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 45209                                  
 45210                                  ; the next two variables relate to the position of the logical stdout/stdin
 45211                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 45212                                  ; console.
 45213                                  		; DOSDATA:01F9h (MSDOS 6.21)
 45214 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 45215 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 45216                                  					;	   of buffered input call
 45217 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 45218 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 45219                                  		; DOSDATA:02FEh (MSDOS 6.21)
 45220 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 45221 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 45222 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 45223                                  switch_character:
 45224 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 45225 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 45226 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 45227 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 45228 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 45229                                  
 45230                                  ; The following table is a list of addresses that the sharer patches to be
 45231                                  ; PUSH AX to enable the critical sections
 45232                                  
 45233                                  		; DOSDATA:0315h (MSDOS 6.21)
 45234                                  
 45235                                  ;PUBLIC	CritPatch
 45236                                  
 45237                                  CritPatch:	; LABEL WORD
 45238                                  
 45239                                  ;IRP sect,<critDisk,critDevice>
 45240                                  
 45241                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 45242                                  ;
 45243                                  ;SR; Change code patch address to a variable in data segment
 45244                                  ;
 45245                                  ;       dw OFFSET DOSDATA: redir_patch
 45246                                  ;       dw OFFSET DOSDATA: redir_patch
 45247                                  ;
 45248                                  ;;hkn	Short_Addr  E&sect
 45249                                  ;;hkn	Short_Addr  L&sect
 45250                                  ;
 45251                                  ;ELSE
 45252                                  ;	DW	0
 45253                                  ;	DW	0
 45254                                  ;ENDIF
 45255                                  ;ENDM
 45256                                  ;	DW	0
 45257                                  
 45258                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 45259                                   
 45260 00000315 [0C0D]                  	dw 	redir_patch
 45261 00000317 [0C0D]                  	dw 	redir_patch			
 45262 00000319 [0C0D]                  	dw	redir_patch
 45263 0000031B [0C0D]                  	dw 	redir_patch
 45264                                  
 45265 0000031D 0000                    	dw	0
 45266                                  
 45267                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 45268                                  ; Also, IBM server 1.0 requires this also.
 45269                                  
 45270                                  	;EVEN			; Force swap area to start on word boundry
 45271 0000031F 90                      align 2
 45272                                  	;PUBLIC	SWAP_START
 45273                                  SWAP_START:	; LABEL BYTE
 45274 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 45275 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 45276 00000322 FF                      WPERR:		db -1		; Write protect error flag
 45277 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 45278 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 45279                                  
 45280                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 45281 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 45282 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 45283                                  ; end warning
 45284                                   
 45285 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 45286                                  
 45287 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 45288 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 45289 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 45290 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 45291 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 45292 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 45293                                  ;				; F.C. 2/17/86
 45294 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 45295 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 45296                                  ;align 2
 45297                                  SWAP_ALWAYS:	; 05/08/2018
 45298 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 45299                                  				;   extended error type stuff.
 45300                                  				;   NOTE: does not have Correct value on
 45301                                  				;   1-12, OEM, Get/Set CurrentPDB,
 45302                                  				;   GetExtendedError system calls)
 45303 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 45304 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 45305 00000340 0000                    FirstArena:	dw 0		; first free block found
 45306 00000342 0000                    BestArena:	dw 0		; best free block found
 45307 00000344 0000                    LastArena:	dw 0		; last free block found
 45308 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 45309 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 45310 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 45311 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 45312 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 45313 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 45314 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 45315                                  
 45316                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 45317                                  	;EVEN
 45318 0000034F 90                      align 2
 45319                                  		; DOSDATA:0350h (MSDOS 6.21)
 45320 00000350 00                      DAY:		db 0		; Day of month
 45321 00000351 00                      MONTH:		db 0		; Month of year
 45322 00000352 0000                    YEAR:		dw 0		; Year (with century)
 45323 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 45324 00000356 00                      WEEKDAY:	db 0		; Day of week
 45325                                  ; end warning
 45326                                  
 45327 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 45328 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 45329 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 45330                                  
 45331                                  ; Combination of all device call parameters
 45332                                  	;PUBLIC	DEVCALL 	;
 45333                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 45334                                  DEVCALL: ; 08/08/2018
 45335 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 45336 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 45337 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 45338 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 45339 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 45340                                  
 45341                                  	;PUBLIC	CALLUNIT
 45342                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 45343                                  CALLFLSH: ; LABEL   WORD	;
 45344 00000367 00                      CALLMED:	db 0		; media byte
 45345                                  CALLBR:	  ; LABEL   DWORD	;
 45346                                  	;PUBLIC	CALLXAD 	;
 45347                                  CALLXAD:  ; LABEL   DWORD	;
 45348 00000368 00                      CALLRBYT:	db 0		;
 45349                                  	;PUBLIC	CALLVIDM	;
 45350                                  CALLVIDM: ; LABEL   DWORD	;
 45351 00000369 00<rep 3h>              	times 3 db 0	;
 45352                                  	;PUBLIC CallBPB		;
 45353                                  CALLBPB:  ; LABEL   DWORD	;
 45354                                  CALLSCNT:			;
 45355 0000036C 0000                    		dw 0		;
 45356                                  	;PUBLIC	CALLSSEC	;
 45357                                  CALLSSEC: ; LABEL   WORD	;
 45358 0000036E 0000                    		dw 0		;
 45359 00000370 00000000                CALLVIDRW:	dd 0		;
 45360                                  ;MSDOS 6.0
 45361 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 45362 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 45363                                  
 45364                                  ; Same as above for I/O calls	;
 45365                                  				;
 45366                                  	;PUBLIC	IOCall		;
 45367                                  ;IOCALL	SRHEAD	<>		;
 45368                                  IOCALL:	; 07/08/2018
 45369 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 45370 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 45371 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 45372 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 45373 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 45374                                  IOFLSH:	  ; LABEL   WORD	;
 45375                                          ;PUBLIC  IORCHR		;
 45376                                  IORCHR:	  ; LABEL   BYTE	;
 45377 00000389 00                      IOMED:		db 0		;
 45378 0000038A 00000000                IOXAD:		dd 0		;
 45379 0000038E 0000                    IOSCNT:		dw 0		;	
 45380 00000390 0000                    IOSSEC:		dw 0		;
 45381                                  
 45382                                  ; Call struct for DSKSTATCHK	;
 45383 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 45384 00000393 00                      		db 0
 45385 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 45386 00000395 0000                    DSKSTST:	dw 0		;
 45387 00000397 00<rep 8h>              	times 8	db 0		;
 45388 0000039F 00                      DSKCHRET:	db 0		;
 45389                                  
 45390                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 45391                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 45392                                  ;hkn   short_addr  DEVIOBUF	;
 45393                                  	
 45394 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 45395 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 45396 000003A4 0100                    DSKSTCNT:	dw 1		;
 45397 000003A6 0000                    		dw 0		;
 45398                                  
 45399 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 45400                                  
 45401                                  ;MSDOS 6.0
 45402                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 45403 000003A9 00000000                		dd 0		;MS. position
 45404 000003AD 00000000                		dd 0		;MS. length
 45405                                  
 45406                                  ;hkn; the foll. was moved from dosmes.asm.
 45407                                  
 45408                                  	;EVEN
 45409 000003B1 90                      align 2				; needed to maintain offsets
 45410                                  
 45411                                  		; DOSDATA:03B2h (MSDOS 6.21)
 45412                                  USERNUM:
 45413 000003B2 0000                     		dw 0		; 24 bit user number
 45414 000003B4 00                      		db 0
 45415                                  ;IF IBM
 45416                                  ;IF IBMCOPYRIGHT
 45417                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 45418                                  ;ELSE
 45419                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 45420                                  ;ENDIF
 45421                                  ;ELSE
 45422 000003B5 FF                      OEMNUM:		DB 0FFh
 45423                                  ;ENDIF
 45424                                  
 45425                                  ;============================================================================
 45426                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 45427                                  ;============================================================================
 45428                                  ; 25/04/2019 - Retro DOS 4.0
 45429                                  
 45430                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 45431                                  ; ----------------------------------------------------------
 45432                                  ; This data section which was named as uninitialized data
 45433                                  ; (as overlayed by initialization code) but follows 
 45434                                  ; initialized data section from DOSDATA:03B6h address
 45435                                  ; (in otherwords, the method is different than MSDOS 3.3,
 45436                                  ; and there is not overlaying..)
 45437                                  ; **********************************************************
 45438                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 45439                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 45440                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 45441                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 45442                                  ; TIMEBUF is at offset 03B6h.
 45443                                  ; **********************************************************	
 45444                                  
 45445                                  ;Break <Uninitialized data overlayed by initialization code>
 45446                                  ;----------------------------------------------------------------------------
 45447                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 45448                                  ; Init code overlaps with data area below
 45449                                  
 45450                                  ; 	ORG     0
 45451                                  
 45452                                  MSDAT001S:	; label byte
 45453                                  
 45454                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 45455                                  TIMEBUF: ;	times 6 db 0
 45456 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 45457 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 45458                                  
 45459                                  ; The following areas are used as temp buffer in EXEC system call
 45460                                  
 45461                                  ; DOSDATA:03BEh
 45462                                  OPENBUF: ;times 64  dw	0
 45463 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 45464                                  RENBUF:	
 45465 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 45466                                  
 45467                                  ; Buffer for search calls
 45468                                  SEARCHBUF:	
 45469 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 45470                                  DUMMYCDS:  ;times 88 db 0
 45471 000004F3 00<rep 58h>             	times	curdirLen db 0
 45472                                  
 45473                                  ; End of contiguous buffer
 45474                                   
 45475                                  ; Temporary directory entry for use by many routines. Device directory
 45476                                  ; entries (bogus) are built here.
 45477                                  
 45478                                  ; DOSDATA:054Bh
 45479                                  
 45480                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 45481                                  
 45482                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 45483                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 45484                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 45485                                  
 45486                                  NAME1:	
 45487 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 45488                                  NAME2:
 45489 00000557 00<rep Dh>              	times	13 db	0 		;
 45490                                  DESTSTART:
 45491 00000564 0000                    	dw	0			;
 45492                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 45493                                  	;times	5  db	0
 45494 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 45495                                  
 45496                                  ; End Temporary directory entry.
 45497                                  
 45498 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 45499                                  EXTFCB:	
 45500 0000056C 00                      	db	0		; TRUE => extended FCB in use
 45501                                  SATTRIB:
 45502 0000056D 00                      	db	0		; Storage for search attributes
 45503                                  OPEN_ACCESS:
 45504 0000056E 00                      	db	0		; access of open system call
 45505                                  FOUNDDEL:
 45506 0000056F 00                      	db	0		; true => file was deleted
 45507                                  FOUND_DEV:
 45508 00000570 00                      	db	0		; true => search found a device
 45509                                  FSPLICE:
 45510 00000571 00                      	db	0		; true => do a splice in transpath
 45511                                  FSHARING:
 45512 00000572 00                      	db	0		; TRUE => no redirection
 45513                                  SECCLUSPOS:
 45514 00000573 00                      	db	0		; Position of first sector within cluster
 45515 00000574 00                      TRANS:	db	0		;
 45516 00000575 00                      READOP:	db	0		;
 45517                                  THISDRV:
 45518 00000576 00                      	db	0		;
 45519                                  CLUSFAC:
 45520 00000577 00                      	db	0		;
 45521                                  CLUSSPLIT:
 45522 00000578 00                      	db	0		;
 45523                                  INSMODE:
 45524 00000579 00                      	db	0		; true => insert mode in buffered read
 45525 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 45526 0000057B 00                      VOLID:	db	0		;
 45527                                  EXIT_TYPE:
 45528 0000057C 00                      	db	0		; type of exit...
 45529                                   
 45530                                  	;EVEN
 45531                                  
 45532 0000057D 90                      align 2
 45533                                  
 45534                                  ; DOSDATA:057Eh
 45535                                  
 45536                                  ; WARNING - the following two items are accessed as a word
 45537                                  
 45538                                  CREATING:
 45539 0000057E 00                      	db	0		; true => creating a file
 45540 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 45541                                  				; = DIRFREE iff BUGBUG
 45542                                  EXITHOLD:
 45543 00000580 00000000                	dd	0		; Temp location for proc terminate
 45544                                  USER_SP:
 45545 00000584 0000                    	dw	0		; User SP for system call
 45546                                  USER_SS:
 45547 00000586 0000                    	dw	0		; User SS for system call
 45548                                  CONTSTK:
 45549 00000588 0000                    	dw	0		;
 45550                                  THISDPB:
 45551 0000058A 00000000                	dd	0		;
 45552                                  CLUSSAVE:
 45553 0000058E 0000                    	dw	0		;
 45554                                  CLUSSEC:
 45555 00000590 00000000                	dd	0		;>32mb			AC0000
 45556                                  PREREAD:
 45557 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 45558 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 45559                                  FATBYTE:
 45560 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 45561                                  ; DOSDATA:059Ah
 45562 0000059A 00000000                DEVPT:	dd	0		;
 45563                                  THISSFT:
 45564 0000059E 00000000                	dd	0		; Address of user SFT
 45565                                  THISCDS:
 45566 000005A2 00000000                	dd	0		; Address of current CDS
 45567                                  THISFCB:
 45568 000005A6 00000000                	dd	0		; Address of user FCB
 45569 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 45570 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 45571 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 45572                                  WFP_START:
 45573 000005B2 0000                    	dw	0		;
 45574                                  REN_WFP:
 45575 000005B4 0000                    	dw	0		;
 45576                                  CURR_DIR_END:
 45577 000005B6 0000                    	dw	0		;
 45578                                  NEXTADD:
 45579 000005B8 0000                    	dw	0		;
 45580                                  LASTPOS:
 45581 000005BA 0000                    	dw	0		;
 45582                                  CLUSNUM:
 45583 000005BC 0000                    	dw	0		;
 45584 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 45585                                  DIRSTART:
 45586 000005C2 0000                    	dw	0		;
 45587 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 45588 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 45589                                                                  ; sectors
 45590                                  BYTSECPOS:
 45591 000005CC 0000                    	dw	0		; Position of first byte within sector
 45592                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 45593 000005CE 0000<rep 2h>                    times	2 dw 0
 45594                                  BYTCNT1:
 45595 000005D2 0000                    	dw	0		; No. of bytes in first sector
 45596                                  BYTCNT2:
 45597 000005D4 0000                    	dw	0		; No. of bytes in last sector
 45598 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 45599                                  ; DOSDATA:05D8h
 45600                                  ENTFREE:
 45601 000005D8 0000                    	dw	0		;
 45602                                  ENTLAST:
 45603 000005DA 0000                    	dw	0		;
 45604                                  NXTCLUSNUM:
 45605 000005DC 0000                    	dw	0		;
 45606                                  GROWCNT:
 45607 000005DE 00000000                	dd	0		;
 45608 000005E2 00000000                CURBUF:	dd	0		;
 45609 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 45610 000005EA 0000                    SAVEBX:	dw	0		;
 45611 000005EC 0000                    SAVEDS:	dw	0		;
 45612                                  RESTORE_TMP:
 45613 000005EE 0000                    	dw	0		; return address for restore world
 45614 000005F0 0000                    NSS:	dw	0
 45615 000005F2 0000                    NSP:	dw	0
 45616                                  ; DOSDATA:05F4h
 45617                                  EXTOPEN_FLAG:
 45618 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 45619                                  EXTOPEN_ON:
 45620 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 45621                                  EXTOPEN_IO_MODE:
 45622 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 45623                                  SAVE_DI:
 45624 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 45625                                  SAVE_ES:
 45626 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 45627                                  SAVE_DX:
 45628 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 45629                                  SAVE_CX:
 45630 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 45631                                  SAVE_BX:
 45632 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 45633                                  SAVE_SI:
 45634 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 45635                                  SAVE_DS:
 45636 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 45637                                  
 45638                                  ; DOSDATA:0607h
 45639                                  
 45640                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 45641                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 45642                                  ; the high 16, the low 16 are still in the register.
 45643                                  
 45644                                  HIGH_SECTOR:	
 45645 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 45646                                  	; 25/09/2023
 45647                                  OffsetMagicPatch:
 45648                                  	;dw	MagicPatch	;scottq 8/6/92
 45649                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45650 00000609 0000                    	dw	0
 45651                                  				;see dos\mpatch.asm
 45652                                  DISK_FULL:
 45653 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 45654                                  TEMP_VAR:
 45655 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 45656                                  TEMP_VAR2:
 45657 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 45658 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 45659                                  DOS34_FLAG:
 45660 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 45661                                  NO_FILTER_PATH:
 45662 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 45663                                  NO_FILTER_DPATH:
 45664 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 45665                                  ; M008
 45666                                  AbsRdWr_SS:
 45667 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 45668                                  AbsRdWr_SP:
 45669 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 45670                                  
 45671                                  	; I_am  UU_Callback_flag,BYTE,<0>  ; Unused
 45672                                  ; M008
 45673                                  	; 24/03/2024
 45674                                  	; MSDOS 6.22 MSDOS.SYS - DOSDATA:061Fh
 45675                                  	; MSDOS 5.0 MSDOS.SYS - DOSDATA:061Fh
 45676                                  	; PCDOS 7.1 IBMDOS.COM - DOSDATA:061Fh
 45677 0000061F 00                      	db 	0
 45678                                   
 45679                                  ; make those pushes fast!!!
 45680                                  ;EVEN
 45681                                  
 45682                                  align 2
 45683                                  
 45684                                  StackSize   equ 180h  ; 384	; gross but effective
 45685                                  
 45686                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 45687                                  ;				; made up their minds about
 45688                                   
 45689                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 45690                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 45691                                  
 45692                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 45693                                   
 45694 00000620 00<rep 180h>                    times	StackSize db	0	;
 45695                                  AUXSTACK:			; LABEL   BYTE
 45696                                   
 45697 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 45698                                  DSKSTACK:			; LABEL   BYTE
 45699                                   
 45700 00000920 00<rep 180h>                    times	StackSize db	0	;
 45701                                  IOSTACK:			; LABEL   BYTE
 45702                                  
 45703                                  ; DOSDATA:0AA0h 
 45704                                   
 45705                                  ; patch space for Boca folks.
 45706                                  ; Say What????!!! This does NOT go into the swappable area!
 45707                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 45708                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 45709                                   
 45710                                  IBMPATCH: ; label byte
 45711                                  PRINTER_FLAG:
 45712 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 45713                                  VOLCHNG_FLAG:
 45714 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 45715                                  VIRTUAL_OPEN:
 45716 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 45717                                   
 45718                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 45719                                  
 45720                                  FSeek_drive:
 45721 00000AA3 00                      	db	0		;AN000; fastseek drive #
 45722                                  FSeek_firclus:
 45723 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 45724                                  FSeek_logclus:
 45725 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 45726                                  FSeek_logsave:
 45727 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 45728                                  
 45729                                  ; DOSDATA:0AAAh
 45730                                  
 45731                                  TEMP_DOSLOC:
 45732 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 45733                                  				;at SYSINIT time.
 45734                                  SWAP_END:  ; LABEL   BYTE
 45735                                   
 45736                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 45737                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 45738                                  ; to include this byte.
 45739                                   
 45740 00000AAC 00                      	db	0
 45741                                  
 45742                                  ; DOSDATA:0AADh
 45743                                   
 45744                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 45745                                  
 45746                                  ;DOSDATA    ENDS
 45747                                  
 45748                                  ;============================================================================
 45749                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 45750                                  ;============================================================================
 45751                                  ; 27/04/2019 - Retro DOS 4.0
 45752                                  ; 16/07/2018 - Retro DOS 3.0
 45753                                  
 45754                                  ;DOSDATA Segment
 45755                                  
 45756                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 45757                                  
 45758                                  ;
 45759                                  ; upper case table
 45760                                  ; ---------------------------------------------------------------------------
 45761                                  UCASE_TAB:	; label   byte
 45762 00000AAD 8000                    	dw	128
 45763 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 45764 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45765 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45766 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45767 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45768 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45769 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45770 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45771 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45772 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45773 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45774 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45775 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45776 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45777 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45778 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45779                                  ;
 45780                                  ; file upper case table
 45781                                  ; ---------------------------------------------------------------------------
 45782                                  FILE_UCASE_TAB:	; label  byte
 45783 00000B2F 8000                    	dw	128
 45784 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 45785 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45786 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45787 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45788 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45789 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45790 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45791 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45792 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45793 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45794 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45795 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45796 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45797 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45798 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45799 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45800                                  ;
 45801                                  ; file char list
 45802                                  ; ---------------------------------------------------------------------------
 45803                                  FILE_CHAR_TAB:	; label  byte
 45804 00000BB1 1600                    	dw	22				; length
 45805 00000BB3 0100FF                  	db	1,0,255 			; include all
 45806 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45807 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45807 00000BC2 7C3C3E2B3D3B2C     
 45808                                  	;db	24 dup (?)			; reserved
 45809 00000BC9 00<rep 18h>             	times	24 db 0
 45810                                  
 45811                                  ;
 45812                                  ; collate table
 45813                                  ; ---------------------------------------------------------------------------
 45814                                  COLLATE_TAB:	; label   byte
 45815 00000BE1 0001                    	dw	256
 45816 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45817 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45818 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45819 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45820 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45821 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45822 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45823 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45824 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45825 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45826 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45827 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45828 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45829 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45830 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45831 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45832 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45833 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45834 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45835 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45836 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45837 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45838 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45839 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45840 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45841 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45842 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45843 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45844 00000CC3 E053                    	db	224,"S"
 45845 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45846 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45847 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45848 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45849                                  
 45850                                  ; ------------------------------------------------<MSKK01>----------------------
 45851                                  
 45852                                  ; DOSDATA:0CE3h
 45853                                  
 45854                                  ; 29/04/2019
 45855                                  
 45856                                  ; dbcs is not supported in DOS 3.3
 45857                                  ;		   DBCS_TAB	    CC_DBCS <>
 45858                                  ;
 45859                                  ; DBCS for DOS 4.00			   2/12/KK
 45860                                  
 45861                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45862                                  ; ------------------------------------------------<MSKK01>----------------------
 45863                                  ;ifdef	DBCS
 45864                                  ; ifdef	  JAPAN
 45865                                  ;		dw	6		; <MSKK01>
 45866                                  ;		db	081h,09fh	; <MSKK01>
 45867                                  ;		db	0e0h,0fch	; <MSKK01>
 45868                                  ;		db	0,0		; <MSKK01>
 45869                                  ;
 45870                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45871                                  ; endif
 45872                                  ; ifdef	  TAIWAN
 45873                                  ;		dw	4		; <TAIWAN>
 45874                                  ;		db	081h,0FEh	; <TAIWAN>
 45875                                  ;		db	0,0		; <TAIWAN>
 45876                                  ;
 45877                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45878                                  ; endif
 45879                                  ; ifdef   KOREA                         ; Keyl
 45880                                  ;               dw      4               ; <KOREA>
 45881                                  ;               db      0A1h,0FEh       ; <KOREA>
 45882                                  ;               db      0,0             ; <KOREA>
 45883                                  ;
 45884                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45885                                  ;  endif
 45886                                  ;else
 45887 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45888                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45889 00000CE5 00<rep 10h>             		times	16 db 0
 45890                                  
 45891                                  ;		dw	6		;  2/12/KK
 45892                                  ;		db	081h,09Fh	;  2/12/KK
 45893                                  ;		db	0E0h,0FCh	;  2/12/KK
 45894                                  ;		db	0,0		;  2/12/KK
 45895                                  ;
 45896                                  ;endif
 45897                                  ; ------------------------------------------------<MSKK01>----------------------
 45898                                  
 45899                                  ; DOSDATA:0CF5h
 45900                                  
 45901                                  ; ---------------------------------------------------------------------------
 45902                                  ;
 45903                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45904                                  ;     ENTRY: AL = Character to map
 45905                                  ;     EXIT:  AL = The converted character
 45906                                  ; Alters no registers except AL and flags.
 45907                                  ; The routine should do nothing to chars below 80H.
 45908                                  ; ---------------------------------------------------------------------------
 45909                                  ; Example:
 45910                                  
 45911                                  MAP_CASE:
 45912                                  ;Procedure MAP_CASE,FAR
 45913                                  
 45914 00000CF5 3C80                    	CMP	AL,80h
 45915 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45916 00000CF9 CB                      	RETF
 45917                                  Map1:
 45918 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45919 00000CFC 1E                      	PUSH	DS
 45920 00000CFD 53                      	PUSH	BX
 45921 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45922                                  FINISH:
 45923 00000D01 0E                      	PUSH	CS		;Move to DS
 45924 00000D02 1F                      	POP	DS
 45925 00000D03 D7                      	XLAT			;Get upper case character
 45926 00000D04 5B                      	POP	BX
 45927 00000D05 1F                      	POP	DS
 45928                                  L_RET:	
 45929 00000D06 CB                      	RETF
 45930                                  
 45931                                  ;EndProc MAP_CASE
 45932                                  
 45933                                  ; ---------------------------------------------------------------------------
 45934                                  
 45935                                  ; The variables for ECS version are moved here for the same data alignments
 45936                                  ; as IBM-DOS and MS-DOS.
 45937                                  
 45938                                  InterChar:
 45939 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45940                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45941                                  DUMMY:	; LABEL   WORD
 45942                                  InterCon:  
 45943 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45944                                  SaveCurFlg:
 45945 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45946                                  
 45947                                  ; ---------------------------------------------------------------------------
 45948                                  
 45949 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45950                                  redir_patch:
 45951 00000D0C 00                      	  db	0
 45952                                  
 45953                                  ; DOSDATA:0D0Dh
 45954                                  
 45955                                  Mark1:	; label byte
 45956                                  
 45957                                  ;IF2
 45958                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45959                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45960                                  ;	ENDIF
 45961                                  ;ENDIF
 45962                                  
 45963 00000D0D 00<rep 5h>              	  times 5 db 0
 45964                                  
 45965                                  ;############################################################################
 45966                                  ;
 45967                                  ; ** HACK FOR DOS 4.0 REDIR **
 45968                                  ; 
 45969                                  ; The redir requires the following:
 45970                                  ;
 45971                                  ;	MSVERS	offset D12H
 45972                                  ;	YRTAB	offset D14H
 45973                                  ; 	MONTAB	offset D1CH
 45974                                  ;
 45975                                  ; WARNING! WARNING!
 45976                                  ; 
 45977                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45978                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45979                                  ;
 45980                                  ; CURRENTLY MARK1 = 0D0DH
 45981                                  ;
 45982                                  ;############################################################################
 45983                                  
 45984                                  	;ORG	0D12h
 45985                                  
 45986                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45987                                  
 45988                                  	;db	6
 45989                                  	;db	20
 45990                                  
 45991                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45992                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45993 00000D12 06                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45994 00000D13 16                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION
 45995                                  
 45996                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45997                                  ;
 45998                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>
 45999                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31>
 46000                                  
 46001                                  ; Days in year
 46002                                  
 46003                                  YRTAB:   
 46004 00000D14 C8A6                    	DB	200,166			; Leap year
 46005 00000D16 C8A5                    	DB	200,165
 46006 00000D18 C8A5                    	DB	200,165
 46007 00000D1A C8A5                    	DB	200,165
 46008                                  
 46009                                  ; Days of each month
 46010                                  
 46011                                  MONTAB:        
 46012 00000D1C 1F                      	DB      31                      ; January
 46013                                  february:
 46014 00000D1D 1C                      	DB	28 			; February--reset each 
 46015                                  					; time year changes
 46016 00000D1E 1F                              DB      31                      ; March
 46017 00000D1F 1E                              DB      30                      ; April
 46018 00000D20 1F                              DB      31                      ; May
 46019 00000D21 1E                              DB      30                      ; June
 46020 00000D22 1F                              DB      31                      ; July
 46021 00000D23 1F                              DB      31                      ; August
 46022 00000D24 1E                              DB      30                      ; September
 46023 00000D25 1F                              DB      31                      ; October
 46024 00000D26 1E                              DB      30                      ; November
 46025 00000D27 1F                              DB      31                      ; December
 46026                                  
 46027                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 46028                                  
 46029                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 46030                                  
 46031                                  SysInitTable:
 46032                                  	;dw	SYSINITVAR
 46033 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 46034 00000D2A 0000                            dw      0		; segment
 46035 00000D2C [2A12]                          dw	COUNTRY_CDPG	; pointer to country tabl
 46036 00000D2E 0000                            dw      0		; segment of pointer
 46037                                  
 46038                                  ; DOS 3.3 F.C. 6/12/86
 46039                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 46040                                  
 46041                                  FastTable:				; a better name
 46042                                  FastOpenTable:
 46043 00000D30 0200                    	dw      2                       ; number of entries
 46044 00000D32 [8212]                  	dw      FastRet			; pointer to ret instr.
 46045 00000D34 0000                    	dw      0                       ; and will be modified by
 46046 00000D36 [8212]                  	dw      FastRet			; FASTxxx when loaded in
 46047 00000D38 0000                    	dw      0                       
 46048                                  
 46049                                  ; DOS 3.3 F.C. 6/12/86
 46050                                  
 46051                                  FastFlg:				; flags
 46052                                  FastOpenFlg:
 46053 00000D3A 00                      	db	0			; don't change the foll: order
 46054                                  
 46055                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 46056                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 46057                                  ; or filled by FastOPen when calling FastOpen Lookup
 46058                                  
 46059                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 46060                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 46061                                  	;times	11 db 0
 46062 00000D3B 00<rep Bh>              	times	FEI.size db 0
 46063                                  
 46064                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 46065                                  ; when calling FastOpen Lookup
 46066                                  
 46067                                  Dir_Info_Buff:	; label  byte
 46068                                  	;db   	SIZE dir_entry dup (0)
 46069                                  	;times	32 db 0
 46070 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 46071                                  
 46072                                  Next_Element_Start:
 46073 00000D66 0000                    	dw	0			; save next element start offset
 46074                                  Del_ExtCluster:
 46075 00000D68 0000                    	dw	0			; for dos_delete
 46076                                  
 46077                                  ; The following is a stack and its pointer for interrupt 2F which is used
 46078                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 46079                                  ; not to destroy the INT 21 stack saved for the user.
 46080                                  
 46081                                  USER_SP_2F:	; LABEL  WORD
 46082 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 46083                                  
 46084                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 46085                                  DOS_TEMP:	; label  word		; temporary word
 46086                                  FAKE_STACK_2F:  
 46087                                  	; dw  14 dup (0)		; 12 register temporary storage
 46088 00000D6C 0000<rep Eh>            	times 14 dw 0
 46089                                  
 46090                                  Hash_Temp: 	;label  word		; temporary word
 46091                                  	;dw	4 dup (0)		; temporary hash table during config.sys
 46092 00000D88 0000<rep 4h>            	times	4 dw 0
 46093                                  
 46094                                  SCAN_FLAG:
 46095 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 46096                                  DATE_FLAG:
 46097 00000D91 0000                    	dw     0                	; flag to update the date
 46098                                  
 46099                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 46100 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 46101                                  
 46102                                  MSG_EXTERROR:	; label  DWORD		; for system message addr
 46103 00000D95 00000000                	dd     0               		; for extended error
 46104 00000D99 00000000                	dd     0			; for parser
 46105 00000D9D 00000000                	dd     0			; for critical errror
 46106 00000DA1 00000000                	dd     0			; for IFS
 46107 00000DA5 00000000                	dd     0			; for code reduction
 46108                                  
 46109                                  SEQ_SECTOR:	; label  DWORD 		; last sector read
 46110 00000DA9 FFFFFFFF                	dd     -1   
 46111                                  SC_SECTOR_SIZE:
 46112 00000DAD 0000                    	dw	0			; sector size for SC
 46113                                  SC_DRIVE:
 46114 00000DAF 00                      	db	0			; drive # for secondary cache
 46115                                  CurSC_DRIVE:
 46116 00000DB0 FF                      	db	-1			; current SC drive
 46117                                  CurSC_SECTOR:
 46118 00000DB1 00000000                	dd	0			; current SC starting sector
 46119                                  SC_STATUS:
 46120 00000DB5 0000                    	dw	0			; SC status word
 46121                                  SC_FLAG:
 46122 00000DB7 00                      	db	0			; SC flag
 46123                                  AbsDskErr:
 46124 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 46125                                  
 46126                                  NO_NAME_ID:	; label byte
 46127 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id
 46127 00000DC3 2020               
 46128                                  
 46129                                  ;hkn; moved from TABLE segment in kstrin.asm
 46130                                  
 46131                                  KISTR001S:	; label	byte		; 2/17/KK
 46132 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 46133                                  KISTR001E:	; label	byte		; 2/17/KK
 46134                                  
 46135                                  ; the nul device driver used to be part of the code. However, since the
 46136                                  ; header is in the data, and the entry points are only given as an offset,
 46137                                  ; the strategy and interrupt entry points must also be in the data now.
 46138                                  
 46139                                  ; DOSDATA:0DC6h
 46140                                  
 46141                                  SNULDEV:
 46142                                  ;procedure snuldev,far
 46143                                  	;or	word [es:bx+3],100h
 46144                                  	; 17/12/2022
 46145                                  	;or	byte [es:bx+4],01h
 46146                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 46147                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 46148 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 46149                                  INULDEV:
 46150 00000DCC CB                      	retf				; must not be a return!
 46151                                  ;endproc snuldev
 46152                                  
 46153                                  ;M044
 46154                                  ; Second part of save area for saving last para of Windows memory
 46155                                  
 46156                                  WinoldPatch2:
 46157                                  	;db	8 dup (?)	; M044
 46158 00000DCD 00<rep 8h>              	times	8 db 0	
 46159                                  UmbSave2:
 46160                                  	;db	5 dup (?)	; M062
 46161 00000DD5 00<rep 5h>              	times	5 db 0
 46162                                  UmbSaveFlag:
 46163 00000DDA 00                      	db	0		; M062
 46164                                  
 46165                                  ; DOSDATA:0DDBh
 46166                                  
 46167                                  Mark2:	; label byte
 46168                                  
 46169                                  ;IF2
 46170                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 46171                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46172                                  ;	ENDIF
 46173                                  ;ENDIF
 46174                                  
 46175                                  ;############################################################################
 46176                                  ;
 46177                                  ; ** HACK FOR DOS 4.0 REDIR **
 46178                                  ; 
 46179                                  ; The redir requires the following:
 46180                                  ;
 46181                                  ;	ERR_TABLE_21	offset DDBH
 46182                                  ;	ERR_TABLE_24	offset E5BH
 46183                                  ; 	ErrMap24	offset EABH
 46184                                  ;
 46185                                  ; WARNING! WARNING!
 46186                                  ;
 46187                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 46188                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 46189                                  ;
 46190                                  ; CURRENTLY MARK2 = 0DD0H
 46191                                  ;
 46192                                  ;############################################################################
 46193                                  
 46194                                  	;ORG	0DDBh
 46195                                  
 46196                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 46197                                  
 46198                                  ; ---------------------------------------------------------------------------
 46199                                  ;
 46200                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 46201                                  ; errors. Each entry is 4 bytes long:
 46202                                  ;
 46203                                  ;       Err#,Class,Action,Locus
 46204                                  ;
 46205                                  ; A value of 0FFh indicates a call specific value (ie. should already
 46206                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 46207                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 46208                                  ;
 46209                                  ; ---------------------------------------------------------------------------
 46210                                  
 46211                                  ;ErrTab  Macro   err,class,action,locus
 46212                                  ;ifidn <locus>,<0FFh>
 46213                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 46214                                  ;ELSE
 46215                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 46216                                  ;ENDIF
 46217                                  ;ENDM
 46218                                  
 46219                                  ERR_TABLE_21: ; LABEL   BYTE
 46220 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 46221 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46222 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46223 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 46224 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 46225 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46226 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 46227 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46228 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 46229 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 46230 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 46231 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46232 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 46233 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46234 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 46235 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 46236 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46237 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 46238 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46239 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46240 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 46241 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 46242 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 46243 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 46244 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 46245 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 46246 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 46247 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46248                                      ; MSDOS 6.0
 46249 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 46250 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 46251 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 46252 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 46253                                  
 46254                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 46255                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 46256                                  ;		db 2,8,3,2
 46257                                  ;		db 3,8,3,2
 46258                                  ;		db 4,1,4,1
 46259                                  ;		db 5,3,3,0FFh
 46260                                  ;		db 6,7,4,1
 46261                                  ;		db 7,7,5,5
 46262                                  ;		db 8,1,4,5
 46263                                  ;		db 9,7,4,5
 46264                                  ;		db 0Ah,7,4,5
 46265                                  ;		db 0Bh,9,3,1
 46266                                  ;		db 0Ch,7,4,1
 46267                                  ;		db 0Dh,9,4,1
 46268                                  ;		db 0Fh,8,3,2
 46269                                  ;		db 10h,3,3,2
 46270                                  ;		db 11h,0Dh,3,2
 46271                                  ;		db 12h,8,3,2
 46272                                  ;		db 50h,0Ch,3,2
 46273                                  ;		db 20h,0Ah,2,2
 46274                                  ;		db 21h,0Ah,2,2
 46275                                  ;		db 54h,1,4,0FFh
 46276                                  ;		db 56h,3,3,1
 46277                                  ;		db 52h,1,4,2
 46278                                  ;		db 32h,9,3,3
 46279                                  ;		db 55h,0Ch,3,3
 46280                                  ;		db 57h,9,3,1
 46281                                  ;		db 53h,0Dh,4,1
 46282                                  ;		db 24h,1,4,5
 46283                                  ; MSDOS 6.0 (MSDOS 6.21)
 46284                                  ;		db 26h,1,4,1
 46285                                  ;		db 27h,1,4,1
 46286                                  ;		db 5Ah,0Dh,4,2
 46287                                  ; MSDOS 6.0 & MSDOS 3.3
 46288                                  ;		db 0FFh,0FFh,0FFh,0FFh
 46289                                  
 46290                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 46291                                  
 46292                                  ; ---------------------------------------------------------------------------
 46293                                  ;
 46294                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 46295                                  ; errors. Each entry is 4 bytes long:
 46296                                  ;
 46297                                  ;       Err#,Class,Action,Locus
 46298                                  ;
 46299                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 46300                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 46301                                  ; THE END.
 46302                                  ;
 46303                                  ; ---------------------------------------------------------------------------
 46304                                  
 46305                                  ERR_TABLE_24: ; LABEL   BYTE
 46306 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46307 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46308 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 46309 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46310 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 46311 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46312 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 46313 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46314 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 46315 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 46316 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 46317 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 46318 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 46319 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46320 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46321 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46322 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 46323 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46324 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46325 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 46326                                  
 46327                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 46328                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 46329                                  ;		db 14h,4,5,1
 46330                                  ;		db 15h,5,7,0FFh
 46331                                  ;		db 16h,4,5,1
 46332                                  ;		db 17h,0Bh,4,2
 46333                                  ;		db 18h,4,5,1
 46334                                  ;		db 19h,5,1,2
 46335                                  ;		db 1Ah,0Bh,7,2
 46336                                  ;		db 1Bh,0Bh,4,2
 46337                                  ;		db 1Ch,2,7,4
 46338                                  ;		db 1Dh,5,4,0FFh
 46339                                  ;		db 1Eh,5,4,0FFh
 46340                                  ;		db 1Fh,0Dh,4,0FFh
 46341                                  ;		db 20h,0Ah,2,2
 46342                                  ;		db 21h,0Ah,2,2
 46343                                  ;		db 22h,0Bh,7,2
 46344                                  ;		db 32h,9,3,3
 46345                                  ;		db 23h,7,4,1
 46346                                  ;		db 24h,1,4,5
 46347                                  ;		db 0FFh,0Dh,5,0FFh
 46348                                  
 46349                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 46350                                  
 46351                                  ; ---------------------------------------------------------------------------
 46352                                  ;
 46353                                  ; We need to map old int 24 errors and device driver errors into the new set
 46354                                  ; of errors. The following table is indexed by the new errors
 46355                                  ;
 46356                                  ; ---------------------------------------------------------------------------
 46357                                  
 46358                                  ;Public  ErrMap24
 46359                                  ErrMap24: ; Label   BYTE
 46360 00000EAB 13                          DB  error_write_protect	; 0
 46361 00000EAC 14                          DB  error_bad_unit		; 1
 46362 00000EAD 15                          DB  error_not_ready		; 2
 46363 00000EAE 16                          DB  error_bad_command	; 3
 46364 00000EAF 17                          DB  error_CRC		; 4
 46365 00000EB0 18                          DB  error_bad_length	; 5
 46366 00000EB1 19                          DB  error_seek		; 6
 46367 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 46368 00000EB3 1B                          DB  error_sector_not_found	; 8
 46369 00000EB4 1C                          DB  error_out_of_paper	; 9
 46370 00000EB5 1D                          DB  error_write_fault	; A
 46371 00000EB6 1E                          DB  error_read_fault	; B
 46372 00000EB7 1F                          DB  error_gen_failure	; C
 46373 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 46374 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 46375 00000EBA 22                          DB  error_wrong_disk	; F
 46376                                  
 46377                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 46378                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 46379                                  	
 46380                                  ErrMap24End: ; LABEL   BYTE
 46381                                  
 46382                                  ; DOSDATA:0EBBh (MSDOS 6.21, MSDOS.SYS)
 46383                                  
 46384                                  ; ---------------------------------------------------------------------------
 46385                                  
 46386                                  ; 27/04/2019 - Retro DOS v4.0
 46387                                  
 46388                                  FIRST_BUFF_ADDR:
 46389 00000EBB 0000                    	dw	0			; first buffer address
 46390                                  SPECIAL_VERSION:
 46391 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 46392                                  FAKE_COUNT:
 46393 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 46394                                  OLD_FIRSTCLUS:
 46395 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 46396                                  
 46397                                  ; ---------------------------------------------------------------------------
 46398                                  
 46399                                  ;smr; moved from TABLE segment in exec.asm
 46400                                  
 46401 00000FC0 0000                    exec_init_SP: dw 0
 46402 00000FC2 0000                    exec_init_SS: dw 0
 46403 00000FC4 0000                    exec_init_IP: dw 0
 46404 00000FC6 0000                    exec_init_CS: dw 0
 46405                                  
 46406                                  exec_signature:
 46407 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 46408                                  exec_len_mod_512:
 46409 00000FCA 0000                    	dw	0	; low 9 bits of length
 46410                                  exec_pages:
 46411 00000FCC 0000                    	dw	0	; number of 512b pages in file
 46412                                  exec_rle_count:
 46413 00000FCE 0000                    	dw	0	; count of reloc entries
 46414                                  exec_par_dir:
 46415 00000FD0 0000                    	dw	0	; number of paragraphs before image
 46416                                  exec_min_BSS:
 46417 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 46418                                  exec_max_BSS:
 46419 00000FD4 0000                    	dw	0	; max number of para of BSS
 46420                                  exec_SS:
 46421 00000FD6 0000                    	dw	0	; stack of image
 46422                                  exec_SP:
 46423 00000FD8 0000                    	dw	0	; SP of image
 46424                                  exec_chksum:
 46425 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 46426                                  exec_IP:
 46427 00000FDC 0000                    	dw	0	; IP of entry
 46428                                  exec_CS:
 46429 00000FDE 0000                    	dw	0	; CS of entry
 46430                                  exec_rle_table:
 46431 00000FE0 0000                    	dw	0	; byte offset of reloc table
 46432                                  
 46433                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 46434                                  
 46435                                  ;smr; eom
 46436                                  
 46437                                  ; ---------------------------------------------------------------------------
 46438                                  
 46439                                  ;SR;
 46440                                  ; WIN386 instance table for DOS
 46441                                  
 46442                                  Win386_Info:
 46443 00000FE2 0300                    	db	3, 0
 46444 00000FE4 000000000000000000-     	dd	0, 0, 0
 46444 00000FED 000000             
 46445 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 46446                                  
 46447                                  Instance_Table:
 46448 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 46449 00000FFA [3200]00000400          	dw	BCON, 0, 4
 46450 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 46451 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 46452 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 46453 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 46454 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 46455 0000101E 00000000                	dw	0, 0
 46456                                  
 46457                                  ; M001; SR;
 46458                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of
 46459                                  ; M001; some DOS variables. Note that the only really important variable in
 46460                                  ; M001; this is User_Id. The other variables are needed only to patch stuff
 46461                                  ; M001; which does not need to be done in DOS 5.0. 
 46462                                  
 46463                                  ; 29/12/2022
 46464                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 46465                                  
 46466                                  Win386_DOSVars:
 46467 00001022 05                      	db	5	;Major version 5 ; M001
 46468 00001023 00                      	db	0	;Minor version 0 ; M001
 46469 00001024 [EC05]                  	dw	SAVEDS	; M001
 46470 00001026 [EA05]                  	dw	SAVEBX	; M001
 46471 00001028 [2103]                  	dw	INDOS	; M001
 46472 0000102A [3E03]                  	dw	USER_ID	; M001
 46473 0000102C [1503]                  	dw	CritPatch ; M001
 46474 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 46475                                  
 46476                                  ;SR;
 46477                                  ; Flag to indicate whether WIN386 is running or not
 46478                                  
 46479 00001030 00                      IsWin386: db	0
 46480                                  
 46481                                  ;M018
 46482                                  ; This variable contains the path to the VxD device needed for Win386
 46483                                  
 46484 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 46484 0000103A 2E33383600         
 46485                                  
 46486                                  ;End WIN386 support
 46487                                  
 46488                                  ; ---------------------------------------------------------------------------
 46489                                  
 46490                                  ;SR;
 46491                                  ; These variables have been added for the special lie support for device
 46492                                  ;drivers.
 46493                                  ;
 46494                                  
 46495                                  DriverLoad:	
 46496 0000103F 01                      	db	1	;initialized to do special handling
 46497                                  BiosDataPtr:
 46498 00001040 00000000                	dd	0
 46499                                  
 46500                                  ; 25/03/2024
 46501                                  %if 1
 46502                                  ; 29/12/2022 - Retro DOS v4.1
 46503                                  ;%if 0
 46504                                  
 46505                                  ; 27/04/2019 - Retro DOS v4.0
 46506                                  ; 04/11/2022
 46507                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 46508                                  
 46509                                  ;------------------------------------------------------------------------
 46510                                  ; Patch for Sidekick
 46511                                  ;
 46512                                  ; A documented method for finding the offset of the Errormode flag in the
 46513                                  ; dos swappable data area if for the app to scan in the dos segment (data)
 46514                                  ; for the following sequence of instructions.
 46515                                  ;
 46516                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 46517                                  ;
 46518                                  ; The Offset of Errormode flag is 0320h
 46519                                  ;
 46520                                  ;------------------------------------------------------------------------
 46521                                  
 46522 00001044 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 46523 0000104A 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 46524 0000104C 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 46525 00001051 CD28                    	db	0CDh, 028h			 ; int  28h
 46526                                  
 46527                                  ;--------------------------------------------------------------------------
 46528                                  ; Patch for PortOfEntry - M036
 46529                                  ;
 46530                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 46531                                  ; the offset of Errormode flag. The following patch is to support them in 
 46532                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 46533                                  ;
 46534                                  ;---------------------------------------------------------------------------
 46535                                  
 46536 00001053 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 46537 00001058 7537                    	db	075h, 037h			 ; jnz	NearLabel
 46538 0000105A BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 46539                                  
 46540                                  %endif ; 29/12/2022
 46541                                  
 46542                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 46543                                  
 46544                                  ;--------------------------------------------------------------------------
 46545                                  
 46546                                  ;*** New FCB Implementation
 46547                                  ; This variable is used as a cache in the new FCB implementation to remember
 46548                                  ;the address of a local SFT that can be recycled for a regenerate operation
 46549                                  
 46550 0000105D 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 46551                                  
 46552                                  ;DOSDATA ENDS
 46553                                  
 46554                                  ;============================================================================
 46555                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 46556                                  ;============================================================================
 46557                                  ; 27/04/2019 - Retro DOS 4.0
 46558                                  
 46559                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 46560                                  
 46561                                  ;---------------------------------------------------------------------------
 46562                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 46563                                  ;----------------------------------------------------------------------------
 46564                                  	
 46565                                  	;db	90h
 46566                                  
 46567                                  	;EVEN
 46568 00001061 90                      align 2
 46569                                  
 46570                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 46571                                  
 46572                                  DOSINTTABLE:	; LABEL	DWORD
 46573                                  
 46574                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 46575                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 46576                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 46577                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 46578                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 46579                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 46580                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 46581                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 46582                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 46583                                  	
 46584 00001062 [4251]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 46585 00001066 [DC02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4
 46586 0000106A [0803]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 46587 0000106E [2D05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 46588 00001072 [B405]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 46589 00001076 [6560]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 46590 0000107A [FD06]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 46591 0000107E [E302]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 46592 00001082 [E202]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 46593                                  
 46594 00001086 0000                    SS_Save: dw	0		; save user's stack segment
 46595 00001088 0000                    SP_Save: dw	0		; save user's stack offset
 46596                                  
 46597                                  ;-------------------------------------------------------------------------
 46598                                  ;
 46599                                  ; LOW MEM STUB:
 46600                                  ;
 46601                                  ; The low mem stub contains the entry points into DOS for all interrupts
 46602                                  ; handled by DOS. This stub is installed if the user specifies that the
 46603                                  ; DOS load in HIMEM. Each entry point does this.
 46604                                  ;
 46605                                  ; 	1. if jmp to 8 has been patched out
 46606                                  ;	   2. if A20 OFF
 46607                                  ;	      3. Enable A20
 46608                                  ;	   4. else 
 46609                                  ;	      5. just go to dos entry
 46610                                  ;	   6. endif
 46611                                  ;	7. else
 46612                                  ;	   8. just go to dos entry
 46613                                  ;	9. endif
 46614                                  ;
 46615                                  ;--------------------------------------------------------------------------
 46616                                  
 46617                                  ; 27/04/2019 - Retro DOS v4.0
 46618                                  
 46619                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 46620                                  
 46621                                  ;--------------------------------------------------------------------------
 46622                                  ;
 46623                                  ; DIVIDE BY 0 handler
 46624                                  ;
 46625                                  ;--------------------------------------------------------------------------
 46626                                  
 46627                                  ldivov:
 46628                                  	; The following jump, skipping the XMS calls will be patched to
 46629                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46630                                  	; needed because the stub is installed even before the XMS driver
 46631                                  	; is loaded if the user specifies dos=high in the config.sys
 46632                                  i0patch:
 46633 0000108A EB03                    	jmp	short divov_cont
 46634                                  
 46635 0000108C E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46636                                  divov_cont:
 46637 0000108F 2EFF2E[6210]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 46638                                  
 46639                                  ;------------------------------------------------------------------------
 46640                                  ;
 46641                                  ; INT 20 Handler
 46642                                  ;
 46643                                  ; Here we do not have to set up the stack to return here as the abort call
 46644                                  ; will return to the address after the int 21 ah=4b call. This would be the
 46645                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 46646                                  ; will be restored then.
 46647                                  ;
 46648                                  ;-------------------------------------------------------------------------
 46649                                  
 46650                                  lquit:
 46651                                  	; The following jump, skipping the XMS calls will be patched to
 46652                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46653                                  	; needed because the stub is installed even before the XMS driver
 46654                                  	; is loaded if the user specifies dos=high in the config.sys
 46655                                  i20patch:
 46656 00001094 EB03                    	jmp	short quit_cont
 46657                                  
 46658 00001096 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46659                                  quit_cont:
 46660 00001099 2EFF2E[6610]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 46661                                  
 46662                                  ;--------------------------------------------------------------------------
 46663                                  ;
 46664                                  ; INT 21 Handler
 46665                                  ;
 46666                                  ;--------------------------------------------------------------------------
 46667                                  
 46668                                  lcommand:
 46669                                  	; The following jump, skipping the XMS calls will be patched to
 46670                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46671                                  	; needed because the stub is installed even before the XMS driver
 46672                                  	; is loaded if the user specifies dos=high in the config.sys
 46673                                  i21patch:
 46674 0000109E EB03                    	jmp	short command_cont
 46675                                  
 46676 000010A0 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46677                                  command_cont:
 46678 000010A3 2EFF2E[6A10]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 46679                                  
 46680                                  ;------------------------------------------------------------------------
 46681                                  ;
 46682                                  ; INT 25 
 46683                                  ;
 46684                                  ;----------------------------------------------------------------------------
 46685                                  
 46686                                  labsdrd:
 46687                                  	; The following jump, skipping the XMS calls will be patched to
 46688                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46689                                  	; needed because the stub is installed even before the XMS driver
 46690                                  	; is loaded if the user specifies dos=high in the config.sys
 46691                                  i25patch:
 46692 000010A8 EB03                    	jmp	short absdrd_cont
 46693                                  
 46694 000010AA E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46695                                  absdrd_cont:
 46696 000010AD 2EFF2E[6E10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 46697                                  
 46698                                  ;-------------------------------------------------------------------------
 46699                                  ;
 46700                                  ; INT 26
 46701                                  ;
 46702                                  ;-----------------------------------------------------------------------
 46703                                  
 46704                                  labsdwrt:
 46705                                  	; The following jump, skipping the XMS calls will be patched to
 46706                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46707                                  	; needed because the stub is installed even before the XMS driver
 46708                                  	; is loaded if the user specifies dos=high in the config.sys
 46709                                  i26patch:
 46710 000010B2 EB03                    	jmp	short absdwrt_cont
 46711                                  
 46712 000010B4 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46713                                  absdwrt_cont:
 46714 000010B7 2EFF2E[7210]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 46715                                  
 46716                                  ;------------------------------------------------------------------------
 46717                                  ;
 46718                                  ; INT 27
 46719                                  ;
 46720                                  ;-----------------------------------------------------------------------
 46721                                  
 46722                                  lstay_resident:
 46723                                  	; The following jump, skipping the XMS calls will be patched to
 46724                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46725                                  	; needed because the stub is installed even before the XMS driver
 46726                                  	; is loaded if the user specifies dos=high in the config.sys
 46727                                  i27patch:
 46728 000010BC EB03                    	jmp	short sr_cont
 46729                                  
 46730 000010BE E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46731                                  sr_cont:
 46732 000010C1 2EFF2E[7610]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 46733                                  
 46734                                  ;-----------------------------------------------------------------------------
 46735                                  ;
 46736                                  ; INT 2f
 46737                                  ;
 46738                                  ;-------------------------------------------------------------------------
 46739                                  
 46740                                  lint2f:
 46741                                  	; The following jump, skipping the XMS calls will be patched to
 46742                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46743                                  	; needed because the stub is installed even before the XMS driver
 46744                                  	; is loaded if the user specifies dos=high in the config.sys
 46745                                  i2fpatch:
 46746 000010C6 EB03                    	jmp	short int2f_cont
 46747                                  
 46748 000010C8 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46749                                  int2f_cont:
 46750 000010CB 2EFF2E[7A10]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 46751                                  
 46752                                  ;-----------------------------------------------------------------------------
 46753                                  ;
 46754                                  ; CPM entry
 46755                                  ;
 46756                                  ;------------------------------------------------------------------------
 46757                                  
 46758                                  lcall_entry:
 46759                                  	; The following jump, skipping the XMS calls will be patched to
 46760                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46761                                  	; needed because the stub is installed even before the XMS driver
 46762                                  	; is loaded if the user specifies dos=high in the config.sys
 46763                                  cpmpatch:
 46764 000010D0 EB03                    	jmp	short callentry_cont
 46765                                  
 46766 000010D2 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46767                                  callentry_cont:
 46768 000010D5 2EFF2E[7E10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 46769                                  
 46770                                  ;--------------------------------------------------------------------------
 46771                                  
 46772                                  lirett:
 46773 000010DA CF                      	iret
 46774                                  
 46775                                  ;---------------------------------------------------------------------------
 46776                                  ;
 46777                                  ; LowIntXX:
 46778                                  ;
 46779                                  ; Interrupts from DOS that pass control to a user program must be done from
 46780                                  ; low memory, as the user program may change the state of the A20 line or
 46781                                  ; they may require that the A20 line be OFF. The following piece of code is
 46782                                  ; far call'd from the following places in DOS:
 46783                                  ;
 46784                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 46785                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 46786                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 46787                                  ;
 46788                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 46789                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 46790                                  ; before doing the ints and then do a far junp back into DOS.
 46791                                  ;
 46792                                  ;---------------------------------------------------------------------------
 46793                                  
 46794 000010DB 00000000                DosRetAddr23:	dd	0
 46795 000010DF 00000000                DosRetAddr24:	dd	0
 46796 000010E3 00000000                DosRetAddr28:	dd	0
 46797                                  
 46798                                  	; Execute int 23h from low memory
 46799                                  LowInt23:
 46800                                  					; save the return address that is on
 46801                                  					; the stack
 46802 000010E7 2E8F06[DB10]            	pop	word [cs:DosRetAddr23]
 46803 000010EC 2E8F06[DD10]            	pop	word [cs:DosRetAddr23+2]
 46804                                  
 46805 000010F1 CD23                    	int	23h			; ctrl C
 46806                                  					; turn on A20 it has been turned OFF
 46807                                  					; by int 28/23/24 handler.
 46808                                  
 46809 000010F3 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46810                                  
 46811 000010F6 2EFF2E[DB10]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46812                                  
 46813                                  
 46814                                  	; Execute int 24h from low memory
 46815                                  LowInt24:
 46816                                  					; save the return address that is on
 46817                                  					; the stack
 46818 000010FB 2E8F06[DF10]            	pop	word [cs:DosRetAddr24]
 46819 00001100 2E8F06[E110]            	pop	word [cs:DosRetAddr24+2]
 46820                                  
 46821 00001105 CD24                    	int	24h			; crit error
 46822                                  					; turn on A20 it has been turned OFF
 46823                                  					; by int 28/23/24 handler.
 46824                                  
 46825 00001107 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46826                                  
 46827 0000110A 2EFF2E[DF10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46828                                  
 46829                                  
 46830                                   
 46831                                  	; Execute int 28h from low memory
 46832                                  LowInt28:
 46833 0000110F CD28                    	int	28h			; idle int
 46834                                  					; turn on A20 it has been turned OFF
 46835                                  					; by int 28/23/24 handler.
 46836                                  
 46837 00001111 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46838                                  
 46839 00001114 CB                      	retf
 46840                                  
 46841                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46842                                  
 46843                                  ;-------------------------------------------------------------------------
 46844                                  ;
 46845                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46846                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46847                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46848                                  ; This is so because exepac'd programs rely on address wrap.
 46849                                  ;
 46850                                  ;-------------------------------------------------------------------------
 46851                                  
 46852                                  disa20_xfer:
 46853 00001115 E83F00                  	call	XMMDisableA20		; disable A20
 46854                                  
 46855                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46856                                  
 46857                                  	; DS:SI points to entry point
 46858                                  	; AX:DI points to initial stack
 46859                                  	; DX has PDB pointer
 46860                                  	; BX has initial AX value
 46861                                  
 46862 00001118 FA                      	cli
 46863 00001119 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46864                                  
 46865 0000111F 8ED0                    	mov	SS,AX			; set up user's stack
 46866 00001121 89FC                    	mov	SP,DI			; and SP
 46867 00001123 FB                      	sti
 46868                                  
 46869 00001124 1E                      	push	DS			; fake long call to entry
 46870 00001125 56                      	push	SI
 46871 00001126 8EC2                    	mov	ES,DX			; set up proper seg registers
 46872 00001128 8EDA                    	mov	DS,DX
 46873 0000112A 89D8                    	mov	AX,BX			; set up proper AX
 46874 0000112C CB                      	retf
 46875                                  
 46876                                  ;-------------------------------------------------------------------------
 46877                                  ;
 46878                                  ; M003:
 46879                                  ;
 46880                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46881                                  ; come here, turn A20 OFF restore user stack and registers before returning
 46882                                  ; to user. This is done in dos\msdisp.asm. This has been done to support
 46883                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for
 46884                                  ; more info.
 46885                                  ;
 46886                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that
 46887                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's
 46888                                  ; stack to avoid additional stack overhead for the user.
 46889                                  ;
 46890                                  ; -------------------------------------------------------------------------
 46891                                  
 46892                                  disa20_iret:
 46893 0000112D E82700                  	call	XMMDisableA20
 46894 00001130 FE0E[2103]              	dec	byte [INDOS]
 46895 00001134 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46896 00001138 8B26[8405]              	mov	SP,[USER_SP]
 46897 0000113C 89E5                    	mov	BP,SP
 46898                                  	;mov	[BP+user_env.user_AX],AL
 46899 0000113E 884600                  	mov	[bp],al
 46900 00001141 A1[F205]                	mov	AX,[NSP]
 46901 00001144 A3[8405]                	mov	[USER_SP],AX
 46902 00001147 A1[F005]                	mov	AX,[NSS]
 46903 0000114A A3[8605]                	mov	[USER_SS],AX
 46904                                  
 46905 0000114D 58                      	pop	AX			; restore user regs
 46906 0000114E 5B                      	pop	BX
 46907 0000114F 59                      	pop	CX
 46908 00001150 5A                      	pop	DX
 46909 00001151 5E                      	pop	SI
 46910 00001152 5F                      	pop	DI
 46911 00001153 5D                      	pop	BP
 46912 00001154 1F                      	pop	DS
 46913 00001155 07                      	pop	ES
 46914 00001156 CF                      	iret
 46915                                  
 46916                                  ;**************************************************************************
 46917                                  ;***	XMMDisableA20 - switch 20th address line
 46918                                  ;
 46919                                  ;	This routine is used to disable the 20th address line in
 46920                                  ;	the system using XMM calls.
 46921                                  ;
 46922                                  ;	ENTRY	none		;ds = _DATA
 46923                                  ;	EXIT	A20 line disabled
 46924                                  ;	USES	NOTHING
 46925                                  ;
 46926                                  ;**************************************************************************
 46927                                  
 46928                                  XMMDisableA20:
 46929 00001157 53                      	push	bx
 46930 00001158 50                      	push	ax
 46931                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46932 00001159 B406                    	mov	ah,6
 46933 0000115B 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 46934 00001160 58                      	pop	ax
 46935 00001161 5B                      	pop	bx
 46936 00001162 C3                      	retn
 46937                                  
 46938                                  ; The entry point in the BIOS XMS driver is defined here.
 46939                                  
 46940                                  XMMcontrol:
 46941 00001163 00000000                	dd	0
 46942                                  
 46943                                  ;--------------------------------------------------------------------------
 46944                                  ;
 46945                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46946                                  ;
 46947                                  ;	This routine is used to query the A20 state in
 46948                                  ;	the system using XMM calls.
 46949                                  ;
 46950                                  ;	ENTRY: none
 46951                                  ;
 46952                                  ;	EXIT : A20 will be ON
 46953                                  ;
 46954                                  ; 	USES : NONE
 46955                                  ;
 46956                                  ;--------------------------------------------------------------------------
 46957                                  
 46958                                  ; 25/03/2024
 46959                                  ;;19/09/2023
 46960                                  LowMemory:	; label dword		; Set equal to 0000:0080
 46961 00001167 8000                    	dw	00080h
 46962 00001169 0000                    	dw	00000h
 46963                                  
 46964                                  HighMemory:	; label dword
 46965 0000116B 9000                    	dw	00090h			; Set equal to FFFF:0090
 46966 0000116D FFFF                    	dw	0FFFFh
 46967                                  
 46968                                  	; 25/03/2024 - Retro DOS v5.0
 46969                                  	; MSDOS 5.0-6.22 MSDOS.SYS - DOSDATA:116Fh
 46970                                  	; (PCDOS 7.1 IBMDOS.COM - DOSDATA:1085h)
 46971                                  
 46972                                  EnsureA20ON:
 46973 0000116F 9C                      	pushf
 46974 00001170 1E                      	push    ds
 46975 00001171 06                      	push	es
 46976 00001172 51                      	push	cx
 46977 00001173 56                      	push	si
 46978 00001174 57                      	push	di
 46979                                  
 46980                                  	; 25/03/2024
 46981                                  	;;19/09/2023
 46982 00001175 2EC536[6711]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46983 0000117A 2EC43E[6B11]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46984                                  
 46985                                  	; 25/03/2024
 46986                                  	;xor	di,di
 46987                                  	;mov	es,di
 46988                                  	;dec	di
 46989                                  	;mov	si,90h	; 0FFFFh:0090h	; HighMemory
 46990                                  	;mov	ds,di
 46991                                  	;mov	di,80h	; 0000h:0080h	; LowMemory
 46992                                  	
 46993 0000117F B90400                  	mov	cx,4
 46994 00001182 FC                      	cld
 46995 00001183 F3A7                    	repe    cmpsw
 46996                                  
 46997 00001185 7407                    	jz	short EA20_OFF
 46998                                  EA20_RET:
 46999 00001187 5F                      	pop	di
 47000 00001188 5E                      	pop	si
 47001 00001189 59                      	pop	cx
 47002 0000118A 07                      	pop	es
 47003 0000118B 1F                      	pop	ds
 47004 0000118C 9D                      	popf
 47005 0000118D C3                      	retn
 47006                                  
 47007                                  EA20_OFF:
 47008                                  	; We are going to do the XMS call on the DOS's AuxStack.
 47009                                  	; NOTE: ints are disabled at this point.
 47010                                  
 47011 0000118E 53                      	push	bx
 47012 0000118F 50                      	push	ax
 47013                                  
 47014 00001190 8CD0                    	mov	ax,ss			; save user's stack pointer
 47015 00001192 2EA3[8610]              	mov	[cs:SS_Save],ax
 47016 00001196 2E8926[8810]            	mov	[cs:SP_Save],sp
 47017 0000119B 8CC8                    	mov	ax,cs
 47018 0000119D 8ED0                    	mov	ss,ax
 47019 0000119F BC[A007]                	mov	sp,AUXSTACK
 47020                                  					; ss:sp -> DOSDATA:AuxStack
 47021                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 47022 000011A2 B405                    	mov	ah,5
 47023 000011A4 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 47024 000011A9 09C0                    	or	ax,ax
 47025 000011AB 740F                    	jz	short XMMerror		; AX = 0 fatal error
 47026                                  
 47027 000011AD 2EA1[8610]              	mov	ax,[cs:SS_Save]		; restore user stack
 47028 000011B1 8ED0                    	mov	ss,ax
 47029 000011B3 2E8B26[8810]            	mov	sp,[cs:SP_Save]
 47030                                  
 47031 000011B8 58                      	pop	ax
 47032 000011B9 5B                      	pop	bx
 47033                                  
 47034 000011BA EBCB                    	jmp	short EA20_RET
 47035                                  
 47036                                  XMMerror:				; M006 - Start
 47037 000011BC B40F                    	mov	ah,0Fh			; get video mode
 47038 000011BE CD10                    	int	10h
 47039 000011C0 3C07                    	cmp	al,7			; Q: are we an MDA
 47040 000011C2 7406                    	je	short XMMcont		; Y: do not change mode
 47041 000011C4 30E4                    	xor	ah,ah ; 0		; set video mode
 47042 000011C6 B002                    	mov	al,02h			; 80 X 25 text
 47043 000011C8 CD10                    	int	10h
 47044                                  XMMcont:
 47045 000011CA B405                    	mov	ah,05h			; set display page
 47046 000011CC 30C0                    	xor	al,al			; page 0
 47047 000011CE CD10                    	int	10h
 47048                                  	
 47049 000011D0 BE[B812]                	mov	si,XMMERRMSG
 47050 000011D3 0E                      	push	cs
 47051 000011D4 1F                      	pop	ds
 47052 000011D5 FC                      	cld				; clear direction flag
 47053                                  XMMprnt:
 47054 000011D6 AC                      	lodsb
 47055 000011D7 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 47056 000011D9 7409                    	jz	short XMMStall		; function 0Eh
 47057 000011DB B40E                    	mov	ah,0Eh
 47058 000011DD BB0700                  	mov	bx,7
 47059 000011E0 CD10                    	int	10h
 47060 000011E2 EBF2                    	jmp	short XMMprnt
 47061                                  
 47062                                  XMMStall:
 47063 000011E4 FB                      	sti				; allow the user to warm boot
 47064 000011E5 EBFD                    	jmp	short XMMStall		; M006 - End
 47065                                  
 47066                                  ;---------------------------------------------------------------------------
 47067                                  
 47068                                  ; 27/04/2019 - Retro DOS v4.0
 47069                                  
 47070                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 47071                                  ALTAH	equ 0Ch
 47072                                  
 47073                                  ;This has been put in for WIN386 2.XX support. The format of the instance
 47074                                  ;table was different for this. Segments will be patched in at init time.
 47075                                  
 47076                                  ; 25/03/2024
 47077                                  ; MSDOS 5.0-6.22 MSDOS.SYS - DOSDATA:11E7h
 47078                                  ; (PCDOS 7.1 IBMDOS.COM - DOSDATA:10FCh)
 47079                                  
 47080                                  OldInstanceJunk:
 47081 000011E7 7000                    	dw	70h	;segment of BIOS
 47082 000011E9 0000                    	dw	0	;indicate stacks in SYSINIT area
 47083 000011EB 0600                    	dw	6	;5 instance items
 47084                                  
 47085                                  	;dw	0,offset dosdata:contpos, 2
 47086                                  	;dw	0,offset dosdata:bcon, 4
 47087                                  	;dw	0,offset dosdata:carpos,106h
 47088                                  	;dw	0,offset dosdata:charco, 1
 47089                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 47090                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 47091                                  
 47092 000011ED 0000[2200]0200          	dw	0,CONTPOS,2
 47093 000011F3 0000[3200]0400          	dw	0,BCON,4
 47094 000011F9 0000[F901]0601          	dw	0,CARPOS,106h
 47095 000011FF 0000[0003]0100          	dw	0,CHARCO,1
 47096 00001205 0000[C00F]2200          	dw	0,exec_init_SP,34
 47097 0000120B 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 47098                                  
 47099                                  ;---------------------------------------------------------------------------
 47100                                  
 47101                                  ; M021-
 47102                                  ;
 47103                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 47104                                  ; 	takes control of the HMA. When running, this word is a reliable
 47105                                  ;	indicator that the DOS is actually using HMA. You can't just use
 47106                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 47107                                  
 47108                                  DosHasHMA:
 47109 00001211 00                      	db	0
 47110                                  FixExePatch:
 47111 00001212 0000                    	dw	0		; M012
 47112                                  
 47113                                  ; 25/03/2024
 47114                                  ;; 28/12/2022 - Retro DOS v4.1
 47115                                  RationalPatchPtr:
 47116 00001214 0000                    	dw	0		; M012
 47117                                  
 47118                                  ; End M021
 47119                                  
 47120                                  ;---------------------------------------------------------------------------
 47121                                  
 47122                                  ; 25/03/2024
 47123                                  %if 1
 47124                                  ;; 28/12/2022 - Retro DOS v4.1
 47125                                  ;%if 0
 47126                                  
 47127                                  ; M020 Begin
 47128                                  
 47129                                  RatBugCode:	; proc	far
 47130 00001216 51                      	push	cx
 47131 00001217 8B0E1000                	mov	cx,[10h]
 47132                                  rbc_loop:
 47133                                  	;loop	$
 47134 0000121B E2FE                    	loop	rbc_loop
 47135 0000121D 59                      	pop	cx
 47136 0000121E CB                      	retf
 47137                                  
 47138                                  ; M020 End
 47139                                  
 47140                                  %endif
 47141                                  
 47142                                  ;---------------------------------------------------------------------------
 47143                                  	
 47144                                  UmbSave1:
 47145                                  	;db	11 dup (?)	; M023
 47146 0000121F 00<rep Bh>              	times	11 db 0	
 47147                                  
 47148                                  ; DOSDATA:122Ah
 47149                                  
 47150                                  Mark3:	; label byte
 47151                                  
 47152                                  ;IF2
 47153                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 47154                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 47155                                  ;	ENDIF
 47156                                  ;ENDIF
 47157                                  
 47158                                  ;############################################################################
 47159                                  ;
 47160                                  ; ** HACK FOR DOS 4.0 REDIR **
 47161                                  ;
 47162                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 47163                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 47164                                  ; COUNTRY_CDPG if it can. 
 47165                                  ;
 47166                                  ; MARK3 SHOULD NOT BE > 122AH
 47167                                  ;
 47168                                  ; As of 9/6/90, this area is FULL!
 47169                                  ;
 47170                                  ;############################################################################
 47171                                   
 47172                                  	;ORG	0122Ah
 47173                                  
 47174                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 47175                                  
 47176                                  ; The following table is used for DOS 3.3
 47177                                  ;DOS country and code page information is defined here for DOS 3.3.
 47178                                  ;The initial value for ccDosCountry is 1 (USA).
 47179                                  ;The initial value for ccDosCodepage is 850.
 47180                                  
 47181                                  ; country and code page information
 47182                                  ; ---------------------------------------------------------------------------
 47183                                  COUNTRY_CDPG:	; label  byte
 47184 0000122A 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 47185 00001232 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 47185 0000123B 53595300           
 47186                                  	;db   51 dup (?)
 47187 0000123F 00<rep 33h>             	times 51 db 0
 47188                                  ; ------------------------------------------------<MSKK01>-------------------
 47189                                  ;ifdef	DBCS
 47190                                  ;  ifdef JAPAN
 47191                                  ;	dw   932			; system code page id (JAPAN)
 47192                                  ;  endif
 47193                                  ;  ifdef TAIWAN
 47194                                  ;	dw   938			; system code page id (TAIWAN)
 47195                                  ;  endif
 47196                                  ;  ifdef KOREA
 47197                                  ;	dw   934			; system code page id (KOREA IBM)
 47198                                  ;  endif
 47199                                  ;else
 47200 00001272 B501                    	dw   437			; system code page id
 47201                                  ;endif
 47202                                  ; ------------------------------------------------<MSKK01>-------------------
 47203 00001274 0600                    	dw   6				; number of entries
 47204 00001276 02                      	db   SetUcase  ; 2		; Ucase type
 47205 00001277 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 47206 00001279 0000                    	dw   0				; segment of poiter
 47207 0000127B 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 47208 0000127C [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 47209 0000127E 0000                    	dw   0				; segment of poiter
 47210 00001280 05                      	db   SetFileList ; 5		; valid file chars type
 47211 00001281 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 47212 00001283 0000                    	dw   0				; segment of poiter
 47213 00001285 06                      	db   SetCollate	; 6		; collate type
 47214 00001286 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 47215 00001288 0000                    	dw   0				; segment of poiter
 47216 0000128A 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 47217 0000128B [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 47218 0000128D 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 47219 0000128F 01                      	db   SetCountryInfo  ; 1	; country info type
 47220 00001290 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 47221                                  ; ------------------------------------------------<MSKK01>-------------------
 47222                                  ;ifdef	DBCS
 47223                                  ;	...... 
 47224                                  ;else
 47225 00001292 0100                    	dw   1				; USA country id
 47226 00001294 B501                    	dw   437			; USA system code page id
 47227 00001296 0000                    	dw   0 				; date format
 47228 00001298 2400000000              	db   '$',0,0,0,0		; currency symbol
 47229 0000129D 2C00                    	db   ',',0			; thousand separator
 47230 0000129F 2E00                    	db   '.',0			; decimal separator
 47231 000012A1 2D00                    	db   '-',0			; date separator
 47232 000012A3 3A00                    	db   ':',0			; time separator
 47233 000012A5 00                      	db   0				; currency format flag
 47234 000012A6 02                      	db   2				; # of digits in currency
 47235 000012A7 00                      	db   0 				; time format
 47236 000012A8 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 47237 000012AA 0000                    	dw   0				; segment of entry point
 47238 000012AC 2C00                    	db   ',',0			; data list separator
 47239 000012AE 000000000000000000-     	dw   0,0,0,0,0			; reserved
 47239 000012B7 00                 
 47240                                  ;endif
 47241                                  ; ------------------------------------------------<MSKK01>-------------------
 47242                                  
 47243                                  ; 27/04/2019 - Retro DOS v4.0
 47244                                  
 47245                                  ;include msdos.cl2			; XMMERRMSG
 47246                                  
 47247                                  ; DOSDATA:12B8h (MSDOS 6.22, MSDOS.SYS) ; 17/01/2024
 47248                                  
 47249                                  XMMERRMSG:
 47250 000012B8 0D0A                    	db	0Dh,0Ah
 47251 000012BA 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 47251 000012C3 617265204572726F72-
 47251 000012CC 0D0A24             
 47252                                  
 47253                                  ; DOSDATA ends
 47254                                  
 47255                                  ; 05/11/2022
 47256                                  ;----------------------------------------------------------------------------
 47257                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 47258                                  ;----------------------------------------------------------------------------
 47259                                  
 47260                                  ; 28/12/2022 - Retro DOS v4.1
 47261                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 47262                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 47263                                  ;----------------------------------------------------------------------------
 47264                                  %if 0
 47265                                  
 47266                                  ;----------------------------------------------------------------------------
 47267                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47268                                  
 47269                                  ;============================================================================
 47270                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 47271                                  ;============================================================================
 47272                                  ; 27/04/2019 - Retro DOS 4.0
 47273                                  
 47274                                  ;DOSDATA Segment
 47275                                  
 47276                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 47277                                  
 47278                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47279                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 47280                                  
 47281                                  ; first and second DOS patches
 47282                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 47283                                  ;
 47284                                  ; Code in disk.asm, 2 locations, one for read, one for write
 47285                                  ;	DVRDLP:
 47286                                  ;	DVWRTLP:
 47287                                  ;
 47288                                  ;
 47289                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 47290                                  ;	lds	si,si+7 				  ; sf_devptr
 47291                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 47292                                  
 47293                                  DOSP1_ID:	db	036h,0C5h,036h
 47294                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 47295                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 47296                                  
 47297                                  		db	90h, 90h
 47298                                  
 47299                                  DOSP12_ID:	db	036h,0C5h,036h
 47300                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 47301                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 47302                                  
 47303                                  ; DOSDATA:12E3h
 47304                                  
 47305                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 47306                                  ;
 47307                                  ; Code in disk.asm, 1 location
 47308                                  ;	GETBUF:
 47309                                  ;
 47310                                  ; 051h	push	cx	<- begin special int28 mode
 47311                                  ;	push	es
 47312                                  ;	push	di
 47313                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 47314                                  ;	call	????	; $STD_CON_STRING_INPUT
 47315                                  ;	pop	di
 47316                                  ;	pop	es
 47317                                  ; 059h	pop	cx	<- end special int28 mode
 47318                                  
 47319                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 47320                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 47321                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 47322                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 47323                                  DOSP4_ID:	db	059h			; pop cx
 47324                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 47325                                  	
 47326                                  ; DOSDATA:12EFh
 47327                                  
 47328                                  ; Fifth DOS patch - System call 40h (Write) to console
 47329                                  ;
 47330                                  ; Code in disk.asm, 1 location
 47331                                  ;
 47332                                  ;		push	cx
 47333                                  ;      WRCONLP: lodsb
 47334                                  ;		cmp	al,1Ah
 47335                                  ;		jz	????
 47336                                  ;		call	????	<- "simulate" int28 event
 47337                                  ;		loop	WRCONLP
 47338                                  ;      CONEOF:	pop	ax
 47339                                  
 47340                                  DOSP5_ID:	db	051h			; push cx
 47341                                  		db	0ACh,03Ch,01Ah,074h,005h
 47342                                  		db	0E8h			; call
 47343                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 47344                                  
 47345                                  ; DOSDATA:12F6h
 47346                                  
 47347                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 47348                                  ;
 47349                                  ; Code in disp.asm, 1 location
 47350                                  ;
 47351                                  ;
 47352                                  ;	mov [SaveDS],ds
 47353                                  ;	mov [SaveBX],bx
 47354                                  ;	mov bx,cs
 47355                                  ;	mov ds,bx
 47356                                  ;	inc [indos]
 47357                                  ;	xor ax,ax
 47358                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 47359                                  
 47360                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 47361                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 47362                                  		db	02Eh,089h,01Eh
 47363                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 47364                                  		db	08Ch,0CBh		; mov bx,cs
 47365                                  		db	08Eh,0DBh		; mov ds,bx
 47366                                  		db	0FEh,006h
 47367                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 47368                                  		db	033h,0C0h		; xor ax,ax
 47369                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 47370                                  
 47371                                  ; DOSDATA:130Ah
 47372                                  
 47373                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 47374                                  ;
 47375                                  ; Code in handle.asm, 1 location in routine CheckOwner
 47376                                  ;
 47377                                  ;
 47378                                  ;
 47379                                  ;	push	ax
 47380                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 47381                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 47382                                  ;	pop	ax
 47383                                  ;	jz	????
 47384                                  
 47385                                  DOSP8_ID:	db	050h			; push ax
 47386                                  		db	036h,0A1h
 47387                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 47388                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 47389                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 47390                                  		db	02Fh,058h		; pop  ax
 47391                                  
 47392                                  ; DOSDATA:1314h
 47393                                  
 47394                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 47395                                  ;
 47396                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 47397                                  ;   a yeild when a character is not ready to be read.
 47398                                  ;
 47399                                  ; Code in disk.asm, 3 locations
 47400                                  ;
 47401                                  ;   DVRDRAW:
 47402                                  ;	    PUSH    ES
 47403                                  ;	    POP     DS
 47404                                  ;   ReadRawRetry:				<- Patch 10
 47405                                  ;	    MOV     BX,DI
 47406                                  ;	    XOR     AX,AX			<- Reenter #2
 47407                                  ;	    MOV     DX,AX
 47408                                  ;	    call    SETREAD
 47409                                  ;	    PUSH    DS				<- Reenter #1
 47410                                  ;	    LDS     SI,[THISSFT]
 47411                                  ;	    call    DEVIOCALL
 47412                                  ;	    MOV     DX,DI
 47413                                  ;	    MOV     AH,86H
 47414                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 47415                                  ;	    TEST    DI,STERR
 47416                                  ;	    JZ	    CRDROK
 47417                                  ;	    call    CHARHARD
 47418                                  ;	    MOV     DI,DX
 47419                                  ;	    OR	    AL,AL
 47420                                  ;	    JZ	    CRDROK
 47421                                  ;	    CMP     AL,3
 47422                                  ;	    JZ	    CRDFERR
 47423                                  ;	    POP     DS
 47424                                  ;	    JMP     ReadRawRetry
 47425                                  ;
 47426                                  ;   CRDFERR:
 47427                                  ;	    POP     DI				<- Patch 11
 47428                                  ;   DEVIOFERR:
 47429                                  ;	    LES     DI,[THISSFT]
 47430                                  ;	    jmp     SET_ACC_ERR_DS
 47431                                  ;
 47432                                  ;   CRDROK:
 47433                                  ;	    POP     DI				<- Patch 12
 47434                                  ;	    MOV     DI,DX
 47435                                  ;	    ADD     DI,[CALLSCNT]
 47436                                  ;	    JMP     SHORT ENDRDDEVJ3
 47437                                  
 47438                                  DOSP10_ID:		db	006H,01FH
 47439                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 47440                                  DOSP10_LOC:		db	08BH,0DFH
 47441                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 47442                                  			db	033H,0C0H,08BH,0D0H,0E8H
 47443                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 47444                                  			db	0DFH,00EH
 47445                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 47446                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 47447                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 47448                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 47449                                  			db	009H,003H
 47450                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 47451                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 47452                                  			db	01FH,0EBH,0CFH
 47453                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 47454                                  			db	05FH
 47455                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 47456                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 47457                                  
 47458                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 47459                                  			db	05FH,08BH,0FAH
 47460                                  ; DOSDATA:1353h
 47461                                  
 47462                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 47463                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 47464                                  ;
 47465                                  ;	    Sets focus to current VM so user can see fatal message.
 47466                                  ;
 47467                                  ;
 47468                                  ;	l0: lodsb		<- Setfocus here
 47469                                  ;	    cmp al, '$'
 47470                                  ;	    je l1
 47471                                  ;	    mov bl, 7
 47472                                  ;	    mov ah, 0Eh
 47473                                  ;	    int 10h
 47474                                  ;	    jmp l0
 47475                                  ;	l1: jmp $
 47476                                  
 47477                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 47478                                  		db	03Ch,024h		;     cmp al, '$'
 47479                                  		db	074h,008h		;     je l1
 47480                                  		db	0B3h,007h		;     mov bl, 7
 47481                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 47482                                  		db	0CDh,010h		;     int 10h
 47483                                  		db	0EBh,0F3h		;     jmp l0
 47484                                  		db	0EBh,0FEh		; l1: jmp $
 47485                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 47486                                  
 47487                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47488                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 47489                                  
 47490                                  ; 06/12/2022
 47491                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 47492                                  
 47493                                  ; DOSDATA ends
 47494                                  
 47495                                  ;============================================================================
 47496                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 47497                                  ;============================================================================
 47498                                  ; 27/04/2019 - Retro DOS 4.0
 47499                                  
 47500                                  ;mpatch.asm -- holds data patch location for callouts 
 47501                                  ; -- allocate cluster in rom.asm
 47502                                  ;
 47503                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 47504                                  ; Currently, this location is used only by magicdrv.sys's patch to
 47505                                  ; cluster allocation, however it can be expanded to be used by other
 47506                                  ; patches. This is important since we have an easy-access pointer to
 47507                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 47508                                  ; only patch out a far call/retf, so any space after that could be
 47509                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 47510                                  ; to call out here.
 47511                                  ;
 47512                                  ; Currently, we allocate only the minimum space required for the 6
 47513                                  ; byte magicdrv patch, so if you change the dos data, you may want
 47514                                  ; to reserve space here if your new data will be position dependent
 47515                                  ; and would prohibit growing of this table.
 47516                                  ;
 47517                                  ;history	-	created 8-7-92 by scottq
 47518                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 47519                                  ;
 47520                                  ;Exported Functions
 47521                                  ;==================
 47522                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 47523                                  
 47524                                  ; DosData Segment
 47525                                  
 47526                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 47527                                  
 47528                                  ; ---------------------------------------------------------------------------
 47529                                  
 47530                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 47531                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 47532                                  ; greater). Added to this file because it needed to be somewhere and is
 47533                                  ; 'patch' related.
 47534                                  
 47535                                  Rational386PatchPtr:
 47536                                  	dw	0	; points to patch routine or RET instr.
 47537                                  ; ---------------------------------------------------------------------------
 47538                                  
 47539                                  MagicPatch:
 47540                                  ;MagicPatch proc far
 47541                                          retf            ;default is to just return to allocate
 47542                                          nop             ;however, this code will be patched
 47543                                          nop             ;by magicdrv.sys to
 47544                                          nop             ; call far ?:?     
 47545                                          nop             ; retf or perhaps just jmp far
 47546                                          nop             ;retf/nop take one byte, so we need six instructions
 47547                                                          ;for 6 byte patch
 47548                                  ;MagicPatch endp
 47549                                  
 47550                                  ; ---------------------------------------------------------------------------
 47551                                  
 47552                                  ;DosData Ends
 47553                                  
 47554                                  ; DOSDATA:136Ah
 47555                                  
 47556                                  ;----------------------------------------------------------------------------
 47557                                  
 47558                                  ;DOSDATALAST SEGMENT
 47559                                  
 47560                                  ; 29/04/2019 - Retro DOS v4.0
 47561                                  
 47562                                  ;----------------------------------------------------------------------------
 47563                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 47564                                  
 47565                                  ;db 0,1,12,64,19,0 ; ! Magic numbers !
 47566                                  
 47567                                  ;align 16
 47568                                  
 47569                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 47570                                  
 47571                                  ;----------------------------------------------------------------------------
 47572                                  
 47573                                  %endif	; 05/11/2022
 47574                                  
 47575                                  ; 05/12/2022
 47576                                  ;MSDAT001E:	; label byte
 47577                                  
 47578                                  ; 22/03/2024 - Retro DOS v4.2
 47579                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47580                                  DOSDATAEND equ $
 47581                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 47582                                  MSDAT001E equ DOSDATAEND - DOSDATASTART	; = 4970 for MSDOS 6.22 MSDOS.SYS
 47583                                  					; (= 4934 for PCDOS 7.1 IBMDOS.COM)
 47584                                  					; ((= 4944 for Windows ME IO.SYS))
 47585                                  ;DOSDATALAST ENDS
 47586                                  
 47587                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 47588                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 47589                                  ;============================================================================
 47590                                  ;	END
 47591                                  ;============================================================================
 47592                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 47593                                  ; -----------------------------
 47594                                  ; MAY 2019, ISTANBUL - TURKIYE.
