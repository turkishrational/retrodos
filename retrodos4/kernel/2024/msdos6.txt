     1                                  ;*****************************************************************************
     2                                  ; MSDOS6.BIN (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 29/02/2024 - Retro DOS v4.2 ((Previous: 29/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos6.s -l msdos6.lst -o MSDOS6.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 30/12/2022 - Retro DOS v4.2 Kernel ('msdos6.s')
    27                                  ; Modified from 'msdos5.s' (29/12/2022, Retro DOS v4.1 Kernel) file
    28                                  ; as below:
    29                                  ;	1) MS-DOS version has been changed to 6.22 (It was 5.0) 
    30                                  ;	2) Retro DOS version has been changed to 4.2 (It was 4.1)
    31                                  ; (The content has not been changed except kernel version because the kernel
    32                                  ;  code is already compatible with MSDOS 6.x and it is optimized before.)
    33                                  ;	(But IO.SYS part of the kernel is not same with Retro DOS v4.1 code.)	
    34                                  
    35                                  ; ----------------------------------------------------------------------------
    36                                  
    37                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    38                                  
    39                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    40                                  ;	(as included binary, 'MSDOS5.BIN') 
    41                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    42                                  ;	
    43                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    44                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    45                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    46                                        
    47                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    48                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    49                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    50                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    51                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    52                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    53                                  
    54                                  ;=============================================================================
    55                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    56                                  ;-----------------------------------------------------------------------------
    57                                  
    58                                  ; MSDOS 6.0 Kernel source files:
    59                                  ;	MSDATA.ASM, 
    60                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    61                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    62                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    63                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    64                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    65                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    66                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    67                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    68                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    69                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    70                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    71                                  ;
    72                                  ; MSDOS 2.0 Kernel source files:
    73                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    74                                  ;	MSCODE.ASM
    75                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    76                                  
    77                                  ;============================================================================
    78                                  ; DOSLINK
    79                                  ;============================================================================
    80                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    81                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    82                                  ;stdio time xenix xenix2
    83                                  
    84                                  ;============================================================================
    85                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    86                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    87                                  ;============================================================================
    88                                  ;
    89                                  ; ###########################################################################
    90                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    91                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    92                                  ; #			 Licensed to: Freeware version			    #
    93                                  ; ###########################################################################
    94                                  ;
    95                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    96                                  
    97                                  ; ---------------------------------------------------------------------------
    98                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    99                                  ; Format      :	Binary file
   100                                  ;============================================================================
   101                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
   102                                  ;----------------------------------------------------------------------------
   103                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
   104                                  
   105                                  ;============================================================================
   106                                  ; MSDOS.ASM
   107                                  ;============================================================================
   108                                  
   109                                  ;TITLE   Standard MSDOS
   110                                  ;NAME    MSDOS_2
   111                                  
   112                                  ; Number of disk I/O buffers
   113                                  
   114                                  ;	INCLUDE STDSW.ASM
   115                                  ;       INCLUDE MSHEAD.ASM
   116                                  ;       INCLUDE MSDATA.ASM
   117                                  
   118                                  ;	END
   119                                  
   120                                  ;============================================================================
   121                                  ; STDSW.ASM
   122                                  ;============================================================================
   123                                  
   124                                  TRUE    EQU     0FFFFH
   125                                  FALSE   EQU     ~TRUE ; NOT TRUE
   126                                  
   127                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   128                                  ; version of the operating system
   129                                  ;MSVER   EQU	false
   130                                  ;IBM     EQU	true
   131                                  ;WANG    EQU	FALSE
   132                                  ;ALTVECT EQU	FALSE
   133                                  
   134                                  ; Set this switch to cause DOS to move itself to the end of memory
   135                                  ;HIGHMEM EQU     FALSE
   136                                  
   137                                  ;	IF      IBM
   138                                  ESCCH    EQU	 0			;character to begin escape seq.
   139                                  CANCEL   EQU	 27			;Cancel with escape
   140                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   141                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   142                                  ZEROEXT  EQU	TRUE
   143                                  ;       ELSE
   144                                  ;       IF      WANG			;Are we assembling for WANG?
   145                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   146                                  ;       ELSE
   147                                  ;ESCCH	 EQU	1BH
   148                                  ;       ENDIF
   149                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   150                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   151                                  					;and off if not WANG
   152                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   153                                  					;and off
   154                                  ;ZEROEXT EQU	TRUE
   155                                  ;        ENDIF
   156                                  
   157                                  ;============================================================================
   158                                  ; MSHEAD.ASM
   159                                  ;============================================================================
   160                                  
   161                                  ;--------------------------------------------------------------
   162                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   163                                  ;--------------------------------------------------------------
   164                                  
   165                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   166                                  ;        by Microsoft MSDOS development group:
   167                                  ;           Tim Paterson (Ret.)
   168                                  ;           Aaron Reynolds
   169                                  ;           Nancy Panners (Parenting)
   170                                  ;           Mark Zbikowski
   171                                  ;           Chris Peters (BIOS) (ret.)
   172                                  
   173                                  ; ****************** Revision History *************************
   174                                  ;          >> EVERY change must noted below!! <<
   175                                  ;
   176                                  ; 0.34 12/29/80 General release, updating all past customers
   177                                  ; 0.42 02/25/81 32-byte directory entries added
   178                                  ; 0.56 03/23/81 Variable record and sector sizes
   179                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   180                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   181                                  ; 0.75 04/17/81 Improve and correct buffer handling
   182                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   183                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   184                                  ; 1.00 04/28/81 Renumber for general release
   185                                  ; 1.01 05/12/81 Fix bug in `STORE'
   186                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   187                                  ;               RENAME fix, general cleanup
   188                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   189                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   190                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   191                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   192                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   193                                  ;               of smaller improvements
   194                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   195                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   196                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   197                                  ;               zero extent field in IBM version (back to 1.01!)
   198                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   199                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   200                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   201                                  ;               is searched first when possible to minimize I/O
   202                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   203                                  ;               full sector write when file is growing
   204                                  ;      03/09/82 Multiple I/O buffers
   205                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   206                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   207                                  ;               must invalidate all buffers (disk and directory).
   208                                  ; 1.27 03/31/82 Installable device drivers
   209                                  ;                 Function call 47 - Get pointer to device table list
   210                                  ;                 Function call 48 - Assign CON AUX LIST
   211                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   212                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   213                                  ;               call entries.  Most CS relative references changed to SS
   214                                  ;               relative with an eye toward putting a portion of the DOS in
   215                                  ;               ROM.  DOS source also broken into header, data and code pieces
   216                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   217                                  ;               return the current values.
   218                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   219                                  ;               call to return flag location (call 29)
   220                                  ;      04/15/82 Volume ID attribute added
   221                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   222                                  ;               avoid a CS relative reference.
   223                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   224                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   225                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   226                                  ;               call 49.
   227                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   228                                  ;               address of DPB
   229                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   230                                  ;               writting to console device via file I/O.  Added a console
   231                                  ;               output attribute to devices.
   232                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   233                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   234                                  ;               as devices....  pipes, redirection now possible
   235                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   236                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   237                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   238                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   239                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   240                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   241                                  ;               out back about 1.27 or so (oops).  ARR
   242                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   243                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   244                                  ;               RMDIR Xenix calls
   245                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   246                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   247                                  ;               Frees up lots of memory.
   248                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   249                                  ;               system buffers
   250                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   251                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   252                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   253                                  ;               changed to set file handle environment.
   254                                  ; 2.00 08/01/82 Number for IBM release
   255                                  ;      01/19/83 No environ bug in EXEC
   256                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   257                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   258                                  ;      01/27/83 Growcnt fixed for 32-bits
   259                                  ;      01/27/83 Find-first problem after create
   260                                  ; 2.01 02/17/83 International DOS
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   264                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   265                                  ; 2.10 03/09/83 Start of NETWORK support
   266                                  ;		New Buffer structure
   267                                  ;		New Sytem file table structure
   268                                  ;		FCB moved to internal representation
   269                                  ;		DOS re-organized
   270                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   271                                  ;		device interface.
   272                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   273                                  ;               an IBM PC
   274                                  ; 2.50 09/12/83 More network stuff
   275                                  ;
   276                                  ; *************************************************************
   277                                  
   278                                  ; ----------------------------------------------------------------------------
   279                                  ; EQUATES
   280                                  
   281                                  ; Interrupt Entry Points:
   282                                  
   283                                  ; INTBASE:      ABORT
   284                                  ; INTBASE+4:    COMMAND
   285                                  ; INTBASE+8:    BASE EXIT ADDRESS
   286                                  ; INTBASE+C:    CONTROL-C ABORT
   287                                  ; INTBASE+10H:  FATAL ERROR ABORT
   288                                  ; INTBASE+14H:  BIOS DISK READ
   289                                  ; INTBASE+18H:  BIOS DISK WRITE
   290                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   291                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   292                                  ; INTBASE+40H:  Long jump to CALL entry point
   293                                  
   294                                  ENTRYPOINTSEG   EQU     0Ch
   295                                  MAXDIF          EQU     0FFFh
   296                                  SAVEXIT         EQU     10
   297                                  ; 06/05/2019
   298                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   299                                  
   300                                         ; INCLUDE DOSSYM.ASM
   301                                         ; INCLUDE DEVSYM.ASM
   302                                  
   303                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   304                                  ; PAGE
   305                                  ; There are three kinds of context resets that can occur during normal DOS
   306                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   307                                  ; be handles in a clean fashion that allows nested executions along with the
   308                                  ; ability to trap one's own errors.
   309                                  ;
   310                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   311                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   312                                  ;           follows:
   313                                  ;
   314                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   315                                  ;           Save it in static memory.
   316                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   317                                  ;
   318                                  ;           The interrupt service routine must preserve all registers and
   319                                  ;           return carry set iff the operation is to be aborted (via abort
   320                                  ;           system call), otherwise, carry is reset and the operation is
   321                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   322                                  ;           RESULTS.
   323                                  ;
   324                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   325                                  ;           restore INT int_ctrl_c from the saved vector.
   326                                  ;
   327                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   328                                  ;           also preserve registers and return one of three values in AL: 0 and
   329                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   330                                  ;           himself is not to issue the abort, rather, the dos will do it for
   331                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   332                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   333                                  ;
   334                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   335                                  ;           abort call.  This is reserved for knowledgeable system programs.
   336                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   337                                  
   338                                  ;SUBTTL SEGMENT DECLARATIONS
   339                                  
   340                                  ; The following are all of the segments used.  They are declared in the order
   341                                  ; that they should be placed in the executable
   342                                  
   343                                  ;
   344                                  ; segment ordering for MSDOS
   345                                  ;
   346                                  
   347                                  ;START           SEGMENT BYTE PUBLIC 'START'
   348                                  ;START           ENDS
   349                                  
   350                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   351                                  ;CONSTANTS       ENDS
   352                                  
   353                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   354                                  ;DATA            ENDS
   355                                  
   356                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   357                                  ;CODE            ENDS
   358                                  
   359                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   360                                  ;LAST            ENDS
   361                                  
   362                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   363                                  
   364                                  ; The following segment is defined such that the data/const classes appear
   365                                  ; before the code class for ROMification
   366                                  
   367                                  ;START		SEGMENT BYTE PUBLIC 'START'
   368                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   369                                  ;		JMP     DOSINIT
   370                                  ;START		ENDS
   371                                  
   372                                  ;============================================================================
   373                                  ; BPB.INC, MSDOS 6.0, 1991
   374                                  ;============================================================================
   375                                  ; 09/07/2018 - Retro DOS v3.0
   376                                  
   377                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   378                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   379                                  ;									   ;
   380                                  
   381                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   382                                  ;
   383                                  ;	The BPB contains information about the disk structure. It dates
   384                                  ;	back to the earliest FAT systems and so FAT information is
   385                                  ;	intermingled with physical driver information.
   386                                  ;
   387                                  ;	A boot sector contains a BPB for its device; for other disks
   388                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   389                                  ;	information in the DPB.
   390                                  ;
   391                                  ;	The BDS structure contains a BPB within it. 
   392                                  
   393                                  struc A_BPB
   394 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   395 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   396 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   397 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   398 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   399 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   400 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   401 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   402 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   403 0000000F ????                    .BPB_HEADS:		resw	1
   404 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   405 00000013 ????                    			resw	1
   406 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   407 00000017 ????                    			resw	1
   408 00000019 ????????????            			resb	6	; NOTE:  many times these
   409                                  ;					; 	 6 bytes are omitted
   410                                  ;					;	 when BPB manipulations
   411                                  ;					;	 are performed!
   412                                  .size:
   413                                  endstruc
   414                                  
   415                                  ;                                                                          ;
   416                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   417                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   418                                  
   419                                  ;============================================================================
   420                                  ; BUFFER.INC, MSDOS 6.0, 1991
   421                                  ;============================================================================
   422                                  ; 04/05/2019 - Retro DOS v4.0
   423                                  
   424                                  ; <Disk I/O Buffer Header>
   425                                  
   426                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   427                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   428                                  ;									   ;
   429                                  
   430                                  ; Field definition for I/O buffer information
   431                                  
   432                                  struc BUFFINFO
   433 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   434 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   435 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   436                                  				; SFT table index (bit 7 = 1)
   437                                  				; = FFH if buffer free
   438 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   439                                  				;	= 0 if Local device buffer
   440                                  				; Bit 6 = 1 if buffer dirty
   441                                  				; Bit 5 = Reserved
   442                                  				; Bit 4 = Search bit (bit 7 = 1)
   443                                  				; Bit 3 = 1 if buffer is DATA
   444                                  				; Bit 2 = 1 if buffer is DIR
   445                                  				; Bit 1 = 1 if buffer is FAT
   446                                  				; Bit 0 = Reserved
   447 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   448                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   449 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   450 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   451 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   452 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   453 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   454                                  .size:	; 20 bytes
   455                                  endstruc
   456                                  
   457                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   458                                  				;For buf_flags bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID. Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ;============================================================================
   489                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   490                                  ;============================================================================
   491                                  ; 04/05/2019 - Retro DOS v4.0
   492                                  
   493                                  ; <Control character definitions>
   494                                  
   495                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   496                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   497                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   498                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   499                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   500                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   501                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   502                                  c_HT	    EQU     09h 	; ^I ASCII tab
   503                                  
   504                                  ; <User stack inside of system call>
   505                                  ; Location of user registers relative user stack pointer
   506                                  
   507                                  struc	user_env   ; user_environ
   508 00000000 ????                    .user_AX: resw 1
   509 00000002 ????                    .user_BX: resw 1
   510 00000004 ????                    .user_CX: resw 1
   511 00000006 ????                    .user_DX: resw 1
   512 00000008 ????                    .user_SI: resw 1
   513 0000000A ????                    .user_DI: resw 1
   514 0000000C ????                    .user_BP: resw 1
   515 0000000E ????                    .user_DS: resw 1
   516 00000010 ????                    .user_ES: resw 1
   517 00000012 ????                    .user_IP: resw 1
   518 00000014 ????                    .user_CS: resw 1
   519 00000016 ????                    .user_F:  resw 1
   520                                  .size:
   521                                  endstruc
   522                                  
   523                                  ; ---- <Disk map> ----
   524                                  
   525                                  ;	MSDOS partitions the disk into 4 sections:
   526                                  ;
   527                                  ;  phys sector 0:   +-------------------+
   528                                  ;	|	    | boot/reserved	|
   529                                  ;	|	    +-------------------+
   530                                  ;	|	    |  File allocation	|
   531                                  ;	v	    |	   table(s)	|
   532                                  ;		    |  (multiple copies |
   533                                  ;		    |	  are kept)	|
   534                                  ;		    +-------------------+
   535                                  ;		    |	  Directory	|
   536                                  ;		    +-------------------+
   537                                  ;		    |	  File space	|
   538                                  ;		    +-------------------+
   539                                  ;		    |	Unaddressable	|
   540                                  ;		    |  (to end of disk) |
   541                                  ;		    +-------------------+
   542                                  ;
   543                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   544                                  ; adjusted to maximize the file space addressable.
   545                                  
   546                                  ; <File allocation Table information>
   547                                  
   548                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   549                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   550                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   551                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   552                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   553                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   554                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   555                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   556                                  ; The first available allocation unit is assigned entry number two, and even
   557                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   558                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   559                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   560                                  ; the next cluster in the file.
   561                                  ;
   562                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   563                                  ; do because these clusters show as allocated, but are not part of any
   564                                  ; allocation chain and thus will never be allocated to a file.	A particular
   565                                  ; number is selected so that disk checking programs know what to do (ie.  a
   566                                  ; cluster with entry FF7H which is not in a chain is not an error).
   567                                  
   568                                  ;**	Character Type Flags
   569                                  ;
   570                                  ;	These flags are used in a lookup table indexed by the character code.
   571                                  ;	They're used to quickly classify characters when parsing paths.
   572                                  ;	I think that these are only used to parse FCBs - jgl
   573                                  
   574                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   575                                  FDELIM	equ 2		; is a delimiter
   576                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   577                                  FFCB	equ 8		; is valid in an FCB
   578                                  
   579                                  ;** Bit definitions for DOS_FLAG
   580                                  ;
   581                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   582                                  ;	  $open to indicate to the redirector that this open is being made
   583                                  ;	  by an exec call.
   584                                  ;
   585                                  ; Bit 2
   586                                  ;
   587                                  ; M003, M027:
   588                                  ;
   589                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   590                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   591                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   592                                  ; user program in the case of an Exec call. The next call to DOS will turn
   593                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   594                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   595                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   596                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   597                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   598                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   599                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   600                                  ; Bit 2 will be unconditionally cleared here.
   601                                  ;
   602                                  ; M009, M027:
   603                                  ;
   604                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   605                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   606                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   607                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   608                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   609                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   610                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   611                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   612                                  ; Bit 2 will be unconditionally cleared here.
   613                                  
   614                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   615                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   616                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   617                                  
   618                                  ;============================================================================
   619                                  ; VECTOR.INC, MSDOS 6.0, 1991
   620                                  ;============================================================================
   621                                  ; 04/05/2019 - Retro DOS v4.0
   622                                  
   623                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   624                                  
   625                                  ; <interrupt definitions>
   626                                  
   627                                  INTTAB          EQU     20H
   628                                  INTBASE         EQU     4 * INTTAB
   629                                  ENTRYPOINT      EQU     INTBASE+40H
   630                                  
   631                                  ;	IF      ALTVECT
   632                                  ;ALTTAB  EQU     0F0H
   633                                  ;ALTBASE EQU     4 * ALTTAB
   634                                  ;	ENDIF
   635                                  
   636                                  ;
   637                                  ; interrupt assignments
   638                                  ;
   639                                  ;	IF	NOT ALTVECT
   640                                  int_abort	    EQU     INTTAB	; abort process
   641                                  int_command	    EQU     int_abort+1 ; call MSDOS
   642                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   643                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   644                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   645                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   646                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   647                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   648                                  					; resident
   649                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   650                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   651                                  ;									   ;
   652                                  int_spooler	    EQU     int_abort+8 ; spooler call
   653                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   654                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   655                                  ;									   ;
   656                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   657                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   658                                  ;	ELSE
   659                                  ;int_abort	    EQU     INTTAB	; abort process
   660                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   661                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   662                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   663                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   664                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   665                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   666                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   667                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   668                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   669                                  ;									   ;
   670                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   671                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   672                                  ;									   ;
   673                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	ENDIF
   676                                  
   677                                  addr_int_abort		EQU    4 * int_abort
   678                                  addr_int_command	EQU    4 * int_command
   679                                  addr_int_terminate	EQU    4 * int_terminate
   680                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   681                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   682                                  addr_int_disk_read	EQU    4 * int_disk_read
   683                                  addr_int_disk_write	EQU    4 * int_disk_write
   684                                  addr_int_keep_process	EQU    4 * int_keep_process
   685                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   686                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   687                                  ;									   ;
   688                                  addr_int_spooler	EQU    4 * int_spooler
   689                                  addr_int_fastcon	EQU    4 * int_fastcon
   690                                  addr_int_ibm		EQU    4 * int_IBM
   691                                  ;									   ;
   692                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   693                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   694                                  
   695                                  ;============================================================================
   696                                  ; DIRENT.INC, MSDOS 6.0, 1991
   697                                  ;============================================================================
   698                                  ; 04/05/2019 - Retro DOS v4.0
   699                                  
   700                                  ; BREAK <Directory entry>
   701                                  
   702                                  ;
   703                                  ;       +---------------------------+
   704                                  ;       |  (12 BYTE) filename/ext   |       0       0
   705                                  ;       +---------------------------+
   706                                  ;       |     (BYTE) attributes     |       11      B
   707                                  ;       +---------------------------+
   708                                  ;       |    (10 BYTE) reserved     |       12      C
   709                                  ;       +---------------------------+
   710                                  ;       | (WORD) time of last write |       22      16
   711                                  ;       +---------------------------+
   712                                  ;       | (WORD) date of last write |       24      18
   713                                  ;       +---------------------------+
   714                                  ;       |   (WORD) First cluster    |       26      1A
   715                                  ;       +---------------------------+
   716                                  ;       |     (DWORD) file size     |       28      1C
   717                                  ;       +---------------------------+
   718                                  ;
   719                                  ;   First byte of filename  = E5 -> free directory entry
   720                                  ;                           = 00 -> end of allocated directory
   721                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   722                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   723                                  ;
   724                                  struc dir_entry
   725 00000000 <res Bh>                .dir_name:	resb 11			; file name
   726 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   727 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   728 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   729 00000010 ??                      .dir_attr2:	resb 1			; reserved
   730 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   731 00000016 ????                    .dir_time:	resw 1			; time of last write
   732 00000018 ????                    .dir_date:	resw 1			; date of last write
   733 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   734 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   735 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   736                                  .size:
   737                                  endstruc
   738                                  
   739                                  attr_read_only      EQU      1h
   740                                  attr_hidden         EQU      2h
   741                                  attr_system         EQU      4h
   742                                  attr_volume_id      EQU      8h
   743                                  attr_directory      EQU     10h
   744                                  attr_archive        EQU     20h
   745                                  attr_device	    EQU     40h	; This is a VERY special bit.
   746                                  				;   NO directory entry on a disk EVER
   747                                  				;   has this bit set. It is set non-zero
   748                                  				;   when a device is found by GETPATH
   749                                  
   750                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   751                                                                          ; OR of hard attributes for FINDENTRY
   752                                  
   753                                  attr_ignore         EQU     attr_read_only+attr_archive
   754                                                                          ; ignore this(ese) attribute(s)
   755                                                                          ; during search first/next
   756                                  
   757                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   758                                                                          ; changeable via CHMOD
   759                                  
   760                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   761                                  
   762                                  ;============================================================================
   763                                  ; DPB.INC, MSDOS 6.0, 1991
   764                                  ;============================================================================
   765                                  ; 24/04/2019 - Retro DOS v4.0
   766                                  
   767                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   768                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   769                                  
   770                                  ; ---------------------------------------------------------------------------
   771                                  ;**	DPB - Drive Parameter Block
   772                                  ;
   773                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   774                                  ;	possibly inaccurate deductions from code study... - jgl
   775                                  ;
   776                                  ;	The DPB is DOS's main structure for describing block devices.
   777                                  ;	It contains info about the "Drive" intermingled with info about
   778                                  ;	the FAT file system which is presumably on the drive.  I don't know
   779                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   780                                  ;
   781                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   782                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   783                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   784                                  ; ---------------------------------------------------------------------------
   785                                  
   786                                  struc	DPB
   787 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   788 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   789 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   790 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   791 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   792 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   793 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   794 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   795 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   796 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   797                                  ; MSDOS 3.3
   798                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   799                                  ; MSDOS 6.0
   800 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   801 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   802 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   803 00000017 ??                      .MEDIA:		resb 1		; Media byte
   804 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   805                                  				; check the first time this DPB is used
   806 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   807 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   808 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   809                                  .size:
   810                                  endstruc
   811                                  
   812                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   813                                  
   814                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   815                                  
   816                                  ;                                                                          ;
   817                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   818                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   819                                  
   820                                  ;============================================================================
   821                                  ; SF.INC, MSDOS 6.0, 1991
   822                                  ;============================================================================
   823                                  ; 25/04/2019 - Retro DOS v4.0
   824                                  ; 07/07/2018 - Retro DOS v3.0
   825                                  
   826                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   827                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   828                                  ;                                                                          ;
   829                                  
   830                                  ; ---------------------------------------------------------------------------
   831                                  ;**	SF.INC - System File Table
   832                                  ;
   833                                  ;   AN000   version 4.00   Jan. 1988
   834                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   835                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   836                                  ; ---------------------------------------------------------------------------
   837                                  ;**	System File Table SuperStructure
   838                                  ;
   839                                  ;	The system file table entries are allocated in contiguous groups.
   840                                  ;	There may be more than one such groups; the SF "superstructure"
   841                                  ;	tracks the groups.
   842                                  ; ---------------------------------------------------------------------------
   843                                  
   844                                  struc	SFT
   845 00000000 ????????                .SFLink:	resd 1
   846 00000004 ????                    .SFCount:	resw 1		; number of entries
   847 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   848                                  .size:
   849                                  endstruc
   850                                  
   851                                  ; ---------------------------------------------------------------------------
   852                                  ;**	System file table entry
   853                                  ;
   854                                  ;	These are the structures which are at SFTABLE in the SF structure.
   855                                  ; ---------------------------------------------------------------------------
   856                                  
   857                                  ; 25/04/2019 - Retro DOS v4.0
   858                                  
   859                                  struc SF_ENTRY
   860 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   861                                  				;   if FCB then ref count
   862 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   863 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   864 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   865                                  				; Bit 15 = 1 if remote file
   866                                  				;	 = 0 if local file or device
   867                                  				; Bit 14 = 1 if date/time is not to be
   868                                  				;   set from clock at CLOSE.  Set by
   869                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   870                                  				;   other reseters of the dirty bit
   871                                  				;   (WRITE)
   872                                  				; Bit 13 = Pipe bit (reserved)
   873                                  				;
   874                                  				; Bits 0-7 (old FCB_devid bits)
   875                                  				; If remote file or local file, bit
   876                                  				; 6=0 if dirty Device ID number, bits
   877                                  				; 0-5 if local file.
   878                                  				; bit 7=0 for local file, bit 7
   879                                  				;      =1 for local I/O device
   880                                  				; If local I/O device, bit 6=0 if EOF (input)
   881                                  				;		Bit 5=1 if Raw mode
   882                                  				;		Bit 0=1 if console input device
   883                                  				;		Bit 1=1 if console output device
   884                                  				;		Bit 2=1 if null device
   885                                  				;		Bit 3=1 if clock device
   886 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   887                                  				; to device header if local device,
   888                                  				; points to net device header if
   889                                  				; remote
   890 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   891 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   892 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   893 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   894 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   895                                  
   896                                  ; Starting here, the next 7 bytes may be used by the file system to store
   897                                  ; an ID
   898                                  
   899                                  ; 09/07/2018 - Retro DOS v3.0
   900                                  
   901                                  ; MSDOS 3.3 SF.INC, 1987
   902                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   903                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   904                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   905                                  ;				; for this file
   906                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   907                                  
   908                                  ; MSDOS 6.0, SF.INC, 1991
   909 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   910 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   911                                  				; for this file
   912 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   913                                  
   914                                  ; End of 7 bytes of file-system specific info.
   915                                  
   916 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   917                                  				; directory entry.  This is used by
   918                                  				; close to detect file deleted and
   919                                  				; disk changed errors.
   920                                  ; SHARING INFO
   921 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   922 0000002F ????                    .sf_UID:	resw	1
   923 00000031 ????                    .sf_PID:	resw	1
   924 00000033 ????                    .sf_MFT:	resw	1
   925                                  
   926                                  ; MSDOS 6.0, SF.INC, 1991
   927 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   928 00000037 ????????                .sf_IFS_HDR:	resd	1
   929                                  
   930                                  .size:
   931                                  endstruc
   932                                  
   933                                  ; 20/07/2018
   934                                  ; MSDOS 3.3, SF.INC, 1987
   935                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   936                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   937                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   938                                  ; MSDOS 6.0, SF.INC, 1991
   939                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   940                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   941                                  
   942                                  ; 19/07/2018
   943                                  ; MSDOS 3.3, SF.INC, 1987
   944                                  
   945                                  sf_default_number  EQU	5
   946                                  
   947                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   948                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   949                                  ; by placing a -1 in the ref_count field.
   950                                  
   951                                  sf_busy EQU -1
   952                                  
   953                                  ; mode mask for FCB detection
   954                                  sf_isFCB		EQU	1000000000000000B
   955                                  
   956                                  ; Flag word masks
   957                                  sf_isnet		EQU	1000000000000000B
   958                                  sf_close_nodate 	EQU	0100000000000000B
   959                                  sf_pipe 		EQU	0010000000000000B
   960                                  sf_no_inherit		EQU	0001000000000000B
   961                                  sf_net_spool		EQU	0000100000000000B
   962                                  
   963                                  ; 25/04/2019
   964                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   965                                  
   966                                  ; ---------------------------------------------------------------------------
   967                                  ; Local file/device flag masks
   968                                  ; ---------------------------------------------------------------------------
   969                                  
   970                                  devid_file_clean        EQU     40h     ; true if file and not written
   971                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   972                                  
   973                                  devid_device            EQU     80h     ; true if a device
   974                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   975                                  devid_device_raw        EQU     20h     ; true if in raw mode
   976                                  devid_device_special    EQU     10h     ; true if special device
   977                                  devid_device_clock      EQU     08h     ; true if clock device
   978                                  devid_device_null       EQU     04h     ; true if null device
   979                                  devid_device_con_out    EQU     02h     ; true if console output
   980                                  devid_device_con_in     EQU     01h     ; true if console input
   981                                  
   982                                  ; ---------------------------------------------------------------------------
   983                                  ; structure of devid field as returned by IOCTL is:
   984                                  ;
   985                                  ;       BIT     7   6   5   4   3   2   1   0
   986                                  ;             |---|---|---|---|---|---|---|---|
   987                                  ;             | I | E | R | S | I | I | I | I |
   988                                  ;             | S | O | A | P | S | S | S | S |
   989                                  ;             | D | F | W | E | C | N | C | C |
   990                                  ;             | E |   |   | C | L | U | O | I |
   991                                  ;             | V |   |   | L | K | L | T | N |
   992                                  ;             |---|---|---|---|---|---|---|---|
   993                                  ;       ISDEV = 1 if this channel is a device
   994                                  ;             = 0 if this channel is a disk file
   995                                  ;
   996                                  ;       If ISDEV = 1
   997                                  ;
   998                                  ;             EOF = 0 if End Of File on input
   999                                  ;             RAW = 1 if this device is in Raw mode
  1000                                  ;                 = 0 if this device is cooked
  1001                                  ;             ISCLK = 1 if this device is the clock device
  1002                                  ;             ISNUL = 1 if this device is the null device
  1003                                  ;             ISCOT = 1 if this device is the console output
  1004                                  ;             ISCIN = 1 if this device is the console input
  1005                                  ;
  1006                                  ;       If ISDEV = 0
  1007                                  ;             EOF = 0 if channel has been written
  1008                                  ;             Bits 0-5 are the block device number for
  1009                                  ;                 the channel (0 = A, 1 = B, ...)
  1010                                  ; ---------------------------------------------------------------------------
  1011                                  
  1012                                  devid_ISDEV     EQU     80h
  1013                                  devid_EOF       EQU     40h
  1014                                  devid_RAW       EQU     20h
  1015                                  devid_SPECIAL   EQU     10H
  1016                                  devid_ISCLK     EQU     08h
  1017                                  devid_ISNUL     EQU     04h
  1018                                  devid_ISCOT     EQU     02h
  1019                                  devid_ISCIN     EQU     01h
  1020                                  
  1021                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1022                                  
  1023                                  ;============================================================================
  1024                                  ; PDB.INC, MSDOS 6.0, 1991
  1025                                  ;============================================================================
  1026                                  ; 04/05/2019 - Retro DOS v4.0
  1027                                  ; 08/07/2018 - Retro DOS v3.0
  1028                                  
  1029                                  ; ---------------------------------------------------------------------------
  1030                                  ; BREAK <Process data block>
  1031                                  ; ---------------------------------------------------------------------------
  1032                                  ;**	Process data block (otherwise known as program header)
  1033                                  ;
  1034                                  
  1035                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1036                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1037                                  ;	for use.
  1038                                  ; ---------------------------------------------------------------------------
  1039                                  
  1040                                  FILPERPROC	EQU     20
  1041                                  
  1042                                  struc PDB	; Process_data_block
  1043 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1044 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1045 00000004 ??                                      resb 1
  1046 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1047 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1048 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1049 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1050 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1051 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1052 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1053 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1054 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1055 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1056 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1057 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1058 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1059 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1060 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1061 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1062 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1063 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1064                                  				;  an extended FCB
  1065                                  ;endstruc 	; MSDOS 3.3
  1066                                  	  	; MSDOS 6.0
  1067 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1068 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1069 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1070 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1071                                  endstruc
  1072                                  
  1073                                  ;============================================================================
  1074                                  ; EXE.INC, MSDOS 6.0, 1991
  1075                                  ;============================================================================
  1076                                  ; 04/05/2019 - Retro DOS v4.0
  1077                                  
  1078                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1079                                  ; ---------------------------------------------------------------------------
  1080                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1081                                  ; whether or not the program is executed or whether or not a program header
  1082                                  ; gets created.
  1083                                  
  1084                                  exec_func_no_execute EQU 1	; no execute bit
  1085                                  exec_func_overlay    EQU 2	; overlay bit
  1086                                  
  1087                                  struc EXEC0
  1088 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1089 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1090 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1091 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1092                                  .size:
  1093                                  endstruc
  1094                                  
  1095                                  struc EXEC1
  1096 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1097 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1098 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1099 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1100 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1101 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1102 00000012 ????                    .IP:		resw 1		; entry point IP
  1103 00000014 ????                    .CS:		resw 1		; entry point CS
  1104                                  .size:
  1105                                  endstruc
  1106                                  
  1107                                  struc EXEC3
  1108 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1109 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1110                                  endstruc
  1111                                  
  1112                                  ;**	Exit codes (in upper byte) for terminating programs
  1113                                  
  1114                                  EXIT_TERMINATE		EQU	0
  1115                                  EXIT_ABORT		EQU	0
  1116                                  EXIT_CTRL_C		EQU	1
  1117                                  EXIT_HARD_ERROR 	EQU	2
  1118                                  EXIT_KEEP_PROCESS	EQU	3
  1119                                  
  1120                                  ;**	EXE File Header Description
  1121                                  
  1122                                  struc EXE
  1123 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1124 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1125 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1126 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1127 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1128 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1129 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1130 0000000E ????                    .SS:          resw 1		; stack of image
  1131 00000010 ????                    .SP:          resw 1		; SP of image
  1132 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1133 00000014 ????                    .IP:          resw 1		; IP of entry
  1134 00000016 ????                    .CS:          resw 1		; CS of entry
  1135 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1136 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1137 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1138                                  .size:
  1139                                  endstruc
  1140                                  
  1141                                  exe_valid_signature     EQU 5A4Dh
  1142                                  exe_valid_old_signature EQU 4D5Ah
  1143                                  
  1144                                  ;**	EXE file symbol info definitions
  1145                                  
  1146                                  struc symbol_entry
  1147 00000000 ????????                .value:	resd 1
  1148 00000004 ????                    .type:	resw 1
  1149 00000006 ??                      .len:	resb 1
  1150 00000007 <res FFh>               .name:	resb 255
  1151                                  endstruc
  1152                                  
  1153                                  ;**	Data structure passed for ExecReady call
  1154                                  
  1155                                  struc ERStruc
  1156 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1157 00000002 ????                     .ER_Flags:	resw	1
  1158 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1159 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1160 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1161 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1162                                   .size:
  1163                                  endstruc
  1164                                  
  1165                                  ;** bit fields in ER_Flags
  1166                                  
  1167                                  ER_EXE		equ	0001h
  1168                                  ER_OVERLAY	equ	0002h
  1169                                  
  1170                                  
  1171                                  ;============================================================================
  1172                                  ; ARENA.INC, MSDOS 6.0, 1991
  1173                                  ;============================================================================
  1174                                  ; 24/04/2019 - Retro DOS v4.0
  1175                                  ; 04/08/2018 - Retro DOS v3.0
  1176                                  
  1177                                  ;BREAK <Memory arena structure>
  1178                                  
  1179                                  ;**	Arena Header
  1180                                  
  1181                                  struc ARENA
  1182 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1183 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1184 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1185 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1186 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1187                                  .headersize:			
  1188                                  endstruc
  1189                                  
  1190                                  ; 20/05/2019 - Retro DOS v4.0
  1191                                  ARENAHEADERSIZE equ ARENA.headersize 
  1192                                  
  1193                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1194                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1195                                  ; Change them and change ALLOC.ASM.
  1196                                  
  1197                                  arena_owner_system  EQU 0               ; free block indication
  1198                                  
  1199                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1200                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1201                                  
  1202                                  FIRST_FIT	EQU	00000000B
  1203                                  BEST_FIT	EQU	00000001B
  1204                                  LAST_FIT	EQU	00000010B
  1205                                  
  1206                                  ; MSDOS 6.0
  1207                                  LOW_FIRST	EQU	00000000B	; M001
  1208                                  HIGH_FIRST	EQU	10000000B	; M001
  1209                                  HIGH_ONLY	EQU	01000000B	; M001
  1210                                  
  1211                                  LINKSTATE	EQU	00000001B	; M002
  1212                                  
  1213                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1214                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1215                                  
  1216                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1217                                  						; M026: used to mask of bits
  1218                                  						; M026: 6 & 7 of AllocMethod
  1219                                  
  1220                                  ;============================================================================
  1221                                  ; MI.INC, MSDOS 6.0, 1991
  1222                                  ;============================================================================
  1223                                  ; 07/07/2018 - Retro DOS v3.0
  1224                                  
  1225                                  ;BREAK <Machine instruction, flag definitions and character types>
  1226                                  
  1227                                  mi_INT		EQU	0CDh
  1228                                  mi_long_jmp	EQU	0EAh
  1229                                  mi_Long_CALL	EQU	09Ah
  1230                                  mi_Long_RET	EQU	0CBh
  1231                                  mi_Near_RET	EQU	0C3h
  1232                                  
  1233                                  ;			xxxxoditszxaxpxc
  1234                                  f_Overflow	EQU	0000100000000000B
  1235                                  f_Direction	EQU	0000010000000000B
  1236                                  f_Interrupt	EQU	0000001000000000B
  1237                                  f_Trace 	EQU	0000000100000000B
  1238                                  f_Sign		EQU	0000000010000000B
  1239                                  f_Zero		EQU	0000000001000000B
  1240                                  f_Aux		EQU	0000000000010000B
  1241                                  f_Parity	EQU	0000000000000100B
  1242                                  f_Carry 	EQU	0000000000000001B
  1243                                  
  1244                                  ;============================================================================
  1245                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1246                                  ;============================================================================
  1247                                  ; 13/07/2018 - Retro DOS v3.0
  1248                                  ; 29/04/2019 - Retro DOS v4.0
  1249                                  
  1250                                  ;**	Standard I/O file handles
  1251                                  
  1252                                  stdin       EQU     0
  1253                                  stdout      EQU     1
  1254                                  stderr      EQU     2
  1255                                  stdaux      EQU     3
  1256                                  stdprn      EQU     4
  1257                                  
  1258                                  ;**	File Modes
  1259                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1260                                  
  1261                                  open_for_read   EQU 0
  1262                                  open_for_write  EQU 1
  1263                                  open_for_both   EQU 2
  1264                                  
  1265                                  ; MSDOS 6.0
  1266                                  OPEN_FOR_BOTH	equ 2
  1267                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1268                                  				; made from exec
  1269                                  
  1270                                  access_mask	EQU 0Fh ; 09/08/2018
  1271                                  
  1272                                  SHARING_MASK	    equ 0F0h
  1273                                  SHARING_COMPAT	    equ 000h
  1274                                  SHARING_DENY_BOTH   equ 010h
  1275                                  SHARING_DENY_WRITE  equ 020h
  1276                                  SHARING_DENY_READ   equ 030h
  1277                                  SHARING_DENY_NONE   equ 040h
  1278                                  SHARING_NET_FCB     equ 070h
  1279                                  SHARING_NO_INHERIT  equ 080h
  1280                                  
  1281                                  ; 29/04/2019
  1282                                  
  1283                                  ;**	Extended Open Definitions
  1284                                  
  1285                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1286                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1287                                  NOT_EXISTS_MASK    equ 0F0h
  1288                                  
  1289                                  ;*	SF_MODE values
  1290                                  
  1291                                  AUTO_COMMIT_WRITE	equ 4000h
  1292                                  INT_24_ERROR		equ 2000h
  1293                                  
  1294                                  ;*	Flags in EXTOPEN_ON
  1295                                  
  1296                                  EXT_OPEN_ON		equ 01h
  1297                                  EXT_FILE_NOT_EXISTS	equ 04h
  1298                                  EXT_OPEN_I24_OFF	equ 02h
  1299                                  
  1300                                  ;*	Flags in EXTOPEN_FLAG
  1301                                  
  1302                                  ACTION_OPENED		equ 01h
  1303                                  ACTION_CREATED_OPENED	equ 02h
  1304                                  ACTION_REPLACED_OPENED	equ 03h
  1305                                  EXT_EXISTS_OPEN 	equ 01h
  1306                                  EXT_EXISTS_FAIL 	equ 00h
  1307                                  EXT_NEXISTS_CREATE	equ 10h
  1308                                  
  1309                                  ;**	Extended Open Structure
  1310                                  
  1311                                  struc EXT_OPEN_PARM
  1312 00000000 ????????                .SET_LIST:	resd 1
  1313 00000004 ????                    .NUM_OF_PARM:	resw 1
  1314                                  endstruc
  1315                                  
  1316                                  ;============================================================================
  1317                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1318                                  ;============================================================================
  1319                                  ; 29/04/2019 - Retro DOS v4.0
  1320                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1321                                  
  1322                                  ; <system call definitions>
  1323                                  
  1324                                  ABORT                           EQU 0   ;  0      0
  1325                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1326                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1327                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1328                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1329                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1330                                  RAW_CON_IO                      EQU 6   ;  6      6
  1331                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1332                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1333                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1334                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1335                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1336                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1337                                  DISK_RESET                      EQU 13  ; 13      D
  1338                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1339                                  FCB_OPEN                        EQU 15  ; 15      F
  1340                                  FCB_CLOSE                       EQU 16  ; 16     10
  1341                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1342                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1343                                  FCB_DELETE                      EQU 19  ; 19     13
  1344                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1345                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1346                                  FCB_CREATE                      EQU 22  ; 22     16
  1347                                  FCB_RENAME                      EQU 23  ; 23     17
  1348                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1349                                  SET_DMA                         EQU 26  ; 26     1A
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1352                                  ;                                                                          ;
  1353                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1354                                  ;                                                                          ;
  1355                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1356                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1357                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1358                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1359                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1360                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1361                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1362                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1363                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1364                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1365                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1366                                  GET_DATE                        EQU 42  ; 42     2A
  1367                                  SET_DATE                        EQU 43  ; 43     2B
  1368                                  GET_TIME                        EQU 44  ; 44     2C
  1369                                  SET_TIME                        EQU 45  ; 45     2D
  1370                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1371                                  ; Extended functionality group
  1372                                  GET_DMA                         EQU 47  ; 47     2F
  1373                                  GET_VERSION                     EQU 48  ; 48     30
  1374                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1375                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1376                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1377                                  ;                                                                          ;
  1378                                  GET_DPB                         EQU 50  ; 50     32
  1379                                  ;                                                                          ;
  1380                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1381                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1382                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1383                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1384                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1385                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1386                                  CHAR_OPER                       EQU 55  ; 55     37
  1387                                  INTERNATIONAL                   EQU 56  ; 56     38
  1388                                  ; XENIX CALLS
  1389                                  ;   Directory Group
  1390                                  MKDIR                           EQU 57  ; 57     39
  1391                                  RMDIR                           EQU 58  ; 58     3A
  1392                                  CHDIR                           EQU 59  ; 59     3B
  1393                                  ;   File Group
  1394                                  CREAT                           EQU 60  ; 60     3C
  1395                                  OPEN                            EQU 61  ; 61     3D
  1396                                  CLOSE                           EQU 62  ; 62     3E
  1397                                  READ                            EQU 63  ; 63     3F
  1398                                  WRITE                           EQU 64  ; 64     40
  1399                                  UNLINK                          EQU 65  ; 65     41
  1400                                  LSEEK                           EQU 66  ; 66     42
  1401                                  CHMOD                           EQU 67  ; 67     43
  1402                                  IOCTL                           EQU 68  ; 68     44
  1403                                  XDUP                            EQU 69  ; 69     45
  1404                                  XDUP2                           EQU 70  ; 70     46
  1405                                  CURRENT_DIR                     EQU 71  ; 71     47
  1406                                  ;    Memory Group
  1407                                  ALLOC                           EQU 72  ; 72     48
  1408                                  DEALLOC                         EQU 73  ; 73     49
  1409                                  SETBLOCK                        EQU 74  ; 74     4A
  1410                                  ;    Process Group
  1411                                  EXEC                            EQU 75  ; 75     4B
  1412                                  EXIT                            EQU 76  ; 76     4C
  1413                                  _WAIT				EQU 77  ; 77     4D
  1414                                  FIND_FIRST                      EQU 78  ; 78     4E
  1415                                  ;   Special Group
  1416                                  FIND_NEXT                       EQU 79  ; 79     4F
  1417                                  ; SPECIAL SYSTEM GROUP
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1422                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1423                                  GET_IN_VARS                     EQU 82  ; 82     52
  1424                                  SETDPB                          EQU 83  ; 83     53
  1425                                  ;                                                                          ;
  1426                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1427                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1428                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1431                                  ;                                                                          ;
  1432                                  DUP_PDB                         EQU 85  ; 85     55
  1433                                  ;                                                                          ;
  1434                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1435                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1436                                  RENAME                          EQU 86  ; 86     56
  1437                                  FILE_TIMES                      EQU 87  ; 87     57
  1438                                  ALLOCOPER			EQU 88	; 88	 58
  1439                                  ; Network extention system calls
  1440                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1441                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1442                                  CREATENEWFILE			EQU 91	; 91	 5B
  1443                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1444                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1445                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1446                                  ;									   ;
  1447                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1448                                  					;	    CloseByName, CloseUser,
  1449                                  					;	    CloseUserProcess,
  1450                                  					;	    GetOpenFileList
  1451                                  ;									   ;
  1452                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1453                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1454                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1455                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1456                                  XNAMETRANS			EQU 96	; 96	 60
  1457                                  PATHPARSE			EQU 97	; 97	 61
  1458                                  GETCURRENTPSP			EQU 98	; 98	 62
  1459                                  HONGEUL 			EQU 99	; 99	 63
  1460                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1461                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1462                                  ;									   ;
  1463                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1464                                  ;									   ;
  1465                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1466                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1467                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1468                                  GETSETCDPG			EQU 102 ; 102	 66
  1469                                  EXTHANDLE			EQU 103 ; 103	 67
  1470                                  COMMIT				EQU 104 ; 104	 68
  1471                                  
  1472                                  ; 29/04/2019 - Retro DOS v4.0
  1473                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1474                                  
  1475                                  GetSetMediaID			EQU 105 ; 105	 69
  1476                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1477                                  ExtOpen 			EQU 108 ; 108	 6C
  1478                                  
  1479                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1480                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1481                                  ;                                                                          ;
  1482                                  ;ifdef ROMEXEC
  1483                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1484                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1485                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1486                                  ;endif
  1487                                  ;                                                                          ;
  1488                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1489                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1490                                  
  1491                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1492                                  ;OEM_C1				EQU 249 ; 249    F9
  1493                                  ;OEM_C2				EQU 250 ; 250    FA
  1494                                  ;OEM_C3				EQU 251 ; 251    FB
  1495                                  ;OEM_C4				EQU 252 ; 252    FC
  1496                                  ;OEM_C5				EQU 253 ; 253    FD
  1497                                  ;OEM_C6				EQU 254 ; 254    FE
  1498                                  ;OEM_C7				EQU 255 ; 255    FF
  1499                                  
  1500                                  ;============================================================================
  1501                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1502                                  ;============================================================================
  1503                                  ; 24/04/2019 - Retro DOS 4.0
  1504                                  
  1505                                  ;MAJOR_VERSION	EQU     6
  1506                                  ;;MINOR_VERSION	EQU	00
  1507                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1508                                  
  1509                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1510                                  ;MAJOR_VERSION	EQU     5
  1511                                  ;MINOR_VERSION	EQU     0
  1512                                  
  1513                                  ; 30/12/2022 - Retro DOS v4.2
  1514                                  MAJOR_VERSION	EQU     6
  1515                                  MINOR_VERSION	EQU     22
  1516                                  
  1517                                  ;============================================================================
  1518                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1519                                  ;============================================================================
  1520                                  ; 09/07/2018 - Retro DOS 3.0
  1521                                  
  1522                                  ; Current structure of the data returned by the international call
  1523                                  
  1524                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1525                                  .Date_tim_format:
  1526 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1527                                  .Currency_sym:
  1528 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1529                                  .Thous_sep:
  1530 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1531                                  .Decimal_sep:
  1532 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1533                                  .Date_sep:
  1534 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1535                                  .Time_sep:
  1536 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1537                                  .Bit_field:	
  1538 0000000F ??                      		RESB 1		; Bit values
  1539                                                                     ;   Bit 0 = 0 if currency symbol first
  1540                                                                     ;         = 1 if currency symbol last
  1541                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1542                                                                     ;         = 1 if space after currency symbol
  1543                                  .Currency_cents:
  1544 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1545                                  .Time_24:
  1546 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1547                                  .Map_call:
  1548 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1549 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1550                                  				;  in pieces.
  1551                                  .Data_sep:
  1552 00000016 ????                    		RESB	2	; Data list separator character
  1553                                  .size:		
  1554                                  endstruc
  1555                                  
  1556                                  ; Max size of the block returned by the INTERNATIONAL call
  1557                                  
  1558                                  internat_block_max	EQU	32
  1559                                  
  1560                                  ;============================================================================
  1561                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1562                                  ;============================================================================
  1563                                  ; 08/07/2018 - Retro DOS v3.0
  1564                                  
  1565                                  ;SysInitVars STRUC
  1566                                  struc SYSI
  1567 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1568 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1569 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1570 0000000C ????????                .CON:	    resd 1		; CON device
  1571 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1572 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1573 00000016 ????????                .CDS:	    resd 1		; CDS list
  1574 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1575 0000001E ????                    .Keep:	    resw 1		; keep count
  1576 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1577 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1578 00000022 ????????                .DEV:	    resd 1		; device list
  1579                                  ; 09/07/2018
  1580                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1581                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1582 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1583 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1584 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1585 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1586 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1587 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1588 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1589 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1590 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1591 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1592 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1593 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1594                                  endstruc
  1595                                  ;SysInitVars ENDS
  1596                                  
  1597                                  ;This is added for more information exchange between DOS, BIOS.
  1598                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1599                                  
  1600                                  ;SysInitVars_Ext struc
  1601                                  struc SYSI_EXT
  1602 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1603 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1604                                  endstruc
  1605                                  ;SysInitVars_Ext ends
  1606                                  
  1607                                  ;============================================================================
  1608                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1609                                  ;============================================================================
  1610                                  ; 09/07/2018 - Retro DOS v3.0
  1611                                  
  1612                                  ;*** J.K.
  1613                                  ;General Guide -
  1614                                  ;Category Code:
  1615                                  ; 0... .... DOS Defined
  1616                                  ; 1... .... User defined
  1617                                  ; .xxx xxxx Code
  1618                                  
  1619                                  ;Function Code:
  1620                                  ; 0... .... Return error if unsupported
  1621                                  ; 1... .... Ignore if unsupported
  1622                                  ; .0.. .... Intercepted by DOS
  1623                                  ; .1.. .... Passed to driver
  1624                                  ; ..0. .... Sends data/commands to device
  1625                                  ; ..1. .... Quries data/info from device
  1626                                  ; ...x .... Subfunction
  1627                                  ;
  1628                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1629                                  ; function set.  It plays no critical role; some functions may contain both
  1630                                  ; command and query elements. The convention is that such commands are
  1631                                  ; defined as "sends data".
  1632                                  
  1633                                  ;*****************************;*
  1634                                  ; BLOCK DRIVERS 	      ;*
  1635                                  ;*****************************;*
  1636                                  
  1637                                  ; IOCTL SUB-FUNCTIONS
  1638                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1639                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1640                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1641                                  IOCTL_READ_HANDLE	EQU	2
  1642                                  IOCTL_WRITE_HANDLE	EQU	3
  1643                                  IOCTL_READ_DRIVE	EQU	4
  1644                                  IOCTL_WRITE_DRIVE	EQU	5
  1645                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1646                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1647                                  IOCTL_CHANGEABLE?	EQU	8
  1648                                  IOCTL_DeviceLocOrRem?	EQU	9
  1649                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1650                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1651                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1652                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1653                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1654                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1655                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1656                                  ; (MSDOS 6.0)
  1657                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1658                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1659                                  
  1660                                  ; GENERIC IOCTL CATEGORY CODES
  1661                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1662                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1663                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1664                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1665                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1666                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1667                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1668                                  
  1669                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1670                                  RAWIO			EQU	8
  1671                                  
  1672                                  ; RAWIO SUB-FUNCTIONS
  1673                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1674                                  GET_DEVICE_PARAMETERS	EQU	60H
  1675                                  SET_DEVICE_PARAMETERS	EQU	40H
  1676                                  READ_TRACK		EQU	61H
  1677                                  WRITE_TRACK		EQU	41H
  1678                                  VERIFY_TRACK		EQU	62H
  1679                                  FORMAT_TRACK		EQU	42H
  1680                                  ; (MSDOS 6.0)
  1681                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1682                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1683                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1684                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1685                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1686                                  
  1687                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1688                                  BUILD_DEVICE_BPB	EQU	000000001B
  1689                                  
  1690                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1691                                  INSTALL_FAKE_BPB	EQU	000000001B
  1692                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1693                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1694                                  
  1695                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1696                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1697                                  STATUS_FOR_FORMAT	EQU	000000001B
  1698                                  ; (MSDOS 6.0)
  1699                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1700                                  
  1701                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1702                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1703                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1704                                  
  1705                                  ; DEVICETYPE VALUES
  1706                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1707                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1708                                  DEV_5INCH		EQU	0
  1709                                  DEV_5INCH96TPI		EQU	1
  1710                                  DEV_3INCH720KB		EQU	2
  1711                                  DEV_8INCHSS		EQU	3
  1712                                  DEV_8INCHDS		EQU	4
  1713                                  DEV_HARDDISK		EQU	5
  1714                                  DEV_OTHER		EQU	7
  1715                                  ; (MSDOS 6.0)
  1716                                  ;DEV_3INCH1440KB	EQU	7
  1717                                  DEV_3INCH2880KB		EQU	9
  1718                                  ; Retro DOS v2.0 - 26/03/2018
  1719                                  ;;DEV_TAPE		EQU	6
  1720                                  ;;DEV_ERIMO		EQU	8
  1721                                  ;DEV_3INCH2880KB	EQU	9
  1722                                  DEV_3INCH1440KB		EQU	10
  1723                                  
  1724                                  ; (MSDOS 3.3)
  1725                                  ;MAX_DEV_TYPE		EQU	7
  1726                                  
  1727                                  ; (MSDOS 6.0)
  1728                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1729                                  					; CURRENTLY SUPPORT.
  1730                                  struc A_SECTORTABLE
  1731 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1732 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1733                                  .size:
  1734                                  endstruc
  1735                                  
  1736                                  ;============================================================================
  1737                                  ; DEVSYM.INC
  1738                                  ;============================================================================
  1739                                  ; 07/07/2018 - Retro DOS v3.0
  1740                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1741                                  
  1742                                  ;**	DevSym.inc - Device Symbols
  1743                                  
  1744                                  ; The device table list has the form:
  1745                                  struc	SYSDEV
  1746 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1747 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1748 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1749 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1750 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1751                                  .size:
  1752                                  endstruc
  1753                                  
  1754                                  ;
  1755                                  ; ATTRIBUTE BIT MASKS
  1756                                  ;
  1757                                  ; CHARACTER DEVICES:
  1758                                  ;
  1759                                  ; BIT 15 -> MUST BE 1
  1760                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1761                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1762                                  ;     12 -> UNUSED
  1763                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1764                                  ;     10 -> MUST BE 0
  1765                                  ;      9 -> MUST BE 0
  1766                                  ;      8 -> UNUSED
  1767                                  ;      7 -> UNUSED
  1768                                  ;      6 -> UNUSED
  1769                                  ;      5 -> UNUSED
  1770                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1771                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1772                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1773                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1774                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1775                                  ;
  1776                                  ; BLOCK DEVICES:
  1777                                  ;
  1778                                  ; BIT 15 -> MUST BE 0
  1779                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1780                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1781                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1782                                  ;	    THE SAME PLACE.
  1783                                  ;     12 -> UNUSED
  1784                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1785                                  ;     10 -> MUST BE 0
  1786                                  ;      9 -> MUST BE 0
  1787                                  ;      8 -> UNUSED
  1788                                  ;      7 -> UNUSED
  1789                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1790                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1791                                  ;      5 -> UNUSED
  1792                                  ;      4 -> UNUSED
  1793                                  ;      3 -> UNUSED
  1794                                  ;      2 -> UNUSED
  1795                                  ;      1 -> UNUSED
  1796                                  ;      0 -> UNUSED
  1797                                  ;
  1798                                  
  1799                                  ;Attribute bit masks
  1800                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1801                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1802                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1803                                  
  1804                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1805                                  
  1806                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1807                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1808                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1809                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1810                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1811                                  				;  ENTRY POINTS, 0 IF NOT
  1812                                  
  1813                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1814                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1815                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1816                                  				;  ITS CURRENT FORM.
  1817                                  
  1818                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1819                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1820                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1821                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1822                                  
  1823                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1824                                  
  1825                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1826                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1827                                  				;LOGICAL DRIVES, AND SUPPORTS
  1828                                  				;GENERIC IOCTL CALLS.
  1829                                  				;FOR CHARACTER DEVICES, THIS
  1830                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1831                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1832                                  
  1833                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1834                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1835                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1836                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1837                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1838                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1839                                  
  1840                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1841                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1842                                  
  1843                                  ;Static Reguest Header
  1844                                  struc	SRHEAD
  1845 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1846 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1847 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1848 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1849 00000005 ????????????????                	resb 8		;Reserved for queue links
  1850                                  .size:
  1851                                  endstruc
  1852                                  
  1853                                  ;Status word masks
  1854                                  STERR   EQU     8000H           ;Bit 15 - Error
  1855                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1856                                  STDON   EQU     0100H           ;Bit 8 - Done
  1857                                  STECODE EQU     00FFH           ;Error code
  1858                                  WRECODE EQU     0
  1859                                  
  1860                                  ;Function codes
  1861                                  DINITHL EQU     26              ;Size of init header
  1862                                  DMEDHL  EQU     15              ;Size of media check header
  1863                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1864                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1865                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1866                                  DSTATHL EQU     13              ;Size of status header
  1867                                  DFLSHL  EQU     15              ;Size of flush header
  1868                                  
  1869                                  DEVINIT EQU     0               ;Initialization
  1870                                  DEVMDCH EQU     1               ;Media check
  1871                                  DEVBPB  EQU     2               ;Get BPB
  1872                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1873                                  DEVRD   EQU     4               ;Read
  1874                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1875                                  DEVIST  EQU     6               ;Input status
  1876                                  DEVIFL  EQU     7               ;Input flush
  1877                                  DEVWRT  EQU     8               ;Write
  1878                                  DEVWRTV EQU     9               ;Write with verify
  1879                                  DEVOST  EQU     10              ;Output status
  1880                                  DEVOFL  EQU     11              ;Output flush
  1881                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1882                                  
  1883                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1884                                  DEVOPN	EQU	13		;DEVICE OPEN
  1885                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1886                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1887                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1888                                  ; 07/08/2018 - Retro DOS v3.0
  1889                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1890                                  GENIOCTL EQU	19
  1891                                  
  1892                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1893                                  ;		     20
  1894                                  ;		     21
  1895                                  ;		     22
  1896                                  
  1897                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1898                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1899                                  ; 18/05/2019 - Retro DOS v4.0
  1900                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1901                                  
  1902                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1903                                  
  1904                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1905                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1906                                  
  1907                                  ; ADDED FOR DOS 5.00
  1908                                  
  1909                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1910                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1911                                  
  1912                                  struc IOCTL_REQ
  1913 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1914                                  				; GENERIC IOCTL ADDITION.
  1915 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1916 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1917 0000000F ????                    .REG_SI:	resw 1
  1918 00000011 ????                    .REG_DI:	resw 1
  1919 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1920                                  .size: ; 07/08/2018
  1921                                  endstruc
  1922                                  
  1923                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1924                                  GEN_IOCTL_WRT_TRK EQU	40H
  1925                                  GEN_IOCTL_RD_TRK  EQU	60H
  1926                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1927                                  
  1928                                  ;; 32-bit absolute read/write input list structure
  1929                                  
  1930                                  struc ABS_32RW
  1931 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1932 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1933 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1934                                  .size:
  1935                                  endstruc
  1936                                  
  1937                                  ;; media ID info
  1938                                  
  1939                                  struc MEDIA_ID_INFO
  1940 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1941 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1942 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1943 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1944                                  .size:
  1945                                  endstruc
  1946                                  
  1947                                  ; equates for DOS34_FLAG
  1948                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1949                                  
  1950                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1951                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1952                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1953                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1954                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1955                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1956                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1957                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1958                                  					    ;M018: that knows how to handle 
  1959                                  					    ;M018: open for exec
  1960                                  
  1961                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1962                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1963                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1964                                  
  1965                                  ;============================================================================
  1966                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1967                                  ;============================================================================
  1968                                  ; 16/07/2018 - Retro DOS v3.0 
  1969                                  
  1970                                  ;**	ERROR.INC - DOS Error Codes
  1971                                  ;
  1972                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1973                                  ;    return error codes through AX. If an error occurred then
  1974                                  ;    the carry bit will be set and the error code is in AX. If no error
  1975                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1976                                  ;
  1977                                  ;    Since the set of error codes is being extended as we extend the operating
  1978                                  ;    system, we have provided a means for applications to ask the system for a
  1979                                  ;    recommended course of action when they receive an error.
  1980                                  ;
  1981                                  ;    The GetExtendedError system call returns a universal error, an error
  1982                                  ;    location and a recommended course of action. The universal error code is
  1983                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1984                                  ;    is issued.
  1985                                  
  1986                                  ;	2.0 error codes
  1987                                  
  1988                                  error_invalid_function		EQU	1
  1989                                  error_file_not_found		EQU	2
  1990                                  error_path_not_found		EQU	3
  1991                                  error_too_many_open_files	EQU	4
  1992                                  error_access_denied		EQU	5
  1993                                  error_invalid_handle		EQU	6
  1994                                  error_arena_trashed		EQU	7
  1995                                  error_not_enough_memory 	EQU	8
  1996                                  error_invalid_block		EQU	9
  1997                                  error_bad_environment		EQU	10
  1998                                  error_bad_format		EQU	11
  1999                                  error_invalid_access		EQU	12
  2000                                  error_invalid_data		EQU	13
  2001                                  ;**** reserved			EQU	14	; *****
  2002                                  error_invalid_drive		EQU	15
  2003                                  error_current_directory 	EQU	16
  2004                                  error_not_same_device		EQU	17
  2005                                  error_no_more_files		EQU	18
  2006                                  
  2007                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  2008                                  
  2009                                  error_write_protect		EQU	19
  2010                                  error_bad_unit			EQU	20
  2011                                  error_not_ready 		EQU	21
  2012                                  error_bad_command		EQU	22
  2013                                  error_CRC			EQU	23
  2014                                  error_bad_length		EQU	24
  2015                                  error_seek			EQU	25
  2016                                  error_not_DOS_disk		EQU	26
  2017                                  error_sector_not_found		EQU	27
  2018                                  error_out_of_paper		EQU	28
  2019                                  error_write_fault		EQU	29
  2020                                  error_read_fault		EQU	30
  2021                                  error_gen_failure		EQU	31
  2022                                  
  2023                                  ;	the new 3.0 error codes reported through INT 24
  2024                                  
  2025                                  error_sharing_violation 	EQU	32
  2026                                  error_lock_violation		EQU	33
  2027                                  error_wrong_disk		EQU	34
  2028                                  error_FCB_unavailable		EQU	35
  2029                                  error_sharing_buffer_exceeded	EQU	36
  2030                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2031                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2032                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2033                                  
  2034                                  ;	New OEM network-related errors are 50-79
  2035                                  
  2036                                  error_not_supported		EQU	50
  2037                                  
  2038                                  error_net_access_denied		EQU	65	;M028
  2039                                  
  2040                                  ;	End of INT 24 reportable errors
  2041                                  
  2042                                  error_file_exists		EQU	80
  2043                                  error_DUP_FCB			EQU	81	; *****
  2044                                  error_cannot_make		EQU	82
  2045                                  error_FAIL_I24			EQU	83
  2046                                  
  2047                                  ;	New 3.0 network related error codes
  2048                                  
  2049                                  error_out_of_structures 	EQU	84
  2050                                  error_already_assigned		EQU	85
  2051                                  error_invalid_password		EQU	86
  2052                                  error_invalid_parameter 	EQU	87
  2053                                  error_NET_write_fault		EQU	88
  2054                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2055                                  
  2056                                  ;	BREAK <Interrupt 24 error codes>
  2057                                  
  2058                                  ;**	Int24 Error Codes
  2059                                  
  2060                                  error_I24_write_protect 	EQU	0
  2061                                  error_I24_bad_unit		EQU	1
  2062                                  error_I24_not_ready		EQU	2
  2063                                  error_I24_bad_command		EQU	3
  2064                                  error_I24_CRC			EQU	4
  2065                                  error_I24_bad_length		EQU	5
  2066                                  error_I24_Seek			EQU	6
  2067                                  error_I24_not_DOS_disk		EQU	7
  2068                                  error_I24_sector_not_found	EQU	8
  2069                                  error_I24_out_of_paper		EQU	9
  2070                                  error_I24_write_fault		EQU	0Ah
  2071                                  error_I24_read_fault		EQU	0Bh
  2072                                  error_I24_gen_failure		EQU	0Ch
  2073                                  ; NOTE: Code 0DH is used by MT-DOS.
  2074                                  error_I24_wrong_disk		EQU	0Fh
  2075                                  
  2076                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2077                                  ;
  2078                                  ;	NOTE: ABORT is ALWAYS allowed
  2079                                  
  2080                                  Allowed_FAIL			EQU	00001000B
  2081                                  Allowed_RETRY			EQU	00010000B
  2082                                  Allowed_IGNORE			EQU	00100000B
  2083                                  
  2084                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2085                                  I24_area			EQU	00000110B  ; 00 if DOS
  2086                                  						   ; 01 if FAT
  2087                                  						   ; 10 if root DIR
  2088                                  						   ; 11 if DATA
  2089                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2090                                  
  2091                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2092                                  
  2093                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2094                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2095                                  ;	to take for error codes that they don't explicitly understand.
  2096                                  
  2097                                  ;	Values for error CLASS
  2098                                  
  2099                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2100                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2101                                  errCLASS_Auth		EQU	3	; Permission problem
  2102                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2103                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2104                                  errCLASS_SysFail	EQU	6	; System Failure
  2105                                  errCLASS_Apperr 	EQU	7	; Application Error
  2106                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2107                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2108                                  errCLASS_Locked 	EQU	10	; Locked
  2109                                  errCLASS_Media		EQU	11	; Media Failure
  2110                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2111                                  errCLASS_Unk		EQU	13	; Unknown/other
  2112                                  
  2113                                  ;	Values for error ACTION
  2114                                  
  2115                                  errACT_Retry		EQU	1	; Retry
  2116                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2117                                  errACT_User		EQU	3	; Ask user to regive info
  2118                                  errACT_Abort		EQU	4	; abort with clean up
  2119                                  errACT_Panic		EQU	5	; abort immediately
  2120                                  errACT_Ignore		EQU	6	; ignore
  2121                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2122                                  
  2123                                  ;	Values for error LOCUS
  2124                                  
  2125                                  errLOC_Unk		EQU	1	; No appropriate value
  2126                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2127                                  errLOC_Net		EQU	3	; Network
  2128                                  errLOC_SerDev		EQU	4	; Serial Device
  2129                                  errLOC_Mem		EQU	5	; Memory
  2130                                  
  2131                                  ;============================================================================
  2132                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2133                                  ;============================================================================
  2134                                  ; 04/05/2019 - Retro DOS v4.0
  2135                                  
  2136                                  ;**	Int 2A functions
  2137                                  ; ---------------------------------------------------------------------------
  2138                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2139                                  ;		as a critical section handler since critical sections
  2140                                  ;		were originally created to support the net.
  2141                                  ; ---------------------------------------------------------------------------
  2142                                  
  2143                                  ; ---------------------------------------------------------------------------
  2144                                  ;**	This table was created by examining the source and may not be
  2145                                  ;	complete or completely accurate - JGL
  2146                                  ;
  2147                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2148                                  
  2149                                  ;	(ah) = 0	installation check
  2150                                  ;			   (returns ah !=0 if installed)
  2151                                  ;	(ah) = 1	cooked net bios call
  2152                                  ;	(ah) = 3	query drive shared
  2153                                  ;			   (ds:si) = "n:" asciz string
  2154                                  ;	(ah) = 4	net bios
  2155                                  ;	       (al) = 0	   cooked net bios call
  2156                                  ;	       (al) = 1	   raw net bios call
  2157                                  ;	       (al) = 2	   ???
  2158                                  ;
  2159                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2160                                  ;			NCBs available/outstanding. DX returns the number of
  2161                                  ;			sessions. Supposedly, this is documented in an old
  2162                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2163                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2164                                  ;			not be used, as it is a hack, only to get Lotus
  2165                                  ;			Notes running.
  2166                                  ;
  2167                                  ;	(ah) = 80h	enter critical section
  2168                                  ;	(ah) = 81h	leave critical section
  2169                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2170                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2171                                  ; ---------------------------------------------------------------------------
  2172                                  
  2173                                  ;**	Critical section definitions
  2174                                  ; ---------------------------------------------------------------------------
  2175                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2176                                  ;	which various programs use to make it so, in a limited fashion.
  2177                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2178                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2179                                  ;	DOS's global data structures, such as the memory arena, are not
  2180                                  ;	in this area, so critical section indicators are used to protect
  2181                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2182                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2183                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2184                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2185                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2186                                  ;	critical section they then switch away from that second thread and
  2187                                  ;	let the first one finish and exit the section.
  2188                                  ; ---------------------------------------------------------------------------
  2189                                  
  2190                                  ; These below are subject to leave-all sections
  2191                                  critDisk    EQU     1			; Disk I/O critical section
  2192                                  critShare   EQU     1			; Sharer I/O critical section
  2193                                  critMem     EQU     1			; memory maintenance critical section
  2194                                  critSFT     EQU     1			; sft table allocation
  2195                                  critDevice  EQU     2			; Device I/O critical section
  2196                                  critNet     EQU     5			; network critical section
  2197                                  critIFS     EQU     6			; ifsfunc critical section
  2198                                  ; These below are not subject to leave-all sections
  2199                                  critASSIGN  EQU     8			; Assign has munged a system call
  2200                                  
  2201                                  ;============================================================================
  2202                                  ; MULT.INC (MSDOS 6.0, 1991)
  2203                                  ;============================================================================
  2204                                  ; 04/05/2019 - Retro DOS v4.0
  2205                                  
  2206                                  ;Break <Multiplex channels>
  2207                                  
  2208                                  ; ---------------------------------------------------------------------------
  2209                                  ; The current set of defined multiplex channels is (* means documented):
  2210                                  ;
  2211                                  ;   Channel(h)  Issuer          Receiver    Function
  2212                                  ;      00       server          PSPRINT     print job control
  2213                                  ;     *01       print/apps      PRINT       Queueing of files
  2214                                  ;      02       BIOS            REDIR       signal open/close of printers
  2215                                  ;
  2216                                  ;      05       command         REDIR       obtain text of net int 24 message
  2217                                  ;     *06       server/assign   ASSIGN      Install check
  2218                                  ;
  2219                                  ;      08       external driver IBMBIO      interface to internal routines
  2220                                  ;
  2221                                  ;      10       sharer/server   Sharer      install check
  2222                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2223                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2224                                  ;      13       MSNET           MSNET       movement of NCBs
  2225                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2226                                  ;                                           of alternative INT_13 drivers after
  2227                                  ;                                           boot_up
  2228                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2229                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2230                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2231                                  ;      16       WIN386          WIN386      Windows communications
  2232                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2233                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2234                                  ;      19       Shell
  2235                                  ;      1A       Ansi.sys
  2236                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2237                                  ;
  2238                                  ;      40h      OS/2
  2239                                  ;      41h      Lanman
  2240                                  ;      42h      Lanman
  2241                                  ;      43h      Himem
  2242                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2243                                  ;                               AL = 30h    reserved for Himem external A20 code
  2244                                  ;      44h      Dosextender
  2245                                  ;      45H      Windows profiler
  2246                                  ;      46h      Windows/286 DOS extender
  2247                                  ;      47h      Basic Compiler Vn. 7.0
  2248                                  ;      48h      Doskey
  2249                                  ;      49h      DOS 5.x install 
  2250                                  ;      4Ah      Multi Purpose
  2251                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2252                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2253                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2254                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2255                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2256                                  ;
  2257                                  ;                multSmartdrv           10h
  2258                                  ;                multMagicdrv           11h
  2259                                  ;      4Bh      Task Switcher API
  2260                                  ;
  2261                                  ;      4Ch      APPS            APM         Advanced power management
  2262                                  ;      4Dh      Kana Kanji Converter, MSKK
  2263                                  ;
  2264                                  ;      51h      ODI real mode support driver (for Chicago)
  2265                                  ;
  2266                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2267                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2268                                  ;
  2269                                  ;      55h      COMMAND.COM
  2270                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2271                                  ;                                           instance of command.com
  2272                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2273                                  ;                                           instance of ROM COMMAND
  2274                                  ;      56h      Sewell Development
  2275                                  ;               INTERLNK
  2276                                  ;
  2277                                  ;      57h      Iomega Corp.
  2278                                  ;
  2279                                  ;      ABh      Unspecified IBM use
  2280                                  ;      ACh      Graphics
  2281                                  ;      ADh      NLS (toronto)
  2282                                  ;      AEh
  2283                                  ;      AFh      Mode
  2284                                  ;      B0h      GRAFTABL        GRAFTABL
  2285                                  ;
  2286                                  ;      D7h      Banyan VINES
  2287                                  ; ---------------------------------------------------------------------------
  2288                                  
  2289                                  ;MUX 00-3F reserverd for IBM
  2290                                  ;MUX 80-BF reserverd for IBM
  2291                                  
  2292                                  ;MUX 40-7F reserved for Microsoft
  2293                                  
  2294                                  ;MUX C0-FF users
  2295                                  
  2296                                  MultSHARE   EQU     10h 		; sharer
  2297                                      ;	1   MFT_enter
  2298                                      ;	2   MFTClose
  2299                                      ;	3   MFTclU
  2300                                      ;	4   MFTCloseP
  2301                                      ;	5   MFTCloN
  2302                                      ;	6   set_block
  2303                                      ;	7   clr_block
  2304                                      ;	8   chk_block
  2305                                      ;	9   MFT_get
  2306                                      ;	10  ShSave
  2307                                      ;	11  ShChk
  2308                                      ;	12  ShCol
  2309                                      ;	13  ShCloseFile
  2310                                  
  2311                                  MultNET     EQU     11h 		; Network support
  2312                                  MultIFS     EQU     11h                 ; Network support
  2313                                      ;   1   IFS_RMDIR
  2314                                      ;   2   IFS_SEQ_RMDIR
  2315                                      ;   3   IFS_MKDIR
  2316                                      ;   4   IFS_SEQ_MKDIR
  2317                                      ;   5   IFS_CHDIR
  2318                                      ;   6   IFS_CLOSE
  2319                                      ;   7   IFS_COMMIT
  2320                                      ;   8   IFS_READ
  2321                                      ;   9   IFS_WRITE
  2322                                      ;   10  IFS_LOCK
  2323                                      ;   11  IFS_UNLOCK
  2324                                      ;   12  IFS_DISK_INFO
  2325                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2326                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2327                                      ;   15  IFS_GET_FILE_INFO
  2328                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2329                                      ;   17  IFS_RENAME
  2330                                      ;   18  IFS_SEQ_RENAME
  2331                                      ;   19  IFS_DELETE
  2332                                      ;   20  IFS_SEQ_DELETE
  2333                                      ;   21  IFS_OPEN
  2334                                      ;   22  IFS_SEQ_OPEN
  2335                                      ;   23  IFS_CREATE
  2336                                      ;   24  IFS_SEQ_CREATE
  2337                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2338                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2339                                      ;   27  IFS_SEARCH_FIRST
  2340                                      ;   28  IFS_SEARCH_NEXT
  2341                                      ;   29  IFS_ABORT
  2342                                      ;   30  IFS_ASSOPER
  2343                                      ;   31  Printer_SET_STRING
  2344                                      ;   32  IFSFlushBuf
  2345                                      ;   33  IFSBufWrite
  2346                                      ;   34  IFSResetEnvironment
  2347                                      ;   35  IFSSpoolCheck
  2348                                      ;   36  IFSSpoolClose
  2349                                      ;   37  IFSDeviceOper
  2350                                      ;   38  IFSSpoolEchoCheck
  2351                                      ;   39      - - -   Unused   - - -
  2352                                      ;   40      - - -   Unused   - - -
  2353                                      ;   41      - - -   Unused   - - -
  2354                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2355                                      ;   43  DEVICE_IOCTL
  2356                                      ;   44  IFS_UPDATE_CB
  2357                                      ;   45  IFS_FILE_XATTRIBUTES
  2358                                      ;   46  IFS_XOPEN
  2359                                      ;   47  IFS_DEPENDENT_IOCTL
  2360                                  
  2361                                  MultDOS     EQU     12h 		; DOS call back
  2362                                      ;	1   DOS_CLOSE
  2363                                      ;	2   RECSET
  2364                                      ;	3   Get DOSGROUP
  2365                                      ;	4   PATHCHRCMP
  2366                                      ;	5   OUT
  2367                                      ;	6   NET_I24_ENTRY
  2368                                      ;	7   PLACEBUF
  2369                                      ;	8   FREE_SFT
  2370                                      ;	9   BUFWRITE
  2371                                      ;	10  SHARE_VIOLATION
  2372                                      ;	11  SHARE_ERROR
  2373                                      ;	12  SET_SFT_MODE
  2374                                      ;	13  DATE16
  2375                                      ;	14  SETVISIT
  2376                                      ;	15  SCANPLACE
  2377                                      ;	16  SKIPVISIT
  2378                                      ;	17  StrCpy
  2379                                      ;	18  StrLen
  2380                                      ;	19  UCase
  2381                                      ;	20  POINTCOMP
  2382                                      ;	21  CHECKFLUSH
  2383                                      ;	22  SFFromSFN
  2384                                      ;	23  GetCDSFromDrv
  2385                                      ;	24  Get_User_Stack
  2386                                      ;	25  GetThisDrv
  2387                                      ;	26  DriveFromText
  2388                                      ;	27  SETYEAR
  2389                                      ;	28  DSUM
  2390                                      ;	29  DSLIDE
  2391                                      ;	30  StrCmp
  2392                                      ;	31  initcds
  2393                                      ;	32  pjfnfromhandle
  2394                                      ;	33  $NameTrans
  2395                                      ;	34  CAL_LK
  2396                                      ;	35  DEVNAME
  2397                                      ;	36  Idle
  2398                                      ;   37  DStrLen
  2399                                      ;   38  NLS_OPEN      DOS 3.3
  2400                                      ;   39  $CLOSE        DOS 3.3
  2401                                      ;   40  NLS_LSEEK     DOS 3.3
  2402                                      ;   41  $READ         DOS 3.3
  2403                                      ;   42  FastInit      DOS 4.0
  2404                                      ;   43  NLS_IOCTL     DOS 3.3
  2405                                      ;   44  GetDevList    DOS 3.3
  2406                                      ;   45  NLS_GETEXT    DOS 3.3
  2407                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2408                                      ;   47  FAKE_VERSION  DOS 4.0
  2409                                  
  2410                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2411                                      ;	0   NLSInstall
  2412                                      ;	1   ChgCodePage
  2413                                      ;	2   GetExtInfo
  2414                                      ;	3   SetCodePage
  2415                                      ;	4   GetCntry
  2416                                  
  2417                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2418                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2419                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2420                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2421                                  
  2422                                  multMULT        EQU     4Ah
  2423                                  multMAGIC       EQU     256*multMULT + 11h
  2424                                  multMULTRPLTOM  EQU     06h
  2425                                  
  2426                                      ;   0   swap disk function for single floppy drive m/cs
  2427                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2428                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2429                                      ;       drive
  2430                                      ;
  2431                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2432                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2433                                      ;       returns pointer in ES:DI
  2434                                      ;
  2435                                      ;   3-4 currently used by nobody
  2436                                      ;   5   Switcher API
  2437                                      ;   6   Top of Memory for RPL.
  2438                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2439                                      ;           code present in TOM should respond with a new TOM in DX
  2440                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2441                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2442                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2443                                      ;           It is the responsibility of RPL program to release the mem.
  2444                                      ;   7   Reserved for PROTMAN support.
  2445                                      ;  10   smartdrv 4.0
  2446                                      ;  11   dblspace api
  2447                                      ;  12   MRCI     api
  2448                                      ;  13   dblspace/mrci stealth packet api
  2449                                  
  2450                                  MultAPM     EQU     4ch             ; Obselete ???
  2451                                      ;       00h     APM_VER_CHK
  2452                                      ;       01h     APM_SUS_SYS_REQ
  2453                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2454                                  
  2455                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2456                                  				;  APM events                         ; M036
  2457                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2458                                  
  2459                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2460                                  ;	  it calls Multdos 42 to set up an entry routine address
  2461                                      ;	0   Install status  (reserved)
  2462                                      ;	1   Lookup
  2463                                      ;	2   Insert
  2464                                      ;	3   Delete
  2465                                      ;	4   Purge	    (reserved)
  2466                                  
  2467                                  ;============================================================================
  2468                                  ; FIND.INC (MSDOS 6.0, 1991)
  2469                                  ;============================================================================
  2470                                  ; 17/05/2019 - Retro DOS v4.0
  2471                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2472                                  
  2473                                  ;Break	<find first/next buffer>
  2474                                  
  2475                                  struc find_buf
  2476 00000000 ??                      .drive:	    resb 1		; drive of search
  2477 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2478 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2479 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2480 0000000F ????                    .DirStart:  resw 1		; DirStart
  2481 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2482 00000015 ??                      .attr:	    resb 1		; attribute found
  2483 00000016 ????                    .time:	    resw 1		; time
  2484 00000018 ????                    .date:	    resw 1		; date
  2485 0000001A ????                    .size_l:    resw 1		; low(size)
  2486 0000001C ????                    .size_h:    resw 1		; high(size)
  2487 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2488                                  .size:
  2489                                  endstruc
  2490                                  
  2491                                  ;============================================================================
  2492                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2493                                  ;============================================================================
  2494                                  ; 29/04/2019 - Retro DOS v4.0
  2495                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2496                                  
  2497                                  ;Equates for COUNTRY INFORMATION.
  2498                                  SetCountryInfo	EQU	1	;country info
  2499                                  SetUcase	EQU	2	;uppercase table
  2500                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2501                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2502                                  SetFileList	EQU	5	;valid file character list
  2503                                  SetCollate	EQU	6	;collating sequence
  2504                                  SetDBCS 	EQU	7	;double byte character set
  2505                                  SetALL		EQU	-1	;all the entries
  2506                                  
  2507                                  ;DOS country and code page information table structure.
  2508                                  ;Internally, IBMDOS gives a pointer to this table.
  2509                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2510                                  ;this structure.
  2511                                  
  2512                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2513 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2514 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2515 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2516 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2517 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2518 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2519                                  
  2520 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2521 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2522                                  
  2523 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2524 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2525                                  
  2526 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2527 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2528                                  
  2529                                  ; MSDOS 6.0
  2530 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2531 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2532                                  
  2533 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2534 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2535 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2536 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2537 0000006C ????                    .ccDFormat:		resw 1	;date format
  2538 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2539 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2540 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2541 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2542 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2543 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2544 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2545 0000007D ??                      .ccTFormat:		resb 1	;time format
  2546 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2547 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2548 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2549                                  .size:
  2550                                  endstruc
  2551                                  
  2552                                  ;Ucase table
  2553                                  struc CC_UCASE_TAB
  2554 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2555 00000002 <res 80h>               .ccUcase_data:		resb 128
  2556                                  endstruc
  2557                                  
  2558                                  ;File Ucase table
  2559                                  struc CC_FILE_UCASE_TAB
  2560 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2561 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2562                                  endstruc
  2563                                  
  2564                                  ;File char list
  2565                                  struc CC_FILE_CHAR_TAB
  2566 00000000 ????                    .ccFilechar_leng:	resw 1
  2567 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2568                                  endstruc
  2569                                  
  2570                                  ;collate table
  2571                                  struc CC_COLLATE_TAB
  2572 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2573 00000002 <res 100h>              .ccCollate_data:	resb 256
  2574                                  endstruc
  2575                                  
  2576                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2577                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2578                                  
  2579                                  ; 06/08/2018
  2580                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2581                                  
  2582                                  ;CAPITALIZATION equates
  2583                                  CAP_ONE_CHAR	equ	20H
  2584                                  CAP_STRING	equ	21H
  2585                                  CAP_ASCIIZ	equ	22H
  2586                                  CHECK_YES_NO	equ	23H
  2587                                  UPPER_TABLE	equ	80H
  2588                                  
  2589                                  ;NLS_YES	equ	59H  ; 'Y'
  2590                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2591                                  ;NLS_NO		equ	4EH  ; 'N'	
  2592                                  ;NLS_no2	equ	6EH  ; 'n'	
  2593                                  
  2594                                  ;============================================================================
  2595                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2596                                  ;============================================================================
  2597                                  ; 25/04/2019 - Retro DOS v4.0
  2598                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2599                                  
  2600                                  ;BREAK <Current directory list structure>
  2601                                  
  2602                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2603                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2604                                  ;									   ;
  2605                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2606                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2607                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2608                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2609                                  ; of the disk being changed or if the path must be recracked.		   ;
  2610                                  ;
  2611                                  ;	Some pathnames have special preambles, such as
  2612                                  ;
  2613                                  ;		\\machine\sharename\...
  2614                                  ;	For these pathnames we can't allow ".." processing to back us
  2615                                  ;	up into the special front part of the name.  The CURDIR_END field
  2616                                  ;	holds the address of the seperator character which marks
  2617                                  ;	the split between the special preamble and the regular
  2618                                  ;	path list; ".." processing isn't allowed to back us up past
  2619                                  ;	(i.e., before) CURDIR_END
  2620                                  ;	For the root, it points at the leading /.  For net
  2621                                  ;	assignments it points at the end (nul) of the initial assignment:
  2622                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2623                                  ;	  ^		 ^		     ^
  2624                                  
  2625                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2626                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2627                                  
  2628                                  struc curdir	; curdir_list
  2629 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2630 00000043 ????                    .flags:		resw 1			; various flags
  2631 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2632 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2633 0000004D ????                    .user_word:	resw 1
  2634 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2635                                  ; MSDOS 6.0
  2636 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2637 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2638 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2639                                  .size:
  2640                                  endstruc
  2641                                  
  2642                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2643                                  
  2644                                  %define curdir_netID curdir_ID  ; dword
  2645                                  
  2646                                  ;**	Flag values for CURDIR_FLAGS
  2647                                  
  2648                                  curdir_isnet	EQU	1000000000000000B
  2649                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2650                                  curdir_inuse	EQU	0100000000000000B
  2651                                  curdir_splice	EQU	0010000000000000B
  2652                                  curdir_local	EQU	0001000000000000B
  2653                                  
  2654                                  ;									   ;
  2655                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2657                                  
  2658                                  ;============================================================================
  2659                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2660                                  ;============================================================================
  2661                                  ; 09/07/2018 - Retro DOS v3.0
  2662                                  
  2663                                  ;BREAK <File Control Block definition>
  2664                                  
  2665                                  ;
  2666                                  ; Field definition for FCBs
  2667                                  ; The FCB has the following structure:
  2668                                  ;
  2669                                  ;	+---------------------------+
  2670                                  ;	|   Drive indicator(byte)   |
  2671                                  ;	+---------------------------+
  2672                                  ;	|    Filename (8 chars)     |
  2673                                  ;	+---------------------------+
  2674                                  ;	|    Extension (3 chars)    |
  2675                                  ;	+---------------------------+
  2676                                  ;	|   Current Extent(word)    |
  2677                                  ;	+---------------------------+
  2678                                  ;	|    Record size (word)     |
  2679                                  ;	+---------------------------+
  2680                                  ;	|    File Size (2 words)    |
  2681                                  ;	+---------------------------+
  2682                                  ;	|	Date of write	    |
  2683                                  ;	+---------------------------+
  2684                                  ;	|	Time of write	    |
  2685                                  ;	+---------------------------+
  2686                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2687                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2688                                  ;									   ;
  2689                                  ;	+---------------------------+
  2690                                  ;	|   8 bytes reserved	    |
  2691                                  ;	+---------------------------+
  2692                                  ;									   ;
  2693                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2694                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2695                                  ;	|    next record number     |
  2696                                  ;	+---------------------------+
  2697                                  ;	|   random record number    |
  2698                                  ;	+---------------------------+
  2699                                  ;
  2700                                  
  2701                                  struc	SYS_FCB
  2702 00000000 ??                      .drive:	resb 1
  2703 00000001 ????????????????        .name:	resb 8
  2704 00000009 ??????                  .ext:	resb 3
  2705 0000000C ????                    .EXTENT: resw 1
  2706 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2707 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2708                                  				; following word
  2709 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2710 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2711 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2712                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2713                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2714                                  ;									   ;
  2715 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2716                                  ;									   ;
  2717                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2718                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2719 00000020 ??                      .NR:	resb 1			; Next record
  2720 00000021 ????????                .RR:	resb 4			; Random record
  2721                                  .size:
  2722                                  endstruc
  2723                                  
  2724                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2725                                  				; NEXT
  2726                                  ; 20/07/2018
  2727                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2728                                  
  2729                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2730                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2731                                  ; NOTE about this byte (fcb_nsl_drive)
  2732                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2733                                  ;	00 means a local file or device with sharing loaded
  2734                                  ;	10 means a remote (network) file
  2735                                  ;	01 means a local file with no sharing loaded
  2736                                  ;	11 means a local device with no sharing loaded
  2737                                  
  2738                                  ; 20/07/2018
  2739                                  
  2740                                  ;
  2741                                  ; Network FCB
  2742                                  ;
  2743                                  
  2744                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2745                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2746                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2747                                  
  2748                                  ;
  2749                                  ; No sharing local file FCB
  2750                                  ;
  2751                                  
  2752                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2753                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2754                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2755                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2756                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2757                                  
  2758                                  ;
  2759                                  ; No sharing local device FCB
  2760                                  ;
  2761                                  
  2762                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2763                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2764                                  
  2765                                  ;
  2766                                  ; Sharing local FCB
  2767                                  ;
  2768                                  
  2769                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2770                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2771                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2772                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2773                                  
  2774                                  ;
  2775                                  ; Bogusness:  the four cases are:
  2776                                  ;
  2777                                  ;   local file	    00
  2778                                  ;   local device    40
  2779                                  ;   local sharing   C0
  2780                                  ;   network	    80
  2781                                  ;
  2782                                  ; Since sharing and network collide, we cannot use a test instruction for
  2783                                  ; deciding whether a network or a share check in involved
  2784                                  ;
  2785                                  FCBDEVICE   EQU 040h
  2786                                  FCBNETWORK  EQU 080h
  2787                                  FCBSHARE    EQU 0C0h
  2788                                  
  2789                                  ; FCBSPECIAL must be able to mask off both net and share
  2790                                  FCBSPECIAL  EQU 080h
  2791                                  FCBMASK     EQU 0C0h
  2792                                  
  2793                                  ;============================================================================
  2794                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2795                                  ;============================================================================
  2796                                  ; 11/07/2018 - Retro DOS v3.0
  2797                                  ; 25/04/2019 - Retro DOS v4.0
  2798                                  
  2799                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2800 00000000 ??                      .dirpos:	resb 1
  2801 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2802                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2803 00000005 ????                    .clusnum:	resw 1
  2804 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2805 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2806                                  .size:
  2807                                  endstruc
  2808                                  
  2809                                  ; 23/07/2018
  2810                                  ;FASTOPEN NAME CACHING Subfunctions
  2811                                  FONC_Look_up	equ	1
  2812                                  FONC_insert	equ	2
  2813                                  FONC_delete	equ	3
  2814                                  FONC_update	equ	4
  2815                                  FONC_purge	equ	5	;reserved for the future use.
  2816                                  FONC_Rename	equ	6	;AN001
  2817                                  
  2818                                  ; 27/07/2018
  2819                                  ;FastOpen Data Structure
  2820                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2821 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2822 00000002 ????????                .name_caching:	resd 1
  2823                                  ; MSDOS 6.0
  2824                                  ;.fatchain_caching: resd 1	;reserved for future use
  2825                                  .size:
  2826                                  endstruc
  2827                                  
  2828                                  ; 27/07/2018
  2829                                  ;Equates used in DOS.
  2830                                  FastOpen_Set	       equ     00000001b
  2831                                  FastOpen_Reset	       equ     11111110b
  2832                                  Lookup_Success	       equ     00000010b
  2833                                  Lookup_Reset	       equ     11111101b
  2834                                  Special_Fill_Set       equ     00000100b
  2835                                  Special_Fill_Reset     equ     11111011b
  2836                                  No_Lookup	       equ     00001000b
  2837                                  Set_For_Search	       equ     00010000b	;DCR 167
  2838                                  
  2839                                  ; 09/08/2018 
  2840                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2841                                  ; Fastxxx equates
  2842                                  FastOpen_ID	   equ	   1
  2843                                  FastSeek_ID	   equ	   2
  2844                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2845                                  
  2846                                  ;Structure definitions
  2847                                  ;
  2848                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2849 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2850 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2851                                  endstruc
  2852                                  
  2853                                  ;============================================================================
  2854                                  ; LOCK.INC, MSDOS 6.0, 1991
  2855                                  ;============================================================================
  2856                                  ; 14/07/2018 - Retro DOS v3.0
  2857                                  
  2858                                  ;**	LOCK.INC - Definitions for Record Locking
  2859                                  
  2860                                  ;**	LOCK functions
  2861                                  
  2862                                  LOCK_ALL	    equ    0
  2863                                  UNLOCK_ALL	    equ    1
  2864                                  LOCK_MUL_RANGE	    equ    2
  2865                                  UNLOCK_MUL_RANGE    equ    3
  2866                                  LOCK_READ	    equ    4
  2867                                  WRITE_UNLOCK	    equ    5
  2868                                  LOCK_ADD	    equ    6
  2869                                  
  2870                                  ;**	Structure for Lock buffer
  2871                                  
  2872                                  struc LockBuf
  2873 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2874 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2875                                  endstruc
  2876                                  
  2877                                  ;============================================================================
  2878                                  ; DPL.ASM, MSDOS 6.0, 1991
  2879                                  ;============================================================================
  2880                                  ; 04/08/2018 - Retro DOS v3.0
  2881                                  
  2882                                  ; (SRVCALL.ASM)
  2883                                  
  2884                                  struc DPL
  2885 00000000 ????                    .AX:	resw	1	; AX register
  2886 00000002 ????                    .BX:	resw	1	; BX register
  2887 00000004 ????                    .CX:	resw	1	; CX register
  2888 00000006 ????                    .DX:	resw	1	; DX register
  2889 00000008 ????                    .SI:	resw	1	; SI register
  2890 0000000A ????                    .DI:	resw	1	; DI register
  2891 0000000C ????                    .DS:	resw	1	; DS register
  2892 0000000E ????                    .ES:	resw	1	; ES register
  2893 00000010 ????                    .rsrvd: resw	1	; Reserved
  2894 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2895 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2896                                  .size:
  2897                                  endstruc
  2898                                   
  2899                                  ;----------------------------------------------------------------------------
  2900                                  ; DOSDATA
  2901                                  ;----------------------------------------------------------------------------
  2902                                  ;============================================================================
  2903                                  ; 24/04/2019 - Retro DOS v4.0
  2904                                  
  2905                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2906                                  		; ((just after resident IO.SYS code&data))
  2907                                  
  2908                                  ;============================================================================
  2909                                  ; WIN386.INC, MSDOS 6.0, 1991
  2910                                  ;============================================================================
  2911                                  ; 24/04/2019 - Retro DOS 4.0
  2912                                  
  2913                                  ;
  2914                                  ;  Symbols and structures relating to WIN386 support.
  2915                                  ;
  2916                                  ;  Used by files in both the DOS and the BIOS.
  2917                                  ;
  2918                                  ;  Created: 7-13-89 by MRW
  2919                                  ;
  2920                                  
  2921                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2922                                  
  2923                                  MultWin386		equ     16h	; Int 2f multiplex number
  2924                                  
  2925                                  Win386_Init		equ	05h	; Win386 initialization
  2926                                  Win386_Exit		equ	06h	; Win386 exit
  2927                                  Win386_Devcall		equ	07h	; Win386 device call out
  2928                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2929                                  
  2930                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2931                                  ; answer call outs from the DOSMGR
  2932                                  
  2933                                  Win386_DOSMGR		equ	15H
  2934                                  
  2935                                  ; The following structures are used to communicate instance data to 
  2936                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2937                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2938                                  
  2939                                  struc Win386_SIS	; Startup Info Structure
  2940 00000000 ????                     .Version:		resb	2	; db 3, 0
  2941 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2942 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2943 0000000A ????????                 .Reference_Data:	resd	1
  2944 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2945                                  endstruc
  2946                                  
  2947                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2948                                  
  2949                                  struc Win386_IIS	; Instance Item Structure
  2950 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2951 00000004 ????                    .Size:			resw	1	; size of an instance item
  2952                                  endstruc
  2953                                  
  2954                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2955                                  
  2956                                  ;Win386 DOSMGR function return values to indicate operation done
  2957                                  
  2958                                  WIN_OP_DONE		equ	0B97Ch	; 
  2959                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2960                                  
  2961                                  ;M021
  2962                                  ; WInoldap callout multiplex number
  2963                                  
  2964                                  WINOLDAP		equ	46h	;
  2965                                  
  2966                                  ;============================================================================
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; DOSCODE
  2969                                  ;----------------------------------------------------------------------------
  2970                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2971                                  
  2972                                  ;============================================================================
  2973                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2974                                  ;============================================================================
  2975                                  ; 16/07/2018 - Retro DOS 3.0
  2976                                  ;----------------------------------------------------------------------------
  2977                                  ; 24/04/2019 - Retro DOS 4.0
  2978                                  
  2979                                  ; MSDOS 6.0
  2980                                  ;----------------------------------------------------------------------------
  2981                                  ; FILE : ORIGIN.INC
  2982                                  ;----------------------------------------------------------------------------
  2983                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2984                                  ; is used for ORGing the DOS code.
  2985                                  ;
  2986                                  ; Brief Description of the necessacity of this ORG:
  2987                                  ; -------------------------------------------------
  2988                                  ;
  2989                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2990                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2991                                  ; This means programs running out off the HMA must use non-zero offset base
  2992                                  ; addresses. It also means that if we're running multiple programs from the
  2993                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2994                                  ; HMA segments that precede it.
  2995                                  ; 
  2996                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2997                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2998                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2999                                  ; selecting segment values between f124h and ffffh it could be located 
  3000                                  ; anywhere in the HMA. The problem with this is that programs with such 
  3001                                  ; high ORGs would not be able to run in low RAM.
  3002                                  ;
  3003                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  3004                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  3005                                  ; the following solution has been implemented:
  3006                                  ;
  3007                                  ; The Bios Code segment will have a very small offset and run at the very
  3008                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  3009                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  3010                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  3011                                  ; possible physical address at which DOS code will run, while still providing
  3012                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  3013                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  3014                                  ; mostly true.
  3015                                  ;
  3016                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3017                                  ; putting this value after the first jmp instruction in the DOS code in
  3018                                  ; mshead.asm. 
  3019                                  ;
  3020                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3021                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3022                                  ;
  3023                                  ; Revision History:
  3024                                  ;
  3025                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3026                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3027                                  ;
  3028                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3029                                  ; A utility called getsize will obtain the corresponding values from msdos
  3030                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3031                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3032                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3033                                  ; dependant on that.				  --- Apr 3 '90
  3034                                  ;
  3035                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3036                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3037                                  ; so the offset will not need to be included at the beginning of the code
  3038                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3039                                  ; at offset zero within the segment.
  3040                                  ; 
  3041                                  ;
  3042                                  ;--------------------------------------------------------------------------
  3043                                  
  3044                                  BIODATASTART	EQU	00700h
  3045                                  ;include	bdsize.inc	; this sets the values:
  3046                                  				;	BIODATASIZ
  3047                                  				;	BIOCODESIZ
  3048                                  				;	DOSDATASIZ
  3049                                  
  3050                                  ; 05/12/2022
  3051                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3052                                  			; 0900h for MSDOS 5.0 IO.SYS
  3053                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3054                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3055                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3056                                  			; 1370h for MSDOS 5.0 IO.SYS
  3057                                  ;ifndef ROMDOS
  3058                                  ;
  3059                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3060                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3061                                  ;
  3062                                  ;else
  3063                                  ;
  3064                                  ;BYTSTART	EQU	0
  3065                                  ;PARASTART	EQU	0
  3066                                  ;
  3067                                  ;endif ; ROMDOS
  3068                                  
  3069                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3070                                  ; -----------------------------------------------------------------
  3071                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3072                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3073                                  ;DOSDATASIZE equ MSDAT001E
  3074                                  ; 05/12/2022
  3075                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3076                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3077                                  			    ; of DOSDATA (in low memory) while
  3078                                  			    ; dos/kernel code starts just after 
  3079                                  			    ; this data block ((org = DOSDATASIZE))
  3080                                  			    ; (in low memory or in HMA)	
  3081                                  ; -----------------------------------------------------------------
  3082                                  
  3083                                  ; 04/11/2022	
  3084                                  ; -----------------------------------------------------------------	
  3085                                  ; NOTE:
  3086                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3087                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3088                                  ; -----------------------------------------------------------------
  3089                                  
  3090                                  ; ----------------------------------------------------------------------------
  3091                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3092                                  ; ----------------------------------------------------------------------------
  3093                                  
  3094                                  ;segment .code vstart=3DD0h ; 06/12/2022
  3095                                  ; 29/09/2023
  3096                                  segment .code vstart=3DE0h ; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
  3097                                  								
  3098                                  ; ============================================================================
  3099                                  
  3100                                  
  3101                                  ;[ORG 3DE0h]
  3102                                  
  3103                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3104                                  
  3105                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3106                                  
  3107                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3108                                  	;PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3109                                  			     ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3110                                  	
  3111                                  	; 29/09/2023 
  3112                                  	; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3113                                  	PARASTART equ 3DE0h	; (MSDOS 6.22 MSDOS.SYS)
  3114                                  
  3115                                  	[ORG PARASTART]	
  3116                                  
  3117                                  _$STARTCODE:
  3118                                  
  3119                                  ;PARASTART:
  3120 00000000 E9A875                          JMP     DOSINIT
  3121                                  
  3122                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3123                                  	; 04/11/2022
  3124 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3125                                  
  3126                                  BioDataSeg:
  3127 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3128                                  
  3129                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3130                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3131                                  ; allows getting the DOS data segment without going through the 
  3132                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3133                                  
  3134                                  DosDSeg:
  3135 00000007 0000                    	dw	0
  3136                                  	
  3137                                  ;============================================================================
  3138                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3139                                  ;============================================================================
  3140                                  ; 16/07/2018 - Retro DOS 3.0
  3141                                  ; 29/04/2019 - Retro DOS 4.0
  3142                                  
  3143                                  	; (MSDOS version)
  3144                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3145                                  	;db	6
  3146                                  	;db	20
  3147                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3148                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3149                                  	;db	5
  3150                                  	;db	0	
  3151                                  
  3152                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3153                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3154 00000009 06                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3155 0000000A 16                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3156                                  
  3157                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3158                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3159                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3160                                  
  3161                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3162                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3163                                  ;
  3164                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3165                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3166                                  
  3167                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3168                                  ; those error codes which are "allowed" for each system call. If the error
  3169                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3170                                  ; is to return the "real" error via Extended error, and one of the allowed
  3171                                  ; errors on the actual call.
  3172                                  ;
  3173                                  ; The table is organized as follows:
  3174                                  ;
  3175                                  ;    Each entry in the table is of variable size, but the first
  3176                                  ;       two bytes are always:
  3177                                  ;
  3178                                  ;       Call#,Cnt of bytes following this byte
  3179                                  ;
  3180                                  ; EXAMPLE:
  3181                                  ;       Call 61 (OPEN)
  3182                                  ;
  3183                                  ;       DB      61,5,12,3,2,4,5
  3184                                  ;
  3185                                  ;       61 is the AH INT 21 call value for OPEN.
  3186                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3187                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3188                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3189                                  ;       this case 5).  The last value will be the one returned on the call if
  3190                                  ;       the "real" error is not one of the allowed ones.
  3191                                  ;
  3192                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3193                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3194                                  ;   call, so set up an Extended error and leave the current error code alone.
  3195                                  ;
  3196                                  ; The table is terminated by a call value of 0FFh
  3197                                  
  3198                                  ;PUBLIC I21_MAP_E_TAB
  3199                                  	; 10/08/2018
  3200                                  
  3201                                  ; 29/04/2019
  3202                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3203                                  ; 04/11/2022
  3204                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3205                                  
  3206                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3207 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3208 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3209 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3210 00000018 0205                        DB          error_file_not_found,error_access_denied
  3211 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3212 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3213 00000022 04                          DB          error_too_many_open_files
  3214 00000023 05                          DB          error_access_denied
  3215                                      ; MSDOS 6.0
  3216 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3217 00000029 04                          DB          error_too_many_open_files
  3218 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3219                                      ; MSDOS 3.3
  3220                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3221                                      ;DB		error_too_many_open_files,error_access_denied
  3222 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3223 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3224 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3225 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3226 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3227 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3228 00000045 05                          DB          error_access_denied
  3229 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3230 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3231 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3232 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3233                                      ; MSDOS 6.0	
  3234 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3235                                      ; MSDOS 3.3	
  3236                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3237 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3238 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3239 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3240 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3241 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3242 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3243 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3244 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3245                                      ; MSDOS 6.0
  3246 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3247 0000007D 1005                        DB		error_current_directory,error_access_denied
  3248                                      ; MSDOS 3.3
  3249                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3250                                      ;DB		error_access_denied
  3251                                      ; MSDOS 6.0	
  3252 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3253 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3254                                      ; MSDOS 3.3	
  3255                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3256 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3257 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3258 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3259 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3260 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3261 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3262 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3263 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3264 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3265 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3266 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3267 000000AA 01                          DB              error_invalid_function
  3268                                      ; MSDOS 6.0		
  3269 000000AB 6C0A                        DB	ExtOpen,10
  3270 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3271 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3272 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3273 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3274 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3275 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3276 000000BD FF                          DB  0FFh
  3277                                  
  3278                                  ;19/09/2023
  3279                                  ;22/12/2022
  3280                                  ;04/11/2022	
  3281                                  ;29/04/2019 - Retro DOS v4.0
  3282                                  ;============================================================================
  3283                                  ; 	Retro DOS v4.0
  3284                                  ;============================================================================
  3285 000000BE 00                      	db 	0
  3286                                  RETRODOSMSG:
  3287 000000BF 0D0A                    	db	13,10
  3288                                  	;;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3289                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3290                                  	;;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3291                                  	;;db	"Retro DOS v4.2 by Erdogan Tan [2022]"	; 30/12/2022
  3292                                  	;db	"Retro DOS v4.2 by Erdogan Tan [2023]"
  3293 000000C1 526574726F20444F53-     	db	"Retro DOS v4.2 by Erdogan Tan [2024]"	; 05/01/2024
  3293 000000CA 2076342E3220627920-
  3293 000000D3 4572646F67616E2054-
  3293 000000DC 616E205B323032345D 
  3294 000000E5 0D0A2400                	db	13,10,"$", 0 
  3295                                  
  3296                                  ;============================================================================
  3297                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3298                                  ;============================================================================
  3299                                  ; 11/07/2018 - Retro DOS v3.0
  3300                                  
  3301                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3302 000000E9 90                      align 2
  3303                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3304                                  
  3305                                  ; Standard Functions
  3306                                  ;DISPATCH  LABEL WORD
  3307                                  DISPATCH:
  3308                                  	; 16/07/2018 - Retro DOS v3.0
  3309                                  	; (MSDOS 3.3)
  3310                                  
  3311                                  ; 29/04/2019
  3312                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3313                                  
  3314                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3315                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3316                                  
  3317 000000EA [DD60]                          short_addr  _$ABORT			    ;  0      0
  3318 000000EC [3C16]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3319 000000EE [4516]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3320 000000F0 [F716]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3321 000000F2 [1217]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3322 000000F4 [1817]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3323 000000F6 [8315]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3324 000000F8 [AF15]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3325 000000FA [5D13]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3326 000000FC [B613]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3327 000000FE [C213]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3328 00000100 [2C17]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3329 00000102 [3617]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3330 00000104 [810F]                          short_addr  _$DISK_RESET		    ; 13      D
  3331 00000106 [680E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3332 00000108 [051E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3333 0000010A [D517]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3334 0000010C [F41E]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3335 0000010E [3A1F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3336 00000110 [7B17]                          short_addr  _$FCB_DELETE		    ; 19     13
  3337 00000112 [5C1C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3338 00000114 [601C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3339 00000116 [E41E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3340 00000118 [4118]                          short_addr  _$FCB_RENAME		    ; 23     17
  3341                                  	; 16/07/2018
  3342                                          ;short_addr _CPMFUNC			    ; 24     18	
  3343 0000011A [5306]                          short_addr  NO_OP			    ; 24     18
  3344 0000011C [630E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3345 0000011E [580E]                          short_addr  _$SET_DMA			    ; 26     1A
  3346                                  
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3349                                  ;                                                                          ;
  3350 00000120 [100F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3351 00000122 [120F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3352                                  ;                                                                          ;
  3353                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3354                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3355                                  
  3356                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3357                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3358                                  
  3359                                  ; 08/07/2018 - Retro DOS v3.0
  3360                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3361                                  
  3362 00000124 [5306]                  	short_addr  NO_OP			    ; 29     1D
  3363 00000126 [5306]                  	short_addr  NO_OP			    ; 30     1E
  3364                                  
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000128 [510F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372                                          ;short_addr _CPMFUNC			    ; 32     20
  3373                                  
  3374                                  ; 08/07/2018 - Retro DOS v3.0
  3375                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3376                                  
  3377 0000012A [5306]                  	short_addr  NO_OP			    ; 32     20
  3378                                  
  3379 0000012C [641C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3380 0000012E [681C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3381 00000130 [8D17]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3382 00000132 [6317]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3383                                  
  3384                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3385                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3386                                  
  3387                                  ; Extended Functions
  3388 00000134 [890E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3389                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;                                                                          ;
  3392 00000136 [8E10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3393                                  ;                                                                          ;
  3394                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3395                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3396 00000138 [581C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3397 0000013A [541C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3398 0000013C [050F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3399 0000013E [5E0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3400 00000140 [7B0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3401 00000142 [9A0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3402 00000144 [AB0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3403 00000146 [490C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3404                                  
  3405                                  ; Extended functionality group
  3406 00000148 [450E]                          short_addr  _$GET_DMA                       ; 47     2F
  3407 0000014A [200C]                          short_addr  _$GET_VERSION                   ; 48     30
  3408 0000014C [8160]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3409                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3410                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3411                                  ;                                                                          ;
  3412 0000014E [530F]                          short_addr  _$GET_DPB			    ; 50     32
  3413                                  ;                                                                          ;
  3414                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3416 00000150 [6702]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3417 00000152 [3B0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3418 00000154 [7A0E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3419 00000156 [220E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3420 00000158 [B60E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3421 0000015A [500C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3422                                  ; XENIX CALLS
  3423                                  ;   Directory Group
  3424 0000015C [C021]                          short_addr  _$MKDIR			    ; 57     39
  3425 0000015E [0C21]                          short_addr  _$RMDIR			    ; 58     3A
  3426 00000160 [4721]                          short_addr  _$CHDIR			    ; 59     3B
  3427                                  ;   File Group
  3428 00000162 [9F6E]                          short_addr  _$CREAT			    ; 60     3C
  3429 00000164 [C86D]                          short_addr  _$OPEN			    ; 61     3D
  3430 00000166 [F965]                          short_addr  _$CLOSE		 	    ; 62     3E
  3431 00000168 [0A67]                          short_addr  _$READ			    ; 63     3F
  3432 0000016A [7067]                          short_addr  _$WRITE			    ; 64     40
  3433 0000016C [EF6E]                          short_addr  _$UNLINK			    ; 65     41
  3434 0000016E [7567]                          short_addr  _$LSEEK			    ; 66     42
  3435 00000170 [AC6E]                          short_addr  _$CHMOD			    ; 67     43
  3436 00000172 [2122]                          short_addr  _$IOCTL			    ; 68     44
  3437 00000174 [2A68]                          short_addr  _$DUP			    ; 69     45
  3438 00000176 [4868]                          short_addr  _$DUP2			    ; 70     46
  3439 00000178 [A820]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3440                                  ;   Memory Group
  3441 0000017A [7461]                          short_addr  _$ALLOC			    ; 72     48
  3442 0000017C [EE62]                          short_addr  _$DEALLOC                       ; 73     49
  3443 0000017E [CA62]                          short_addr  _$SETBLOCK                      ; 74     4A
  3444                                  ;   Process Group
  3445 00000180 [5B5A]                          short_addr  _$EXEC			    ; 75     4B
  3446 00000182 [B960]                          short_addr  _$EXIT			    ; 76     4C
  3447 00000184 [515A]                          short_addr  _$WAIT			    ; 77     4D
  3448 00000186 [F21F]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3449                                  ;   Special Group
  3450 00000188 [4620]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3451                                  ; SPECIAL SYSTEM GROUP
  3452                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3453                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3454                                  ;                                                                          ;
  3455 0000018A [B902]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3456 0000018C [C502]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3457 0000018E [470F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3458 00000190 [B60F]                          short_addr  _$SETDPB			    ; 83     53
  3459                                  ;                                                                          ;
  3460                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3461                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3462 00000192 [440C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3463                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3464                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3465                                  ;                                                                          ;
  3466 00000194 [7D10]                          short_addr  _$DUP_PDB                       ; 85     55
  3467                                  ;                                                                          ;
  3468                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470 00000196 [156F]                          short_addr  _$RENAME			    ; 86     56
  3471 00000198 [DC67]                          short_addr  _$FILE_TIMES                    ; 87     57
  3472 0000019A [2363]                          short_addr  _$ALLOCOPER                     ; 88     58
  3473                                  
  3474                                  ; 08/07/2018 - Retro DOS v3.0
  3475                                  ; -------------------------------------------------------------------------;
  3476                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3477                                  
  3478                                  ; Network extention system calls
  3479 0000019C [CA0E]                          short_addr  _$GetExtendedError              ; 89     59
  3480 0000019E [A06F]                          short_addr  _$CreateTempFile                ; 90     5A
  3481 000001A0 [886F]                          short_addr  _$CreateNewFile                 ; 91     5B
  3482 000001A2 [8171]                          short_addr  _$LockOper                      ; 92     5C
  3483 000001A4 [0964]                          short_addr  _$ServerCall                    ; 93     5D
  3484 000001A6 [1269]                          short_addr  _$UserOper                      ; 94     5E
  3485 000001A8 [7768]                          short_addr  _$AssignOper                    ; 95     5F
  3486 000001AA [636D]                          short_addr  _$NameTrans                     ; 96     60
  3487 000001AC [5306]                  	short_addr  NO_OP			    ; 97     61
  3488 000001AE [C502]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3489                                  ; the next call is reserved for hangool sys call
  3490                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3491 000001B0 [EA0E]                  	short_addr  _$ECS_Call			    ; 99     63
  3492                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496 000001B2 [D102]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3497                                  ;                                                                          ;
  3498                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3499                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3500 000001B4 [D30C]                          short_addr  _$GetExtCntry                   ; 101    65
  3501 000001B6 [D00D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3502 000001B8 [4666]                          short_addr  _$ExtHandle                     ; 103    67
  3503 000001BA [2C66]                          short_addr  _$COMMIT                        ; 104    68
  3504                                  
  3505                                  ; 08/07/2018
  3506                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3507                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3508                                  
  3509                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3510 000001BC [8011]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3511 000001BE [2C66]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3512 000001C0 [5306]                  	short_addr  NO_OP                           ; 107    6B   
  3513                                  						    ; IFS_IOCTL no longer 
  3514                                  						    ; supported
  3515 000001C2 [3670]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3516                                  
  3517                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3518                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3519                                  ;                                                                          ;
  3520                                  ;ifdef ROMEXEC
  3521                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3522                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3523                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3524                                  ;endif
  3525                                  ;                                                                          ;
  3526                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3527                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3528                                  
  3529                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3530                                  
  3531                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3532                                  
  3533                                  ; 08/07/2018 - Retro DOS v3.0
  3534                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3535                                  
  3536                                  ;	If 	Installed
  3537                                  
  3538                                  align 2
  3539                                  
  3540                                  ;PUBLIC FOO
  3541                                  
  3542                                  FOO:	; LABEL WORD
  3543 000001C4 [1007]                          short_addr  Leave2F
  3544                                  
  3545 000001C6 [C801]                  DTab:	DW  DOSTable
  3546                                  
  3547                                  	;PUBLIC FOO,DTAB
  3548                                  
  3549                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3550                                  
  3551                                  ; 29/04/2019
  3552                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3553                                  
  3554                                  
  3555                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3556                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3557                                         
  3558                                  DOSTable:  ; LABEL  WORD
  3559 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3560 000001C9 [3509]                          short_addr  DOSInstall          ;   0 install check
  3561 000001CB [AE2E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3562 000001CD [AB0E]                          short_addr  RECSET              ;   2   RECSET
  3563 000001CF [2F09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3564 000001D1 [8C4F]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3565 000001D3 [4716]                          short_addr  OUTT                ;   5   OUT
  3566 000001D5 [5E52]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3567 000001D7 [DB57]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3568 000001D9 [A32F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3569 000001DB [A059]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3570 000001DD [3572]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3571 000001DF [FA2B]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3572 000001E1 [E42B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3573 000001E3 [E60A]                          short_addr  DATE16              ;   13  DATE16
  3574 000001E5 [EC11]                          short_addr  Idle		;   14      empty slot
  3575 000001E7 [D457]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3576 000001E9 [EC11]                          short_addr  Idle		;   16      empty slot
  3577 000001EB [B911]                          short_addr  StrCpy              ;   17  StrCpy
  3578 000001ED [D111]                          short_addr  StrLen              ;   18  StrLen
  3579 000001EF [374F]                          short_addr  UCase		;   19  UCase
  3580 000001F1 [1858]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3581 000001F3 [7759]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3582 000001F5 [7465]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3583 000001F7 [D769]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3584 000001F9 [8104]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3585 000001FB [8269]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3586 000001FD [886D]                          short_addr  DriveFromText       ;   26  DriveFromText
  3587 000001FF [870B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3588 00000201 [160C]                          short_addr  DSUM                ;   28  DSUM
  3589 00000203 [7D0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3590 00000205 [9711]                          short_addr  StrCmp              ;   30  StrCmp
  3591 00000207 [C568]                          short_addr  InitCDS             ;   31  initcds
  3592 00000209 [4165]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3593 0000020B [636D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3594 0000020D [7A06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3595 0000020F [DA40]                          short_addr  DEVNAME             ;   35  DEVNAME
  3596 00000211 [EC11]                          short_addr  Idle                ;   36  Idle
  3597 00000213 [DF11]                          short_addr  DStrLen             ;   37  DStrLen
  3598 00000215 [8E12]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3599 00000217 [F965]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3600 00000219 [9412]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3601 0000021B [0A67]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3602 0000021D [5012]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3603 0000021F [D112]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3604 00000221 [C012]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3605 00000223 [EE12]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3606                                          
  3607                                  	; 29/04/2019 - Retro DOS v4.0
  3608 00000225 [F212]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3609                                  
  3610 00000227 [5306]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3611                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3612                                  
  3613                                  DOSTableEnd:  ; LABEL BYTE
  3614                                  
  3615                                  	;ENDIF
  3616                                  
  3617                                  ; ----------------------------------------------------------------------------
  3618                                  ; BREAK   <Copyright notice and version>
  3619                                  ; ----------------------------------------------------------------------------
  3620                                  
  3621                                  ;CODSTRT EQU	$
  3622                                  
  3623                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3624                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3625                                  
  3626                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3627                                  ;       module. The reason is so that the data alignments are the same in
  3628                                  ;       IBM-DOS and MS-DOS up through header.
  3629                                  
  3630                                  	;PUBLIC	HEADER
  3631                                  
  3632                                  HEADER:	; LABEL	BYTE
  3633                                          ;IF	DEBUG
  3634                                          ;DB	13,10,"Debugging DOS version "
  3635                                          ;DB	MAJOR_VERSION + "0"
  3636                                          ;DB	"."
  3637                                          ;DB	(MINOR_VERSION / 10) + "0"
  3638                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3639                                          ;ENDIF
  3640                                  
  3641                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3642                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3643                                  %if 0
  3644                                          ;IF	NOT IBM
  3645                                          DB	13,10,"MS-DOS version "
  3646                                          DB	MAJOR_VERSION + "0"
  3647                                          DB	"."
  3648                                          DB	(MINOR_VERSION / 10) + "0"
  3649                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3650                                          DB	(MINOR_VERSION % 10) + "0"
  3651                                  
  3652                                          ;IF	HIGHMEM
  3653                                          ;DB	"H"
  3654                                          ;ENDIF
  3655                                  
  3656                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3657                                  	; 30/04/2019 - Retro DOS v4.0
  3658                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3659                                  
  3660                                  	;ENDIF
  3661                                  
  3662                                  %endif
  3663                                  
  3664                                  ;IF DEBUG
  3665                                  ;	DB	13,10,"$"
  3666                                  ;ENDIF
  3667                                  
  3668                                  ;include copyrigh.inc
  3669                                  
  3670                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3671                                  
  3672                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3673                                  	;DB	"Licensed Material - Property of Microsoft "
  3674                                  	;DB	"All rights reserved "
  3675                                  
  3676                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3677                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3678                                  
  3679                                  ; 28/12/2022 - Retro DOS v4.1
  3680                                  %if 0
  3681                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3682                                  ms_copyright:
  3683                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3684                                  	db	'Licensed Material - Property of Microsoft '
  3685                                  	db	'All rights reserved '
  3686                                  
  3687                                  %endif
  3688                                  	;; 28/12/2022 - Retro DOS v4.1
  3689                                  ;ms_copyright:	
  3690                                    	;db	13,10,"MS DOS Version 5.0"
  3691                                  	;db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3692                                  
  3693                                  ;	; 21/09/2023 - Retro DOS v4.2 MSDOS.SYS
  3694                                  ;	; (MSDOS 6.22 MSDOS.SYS - DOSCODE:3FDDh (File offset: 509))
  3695                                  ;ms_copyright:
  3696                                  ;	db 'MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp '
  3697                                  ;	db 'Licensed Material - Property of Microsoft All rights reserved '
  3698                                  
  3699                                  	; 20/09/2023 - Retro DOS v4.2
  3700                                  ms_copyright:	
  3701 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 6.22"
  3701 00000232 56657273696F6E2036-
  3701 0000023B 2E3232             
  3702 0000023E 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1994 Microsoft Corp.",13,10,"$",0	
  3702 00000247 687420313938312D31-
  3702 00000250 393934204D6963726F-
  3702 00000259 736F667420436F7270-
  3702 00000262 2E0D0A2400         
  3703                                  
  3704                                  ;============================================================================
  3705                                  ; MSCODE.ASM
  3706                                  ;============================================================================
  3707                                  
  3708                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3709                                  ; 03/03/2018
  3710                                  
  3711                                  ;
  3712                                  ; MSCODE.ASM -- MSDOS code
  3713                                  ;
  3714                                  
  3715                                  ;INCLUDE DOSSEG.ASM
  3716                                  ;INCLUDE STDSW.ASM
  3717                                  
  3718                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3719                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3720                                  
  3721                                  ;.xcref
  3722                                  ;INCLUDE DOSSYM.ASM
  3723                                  ;INCLUDE DEVSYM.ASM
  3724                                  ;.cref
  3725                                  ;.list
  3726                                  
  3727                                  ;IFNDEF  KANJI
  3728                                  ;KANJI   EQU     0       ; FALSE
  3729                                  ;ENDIF
  3730                                  
  3731                                  ;IFNDEF  IBM
  3732                                  ;IBM     EQU     0
  3733                                  ;ENDIF
  3734                                  
  3735                                  ;IFNDEF  HIGHMEM
  3736                                  ;HIGHMEM  EQU     0
  3737                                  ;ENDIF
  3738                                  
  3739                                          ;i_need  USER_SP,WORD
  3740                                          ;i_need  USER_SS,WORD
  3741                                          ;i_need  SAVEDS,WORD
  3742                                          ;i_need  SAVEBX,WORD
  3743                                          ;i_need  INDOS,BYTE
  3744                                          ;i_need  NSP,WORD
  3745                                          ;i_need  NSS,WORD
  3746                                          ;i_need  CURRENTPDB,WORD
  3747                                          ;i_need  AUXSTACK,BYTE
  3748                                          ;i_need  CONSWAP,BYTE
  3749                                          ;i_need  IDLEINT,BYTE
  3750                                          ;i_need  NOSETDIR,BYTE
  3751                                          ;i_need  ERRORMODE,BYTE
  3752                                          ;i_need  IOSTACK,BYTE
  3753                                          ;i_need  WPERR,BYTE
  3754                                          ;i_need  DSKSTACK,BYTE
  3755                                          ;i_need  CNTCFLAG,BYTE
  3756                                          ;i_need  LEAVEADDR,WORD
  3757                                          ;i_need  NULLDEVPT,DWORD
  3758                                  
  3759                                          ;IF NOT IBM
  3760                                          ;i_need  OEM_HANDLER,DWORD
  3761                                          ;ENDIF
  3762                                  
  3763                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3764                                  
  3765                                  ;============================================================================
  3766                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3767                                  ;============================================================================
  3768                                  ; 11/07/2018 - Retro DOS v3.0
  3769                                  ; 01/05/2019 - Retro DOS v4.0
  3770                                  
  3771                                  ; DosCode SEGMENT
  3772                                  
  3773                                  ; ==========================================================================
  3774                                  ;
  3775                                  ; $Set_CTRL_C_Trapping
  3776                                  ;
  3777                                  ; Function:
  3778                                  ;	Enable disable ^C checking in dispatcher
  3779                                  ;
  3780                                  ; Inputs:
  3781                                  ;		AL = 0 read ^C status
  3782                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3783                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3784                                  ;		AL = 5 get DOS boot drive
  3785                                  ;		AL = 6 Get version number
  3786                                  ;			RETURNS:
  3787                                  ;				BH = Minor version number
  3788                                  ;				BL = Major version number
  3789                                  ;				DL = DOS internal revision
  3790                                  ;				DH = DOS type flags
  3791                                  ;					Bit 3 	- DOS in ROM
  3792                                  ;					Bit 4 	- DOS in HMA
  3793                                  ;					Bit 0-2, 5-7 - Reserved
  3794                                  ; Outputs:
  3795                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3796                                  ;
  3797                                  ; History:
  3798                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3799                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3800                                  ; ==========================================================================
  3801                                  
  3802                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3803                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3804                                  
  3805                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3806                                  ; DOSCODE:4052h (MSDOS 6.21, MSDOS.SYS)
  3807                                  ; DOSCODE:4052h (MSDOS 6.22, MSDOS.SYS)
  3808                                  ; DOSCODE:4123h (PCDOS 7.1, IBMDOS.COM)
  3809                                  
  3810                                  _$SET_CTRL_C_TRAPPING:
  3811                                  	; 01/05/2019 - Retro DOS v4.0
  3812                                  
  3813 00000267 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3814 00000269 7603                    	jbe	short scct_1		; If yes continue processing
  3815                                  
  3816 0000026B B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3817 0000026D CF                      	iret
  3818                                  scct_1:
  3819 0000026E 1E                      	push	DS
  3820                                  
  3821                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3822 0000026F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3823                                  	
  3824 00000274 50                      	push	AX			; DL only register that can change
  3825 00000275 56                      	push	SI
  3826                                  
  3827 00000276 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3828 00000279 30E4                    	xor	AH,AH			; Clear high byte of AX
  3829 0000027B 09C0                    	or	AX,AX			; Check for subfunction 0
  3830 0000027D 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3831                                  
  3832 0000027F 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3833 00000281 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3834                                  scct_2:
  3835 00000283 48                      	dec	AX			; Now dec AX and see if it was 1
  3836 00000284 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3837                                  
  3838 00000286 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3839 00000289 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3840 0000028B EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3841                                  scct_3:
  3842 0000028D 48                      	dec	AX			; Dec AX again to see if it was 2
  3843 0000028E 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3844                                  
  3845 00000290 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3846 00000293 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3847 00000295 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3848                                  scct_4:
  3849 00000297 3C03                    	cmp	al,3 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3850                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3851 00000299 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3852 0000029B 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3853 0000029F EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3854                                  scct_5:
  3855 000002A1 3C04                    	cmp	al,4 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3856                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3857 000002A3 750E                    	jne	short scct_9s		; If not equal then not get version
  3858                                  	
  3859                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3860                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3861 000002A5 BB0616                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3862                                  	
  3863                                  	;mov	dl,0
  3864                                  	;mov	DL,DOSREVNM ; 0
  3865                                  
  3866                                  	;xor	dh,dh			; assume vanilla DOS
  3867                                  	; 01/01/2024
  3868 000002A8 BA0000                  	mov	dx,0
  3869 000002AB 3836[F211]              	cmp	byte [DosHasHMA],dh ; 0
  3870                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3871                                  	;je	short @F
  3872 000002AF 7402                    	je	short scct_6
  3873                                  	; 01/01/2024
  3874 000002B1 B610                    	mov	dh,10h
  3875                                  	;or	dh,10h
  3876                                  	;;or	DH,DOSINHMA ; 10h
  3877                                  ;@@:
  3878                                  scct_6:
  3879                                  
  3880                                  ;ifdef ROMDOS
  3881                                  ;	or	DH,DOSINROM ; 08h
  3882                                  ;endif ; ROMDOS
  3883                                  
  3884                                  scct_9s:
  3885 000002B3 5E                      	pop	SI
  3886 000002B4 58                      	pop	AX
  3887 000002B5 1F                      	pop	DS
  3888                                  scct_9f:
  3889 000002B6 CF                      	iret
  3890                                  
  3891                                  SetCtrlShortEntry:			; This allows a conditional entry
  3892                                  					; from main dispatch code
  3893 000002B7 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3894                                  
  3895                                  ; ==========================================================================
  3896                                  ;									   
  3897                                  ; The following two routines are dispatched to directly with ints disabled
  3898                                  ; immediately after the int 21h entry.	no DIS state is set.
  3899                                  ;
  3900                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3901                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3902                                  ;
  3903                                  ; ==========================================================================
  3904                                  
  3905                                  _$SET_CURRENT_PDB:
  3906 000002B9 1E                      	push	DS
  3907                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3908 000002BA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3909 000002BF 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3910 000002C3 1F                      	pop	DS
  3911 000002C4 CF                      	iret
  3912                                  
  3913                                  ; ==========================================================================
  3914                                  ;
  3915                                  ; $get_current_PDB returns in BX the current process
  3916                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3917                                  ;
  3918                                  ; ==========================================================================
  3919                                  
  3920                                  _$GET_CURRENT_PDB:
  3921 000002C5 1E                      	push	DS
  3922                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3923 000002C6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3924 000002CB 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3925 000002CF 1F                      	pop	DS
  3926 000002D0 CF                      	iret
  3927                                  
  3928                                  ; ==========================================================================
  3929                                  ;
  3930                                  ; Sets the Printer Flag to whatever is in AL.
  3931                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3932                                  ;
  3933                                  ; ==========================================================================
  3934                                  
  3935                                  _$SET_PRINTER_FLAG:
  3936 000002D1 1E                      	push	ds
  3937                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3938 000002D2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3939 000002D7 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3940 000002DA 1F                      	pop	ds
  3941 000002DB CF                      	iret
  3942                                  
  3943                                  ; 01/05/2019 - Retro DOS v4.0
  3944                                  ; 08/07/2018 - Retro DOS v3.0
  3945                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3946                                  
  3947                                  ; ----------------------------------------------------------------------------
  3948                                  ; BREAK   <System call entry points and dispatcher>
  3949                                  ; ----------------------------------------------------------------------------
  3950                                  
  3951                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3952                                  
  3953                                  ; ==========================================================================
  3954                                  ;
  3955                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3956                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3957                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3958                                  ;
  3959                                  ; ==========================================================================
  3960                                  
  3961                                  SYSTEM_CALL:    ; PROC NEAR
  3962                                  
  3963                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3964                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3965                                  
  3966                                  ;entry	QUIT				
  3967                                  QUIT:				; INT 20H entry point	
  3968                                  	;MOV	AH,0
  3969 000002DC 30E4                    	xor	ah,ah ; 08/07/2018
  3970 000002DE EB36                    	JMP     SHORT SAVREGS
  3971                                  
  3972                                  ; ---------------------------------------------------------------------------
  3973                                  
  3974                                  	; The system call in AH is out of the range that we know how
  3975                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3976                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3977                                  	; error as this may break some programs compatability.
  3978                                  
  3979                                  BADCALL:
  3980                                          ;MOV	AL,0
  3981 000002E0 30C0                    	xor	al,al ; 08/07/2018
  3982                                  IRETT:	; 06/05/2019
  3983                                  _IRET:
  3984 000002E2 CF                              IRET
  3985                                  
  3986                                  ; ---------------------------------------------------------------------------
  3987                                  
  3988                                  ; 01/05/2019 - Retro DOS v4.0
  3989                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3990                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3991                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3992                                  
  3993                                  	; An alternative method of entering the system is to perform a
  3994                                  	; CALL 5 in the program segment prefix with the contents of CL
  3995                                  	; indicating what system call the user would like. A subset of
  3996                                  	; the possible system calls is allowed here only the
  3997                                  	; CPM-compatible calls may get dispatched.
  3998                                  
  3999                                  		; System call entry point and dispatcher
  4000                                  CALL_ENTRY:
  4001 000002E3 1E                      	push	DS
  4002                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4003 000002E4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4004 000002E9 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  4005                                  
  4006 000002ED 58                              POP     AX                      ; IP from the long call at 5
  4007 000002EE 58                              POP     AX                      ; Segment from the long call at 5
  4008 000002EF 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  4009                                  
  4010                                  		; Re-order the stack to simulate an interrupt 21.
  4011                                  
  4012 000002F3 9C                      	PUSHF				; Start re-ordering the stack
  4013 000002F4 FA                      	CLI
  4014 000002F5 50                              PUSH    AX                      ; Save segment
  4015 000002F6 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  4016                                  	; 04/11/2022
  4017                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  4018                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  4019 000002FA FF36[EC05]              	push	word [SAVEDS]
  4020 000002FE 1F                      	pop	ds
  4021                                  	;
  4022                                  	;cmp	cl,36
  4023 000002FF 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  4024 00000302 77DC                            JA      SHORT BADCALL
  4025 00000304 88CC                            MOV     AH,CL
  4026                                  	; 08/07/2018
  4027 00000306 EB0E                    	jmp	short SAVREGS
  4028                                  
  4029                                  ; ---------------------------------------------------------------------------
  4030                                  
  4031                                  ; 01/05/2019 - Retro DOS v4.0
  4032                                  
  4033                                  	; This is the normal INT 21 entry point. We first perform a
  4034                                  	; quick test to see if we need to perform expensive DOS-entry
  4035                                  	; functions. Certain system calls are done without interrupts
  4036                                  	; being enabled.
  4037                                  
  4038                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4039                                  
  4040                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4041                                  ; 04/11/2022
  4042                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4043                                  
  4044                                  COMMAND:
  4045                                  	; 22/12/2022
  4046 00000308 FA                      	cli
  4047                                  
  4048                                  	; 01/05/2019 - Retro DOS v4.0
  4049                                  	; 08/07/2018 - Retro DOS v3.0
  4050                                  
  4051                                  ; 22/12/2022
  4052                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4053                                  	;IF	NOT IBM
  4054 00000309 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4055 0000030C 7203                    	JB	SHORT NOTOEM
  4056 0000030E E97A01                  	JMP	_$SET_OEM_HANDLER
  4057                                  
  4058                                  NOTOEM:
  4059                                  	;ENDIF
  4060                                  
  4061                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4062                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4063                                  
  4064                                  	; 22/12/2022
  4065                                  	;cli	; 08/07/2018
  4066                                  
  4067                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4068                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4069                                  	; 04/11/2022
  4070 00000311 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4071                                  	;JBE	SHORT SAVREGS
  4072 00000314 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4073                                  
  4074                                  	; 31/05/2019
  4075                                  
  4076                                  	; The following set of calls are issued by the server at
  4077                                  	; *arbitrary* times and, therefore, must be executed on
  4078                                  	; the user's entry stack and executed with interrupts off.
  4079                                  
  4080                                  SAVREGS:
  4081                                  	; 01/05/2019 - Retro DOS v4.0
  4082                                  	; 10/08/2018
  4083                                  	; 08/07/2018 - Retro DOS v3.0
  4084 00000316 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4085                                  	;;je	_$SET_CTRL_C_TRAPPING
  4086                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4087 00000319 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4088                                  	; 04/11/2022
  4089 0000031B 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4090 0000031D 80FC64                  	cmp	ah,64h			; Check Max case number
  4091 00000320 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4092 00000322 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4093 00000324 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4094 00000327 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4095 00000329 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4096 0000032C 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4097 0000032E 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4098 00000331 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4099                                  
  4100                                  SaveAllRegs:
  4101                                  	; 01/05/2019 - Retro DOS v4.0
  4102                                  
  4103 00000333 06                              push	ES
  4104 00000334 1E                      	push	DS
  4105 00000335 55                      	push	BP
  4106 00000336 57                      	push	DI
  4107 00000337 56                      	push	SI
  4108 00000338 52                      	push	DX
  4109 00000339 51                      	push	CX
  4110 0000033A 53                      	push	BX
  4111 0000033B 50                      	push	AX
  4112                                  
  4113 0000033C 8CD8                    	mov	AX,DS
  4114                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4115 0000033E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4116 00000343 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4117 00000346 891E[EA05]              	mov	[SAVEBX],BX
  4118                                  
  4119                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4120                                  	
  4121                                  	; 08/07/2018 - Retro DOS v3.0        
  4122                                  	;xor     ax,ax
  4123                                  	;mov     [USER_ID],ax
  4124                                  	;mov     ax,[CurrentPDB]
  4125                                  	;mov     [PROC_ID],ax
  4126                                  
  4127                                  	; 01/05/2019
  4128                                  
  4129                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4130                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4131                                  	; this!!!
  4132                                  
  4133 0000034A A1[8405]                	MOV     AX,[USER_SP]
  4134 0000034D A3[F205]                        MOV     [NSP],AX
  4135 00000350 A1[8605]                        MOV     AX,[USER_SS]
  4136 00000353 A3[F005]                        MOV     [NSS],AX
  4137                                  
  4138 00000356 31C0                    	xor	AX,AX ; 0
  4139 00000358 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4140                                  
  4141 0000035B F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4142 00000360 7503                    	jnz	short set_indos_flag	; if win386 present
  4143 00000362 A3[3E03]                	mov	[USER_ID],AX
  4144                                  set_indos_flag:
  4145 00000365 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4146                                  
  4147 00000369 8926[8405]                      MOV     [USER_SP],SP
  4148 0000036D 8C16[8605]                      MOV     [USER_SS],SS
  4149                                  
  4150 00000371 A1[3003]                	mov	AX,[CurrentPDB]
  4151 00000374 A3[3C03]                	mov	[PROC_ID],AX
  4152 00000377 8ED8                    	mov	DS,AX
  4153 00000379 58                      	pop	AX
  4154 0000037A 50                      	push	AX
  4155                                  
  4156                                  	; save user stack in his area for later returns (possibly from EXEC)
  4157                                  
  4158 0000037B 89262E00                        MOV     [PDB.USER_STACK],SP
  4159 0000037F 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4160                                  
  4161                                  	; 18/07/2018
  4162                                  	;mov	byte [CS:FSHARING], 0
  4163                                  
  4164                                  	;MOV     BX,CS			; no holes here.
  4165                                  	;MOV     SS,BX
  4166                                  
  4167                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4168 00000383 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4169                                  					;entry	REDISP
  4170                                  REDISP:
  4171 00000388 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4172 0000038B FB                              STI                             ; stack is in our space now...
  4173                                  
  4174 0000038C 8CD3                    	mov	bx,ss
  4175 0000038E 8EDB                    	mov	ds,bx
  4176                                  
  4177 00000390 93                      	xchg	ax,bx
  4178                                  
  4179 00000391 31C0                    	xor	ax,ax ; 0
  4180                                  
  4181                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4182                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4183                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4184                                  
  4185                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4186                                  
  4187                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4188                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4189                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4190                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4191                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4192                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4193                                  	;inc	ax
  4194                                  	;;inc	AL			; AL = 1
  4195                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4196                                  
  4197                                  	; 15/12/2022
  4198 00000393 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4199                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4200 00000396 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4201 0000039C A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4202                                  	;mov	byte [IDLEINT],1
  4203 0000039F A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4204 000003A2 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4205 000003A5 40                      	inc	ax
  4206                                  	;inc	al			; AL = 1
  4207 000003A6 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4208                                  
  4209 000003A9 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4210                                  
  4211 000003AA 88E3                    	MOV     BL,AH			
  4212 000003AC D1E3                            SHL     BX,1			; 2 bytes per call in table
  4213                                         
  4214 000003AE FC                      	CLD
  4215                                  		; Since the DOS maintains mucho state information across system
  4216                                  		; calls, we must be very careful about which stack we use.
  4217                                  		; First, all abort operations must be on the disk stack. This
  4218                                  		; is due to the fact that we may be hitting the disk (close
  4219                                  		; operations, flushing) and may need to report an INT 24.
  4220                                          
  4221 000003AF 08E4                    	OR      AH,AH
  4222 000003B1 7416                            JZ      SHORT DSKROUT		; ABORT
  4223                                  
  4224                                          ;CMP	AH,12
  4225                                          ;JBE	SHORT IOROUT		; Character I/O
  4226                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4227                                          ;JZ	SHORT IOROUT
  4228                                          ;CMP	AH,SET_CURRENT_PDB
  4229                                          ;JNZ	SHORT DSKROUT
  4230                                  
  4231                                  		; Second, PRINT and PSPRINT and the server issue
  4232                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4233                                  		; This call MUST, therefore, use the AUXSTACK.
  4234                                  
  4235                                  	; 10/08/2018
  4236 000003B3 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4237 000003B6 7434                    	je      short DISPCALL
  4238                                  	
  4239                                  	; 01/05/2019
  4240                                  	
  4241                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4242                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4243                                  
  4244 000003B8 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4245 000003BB 770C                    	ja      short DSKROUT
  4246                                  
  4247                                  IOROUT:
  4248                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4249                                  	; (ss: prefix was not needed here! ds=ss)
  4250                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4251                                  	; 15/12/2022
  4252 000003BD 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4253 000003C2 7528                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4254 000003C4 BC[A00A]                        MOV     SP,IOSTACK
  4255 000003C7 EB23                            JMP     SHORT DISPCALL
  4256                                  
  4257                                  		; We are on a system call that is classified as "the rest".
  4258                                  		; We place ourselves onto the DSKSTACK and away we go.
  4259                                  		; We know at this point:
  4260                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4261                                  		;    ErrorMode and WpErr
  4262                                  		; *  That there can be no critical sections in effect.
  4263                                  		;    We signal the server to remove all the resources.
  4264                                  
  4265                                  DSKROUT:
  4266                                  	; 01/01/2024
  4267                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4268                                  	; 08/07/2018 - Retro DOS v3.0
  4269 000003C9 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4270                                  	; 01/01/2024
  4271                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4272                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4273                                  	                   		; make sure flags are reset
  4274 000003CC C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4275                                  
  4276                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4277                                  	; (ss: prefix was not needed here! ds=ss)
  4278                                  
  4279                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4280                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4281                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4282                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4283                                                                          ; make sure flags are reset
  4284 000003D2 50                      	push    ax
  4285 000003D3 B482                    	mov     ah,82h			; Release all resource information
  4286 000003D5 CD2A                    	int     2Ah 		; Microsoft Networks 
  4287                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4288 000003D7 58                      	pop     ax
  4289                                  
  4290                                  		; Since we are going to be running on the DSKStack and since
  4291                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4292                                  		; generation of INT 28's.
  4293                                  
  4294                                  	; 15/12/2022
  4295                                  	;mov     byte [ss:IDLEINT],0
  4296                                  	;
  4297                                          ;mov	sp,DSKSTACK
  4298                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4299                                          ;jz	short DISPCALL
  4300                                  
  4301 000003D8 C606[5803]00            	mov     byte [IDLEINT],0
  4302                                  
  4303 000003DD BC[2009]                	MOV     SP,DSKSTACK
  4304 000003E0 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4305 000003E5 7405                    	JZ      SHORT DISPCALL
  4306                                  
  4307 000003E7 50                              PUSH    AX
  4308                                          ;invoke	DSKSTATCHK
  4309 000003E8 E8BA4B                          CALL	DSKSTATCHK
  4310 000003EB 58                      	POP     AX
  4311                                  DISPCALL:
  4312                                  	; 01/05/2019 - Retro DOS v4.0
  4313 000003EC 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4314                                  
  4315                                  	; 15/12/2022
  4316 000003F1 871E[EA05]              	xchg	bx,[SAVEBX]
  4317 000003F5 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4318                                  
  4319                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4320                                  	; (ss: prefix was not needed here! ds=ss)        
  4321                                  	;xchg	bx,[ss:SAVEBX]
  4322                                  	;mov	ds,[ss:SAVEDS]
  4323                                  
  4324 000003F9 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4325                                  
  4326                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4327                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4328                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4329                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4330                                  	; because this bit is used to indicate to the next int 21 call that
  4331                                  	; the previous int 21 was an exec.
  4332                                  	;
  4333                                  	; So do not add any code between the call above and the label 
  4334                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4335                                  
  4336                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4337 000003FE 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4338                                  
  4339                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4340                                  ; DOSCODE:41F7h
  4341                                  
  4342                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  4343                                  ; DOSCODE:4204h
  4344                                  
  4345                                  ;entry LEAVE
  4346                                  ;;;_LEAVE:				; Exit from a system call
  4347                                  LeaveDOS: ; 18/07/2018 
  4348                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4349 00000404 FA                      	CLI
  4350                                  
  4351                                  	; 01/05/2019
  4352                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4353 00000405 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4354 0000040A 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4355 0000040F 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4356                                  
  4357                                  LeaveA20On:
  4358 00000411 FE0E[2103]                      DEC     BYTE [INDOS]
  4359                                          ; 04/11/2022
  4360 00000415 8E16[8605]              	mov	ss,[USER_SS]
  4361 00000419 8B26[8405]              	MOV     SP,[USER_SP]
  4362                                  	;MOV	SS,[USER_SS]
  4363 0000041D 89E5                    	MOV     BP,SP
  4364                                  	;MOV	[BP.user_AX],AL	
  4365                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4366                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4367                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4368                                  
  4369                                  	; 15/12/2022
  4370 0000041F 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4371                                  	
  4372                                  	;MOV	AX,[NSP]
  4373                                          ;MOV	[USER_SP],AX
  4374                                          ;MOV	AX,[NSS]
  4375                                          ;MOV	[USER_SS],AX
  4376                                  	; 01/01/2024
  4377 00000422 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4378 00000426 A3[8605]                	mov	[USER_SS],ax
  4379 00000429 8C06[8405]              	mov	[USER_SP],es
  4380                                  
  4381 0000042D 58                      	pop	AX
  4382 0000042E 5B                      	pop	BX
  4383 0000042F 59                      	pop	CX
  4384 00000430 5A                      	pop	DX
  4385 00000431 5E                      	pop	SI
  4386 00000432 5F                      	pop	DI
  4387 00000433 5D                      	pop	BP
  4388 00000434 1F                      	pop	DS
  4389 00000435 07                      	pop	ES
  4390                                  
  4391 00000436 CF                              IRET
  4392                                  
  4393                                  disa20:	   				; M068 - Start
  4394 00000437 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4395 0000043B 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4396 0000043F 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4397                                  					;    a20 off
  4398                                  					; Y: turn a20 off and dec a20off_count
  4399 00000441 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4400                                   					; Start - M004
  4401 00000445 1E                      	push	ds			; segment of stub
  4402 00000446 BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4403 00000449 53                      	push	bx
  4404 0000044A CB                      	retf	  			; go to stub
  4405                                  					; End - M004
  4406                                  ;SYSTEM_CALL ENDP
  4407                                  
  4408                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4409                                  ; 04/11/2022
  4410                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4411                                  
  4412                                  ; ==========================================================================
  4413                                  ;
  4414                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4415                                  ; the stack prior to giving the user control
  4416                                  ;
  4417                                  ; ==========================================================================
  4418                                  
  4419                                  ; 01/05/2019 - Retro DOS v4.0
  4420                                  
  4421                                          ;procedure restore_world,NEAR
  4422                                  restore_world:
  4423                                  	;getdseg <es>		; es -> dosdata
  4424 0000044B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4425                                  
  4426 00000450 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4427                                  
  4428 00000455 58                              POP     AX
  4429 00000456 5B                              POP     BX
  4430 00000457 59                              POP     CX
  4431 00000458 5A                              POP     DX
  4432 00000459 5E                              POP     SI
  4433 0000045A 5F                              POP     DI
  4434 0000045B 5D                              POP     BP
  4435 0000045C 1F                              POP     DS
  4436                                  
  4437 0000045D 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4438                                  
  4439                                  ;restore_world	ENDP
  4440                                  
  4441                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4442                                  
  4443                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4444                                  ; 04/11/2022
  4445                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4446                                  
  4447                                  ; ==========================================================================
  4448                                  ;
  4449                                  ; Save_World saves complete registers on the stack
  4450                                  ;
  4451                                  ; ==========================================================================
  4452                                  
  4453                                          ;procedure save_world,NEAR
  4454                                  save_world:
  4455                                  	;getdseg <es>		; es -> dosdata
  4456 00000462 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4457                                  
  4458 00000467 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4459                                  
  4460                                  	; 12/05/2019
  4461                                          
  4462 0000046C 1E                      	PUSH    DS
  4463 0000046D 55                              PUSH    BP
  4464 0000046E 57                              PUSH    DI
  4465 0000046F 56                              PUSH    SI
  4466 00000470 52                              PUSH    DX
  4467 00000471 51                              PUSH    CX
  4468 00000472 53                              PUSH    BX
  4469 00000473 50                              PUSH    AX
  4470                                  
  4471 00000474 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4472                                  
  4473 00000479 55                      	push	BP		
  4474 0000047A 89E5                    	mov	BP,SP
  4475 0000047C 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4476 0000047F 5D                      	pop	BP
  4477                                  	
  4478 00000480 C3                      	retn
  4479                                  
  4480                                  ;save_world	ENDP
  4481                                  
  4482                                  ; 01/05/2019
  4483                                  
  4484                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4485                                  ; 04/11/2022
  4486                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4487                                  
  4488                                  ; ==========================================================================
  4489                                  ;
  4490                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4491                                  ;
  4492                                  ; ==========================================================================
  4493                                  
  4494                                          ;procedure get_user_stack,NEAR
  4495                                  Get_User_Stack:
  4496                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4497 00000481 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4498 00000486 C536[8405]                      lds	si,[USER_SP]
  4499 0000048A C3                      	retn
  4500                                  
  4501                                  ;get_user_stack  ENDP
  4502                                  
  4503                                  ; 22/12/2022
  4504                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4505                                  ;%if 0
  4506                                  
  4507                                  ; ---------------------------------------------------------------------------
  4508                                  ;
  4509                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4510                                  ; Inputs:
  4511                                  ;	User registers, User Stack, INTS disabled
  4512                                  ;	If CALL F8, DS:DX is new handler address
  4513                                  ; Function:
  4514                                  ;	Process OEM INT 21 extensions
  4515                                  ; Outputs:
  4516                                  ;	Jumps to OEM_HANDLER if appropriate
  4517                                  ;
  4518                                  ; ---------------------------------------------------------------------------
  4519                                  
  4520                                  ;IF	NOT IBM
  4521                                  
  4522                                  _$SET_OEM_HANDLER:
  4523                                  	; 01/05/2019 - Retro DOS v4.0
  4524                                  	
  4525                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4526                                  	;(jb	short NOTOOEM)
  4527                                  
  4528 0000048B 06                      	push	es ; *
  4529                                  	;getdseg <es>			; es -> dosdata
  4530 0000048C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4531                                  
  4532 00000491 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4533                                  						; (message) request	
  4534                                  	; AH = 0F8h = SET OEM HANDLER
  4535                                  
  4536 00000493 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4537 00000498 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4538                                  
  4539 0000049D 07                      	pop	es ; *
  4540                                  
  4541 0000049E CF                      	IRET                            ; Quick return, Have altered no registers
  4542                                  
  4543                                  check_trueversion_request:
  4544                                  	; 18/07/2019 - Retro DOS v3.0
  4545                                  
  4546                                  	; Retro DOS v2.0 - 20/04/2018
  4547 0000049F 83F8FF                  	CMP	AX,0FFFFh
  4548                                  	; 18/07/2018
  4549 000004A2 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4550                                  
  4551                                  	; 01/05/2019
  4552 000004A4 07                      	pop	es ; *
  4553                                  
  4554 000004A5 B40E                    	mov	ah,0Eh
  4555                                  
  4556                                  	; Retro DOS v4.0 feature only!
  4557 000004A7 81FBA101                	cmp	bx,417  ; Signature to bypass
  4558                                  			; Retro DOS true version message	
  4559 000004AB 7414                    	je	short true_version_iret
  4560                                  
  4561 000004AD 56                      	push	si
  4562 000004AE 53                      	push	bx
  4563                                  
  4564 000004AF BE[BF00]                	mov	si,RETRODOSMSG
  4565                                  wrdosmsg:
  4566                                  	;movb	ah,0Eh
  4567 000004B2 BB0700                  	mov	bx,7
  4568                                  wrdosmsg_nxt:
  4569 000004B5 2EAC                    	cs	lodsb
  4570 000004B7 3C24                    	cmp	al,'$'
  4571 000004B9 7404                    	je	short wrdosmsg_ok		
  4572 000004BB CD10                    	int	10h
  4573 000004BD EBF6                    	jmp	short wrdosmsg_nxt
  4574                                  
  4575                                  wrdosmsg_ok:
  4576 000004BF 5B                      	pop	bx
  4577 000004C0 5E                      	pop	si
  4578                                  
  4579                                  true_version_iret:
  4580                                  	; ah = 0Eh
  4581                                  	;mov	al,40h ; Retro DOS v4.0
  4582                                  	; 
  4583                                  	;mov	al,41h ; Retro DOS v4.1 
  4584                                  	; 30/12/2022
  4585 000004C1 B042                    	mov	al,42h ; Retro DOS v4.2
  4586 000004C3 CF                      	iret
  4587                                  
  4588                                  	; If above F8 try to jump to handler
  4589                                  
  4590                                  DO_OEM_FUNC:
  4591                                  	; 01/05/2019
  4592 000004C4 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4593 000004CA 7504                    	JNE     short OEM_JMP
  4594 000004CC 07                      	pop	es ; *
  4595 000004CD E910FE                  	JMP     BADCALL                 ; Handler not initialized
  4596                                  OEM_JMP:
  4597 000004D0 06                      	push	es
  4598 000004D1 1F                      	pop	ds ; DOSDATA segment !
  4599 000004D2 07                      	pop	es ; *
  4600                                  
  4601                                  	; 22/12/2022
  4602 000004D3 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4603                                  
  4604 000004D4 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4605                                  
  4606                                  ;       ENDIF
  4607                                  
  4608                                  ; ---------------------------------------------------------------------------
  4609                                  
  4610                                  ;%endif
  4611                                  
  4612                                  ;============================================================================
  4613                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4614                                  ;============================================================================
  4615                                  ; 17/07/2018 - Retro DOS v3.0
  4616                                  
  4617                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4618                                  ;	NAME	IBMCODE
  4619                                  
  4620                                  ;BREAK <NullDev -- Driver for null device>
  4621                                  
  4622                                  ; ROMDOS note:
  4623                                  ;	NUL device driver used to be here, but it was removed and placed in
  4624                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4625                                  ;	header, which is also in DOSDATA.
  4626                                  
  4627                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4628                                  
  4629                                  ;----------------------------------------------------------------------------
  4630                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4631                                  ;----------------------------------------------------------------------------
  4632                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4633                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4634                                  
  4635                                  ;Public MSC001S,MSC001E
  4636                                  ;MSC001S label byte
  4637                                  	;IF	IBM
  4638                                  ; Codes returned by BIOS
  4639                                  ERRIN:
  4640 000004D8 02                      	DB	2			; NO RESPONSE
  4641 000004D9 06                      	DB	6			; SEEK FAILURE
  4642 000004DA 0C                      	DB	12			; GENERAL ERROR
  4643 000004DB 04                      	DB	4			; BAD CRC
  4644 000004DC 08                      	DB	8			; SECTOR NOT FOUND
  4645 000004DD 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4646                                  ERROUT:
  4647                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4648 000004DE 80                      	DB	80H			; NO RESPONSE
  4649 000004DF 40                      	DB	40H			; Seek failure
  4650 000004E0 02                      	DB	2			; Address Mark not found
  4651 000004E1 10                      	DB	10H			; BAD CRC
  4652 000004E2 04                      	DB	4			; SECTOR NOT FOUND
  4653 000004E3 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4654                                  
  4655                                  NUMERR	EQU	$-ERROUT
  4656                                  	;ENDIF
  4657                                  ;MSC001E label byte
  4658                                  ;----------------------------------------------------------------------------
  4659                                  
  4660                                  ;============================================================================
  4661                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4662                                  ;============================================================================
  4663                                  ; 18/07/2018 - Retro DOS v3.0
  4664                                  ; 15/05/2019 - Retro DOS v4.0
  4665                                  
  4666                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4667                                  
  4668                                  ;   AbsSetup - setup for abs disk functions
  4669                                  ;----------------------------------------------------------------------------
  4670                                  
  4671                                  AbsSetup:
  4672                                  	; 02/01/2024
  4673 000004E4 1E                      	push	ds ; *
  4674 000004E5 16                      	push	ss
  4675 000004E6 1F                      	pop	ds
  4676 000004E7 FE06[2103]              	inc	byte [INDOS]
  4677                                  	;INC	byte [SS:INDOS]		; SS override
  4678 000004EB FB                      	STI
  4679 000004EC FC                      	CLD
  4680                                  	; 02/01/2024
  4681                                  	;PUSH	DS
  4682                                  	;push	ss
  4683                                  	;pop	ds
  4684 000004ED E80901                  	CALL	GETBP
  4685                                  	; 02/01/2024
  4686 000004F0 1F                      	pop	ds ; *
  4687 000004F1 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4688                                  	;mov	word [es:bp+1Fh]
  4689 000004F3 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4690                                  
  4691                                  	; 02/01/2024
  4692                                  ;errdriv:
  4693                                  ;	POP	DS
  4694                                  ;	jnc	short AbsSetup2
  4695                                  ;AbsSetup_retn:
  4696                                  ;	retn
  4697                                  
  4698                                  AbsSetup2:
  4699                                  	; 15/05/2019 - Retro DOS v4.0
  4700                                  	; MSDOS 6.0
  4701                                  					; SS override
  4702 000004F9 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4703 00000500 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4704 00000503 7227                    	jc	short AbsSetup_retn
  4705 00000505 E82255                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4706                                  
  4707                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4708 00000508 1E                      	PUSH	DS
  4709 00000509 56                      	PUSH	SI
  4710 0000050A 50                      	PUSH	AX
  4711                                  
  4712 0000050B 16                      	push	ss
  4713 0000050C 1F                      	pop	ds
  4714                                  	
  4715 0000050D BE[BE03]                	MOV	SI,OPENBUF
  4716 00000510 8804                    	MOV	[SI],AL
  4717 00000512 800441                  	ADD	BYTE [SI],"A"
  4718 00000515 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4719 0000051A B80003                  	MOV	AX,0300H
  4720 0000051D F8                      	CLC
  4721 0000051E CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4722                                  		
  4723                                  		; 04/11/2022
  4724                                  		; (INT 2Ah - AX = 0300h)
  4725                                  		; Microsoft Networks - CHECK DIRECT I/O
  4726                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4727                                  		;    only drive specifier--must include the colon)
  4728                                  		; Return: CF clear if absolute disk access allowed
  4729                                  
  4730 00000520 58                      	POP	AX
  4731 00000521 5E                      	POP	SI
  4732 00000522 1F                      	POP	DS
  4733 00000523 7307                    	jnc	short AbsSetup_retn
  4734                                  
  4735                                  	;mov	word [ss:EXTERR],32h
  4736 00000525 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4737                                  errdriv:	; 02/01/2024
  4738                                  AbsSetup_retn:
  4739 0000052C C3                      	retn
  4740                                  
  4741                                  ;---------------------------------------------------------------------------
  4742                                  ;
  4743                                  ; Procedure Name : ABSDRD
  4744                                  ;
  4745                                  ; Interrupt 25 handler. Performs absolute disk read.
  4746                                  ; Inputs:	AL - 0-based drive number
  4747                                  ;		DS:BX point to destination buffer
  4748                                  ;		CX number of logical sectors to read
  4749                                  ;		DX starting logical sector number (0-based)
  4750                                  ; Outputs:	Original flags still on stack
  4751                                  ;		Carry set
  4752                                  ;		    AH error from BIOS
  4753                                  ;		    AL same as low byte of DI from INT 24
  4754                                  ;
  4755                                  ;---------------------------------------------------------------------------
  4756                                          ;procedure   ABSDRD,FAR
  4757                                  ABSDRD:
  4758                                  	; 15/05/2019 - Retro DOS v4.0
  4759                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4760                                  	; 04/11/2022
  4761                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4762                                  	
  4763                                  	; MSDOS 6.0
  4764 0000052D FA                      	CLI
  4765                                  	
  4766                                  ;	set up ds to point to DOSDATA
  4767                                  
  4768 0000052E 50                      	push	ax			; preserve AX value
  4769 0000052F 8CD8                    	mov	ax,ds			; store DS value in AX
  4770                                  	;getdseg <ds>
  4771 00000531 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4772 00000536 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4773 00000539 58                      	pop	ax			; restore AX value
  4774                                  
  4775                                  	; M072:
  4776                                  	; We shall save es on the user stack here. We need to use ES in
  4777                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4778                                  	; time in order to restore the user stack.
  4779                                  
  4780 0000053A 06                      	push	es  ; ****		; M072
  4781                                  
  4782 0000053B 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4783 0000053F 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4784                                  
  4785                                  ; 	set up ss to point to DOSDATA
  4786                                  ;
  4787                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4788                                  ; version of the getdseg macro with the SS register! An interrupt will
  4789                                  ; sneak through.
  4790                                  
  4791                                  ;ifndef ROMDOS
  4792                                  	;getdseg <ss>			; cli in entry of routine
  4793 00000543 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4794                                  ;else
  4795                                  ;	mov	ds, cs:[BioDataSeg]
  4796                                  ;	assume	ds:bdata
  4797                                  ;
  4798                                  ;	mov	ss, ds:[DosDataSg]
  4799                                  ;	assume	ss:DOSDATA
  4800                                  ;
  4801                                  ;endif ; ROMDOS
  4802                                  
  4803 00000548 BC[2009]                	MOV	SP,DSKSTACK
  4804                                  
  4805 0000054B 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4806                                  
  4807 0000054F 06                      	push	es ; *** (MSDOS 6.21)
  4808 00000550 E80FFF                  	call	save_world		; save all regs
  4809                                  
  4810 00000553 06                      	PUSH	ES ; **
  4811 00000554 E88DFF                  	CALL	AbsSetup
  4812 00000557 723D                    	JC	short ILEAVE
  4813                                  
  4814                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4815                                  	;  the secondary cache. The secondary cache does not check for media
  4816                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4817                                  	;  read, and get data from the previous disk. To get around this,
  4818                                  	;  we just won't use the secondary cache for absolute disk reads.
  4819                                  	;                                                      -mw 8/5/88
  4820                                  
  4821                                  	;EnterCrit critDisk
  4822 00000559 E8970D                  	call	ECritDisk
  4823 0000055C 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4824                                  	;LeaveCrit critDisk
  4825 00000562 E8A90D                  	call	LCritDisk
  4826                                  
  4827                                          ;invoke	DSKREAD
  4828 00000565 E83431                  	CALL	DSKREAD
  4829 00000568 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4830                                  
  4831 0000056A 89F9                            mov     cx,di
  4832 0000056C 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4833 00000571 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4834                                  
  4835                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4836                                  ;            sectors, also termed an "Extent".)
  4837                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4838                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4839                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4840                                  ;
  4841                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4842                                  ;	buffers must be "read" into the transfer memory block, so that the
  4843                                  ;       transfer memory reflects the most recent data.
  4844                                  
  4845                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4846 00000576 E86733                          call	DskRdBufScan
  4847 00000579 EB1B                    	jmp     short ILEAVE
  4848                                  
  4849                                  TLEAVE:
  4850 0000057B 7419                    	JZ	short ILEAVE
  4851                                  
  4852                                  ERR_LEAVE:				; M039
  4853                                  	; 15/07/2018 - Retro DOS v3.0
  4854                                          ;IF	IBM
  4855                                  ; Translate the error code to ancient 1.1 codes
  4856 0000057D 06                              PUSH    ES ; *
  4857 0000057E 0E                              PUSH    CS
  4858 0000057F 07                              POP     ES
  4859 00000580 30E4                            XOR     AH,AH			; Nul error code
  4860                                  	;mov	cx,6
  4861 00000582 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4862 00000585 BF[D804]                        MOV     DI,ERRIN		; Point to error conditions
  4863 00000588 F2AE                            REPNE   SCASB
  4864 0000058A 7504                            JNZ     SHORT LEAVECODE		; Not found
  4865                                  	;mov	ah,[ES:DI+5]
  4866 0000058C 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4867                                  LEAVECODE:
  4868 00000590 07                              POP     ES ; *
  4869                                  	; 15/05/2019 - Retro DOS v4.0
  4870 00000591 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4871                                          ;ENDIF
  4872                                  
  4873 00000595 F9                              STC
  4874                                  ILEAVE:
  4875                                  	; 15/05/2019
  4876 00000596 07                              POP     ES ; **
  4877 00000597 E8B1FE                  	call	restore_world
  4878 0000059A 07                              pop	es ; *** (MSDOS 6.21)
  4879 0000059B FA                      	CLI
  4880 0000059C 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4881 000005A0 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4882 000005A5 16                              push	ss			; M072 - Start
  4883 000005A6 07                      	pop	es			; es - dosdata
  4884 000005A7 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4885 000005AC 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4886 000005B1 07                      	pop	es  ; ****		; Note es was saved on user
  4887                                  					; stack at entry 
  4888                                  					; M072 - End
  4889 000005B2 FB                              STI
  4890 000005B3 CB                      	RETF   ; ! FAR return !
  4891                                  
  4892                                  ;ABSDRD	ENDP
  4893                                  
  4894                                  ;---------------------------------------------------------------------------
  4895                                  ;
  4896                                  ; Procedure Name : ABSDWRT
  4897                                  ;
  4898                                  ; Interrupt 26 handler. Performs absolute disk write.
  4899                                  ; Inputs:	AL - 0-based drive number
  4900                                  ;		DS:BX point to source buffer
  4901                                  ;		CX number of logical sectors to write
  4902                                  ;		DX starting logical sector number (0-based)
  4903                                  ; Outputs:	Original flags still on stack
  4904                                  ;		Carry set
  4905                                  ;		    AH error from BIOS
  4906                                  ;		    AL same as low byte of DI from INT 24
  4907                                  ;
  4908                                  ;---------------------------------------------------------------------------
  4909                                          ;procedure   ABSDWRT,FAR
  4910                                  ABSDWRT:
  4911                                  	; 15/05/2019 - Retro DOS v4.0
  4912                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4913                                  	; 04/11/2022
  4914                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4915                                  
  4916 000005B4 FA                      	CLI
  4917                                  
  4918                                  ;	set up ds to point to DOSDATA
  4919                                  
  4920 000005B5 50                      	push	ax
  4921 000005B6 8CD8                    	mov	ax,ds
  4922                                  	;getdseg <ds>
  4923 000005B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4924 000005BD A3[0A0D]                	mov	[TEMPSEG],ax
  4925 000005C0 58                      	pop	ax
  4926                                  
  4927                                  	; M072:
  4928                                  	; We shall save es on the user stack here. We need to use ES in
  4929                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4930                                  	; time in order to restore the user stack.
  4931                                  
  4932 000005C1 06                      	push	es ; ****		; M072
  4933                                  
  4934 000005C2 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4935 000005C6 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4936                                  
  4937                                  	; set up ss to point to DOSDATA
  4938                                  	;
  4939                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4940                                  	; ROMDOS version of the getdseg macro with the SS register!
  4941                                  	; An interrupt will sneak through.
  4942                                  
  4943                                  ;ifndef ROMDOS
  4944                                  	;getdseg <ss>			; cli in entry of routine
  4945 000005CA 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4946                                  ;else
  4947                                  ;	mov	ds, cs:[BioDataSeg]
  4948                                  ;	assume	ds:bdata
  4949                                  ;
  4950                                  ;	mov	ss, ds:[DosDataSg]
  4951                                  ;	assume	ss:DOSDATA
  4952                                  ;
  4953                                  ;endif ; ROMDOS
  4954                                  
  4955 000005CF BC[2009]                	MOV	SP,DSKSTACK
  4956                                  		; we are now switched to DOS's disk stack
  4957                                  
  4958 000005D2 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4959                                  
  4960 000005D6 06                      	push	es ; *** (MSDOS 6.21)
  4961                                  
  4962 000005D7 E888FE                  	call	save_world	      	; save all regs
  4963                                  
  4964 000005DA 06                      	PUSH	ES ; **
  4965 000005DB E806FF                  	CALL	AbsSetup
  4966 000005DE 72B6                    	JC	short ILEAVE
  4967                                  
  4968                                  	;EnterCrit critDisk
  4969 000005E0 E8100D                  	call	ECritDisk
  4970 000005E3 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4971 000005E9 E89103                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4972                                  	;LeaveCrit critDisk
  4973 000005EC E81F0D                  	call	LCritDisk
  4974                                  
  4975                                  ;M039
  4976                                  ;       DS:BX = transfer address (source data address).
  4977                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4978                                  ;	     sectors, also termed an "Extent".)
  4979                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4980                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4981                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4982                                  ;
  4983                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4984                                  ;       written. Note that all the above registers are preserved for
  4985                                  ;       DSKWRITE.
  4986                                  
  4987 000005EF 1E                              push    ds
  4988                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4989 000005F0 E8F135                  	call	DskWrtBufPurge
  4990 000005F3 1F                              pop     ds
  4991                                  ;M039
  4992                                  	;invoke	DSKWRITE
  4993 000005F4 E8C930                  	call	DSKWRITE
  4994 000005F7 EB82                    	JMP	short TLEAVE
  4995                                  
  4996                                  ;ABSDWRT ENDP
  4997                                  
  4998                                  ;----------------------------------------------------------------------------
  4999                                  ;
  5000                                  ; Procedure Name : GETBP
  5001                                  ;
  5002                                  ; Inputs:
  5003                                  ;	AL = Logical unit number (A = 0)
  5004                                  ; Function:
  5005                                  ;	Find Drive Parameter Block
  5006                                  ; Outputs:
  5007                                  ;	ES:BP points to DPB
  5008                                  ;	[THISDPB] = ES:BP
  5009                                  ;	Carry set if unit number bad or unit is a NET device.
  5010                                  ;		Later case sets extended error error_I24_not_supported
  5011                                  ; No other registers alteredjjj
  5012                                  ;
  5013                                  ;----------------------------------------------------------------------------
  5014                                  
  5015                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5016                                  GETBP:
  5017                                  	; 15/05/2019 - Retro DOS v4.0
  5018                                  	; 11/07/2018 - Retro DOS v3.0
  5019 000005F9 50                      	PUSH	AX
  5020 000005FA 0401                    	ADD	AL, 1		; No increment; need carry flag
  5021 000005FC 7216                    	JC	SHORT SKIPGET
  5022 000005FE E88163                  	CALL	GETTHISDRV
  5023                                  	; MSDOS 6.0
  5024 00000601 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5025 00000603 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5026 00000605 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  5027 00000608 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5028 0000060A F9                      	STC				;DCR.			;AN000;
  5029 0000060B A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5030 0000060E C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  5031                                  SKIPGET:
  5032 00000614 58                      	POP	AX
  5033 00000615 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  5034                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5035                                  	;jnc	short getbp_t
  5036                                  	;retn
  5037                                  getbp_t:
  5038 00000617 C42E[A205]              	LES	BP,[THISCDS]
  5039                                  	; 15/12/2022
  5040 0000061B 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5041                                  	; 07/12/2022
  5042                                  	;TEST	WORD [ES:BP+43H],8000H
  5043                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5044 00000620 7408                    	JZ	SHORT GETBP_CDS
  5045 00000622 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5046 00000628 F9                      	STC
  5047                                  GETBP_RETN:
  5048 00000629 C3                      	RETN
  5049                                  
  5050                                  GETBP_CDS:
  5051                                  	;LES	BP,[ES:BP+45H]
  5052 0000062A 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5053                                  GOTDPB:
  5054                                  	; Load THISDPB from ES:BP
  5055 0000062E 892E[8A05]              	MOV	[THISDPB],BP
  5056 00000632 8C06[8C05]              	MOV	[THISDPB+2],ES
  5057 00000636 C3                      	RETN
  5058                                  
  5059                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5060                                  
  5061                                  ;----------------------------------------------------------------------------
  5062                                  ;
  5063                                  ; Procedure Name : SYS_RETURN
  5064                                  ;
  5065                                  ; These are the general system call exit mechanisms. All internal system
  5066                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5067                                  ; is to set the user's flags and set his AX register for return.
  5068                                  ;
  5069                                  ;----------------------------------------------------------------------------
  5070                                  
  5071                                          ;procedure   SYS_RETURN,NEAR
  5072                                  SYS_RETURN:        
  5073                                          ;entry	SYS_RET_OK
  5074                                  SYS_RET_OK:   
  5075 00000637 E847FE                  	call    Get_User_Stack
  5076                                  		; turn off user's carry flag
  5077                                  SYS_RET_OK_clc: ; 25/06/2019 
  5078                                          ;;and	word [SI+16h],0FFFEh 
  5079                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5080                                          ; 25/06/2019
  5081 0000063A 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5082 0000063E EB10                    	JMP     SHORT DO_RET
  5083                                  
  5084                                          ;entry   SYS_RET_ERR
  5085                                  SYS_RET_ERR:        
  5086 00000640 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5087 00000642 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5088 00000645 E81A00                  	CALL	ErrorMap
  5089                                  
  5090                                  	;entry	From_GetSet
  5091                                  From_GetSet:
  5092 00000648 E836FE                          call    Get_User_Stack
  5093                                  		 ; signal carry to user
  5094                                  	;;or	word [SI+16h],1
  5095                                  	;OR	word [SI+user_env.user_F],f_Carry
  5096                                  	; 25/06/2019
  5097 0000064B 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5098 0000064F F9                      	STC			; also, signal internal error
  5099                                  DO_RET:
  5100                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5101 00000650 8904                    	MOV	[SI],AX
  5102 00000652 C3                      	RETN
  5103                                  
  5104                                  	;entry	FCB_RET_OK
  5105                                  FCB_RET_OK:
  5106                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5107                                  NO_OP:
  5108 00000653 30C0                    	XOR	AL,AL
  5109 00000655 C3                      	retn
  5110                                  
  5111                                  	;entry	FCB_RET_ERR
  5112                                  FCB_RET_ERR:
  5113 00000656 30E4                    	XOR	AH,AH
  5114 00000658 36A3[2403]              	mov	[ss:EXTERR],AX
  5115 0000065C E80300                  	CALL	ErrorMap
  5116 0000065F B0FF                    	MOV	AL,-1
  5117 00000661 C3                      	retn
  5118                                  
  5119                                  	;entry	ErrorMap
  5120                                  ErrorMap:
  5121 00000662 56                      	PUSH	SI
  5122                                  				; ERR_TABLE_21 is now in DOSDATA
  5123 00000663 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5124                                  				; SS override for FAILERR and EXTERR
  5125 00000666 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5126 0000066C 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5127                                  		 ; Ooops, this is the REAL reason
  5128                                  	;mov	word [SS:EXTERR],53h
  5129 0000066E 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5130                                  EXTENDED_NORMAL:
  5131 00000675 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5132 00000678 5E                      	POP	SI
  5133 00000679 C3                      	retn
  5134                                  
  5135                                  	;EndProc SYS_RETURN
  5136                                  
  5137                                  ;---------------------------------------------------------------------------
  5138                                  ;
  5139                                  ; Procedure Name : CAL_LK
  5140                                  ;
  5141                                  ; Inputs:
  5142                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5143                                  ;		(DS NEED not be DOSDATA)
  5144                                  ;	[EXTERR] is set with error
  5145                                  ; Function:
  5146                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5147                                  ; Outputs:
  5148                                  ;	[EXTERR_CLASS] set
  5149                                  ;	[EXTERR_ACTION] set
  5150                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5151                                  ; Destroys SI, FLAGS
  5152                                  ;
  5153                                  ;---------------------------------------------------------------------------
  5154                                  
  5155                                  	;procedure CAL_LK,NEAR
  5156                                  CAL_LK:
  5157 0000067A 1E                      	PUSH	DS
  5158 0000067B 50                      	PUSH	AX
  5159 0000067C 53                      	PUSH	BX
  5160                                  
  5161                                  ;M048	Context DS		; DS:SI -> Table
  5162                                  ;
  5163                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5164                                  ; is DOSDATA
  5165                                  
  5166                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5167                                  	; 15/05/2019 - Retro DOS v4.0
  5168 0000067D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5169                                  
  5170                                  	; 18/07/2018
  5171                                  	;push	ss
  5172                                  	;pop	ds
  5173                                  
  5174 00000682 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5175                                  TABLK1:
  5176 00000686 AC                      	LODSB
  5177                                  
  5178 00000687 3CFF                    	CMP	AL,0FFH
  5179 00000689 7409                    	JZ	short GOT_VALS	; End of table
  5180 0000068B 38D8                    	CMP	AL,BL
  5181 0000068D 7405                    	JZ	short GOT_VALS	; Got entry
  5182 0000068F 83C603                  	ADD	SI,3		; Next table entry
  5183                                  	; 15/08/2018
  5184 00000692 EBF2                    	JMP	short TABLK1
  5185                                  
  5186                                  GOT_VALS:
  5187 00000694 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5188                                  
  5189 00000695 80FCFF                  	CMP	AH,0FFH
  5190 00000698 7404                    	JZ	short NO_SET_ACT
  5191 0000069A 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5192                                  NO_SET_ACT:
  5193 0000069E 3CFF                    	CMP	AL,0FFH
  5194 000006A0 7403                    	JZ	short NO_SET_CLS
  5195 000006A2 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5196                                  NO_SET_CLS:
  5197 000006A5 AC                      	LODSB			; Get LOCUS
  5198                                  
  5199 000006A6 3CFF                    	CMP	AL,0FFH
  5200 000006A8 7403                    	JZ	short NO_SET_LOC
  5201 000006AA A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5202                                  NO_SET_LOC:
  5203 000006AD 5B                      	POP	BX
  5204 000006AE 58                      	POP	AX
  5205 000006AF 1F                      	POP	DS
  5206 000006B0 C3                      	retn
  5207                                  
  5208                                  	;EndProc CAL_LK
  5209                                  
  5210                                  ;---------------------------------------------------------------------------
  5211                                  ;
  5212                                  ; Procedure Name : ETAB_LK
  5213                                  ;
  5214                                  ; Inputs:
  5215                                  ;	AX is error code
  5216                                  ;	[USER_IN_AX] has AH value of system call involved
  5217                                  ; Function:
  5218                                  ;	Make sure error code is appropriate to this call.
  5219                                  ; Outputs:
  5220                                  ;	AX MAY be mapped error code
  5221                                  ;	[EXTERR] = Input AX
  5222                                  ; Destroys ONLY AX and FLAGS
  5223                                  ;
  5224                                  ;---------------------------------------------------------------------------
  5225                                  
  5226                                  	;procedure ETAB_LK,NEAR
  5227                                  
  5228                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5229 000006B1 1E                      	PUSH	DS
  5230 000006B2 56                      	PUSH	SI
  5231 000006B3 51                      	PUSH	CX
  5232 000006B4 53                      	PUSH	BX
  5233                                  
  5234                                  	;Context DS			; SS is DOSDATA
  5235                                  
  5236 000006B5 16                      	push	ss
  5237 000006B6 1F                      	pop	ds
  5238                                  
  5239 000006B7 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5240                                  
  5241                                  					; I21_MAP_E_TAB is now in DOSCODE
  5242 000006BA BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5243 000006BD 88C7                    	MOV	BH,AL			; Real code to BH
  5244 000006BF 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5245                                  TABLK2:
  5246                                  	; 15/05/2019 - Retro DOS v4.0
  5247 000006C3 2E                      	cs
  5248 000006C4 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5249                                  	
  5250                                  	; 18/07/2018 - Retro DOS v3.0
  5251                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5252                                  
  5253 000006C5 3CFF                    	CMP	AL,0FFH 		; End of table?
  5254 000006C7 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5255 000006C9 38D8                    	CMP	AL,BL			; Found call?
  5256 000006CB 740C                    	JZ	short GOT_CALL		; Yes
  5257 000006CD 86E0                    	XCHG	AH,AL			; Count to AL
  5258 000006CF 30E4                    	XOR	AH,AH			; Make word for add
  5259 000006D1 01C6                    	ADD	SI,AX			; Next table entry
  5260 000006D3 EBEE                    	JMP	short TABLK2
  5261                                  
  5262                                  NOT_IN_TABLE:
  5263 000006D5 88F8                    	MOV	AL,BH			; Restore original code
  5264 000006D7 EB0C                    	JMP	SHORT NO_MAP
  5265                                  
  5266                                  GOT_CALL:
  5267 000006D9 88E1                    	MOV	CL,AH
  5268 000006DB 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5269                                  CHECK_CODE:
  5270                                  	; 15/05/2019 - Retro DOS v4.0
  5271 000006DD 2E                      	cs
  5272 000006DE AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5273                                  
  5274                                  	; 18/07/2018
  5275                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5276                                  
  5277 000006DF 38F8                    	CMP	AL,BH			; Code OK?
  5278 000006E1 7402                    	JZ	short NO_MAP		; Yes
  5279 000006E3 E2F8                    	LOOP	CHECK_CODE
  5280                                  NO_MAP:
  5281 000006E5 30E4                    	XOR	AH,AH			; AX is now valid code
  5282 000006E7 5B                      	POP	BX
  5283 000006E8 59                      	POP	CX
  5284 000006E9 5E                      	POP	SI
  5285 000006EA 1F                      	POP	DS
  5286 000006EB C3                      	retn
  5287                                  
  5288                                  	;EndProc ETAB_LK
  5289                                  
  5290                                  ; 18/07/2018 - Retro DOS v3.0
  5291                                  ;---------------------------------------------------------------------------
  5292                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5293                                  
  5294                                  ;IF installed ; (*)
  5295                                  
  5296                                  ;---------------------------------------------------------------------------
  5297                                  ;
  5298                                  ; Procedure Name : SetBad
  5299                                  ;
  5300                                  ; SetBad sets up info for bad functions
  5301                                  ;
  5302                                  ;---------------------------------------------------------------------------
  5303                                  
  5304                                  SetBad:
  5305                                  	;mov	ax,1
  5306 000006EC B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5307                                  
  5308                                  	; MSDOS 3.3
  5309                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5310                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5311                                  
  5312                                  ;	set up ds to point to DOSDATA
  5313                                  
  5314                                  	; 15/05/2019 - Retro DOS v4.0
  5315                                  	; MSDOS 6.0
  5316 000006EF 1E                      	push	ds
  5317                                  
  5318                                  	;getdseg <ds>
  5319 000006F0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5320                                  
  5321 000006F5 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5322                                  
  5323 000006FA 1F                      	pop	ds	  	;hkn; restore ds
  5324                                  
  5325 000006FB F9                      	STC
  5326 000006FC C3                      	retn
  5327                                  
  5328                                  ;--------------------------------------------------------------------------
  5329                                  ;
  5330                                  ; Procedure Name : BadCall
  5331                                  ;
  5332                                  ; BadCall is the initial routine for bad function calls
  5333                                  ;
  5334                                  ;--------------------------------------------------------------------------
  5335                                  
  5336                                  BadCall:
  5337 000006FD E8ECFF                  	call	SetBad
  5338 00000700 CB                      	retf
  5339                                  
  5340                                  ;--------------------------------------------------------------------------
  5341                                  ;
  5342                                  ; OKCall always sets carry to off.
  5343                                  ;
  5344                                  ;-----------------------------------------------------------------------
  5345                                  
  5346                                  OKCall:
  5347 00000701 F8                      	CLC
  5348 00000702 CB                      	retf
  5349                                  
  5350                                  ;---------------------------------------------------------------------------
  5351                                  ;
  5352                                  ; Procedure Name : INT2F
  5353                                  ;
  5354                                  ; INT 2F handler works as follows:
  5355                                  ;   PUSH    AX
  5356                                  ;   MOV     AX,multiplex:function
  5357                                  ;   INT     2F
  5358                                  ;   POP     ...
  5359                                  ; The handler itself needs to make the AX available for the various routines.
  5360                                  ;
  5361                                  ;----------------------------------------------------------------------------
  5362                                  
  5363                                  ; 15/05/2019 - Retro DOS v4.0
  5364                                  
  5365                                  ;KERNEL_SEGMENT equ 70h
  5366                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5367                                  DOSBIODATASEG equ 70h
  5368                                  
  5369                                  ; retrodos4.s - offset in BIOSDATA
  5370                                  bios_i2f equ 5
  5371                                  
  5372                                  ;PUBLIC	Int2F
  5373                                  ;INT2F	PROC	FAR
  5374                                  
  5375                                  ; 15/05/2019
  5376                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5377                                  
  5378                                  ; 04/11/2022
  5379                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5380                                  
  5381                                  	; 05/01/2024
  5382                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5383                                  	; 18/07/2018 - Retro DOS v3.0
  5384                                  INT2F:
  5385                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5386                                  INT2FNT:
  5387                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5388 00000703 FB                      	STI
  5389                                  	;cmp	ah,11h
  5390 00000704 80FC11                  	CMP	AH,MultNET
  5391 00000707 750A                    	JNZ	short INT2FSHR
  5392                                  TestInstall:
  5393 00000709 08C0                    	OR	AL,AL
  5394 0000070B 7403                    	JZ	short Leave2F
  5395                                  BadFunc:
  5396 0000070D E8DCFF                  	CALL	SetBad
  5397                                  
  5398                                  	;entry	Leave2F
  5399                                  Leave2F:
  5400 00000710 CA0200                  	RETF	2			; long return + clear flags off stack
  5401                                  
  5402                                  INT2FSHR:
  5403                                  	;cmp	ah,10h
  5404 00000713 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5405 00000716 74F1                    	JZ	short TestInstall	; yes, check for installation
  5406                                  INT2FNLS:
  5407                                  	;cmp	ah,14h
  5408 00000718 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5409 0000071B 74EC                    	JZ	short TestInstall	; yes check for installation
  5410                                  INT2FDOS:
  5411                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5412                                  
  5413                                  	; 18/07/2018
  5414                                  	; MSDOS 3.3
  5415                                  	;;cmp	ah,12h	
  5416                                  	;CMP	AH,MultDOS
  5417                                  	;jz	short DispatchDOS
  5418                                  	;iret
  5419                                  
  5420                                  	; 15/05/2019
  5421                                  	; MSDOS 6.0
  5422                                  	;cmp	ah,12h	; 07/12/2022
  5423 0000071D 80FC12                  	CMP	AH,MultDOS
  5424 00000720 7503                    	JNZ	short check_win		;check if win386 broadcast
  5425 00000722 E9F201                  	jmp	DispatchDOS
  5426                                  
  5427                                  	; .... win386 .... 
  5428                                  
  5429                                  check_win:
  5430                                  	;cmp	ah,16h
  5431 00000725 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5432 00000728 7408                    	je	short Win386_Msg
  5433                                  
  5434                                  	; M044
  5435                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5436                                  	; of Windows. If so, do special action of going and saving last para
  5437                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5438                                  	; bug
  5439                                  
  5440 0000072A 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5441                                  	;jne	short next_i2f		; no, chain on
  5442                                  	; 15/12/2022
  5443                                  	;jmp	winold_swap		; yes, do desired action
  5444 0000072D 7442                    	je	short winold_swap
  5445 0000072F E90501                  	jmp	next_i2f
  5446                                  
  5447                                  	; 15/12/2022
  5448                                  ;next_i2f:
  5449                                  ;	;;;jmp	bios_i2f
  5450                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5451                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5452                                  ;	; 04/11/2022
  5453                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5454                                  
  5455                                  ;	IRET				; This assume that we are at the head
  5456                                  					; of the list
  5457                                  ;INT2F	ENDP
  5458                                  
  5459                                  ; 15/05/2019 - Retro DOS v4.0
  5460                                  
  5461                                  ; We have received a message from Win386. There are three possible
  5462                                  ; messages we could get from Win386:
  5463                                  ;
  5464                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5465                                  ;		  to the Win386 startup info structure.
  5466                                  ; Exit		- for this, we clear the IsWin386 flag.
  5467                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5468                                  ;		  has already been handled. this is indicated by setting
  5469                                  ;		  CX to a non-zero value.
  5470                                  
  5471                                  Win386_Msg:
  5472 00000732 1E                      	push	ds
  5473                                  
  5474                                  	;getdseg <DS>			; ds is DOSDATA
  5475 00000733 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5476                                  
  5477                                  	; For WIN386 2.xx instance data
  5478                                  
  5479 00000738 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5480 0000073A 7503                    	jne	short Win386_Msg_exit
  5481 0000073C E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5482                                  Win386_Msg_exit:
  5483 0000073F 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5484 00000741 7503                    	jne	short Win386_Msg_devcall
  5485 00000743 E92C01                  	jmp	Win386_Leaving
  5486                                  Win386_Msg_devcall:
  5487 00000746 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5488 00000748 7503                    	jne	short Win386_Msg_init
  5489 0000074A E96001                  	jmp	Win386_Query
  5490                                  Win386_Msg_init:
  5491 0000074D 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5492 0000074F 7403                    	je	short Win386_Starting
  5493 00000751 E9E200                  	jmp	win_nexti2f		; no, return
  5494                                  Win386_Starting:
  5495                                  	; 17/12/2022
  5496 00000754 F6C201                  	test	dl,1
  5497                                  	;test	dx,1			; is this really win386?
  5498 00000757 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5499 00000759 E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5500                                  Win386_vchk:
  5501                                  	; M018 -- start of block changes
  5502                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5503                                  	; than 030Ah, we skip the VxD presence check
  5504                                  
  5505                                  ;M067 -- Begin changes
  5506                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5507                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5508                                  ;So, we null out the VxD ptr before the check.
  5509                                  
  5510                                  	;mov	word [Win386_Info+6],0
  5511 0000075C C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5512                                  	;mov	word [Win386_Info+8],0
  5513 00000762 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5514                                  
  5515                                  ;M067 -- End changes
  5516                                  
  5517                                  ;ifdef JAPAN
  5518                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5519                                  ;else
  5520 00000768 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5521                                  ;endif
  5522                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5523 0000076C 724E                    	jb	short Win386_vxd
  5524 0000076E E9DD00                  	jmp	noVxD31
  5525                                  
  5526                                  	; 15/12/2022
  5527                                  winold_swap:
  5528 00000771 1E                      	push	ds
  5529 00000772 06                      	push	es
  5530 00000773 56                      	push	si
  5531 00000774 57                      	push	di
  5532 00000775 51                      	push	cx
  5533                                  
  5534                                  	;getdseg <ds>			;ds = DOSDATA
  5535 00000776 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5536                                  
  5537 0000077B 3C01                    	cmp	al,1			;swap Windows out call
  5538 0000077D 751B                    	jne	short swapin		;no, check if Swap in call
  5539 0000077F E88801                  	call	getwinlast
  5540 00000782 1E                      	push	ds
  5541 00000783 07                      	pop	es
  5542 00000784 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5543 00000786 31F6                    	xor	si,si
  5544 00000788 BF[0600]                	mov	di,WinoldPatch1
  5545 0000078B B90800                  	mov	cx,8
  5546 0000078E FC                      	cld
  5547 0000078F 51                      	push	cx
  5548 00000790 F3A4                    	rep	movsb			;save first 8 bytes
  5549 00000792 59                      	pop	cx
  5550 00000793 BF[CD0D]                	mov	di,WinoldPatch2
  5551 00000796 F3A4                    	rep	movsb			;save next 8 bytes
  5552 00000798 EB1B                    	jmp	short winold_done
  5553                                  swapin:
  5554 0000079A 3C02                    	cmp	al,2			;swap Windows in call?
  5555 0000079C 7517                    	jne	short winold_done	;no, something else, pass it on
  5556 0000079E E86901                  	call	getwinlast
  5557 000007A1 8EC6                    	mov	es,si
  5558 000007A3 31FF                    	xor	di,di
  5559 000007A5 BE[0600]                	mov	si,WinoldPatch1
  5560 000007A8 B90800                  	mov	cx,8
  5561 000007AB FC                      	cld
  5562 000007AC 51                      	push	cx
  5563 000007AD F3A4                    	rep	movsb			;restore first 8 bytes
  5564 000007AF 59                      	pop	cx
  5565 000007B0 BE[CD0D]                	mov	si,WinoldPatch2
  5566 000007B3 F3A4                    	rep	movsb			;restore next 8 bytes
  5567                                  winold_done:
  5568 000007B5 59                      	pop	cx
  5569 000007B6 5F                      	pop	di
  5570 000007B7 5E                      	pop	si
  5571 000007B8 07                      	pop	es
  5572 000007B9 1F                      	pop	ds
  5573 000007BA EB7B                    	jmp	short next_i2f		;chain on
  5574                                  	; 15/12/2022
  5575                                  	;jmp	next_i2f	
  5576                                  
  5577                                  Win386_vxd:
  5578 000007BC 50                      	push	ax
  5579 000007BD 53                      	push	bx
  5580 000007BE 51                      	push	cx
  5581 000007BF 52                      	push	dx
  5582 000007C0 56                      	push	si
  5583 000007C1 57                      	push	di			; save regs !!dont change order!!
  5584                                  
  5585 000007C2 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5586 000007C6 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5587 000007C9 741F                    	je	short Vxd31		; N: continue
  5588                                  					; Y: save arena associated with 
  5589                                  					;    umb_head
  5590                                  
  5591 000007CB C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5592                                  					; umb_arena
  5593 000007D0 1E                      	push	ds
  5594 000007D1 06                      	push	es
  5595                                  
  5596                                  	;mov	ax,ds
  5597                                  	;mov	es,ax			; es - > dosdata
  5598                                  	; 05/01/2024
  5599 000007D2 1E                      	push	ds
  5600 000007D3 07                      	pop	es
  5601                                  
  5602 000007D4 8EDB                    	mov	ds,bx
  5603 000007D6 31F6                    	xor	si,si			; ds:si -> umb_head
  5604                                  
  5605 000007D8 FC                      	cld
  5606                                  
  5607 000007D9 BF[F511]                	mov	di,UmbSave1
  5608 000007DC B90B00                  	mov	cx,11
  5609 000007DF F3A4                    	rep	movsb
  5610                                  
  5611 000007E1 BF[D50D]                	mov	di,UmbSave2
  5612                                  	;mov	cx,5
  5613                                  	; 18/12/2022
  5614 000007E4 B105                    	mov	cl,5
  5615 000007E6 F3A4                    	rep	movsb	
  5616                                  
  5617 000007E8 07                      	pop	es
  5618 000007E9 1F                      	pop	ds			; M062 - End
  5619                                  
  5620                                  Vxd31:
  5621                                  	;test	byte [DOS_FLAG],2
  5622 000007EA F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5623 000007EF 7408                    	jz	short Dont_Supress		; M066
  5624 000007F1 5F                      	pop	di				; M066
  5625 000007F2 5E                      	pop	si				; M066
  5626 000007F3 5A                      	pop	dx				; M066
  5627 000007F4 59                      	pop	cx				; M066
  5628 000007F5 5B                      	pop	bx				; M066
  5629 000007F6 58                      	pop	ax				; M066
  5630 000007F7 EB55                    	jmp	short noVxD31			; M066
  5631                                  
  5632                                  	; We check here if the VxD is available in the root of the boot drive. 
  5633                                  	; We do an extended open to suppress any error messages
  5634                                  	
  5635                                  Dont_Supress:
  5636 000007F9 A0[6900]                	mov	al,[BOOTDRIVE]
  5637 000007FC 0440                    	add	al,'A' - 1		; get drive letter
  5638 000007FE A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5639                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5640                                  	;mov	al,0			; no extended attributes
  5641                                  	; 18/12/2022
  5642 00000801 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5643 00000804 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5644                                  					; no inherit, suppress crit err
  5645 00000807 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5646 0000080A BA0100                  	mov	dx,1			; fail if file does not exist
  5647 0000080D BE[3110]                	mov	si,VxDpath	
  5648                                  					; path of VxD file
  5649 00000810 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5650                                  
  5651 00000813 CD21                    	int	21h			; do extended open
  5652                                  
  5653 00000815 5F                      	pop	di
  5654 00000816 5E                      	pop	si
  5655 00000817 5A                      	pop	dx
  5656 00000818 59                      	pop	cx
  5657                                  
  5658 00000819 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5659                                  
  5660                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5661                                  	; to indicate error to Windows after displaying message to user that 
  5662                                  	; VxD needs to be present to run Windows in enhanced mode.
  5663                                  
  5664 0000081B 52                      	push	dx
  5665 0000081C 1E                      	push	ds
  5666 0000081D 56                      	push	si
  5667 0000081E BE[B209]                	mov	si,NoVxDErrMsg
  5668 00000821 0E                      	push	cs
  5669 00000822 1F                      	pop	ds
  5670 00000823 B96300                  	mov	cx,VxDMesLen ; 99	;
  5671 00000826 B402                    	mov	ah,2			; write char to console
  5672 00000828 FC                      	cld
  5673                                  vxdlp:
  5674 00000829 AC                      	lodsb
  5675 0000082A 86D0                    	xchg	dl,al			; get char in dl
  5676 0000082C CD21                    	int	21h
  5677 0000082E E2F9                    	loop	vxdlp
  5678                                  
  5679 00000830 5E                      	pop	si
  5680 00000831 1F                      	pop	ds
  5681 00000832 5A                      	pop	dx
  5682 00000833 5B                      	pop	bx
  5683 00000834 58                      	pop	ax			;all registers restored
  5684 00000835 41                      	inc	cx			;cx != 0 to indicate error
  5685                                  	; 15/12/22022
  5686                                  	;jmp	win_nexti2f		;chain on
  5687                                  	;jmp	short win_nexti2f
  5688                                  
  5689                                  	; 15/12/2022
  5690                                  win_nexti2f:
  5691 00000836 1F                      	pop	ds
  5692                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5693                                  	; 15/12/2022
  5694                                  next_i2f:
  5695                                  	;;;jmp	bios_i2f
  5696                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5697                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5698                                  	; 04/11/2022
  5699 00000837 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5700                                  
  5701                                  VxDthere:
  5702 0000083C 89C3                    	mov	bx,ax
  5703 0000083E B43E                    	mov	ah,CLOSE ; 3Eh
  5704 00000840 CD21                    	int	21h			;close the file
  5705                                  
  5706                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5707                                  
  5708                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5709                                  	;mov	bx,Win386_Info
  5710                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5711                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5712                                  	; 15/12/2022
  5713 00000842 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5714 00000848 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5715                                  
  5716 0000084C 5B                      	pop	bx
  5717 0000084D 58                      	pop	ax
  5718                                  noVxD31:
  5719                                  	; M018; End of block changes
  5720                                  
  5721 0000084E 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5722 00000853 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5723                                  
  5724                                  	; M002;
  5725                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5726                                  
  5727 00000858 52                      	push	dx			; M002
  5728 00000859 89DA                    	mov	dx,bx			; M002
  5729                                  					; point ES:BX to Win386_Info ; M002
  5730 0000085B BB[E20F]                	mov	bx,Win386_Info 
  5731 0000085E 895702                  	mov	[bx+2],dx		; M002
  5732 00000861 8C4704                  	mov	[bx+4],es		; M002
  5733 00000864 5A                      	pop	dx			; M002
  5734 00000865 1E                      	push	ds			; M002
  5735 00000866 07                      	pop	es			; M002
  5736                                  	;jmp	win_nexti2f		; M002
  5737                                  	; 15/12/2022
  5738 00000867 EBCD                    	jmp	short win_nexti2f
  5739                                  
  5740                                  	; 15/12/2022
  5741                                  	; Code to return Win386 2.xx instance table
  5742                                  OldWin386Init:
  5743 00000869 58                      	pop	ax			; discard ds pushed on stack
  5744 0000086A BE[C811]                	mov	si,OldInstanceJunk 
  5745                                  					; ds:si = instance table
  5746 0000086D B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5747                                  	;jmp	next_i2f
  5748                                  	; 15/12/2022
  5749 00000870 EBC5                    	jmp	short next_i2f
  5750                                  
  5751                                  Win386_Leaving:
  5752                                  	; 15/12/2022
  5753 00000872 F6C201                  	test 	dl,1
  5754                                  	;test	dx,1			; is this really win386?
  5755                                  	;jz	short Win386_Leaving_c
  5756                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5757                                  	; 15/12/2022
  5758 00000875 75BF                    	jnz	short win_nexti2f	
  5759                                  
  5760                                  Win386_Leaving_c:
  5761                                  					; M062 - Start
  5762 00000877 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5763                                  					;    up.
  5764 0000087C 7523                    	jne	short noumb		; N: not saved 
  5765 0000087E C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5766                                  					;    previously saved umb_head
  5767                                  	; 05/01/2024
  5768                                  	;push	ax ; (not necessary)
  5769 00000883 06                      	push	es
  5770 00000884 51                      	push	cx
  5771 00000885 56                      	push	si
  5772 00000886 57                      	push	di
  5773                                  
  5774                                  	;mov	ax,[UMB_HEAD]
  5775                                  	;mov	es,ax
  5776                                  	; 05/01/2024
  5777 00000887 8E06[8C00]              	mov	es,[UMB_HEAD]
  5778 0000088B 31FF                    	xor	di,di			; es:di -> umb_head
  5779                                  
  5780 0000088D FC                      	cld
  5781                                  
  5782 0000088E BE[F511]                	mov	si,UmbSave1
  5783 00000891 B90B00                  	mov	cx,11
  5784 00000894 F3A4                    	rep	movsb
  5785 00000896 BE[D50D]                	mov	si,UmbSave2
  5786                                  	;mov	cx,5
  5787                                  	; 18/12/2022
  5788 00000899 B105                    	mov	cl,5
  5789 0000089B F3A4                    	rep	movsb
  5790                                  
  5791 0000089D 5F                      	pop	di
  5792 0000089E 5E                      	pop	si
  5793 0000089F 59                      	pop	cx
  5794 000008A0 07                      	pop	es
  5795                                  	; 05/01/2024
  5796                                  	;pop	ax
  5797                                  noumb:					; M062 - End
  5798 000008A1 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5799 000008A6 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5800 000008AB EB89                    	jmp	short win_nexti2f
  5801                                  
  5802                                  ;	; 15/12/2022
  5803                                  ;	; Code to return Win386 2.xx instance table
  5804                                  ;OldWin386Init:
  5805                                  ;	pop	ax			; discard ds pushed on stack
  5806                                  ;	mov	si,OldInstanceJunk 
  5807                                  ;					; ds:si = instance table
  5808                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5809                                  ;	;jmp	next_i2f
  5810                                  ;	; 15/12/2022
  5811                                  ;	jmp	short _next_i2f
  5812                                  
  5813                                  Win386_Query:
  5814 000008AD 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5815 000008B0 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5816 000008B2 09C9                    	or	cx,cx			; is it an instance query?
  5817 000008B4 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5818 000008B6 41                      	inc	cx			; indicate that data is instanced
  5819                                  ;
  5820                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5821                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5822                                  ; M001;  
  5823                                  ; M001; OFFSETS STRUC
  5824                                  ; M001; 	Major_version	db	?
  5825                                  ; M001; 	Minor_version	db	?
  5826                                  ; M001; 	SaveDS		dw	?
  5827                                  ; M001; 	SaveBX		dw	?
  5828                                  ; M001; 	Indos		dw	?
  5829                                  ; M001; 	User_id		dw	?
  5830                                  ; M001; 	CritPatch	dw	?
  5831                                  ; M001; OFFSETS	ENDS
  5832                                  ; M001; 
  5833                                  ; M001; User_Id is the only variable really important for proper functioning  
  5834                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5835                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5836                                  ; M001; pass this table because Win386 depends on this table to get the 
  5837                                  ; M001; User_Id offset.
  5838                                  ; M001; 
  5839 000008B7 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5840 000008BA 1E                      	push	ds			; M001
  5841 000008BB 07                      	pop	es			; es:bx points at offset table ; M001
  5842 000008BC EB40                    	jmp	short PopIret		; M001
  5843                                  
  5844                                  ; 15/12/2022
  5845                                  ;	; Code to return Win386 2.xx instance table
  5846                                  ;OldWin386Init:
  5847                                  ;	pop	ax			; discard ds pushed on stack
  5848                                  ;	mov	si,OldInstanceJunk 
  5849                                  ;					; ds:si = instance table
  5850                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5851                                  ;	;jmp	next_i2f
  5852                                  ;	; 15/12/2022
  5853                                  ;	jmp	short _next_i2f
  5854                                  
  5855                                  dosmgr_func:
  5856 000008BE 49                      	dec	cx
  5857 000008BF 7435                    	jz	short win386_patch	; call to patch DOS
  5858 000008C1 49                      	dec	cx
  5859 000008C2 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5860 000008C4 49                      	dec	cx
  5861 000008C5 7439                    	jz	short win386_size	; get size of DOS data structures
  5862 000008C7 49                      	dec	cx
  5863 000008C8 7428                    	jz	short win386_inst	; instance more data
  5864                                  	;dec	cx
  5865                                  	;jnz	short PopIret		; no functions above this
  5866                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5867 000008CA E232                    	loop	PopIret
  5868                                  
  5869                                  	; Get DOS device driver size -- es:di points at device driver header
  5870                                  	; In DOS 4.x, the para before the device header contains an arena 
  5871                                  	; header for the driver.
  5872                                  
  5873 000008CC 8CC0                    	mov	ax,es			; ax = device header segment
  5874                                  
  5875                                  	; We check to see if we have a memory arena for this device driver. 
  5876                                  	; The way to do this would be to look at the previous para to see if
  5877                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5878                                  	; in the arena is the same as the device header segment. These two 
  5879                                  	; checks together should take care of all cases
  5880                                  
  5881 000008CE 48                      	dec	ax			; get arena header
  5882 000008CF 06                      	push	es
  5883 000008D0 8EC0                    	mov	es,ax			; arena header for device driver
  5884                                  
  5885 000008D2 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5886 000008D6 7517                    	jnz	short cantsize		; no, cant size this driver
  5887 000008D8 40                      	inc	ax			; get back device header segment
  5888 000008D9 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5889 000008DD 7510                    	jnz	short cantsize		; no, not a proper arena
  5890                                  
  5891 000008DF 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5892 000008E3 07                      	pop	es
  5893                                  
  5894                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5895                                  	; Speed is not critical and so we choose the shortest method 
  5896                                  	; -- use "mul"
  5897                                  
  5898 000008E4 BB1000                  	mov	bx,16
  5899 000008E7 F7E3                    	mul	bx
  5900 000008E9 89C1                    	mov	cx,ax
  5901 000008EB 89D3                    	mov	bx,dx
  5902 000008ED EB09                    	jmp	short win386_done	; return with device driver size
  5903                                  cantsize:
  5904 000008EF 07                      	pop	es
  5905 000008F0 31C0                    	xor	ax,ax
  5906                                  win386_inst:	; 05/01/2024
  5907 000008F2 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5908 000008F4 EB08                    	jmp	short PopIret		; return
  5909                                  
  5910                                  win386_patch:
  5911                                  	; dx contains bits marking the patches to be applied. We return 
  5912                                  	; the field with all bits set to indicate that all patches have been
  5913                                  	; done
  5914                                  
  5915 000008F6 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5916                                   	;jmp	short win386_done	; done, return
  5917                                  	; 15/12/2022
  5918                                  	; 15/12/2022
  5919                                  win386_done:
  5920 000008F8 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5921 000008FB BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5922                                  PopIret:
  5923 000008FE 1F                      	pop	ds
  5924 000008FF CF                      	iret	
  5925                                  
  5926                                  win386_size:
  5927                                  	; Return the size of DOS data structures -- currently only CDS size
  5928                                  
  5929                                  	; 17/12/2022
  5930 00000900 F6C201                  	test	dl,1
  5931                                  	;test	dx,1			; check for CDS size bit
  5932 00000903 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5933                                  
  5934 00000905 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5935 00000908 EBEE                    	jmp	short win386_done	; return with the size
  5936                                  
  5937                                  ; 05/01/2024
  5938                                  %if 0
  5939                                  win386_inst:
  5940                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5941                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5942                                  	; this by returning a status of not previously instanced. The basic
  5943                                  	; structure of these things have not changed and so the current
  5944                                  	; DOSMGR code should be able to work it out
  5945                                  
  5946                                  	xor	dx,dx			; make sure dx has a not done value
  5947                                  	jmp	short PopIret		; skip done indication
  5948                                  %endif
  5949                                  
  5950                                  	; 15/12/2022
  5951                                  ;win386_done:
  5952                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5953                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5954                                  ;PopIret:
  5955                                  ;	pop	ds
  5956                                  ;	iret				; return back up the chain
  5957                                  
  5958                                  	; 15/12/2022
  5959                                  ;win_nexti2f:
  5960                                  	;pop	ds
  5961                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5962                                  
  5963                                  ;End WIN386 support
  5964                                  
  5965                                  ; 15/05/2019
  5966                                  
  5967                                  ;M044; Start of changes
  5968                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5969                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5970                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5971                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5972                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5973                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5974                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5975                                  ; last para of the Windows memory block and then restore this para on the
  5976                                  ; Windows swapin callout. 
  5977                                  
  5978                                  getwinlast:
  5979                                  	; 07/12/2022
  5980 0000090A 8B36[3003]              	mov	si,[CurrentPDB]
  5981 0000090E 4E                      	dec	si
  5982 0000090F 8EC6                    	mov	es,si
  5983 00000911 2603360300              	add	si,[es:3]
  5984 00000916 C3                      	retn
  5985                                  
  5986                                  ; 15/12/2022
  5987                                  %if 0
  5988                                  winold_swap:
  5989                                  	push	ds
  5990                                  	push	es
  5991                                  	push	si
  5992                                  	push	di
  5993                                  	push	cx
  5994                                  
  5995                                  	;getdseg <ds>			;ds = DOSDATA
  5996                                  	mov	ds,[cs:DosDSeg]
  5997                                  
  5998                                  	cmp	al,1			;swap Windows out call
  5999                                  	jne	short swapin		;no, check if Swap in call
  6000                                  	call	getwinlast
  6001                                  	push	ds
  6002                                  	pop	es
  6003                                  	mov	ds,si			;ds = memory arena of Windows
  6004                                  	xor	si,si
  6005                                  	mov	di,WinoldPatch1
  6006                                  	mov	cx,8
  6007                                  	cld
  6008                                  	push	cx
  6009                                  	rep	movsb			;save first 8 bytes
  6010                                  	pop	cx
  6011                                  	mov	di,WinoldPatch2
  6012                                  	rep	movsb			;save next 8 bytes
  6013                                  	jmp	short winold_done
  6014                                  swapin:
  6015                                  	cmp	al,2			;swap Windows in call?
  6016                                  	jne	short winold_done	;no, something else, pass it on
  6017                                  	call	getwinlast
  6018                                  	mov	es,si
  6019                                  	xor	di,di
  6020                                  	mov	si,WinoldPatch1
  6021                                  	mov	cx,8
  6022                                  	cld
  6023                                  	push	cx
  6024                                  	rep	movsb			;restore first 8 bytes
  6025                                  	pop	cx
  6026                                  	mov	si,WinoldPatch2
  6027                                  	rep	movsb			;restore next 8 bytes
  6028                                  winold_done:
  6029                                  	pop	cx
  6030                                  	pop	di
  6031                                  	pop	si
  6032                                  	pop	es
  6033                                  	pop	ds
  6034                                  	jmp	next_i2f		;chain on
  6035                                  
  6036                                  %endif
  6037                                  
  6038                                  ;M044; End of changes
  6039                                  
  6040                                  ; 15/05/2019
  6041                                  
  6042                                  DispatchDOS:
  6043 00000917 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6044 0000091C 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6045 00000921 50                      	PUSH	AX			; push index
  6046 00000922 55                      	PUSH	BP
  6047 00000923 89E5                    	MOV	BP,SP
  6048                                  		; stack looks like:
  6049                                  		;   0	BP
  6050                                  		;   2	DISPATCH
  6051                                  		;   4	TABLE
  6052                                  		;   6	RETURN
  6053                                  		;   8	LONG-RETURN
  6054                                  		;   C	FLAGS
  6055                                  		;   E	AX
  6056                                  	
  6057 00000925 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6058 00000928 5D                      	POP	BP
  6059 00000929 E8DA08                  	call	TableDispatch
  6060 0000092C E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6061                                  
  6062                                  INT2F_etcetera:
  6063                                  	;entry	DosGetGroup
  6064                                  DosGetGroup:
  6065                                  	; MSDOS 3.3
  6066                                  	;push	cs
  6067                                  	;pop	ds
  6068                                  	;retn
  6069                                  
  6070                                  	; MSDOS 6.0
  6071                                  ;SR; Cannot use CS now
  6072                                  ;
  6073                                  ;	PUSH	CS
  6074                                  ;	POP	DS
  6075                                  
  6076                                  	; 04/11/2022
  6077                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6078                                  
  6079                                  	;getdseg <ds>
  6080 0000092F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6081 00000934 C3                      	retn
  6082                                  
  6083                                  	;entry	DOSInstall
  6084                                  DOSInstall:
  6085 00000935 B0FF                    	MOV	AL,0FFh
  6086 00000937 C3                      	retn
  6087                                  
  6088                                  ;ENDIF ; (*)
  6089                                  
  6090                                  
  6091                                  ; 15/05/2019 - Retro DOS v4.0
  6092                                  
  6093                                  ;------------------------------------------------------------------------
  6094                                  ;
  6095                                  ; Procedure Name : RW32_CONVERT
  6096                                  ;
  6097                                  ;Input: same as ABSDRD and ABSDWRT
  6098                                  ;	 ES:BP -> DPB
  6099                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6100                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6101                                  ;	 carry clear, parms ok
  6102                                  ;
  6103                                  ;------------------------------------------------------------------------
  6104                                  
  6105                                  	; 06/01/2024
  6106                                  RW32_CONVERT:
  6107                                  	;inc	cx ; *	; 01 -> 0
  6108 00000938 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6109 0000093B 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6110                                  	;dec	cx ; *
  6111 0000093D 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6112 0000093E 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6113                                  	;mov	ax,[es:bp+0Dh]
  6114 0000093F 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6115                                  	;mov	dl,[es:bp+4]
  6116 00000943 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6117 00000947 80FAFE                  	CMP	DL,0FEh ; 254		;>32mb  removable ?	;AN000;
  6118 0000094A 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6119                                  	;INC	DL			;>32mb			;AN000;
  6120                                  	; 17/12/2022
  6121 0000094C 42                      	inc	dx
  6122 0000094D 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6123 0000094F F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6124 00000951 09D2                    	OR	DX,DX	; (clears CF)	;>32mb  > 32mb ?	;AN000;
  6125                                  letold:
  6126 00000953 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6127 00000954 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6128 00000955 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6129                                  
  6130 00000957 1E                      	push	ds
  6131                                  	;getdseg <ds>
  6132 00000958 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6133 0000095D C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6134 00000963 1F                      	pop	ds
  6135                                  
  6136 00000964 F9                      	STC				;>32mb			;AN000;
  6137 00000965 C3                      	retn				;>32mb			;AN000;
  6138                                  
  6139                                  new32format:
  6140                                  	;mov	dx,[bx+2]
  6141 00000966 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6142                                  
  6143 00000969 1E                      	push	ds			; set up ds to DOSDATA
  6144                                  	;getdseg <ds>
  6145 0000096A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6146 0000096F 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6147 00000973 1F                      	pop	ds
  6148                                  
  6149 00000974 8B17                    	mov	dx,[bx]
  6150                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6151                                  	;mov	cx,[bx+4]
  6152 00000976 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6153                                  	;lds	bx,[bx+6]
  6154 00000979 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6155                                  old_style:				;>32mb			;AN000;
  6156                                  	; 06/01/2024
  6157                                  	; cf=0
  6158                                  	;CLC				;>32mb			;AN000;
  6159 0000097C C3                      	retn				;>32mb			;AN000;
  6160                                  
  6161                                  ;------------------------------------------------------------------------
  6162                                  ;
  6163                                  ; Procedure Name : Fastxxx_Purge
  6164                                  ;
  6165                                  ; Input: None
  6166                                  ; Functions: Purge Fastopen/ Cache Buffers
  6167                                  ; Output: None
  6168                                  ;
  6169                                  ;------------------------------------------------------------------------
  6170                                  
  6171                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6172                                  
  6173                                  Fastxxx_Purge:
  6174 0000097D 50                      	PUSH	AX			; save regs.	;AN000;
  6175 0000097E 56                      	PUSH	SI						;AN000;
  6176 0000097F 52                      	PUSH	DX						;AN000;
  6177                                  topen:
  6178 00000980 1E                      	push	ds			; set up ds to DOSDATA
  6179                                  	;getdseg <ds>
  6180 00000981 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6181                                  
  6182 00000986 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6183                                  					; fastopen installed ?	;AN000;
  6184 0000098B 1F                      	pop	ds
  6185 0000098C 740B                    	JZ	short nofast		; no			;AN000;
  6186 0000098E B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6187                                  dofast:
  6188 00000990 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6189                                  	;;mov	dl,[es:bp+0]
  6190                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6191                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6192                                  	; 15/12/2022
  6193 00000992 268A5600                	mov	dl,[es:bp]
  6194                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6195 00000996 E8F31C                  	call	Fast_Dispatch
  6196                                  nofast:
  6197 00000999 5A                      	POP	DX						;AN000;
  6198 0000099A 5E                      	POP	SI			; restore regs		;AN000;
  6199 0000099B 58                      	POP	AX			 			;AN000;
  6200 0000099C C3                      	retn				; exit
  6201                                  
  6202                                  ;============================================================================
  6203                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6204                                  ;============================================================================
  6205                                  ; 29/04/2019 - Retro DOS v4.0
  6206                                  
  6207                                  ;include dossym.inc
  6208                                  ;include dosmac.inc
  6209                                  ;include doscntry.inc
  6210                                  
  6211                                  ; DOSCODE Segment
  6212                                  
  6213                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6214                                  ; ---------------------------------------------------------------------------
  6215                                  ;include divmes.inc
  6216                                  
  6217                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; -------------------------------------
  6219                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6220                                  
  6221                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6222                                  	;PUBLIC	DIVMES
  6223                                  
  6224 0000099D 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6224 000009A6 6F766572666C6F770D-
  6224 000009AF 0A                 
  6225                                  
  6226                                  	;PUBLIC	DivMesLen
  6227                                  DivMesLen:
  6228 000009B0 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6229                                  
  6230                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6231                                  ; -------------------------------------
  6232                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6233                                  
  6234                                  ; (MSDOS 6.0)
  6235                                  ; VxD not found error message
  6236                                  
  6237                                  NoVxDErrMsg:
  6238 000009B2 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6238 000009BB 686176652074686520-
  6238 000009C4 66696C652057494E41-
  6238 000009CD 32302E33383620696E-
  6238 000009D6 2074686520726F6F74-
  6238 000009DF 206F6620796F757220-
  6238 000009E8 626F6F742064726976-
  6238 000009F1 65                 
  6239 000009F2 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6239 000009FB 57696E646F77732069-
  6239 00000A04 6E20456E68616E6365-
  6239 00000A0D 64204D6F64650D0A   
  6240                                  
  6241                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6242                                  
  6243                                  ; 13/05/2019 - Retro DOS v4.0
  6244                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6245                                  
  6246                                  ;include yesno.asm  (MNSDOS 6.0)
  6247                                  ; -------------------------------------
  6248                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6249                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6250                                  
  6251                                  ; This is for country Yes and No
  6252                                  
  6253 00000A15 59                      NLS_YES:	db 'Y'
  6254 00000A16 4E                      NLS_NO:		db 'N'
  6255 00000A17 79                      NLS_yes2:	db 'y'
  6256 00000A18 6E                      NLS_no2:	db 'n'
  6257                                  
  6258                                  ; ---------------------------------------------------------------------------
  6259                                  
  6260                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6261                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6262                                  
  6263                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6264                                  
  6265                                  ; The following two tables implement the current buffered input editing
  6266                                  ; routines. The tables are pairwise associated in reverse order for ease
  6267                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6268                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6269                                  
  6270                                  	;PUBLIC	CANCHAR
  6271                                  CANCHAR:
  6272 00000A19 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6273                                  	
  6274                                  	;PUBLIC	ESCCHAR
  6275                                  ESCCHAR:
  6276 00000A1A 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6277                                  	
  6278                                  	;IF	NOT Rainbow
  6279                                  
  6280                                  ESCTAB:	; LABEL BYTE
  6281                                  
  6282                                  	;IF	IBM
  6283 00000A1B 40                      	DB	64		; Ctrl-Z - F6
  6284 00000A1C 4D                      	DB	77		; Copy one char - -->
  6285 00000A1D 3B                      	DB	59		; Copy one char - F1
  6286 00000A1E 53                      	DB	83		; Skip one char - DEL
  6287 00000A1F 3C                      	DB	60		; Copy to char - F2
  6288 00000A20 3E                      	DB	62		; Skip to char - F4
  6289 00000A21 3D                      	DB	61		; Copy line - F3
  6290 00000A22 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6291 00000A23 3F                      	DB	63		; Reedit line (new template) - F5
  6292 00000A24 4B                      	DB	75		; Backspace - <--
  6293 00000A25 52                      	DB	82		; Enter insert mode - INS (toggle)
  6294 00000A26 52                      	DB	82		; Exit insert mode - INS (toggle)
  6295 00000A27 41                      	DB	65		; Escape character - F7
  6296 00000A28 41                      	DB	65		; End of table
  6297                                  	;ENDIF
  6298                                  
  6299                                  ESCEND: ; LABEL BYTE
  6300                                  
  6301                                  ESCTABLEN EQU ESCEND-ESCTAB
  6302                                  
  6303                                  ESCFUNC: ; LABEL WORD
  6304                                  	
  6305 00000A29 [FB13]                  	short_addr  GETCH	; Ignore the escape sequence
  6306 00000A2B [7814]                  	short_addr  TWOESC
  6307 00000A2D [6D15]                  	short_addr  EXITINS
  6308 00000A2F [6D15]                  	short_addr  ENTERINS
  6309 00000A31 [7314]                  	short_addr  BACKSP
  6310 00000A33 [5915]                  	short_addr  REEDIT
  6311 00000A35 [6014]                  	short_addr  KILNEW
  6312 00000A37 [EF14]                  	short_addr  COPYLIN
  6313 00000A39 [2115]                  	short_addr  SKIPSTR
  6314 00000A3B [F514]                  	short_addr  COPYSTR
  6315 00000A3D [1815]                  	short_addr  SKIPONE
  6316 00000A3F [FA14]                  	short_addr  COPYONE
  6317 00000A41 [FA14]                  	short_addr  COPYONE
  6318 00000A43 [7415]                  	short_addr  CTRLZ
  6319                                  
  6320                                  	;ENDIF
  6321                                  
  6322                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6323                                  ; ---------------------------------------------------------------------------
  6324                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6325                                  
  6326                                  ; OEMFunction key is expected to process a single function
  6327                                  ;   key input from a device and dispatch to the proper
  6328                                  ;   routines leaving all registers UNTOUCHED.
  6329                                  ;
  6330                                  ; Inputs:   CS, SS are DOSGROUP
  6331                                  ; Outputs:  None. This function is expected to JMP to onw of
  6332                                  ;           the following labels:
  6333                                  ;
  6334                                  ;           GetCh       - ignore the sequence
  6335                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6336                                  ;           ExitIns     - toggle insert mode
  6337                                  ;           EnterIns    - toggle insert mode
  6338                                  ;           BackSp      - move backwards one space
  6339                                  ;           ReEdit      - reedit the line with a new template
  6340                                  ;           KilNew      - discard the current line and start from scratch
  6341                                  ;           CopyLin     - copy the rest of the template into the line
  6342                                  ;           SkipStr     - read the next character and skip to it in the template
  6343                                  ;           CopyStr     - read next char and copy from template to line until char
  6344                                  ;           SkipOne     - advance position in template one character
  6345                                  ;           CopyOne     - copy next character in template into line
  6346                                  ;           CtrlZ       - place a ^Z into the template
  6347                                  ; Registers that are allowed to be modified by this function are:
  6348                                  ;           AX, CX, BP
  6349                                  
  6350                                  ; 13/05/2019 - Retro DOS v4.0
  6351                                  ; -------------------------------------
  6352                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6353                                  
  6354                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6355                                  ; -------------------------------------
  6356                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6357                                  
  6358                                  OEMFunctionKey:
  6359 00000A45 E81509                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6360 00000A48 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6361 00000A4A 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6362 00000A4B BF[1B0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6363 00000A4E 06                      	push	es
  6364 00000A4F 0E                      	push	cs
  6365 00000A50 07                      	pop	es
  6366 00000A51 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6367 00000A53 07                      	pop	es
  6368 00000A54 5F                      	POP     DI                      ; restore DI
  6369 00000A55 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6370 00000A57 89CD                    	MOV     BP,CX                   ; move to indexable register
  6371                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6372 00000A59 2EFFA6[290A]            	JMP	word [CS:BP+ESCFUNC]
  6373                                  
  6374                                  ;DOSCODE ENDS
  6375                                  	
  6376                                  ;============================================================================
  6377                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6378                                  ;============================================================================
  6379                                  ; Retro DOS v3.0 - 18/07/2018
  6380                                  
  6381                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6382                                  ;----------------------------------------------------------------------------
  6383                                  ; Retro DOS v2.0 - 13/03/2018
  6384                                  
  6385                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6386                                  
  6387                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6388                                  
  6389                                  ;**	$GET_DATE - Get Current Date
  6390                                  ;----------------------------------------
  6391                                  ;	ENTRY	none
  6392                                  ;	EXIT	(cx:dx) = current date
  6393                                  ;	USES	all
  6394                                  
  6395                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6396                                  
  6397                                  _$GET_DATE:	;System call 42
  6398                                  
  6399 00000A5E 16                      	PUSH	SS
  6400 00000A5F 1F                      	POP	DS
  6401 00000A60 E8AD00                  	CALL	READTIME	;Check for rollover to next day
  6402 00000A63 A1[5203]                	MOV	AX,[YEAR]
  6403                                  
  6404                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6405                                  
  6406 00000A66 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6407 00000A6A E814FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6408                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6409 00000A6D 895C06                  	MOV	[SI+user_env.user_DX],BX
  6410 00000A70 05BC07                  	ADD	AX,1980		;Put bias back
  6411                                  	;MOV	[SI+4],AX	;CX=year
  6412 00000A73 894404                  	MOV	[SI+user_env.user_CX],AX
  6413 00000A76 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6414                                  RET20:	; 05/11/2022
  6415                                  RET24:	; 18/12/2022
  6416 00000A7A C3                      	RETN
  6417                                  
  6418                                  ;**	$SET_DATE - Set Current Date
  6419                                  ;----------------------------------------
  6420                                  ;	ENTRY	(cx:dx) = current date
  6421                                  ;	EXIT	(al) = -1 iff bad date
  6422                                  ;		(al) = 0 if ok
  6423                                  ;	USES	all
  6424                                  
  6425                                  _$SET_DATE:	;System call 43
  6426                                  
  6427 00000A7B B0FF                    	MOV	AL,-1		;Be ready to flag error
  6428 00000A7D 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6429                                  	;JC	SHORT RET24	;Error if not big enough
  6430                                  	; 05/11/2022
  6431 00000A81 72F7                    	jc	short RET20
  6432 00000A83 83F977                  	CMP	CX,119		;Year must be less than 2100
  6433 00000A86 77F2                    	JA	SHORT RET24
  6434 00000A88 08F6                    	OR	DH,DH
  6435                                  	;JZ	SHORT RET24
  6436                                   	; 05/11/2022
  6437 00000A8A 74EE                    	jz	short RET20
  6438 00000A8C 08D2                    	OR	DL,DL
  6439                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6440                                  	; 05/11/2022
  6441 00000A8E 74EA                    	jz	short RET20
  6442 00000A90 80FE0C                  	CMP	DH,12		;Check against max. month
  6443 00000A93 77E5                    	JA	SHORT RET24
  6444 00000A95 16                      	PUSH	SS
  6445 00000A96 1F                      	POP	DS
  6446                                  	;CALL	DODATE
  6447                                  	; 18/12/2022
  6448 00000A97 E90301                  	jmp	DODATE
  6449                                  ;RET24:  
  6450                                  	;RETN
  6451                                  
  6452                                  ;**	$GET_TIME - Get Current Time
  6453                                  ;----------------------------------------
  6454                                  ;	ENTRY	none
  6455                                  ;	EXIT	(cx:dx) = current time
  6456                                  ;	USES	all
  6457                                  
  6458                                  _$GET_TIME:			;System call 44
  6459                                  
  6460 00000A9A 16                      	PUSH	SS
  6461 00000A9B 1F                      	POP	DS
  6462 00000A9C E87100                  	CALL	READTIME
  6463 00000A9F E8DFF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6464                                  	;MOV	[SI+6],DX
  6465 00000AA2 895406                  	MOV	[SI+user_env.user_DX],DX
  6466                                  	;MOV	[SI+4],CX
  6467 00000AA5 894C04                  	MOV	[SI+user_env.user_CX],CX
  6468                                  set_time_ok:	; 06/01/2024
  6469 00000AA8 30C0                    	XOR	AL,AL
  6470                                  RET26:  
  6471 00000AAA C3                      	RETN
  6472                                  
  6473                                  ;**	$SET_TIME - Set Current Time
  6474                                  ;----------------------------------------
  6475                                  ;	ENTRY	(cx:dx) = time
  6476                                  ;	EXIT	(al) = 0 if 0k
  6477                                  ;		(al) = -1 if invalid
  6478                                  ;	USES	ALL
  6479                                  
  6480                                  _$SET_TIME:			;System call 45
  6481                                  
  6482 00000AAB B0FF                    	MOV	AL,-1		;Flag in case of error
  6483 00000AAD 80FD18                  	CMP	CH,24		;Check hours
  6484 00000AB0 73F8                    	JAE	SHORT RET26
  6485 00000AB2 80F93C                  	CMP	CL,60		;Check minutes
  6486 00000AB5 73F3                    	JAE	SHORT RET26
  6487 00000AB7 80FE3C                  	CMP	DH,60		;Check seconds
  6488 00000ABA 73EE                    	JAE	SHORT RET26
  6489 00000ABC 80FA64                  	CMP	DL,100		;Check 1/100's
  6490 00000ABF 73E9                    	JAE	SHORT RET26
  6491 00000AC1 51                      	PUSH	CX
  6492 00000AC2 52                      	PUSH	DX
  6493 00000AC3 16                      	PUSH	SS
  6494 00000AC4 1F                      	POP	DS
  6495                                  
  6496                                  ; 07/02/2024
  6497                                  %if 0
  6498                                  	MOV	BX,TIMEBUF
  6499                                  	MOV	CX,6
  6500                                  	; 06/02/2024 ; *
  6501                                  	;;XOR	DX,DX
  6502                                  	;;MOV	AX,DX
  6503                                  	;xor	ax,ax
  6504                                  	;cwd	; 06/01/2024
  6505                                  	PUSH	BX
  6506                                  	;CALL	SETREAD
  6507                                  	; 06/02/2024 ; *
  6508                                  	call	SETREAD_X
  6509                                  %else
  6510 00000AC5 E8193B                  	call	SETREAD_XT
  6511                                  %endif
  6512                                  
  6513 00000AC8 1E                      	PUSH	DS
  6514 00000AC9 C536[2E00]              	LDS	SI,[BCLOCK]
  6515 00000ACD E89A3A                  	CALL	DEVIOCALL2	;Get correct day count
  6516 00000AD0 1F                      	POP	DS
  6517 00000AD1 5B                      	POP	BX
  6518 00000AD2 E8493B                  	CALL	SETWRITE
  6519 00000AD5 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6520 00000AD9 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6521 00000ADD C536[2E00]              	LDS	SI,[BCLOCK]
  6522 00000AE1 E8863A                  	CALL	DEVIOCALL2	;Set the time
  6523                                  	; 06/01/2024
  6524                                  	;XOR	AL,AL
  6525                                  	;RETN
  6526 00000AE4 EBC2                    	jmp	short set_time_ok
  6527                                  
  6528                                  ; 11/07/2018 - Retro DOS v3.0
  6529                                  ; Retro DOS v2.0 - 14/03/2018
  6530                                  
  6531                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6532                                  
  6533                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6534                                  ;----------------------------------------------------------
  6535                                  ; Date16 returns the current date in AX, current time in DX
  6536                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6537                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6538                                  
  6539                                  DATE16:
  6540                                  	
  6541                                  ;M048	Context DS
  6542                                  ;
  6543                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6544                                  ; is DOSDATA
  6545                                  
  6546                                  	;push	ss
  6547                                  	;pop	ds
  6548                                  
  6549                                  	;getdseg <ds>		; M048
  6550                                  
  6551                                  	; 13/05/2019 - Retro DOS v4.0
  6552 00000AE6 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6553                                  
  6554 00000AEB 51                      	PUSH	CX
  6555 00000AEC 06                      	PUSH	ES
  6556 00000AED E82000                  	CALL	READTIME
  6557 00000AF0 07                      	POP	ES
  6558 00000AF1 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6559 00000AF3 D0E1                    	SHL	CL,1
  6560 00000AF5 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6561 00000AF7 D1E1                    	SHL	CX,1
  6562 00000AF9 D1E1                    	SHL	CX,1
  6563 00000AFB D0EE                    	SHR	DH,1		;Count every two seconds
  6564 00000AFD 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6565 00000AFF 89CA                    	MOV	DX,CX
  6566                                  
  6567                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6568                                  
  6569 00000B01 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6570 00000B04 B104                    	MOV	CL,4
  6571 00000B06 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6572 00000B08 D1E0                    	SHL	AX,1
  6573 00000B0A 59                      	POP	CX
  6574 00000B0B 0A06[5003]              	OR	AL,[DAY]
  6575                                  RET21:
  6576 00000B0F C3                      	RETN
  6577                                  
  6578                                  ;----------------------------------------------------------
  6579                                  
  6580                                  READTIME:
  6581                                  
  6582                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6583                                  ;Uses AX, CX, DX.
  6584                                  
  6585 00000B10 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6586 00000B16 56                      	PUSH	SI
  6587 00000B17 53                      	PUSH	BX
  6588                                  
  6589 00000B18 BB[B603]                	MOV	BX,TIMEBUF
  6590                                  ; 07/02/2024
  6591                                  %if 0
  6592                                  	MOV	CX,6
  6593                                  	; 06/02/2024
  6594                                  	;;XOR	DX,DX
  6595                                  	;;MOV	AX,DX
  6596                                  	;; 06/01/2024
  6597                                  	;xor	ax,ax
  6598                                  	;cwd
  6599                                  	;CALL	SETREAD
  6600                                  	; 06/02/2024
  6601                                  	call	SETREAD_X
  6602                                  %else
  6603 00000B1B E8C73A                  	call	SETREAD_XTC
  6604                                  %endif
  6605 00000B1E 1E                      	PUSH	DS
  6606 00000B1F C536[2E00]              	LDS	SI,[BCLOCK]
  6607 00000B23 E8443A                  	CALL	DEVIOCALL2	;Get correct date and time
  6608 00000B26 1F                      	POP	DS
  6609 00000B27 5B                      	POP	BX
  6610 00000B28 5E                      	POP	SI
  6611 00000B29 A1[B603]                	MOV	AX,[TIMEBUF]
  6612 00000B2C 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6613 00000B30 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6614 00000B34 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6615                                  	;JZ	SHORT RET22
  6616 00000B38 74D5                    	JZ	SHORT RET21 ; 18/07/2018
  6617                                  	;cmp	ax,43830
  6618 00000B3A 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6619 00000B3D 733D                    	JAE	SHORT RET22	;Ignore if too large
  6620 00000B3F A3[5403]                	MOV	[DAYCNT],AX
  6621 00000B42 56                      	PUSH	SI
  6622 00000B43 51                      	PUSH	CX
  6623 00000B44 52                      	PUSH	DX		;Save time
  6624 00000B45 31D2                    	XOR	DX,DX
  6625                                  	;mov	cx,1461
  6626 00000B47 B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6627 00000B4A F7F1                    	DIV	CX		;Compute number of 4-year units
  6628 00000B4C D1E0                    	SHL	AX,1
  6629 00000B4E D1E0                    	SHL	AX,1
  6630 00000B50 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6631 00000B52 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6632                                  
  6633 00000B54 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6634                                  
  6635 00000B57 E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6636 00000B5A D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6637 00000B5C 7304                    	JNC	SHORT SK	;Extra half-year?
  6638 00000B5E 81C2C800                	ADD	DX,200
  6639                                  SK:
  6640 00000B62 E82200                  	CALL	SETYEAR
  6641 00000B65 B101                    	MOV	CL,1		;At least at first month in year
  6642                                  
  6643 00000B67 BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6644                                  	
  6645 00000B6A E81000                  	CALL	DSLIDE		;Find out which month we're in
  6646 00000B6D 880E[5103]              	MOV	[MONTH],CL
  6647 00000B71 42                      	INC	DX		;Remainder is day of month (start with one)
  6648 00000B72 8816[5003]              	MOV	[DAY],DL
  6649 00000B76 E88A00                  	CALL	WKDAY		;Set day of week
  6650 00000B79 5A                      	POP	DX
  6651 00000B7A 59                      	POP	CX
  6652 00000B7B 5E                      	POP	SI
  6653                                  RET22:  
  6654 00000B7C C3                      	RETN
  6655                                  
  6656                                  ;----------------------------------------------------------
  6657                                  
  6658                                  DSLIDE:
  6659                                  	;MOV	AH,0
  6660                                  	; 06/01/2024
  6661                                  	; (AH=0)
  6662                                  DSLIDE1:
  6663 00000B7D AC                      	LODSB			;Get count of days
  6664 00000B7E 39C2                    	CMP	DX,AX		;See if it will fit
  6665                                  	;JB	SHORT RET23	;If not, done
  6666 00000B80 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6667 00000B82 29C2                    	SUB	DX,AX
  6668 00000B84 41                      	INC	CX		;Count one more month/year
  6669 00000B85 EBF6                    	JMP	SHORT DSLIDE1
  6670                                  
  6671                                  ;----------------------------------------------------------
  6672                                  
  6673                                  SETYEAR:
  6674                                  
  6675                                  ;Set year with value in CX. Adjust length of February for this year.
  6676                                  
  6677                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6678                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6679                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6680                                  ;	preserve DS as CHKYR is also called as a routine.
  6681                                  
  6682                                  	; MSDOS 6.0 (18/07/2018) ; *
  6683                                  
  6684                                  	;GETDSEG DS
  6685                                  
  6686                                  	;PUSH	CS  ; *
  6687                                  	;POP	DS  ; *
  6688                                  
  6689                                  	; 13/05/2019 - Retro DOS v4.0
  6690 00000B87 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6691                                  
  6692                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6693                                  	; 05/11/2022 
  6694                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6695                                  
  6696 00000B8C 880E[5203]              	MOV	[YEAR],CL
  6697                                  CHKYR:
  6698 00000B90 F6C103                  	TEST	CL,3		;Check for leap year
  6699 00000B93 B01C                    	MOV	AL,28
  6700 00000B95 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6701 00000B97 FEC0                    	INC	AL		;Add leap day
  6702                                  SAVFEB:
  6703 00000B99 A2[1D0D]                	mov	[february],al
  6704                                  	;MOV	[MONTAB+1],AL	;Store for February
  6705                                  RET23:  
  6706 00000B9C C3                      	RETN
  6707                                  
  6708                                  ;----------------------------------------------------------
  6709                                  
  6710                                  DODATE:
  6711 00000B9D E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6712 00000BA0 88F0                    	MOV	AL,DH
  6713                                  
  6714 00000BA2 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6715                                  
  6716 00000BA5 D7                      	XLAT			;Look up days in month
  6717 00000BA6 38D0                    	CMP	AL,DL
  6718 00000BA8 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6719                                  	;JB	SHORT RET25	;Error if too many days
  6720 00000BAA 72F0                    	jb	short RET23 ; 18/07/2018
  6721 00000BAC E8D8FF                  	CALL	SETYEAR
  6722                                  ;
  6723                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6724                                  ;
  6725 00000BAF 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6726 00000BB3 D1E9                    	SHR	CX,1
  6727 00000BB5 D1E9                    	SHR	CX,1
  6728                                  	;mov	ax,1461
  6729 00000BB7 B8B505                  	MOV	AX,FOURYEARS
  6730 00000BBA 89D3                    	MOV	BX,DX
  6731 00000BBC F7E1                    	MUL	CX
  6732 00000BBE 8A0E[5203]              	MOV	CL,[YEAR]
  6733 00000BC2 80E103                  	AND	CL,3
  6734                                  
  6735 00000BC5 BE[140D]                	MOV	SI,YRTAB
  6736                                  
  6737 00000BC8 89C2                    	MOV	DX,AX
  6738 00000BCA D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6739 00000BCC E84700                  	CALL	DSUM		;Add up the days in each year
  6740 00000BCF 88F9                    	MOV	CL,BH		;Month of year
  6741                                  
  6742 00000BD1 BE[1C0D]                	MOV	SI,MONTAB
  6743                                  
  6744 00000BD4 49                      	DEC	CX		;Account for months starting with one
  6745 00000BD5 E83E00                  	CALL	DSUM		;Add up days in each month
  6746 00000BD8 88D9                    	MOV	CL,BL		;Day of month
  6747 00000BDA 49                      	DEC	CX		;Account for days starting with one
  6748 00000BDB 01CA                    	ADD	DX,CX		;Add in to day total
  6749 00000BDD 92                      	XCHG	AX,DX		;Get day count in AX
  6750 00000BDE A3[5403]                	MOV	[DAYCNT],AX
  6751 00000BE1 56                      	PUSH	SI
  6752 00000BE2 53                      	PUSH	BX
  6753 00000BE3 50                      	PUSH	AX
  6754                                  
  6755                                  ; 07/02/2024
  6756                                  %if 0
  6757                                  	MOV	BX,TIMEBUF
  6758                                  	MOV	CX,6
  6759                                  	; 06/02/2024 ; *
  6760                                  	;;XOR	DX,DX
  6761                                  	;;MOV	AX,DX
  6762                                  	;; 06/01/2024
  6763                                  	;xor	ax,ax
  6764                                  	;cwd
  6765                                  	PUSH	BX
  6766                                  	;CALL	SETREAD
  6767                                  	; 06/02/2024 ; *
  6768                                  	call	SETREAD_X
  6769                                  %else
  6770 00000BE4 E8FA39                  	call	SETREAD_XT
  6771                                  %endif
  6772                                  
  6773 00000BE7 1E                      	PUSH	DS
  6774 00000BE8 C536[2E00]              	LDS	SI,[BCLOCK]
  6775 00000BEC E87B39                  	CALL	DEVIOCALL2	;Get correct date and time
  6776 00000BEF 1F                      	POP	DS
  6777 00000BF0 5B                      	POP	BX
  6778 00000BF1 E82A3A                  	CALL	SETWRITE
  6779 00000BF4 8F06[B603]              	POP	WORD [TIMEBUF]
  6780 00000BF8 1E                      	PUSH	DS
  6781 00000BF9 C536[2E00]              	LDS	SI,[BCLOCK]
  6782 00000BFD E86A39                  	CALL	DEVIOCALL2	;Set the date
  6783 00000C00 1F                      	POP	DS
  6784 00000C01 5B                      	POP	BX
  6785 00000C02 5E                      	POP	SI
  6786                                  WKDAY:
  6787 00000C03 A1[5403]                	MOV	AX,[DAYCNT]
  6788 00000C06 31D2                    	XOR	DX,DX
  6789 00000C08 B90700                  	MOV	CX,7
  6790 00000C0B 40                      	INC	AX
  6791 00000C0C 40                      	INC	AX		;First day was Tuesday
  6792 00000C0D F7F1                    	DIV	CX		;Compute day of week
  6793 00000C0F 8816[5603]              	MOV	[WEEKDAY],DL
  6794 00000C13 30C0                    	XOR	AL,AL		;Flag OK
  6795                                  RET25:
  6796 00000C15 C3                      	RETN
  6797                                  
  6798                                  ;----------------------------------------------------------
  6799                                  
  6800                                  ;**	DSUM - Compute the sum of a string of bytes
  6801                                  ;
  6802                                  ;	ENTRY	(cx) = byte count
  6803                                  ;		(ds:si) = byte address
  6804                                  ;		(dx) = sum register, initialized by caller
  6805                                  ;	EXIT	(dx) updated
  6806                                  ;	USES	ax, cx, dx, si, flags
  6807                                  
  6808                                  DSUM:
  6809 00000C16 B400                    	MOV	AH,0
  6810 00000C18 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6811                                  	;JCXZ	RET25 ; 18/07/2018
  6812                                  DSUM1:
  6813 00000C1A AC                      	LODSB
  6814 00000C1B 01C2                    	ADD	DX,AX
  6815 00000C1D E2FB                    	LOOP	DSUM1
  6816                                  DSUM9:
  6817 00000C1F C3                      	RETN
  6818                                  
  6819                                  ;============================================================================
  6820                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6821                                  ;============================================================================
  6822                                  ; 29/04/2019 - Retro DOS v4.0
  6823                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6824                                  
  6825                                  ; 12/03/2018 - Retro DOS v2.0 
  6826                                  
  6827                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6828                                  ;NAME	GETSET
  6829                                  
  6830                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6831                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6832                                  
  6833                                  ;USERNUM:
  6834                                  ;	DW	0			; 24 bit user number
  6835                                  ;       DB      0
  6836                                  ;;	IF      IBM
  6837                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6838                                  ;;	ELSE
  6839                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6840                                  ;;	ENDIF
  6841                                  
  6842                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6843                                  ;; 08/07/2018 - Retro DOS v3.0
  6844                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6845                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6846                                  
  6847                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6848                                  ;----------------------------------------------------------------------------
  6849                                  
  6850                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6851                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6852                                  
  6853                                  _$GET_VERSION:
  6854                                  
  6855                                  ; Inputs:
  6856                                  ;       None
  6857                                  ; Function:
  6858                                  ;       Return MS-DOS version number
  6859                                  ; Outputs:
  6860                                  ;       OEM number in BH
  6861                                  ;       User number in BL:CX (24 bits)
  6862                                  ;       Version number as AL.AH in binary
  6863                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6864                                  
  6865                                  ; MSDOS 6.0
  6866                                  ;
  6867                                  ;	Fake_Count is used to lie about the version numbers to support
  6868                                  ;	old binarys. See ms_table.asm for more info.
  6869                                  ;
  6870                                  ;		if input al = 00
  6871                                  ;		  (bh) = OEM number			
  6872                                  ;		else if input al = 01
  6873                                  ;		  (bh) = version flags
  6874                                  ;		 
  6875                                  ;		       	 bits 0-2 = DOS internal revision
  6876                                  ;		       	 bits 3-7 = DOS type flags
  6877                                  ;		              bit 3    = DOS is in ROM
  6878                                  ;		              bit 4    = DOS in in HMA
  6879                                  ;		              bits 5-7 = reserved
  6880                                  ;               M007 change - only bit 3 is now valid. Other bits
  6881                                  ;               are 0 when AL = 1
  6882                                  
  6883                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6884 00000C20 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6885 00000C25 8CDB                    	mov	bx, ds
  6886                                  
  6887                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6888                                  	;--------------------------------------
  6889                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6890                                  
  6891 00000C27 16                              PUSH    SS
  6892 00000C28 1F                              POP     DS
  6893                                          
  6894                                  	; 06/01/2024
  6895                                  	;MOV	BX,[USERNUM+2]
  6896                                          ;MOV	CX,[USERNUM]
  6897                                  
  6898                                  	; 13/05/2019 - Retro DOS v4.0
  6899                                  
  6900                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6901                                  	;DOS flags
  6902                                  
  6903 00000C29 3C01                    	cmp	AL,1
  6904 00000C2B 7502                    	jne	short Norm_Vers
  6905                                  
  6906                                  ;ifdef ROMDOS
  6907                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6908                                  ;				(DOSINROM = 8)
  6909                                  ;else
  6910 00000C2D 30FF                            xor     bh,bh		; Otherwise return 0
  6911                                  ;endif				;M007 end
  6912                                  
  6913                                  Norm_Vers:
  6914                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6915                                  
  6916                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6917                                  	; 13/05/2019 - Retro DOS v4.0
  6918 00000C2F 1E                      	push	ds		; Get the version number from the
  6919 00000C30 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6920                                  	;mov	ax,[40h]
  6921 00000C34 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6922                                  	; 07/12/2022
  6923 00000C37 1F                      	pop	ds
  6924 00000C38 E846F8                  	call	Get_User_Stack
  6925                                  				; Put values for return registers
  6926                                  				; in the proper place on the user's	 
  6927                                  				; stack addressed by DS:SI
  6928                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6929                                  gdrvfspc_ret:
  6930                                          ;MOV	[SI+user_env.user_AX],AX
  6931 00000C3B 8904                            MOV	[SI],AX
  6932                                          ;MOV	[SI+4],CX
  6933 00000C3D 894C04                  	mov	[SI+user_env.user_CX],CX
  6934                                  set_user_bx:
  6935                                  	;MOV	[SI+2],BX
  6936 00000C40 895C02                  	mov	[SI+user_env.user_BX],BX
  6937                                  
  6938 00000C43 C3                      	RETN
  6939                                  
  6940                                  ; 18/07/2018 - Retro DOS v3.0
  6941                                  
  6942                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6943                                  ;----------------------------------------------------------------------------
  6944                                  
  6945                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6946                                  ;
  6947                                  ;	ENTRY	none
  6948                                  ;	EXIT	(al) = value of VERIFY flag
  6949                                  ;	USES	all
  6950                                  
  6951                                  
  6952                                  _$GET_VERIFY_ON_WRITE:
  6953                                  
  6954                                  ;hkn; SS override
  6955 00000C44 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6956 00000C48 C3                      	retn
  6957                                  
  6958                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6959                                  ;
  6960                                  ;	ENTRY	(al) = value of VERIFY flag
  6961                                  ;	EXIT	none
  6962                                  ;	USES	all
  6963                                  
  6964                                  _$SET_VERIFY_ON_WRITE:
  6965                                  
  6966 00000C49 2401                    	AND	AL,1
  6967                                  ;hkn; SS override
  6968 00000C4B 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6969                                  RET27:	; 18/07/2018
  6970 00000C4F C3                      	retn
  6971                                  
  6972                                  ; 19/07/2018 - Retro DOS v3.0
  6973                                  
  6974                                  ;BREAK <$International - return country-dependent information>
  6975                                  ;----------------------------------------------------------------------------
  6976                                  ;
  6977                                  ; Procedure Name : $INTERNATIONAL
  6978                                  ;
  6979                                  ; Inputs:
  6980                                  ;	MOV	AH,International
  6981                                  ;	MOV	AL,country	(al = 0 => current country)
  6982                                  ;      [MOV	BX,country]
  6983                                  ;	LDS	DX,block
  6984                                  ;	INT	21
  6985                                  ; Function:
  6986                                  ;	give users an idea of what country the application is running
  6987                                  ; Outputs:
  6988                                  ;	IF DX != -1 on input (get country)
  6989                                  ;	  AL = 0 means return current country table.
  6990                                  ;	  0<AL<0FFH means return country table for country AL
  6991                                  ;	  AL = 0FF means return country table for country BX
  6992                                  ;	  No Carry:
  6993                                  ;	     Register BX will contain the 16-bit country code.
  6994                                  ;	     Register AL will contain the low 8 bits of the country code.
  6995                                  ;	     The block pointed to by DS:DX is filled in with the information
  6996                                  ;	     for the particular country.
  6997                                  ;		BYTE  Size of this table excluding this byte and the next
  6998                                  ;		BYTE  Country code represented by this table
  6999                                  ;			A sequence of n bytes, where n is the number specified
  7000                                  ;			by the first byte above and is not > internat_block_max,
  7001                                  ;			in the correct order for being returned by the
  7002                                  ;			INTERNATIONAL call as follows:
  7003                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  7004                                  ;		5 BYTE	Currency symbol null terminated
  7005                                  ;		2 BYTE	thousands separator null terminated
  7006                                  ;		2 BYTE	Decimal point null terminated
  7007                                  ;		2 BYTE	Date separator null terminated
  7008                                  ;		2 BYTE	Time separator null terminated
  7009                                  ;		1 BYTE	Bit field.  Currency format.
  7010                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  7011                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  7012                                  ;		1 BYTE	No. of significant decimal digits in currency
  7013                                  ;		1 BYTE	Bit field.  Time format.
  7014                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  7015                                  ;		DWORD	Call address of case conversion routine
  7016                                  ;		2 BYTE	Data list separator null terminated.
  7017                                  ;	  Carry:
  7018                                  ;	     Register AX has the error code.
  7019                                  ;	IF DX = -1 on input (set current country)
  7020                                  ;	  AL = 0 is an error
  7021                                  ;	  0<AL<0FFH means set current country to country AL
  7022                                  ;	  AL = 0FF means set current country to country BX
  7023                                  ;	  No Carry:
  7024                                  ;	    Current country SET
  7025                                  ;	    Register AL will contain the low 8 bits of the country code.
  7026                                  ;	  Carry:
  7027                                  ;	     Register AX has the error code.
  7028                                  ;-----------------------------------------------------------------------------
  7029                                  
  7030                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  7031                                  
  7032                                  ; 13/05/2019 - Retro DOS v4.0
  7033                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  7034                                  
  7035                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7036                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  7037                                  
  7038                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7039                                  	 
  7040 00000C50 3CFF                    	CMP	AL,0FFH
  7041 00000C52 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7042 00000C54 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7043 00000C56 30FF                    	XOR	BH,BH
  7044                                  BX_HAS_CODE:
  7045 00000C58 1E                      	PUSH	DS
  7046 00000C59 07                      	POP	ES
  7047 00000C5A 52                      	PUSH	DX
  7048 00000C5B 5F                      	POP	DI			; User buffer to ES:DI
  7049                                  
  7050                                  ;hkn; SS is DOSDATA
  7051                                  ;	context DS
  7052                                  
  7053 00000C5C 16                      	push	ss
  7054 00000C5D 1F                      	pop	ds
  7055                                  
  7056 00000C5E 83FFFF                  	CMP	DI,-1
  7057 00000C61 745D                    	JZ	short international_set
  7058 00000C63 09DB                    	OR	BX,BX
  7059 00000C65 7505                    	JNZ	short international_find
  7060                                  
  7061                                  ;hkn; country_cdpg is in DOSDATA segment.
  7062 00000C67 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7063                                  
  7064 00000C6A EB39                    	JMP	SHORT international_copy
  7065                                  
  7066                                  international_find:
  7067                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7068                                  	; 06/01/2024
  7069 00000C6C 31ED                    	xor	bp,bp ; 0
  7070 00000C6E E80A00                  	CALL	international_get
  7071 00000C71 7255                    	JC	short errtn
  7072                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7073                                  	; 06/01/2024
  7074 00000C73 09DB                    	or	bx,bx
  7075 00000C75 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7076 00000C77 89D3                    	MOV	BX,DX			 ; put country back
  7077 00000C79 EB3A                    	JMP	SHORT international_ok3
  7078                                  
  7079                                  international_get:
  7080 00000C7B BE[0012]                	MOV	SI,COUNTRY_CDPG
  7081                                  
  7082                                  ;hkn; country_cdpg is in DOSDATA segment.
  7083                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7084                                  
  7085                                  	; MSDOS 3.3
  7086                                  	;;cmp	bx,[SI+63h]
  7087                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7088                                  	;jz	short RET27
  7089                                  
  7090                                  	; 13/05/2019 - Retro DOS v4.0
  7091                                  
  7092                                  	; MSDOS 6.0
  7093                                  	;cmp	bx,[ss:si+68h]
  7094 00000C7E 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7095 00000C82 74CB                    	jz	short RET27			; return if equal
  7096                                  
  7097 00000C84 89DA                    	MOV	DX,BX
  7098 00000C86 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7099                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7100 00000C88 B80014                  	mov	ax,1400h
  7101 00000C8B CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7102                                  			; Return: AL = 00h not installed, OK to install
  7103                                  			; 01h not installed, not OK
  7104                                  			; FFh installed
  7105 00000C8D 3CFF                    	CMP	AL,0FFH
  7106 00000C8F 7510                    	JNZ	short interr		; not in memory
  7107                                  	
  7108                                  	; 06/01/2024
  7109 00000C91 B80314                  	mov	ax,1403h		; set country info
  7110                                  
  7111                                  	;cmp	bp,0
  7112 00000C94 09ED                    	or	bp,bp			; GetCntry ?
  7113 00000C96 7501                    	JNZ	short stcdpg
  7114                                  	
  7115                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7116                                  	;mov	ax,1404h
  7117 00000C98 40                      	inc	ax	; AX = 1404h ; get country info
  7118                                  
  7119                                  	; 06/01/2024
  7120                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7121                                  	;		; BX = code page, DX = country code,
  7122                                  	;		; DS:SI -> internal code page structure
  7123                                  	;		; ES:DI -> user buffer
  7124                                  	;		; Return: AL = status
  7125                                  	;
  7126                                  	;JMP	short chkok
  7127                                  	
  7128                                  	;nop
  7129                                  
  7130                                  stcdpg:
  7131                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7132                                  	; 06/01/2024
  7133                                  	;mov     ax,1403h
  7134                                  gscdpg:
  7135 00000C99 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7136                                  			; DS:SI -> internal code page structure
  7137                                  			; BX = code page, DX = country code
  7138                                  			; Return: AL = status
  7139                                  chkok:
  7140 00000C9B 08C0                    	or	al,al			; success ?
  7141                                  	;retz				; yes
  7142 00000C9D 74B0                    	jz	short RET27
  7143                                  
  7144                                  setcarry:
  7145 00000C9F F9                      	STC				; set carry
  7146 00000CA0 C3                      	retn
  7147                                  interr:
  7148 00000CA1 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7149 00000CA3 EBFA                    	JMP	short setcarry
  7150                                  
  7151                                  international_copy:
  7152                                  
  7153                                  ;hkn; country_cdpg is in DOSDATA segment.
  7154                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7155                                  
  7156                                  	; MSDOS 3.3
  7157                                  	;;mov	bx,[SI+63h]
  7158                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7159                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7160                                  
  7161                                  	; 13/05/2019 - Retro DOS v4.0
  7162                                  
  7163                                  	; MSDOS 6.0
  7164                                  	;mov	bx,[ss:si+68h]
  7165 00000CA5 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7166 00000CA9 BE[6C12]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7167                                  
  7168                                  	;mov	cx,24
  7169 00000CAC B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7170                                  
  7171                                  	; MSDOS 6.0
  7172                                  
  7173                                  ;hkn;	must set up DS to SS so that international info can be copied
  7174                                  	
  7175 00000CAF 1E                      	push	ds
  7176                                  
  7177 00000CB0 16                      	push	ss			; cs -> ss
  7178 00000CB1 1F                      	pop	ds
  7179                                  
  7180 00000CB2 F3A4                    	REP	MOVSB			; copy country info
  7181                                  
  7182                                  	; MSDOS 6.0
  7183                                  
  7184 00000CB4 1F                      	pop	ds	;hkn;	restore ds
  7185                                  
  7186                                  international_ok3:
  7187 00000CB5 E8C9F7                  	call	Get_User_Stack
  7188                                  ;ASSUME	DS:NOTHING
  7189                                  	;MOV	[SI+2],BX
  7190 00000CB8 895C02                  	MOV	[SI+user_env.user_BX],BX
  7191                                  international_ok:
  7192 00000CBB 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7193                                  ;SYS_RET_OK_jmp:
  7194                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7195                                  nono:	; 15/12/2022
  7196                                  SYS_RET_OK_jmp:
  7197 00000CBD E977F9                  	jmp	SYS_RET_OK
  7198                                  
  7199                                  international_set:
  7200                                  
  7201                                  ;hkn; ASSUME	DS:DOSGROUP
  7202                                  ;ASSUME	DS:DOSDATA
  7203                                  
  7204 00000CC0 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7205 00000CC3 E8B5FF                  	CALL	international_get
  7206 00000CC6 73F3                    	JNC	short international_ok
  7207                                  errtn:
  7208 00000CC8 3CFF                    	CMP	AL,0FFH
  7209 00000CCA 7403                    	JZ	short errtn2
  7210                                  errtn1:
  7211 00000CCC E971F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7212                                  errtn2:
  7213                                  	;error	error_invalid_function	; NLSFUNC not existent
  7214                                  
  7215                                  	;mov	al,1
  7216 00000CCF B001                    	mov	al,error_invalid_function 
  7217 00000CD1 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7218                                  ;errtn3:
  7219                                  ;	jmp	SYS_RET_ERR
  7220                                  
  7221                                  ;EndProc $INTERNATIONAL
  7222                                  
  7223                                  ; 19/07/2018
  7224                                  
  7225                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7226                                  
  7227                                  ;----------------------------------------------------------------------------
  7228                                  ;
  7229                                  ; Procedure Name : $GetExtCntry
  7230                                  ;
  7231                                  ; Inputs:
  7232                                  ;	if AL >= 20H
  7233                                  ;	  AL= 20H    capitalize single char, DL= char
  7234                                  ;	      21H    capitalize string, CX= string length
  7235                                  ;	      22H    capitalize ASCIIZ string
  7236                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7237                                  ;	      80H bit 0 = use normal upper case table
  7238                                  ;		      1 = use file upper case table
  7239                                  ;	   DS:DX points to string
  7240                                  ;
  7241                                  ;	else
  7242                                  ;
  7243                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7244                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7245                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7246                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7247                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7248                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7249                                  ;	INT	21
  7250                                  ; Function:
  7251                                  ;	give users extended country dependent information
  7252                                  ;	or capitalize chars
  7253                                  ; Outputs:
  7254                                  ;	  No Carry:
  7255                                  ;	     extended country info is succesfully returned
  7256                                  ;	  Carry:
  7257                                  ;	     Register AX has the error code.
  7258                                  ;	     AX=0, NO	 for YES/NO CHECK
  7259                                  ;		1, YES
  7260                                  ;----------------------------------------------------------------------------
  7261                                  
  7262                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7263                                  
  7264                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7265                                  
  7266                                  	; MSDOS 6.0
  7267                                  _$GetExtCntry:
  7268 00000CD3 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7269 00000CD5 7269                    	JB	short notcap
  7270                                  capcap: 				;
  7271 00000CD7 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7272 00000CD9 7505                    	JNZ	short fileupper		; file upper case
  7273                                  
  7274                                  ;hkn; UCASE_TAB in DOSDATA
  7275 00000CDB BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7276 00000CDE EB05                    	JMP	SHORT capit
  7277                                  
  7278                                  fileupper:
  7279                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7280                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7281                                  	; AL >= 80h
  7282 00000CE0 247F                    	and	al,7Fh 
  7283                                  
  7284                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7285 00000CE2 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7286                                  capit:					;
  7287 00000CE5 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7288 00000CE7 750D                    	JNZ	short chkyes		; no
  7289 00000CE9 88D0                    	MOV	AL,DL			; set up AL
  7290 00000CEB E86E42                  	call	GETLET3 		; upper case it
  7291 00000CEE E890F7                  	call	Get_User_Stack		; get user stack
  7292                                  	;mov	[si+6],al
  7293 00000CF1 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7294 00000CF4 EBC7                    	JMP	SHORT nono		; done
  7295                                  chkyes: 				;
  7296 00000CF6 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7297 00000CF8 7522                    	JNZ	short capstring		; no
  7298                                  
  7299 00000CFA 31C0                    	XOR	AX,AX			; presume NO
  7300                                  		      
  7301                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7302                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7303                                  
  7304                                  	; 06/08/2018 - Retro DOS v3.0
  7305                                  	; 13/05/2019 - Retro DOS v4.0
  7306                                  	;cmp	dl,'Y'
  7307 00000CFC 2E3A16[150A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7308 00000D01 7416                    	JZ	short yesyes		; yes
  7309                                  	;cmp	dl,'y'
  7310 00000D03 2E3A16[170A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7311 00000D08 740F                    	JZ	short yesyes		; yes
  7312                                  	;cmp	dl,'N'
  7313 00000D0A 2E3A16[160A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7314 00000D0F 74AC                    	JZ	short nono		; no
  7315                                  	;cmp	dl,'n'
  7316 00000D11 2E3A16[180A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7317 00000D16 74A5                    	JZ	short nono		; no
  7318                                  ;dbcs_char:				;
  7319 00000D18 40                      	INC	AX			; not YES or NO
  7320                                  yesyes: 				;
  7321 00000D19 40                      	INC	AX			; return 1
  7322                                  	; 15/12/2022
  7323                                  ;nono:	
  7324 00000D1A EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7325                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7326                                  	;jmp	SYS_RET_OK		; done
  7327                                  
  7328                                  capstring:				;
  7329 00000D1C 89D6                    	MOV	SI,DX			; si=dx
  7330 00000D1E 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7331 00000D20 750D                    	JNZ	short capascii		; no
  7332                                  	;OR	CX,CX			; check count 0
  7333                                  	;JZ	short nono		; yes finished
  7334                                  	; 06/01/2024
  7335 00000D22 E399                    	jcxz	nono
  7336                                  concap: 				;
  7337 00000D24 AC                      	LODSB				; get char
  7338 00000D25 E83442                  	call	GETLET3 		; upper case it
  7339 00000D28 8844FF                  	MOV	byte [SI-1],AL		; store back
  7340                                  ;next99: 				;
  7341 00000D2B E2F7                    	LOOP	concap			; continue
  7342 00000D2D EB8E                    	JMP	short nono		; done
  7343                                  capascii:				;
  7344 00000D2F 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7345 00000D31 7545                    	JNZ	short capinval		; no
  7346                                  concap2:				;
  7347 00000D33 AC                      	LODSB				; get char
  7348 00000D34 08C0                    	or	al,al			; end of string ?
  7349 00000D36 7485                    	JZ	short nono		; yes
  7350 00000D38 E82142                  	call	GETLET3 		; upper case it
  7351 00000D3B 8844FF                  	MOV	[SI-1],AL		; store back
  7352 00000D3E EBF3                    	JMP	short concap2 		; continue
  7353                                  
  7354                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7355                                  
  7356                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7357                                  ; _$GetExtCntry:
  7358                                  
  7359                                  notcap:
  7360 00000D40 83F905                  	CMP	CX,5			; minimum size is 5
  7361 00000D43 7277                    	jb	short sizeerror
  7362                                  
  7363                                  GEC_CONT:
  7364                                  ;hkn; SS is DOSDATA
  7365                                  	;context DS
  7366                                  
  7367 00000D45 16                      	push	ss
  7368                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7369 00000D46 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7370                                  	
  7371                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7372 00000D47 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7373                                  
  7374 00000D4A 83FAFF                  	CMP	DX,-1			; active country ?
  7375 00000D4D 7503                    	JNZ	short GETCDPG 		; no
  7376                                  
  7377                                  ;hkn; use DS override to accesss country_cdpg fields
  7378                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7379                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7380 00000D4F 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7381                                  					; get active country id;smr;use DS
  7382                                  GETCDPG:
  7383 00000D52 83FBFF                  	CMP	BX,-1			; active code page?
  7384 00000D55 7503                    	JNZ	short CHKAGAIN		; no, check again
  7385                                  
  7386                                  ;hkn; use DS override to accesss country_cdpg fields
  7387                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7388                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7389 00000D57 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7390                                  					; get active code page id;smr;Use DS
  7391                                  CHKAGAIN:
  7392                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7393 00000D5A 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7394                                  					; same as active country id?;smr;use DS
  7395 00000D5D 7550                    	JNZ	short CHKNLS		; no
  7396                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7397 00000D5F 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7398                                  					; same as active code pg id?;smr;use DS
  7399 00000D62 754B                    	JNZ	short CHKNLS		; no
  7400                                  CHKTYPE:
  7401                                  	;mov	bx,[si+48h]
  7402 00000D64 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7403                                  					; bx = sys code page id;smr;use DS
  7404 00000D67 51                      	PUSH	CX			; save cx
  7405                                  	;mov	cx,[si+4Ah]
  7406 00000D68 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7407                                  	;mov	si,COUNTRY_CDPG+76
  7408 00000D6B BE[4C12]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7409                                  NXTENTRY:
  7410 00000D6E 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7411 00000D70 740B                    	JZ	short FOUNDIT
  7412 00000D72 83C605                  	ADD	SI,5			; next entry
  7413 00000D75 E2F7                    	LOOP	NXTENTRY
  7414 00000D77 59                      	POP	CX
  7415                                  capinval:
  7416                                  	;error	error_invalid_function	; info type not found
  7417                                  	;mov	al,1
  7418 00000D78 B001                    	mov	al,error_invalid_function
  7419                                  ;SYS_RET_ERR_jmp:
  7420                                  	;jmp	SYS_RET_ERR
  7421                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7422                                  SYS_RET_ERR_jmp:
  7423 00000D7A E9C3F8                  	jmp	SYS_RET_ERR	
  7424                                  
  7425                                  FOUNDIT:
  7426 00000D7D A4                      	MOVSB				; move info id byte
  7427 00000D7E 59                      	POP	CX			; restore char count
  7428                                  	;cmp	al,1
  7429 00000D7F 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7430 00000D81 7415                    	JZ	short setsize
  7431 00000D83 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7432 00000D86 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7433                                  OK_RETN:
  7434 00000D89 F3A4                    	REP	MOVSB			; copy info
  7435 00000D8B 89C1                    	MOV	CX,AX			; CX = actual length returned
  7436 00000D8D 89D8                    	MOV	AX,BX			; return sys code page in ax
  7437                                  GETDONE:
  7438 00000D8F E8EFF6                  	call	Get_User_Stack		; return actual length to user's CX
  7439                                  	;mov	[si+4],cx 
  7440 00000D92 894C04                  	MOV	[SI+user_env.user_CX],CX
  7441                                  	;jmp	SYS_RET_OK
  7442                                  	; 15/12/2022
  7443                                  	; 25/06/2019
  7444 00000D95 E9A2F8                  	jmp	SYS_RET_OK_clc
  7445                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7446                                  	; 15/12/2022
  7447                                  ;nono_jmp:
  7448                                  	;jmp	short nono
  7449                                  setsize:
  7450 00000D98 83E903                  	SUB	CX,3			; size after length field
  7451 00000D9B 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7452 00000D9D 7302                    	JAE	short setsize2		; no
  7453 00000D9F 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7454                                  setsize2:
  7455 00000DA1 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7456                                  	;ADD	DI,2			; update index
  7457                                  	;ADD	SI,2
  7458                                  	; 06/01/2024
  7459 00000DA4 47                      	inc	di
  7460 00000DA5 47                      	inc	di
  7461 00000DA6 46                      	inc	si
  7462 00000DA7 46                      	inc	si
  7463 00000DA8 89C8                    	MOV	AX,CX
  7464 00000DAA 83C003                  	ADD	AX,3			; AX has the actual length
  7465 00000DAD EBDA                    	JMP	short OK_RETN 		; go move it
  7466                                  CHKNLS:
  7467 00000DAF 30E4                    	XOR	AH,AH
  7468                                  	;PUSH	AX			; save info type
  7469                                  	;POP	BP			; bp = info type
  7470                                  	; 06/01/2024
  7471 00000DB1 89C5                    	mov	bp,ax
  7472                                  	
  7473                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7474 00000DB3 B80014                  	mov     ax,1400h
  7475 00000DB6 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7476                                  			; Return: AL = 00h not installed, OK to install
  7477                                  			; 01h not installed, not OK
  7478                                  			; FFh installed
  7479 00000DB8 3CFF                    	CMP	AL,0FFH
  7480 00000DBA 7404                    	JZ	short NLSNXT		; in memory
  7481                                  
  7482                                  sizeerror:
  7483                                  	;error	error_invalid_function
  7484                                  	;mov	al,1
  7485 00000DBC B001                    	mov	al,error_invalid_function
  7486                                  	;jmp	SYS_RET_ERR
  7487                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7488                                  sys_ret_err_jmp2:
  7489 00000DBE EBBA                    	jmp	short SYS_RET_ERR_jmp
  7490                                  
  7491                                  NLSNXT: 
  7492                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7493 00000DC0 B80214                  	mov     ax,1402h
  7494 00000DC3 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7495                                  			; BP = subfunction, BX = code page
  7496                                  			; DX = country code, DS:SI -> internal code page structure
  7497                                  			; ES:DI -> user buffer, CX = size of user buffer
  7498                                  			; Return: AL = status
  7499                                  			; 00h successful
  7500                                  			; else DOS error code
  7501                                  
  7502 00000DC5 3C00                    	CMP	AL,0			; success ?
  7503 00000DC7 7505                    	JNZ	short NLSERROR
  7504                                  	;mov	ax,[si+48h] ; 13/05/2019
  7505 00000DC9 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7506                                  			; ax = sys code page id;smr;use ds;
  7507                                  			;BUGBUG;check whether DS is OK after the above calls
  7508 00000DCC EBC1                    	JMP	short GETDONE
  7509                                  seterr:
  7510                                  	; 15/12/2022
  7511                                  NLSERROR:
  7512                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7513                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7514                                  	;jmp	short sys_ret_err_jmp2
  7515                                  	; 15/12/2022
  7516 00000DCE EBAA                    	jmp	short SYS_RET_ERR_jmp
  7517                                  
  7518                                  ;EndProc $GetExtCntry
  7519                                  
  7520                                  ; 13/05/2019 - Retro DOS v4.0
  7521                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7522                                  
  7523                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7524                                  ;----------------------------------------------------------------------------
  7525                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7526                                  ;
  7527                                  ;   System call format:
  7528                                  ;
  7529                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7530                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7531                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7532                                  ;	INT	21
  7533                                  ;
  7534                                  ;	ENTRY	(al) = n
  7535                                  ;		(bx) = code page
  7536                                  ;	EXIT	'C' clear
  7537                                  ;		  global code page is set	(set global code page)
  7538                                  ;		  (BX) = active code page id	(get global code page)
  7539                                  ;		  (DX) = system code page id	(get global code page)
  7540                                  ;		'C' set
  7541                                  ;		  (AX) = error code
  7542                                  
  7543                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7544                                  
  7545                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7546                                  	; DOSCODE:4BC9h
  7547                                  
  7548                                  _$GetSetCdPg:
  7549                                  
  7550                                  ;hkn; SS is DOSDATA
  7551                                  	;context DS
  7552                                  
  7553 00000DD0 16                      	push	ss
  7554 00000DD1 1F                      	pop	ds
  7555                                  
  7556                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7557 00000DD2 BE[0012]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7558                                  
  7559 00000DD5 3C01                    	CMP	AL,1		       ; get global code page
  7560 00000DD7 7512                    	JNZ	short setglpg 	       ; set global code page
  7561                                  	
  7562                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7563                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7564 00000DD9 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7565                                  					; get active code page id;smr;use ds
  7566                                  	;mov	dx,[si+48h]
  7567 00000DDC 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7568                                  				  	; get sys code page id;smr;use ds
  7569 00000DDF E89FF6                  	call	Get_User_Stack
  7570                                  ;ASSUME DS:NOTHING
  7571                                  	;;mov	[si+2],bx
  7572                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7573                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7574 00000DE2 E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7575                                  	;mov	[si+6],dx
  7576 00000DE5 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7577                                  OK_RETURN:
  7578                                  	; 15/12/2022
  7579                                  	;transfer SYS_RET_OK
  7580 00000DE8 E94CF8                  	jmp	SYS_RET_OK
  7581                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7582                                  	;jmp	short nono_jmp
  7583                                  
  7584                                  ;hkn; ASSUME DS:DOSGROUP
  7585                                  ;ASSUME	DS:DOSDATA
  7586                                  
  7587                                  setglpg:
  7588 00000DEB 3C02                    	CMP	AL,2
  7589 00000DED 752F                    	JNZ	short nomem
  7590                                  	
  7591                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7592                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7593 00000DEF 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7594                                  	
  7595                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7596 00000DF2 B80014                  	mov     ax,1400h
  7597 00000DF5 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7598                                  			; Return: AL = 00h not installed, OK to install
  7599                                  			; 01h not installed, not OK
  7600                                  			; FFh installed
  7601 00000DF7 3CFF                    	CMP	AL,0FFH
  7602 00000DF9 7523                    	JNZ	short nomem		; not in memory
  7603                                  
  7604                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7605 00000DFB B80114                  	mov     ax,1401h
  7606 00000DFE CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7607                                  			; DS:SI -> internal code page structure
  7608                                  			; BX = new code page, DX = country code???
  7609                                  			; Return: AL = status
  7610                                  			; 00h successful
  7611                                  			; else DOS error code
  7612                                  	;cmp	al,0
  7613 00000E00 08C0                    	or	al,al			; success ?
  7614 00000E02 74E4                    	JZ	short OK_RETURN		; yes
  7615                                  
  7616 00000E04 3C41                    	CMP	AL,65			; set device code page failed
  7617 00000E06 75C6                    	JNZ	short seterr
  7618                                  	;MOV	AX,65
  7619                                  	; 06/01/2024
  7620 00000E08 98                      	cbw
  7621 00000E09 A3[2403]                	MOV	[EXTERR],AX
  7622                                  	;mov	byte [EXTERR_ACTION],6
  7623                                  	;mov	byte [EXTERR_CLASS],5
  7624                                  	;mov	byte [EXTERR_LOCUS],4
  7625 00000E0C C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7626 00000E11 C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7627 00000E16 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7628                                  	;transfer From_GetSet
  7629 00000E1B E92AF8                  	jmp	From_GetSet
  7630                                  
  7631                                  	; 15/12/2022
  7632                                  ;seterr:
  7633                                  	;;;transfer SYS_RET_ERR
  7634                                  	;;jmp	SYS_RET_ERR
  7635                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7636                                  	;jmp	short NLSERROR
  7637                                  
  7638                                  nomem:
  7639                                  	;error	error_invalid_function	; function not defined
  7640                                  	;mov	al,1
  7641 00000E1E B001                    	mov	al,error_invalid_function
  7642 00000E20 EBAC                    	jmp	short seterr
  7643                                  
  7644                                  ;EndProc $GetSetCdPg
  7645                                  
  7646                                  ; 09/01/2024
  7647                                  ; 13/05/2019 - Retro DOS v4.0
  7648                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7649                                  
  7650                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7651                                  ;----------------------------------------------------------------------------
  7652                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7653                                  ;
  7654                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7655                                  ;		drive.
  7656                                  ;
  7657                                  ;	This call returns the same info in the same registers (except for the
  7658                                  ;	FAT pointer) as the old FAT pointer calls
  7659                                  ;
  7660                                  ;	ENTRY	DL = Drive number
  7661                                  ;	EXIT	AX = Sectors per allocation unit
  7662                                  ;		   = -1 if bad drive specified
  7663                                  ;		On User Stack
  7664                                  ;		    BX = Number of free allocation units
  7665                                  ;		    DX = Total Number of allocation units on disk
  7666                                  ;		    CX = Sector size
  7667                                  
  7668                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7669                                  
  7670                                  _$GET_DRIVE_FREESPACE:
  7671                                  
  7672                                  ;hkn; SS is DOSDATA
  7673                                  	;context DS
  7674 00000E22 16                      	push	ss
  7675 00000E23 1F                      	pop	ds
  7676                                  
  7677 00000E24 88D0                    	MOV	AL,DL
  7678                                  	;invoke	GetThisDrv		; Get drive
  7679 00000E26 E8595B                  	call	GETTHISDRV
  7680                                  SET_AX_RET:
  7681 00000E29 7212                    	JC	short BADFDRV
  7682                                  	;invoke	DISK_INFO
  7683 00000E2B E8321E                  	call	DISK_INFO
  7684 00000E2E 87D3                    	XCHG	DX,BX
  7685                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7686                                  	; 06/01/2024
  7687 00000E30 720B                    	jc	short BADFDRV
  7688 00000E32 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7689                                  DoSt:
  7690 00000E34 E84AF6                  	call	Get_User_Stack
  7691                                  ;ASSUME	DS:NOTHING
  7692                                  	;mov	[si+6],dx
  7693                                  	;;mov	[si+4],cx
  7694                                  	;;mov	[si+2],bx
  7695                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7696 00000E37 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7697                                  	;MOV	[SI+user_env.user_CX],CX
  7698                                  	;MOV	[SI+user_env.user_BX],BX
  7699                                  	;;MOV	[SI+user_env.user_AX],AX
  7700                                  	;mov	[si],ax
  7701                                  	;;return
  7702                                  	;retn
  7703                                  	; 09/01/2024
  7704 00000E3A E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7705                                  
  7706                                  BADFDRV:
  7707                                  	; MSDOS 3.3
  7708                                  	;;mov	al,0Fh
  7709                                  	;mov	al,error_invalid_drive	; Assume error
  7710                                  
  7711                                  	; 13/05/2019 - Retro DOS v4.0
  7712                                  
  7713                                  	; MSDOS 6.0 & MSDOS 3.3
  7714                                  	;invoke	FCB_RET_ERR
  7715 00000E3D E816F8                  	call	FCB_RET_ERR
  7716                                  	
  7717 00000E40 B8FFFF                  	MOV	AX,-1
  7718 00000E43 EBEF                    	JMP	short DoSt
  7719                                  
  7720                                  ;EndProc $GET_DRIVE_FREESPACE
  7721                                  
  7722                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7723                                  ;----------------------------------------------------------------------------
  7724                                  ;**	$Get_DMA - Get Disk Transfer Address
  7725                                  ;
  7726                                  ;	ENTRY	none
  7727                                  ;	EXIT	ES:BX is current transfer address
  7728                                  ;	USES	all
  7729                                  
  7730                                  	; 09/01/2024
  7731                                  _$GET_DMA:
  7732 00000E45 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7733 00000E4A 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7734 00000E4F E82FF6                  	call	Get_User_Stack
  7735                                  	;mov	[si+2],bx
  7736                                  	;mov	[si+10h],cx
  7737                                  	; 09/01/2024
  7738                                  	;MOV	[SI+user_env.user_BX],BX
  7739 00000E52 894C10                  	MOV	[SI+user_env.user_ES],CX
  7740                                  	;retn
  7741                                  	; 09/01/2024
  7742 00000E55 E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7743                                  
  7744                                  ;**	$Set_DMA - Set Disk Transfer Address
  7745                                  ;----------------------------------------------------------------------------
  7746                                  ;	ENTRY	DS:DX is current transfer address
  7747                                  ;	EXIT	none
  7748                                  ;	USES	all
  7749                                  
  7750                                  _$SET_DMA:
  7751 00000E58 368916[2C03]            	MOV	[SS:DMAADD],DX
  7752 00000E5D 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7753 00000E62 C3                      	retn
  7754                                  
  7755                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7756                                  ;------------------------------------------------------------------------------
  7757                                  
  7758                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7759                                  ;-----------------------------------------------------
  7760                                  ;	ENTRY	none
  7761                                  ;	EXIT	(AL) = drive number
  7762                                  ;	USES	all
  7763                                  
  7764                                  _$GET_DEFAULT_DRIVE:
  7765 00000E63 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7766 00000E67 C3                      	retn
  7767                                  
  7768                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7769                                  ;-----------------------------------------------------
  7770                                  ;	ENTRY	(DL) = Drive number for new default drive
  7771                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7772                                  
  7773                                  _$SET_DEFAULT_DRIVE:
  7774 00000E68 88D0                    	MOV	AL,DL
  7775 00000E6A FEC0                    	INC	AL			; A=1, B=2...
  7776 00000E6C E8F75A                  	call	GetVisDrv		; see if visible drive
  7777 00000E6F 7204                    	JC	short SETRET		; errors do not set
  7778 00000E71 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7779                                  
  7780                                  SETRET:
  7781 00000E75 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7782 00000E79 C3                      	retn
  7783                                  
  7784                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7785                                  ;----------------------------------------------------------------------------
  7786                                  
  7787                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7788                                  ;---------------------------------------------------
  7789                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7790                                  ;	contents of an interrupt vector.
  7791                                  ;
  7792                                  ;	ENTRY	(AL) = interrupt number
  7793                                  ;	EXIT	(ES:BX) = current interrupt vector
  7794                                  
  7795                                  _$GET_INTERRUPT_VECTOR:
  7796 00000E7A E82E00                  	CALL	RECSET
  7797 00000E7D 26C41F                  	LES	BX,[ES:BX]
  7798 00000E80 E8FEF5                  	call	Get_User_Stack
  7799                                  set_user_es_bx:
  7800                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7801                                  	;;mov	[si+2],bx
  7802                                  	;mov	[si+10h],es
  7803                                  	;MOV	[SI+user_env.user_BX],BX
  7804 00000E83 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7805                                  	;retn
  7806 00000E86 E9B7FD                  	jmp	set_user_bx
  7807                                  
  7808                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7809                                  ;---------------------------------------------------
  7810                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7811                                  ;	contents of an interrupt vector.
  7812                                  ;
  7813                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7814                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7815                                  ;	for explanation.
  7816                                  ;
  7817                                  ;	ENTRY	(AL) = interrupt number
  7818                                  ;		(ds:dx) = desired new vector value
  7819                                  ;	EXIT	none
  7820                                  ;	USES	all
  7821                                  
  7822                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7823                                  ; 13/05/2019 - Retro DOS v4.0
  7824                                  
  7825                                  _$SET_INTERRUPT_VECTOR:
  7826 00000E89 E81F00                  	CALL	RECSET
  7827 00000E8C FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7828 00000E8D 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7829 00000E90 268C5F02                	MOV	[ES:BX+2],DS
  7830 00000E94 FB                      	STI
  7831                                  					; M004, M068 - Start
  7832                                  	; MSDOS 6.0
  7833 00000E95 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7834                                  					; Q: was the previous call an int 21h
  7835                                  					;    exec call
  7836                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7837                                  	;jnz	short siv_1		; Y: go set count
  7838                                  	;retn				; N: return
  7839                                  	; 15/12/2022
  7840 00000E9B 740D                    	jz	short siv_2
  7841                                  siv_1:	
  7842 00000E9D 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7843 00000EA3 7505                    	jnz	short siv_2		 ; N: done
  7844                                  	; 20/09/2023
  7845 00000EA5 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7846                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7847                                  					 ; dispatcher to turn A20 Off before
  7848                                  					 ; returning to user.
  7849                                  siv_2:
  7850                                  	; 07/12/2022
  7851 00000EAA C3                      	retn				; M004, M068 - End
  7852                                  	
  7853                                  RECSET:
  7854 00000EAB 31DB                    	XOR	BX,BX
  7855 00000EAD 8EC3                    	MOV	ES,BX
  7856 00000EAF 88C3                    	MOV	BL,AL
  7857 00000EB1 D1E3                    	SHL	BX,1
  7858 00000EB3 D1E3                    	SHL	BX,1
  7859 00000EB5 C3                      	retn
  7860                                  
  7861                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7862                                  ;-------------------------------------------------------------------------------------
  7863                                  
  7864                                  ;**	$Char_Oper - Manipulate Switch Character
  7865                                  ;
  7866                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7867                                  ;
  7868                                  ;	ENTRY	AL = function:
  7869                                  ;		    0 - read switch char
  7870                                  ;		    1 - set switch char (char in DL)
  7871                                  ;		    2 - read device availability
  7872                                  ;			Always returns available
  7873                                  ;		    3 - set device availability
  7874                                  ;			No longer supported (NOP)
  7875                                  ;	EXIT	(al) = 0xff iff error
  7876                                  ;		(al) != 0xff if ok
  7877                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7878                                  ;	USES	AL, DL
  7879                                  ;
  7880                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7881                                  ;		The character / is always returned for subfunction 0,
  7882                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7883                                  
  7884                                  ; 13/05/2019 - Retro DOS v4.0
  7885                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7886                                  
  7887                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7888                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7889                                  
  7890                                  _$CHAR_OPER:
  7891                                  	; MSDOS 6.0
  7892 00000EB6 08C0                    	or	al,al				; get switch?
  7893 00000EB8 B22F                    	mov	dl,'/'				; assume yes
  7894 00000EBA 7407                    	jz	short chop_1			; jump if yes
  7895 00000EBC 3C02                    	cmp	al,2				; check device availability?
  7896 00000EBE B2FF                    	mov	dl,-1				; assume yes
  7897 00000EC0 7401                    	jz	short chop_1			; jump if yes
  7898 00000EC2 C3                      	retn					; otherwise just quit
  7899                                  
  7900                                  ; subfunctions requiring return of value to user come here. DL holds
  7901                                  ; value to return
  7902                                  
  7903                                  chop_1:
  7904 00000EC3 E8BBF5                  	call	Get_User_Stack
  7905 00000EC6 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7906 00000EC9 C3                      	retn
  7907                                  
  7908                                  	; MSDOS 3.3
  7909                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7910                                  	;push	ss
  7911                                  	;pop	ds
  7912                                  	;cmp	al,1
  7913                                  	;jb	short chop_1
  7914                                  	;jz	short chop_2
  7915                                  	;cmp	al,3
  7916                                  	;jb	short chop_3
  7917                                  	;jz	short chop_5
  7918                                  	;mov	al,0FFh
  7919                                  	;retn
  7920                                  ;chop_1:
  7921                                  	;mov	dl,[chSwitch]
  7922                                  	;jmp	short chop_4
  7923                                  ;chop_2:
  7924                                  	;mov	[chSwitch],dl
  7925                                  	;retn
  7926                                  ;chop_3:
  7927                                  	;mov	dl, FFh
  7928                                  ;chop_4:
  7929                                  	;call	Get_User_Stack
  7930                                  	;mov	[si+6],dx
  7931                                  ;chop_5:
  7932                                  	;retn
  7933                                  
  7934                                  ;**	$GetExtendedError - Return Extended error code
  7935                                  ;----------------------------------------------------------------------------
  7936                                  ;	This function reads up the extended error info from the static
  7937                                  ;	variables where it was stored.
  7938                                  ;
  7939                                  ;	ENTRY	none
  7940                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7941                                  ;		BL = recommended action
  7942                                  ;		BH = class of error
  7943                                  ;		CH = locus of error
  7944                                  ;		ES:DI = may be pointer
  7945                                  ;	USES	ALL
  7946                                  
  7947                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7948                                  
  7949                                  _$GetExtendedError:
  7950 00000ECA 16                      	push	ss
  7951 00000ECB 1F                      	pop	ds
  7952 00000ECC A1[2403]                	MOV	AX,[EXTERR]
  7953 00000ECF C43E[2803]              	LES	DI,[EXTERRPT]
  7954 00000ED3 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7955 00000ED7 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7956 00000EDB E8A3F5                  	call	Get_User_Stack
  7957                                  	;mov	[si+0Ah],di
  7958 00000EDE 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7959                                  
  7960                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7961                                  	;;mov	[si+10h],es
  7962                                  	;MOV	[SI+user_env.user_ES],ES
  7963                                  	;;mov	[si+2],bx
  7964                                  	;MOV	[SI+user_env.user_BX],BX
  7965 00000EE1 E89FFF                  	call	set_user_es_bx
  7966                                  
  7967                                  	;mov	[si+4],cx
  7968 00000EE4 894C04                  	MOV	[SI+user_env.user_CX],CX
  7969                                  jmp_SYS_RET_OK:
  7970                                  	; 15/12/2022
  7971                                  	;jmp	SYS_RET_OK
  7972                                  	; 25/06/2019
  7973 00000EE7 E950F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7974                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7975                                  ;jmp_SYS_RET_OK:
  7976                                  	;jmp	SYS_RET_OK
  7977                                  
  7978                                  ; --------------------------------------------------------------------------
  7979                                  ; 09/01/2024
  7980                                  %if 0
  7981                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7982                                  	; DOSCODE:4CF3h
  7983                                  ;patch_or_unknown:
  7984                                  ;get_code_page:
  7985                                  	push    si
  7986                                  	mov     si, COUNTRY_CDPG
  7987                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7988                                  	mov     ax, [ss:si+6Ah]
  7989                                  	pop     si
  7990                                  	retn
  7991                                  %endif
  7992                                  ; --------------------------------------------------------------------------
  7993                                  
  7994                                  ; 29/04/2019 - Retro DOS v4.0
  7995                                  
  7996                                  ;BREAK	<ECS_call - Extended Code System support function>
  7997                                  ;---------------------------------------------------------------------------
  7998                                  ; Inputs:
  7999                                  ;	AL = 0	get lead byte table
  8000                                  ;		on return DS:SI has the table location
  8001                                  ;
  8002                                  ;	AL = 1	set / reset interim console flag
  8003                                  ;		DL = flag (00H or 01H)
  8004                                  ;		no return
  8005                                  ;
  8006                                  ;	AL = 2	get interim console flag
  8007                                  ;		on return DL = current flag value
  8008                                  ;
  8009                                  ;	AL = OTHER then error, and returns with:
  8010                                  ;		AX = error_invalid_function
  8011                                  ;
  8012                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  8013                                  ;	 SS:SP WILL BE PRESERVED!
  8014                                  ;---------------------------------------------------------------------------
  8015                                  
  8016                                  _$ECS_Call:
  8017 00000EEA 08C0                    	or	al,al			; AL = 0 (get table)?
  8018                                  	;jnz	short _okok
  8019                                  	; 15/12/2022
  8020 00000EEC 7403                    	jz	short get_lbt
  8021                                  ;_okok:
  8022 00000EEE E946F7                  	jmp	SYS_RET_OK
  8023                                  get_lbt:
  8024 00000EF1 E88DF5                  	call	Get_User_Stack		; *
  8025                                  
  8026                                  ;hkn; dbcs_table moved low to dosdata
  8027                                  	;mov	word [si+8],DBCS_TAB+2
  8028 00000EF4 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  8029                                  
  8030 00000EF9 06                      	push	es
  8031                                  	;getdseg <es>			; es = DOSDATA
  8032 00000EFA 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  8033                                  	;mov	[si+14],es
  8034 00000EFF 8C440E                  	mov	[SI+user_env.user_DS],es
  8035 00000F02 07                      	pop	es
  8036                                  
  8037                                  	; 15/12/2022
  8038 00000F03 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  8039                                  ;_okok:
  8040                                  	; 15/12/2022	
  8041                                  	;;transfer SYS_RET_OK
  8042                                  	;jmp	short jmp_SYS_RET_OK
  8043                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8044                                  	;;jmp	SYS_RET_OK
  8045                                  	;jmp	short jmp_SYS_RET_OK
  8046                                  
  8047                                  ;============================================================================
  8048                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8049                                  ;============================================================================
  8050                                  ; 19/07/2018 - Retro DOS v3.0
  8051                                  ; 15/05/2019 - Retro DOS v4.0
  8052                                  
  8053                                  ; System calls for parsing command lines
  8054                                  ;
  8055                                  ;   $PARSE_FILE_DESCRIPTOR
  8056                                  ;
  8057                                  ;   Modification history:
  8058                                  ;
  8059                                  ;       Created: ARR 30 March 1983
  8060                                  ;               EE PathParse 10 Sept 1983
  8061                                  ;
  8062                                  
  8063                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8064                                  ;---------------------------------------------------------------------------
  8065                                  ; Inputs:
  8066                                  ;       DS:SI Points to a command line
  8067                                  ;       ES:DI Points to an empty FCB
  8068                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8069                                  ;                   = 0 Parse stops if separator encountered
  8070                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8071                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8072                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8073                                  ;                   = 0  "       "      "       - put blanks in FCB
  8074                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8075                                  ;                   = 0  "       "      "        - put blanks in FCB
  8076                                  ; Function:
  8077                                  ;       Parse command line into FCB
  8078                                  ; Returns:
  8079                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8080                                  ;       DS:SI points to first character after filename
  8081                                  ;---------------------------------------------------------------------------
  8082                                  
  8083                                  _$PARSE_FILE_DESCRIPTOR:
  8084 00000F05 E8FC3E                  	call	MAKEFCB
  8085 00000F08 56                      	PUSH    SI
  8086 00000F09 E875F5                  	call	Get_User_Stack
  8087                                  	;pop	word [si+8]
  8088 00000F0C 8F4408                  	POP     word [SI+user_env.user_SI]
  8089 00000F0F C3                      	retn
  8090                                  
  8091                                  ;============================================================================
  8092                                  ; MISC.ASM, MSDOS 6.0, 1991
  8093                                  ;============================================================================
  8094                                  ; 19/07/2018 - Retro DOS v3.0
  8095                                  
  8096                                  ; 29/04/2019 - Retro DOS v4.0
  8097                                  
  8098                                  ;ENTRYPOINTSEG	EQU	0CH
  8099                                  ;MAXDIF		EQU	0FFFH
  8100                                  ;SAVEXIT 	EQU	10
  8101                                  ;WRAPOFFSET	EQU	0FEF0h
  8102                                  
  8103                                  ;
  8104                                  ;----------------------------------------------------------------------------
  8105                                  ;
  8106                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8107                                  ;
  8108                                  ;	Return Stuff sort of like old get fat call
  8109                                  ;
  8110                                  ;	ENTRY	none
  8111                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8112                                  ;			GOD help anyone who tries to do ANYTHING except
  8113                                  ;			READ this ONE byte.
  8114                                  ;		DX = Total Number of allocation units on disk
  8115                                  ;		CX = Sector size
  8116                                  ;		AL = Sectors per allocation unit
  8117                                  ;		   = -1 if bad drive specified
  8118                                  ;	USES	all
  8119                                  ;
  8120                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8121                                  ;
  8122                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8123                                  ;
  8124                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8125                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8126                                  ;			GOD help anyone who tries to do ANYTHING except
  8127                                  ;			READ this ONE byte.
  8128                                  ;		DX = Total Number of allocation units on disk
  8129                                  ;		CX = Sector size
  8130                                  ;		AL = Sectors per allocation unit
  8131                                  ;		   = -1 if bad drive specified
  8132                                  ;	USES	all
  8133                                  ;
  8134                                  ;----------------------------------------------------------------------------
  8135                                  ;
  8136                                  
  8137                                  _$SLEAZEFUNC:
  8138                                  	; 10/01/2024
  8139                                  	; 15/05/2019 - Retro DOS v4.0
  8140 00000F10 B200                    	MOV	DL,0
  8141                                  _$SLEAZEFUNCDL:
  8142 00000F12 16                      	push	ss
  8143 00000F13 1F                      	pop	ds
  8144                                  	
  8145 00000F14 88D0                    	MOV	AL,DL
  8146 00000F16 E8695A                  	call	GETTHISDRV		; Get CDS structure
  8147                                  SET_AL_RET:
  8148                                  	; MSDOS 3.3
  8149                                  	;;mov	al, 0Fh
  8150                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8151                                  	
  8152                                  	; MSDOS 6.0 & MSDOS 3.3
  8153 00000F19 721D                    	JC	short BADSLDRIVE
  8154                                  
  8155 00000F1B E8421D                  	call	DISK_INFO
  8156                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8157 00000F1E 7218                    	jc	short BADSLDRIVE
  8158 00000F20 8826[9805]              	MOV	[FATBYTE],AH
  8159                                  
  8160                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8161                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8162                                  ; CALL AGAIN
  8163                                  
  8164                                  	; 10/01/2024
  8165                                  	;MOV	DI,FATBYTE
  8166 00000F24 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8167 00000F26 E858F5                  	call	Get_User_Stack
  8168                                  	;mov	[si+4],cx
  8169                                  	;mov	[si+6],bx
  8170                                  	;mov	[si+2],di
  8171 00000F29 894C04                  	MOV	[SI+user_env.user_CX],CX
  8172 00000F2C 895C06                  	MOV	[SI+user_env.user_DX],BX
  8173                                  	;MOV	[SI+user_env.user_BX],DI
  8174                                  	; 10/01/2024
  8175 00000F2F C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8176                                  	
  8177                                  	;mov	[si+0Eh],ss
  8178 00000F34 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8179                                  
  8180 00000F37 C3                      	retn
  8181                                  
  8182                                  BADSLDRIVE:
  8183 00000F38 E91BF7                  	jmp	FCB_RET_ERR
  8184                                  
  8185                                  ;
  8186                                  ;----------------------------------------------------------------------------
  8187                                  ;
  8188                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8189                                  ;
  8190                                  ;	Returns location of DOS status for interrupt routines
  8191                                  ;
  8192                                  ;	ENTRY	none
  8193                                  ;	EXIT	(es:bx) = flag location
  8194                                  ;	USES	all
  8195                                  ;
  8196                                  ;----------------------------------------------------------------------------
  8197                                  ;
  8198                                  
  8199                                  _$GET_INDOS_FLAG:
  8200 00000F3B E843F5                          CALL	Get_User_Stack
  8201                                          ;MOV	WORD [SI+2],INDOS
  8202 00000F3E C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8203                                  getin_segm:	; 13/01/2024
  8204                                  	;MOV	[SI+10H],SS
  8205 00000F43 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8206 00000F46 C3                      	RETN 
  8207                                  ;
  8208                                  ;----------------------------------------------------------------------------
  8209                                  ;
  8210                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8211                                  ;
  8212                                  ;	Return a pointer to interesting DOS variables This call is version
  8213                                  ;	dependent and is subject to change without notice in future versions.
  8214                                  ;	Use at risk.
  8215                                  ;
  8216                                  ;	ENTRY	none
  8217                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8218                                  ;	uses	ALL
  8219                                  ;
  8220                                  ;----------------------------------------------------------------------------
  8221                                  ;
  8222                                  
  8223                                  	; 13/01/2024
  8224                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8225                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8226                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8227                                  
  8228                                  _$GET_IN_VARS:
  8229 00000F47 E837F5                  	CALL	Get_User_Stack
  8230                                  	;MOV	WORD [SI+2],SYSINITVAR
  8231                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8232 00000F4A C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8233                                  	; 13/01/2024
  8234                                  	;;MOV	[SI+10H],SS
  8235                                  	;MOV	[SI+user_env.user_ES],SS
  8236                                  	;RETN
  8237 00000F4F EBF2                    	jmp	short getin_segm
  8238                                  
  8239                                  ;
  8240                                  ;----------------------------------------------------------------------------
  8241                                  ;
  8242                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8243                                  ;
  8244                                  ;	Return pointer to drive parameter table for default drive
  8245                                  ;
  8246                                  ;	ENTRY	none
  8247                                  ;	EXIT	(ds:bx) = DPB address
  8248                                  ;	USES	all
  8249                                  ;
  8250                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8251                                  ;
  8252                                  ;	Return pointer to a specified drive parameter table
  8253                                  ;
  8254                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8255                                  ;	EXIT	(al) = 0 iff ok
  8256                                  ;		  (ds:bx) = DPB address
  8257                                  ;		(al) = -1 if bad drive
  8258                                  ;	USES	all
  8259                                  ;
  8260                                  ;----------------------------------------------------------------------------
  8261                                  ;
  8262                                  
  8263                                  ; 15/05/2019 - Retro DOS v4.0
  8264                                  
  8265                                  _$GET_DEFAULT_DPB:
  8266 00000F51 B200                    	MOV	DL,0
  8267                                  _$GET_DPB:
  8268 00000F53 16                      	push	ss
  8269 00000F54 1F                      	pop	ds
  8270                                  
  8271 00000F55 88D0                    	MOV	AL,DL
  8272 00000F57 E8285A                  	call	GETTHISDRV		; Get CDS structure
  8273 00000F5A 7222                    	JC	short ISNODRV 		; no valid drive
  8274 00000F5C C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8275                                  	;;test	word [es:di+43h],8000h
  8276                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8277                                  	;test	byte [es:di+44h],80h
  8278 00000F60 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8279 00000F65 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8280 00000F67 E88903                  	call	ECritDisk
  8281 00000F6A E85246                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8282 00000F6D E89E03                  	call	LCritDisk
  8283 00000F70 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8284                                  					;   have.
  8285 00000F72 E80CF5                  	call	Get_User_Stack
  8286                                  	;mov	[si+2],bp
  8287 00000F75 896C02                  	MOV	[SI+user_env.user_BX],BP
  8288                                  	;mov	[si+0Eh],es
  8289 00000F78 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8290 00000F7B 30C0                    	XOR	AL,AL
  8291 00000F7D C3                      	retn
  8292                                  ISNODRV:
  8293 00000F7E B0FF                    	MOV	AL,-1
  8294 00000F80 C3                      	retn
  8295                                  
  8296                                  ;
  8297                                  ;----------------------------------------------------------------------------
  8298                                  ;
  8299                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8300                                  ;
  8301                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8302                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8303                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8304                                  ;
  8305                                  ;	ENTRY	none
  8306                                  ;	EXIT	none
  8307                                  ;	USES	all
  8308                                  ;
  8309                                  ;----------------------------------------------------------------------------
  8310                                  ;
  8311                                  
  8312                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8313                                  	; DOSCODE:4D94h
  8314                                  _$DISK_RESET:
  8315                                  	; 15/05/2019 - Retro DOS v4.0
  8316 00000F81 B0FF                    	mov	al,0FFh	; -1
  8317 00000F83 16                      	push	ss
  8318 00000F84 1F                      	pop	ds
  8319                                  	; 06/11/2022
  8320                                  	;MOV	AL,-1
  8321 00000F85 E86B03                  	call	ECritDisk
  8322                                  	; MSDOS 6.0
  8323                                  	;;or	word [DOS34_FLAG],4
  8324                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8325 00000F88 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8326 00000F8D E8A849                  	call	FLUSHBUF
  8327                                  	; MSDOS 6.0
  8328                                  	;and	word [DOS34_FLAG],0FFFBh
  8329                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8330                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8331                                  	; 15/12/2022
  8332 00000F90 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8333 00000F95 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8334                                  ;
  8335                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8336                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8337                                  ; let's do it.
  8338                                  ;
  8339                                  ; Invalidate 'last-buffer' used
  8340                                  ;
  8341 00000F9B BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8342 00000F9E 891E[2000]              	MOV	[LastBuffer+2],BX
  8343 00000FA2 891E[1E00]              	MOV	[LastBuffer],BX
  8344                                  
  8345                                  	; MSDOS 3.3 
  8346                                  	; IBMDOS.COM, Offset 1C66h
  8347                                  	;;;;
  8348                                  	;lds	si,[BUFFHEAD]
  8349                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8350                                  				; .buf_flags, AH = 0, reset/clear
  8351                                  ;DRST_1:
  8352                                  	;;mov	[si+4],ax
  8353                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8354                                  	;lds	si,[SI]
  8355                                  	;cmp	si,bx ; -1
  8356                                  	;je	short DRST_2
  8357                                  	;;mov	[si+4],ax
  8358                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8359                                  	;lds	si,[SI]
  8360                                  	;cmp	si,bx
  8361                                  	;jne	short DRST_1
  8362                                  	;;;;
  8363                                  ;DRST_2:
  8364 00000FA6 E86503                  	call	LCritDisk
  8365 00000FA9 B8FFFF                  	MOV	AX,-1
  8366                                  	; 07/12/2022
  8367                                  	;mov	ax,0FFFFh
  8368                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8369 00000FAC 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8370 00000FAD B82011                  	mov     ax,1120h
  8371 00000FB0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8372                                  			; DS = DOS CS
  8373                                  			; Return: CF clear (successful)
  8374 00000FB2 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8375                                  	
  8376 00000FB3 C3                      	retn
  8377                                  
  8378                                  	; 19/07/2018 - Retro DOS v3.0
  8379                                  
  8380                                  ;
  8381                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8382                                  ;
  8383                                  ;----------------------------------------------------------------------------
  8384                                  ;
  8385                                  ;**	$SetDPB - Create a DPB
  8386                                  ;
  8387                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8388                                  ;
  8389                                  ;	ENTRY	ES:BP Points to DPB
  8390                                  ;		DS:SI Points to BPB
  8391                                  ;	EXIT	DPB setup
  8392                                  ;	USES	ALL but BP, DS, ES
  8393                                  ;
  8394                                  ;----------------------------------------------------------------------------
  8395                                  ;
  8396                                  
  8397                                  ; 10/05/2019 - Retro DOS v4.0
  8398                                  
  8399                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8400                                  
  8401                                  ; MSDOS 6.0
  8402 00000FB4 0300                    word3:	dw	3			; M008 -- word value for divides
  8403                                  
  8404                                  ; 13/01/2024
  8405                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8406                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8407                                  
  8408                                  ;procedure   $SETDPB,NEAR
  8409                                  
  8410                                  _$SETDPB:
  8411 00000FB6 89EF                    	MOV	DI,BP
  8412                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8413                                  	; 13/01/2024
  8414 00000FB8 47                      	inc	di
  8415 00000FB9 47                      	inc	di
  8416 00000FBA AD                      	LODSW
  8417 00000FBB AB                      	STOSW				; dpb_sector_size
  8418                                  	; MSDOS 6.0
  8419                                  	;cmp	byte [si+3],0
  8420 00000FBC 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8421 00000FC0 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8422                                  	;mov	byte [es:di+4],0
  8423 00000FC2 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8424                                  	; 13/01/2024
  8425 00000FC7 89C3                    	mov	bx,ax
  8426 00000FC9 EB70                    	JMP	short setend			     ; NO		;AN000;
  8427                                  
  8428                                  yesfat: ; 10/08/2018
  8429 00000FCB 89C2                    	MOV	DX,AX
  8430 00000FCD AC                      	LODSB
  8431                                  	;DEC	AL
  8432                                  	; 17/12/2022
  8433 00000FCE 48                      	dec	ax
  8434 00000FCF AA                      	STOSB				; dpb_cluster_mask
  8435                                  	;INC	AL
  8436 00000FD0 40                      	inc	ax
  8437 00000FD1 30E4                    	XOR	AH,AH
  8438                                  LOG2LOOP:
  8439 00000FD3 A801                    	test	AL,1
  8440 00000FD5 7506                    	JNZ	short SAVLOG
  8441 00000FD7 FEC4                    	INC	AH
  8442 00000FD9 D0E8                    	SHR	AL,1
  8443 00000FDB EBF6                    	JMP	SHORT LOG2LOOP
  8444                                  SAVLOG:
  8445 00000FDD 88E0                    	MOV	AL,AH
  8446 00000FDF AA                      	STOSB				; dpb_cluster_shift
  8447 00000FE0 88C3                    	MOV	BL,AL
  8448 00000FE2 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8449 00000FE3 AC                      	LODSB
  8450 00000FE4 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8451                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8452                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8453 00000FE5 88C7                    	MOV	BH,AL
  8454 00000FE7 AD                      	LODSW
  8455 00000FE8 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8456 00000FE9 B105                    	MOV	CL,5
  8457 00000FEB D3EA                    	SHR	DX,CL			; Directory entries per sector
  8458 00000FED 48                      	DEC	AX
  8459 00000FEE 01D0                    	ADD	AX,DX			; Cause Round Up
  8460 00000FF0 89D1                    	MOV	CX,DX
  8461 00000FF2 31D2                    	XOR	DX,DX
  8462 00000FF4 F7F1                    	DIV	CX
  8463 00000FF6 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8464 00000FF8 47                      	INC	DI
  8465 00000FF9 47                      	INC	DI			; Skip dpb_first_sector
  8466 00000FFA A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8467 00000FFB AC                      	LODSB
  8468                                  	;mov	[es:bp+17h],al
  8469 00000FFC 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8470 00001000 AD                      	LODSW				; Number of sectors in a FAT
  8471                                  	
  8472                                  	;;;
  8473                                  	;MSDOS 3.3
  8474                                  	;
  8475                                  	;STOSB		; DPB.FAT_SIZE
  8476                                  	;MUL	BH
  8477                                  	
  8478                                  	;MSDOS 6.0
  8479                                  	;
  8480 00001001 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8481 00001002 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8482 00001004 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8483 00001006 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8484                                  	;;;
  8485                                  	
  8486                                  	;add	ax,[es:bp+6]
  8487 00001008 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8488 0000100C AB                      	STOSW				; dpb_dir_sector
  8489 0000100D 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8490                                  	;mov	[es:bp+0Bh],ax
  8491 0000100F 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8492                                  	
  8493                                  	; MSDOS 6.0
  8494 00001013 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8495                                  	;;cmp	word [es:bp+0Dh],0
  8496                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8497                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8498                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8499                                  	; 15/12/2022
  8500                                  	; 28/07/2019
  8501 00001015 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8502 00001019 09DB                    	or	bx,bx
  8503 0000101B 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8504                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8505                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8506                                  	
  8507                                  
  8508 0000101D 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8509                                  	;mov	bx,[si+8]
  8510 0000101F 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8511                                  	;mov	dx,[si+10]
  8512 00001022 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8513 00001025 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8514 00001027 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8515 0000102A 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8516 0000102C 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8517                                  rott:					;AN000;;F.C. >32mb
  8518 0000102E F8                      	CLC				;AN000;;F.C. >32mb
  8519 0000102F D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8520 00001031 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8521 00001033 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8522                                  norot:					;AN000;
  8523                                  	; 15/12/2022
  8524                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8525 00001035 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8526                                  normal_dpb:
  8527                                  	;;sub	ax,[es:bp+0Dh]
  8528                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8529                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8530                                  	; 15/12/2022
  8531                                  	; bx = [es:bp+DSKSIZ]
  8532                                  	;sub	ax,bx ; 28/07/2019
  8533                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8534                                  	; 15/12/2022
  8535 00001037 29C3                    	sub	bx,ax
  8536                                  	;NEG	AX			; Sectors in data area
  8537                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8538                                  	; 15/12/2022
  8539                                  	; CL = cluster shift
  8540                                  	; BX = number of data sectors 
  8541                                  	;SHR	AX,CL			; Div by sectors/cluster
  8542 00001039 D3EB                    	shr	bx,cl 
  8543                                  setend:
  8544                                  ;	M008 - CAS
  8545                                  ;
  8546                                  	; 15/12/2022
  8547 0000103B 43                      	inc	bx
  8548                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8549                                  ;
  8550                                  ;	There has been a bug in our fatsize calculation for so long
  8551                                  ;	  that we can't correct it now without causing some user to
  8552                                  ;	  experience data loss. There are even cases where allowing
  8553                                  ;	  the number of clusters to exceed the fats is the optimal
  8554                                  ;	  case -- where adding 2 more fat sectors would make the
  8555                                  ;	  data field smaller so that there's nothing to use the extra
  8556                                  ;	  fat sectors for.
  8557                                  ;
  8558                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8559                                  ;	  still report that there was a cluster left when the disk was
  8560                                  ;	  actually full. Very graceful failure for a corrupt system
  8561                                  ;	  configuration. There may be worse cases that were never
  8562                                  ;	  properly traced back to this bug. The problem cases only
  8563                                  ;	  occurred when partition sizes were very near FAT sector
  8564                                  ;	  rounding boundaries, which were rare cases.
  8565                                  ;
  8566                                  ;	Also, it's possible that some third-party partition program might
  8567                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8568                                  ;	  scheme. In this hypothetical case, the number of allocation
  8569                                  ;	  clusters which don't actually have FAT entries to represent
  8570                                  ;	  them might be larger and might create a more catastrophic
  8571                                  ;	  failure. So we'll provide the safeguard of limiting the
  8572                                  ;	  max_cluster to the amount that will fit in the FATs.
  8573                                  ;
  8574                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8575                                  
  8576                                  ;	make sure the number of fat sectors is actually enough to
  8577                                  ;	  hold that many clusters. otherwise, back the number of
  8578                                  ;	  clusters down
  8579                                  
  8580                                  	; 15/12/2022
  8581                                  	; bx = number of clusters
  8582                                  
  8583                                  	; 19/07/2018 - Retro DOS v3.0
  8584                                  	; MSDOS 6.0
  8585                                  	; 15/12/2022
  8586                                  	;mov	bx,ax			; remember calculated # clusters
  8587                                  
  8588                                  	; 01/08/2018 (MSDOS 3.3)
  8589                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8590                                  	;xor	ah,ah 
  8591                                  
  8592                                  	; 10/05/2019 - Retro DOS v4.0
  8593                                  	;mov	ax,[ES:BP+0Fh]
  8594 0000103C 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8595                                  
  8596                                  	;mul	word [es:bp+2]	
  8597 00001040 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8598 00001044 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8599 00001048 720D                    	jb	short setend_fat12
  8600 0000104A D1EA                    	shr	dx,1
  8601                                  
  8602                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8603                                  	; 15/12/2022
  8604                                  ;cs3 7/2/92
  8605 0000104C 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8606                                  					; than enough for the maximum FAT,
  8607                                  					; so go ahead and use the calculated
  8608                                  					; number of clusters.
  8609                                  ;cs3 7/2/92
  8610                                  
  8611 0000104E D1D8                    	rcr	ax,1			; find number of entries
  8612 00001050 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8613                                  ;					;  into 12-bit fatland?
  8614 00001053 7215                    	jb	short setend_faterr	; then go ahead and let the
  8615                                  ;					;  inconsistency pass through
  8616                                  ;					;  rather than lose data by
  8617                                  ;					;  correcting the fat type
  8618 00001055 EB0E                    	jmp	short setend_fat16
  8619                                  
  8620                                  setend_fat12:
  8621 00001057 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8622 00001059 11D2                    	adc	dx,dx
  8623                                  
  8624                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8625                                  ;cs3 7/2/92
  8626                                  	; 15/12/2022
  8627 0000105B 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8628 0000105E 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8629                                  					; here. Check for it and use
  8630                                  					; the calculated size in this case.
  8631                                  ;cs3 7/2/92
  8632                                  
  8633 00001060 2EF736[B40F]            	div	word [cs:word3]
  8634                                  
  8635                                  setend_fat16:
  8636 00001065 48                      	dec	ax			; limit at 1
  8637 00001066 39D8                    	cmp	ax,bx			; is fat big enough?
  8638 00001068 7602                    	jbe	short setend_fat	; use max value that'll fit
  8639                                  
  8640                                  setend_faterr:
  8641 0000106A 89D8                    	mov	ax,bx			; use calculated value
  8642                                  
  8643                                  setend_fat:
  8644                                  
  8645                                  ;	now ax = maximum legal cluster
  8646                                  
  8647                                  ;	end M008
  8648                                  
  8649                                  	;mov	[es:bp+0Dh], ax
  8650 0000106C 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8651                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8652                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8653 00001070 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8654                                  					; Init so first ALLOC starts at
  8655                                  					; begining of FAT
  8656                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8657                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8658 00001076 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8659                                  
  8660 0000107C C3                      	retn
  8661                                  
  8662                                  ;EndProc $SETDPB
  8663                                  
  8664                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8665                                  
  8666                                  ;
  8667                                  ;----------------------------------------------------------------------------
  8668                                  ;
  8669                                  ;**	$Dup_PDB
  8670                                  ;
  8671                                  ; Inputs:   DX is new segment address of process
  8672                                  ;	    SI is end of new allocation block
  8673                                  ;
  8674                                  ;----------------------------------------------------------------------------
  8675                                  ;
  8676                                  
  8677                                  _$DUP_PDB:
  8678                                  
  8679                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8680                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8681                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8682                                  
  8683                                  	; MSDOS 3.3
  8684                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8685                                  	;MOV	DS,[CS:CurrentPDB]
  8686                                  
  8687                                  	; 15/05/2019 - Retro DOS v4.0
  8688                                  	; MSDOS 6.0
  8689 0000107D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8690 00001082 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8691 00001087 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8692                                  
  8693 0000108B 56                      	PUSH	SI
  8694 0000108C EB0A                    	JMP	SHORT CreateCopy
  8695                                  
  8696                                  ;
  8697                                  ;----------------------------------------------------------------------------
  8698                                  ;
  8699                                  ; Inputs:
  8700                                  ;	DX = Segment number of new base
  8701                                  ; Function:
  8702                                  ;	Set up program base and copy term and ^C from int area
  8703                                  ; Returns:
  8704                                  ;	None
  8705                                  ; Called at DOS init
  8706                                  ;
  8707                                  ;----------------------------------------------------------------------------
  8708                                  ;
  8709                                  
  8710                                  ; 15/05/2019 - Retro DOS v4.0
  8711                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8712                                  
  8713                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8714                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8715                                  
  8716                                  _$CREATE_PROCESS_DATA_BLOCK:
  8717                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8718 0000108E E8F0F3                  	CALL	Get_User_Stack
  8719                                  	;mov	ds,[si+14h]
  8720 00001091 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8721                                  	;push	word [2]
  8722 00001094 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8723                                  CreateCopy:
  8724 00001098 8EC2                    	MOV	ES,DX
  8725                                  
  8726 0000109A 31F6                    	XOR	SI,SI			; copy entire PDB
  8727 0000109C 89F7                    	MOV	DI,SI
  8728 0000109E B98000                  	MOV	CX,128
  8729 000010A1 F3A5                    	REP	MOVSW
  8730                                  
  8731                                  ; DOS 3.3 7/9/86
  8732                                  	;mov	cx,20
  8733                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8734                                  	; 15/12/2022
  8735 000010A3 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8736                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8737                                  	;mov	cx,FILPERPROC
  8738                                  
  8739                                  	;mov	di,18h
  8740 000010A5 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8741                                  	;;PUSH	DS ; * 15/05/2019
  8742                                  	;;lds	si,[34h]
  8743                                  	;LDS	SI,[PDB.JFN_Pointer]
  8744                                  	;REP	MOVSB
  8745                                  	;;POP	DS ; * 15/05/2019
  8746                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8747                                  	; 05/12/2022
  8748                                  	; (push ds then pop ds is not needed here!)
  8749                                  	;push	ds
  8750                                  	;lds	si,[34h]
  8751 000010A8 C5363400                	lds	si,[PDB.JFN_Pointer]
  8752 000010AC F3A4                    	rep	movsb
  8753                                  	;pop	ds
  8754                                  
  8755                                  ; DOS 3.3 7/9/86
  8756                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8757                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8758                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8759                                  
  8760 000010AE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8761                                  
  8762                                  	;;test	byte [cs:CreatePDB],0FFh
  8763                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8764                                  	; 17/12/2022
  8765 000010B3 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8766                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8767 000010B7 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8768                                  
  8769                                  ; Here we set up for a new process...
  8770                                  
  8771                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8772                                  	;POP	DS
  8773                                  
  8774                                  	; MSDOS 6.0
  8775                                  	;;getdseg <ds>			; ds -> dosdata
  8776                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8777                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8778                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8779                                  	; 15/12/2022
  8780                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8781                                  
  8782 000010B9 31DB                    	XOR	BX,BX			; dup all jfns
  8783                                  	;mov	cx,20
  8784                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8785                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8786                                  	; 15/12/2022
  8787 000010BB B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8788                                  
  8789                                  Create_dup_jfn:
  8790 000010BD 06                      	PUSH	ES ;**			; save new PDB
  8791 000010BE E89D54                  	call	SFFromHandle		; get sf pointer
  8792 000010C1 B0FF                    	MOV	AL,-1			; unassigned JFN
  8793 000010C3 7224                    	JC	short CreateStash	; file was not really open
  8794                                  	;;test	word [es:di+5],1000h
  8795                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8796                                  	; 15/05/2019
  8797                                  	;test	byte [es:di+6],10h
  8798 000010C5 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8799 000010CA 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8800                                  
  8801                                  ; We do not inherit network file handles.
  8802                                  
  8803                                  	;mov	ah,[es:di+2]
  8804 000010CC 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8805                                  	;and	ah,0F0h
  8806 000010D0 80E4F0                  	AND	AH,SHARING_MASK
  8807                                  	;cmp	ah,70h
  8808 000010D3 80FC70                  	CMP	AH,SHARING_NET_FCB
  8809 000010D6 7411                    	jz	short CreateStash
  8810                                  
  8811                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8812                                  ; duplication operation.
  8813                                  
  8814 000010D8 893E[9E05]              	MOV	[THISSFT],DI
  8815 000010DC 8C06[A005]              	MOV	[THISSFT+2],ES
  8816 000010E0 E8D918                  	call	DOS_DUP 		; signal duplication
  8817                                  
  8818                                  ; get the old sfn for copy
  8819                                  
  8820 000010E3 E85B54                  	call	pJFNFromHandle		; ES:DI is jfn
  8821 000010E6 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8822                                  
  8823                                  ; Take AL (old sfn or -1) and stash it into the new position
  8824                                  
  8825                                  CreateStash:
  8826 000010E9 07                      	POP	ES ;**
  8827                                  	;mov	[es:bx+18h],al
  8828 000010EA 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8829 000010EE 43                      	INC	BX			; next jfn...
  8830 000010EF E2CC                    	LOOP	Create_dup_jfn
  8831                                  
  8832 000010F1 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8833                                  	; 06/11/2022
  8834                                  	;mov	[es:16h],bx
  8835 000010F5 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8836 000010FA 8C06[3003]              	MOV	[CurrentPDB],ES
  8837                                  	;MOV	DS,BX ; 28/07/2019
  8838                                  	; 07/12/2022
  8839                                  	;mov	ds,[cs:DosDSeg]
  8840                                  	; 15/12/2022
  8841                                  	; ds = [cs:DosDSeg]
  8842 000010FE C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8843                                  	;mov	ds,bx
  8844                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8845                                  	; 15/12/2022
  8846                                  	;mov	ds,bx
  8847                                  
  8848                                  ; end of new process create
  8849                                  
  8850                                  Create_PDB_cont:
  8851                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8852                                  
  8853                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8854                                  
  8855                                  	;; 28/07/2019
  8856                                  	;;push	ds
  8857                                  	;;mov	ds,[cs:DosDSeg]
  8858                                  	;mov	byte [CreatePDB],0
  8859                                  	;;pop	ds
  8860                                  
  8861                                  ; 05/12/2022
  8862                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8863                                  ;	; (push-pop ds is nonsense here! 
  8864                                  ;	;  but i am using same code with original MSDOS.SYS
  8865                                  ;	;  for address compatibility.)
  8866                                  ;	push	ds
  8867                                  ;	; ds = [cs:DosDSeg] !
  8868                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8869                                  ;	mov	byte [CreatePDB],0
  8870                                  ;	pop	ds
  8871                                  
  8872 00001103 58                      	POP	AX ;*
  8873                                  
  8874                                  	;entry	SETMEM
  8875                                  
  8876                                  	; 17/12/2022
  8877                                  	; cx = 0
  8878                                  
  8879                                  ;---------------------------------------------------------------------------
  8880                                  ; Inputs:
  8881                                  ;	AX = Size of memory in paragraphs
  8882                                  ;	DX = Segment
  8883                                  ; Function:
  8884                                  ;	Completely prepares a program base at the
  8885                                  ;	specified segment.
  8886                                  ; Called at DOS init
  8887                                  ; Outputs:
  8888                                  ;	DS = DX
  8889                                  ;	ES = DX
  8890                                  ;	[0] has INT int_abort
  8891                                  ;	[2] = First unavailable segment
  8892                                  ;	[5] to [9] form a long call to the entry point
  8893                                  ;	[10] to [13] have exit address (from int_terminate)
  8894                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8895                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8896                                  ; DX,BP unchanged. All other registers destroyed.
  8897                                  ;---------------------------------------------------------------------------
  8898                                  
  8899                                  SETMEM:
  8900                                  	;XOR	CX,CX
  8901                                  	; 17/12/2022
  8902                                  	; cx = 0
  8903 00001104 8ED9                    	MOV	DS,CX
  8904 00001106 8EC2                    	MOV	ES,DX
  8905                                  	;mov	si,88h
  8906 00001108 BE8800                  	MOV	SI,addr_int_terminate
  8907                                  	;mov	di,10 ; 0Ah
  8908 0000110B BF0A00                  	MOV	DI,SAVEXIT
  8909                                  	;MOV	CX,6
  8910                                  	; 15/12/2022
  8911 0000110E B106                    	mov	cl,6
  8912 00001110 F3A5                    	REP	MOVSW
  8913 00001112 26A30200                	MOV	[ES:2],AX
  8914 00001116 29D0                    	SUB	AX,DX
  8915 00001118 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8916 0000111B 7603                    	JBE	short HAVDIF
  8917 0000111D B8FF0F                  	MOV	AX,MAXDIF
  8918                                  HAVDIF:
  8919 00001120 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8920 00001123 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8921 00001126 29C3                    	SUB	BX,AX
  8922 00001128 B104                    	MOV	CL,4
  8923 0000112A D3E0                    	SHL	AX,CL
  8924 0000112C 8EDA                    	MOV	DS,DX
  8925                                  
  8926                                  	; (MSDOS 6.0 note)
  8927                                  	;
  8928                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8929                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8930                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8931                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8932                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8933                                  	; making this equvalence valid for this particular case. If however
  8934                                  	; there is less than 64K remaining the address in BX:AX will not 
  8935                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8936                                  	; into the PSP.
  8937                                  	;
  8938                                  	; Therefore for the case where there is less than 64K remaining in 
  8939                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8940                                  	; requirements will not work. Call 5, however will continue to work
  8941                                  	; for all cases.
  8942                                  	;
  8943                                  
  8944                                  	;mov	[6],ax
  8945                                  	;mov	[8],bx
  8946                                  
  8947 0000112E A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8948 00001131 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8949                                  
  8950                                  	; 06/05/2019 - Retro DOS v4.0
  8951 00001135 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8952                                  					;    memory left
  8953 00001138 740C                    	je	short addr_ok		; Y: the above calculated address is
  8954                                  					;    OK
  8955                                  					; N: 
  8956                                  
  8957 0000113A C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8958 00001140 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8959                                  addr_ok:
  8960                                  	;mov	word [0],20CDh
  8961 00001146 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8962                                  	;mov	byte [5],9Ah
  8963 0000114C C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8964                                  	;mov	word [50h],21CDh
  8965 00001151 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8966                                  	;mov	byte [52h],0CBh
  8967 00001157 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8968                                  	;mov	word [34h],18h
  8969 0000115C C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8970                                  	;mov	word [36h],ds
  8971 00001162 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8972                                  	;mov	word [32h],20
  8973 00001166 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8974                                  ;
  8975                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8976                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8977                                  ; particular SFT.  We perform this by requiring that the server link together
  8978                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8979                                  ; initialize this pointer.
  8980                                  ;
  8981                                   	;mov	word [38h],-1
  8982 0000116C C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8983                                  	;mov	word [3Ah],-1
  8984 00001172 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8985                                  
  8986                                  	; 06/05/2019
  8987                                  	; Set the real version number in the PSP - 5.00
  8988                                  
  8989                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8990                                  	; 07/12/2022
  8991 00001178 26C70640000616          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8992                                  
  8993 0000117F C3                      	retn
  8994                                  
  8995                                  ; 29/04/2019 - Retro DOS v4.0
  8996                                  
  8997                                  ;BREAK <$GSetMediaID -- get set media ID>
  8998                                  
  8999                                  ;---------------------------------------------------------------------------
  9000                                  ; Inputs:
  9001                                  ;	BL= drive number as defined in IOCTL
  9002                                  ;	AL= 0 get media ID
  9003                                  ;	    1 set media ID
  9004                                  ;	DS:DX= buffer containing information
  9005                                  ;		DW  0  info level (set on input)
  9006                                  ;		DD  ?  serial #
  9007                                  ;		DB  11 dup(?)  volume id
  9008                                  ;		DB   8 dup(?)  file system type
  9009                                  ; Function:
  9010                                  ;	Get or set media ID
  9011                                  ; Returns:
  9012                                  ;	carry clear, DS:DX is filled
  9013                                  ;	carry set, error
  9014                                  ;---------------------------------------------------------------------------
  9015                                  
  9016                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9017                                  _$GSetMediaID:
  9018                                  	; RAWIO - GET_MEDIA_ID
  9019 00001180 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  9020 00001183 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  9021 00001185 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  9022                                  	;cmp	al,1		      ;AN000;MS.; set ?
  9023                                  	;jne	short errorfunc	      ;AN000;MS.; no
  9024                                  	; 15/12/2022
  9025 00001187 FEC8                    	dec	al
  9026 00001189 7507                    	jnz	short errorfunc ; al > 1
  9027                                  	; RAWIO - SET_MEDIA_ID
  9028                                  	;mov	cx,0846h	      ;AN001;MS.;
  9029                                  	; 15/12/2022
  9030 0000118B B146                    	mov	cl,46h	; cx = 0846h 
  9031                                  doioctl:			      ;AN000;
  9032 0000118D B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  9033                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  9034                                  	;call	_$IOCTL
  9035                                  	;retn			      ;AN000;MS.;
  9036                                  	; 15/12/2022
  9037 0000118F E98F10                  	jmp	_$IOCTL
  9038                                  errorfunc:			      ;AN000;
  9039                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  9040                                  	;mov	al,1
  9041 00001192 B001                    	mov	al,error_invalid_function
  9042 00001194 E9A9F4                  	jmp	SYS_RET_ERR
  9043                                  
  9044                                  ; 16/05/2019 - Retro DOS v4.0
  9045                                  
  9046                                  ;============================================================================
  9047                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9048                                  ;============================================================================
  9049                                  ; 20/07/2018 - Retro DOS v3.0
  9050                                  ; 29/04/2019 - Retro DOS v4.0
  9051                                  
  9052                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9053                                  ;----------------------------------------------------------------------------
  9054                                  ;
  9055                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9056                                  ;	     Strings of different lengths don't match.
  9057                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9058                                  ;   Outputs: Z if strings same, NZ if different
  9059                                  ;   Registers modified: NONE
  9060                                  ;----------------------------------------------------------------------------
  9061                                  
  9062                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9063                                  StrCmp:
  9064 00001197 56                      	push	si
  9065 00001198 57                      	push	di
  9066 00001199 50                      	push	ax
  9067                                  Cmplp:
  9068 0000119A AC                      	LODSB
  9069 0000119B E8993D                  	call	UCase			; convert to upper case
  9070 0000119E E8EB3D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9071 000011A1 88C4                    	MOV	AH,AL
  9072 000011A3 268A05                  	MOV	AL,[ES:DI]
  9073 000011A6 47                      	INC	DI
  9074 000011A7 E88D3D                  	call	UCase			; convert to upper case
  9075 000011AA E8DF3D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9076 000011AD 38C4                    	CMP	AH,AL
  9077 000011AF 7504                    	JNZ	short PopRet		; Strings dif
  9078                                  
  9079 000011B1 08C0                    	OR	AL,AL
  9080 000011B3 75E5                    	JNZ	short Cmplp		; More string
  9081                                  PopRet:
  9082 000011B5 58                      	pop	ax
  9083 000011B6 5F                      	pop	di
  9084 000011B7 5E                      	pop	si
  9085 000011B8 C3                      	retn
  9086                                  
  9087                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9088                                  ;----------------------------------------------------------------------------
  9089                                  ;
  9090                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9091                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9092                                  ;	characters.
  9093                                  ;
  9094                                  ;   Inputs:	DS:SI - pointer to source string
  9095                                  ;		ES:DI - pointer to destination string
  9096                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9097                                  ;		DS:SI point byte after nul byte at end of source string
  9098                                  ;   Registers modified: SI,DI
  9099                                  ;----------------------------------------------------------------------------
  9100                                  
  9101                                  StrCpy:
  9102 000011B9 50                      	push	ax
  9103                                  CPYLoop:
  9104 000011BA AC                      	LODSB
  9105 000011BB E8793D                  	call	UCase			; convert to upper case
  9106 000011BE E8CB3D                  	call	PATHCHRCMP		; convert / to \ ;
  9107 000011C1 AA                      	STOSB
  9108                                  
  9109 000011C2 08C0                    	OR	AL,AL
  9110 000011C4 75F4                    	JNZ	short CPYLoop
  9111 000011C6 58                      	pop	ax
  9112 000011C7 C3                      	retn
  9113                                  
  9114                                  ;----------------------------------------------------------------------------
  9115                                  ; Procedure Name : FStrCpy
  9116                                  ;----------------------------------------------------------------------------
  9117                                  
  9118                                  FStrCpy:
  9119 000011C8 50                      	push	ax
  9120                                  FCPYLoop:
  9121 000011C9 AC                      	LODSB
  9122 000011CA AA                      	STOSB
  9123 000011CB 08C0                    	OR	AL,AL
  9124 000011CD 75FA                    	JNZ	short FCPYLoop
  9125 000011CF 58                      	pop	ax
  9126 000011D0 C3                      	retn
  9127                                  
  9128                                  ; 20/07/2018 - Retro DOS v3.0
  9129                                  ;----------------------------------------------------------------------------
  9130                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9131                                  ;----------------------------------------------------------------------------
  9132                                  ;
  9133                                  ;UCase:	
  9134                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9135                                  ;	retn
  9136                                  
  9137                                  ;Break <StrLen - compute length of string ES:DI>
  9138                                  ;----------------------------------------------------------------------------
  9139                                  ;**	StrLen - Compute Length of String
  9140                                  ;
  9141                                  ;	StrLen computes the length of a string, including the trailing 00
  9142                                  ;
  9143                                  ;	ENTRY	(es:di) = address of string
  9144                                  ;	EXIT	(cx) = size of string
  9145                                  ;	USES	cx, flags
  9146                                  ;----------------------------------------------------------------------------
  9147                                  
  9148                                  StrLen:
  9149 000011D1 57                      	push	di
  9150 000011D2 50                      	push	ax
  9151                                  	;MOV	CX,-1
  9152 000011D3 B9FFFF                  	mov	cx,65535
  9153 000011D6 30C0                    	XOR	AL,AL
  9154 000011D8 F2AE                    	REPNE	SCASB
  9155 000011DA F7D1                    	NOT	CX
  9156 000011DC 58                      	pop	ax
  9157 000011DD 5F                      	pop	di
  9158 000011DE C3                      	retn
  9159                                  
  9160                                  ;----------------------------------------------------------------------------
  9161                                  ;**	DStrLen - Compute Length of String
  9162                                  ;
  9163                                  ;	ENTRY	(ds:si) = address of string
  9164                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9165                                  ;	USES	cx, flags
  9166                                  ;----------------------------------------------------------------------------
  9167                                  
  9168                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9169 000011DF E80300                  	CALL	XCHGP
  9170 000011E2 E8ECFF                  	CALL	StrLen
  9171                                  	;CALL	XCHGP
  9172                                  	;retn
  9173                                  	; 18/12/2022
  9174                                  	;jmp	short XCHGP
  9175                                  
  9176                                  ;----------------------------------------------------------------------------
  9177                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9178                                  ;
  9179                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9180                                  ;
  9181                                  ;	ENTRY	none
  9182                                  ;	EXIT	pairs exchanged
  9183                                  ;	USES	SI, DI, DS, ES
  9184                                  ;----------------------------------------------------------------------------
  9185                                  
  9186                                  XCHGP:
  9187 000011E5 1E                      	push	ds
  9188 000011E6 06                      	push	es
  9189 000011E7 1F                      	pop	ds
  9190 000011E8 07                      	pop	es
  9191 000011E9 87F7                    	XCHG	SI,DI
  9192                                  xchgp_retn:
  9193 000011EB C3                      	retn
  9194                                  
  9195                                  ;Break	<Idle - wait for a specified amount of time>
  9196                                  ;----------------------------------------------------------------------------
  9197                                  ;
  9198                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9199                                  ;   	   we spin until RetryLoop is exhausted.
  9200                                  ;
  9201                                  ;   Inputs:	RetryLoop is the number of times we spin
  9202                                  ;   Outputs:	Wait
  9203                                  ;   Registers modified: none
  9204                                  ;----------------------------------------------------------------------------
  9205                                  
  9206                                  Idle:
  9207                                  	;test	byte [SS:FSHARING],0FFh
  9208 000011EC 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9209                                  	;retnz
  9210 000011F2 75F7                    	jnz	short xchgp_retn
  9211                                  	;SAVE	<CX>
  9212 000011F4 51                      	push	cx
  9213 000011F5 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9214 000011FA E308                    	JCXZ	Idle3
  9215                                  Idle1:	
  9216 000011FC 51                      	PUSH	CX
  9217 000011FD 31C9                    	XOR	CX,CX
  9218                                  Idle2:	
  9219 000011FF E2FE                    	LOOP	Idle2
  9220 00001201 59                      	POP	CX
  9221 00001202 E2F8                    	LOOP	Idle1
  9222                                  Idle3:	
  9223                                  	;RESTORE <CX>
  9224 00001204 59                      	pop	cx
  9225 00001205 C3                      	retn
  9226                                  
  9227                                  ;Break	<TableDispatch - dispatch to a table>
  9228                                  ;----------------------------------------------------------------------------
  9229                                  ;
  9230                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9231                                  ;   routine. Preserve all input registers to the routine.
  9232                                  ;
  9233                                  ;   Inputs:	Push	return address
  9234                                  ;		Push	Table address
  9235                                  ;		Push	index (byte)
  9236                                  ;   Outputs:	appropriate routine gets jumped to.
  9237                                  ;		return indicates invalid index
  9238                                  ;   Registers modified: none.
  9239                                  ;----------------------------------------------------------------------------
  9240                                  
  9241                                  struc TFrame	 ; TableFrame
  9242 00000000 ????                    .OldBP:	 resw 1  ; 0
  9243 00000002 ????                    .OldRet: resw 1  ; 2
  9244 00000004 ??                      .Index:	 resb 1  ; 4
  9245 00000005 ??                      .Pad:	 resb 1  ; 5  
  9246 00000006 ????                    .Tab:	 resw 1  ; 6
  9247 00000008 ????                    .NewRet: resw 1  ; 8
  9248                                  endstruc
  9249                                  
  9250                                  TableDispatch:
  9251 00001206 55                      	PUSH	BP
  9252 00001207 89E5                    	MOV	BP,SP
  9253 00001209 53                      	PUSH	BX			; save BX
  9254                                  	;mov	bx,[bp+6]
  9255 0000120A 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9256 0000120D 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9257                                  	;cmp	[bp+4],bl
  9258 00001210 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9259 00001213 7317                    	JAE	short TableError	; yes
  9260                                  	;mov	bl,[bp+4]
  9261 00001215 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9262 00001218 30FF                    	XOR	BH,BH			; convert to word
  9263 0000121A D1E3                    	SHL	BX,1			; convert to word pointer
  9264 0000121C 43                      	INC	BX			; point past first length byte
  9265                                  	; 17/08/2018
  9266                                  	;add	bx,[bp+6]
  9267 0000121D 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9268 00001220 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9269                                  	;mov	[bp+6],bx
  9270 00001223 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9271 00001226 5B                      	POP	BX			; restore BX
  9272 00001227 5D                      	POP	BP			; restore BP
  9273 00001228 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9274 0000122B C3                      	retn				; do operation
  9275                                  TableError:
  9276 0000122C 5B                      	POP	BX			; restore BX
  9277 0000122D 5D                      	POP	BP			; restore BP
  9278 0000122E C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9279                                  
  9280                                  ;Break	<TestNet - determine if a CDS is for the network>
  9281                                  ;----------------------------------------------------------------------------
  9282                                  ;
  9283                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9284                                  ;	network CDS. This will handle NULL cds also.
  9285                                  ;
  9286                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9287                                  ;   Outputs:	ES:DI = ThisCDS
  9288                                  ;		carry Set => network
  9289                                  ;		carry Clear => local
  9290                                  ;   Registers modified: none.
  9291                                  ;----------------------------------------------------------------------------
  9292                                  
  9293                                  TestNet:
  9294                                  	;LES	DI,[CS:THISCDS]
  9295                                  
  9296                                  	; 16/05/2019 - Retro DOS v4.0
  9297 00001231 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9298 00001236 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9299 0000123B 83FFFF                  	CMP	DI,-1
  9300 0000123E 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9301                                  	;;test	word [es:di+43h],8000h
  9302                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9303                                  	;test	byte [es:di+44h],80h
  9304 00001240 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9305 00001245 7501                    	JNZ	short CMCRet		; jump has carry clear
  9306 00001247 C3                      	retn				; carry is clear
  9307                                  CMCRet: 
  9308 00001248 F5                      	CMC
  9309 00001249 C3                      	retn
  9310                                  
  9311                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9312                                  ;----------------------------------------------------------------------------
  9313                                  ;
  9314                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9315                                  ;	network file.
  9316                                  ;
  9317                                  ;   Inputs:	ES:DI point to SFT
  9318                                  ;   Outputs:	Zero set if not network sft
  9319                                  ;		zero reset otherwise
  9320                                  ;		Carry CLEAR!!!
  9321                                  ;   Registers modified: none.
  9322                                  ;----------------------------------------------------------------------------
  9323                                  
  9324                                  IsSFTNet:
  9325                                  	;;test	word [es:di+5],8000h
  9326                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9327                                  	; 16/05/2019 
  9328                                  	;test	byte [es:di+6],80h
  9329 0000124A 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9330 0000124F C3                      	retn
  9331                                  
  9332                                  ;Break	<FastInit - Initialize FastTable entries >
  9333                                  ;----------------------------------------------------------------------------
  9334                                  ;   DOS 4.00   2/9/87
  9335                                  ;   FastInit  - initialize the FASTXXX routine entry
  9336                                  ;		  in the FastTable
  9337                                  ;
  9338                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9339                                  ;		DS:SI = address of FASTXXX routine entry
  9340                                  ;		   SI = -1 for query only
  9341                                  ;   Outputs:	Carry flag clear, if success
  9342                                  ;		Carry flag set,   if failure
  9343                                  ;
  9344                                  ;
  9345                                  ;----------------------------------------------------------------------------
  9346                                  
  9347                                  ;Procedure FastInit,NEAR
  9348                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9349                                  
  9350                                  ;	; MSDOS 3.3
  9351                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9352                                  ;FastInit:
  9353                                  ;	mov	di,FastTable ; FastOpenTable
  9354                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9355                                  ;	mov	bx,cs			; get DOS segment
  9356                                  ;	cmp	ax,bx			; first time installed ?	
  9357                                  ;	je	short ok_install	; yes
  9358                                  ;	stc				; set carry
  9359                                  ;	retn				; (cf=1 means) already installed !
  9360                                  ;
  9361                                  ;ok_install:
  9362                                  ;	mov	bx,FastTable ; FastOpenTable
  9363                                  ;	mov	cx,ds
  9364                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9365                                  ;	mov	[cs:bx+4],cx
  9366                                  ;	mov	[cs:bx+2],si
  9367                                  ;	retn
  9368                                  
  9369                                  ; 16/05/2019 - Retro DOS v4.0
  9370                                  
  9371                                  FastInit:
  9372                                  	; MSDOS 6.0
  9373                                  	;hkn; set up es to dosdataseg.
  9374 00001250 06                      	push	es
  9375                                  	;getdseg <es>			; es -> dosdata
  9376 00001251 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9377                                  
  9378                                  	;hkn; FastTable is in DOSDATA
  9379 00001256 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9380 00001259 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9381 0000125A 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9382 0000125C D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9383 0000125E D1E3                    	SHL	BX,1			;AN000;FO.
  9384 00001260 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9385 00001262 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9386                                  fcheck: 				;AN000;
  9387 00001266 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9388 00001268 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9389 0000126A 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9390 0000126C 09C0                    	OR	AX,AX			;AN000;FO.;
  9391                                  	;JZ	short ok_install	;AN000;FO.;
  9392                                  	;STC				;AN000;FO.;; already installed !
  9393                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9394                                  	; 14/01/2024
  9395 0000126E F9                      	stc
  9396 0000126F 7517                    	jnz	short FSret
  9397                                  ok_install:				;AN000;
  9398 00001271 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9399 00001274 7412                    	JZ	short FSret		;AN000;FO.; yes
  9400 00001276 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9401 00001278 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9402 0000127C 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9403                                  
  9404                                  ;hkn; FastFlg moved to DOSDATA
  9405 0000127F BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9406 00001282 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9407                                  	;or	byte [es:di],80h
  9408 00001284 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9409                                  FSret:					;AN000;
  9410 00001288 07                      	pop	es
  9411 00001289 C3                      	retn				;AN000;FO.
  9412                                  
  9413                                  ;EndProc FastInit
  9414                                  
  9415                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9416                                  ;----------------------------------------------------------------------------
  9417                                  ;   DOS 3.3   6/10/86
  9418                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9419                                  ;
  9420                                  ;   Inputs:	None
  9421                                  ;   Outputs:	AX = -1 and carry flag set
  9422                                  ;
  9423                                  ;   Registers modified: none.
  9424                                  ;----------------------------------------------------------------------------
  9425                                  
  9426                                  FastRet:
  9427                                  	;mov	ax,-1
  9428                                  	;stc
  9429                                  	;retf
  9430 0000128A F9                      	STC
  9431 0000128B 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9432 0000128D CB                      	RETF
  9433                                  
  9434                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9435                                  ;----------------------------------------------------------------------------
  9436                                  ;   DOS 3.3   6/10/86
  9437                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9438                                  ;
  9439                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9440                                  ;   Outputs:	same output as $OPEN
  9441                                  ;
  9442                                  ;----------------------------------------------------------------------------
  9443                                  
  9444                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9445                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9446                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9447                                  
  9448                                  NLS_OPEN:
  9449                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9450                                  ;	MOV	BYTE [CPSWFLAG],0
  9451                                  ;	PUSH	BX		 ; save current state
  9452                                  
  9453 0000128E 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9454 00001290 E8355B                  	call	_$OPEN
  9455                                  
  9456                                  ;	POP	BX		 ; restore current state
  9457                                  ;	MOV	[CPSWFLAG],BL
  9458                                  
  9459 00001293 C3                      	RETN
  9460                                  
  9461                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9462                                  ;----------------------------------------------------------------------------
  9463                                  ;   DOS 3.3   6/10/86
  9464                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9465                                  ;
  9466                                  ;   Inputs:	BP = open mode
  9467                                  ;   Outputs:	same output as $LSEEK
  9468                                  ;
  9469                                  ;----------------------------------------------------------------------------
  9470                                  
  9471                                  ; 16/05/2019 - Retro DOS v4.0
  9472                                  
  9473                                  NLS_LSEEK:
  9474 00001294 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9475 00001299 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9476 0000129E E81000                  	CALL	Fake_User_Stack
  9477 000012A1 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9478 000012A3 E8CF54                  	call	_$LSEEK
  9479 000012A6 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9480 000012AB 368F06[8405]            	POP	word [SS:USER_SP]
  9481 000012B0 C3                      	RETN
  9482                                  
  9483                                  ;Break	<Fake_User_Stack - save user stack>
  9484                                  ;----------------------------------------------------------------------------
  9485                                  ;   DOS 3.3   6/10/86
  9486                                  ;   Fake_User_Stack - save user stack pointer
  9487                                  ;
  9488                                  ;----------------------------------------------------------------------------
  9489                                  
  9490                                  Fake_User_Stack:
  9491 000012B1 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9492 000012B5 36A3[8405]              	MOV	[SS:USER_SP],AX
  9493 000012B9 8CD0                    	MOV	AX,SS
  9494 000012BB 36A3[8605]              	MOV	[SS:USER_SS],AX
  9495 000012BF C3                      	RETN
  9496                                  
  9497                                  ;Break	<GetDevList - get device header list pointer>
  9498                                  ;----------------------------------------------------------------------------
  9499                                  ;   DOS 3.3   7/25/86
  9500                                  ;   GetDevList - get device header list pointer
  9501                                  ;
  9502                                  ;   Output: AX:BX points to the device header list
  9503                                  ;----------------------------------------------------------------------------
  9504                                  
  9505                                  GetDevList:
  9506                                  	; 16/05/2019 - Retro DOS v4.0
  9507 000012C0 BE[280D]                	MOV	SI,SysInitTable
  9508 000012C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9509 000012C8 C534                    	LDS	SI,[SI]
  9510                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9511 000012CA 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9512                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9513 000012CD 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9514 000012D0 C3                      	RETN
  9515                                  
  9516                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9517                                  ;----------------------------------------------------------------------------
  9518                                  ;   DOS 3.3   7/25/86
  9519                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9520                                  ;
  9521                                  ;   Inputs:	BP = function code 0CH
  9522                                  ;   Outputs:	same output as generic $IOCTL
  9523                                  ;
  9524                                  ;----------------------------------------------------------------------------
  9525                                  
  9526                                  NLS_IOCTL:
  9527                                  	; 16/05/2019 - Retro DOS v4.0
  9528 000012D1 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9529 000012D6 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9530 000012DB E8D3FF                  	CALL	Fake_User_Stack
  9531 000012DE 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9532 000012E0 E83E0F                  	call	_$IOCTL
  9533 000012E3 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9534 000012E8 368F06[8405]            	POP	word [SS:USER_SP]
  9535 000012ED C3                      	RETN
  9536                                  
  9537                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9538                                  ;----------------------------------------------------------------------------
  9539                                  ;   DOS 3.3   7/25/86
  9540                                  ;   NLS_GETEXT	-
  9541                                  ;
  9542                                  ;   Inputs:	none
  9543                                  ;   Outputs:	AX = extended error
  9544                                  ;
  9545                                  ;----------------------------------------------------------------------------
  9546                                  
  9547                                  NLS_GETEXT:
  9548                                  	; 16/05/2019 - Retro DOS v4.0
  9549 000012EE 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9550                                  	; 23/09/2023
  9551                                  MSG_RETRIEVAL:
  9552 000012F2 C3                      	RETN
  9553                                  
  9554                                  ; 29/04/2019 - Retro DOS v4.0
  9555                                  
  9556                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9557                                  
  9558                                  ;----------------------------------------------------------------------------
  9559                                  ;   DOS 4.00
  9560                                  ;
  9561                                  ;   Inputs:	DL=0 get extended error message addr
  9562                                  ;		  =1 set extended error message addr
  9563                                  ;		  =2 get parser error message addr
  9564                                  ;		  =3 set parser error message addr
  9565                                  ;		  =4 get critical error message addr
  9566                                  ;		  =5 set critical error message addr
  9567                                  ;		  =6 get file system error message addr
  9568                                  ;		  =7 set file system error message addr
  9569                                  ;		  =8 get address for code reduction
  9570                                  ;		  =9 set address for code reduction
  9571                                  ;   Function:	get/set message address
  9572                                  ;   Outputs:	ES:DI points to addr when get
  9573                                  ;----------------------------------------------------------------------------
  9574                                  
  9575                                  ;Procedure MSG_RETRIEVAL,NEAR
  9576                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9577                                  
  9578                                  ; 23/09/2023
  9579                                  ;MSG_RETRIEVAL:
  9580                                  
  9581                                  ;;	NOTE:  This function lives in command.com resident code now.
  9582                                  ;;	If the int 2F ever gets this far, we'll return registers
  9583                                  ;;	unchanged, which produces the same result as before, if
  9584                                  ;;	command.com wasn't present (and therefore no messages available).
  9585                                  ;;
  9586                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9587                                  ;;	No_Op zeroes AL.
  9588                                  ;;
  9589                                  ;;;hkn; set up ds to point to DOSDATA
  9590                                  ;;	push	ds
  9591                                  ;;	getdseg	<ds>			; ds -> dosdata
  9592                                  ;;
  9593                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9594                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9595                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9596                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9597                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9598                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9599                                  ;;	DEC	AL		    ;AN000;;MS.
  9600                                  ;;toget:				    ;AN000;
  9601                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9602                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9603                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9604                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9605                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9606                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9607                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9608                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9609                                  ;;getget: 				     ;AN000;
  9610                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9611                                  ;;MSGret: 				     ;AN000;
  9612                                  ;;	POP	SI			     ;AN000;;MS.
  9613                                  ;;	POP	AX			     ;AN000;;MS.
  9614                                  ;;
  9615                                  ;;	pop	ds
  9616                                  
  9617                                  ;	return				     ;AN000;;MS. exit
  9618                                  
  9619                                  ; 23/09/2023
  9620                                  ;	retn	; 29/04/2019
  9621                                  
  9622                                  ;============================================================================
  9623                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9624                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9625                                  ;============================================================================
  9626                                  ; 20/07/2018 - Retro DOS v3.0
  9627                                  
  9628                                  ;	; MSDOS 3.3
  9629                                  ;	; 08/08/2018 - Retro DOS v3.0
  9630                                  ;ECritMEM:
  9631                                  ;ECritSFT:
  9632                                  ;	;
  9633                                  ;ECritDisk:
  9634                                  ;	retn
  9635                                  ;	;push	ax
  9636                                  ;	
  9637                                  ;	mov	ax,8001h
  9638                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9639                                  ;			; AL = critical section number (00h-0Fh)
  9640                                  ;	pop	ax
  9641                                  ;	retn
  9642                                  ;
  9643                                  ;	; MSDOS 3.3
  9644                                  ;	; 08/08/2018 - Retro DOS v3.0
  9645                                  ;LCritMEM:
  9646                                  ;LCritSFT:
  9647                                  ;	;
  9648                                  ;LCritDisk:
  9649                                  ;	retn
  9650                                  ;	;push	ax
  9651                                  ;	
  9652                                  ;	mov	ax,8101h
  9653                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9654                                  ;			; AL = critical section number (00h-0Fh)
  9655                                  ;	pop	ax
  9656                                  ;	retn
  9657                                  ;
  9658                                  ;ECritDevice:
  9659                                  ;	retn
  9660                                  ;	;push	ax
  9661                                  ;	
  9662                                  ;	mov	ax,8002h
  9663                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9664                                  ;			; AL = critical section number (00h-0Fh)
  9665                                  ;	pop	ax
  9666                                  ;	retn
  9667                                  ;
  9668                                  ;LCritDevice:
  9669                                  ;	retn
  9670                                  ;	;push	ax
  9671                                  ;	
  9672                                  ;	mov	ax,8102h
  9673                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9674                                  ;			; AL = critical section number (00h-0Fh)
  9675                                  ;	pop	ax
  9676                                  ;	retn
  9677                                  
  9678                                  ;============================================================================
  9679                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9680                                  ;============================================================================
  9681                                  ; 12/05/2019 - Retro DOS v4.0
  9682                                  
  9683                                  ; Critical Section Routines
  9684                                  
  9685                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9686                                  
  9687                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9688                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9689                                  
  9690                                  ; ---------------------------------------------------------------------------
  9691                                  ; Each handler must leave everything untouched; including flags!
  9692                                  ;
  9693                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9694                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9695                                  ; ---------------------------------------------------------------------------
  9696                                  
  9697                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9698                                  ; ---------------------------------------------------------------------------
  9699                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9700                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9701                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9702                                  ; ---------------------------------------------------------------------------
  9703                                  
  9704                                  ;%macro POPFF 0
  9705                                  ;	jmp	$+3
  9706                                  ;	iret
  9707                                  ;	push	cs
  9708                                  ;	call	$-2
  9709                                  ;%endmacro
  9710                                  
  9711                                  ; ---------------------------
  9712                                  
  9713                                  ;Procedure  ECritDisk,NEAR
  9714                                  	;public  ECritMEM
  9715                                  	;public  ECritSFT
  9716                                  ECritMEM:
  9717                                  ECritSFT:
  9718                                  ;
  9719                                  ECritDisk:
  9720                                  
  9721                                  ;SR; Check if critical section is to be entered
  9722                                  
  9723 000012F3 9C                      	pushf
  9724 000012F4 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9725 000012FA 740D                    	jz	short ECritDisk_2
  9726                                  
  9727                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9728                                  ;	;popff  ; * (macro)
  9729                                  ;	jmp	short ECritDisk_1 ; *
  9730                                  ;
  9731                                  ;ECritDisk_iret: ; *
  9732                                  ;	iret ; *
  9733                                  
  9734                                  	; 16/12/2022
  9735                                  	; 13/11/2022
  9736                                  	;jmp	short ECritDisk_1
  9737                                  	; 06/11/2022
  9738                                  ;ECritDisk_iret:
  9739                                  ;	iret	
  9740                                  
  9741                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9742                                  ECritDisk_1:
  9743 000012FC 0E                      	push	cs ; *
  9744 000012FD E80800                  	call	ECritDisk_iret ; *		
  9745                                  	
  9746                                  ECritDisk_0:
  9747 00001300 50                      	PUSH    AX
  9748                                  	;MOV	AX,8000h+critDisk
  9749                                  	;INT	int_IBM
  9750 00001301 B80180                  	mov	ax,8001h
  9751 00001304 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9752                                  			; AL = critical section number (00h-0Fh)
  9753 00001306 58                      	POP     AX
  9754 00001307 C3                      	retn
  9755                                  
  9756                                  	; 16/12/2022
  9757                                  	; 13/11/2022
  9758                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9759                                  LCritDisk_iret: 
  9760 00001308 CF                      	iret
  9761                                  
  9762                                  ECritDisk_2:
  9763                                  	;;popff ; *
  9764                                  	;;retn
  9765                                  ;	jmp	short ECritDisk_3 ; *
  9766                                  ;ECritDisk_iret2: ; *
  9767                                  ;	iret
  9768                                  	
  9769                                  	; 16/12/2022
  9770                                  	; 13/11/2022
  9771                                  	;jmp	short ECritDisk_3
  9772                                  ;ECritDisk_iret2:
  9773                                  	;iret
  9774                                  
  9775                                  ECritDisk_3:
  9776 00001309 0E                      	push    cs ; *
  9777                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9778                                  	;call	ECritDisk_iret2 ; *
  9779                                  	;retn
  9780                                  	; 16/12/2022
  9781 0000130A E8FBFF                  	call	ECritDisk_iret
  9782 0000130D C3                      	retn
  9783                                  
  9784                                  ;EndProc ECritDisk
  9785                                  
  9786                                  ; ---------------------------
  9787                                  
  9788                                  ;Procedure   LCritDisk,NEAR
  9789                                  	;public  LCritMEM
  9790                                  	;public  LCritSFT
  9791                                  LCritMEM:
  9792                                  LCritSFT:
  9793                                  ;
  9794                                  LCritDisk:
  9795                                  
  9796                                  ;SR; Check if critical section is to be entered
  9797                                  
  9798 0000130E 9C                      	pushf
  9799 0000130F 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9800 00001315 740C                    	jz	short LCritDisk_2
  9801                                  	;popff  ; * (macro)
  9802                                  ;	jmp	short LCritDisk_1 ; *
  9803                                  ;
  9804                                  ;LCritDisk_iret: ; *
  9805                                  ;	iret ; *
  9806                                  
  9807                                  	; 16/12/2022
  9808                                  	; 13/11/2022
  9809                                  	;jmp	short LCritDisk_1
  9810                                  ;LCritDisk_iret:
  9811                                  	;iret
  9812                                  
  9813                                  LCritDisk_1:
  9814 00001317 0E                      	push	cs ; *
  9815 00001318 E8EDFF                  	call	LCritDisk_iret ; *		
  9816                                  	
  9817                                  LCritDisk_0:
  9818 0000131B 50                      	PUSH	AX
  9819                                  	;MOV	AX,8100h+critDisk
  9820                                  	;INT	int_IBM
  9821 0000131C B80181                  	mov	ax,8101h
  9822 0000131F CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9823                                  			; AL = critical section number (00h-0Fh)
  9824 00001321 58                      	POP	AX
  9825 00001322 C3                      	retn
  9826                                  
  9827                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9828                                  ;	iret
  9829                                  
  9830                                  LCritDisk_2:
  9831                                  	;;popff ; *
  9832                                  	;;retn
  9833                                  ;	jmp	short LCritDisk_3 ; *
  9834                                  ;LCritDisk_iret2: ; *
  9835                                  ;	iret
  9836                                  
  9837                                  	; 16/12/2022
  9838                                  	; 13/11/2022
  9839                                  	;jmp	short LCritDisk_3
  9840                                  ;LCritDisk_iret2:
  9841                                  	;iret
  9842                                  
  9843                                  LCritDisk_3:
  9844 00001323 0E                      	push    cs ; *
  9845                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9846                                  	;call	LCritDisk_iret2 ; *
  9847                                  	;retn
  9848                                  	; 16/12/2022
  9849 00001324 E8E1FF                  	call	LCritDisk_iret
  9850 00001327 C3                      	retn
  9851                                  
  9852                                  ;EndProc LCritDisk
  9853                                  
  9854                                  ; ---------------------------
  9855                                  
  9856                                  ;Procedure   ECritDevice,NEAR
  9857                                  
  9858                                  ECritDevice:
  9859                                  
  9860                                  ;SR; Check if critical section is to be entered
  9861                                  
  9862 00001328 9C                      	pushf
  9863 00001329 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9864 0000132F 740D                    	jz	short ECritDevice_2
  9865                                  	;popff  ; * (macro)
  9866                                  ;	jmp	short ECritDevice_1 ; *
  9867                                  ;
  9868                                  ;ECritDevice_iret: ; *
  9869                                  ;	iret ; *
  9870                                  
  9871                                  	; 16/12/2022	
  9872                                  	; 13/11/2022
  9873                                  	;jmp	short ECritDevice_1
  9874                                  ;ECritDevice_iret:
  9875                                  	;iret
  9876                                  
  9877                                  ECritDevice_1:
  9878 00001331 0E                      	push	cs ; *
  9879 00001332 E80800                  	call	ECritDevice_iret ; *		
  9880                                  	
  9881                                  ECritDevice_0:
  9882 00001335 50                      	PUSH	AX
  9883                                  	;MOV	AX,8000h+critDevice
  9884                                  	;INT	int_IBM
  9885 00001336 B80280                  	mov	ax,8002h
  9886 00001339 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9887                                  			; AL = critical section number (00h-0Fh)
  9888 0000133B 58                      	POP     AX
  9889 0000133C C3                      	retn
  9890                                  
  9891                                  	; 16/12/2022
  9892                                  	; 06/12/2022
  9893                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9894                                  LCritDevice_iret: 
  9895 0000133D CF                      	iret
  9896                                  
  9897                                  ECritDevice_2:
  9898                                  	;;popff ; *
  9899                                  	;;retn
  9900                                  ;	jmp	short ECritDevice_3 ; *
  9901                                  ;ECritDevice_iret2: ; *
  9902                                  ;	iret
  9903                                  
  9904                                  	; 16/12/2022
  9905                                  	; 13/11/2022
  9906                                  	;jmp	short ECritDevice_3
  9907                                  ;ECritDevice_iret2:
  9908                                  	;iret
  9909                                  
  9910                                  ECritDevice_3:
  9911 0000133E 0E                      	push    cs ; *
  9912                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9913                                  	;call	ECritDevice_iret2 ; *
  9914                                  	;retn
  9915                                  	; 16/12/2022
  9916 0000133F E8FBFF                  	call	ECritDevice_iret
  9917 00001342 C3                      	retn
  9918                                  
  9919                                  ;EndProc ECritDevice
  9920                                  
  9921                                  ; ---------------------------
  9922                                  
  9923                                  ;Procedure   LCritDevice,NEAR
  9924                                  
  9925                                  LCritDevice:
  9926                                  
  9927                                  ;SR; Check if critical section is to be entered
  9928                                  
  9929 00001343 9C                      	pushf
  9930 00001344 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9931 0000134A 740C                    	jz	short LCritDevice_2
  9932                                  	;popff  ; * (macro)
  9933                                  ;	jmp	short LCritDevice_1 ; *
  9934                                  ;
  9935                                  ;LCritDevice_iret: ; *
  9936                                  ;	iret ; *
  9937                                  
  9938                                  	; 16/12/2022
  9939                                  	; 13/11/2022
  9940                                  	;jmp	short LCritDevice_1
  9941                                  ;LCritDevice_iret:
  9942                                  	;iret
  9943                                  
  9944                                  LCritDevice_1:
  9945 0000134C 0E                      	push	cs ; *
  9946 0000134D E8EDFF                  	call	LCritDevice_iret ; *		
  9947                                  	
  9948                                  LCritDevice_0:
  9949 00001350 50                      	PUSH	AX
  9950                                  	;MOV	AX,8100h+critDevice
  9951                                  	;INT	int_IBM
  9952 00001351 B80281                  	mov	ax,8102h
  9953 00001354 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9954                                  			; AL = critical section number (00h-0Fh)
  9955 00001356 58                      	POP     AX
  9956 00001357 C3                      	retn
  9957                                  
  9958                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9959                                  ;	iret
  9960                                  
  9961                                  LCritDevice_2:
  9962                                  	;;popff ; *
  9963                                  	;;retn
  9964                                  ;	jmp	short LCritDevice_3 ; *
  9965                                  ;LCritDevice_iret2: ; *
  9966                                  ;	iret
  9967                                  
  9968                                  	; 16/12/2022
  9969                                  	; 13/11/2022
  9970                                  	;jmp	short LCritDevice_3
  9971                                  ;LCritDevice_iret2:
  9972                                  	;iret
  9973                                  
  9974                                  LCritDevice_3:
  9975 00001358 0E                      	push    cs ; *
  9976                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9977                                  	;call	LCritDevice_iret2 ; *
  9978                                  	;retn
  9979                                  	; 16/12/2022
  9980 00001359 E8E1FF                  	call	LCritDevice_iret
  9981 0000135C C3                      	retn
  9982                                  
  9983                                  ;EndProc LCritDevice
  9984                                  
  9985                                  ;============================================================================
  9986                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9987                                  ;============================================================================
  9988                                  ; 20/07/2018 - Retro DOS v3.0
  9989                                  
  9990                                  ;============================================================================
  9991                                  ; STDIO.ASM - (MSDOS 2.0)
  9992                                  ;============================================================================
  9993                                  
  9994                                  ;
  9995                                  ; Standard device IO for MSDOS (first 12 function calls)
  9996                                  ;
  9997                                  
  9998                                  ;.xlist
  9999                                  ;.xcref
 10000                                  ;INCLUDE STDSW.ASM
 10001                                  ;INCLUDE DOSSEG.ASM
 10002                                  ;.cref
 10003                                  ;.list
 10004                                  
 10005                                  ;TITLE   STDIO - device IO for MSDOS
 10006                                  ;NAME    STDIO
 10007                                  
 10008                                  ;INCLUDE IO.ASM
 10009                                  
 10010                                  ; ---------------------------------------------------------------------------
 10011                                  ;
 10012                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10013                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10014                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10015                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10016                                  ;			    to restore MSDOS 2.0 device IO source code 
 10017                                  ;
 10018                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
 10019                                  	
 10020                                  ;============================================================================
 10021                                  ; STDIO.ASM - (MSDOS 2.0)
 10022                                  ;============================================================================
 10023                                  
 10024                                  ;
 10025                                  ; Standard device IO for MSDOS (first 12 function calls)
 10026                                  ;
 10027                                  
 10028                                  ;.xlist
 10029                                  ;.xcref
 10030                                  ;INCLUDE STDSW.ASM
 10031                                  ;INCLUDE DOSSEG.ASM
 10032                                  ;.cref
 10033                                  ;.list
 10034                                  
 10035                                  ;TITLE   STDIO - device IO for MSDOS
 10036                                  ;NAME    STDIO
 10037                                  
 10038                                  ;INCLUDE IO.ASM
 10039                                  
 10040                                  ; ---------------------------------------------------------------------------
 10041                                  ;
 10042                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10043                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10044                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10045                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10046                                  ;			    to restore MSDOS 2.0 device IO source code 
 10047                                  ;
 10048                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10049                                  ;
 10050                                  ;============================================================================
 10051                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10052                                  ;============================================================================
 10053                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10054                                  
 10055                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10056                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10057                                  
 10058                                  ;============================================================================
 10059                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10060                                  ;============================================================================
 10061                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10062                                  
 10063                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10064                                  
 10065                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10066                                  ;
 10067                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10068                                  ;	NAME	IBMCPMIO
 10069                                  
 10070                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10071                                  ;
 10072                                  ;	$Std_Con_Input_No_Echo
 10073                                  ;	$Std_Con_String_Output
 10074                                  ;	$Std_Con_String_Input
 10075                                  ;	$RawConIO
 10076                                  ;	$RawConInput
 10077                                  ;	RAWOUT
 10078                                  ;	RAWOUT2
 10079                                  ;
 10080                                  
 10081                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10082                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10083                                  ; references to be SS or CS relative which is desired.
 10084                                  
 10085                                  ; ---------------------------------------------------------------------------
 10086                                  
 10087                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10088                                  ;	NAME	CPMIO2
 10089                                  
 10090                                  ;
 10091                                  ;	Microsoft Confidential
 10092                                  ;	Copyright (C) Microsoft Corporation 1991
 10093                                  ;	All Rights Reserved.
 10094                                  ;
 10095                                  
 10096                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10097                                  ;
 10098                                  ;	$Std_Con_Input
 10099                                  ;	$Std_Con_Output
 10100                                  ;	OUTT
 10101                                  ;	TAB
 10102                                  ;	BUFOUT
 10103                                  ;	$Std_Aux_Input
 10104                                  ;	$Std_Aux_Output
 10105                                  ;	$Std_Printer_Output
 10106                                  ;	$Std_Con_Input_Status
 10107                                  ;	$Std_Con_Input_Flush
 10108                                  ;
 10109                                  ;	Revision History:
 10110                                  ;
 10111                                  ;	  AN000	 version 4.00 - Jan. 1988
 10112                                  
 10113                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10114                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10115                                  ; references to be SS or CS relative which is desired.
 10116                                  
 10117                                  ;DOSCODE SEGMENT
 10118                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10119                                  
 10120                                  
 10121                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10122                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10123                                  ;hkn;	not valid. 
 10124                                  
 10125                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10126                                  ; 08/11/2022
 10127                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10128                                  
 10129                                  ;
 10130                                  ;----------------------------------------------------------------------------
 10131                                  ;
 10132                                  ; Procedure : $Std_Con_Input_No_Echo
 10133                                  ;
 10134                                  ;----------------------------------------------------------------------------
 10135                                  ;
 10136                                  
 10137                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10138                                  
 10139                                  ; Inputs:
 10140                                  ;	None
 10141                                  ; Function:
 10142                                  ;	Input character from console, no echo
 10143                                  ; Returns:
 10144                                  ;	AL = character
 10145                                  
 10146 0000135D 1E                      	push	ds
 10147 0000135E 56                      	push	si
 10148                                  INTEST:
 10149 0000135F E8F23C                  	call	STATCHK
 10150 00001362 753B                    	jnz	short GET ; 08/09/2018
 10151                                  ;*************************************************************************
 10152                                  ;hkn; SS override
 10153 00001364 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10154 0000136A 7505                    	jnz	short no_sys_wait
 10155 0000136C B405                    	mov	ah,5			; get input status with system wait
 10156 0000136E E82A30                  	call	IOFUNC
 10157                                  no_sys_wait:
 10158                                  ;**************************************************************************
 10159 00001371 B484                    	MOV	AH,84h
 10160 00001373 CD2A                    	INT	int_IBM	 ; int 2Ah
 10161                                  
 10162                                  ;;; 7/15/86  update the date in the idle loop
 10163                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10164                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10165                                  
 10166                                  ;hkn; SS override
 10167 00001375 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10168 0000137B 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10169                                  
 10170 0000137D 50                      	PUSH	AX
 10171 0000137E 53                      	PUSH	BX			; following is tricky,
 10172 0000137F 51                      	PUSH	CX			; it may be called by critical handler
 10173 00001380 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10174                                  					; other's READ or WRITE
 10175 00001381 1E                      	PUSH	DS			; save DS = SFT's segment
 10176                                  
 10177                                  ;hkn; READTIME must use ds = DOSDATA
 10178                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10179                                  
 10180 00001382 16                      	PUSH	SS ; 04/05/2019
 10181 00001383 1F                      	POP	DS
 10182                                  
 10183 00001384 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10184 00001387 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10185                                  	;invoke	READTIME		; readtime
 10186 0000138A E883F7                  	call	READTIME
 10187 0000138D B80100                  	MOV	AX,1
 10188 00001390 E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10189                                  
 10190                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10191                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10192                                  ;	push	bx
 10193                                  ;	mov	bx,DATE_FLAG
 10194                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10195                                  ;	cmp	word [cs:bx],5872h
 10196                                  ;	jz	short FETCHI_TAG_chk_ok
 10197                                  ;	call	DOSINIT
 10198                                  ;FETCHI_TAG_chk_ok:
 10199                                  ;	pop	bx
 10200                                  
 10201 00001393 1F                      	POP	DS			; restore DS
 10202 00001394 5A                      	POP	DX
 10203 00001395 59                      	POP	CX
 10204 00001396 5B                      	POP	BX
 10205 00001397 58                      	POP	AX
 10206                                  NoUpdate:
 10207                                  
 10208                                  ;hkn; SS override
 10209 00001398 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10210                                  
 10211                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10212 0000139D EBC0                    	JMP	short INTEST
 10213                                  GET:
 10214 0000139F 30E4                    	XOR	AH,AH
 10215 000013A1 E8F72F                  	call	IOFUNC
 10216 000013A4 5E                      	POP	SI
 10217 000013A5 1F                      	POP	DS
 10218                                  ;;; 7/15/86
 10219                                  
 10220                                  ;hkn; SS override
 10221                                  	; MSDOS 6.0
 10222 000013A6 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10223                                  	;
 10224 000013AC 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10225 000013AE 7505                    	JNZ	short noscan
 10226                                  
 10227                                  ;hkn; SS override
 10228                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10229                                  	; 20/06/2023
 10230 000013B0 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10231                                  noscan:
 10232 000013B5 C3                      	retn
 10233                                  ;
 10234                                  ;----------------------------------------------------------------------------
 10235                                  ;
 10236                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10237                                  ;
 10238                                  ;
 10239                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10240                                  ;	EXIT	none
 10241                                  ;	USES	ALL
 10242                                  ;
 10243                                  ;----------------------------------------------------------------------------
 10244                                  ;
 10245                                  
 10246                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10247                                  
 10248 000013B6 89D6                    	mov	si,dx
 10249                                  STRING_OUT1:	
 10250 000013B8 AC                      	lodsb
 10251 000013B9 3C24                    	cmp	al,'$'
 10252 000013BB 74F8                    	je	short noscan
 10253                                  NEXT_STR1:
 10254 000013BD E88702                  	call	OUTT
 10255 000013C0 EBF6                    	jmp	short STRING_OUT1
 10256                                  
 10257                                  ;----------------------------------------------------------------------------
 10258                                  ;
 10259                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10260                                  ;
 10261                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10262                                  ;
 10263                                  ;	ENTRY	(ds:dx) = input buffer
 10264                                  ;	EXIT	none
 10265                                  ;	USES	ALL
 10266                                  ;
 10267                                  ;----------------------------------------------------------------------------
 10268                                  
 10269                                  	; 15/01/2024
 10270                                  
 10271                                  _$STD_CON_STRING_INPUT:		;System call 10
 10272                                  
 10273                                  	; 15/01/2024
 10274                                  	;mov	ax,ss
 10275                                  	;mov	es,ax
 10276 000013C2 16                      	push	ss
 10277 000013C3 07                      	pop	es
 10278                                  
 10279 000013C4 89D6                    	mov	si,dx
 10280 000013C6 30ED                    	xor	ch,ch
 10281 000013C8 AD                      	lodsw
 10282                                  
 10283                                  ;	(AL) = the buffer length
 10284                                  ;	(AH) = the template length
 10285                                  
 10286 000013C9 08C0                            or	al,al
 10287 000013CB 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10288 000013CD 88E3                    	mov	bl,ah		;Init template counter
 10289 000013CF 88EF                            mov	bh,ch		;Init template counter
 10290                                  
 10291                                  ;	(BL) = the number of bytes in the template
 10292                                  
 10293 000013D1 38D8                            cmp	al,bl
 10294 000013D3 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10295 000013D5 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10296 000013D8 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10297                                  
 10298                                  ; The number of chars in the template is >= the number of chars in buffer or
 10299                                  ; there is no CR at the end of the template. This is an inconsistant state
 10300                                  ; of affairs. Pretend that the template was empty:
 10301                                  ;
 10302                                  
 10303                                  NOEDIT:	
 10304 000013DA 88EB                    	mov	bl,ch		;Reset buffer
 10305                                  EDITON: 
 10306 000013DC 88C2                    	mov	dl,al
 10307 000013DE 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10308                                  
 10309                                  ;	Top level. We begin to read a line in.
 10310                                  
 10311                                  NEWLIN: 
 10312 000013DF 36A0[F901]              	mov	al,[SS:CARPOS]
 10313 000013E3 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10314                                  
 10315 000013E7 56                      	push	si
 10316 000013E8 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10317 000013EB 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10318 000013F0 88EF                    	mov	bh,ch		;No chars from template yet
 10319 000013F2 88EE                    	mov	dh,ch		;No chars to new line yet
 10320 000013F4 E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10321 000013F7 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10322 000013F9 7503                    	jnz	short GOTCH
 10323                                  
 10324                                  ;	This is the main loop of reading in a character and processing it.
 10325                                  ;
 10326                                  ;	(BH) = the index of the next byte in the template
 10327                                  ;	(BL) = the length of the template
 10328                                  ;	(DH) = the number of bytes in the buffer
 10329                                  ;	(DL) = the length of the buffer
 10330                                  
 10331                                  GETCH:
 10332 000013FB E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10333                                  GOTCH:
 10334                                  ;
 10335                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10336                                  ; input queue.
 10337                                  ;
 10338 000013FE 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10339 00001400 74F9                    	jz	short GETCH
 10340                                  
 10341                                  ;	If the leading char is the function-key lead byte
 10342                                  
 10343                                  	;cmp	al,[SS:ESCCHAR]
 10344                                  
 10345                                  	; 04/05/2019 - Retro DOS v4.0
 10346                                  
 10347                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10348                                  
 10349 00001402 2E3A06[1A0A]            	CMP	AL,[cs:ESCCHAR]
 10350 00001407 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10351                                  
 10352                                  ;	Rubout and ^H are both destructive backspaces.
 10353                                  
 10354 00001409 3C7F                            cmp	al,c_DEL ; 7FH
 10355                                          ;jz	short BACKSPJ
 10356                                          ; 15/01/2024
 10357 0000140B 7466                    	je	short BACKSP
 10358 0000140D 3C08                    	cmp	al,c_BS  ; 8
 10359                                          ;jz	short BACKSPJ
 10360                                          ; 15/01/2024
 10361 0000140F 7462                    	je	short BACKSP
 10362                                  
 10363                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10364                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10365                                  	;	   	after CMP and a CMP again!
 10366                                  	;		
 10367                                  	;		-It would be better if they use a 'JMP short' to 
 10368                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10369                                  	;		between them. Then, they would be able use a patch
 10370                                  	;		between 5271h and 5279h when if it will be required.
 10371                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10372                                  	;	
 10373                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10374                                  
 10375                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10376                                  	;
 10377                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10378                                  
 10379                                  ;DOSCODE:526D	cmp     al, 8
 10380                                  ;DOSCODE:526F	jz      short BACKSPJ
 10381                                  ;DOSCODE:5271	cmp     al, 17h
 10382                                  ;DOSCODE:5273	nop
 10383                                  ;DOSCODE:5274	nop
 10384                                  ;DOSCODE:5275	cmp     al, 15h
 10385                                  ;DOSCODE:5277	nop
 10386                                  ;DOSCODE:5278	nop
 10387                                  ;DOSCODE:5279	cmp     al, 0Dh
 10388                                  ;DOSCODE:527B	jz      short ENDLIN
 10389                                  ;DOSCODE:527D	cmp     al, 0Ah
 10390                                  ;DOSCODE:527F	jz      short PHYCRLF
 10391                                  	
 10392                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10393                                  	; DOSCODE:525Dh
 10394                                  
 10395                                  ; 16/12/2022
 10396                                  %if 0
 10397                                  	; MSDOS 6.0
 10398                                  ;	^W deletes backward once and then backs up until a letter is before the
 10399                                  ;	cursor
 10400                                  
 10401                                  	CMP     AL,"W"-"@" ; 17h
 10402                                  
 10403                                  ;	The removal of the comment characters before the jump statement will
 10404                                  ;	cause ^W to backup a word.
 10405                                  
 10406                                  ;***	JZ	short WordDel
 10407                                  	NOP
 10408                                  	NOP
 10409                                  
 10410                                  	CMP     AL,"U"-"@" ; 15h
 10411                                  
 10412                                  ;	The removal of the comment characters before the jump statement will
 10413                                  ;	cause ^U to clear a line.
 10414                                  
 10415                                  ;***	JZ	short LineDel
 10416                                  	NOP
 10417                                  	NOP
 10418                                  
 10419                                  %endif
 10420                                  
 10421                                  ;	CR terminates the line.
 10422                                  
 10423 00001411 3C0D                            cmp	al,c_CR ; 0Dh
 10424 00001413 7430                            jz	short ENDLIN
 10425                                  
 10426                                  ;	LF goes to a new line and keeps on reading.
 10427                                  
 10428 00001415 3C0A                            cmp	al,c_LF ; 0Ah
 10429 00001417 7442                    	jz	short PHYCRLF
 10430                                  
 10431                                  ;	^X (or ESC) deletes the line and starts over
 10432                                  
 10433                                  	; MSDOS 3.3
 10434                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10435                                  	;jz	short KILNEW
 10436                                  
 10437                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10438                                  
 10439                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10440                                  
 10441 00001419 2E3A06[190A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10442 0000141E 7440                    	jz	short KILNEW
 10443                                  	
 10444                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10445                                  	;jz	short KILNEW
 10446                                  
 10447                                  ; Otherwise, we save the input character.
 10448                                  
 10449                                  SAVCH:	
 10450 00001420 38D6                    	cmp	dh,dl
 10451 00001422 7317                    	jnb	short BUFFUL		; buffer is full.
 10452 00001424 AA                              stosb
 10453 00001425 FEC6                    	inc	dh                      ; increment count in buffer.
 10454 00001427 E8B102                  	call	BUFOUT			; Print control chars nicely
 10455                                  
 10456 0000142A 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10457 00001430 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10458 00001432 38DF                            cmp	bh,bl
 10459 00001434 73C5                            jnb	short GETCH		; no more characters in template
 10460 00001436 46                              inc	si                      ; Skip to next char in template
 10461 00001437 FEC7                            inc	bh                      ; remember position in template
 10462 00001439 EBC0                            jmp	short GETCH
 10463                                  
 10464                                  	; 15/01/2024
 10465                                  ;BACKSPJ: 
 10466                                  	;jmp	short BACKSP
 10467                                  
 10468                                  BUFFUL: 
 10469 0000143B B007                    	mov	al, 7			; Bell to signal full buffer
 10470 0000143D E80702                  	call	OUTT
 10471 00001440 EBB9                    	jmp	short GETCH
 10472                                  
 10473                                  ESCAPE: 
 10474                                  	;transfer OEMFunctionKey
 10475 00001442 E900F6                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10476                                  
 10477                                  ENDLIN:
 10478 00001445 AA                              stosb				; Put the CR in the buffer
 10479 00001446 E8FE01                  	call	OUTT                    ; Echo it
 10480 00001449 5F                              pop	di                      ; Get start of user buffer
 10481 0000144A 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10482 0000144D FEC6                            inc	dh			; DH is length including CR
 10483                                  
 10484                                  COPYNEW:
 10485                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10486                                  	;mov	bp, es
 10487                                  	;mov	bx, ds
 10488                                  	;mov	es, bx
 10489                                  	;mov	ds, bp
 10490                                  	;mov	si, INBUF
 10491                                  	;mov	cl, dh
 10492                                  	;rep	movsb
 10493                                  	;retn
 10494                                  
 10495                                  	; CPMIO.ASM (MSDOS 6.0)
 10496                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10497                                  	;SAVE	<DS,ES>
 10498 0000144F 1E                      	PUSH	DS
 10499 00001450 06                      	PUSH	ES
 10500                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10501 00001451 1F                      	POP	DS
 10502 00001452 07                      	POP	ES
 10503                                  
 10504                                  ;;hkn; INBUF is in DOSDATA
 10505 00001453 BE[FB01]                        MOV     SI,INBUF
 10506 00001456 88F1                            MOV     CL,DH                   ; set up count
 10507 00001458 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10508                                  OLDBAK_RETN:
 10509 0000145A C3                              RETN
 10510                                  
 10511                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10512                                  
 10513                                  PHYCRLF:
 10514 0000145B E81B01                  	CALL	CRLF
 10515 0000145E EB9B                            JMP	short GETCH
 10516                                  
 10517                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10518                                  
 10519                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10520                                  
 10521                                  	; Note: Following routines were not used in IBMDOS.COM
 10522                                  	;	-CRTL+W, CRTL+U is not activated-
 10523                                  	;	but they were in the kernel code!?)
 10524                                  
 10525                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10526                                  	; DOSCODE:52B6h
 10527                                  
 10528                                  ;;;;;;;;
 10529                                  
 10530                                  ; 16/12/2022
 10531                                  %if 0
 10532                                  ;
 10533                                  ; Delete the previous line
 10534                                  ;
 10535                                  LineDel:
 10536                                  	OR      DH,DH
 10537                                  	JZ	short GETCH	 ; 06/12/2022
 10538                                  	Call    BackSpace
 10539                                  	JMP	short LineDel
 10540                                  
 10541                                  %endif
 10542                                  
 10543                                  ;
 10544                                  ; delete the previous word.
 10545                                  ;
 10546                                  WordDel:
 10547                                  WordLoop:
 10548                                  ;	Call    BackSpace               ; backspace the one spot
 10549                                  ;	OR      DH,DH
 10550                                  ;	JZ	short GetChj
 10551                                  ;	MOV     AL,[ES:DI-1]
 10552                                  ;	cmp     al,'0'
 10553                                  ;	jb	short GetChj
 10554                                  ;	cmp     al,'9'
 10555                                  ;	jbe	short WordLoop
 10556                                  ;	OR      AL,20h
 10557                                  ;	CMP     AL,'a'
 10558                                  ;	JB	short GetChj
 10559                                  ;	CMP     AL,'z'
 10560                                  ;	JBE	short WordLoop
 10561                                  ;GetChj: 
 10562                                  ;	JMP	GETCH
 10563                                  
 10564                                  ; 16/12/2022
 10565                                  %if 0
 10566                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10567                                  	; (Worddel is not called or jumped from anywhere!)
 10568                                  WordDel:
 10569                                  WordLoop:
 10570                                  	Call    BackSpace               ; backspace the one spot
 10571                                  	OR      DH,DH
 10572                                  	JZ	short GetChj
 10573                                  	MOV     AL,[ES:DI-1]
 10574                                  	cmp     al,'0'
 10575                                  	jb	short GetChj
 10576                                  	cmp     al,'9'
 10577                                  	jbe	short WordLoop
 10578                                  	OR      AL,20h
 10579                                  	CMP     AL,'a'
 10580                                  	JB	short GetChj
 10581                                  	CMP     AL,'z'
 10582                                  	JBE	short WordLoop
 10583                                  GetChj: 
 10584                                  	JMP	GETCH
 10585                                  
 10586                                  %endif
 10587                                  
 10588                                  ;;;;;;;;
 10589                                  
 10590                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10591                                  
 10592                                  ; The user wants to throw away what he's typed in and wants to start over.
 10593                                  ; We print the backslash and then go to the next line and tab to the correct
 10594                                  ; spot to begin the buffered input.
 10595                                  
 10596                                  KILNEW:
 10597 00001460 B05C                            mov	al,'\'
 10598 00001462 E8E201                          call	OUTT            ;Print the CANCEL indicator
 10599 00001465 5E                              pop	si		;Remember start of edit buffer
 10600                                  PUTNEW:
 10601 00001466 E81001                  	call	CRLF            ;Go to next line on screen
 10602 00001469 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10603 0000146D E84B02                  	call	TAB             ;Tab over
 10604 00001470 E96CFF                          JMP     NEWLIN		;Start over again
 10605                                  
 10606                                  ;	Destructively back up one character position
 10607                                  
 10608                                  BACKSP:
 10609                                  	; 09/09/2018
 10610 00001473 E80800                  	Call    BackSpace
 10611 00001476 EB83                    	JMP     short GETCH	; 15/01/2024
 10612                                  
 10613                                  	; 15/01/2024
 10614                                  ;User really wants an ESC character in his line
 10615                                  TWOESC:	
 10616 00001478 2EA0[1A0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10617 0000147C EBA2                    	jmp	short SAVCH
 10618                                  
 10619                                  BackSpace:
 10620 0000147E 08F6                    	or	dh,dh
 10621 00001480 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10622 00001482 E85800                  	call	BACKUP          ;Do the backup
 10623 00001485 268A05                  	mov	al,[es:di]	;Get the deleted char
 10624 00001488 3C20                            cmp	al,20h	; ' '
 10625 0000148A 730F                    	jnb	short OLDBAK	;Was a normal char
 10626 0000148C 3C09                            cmp	al,c_HT ; 9
 10627 0000148E 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10628                                  ;; 9/27/86 fix for ctrl-U backspace
 10629 00001490 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10630 00001492 7407                    	JZ	short OLDBAK
 10631 00001494 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10632 00001496 7403                    	JZ	short OLDBAK
 10633                                  ;; 9/27/86 fix for ctrl-U backspace
 10634 00001498 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10635                                  OLDBAK:
 10636 0000149B 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10637 000014A1 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10638 000014A3 08FF                    	or	bh,bh
 10639 000014A5 74B3                            jz	short OLDBAK_RETN 
 10640                                  				;Not advanced in template, stay where we are
 10641 000014A7 FECF                    	dec	bh		;Go back in template
 10642 000014A9 4E                              dec	si
 10643 000014AA C3                      	retn
 10644                                  BAKTAB:
 10645 000014AB 57                              push	di
 10646 000014AC 4F                              dec	di		;Back up one char
 10647 000014AD FD                              std			;Go backward
 10648 000014AE 88F1                            mov	cl,dh		;Number of chars currently in line
 10649 000014B0 B020                            mov	al,20h	; ' '
 10650 000014B2 53                              push	bx
 10651 000014B3 B307                            mov	bl,7		;Max
 10652 000014B5 E30E                            jcxz	FIGTAB		;At start, do nothing
 10653                                  FNDPOS:
 10654 000014B7 AE                              scasb			;Look back
 10655 000014B8 7609                    	jbe	short CHKCNT
 10656 000014BA 26807D0109              	cmp	byte [es:di+1],9
 10657 000014BF 7409                    	jz	short HAVTAB	;Found a tab
 10658 000014C1 FECB                    	dec	bl		;Back one char if non tab control char
 10659                                  CHKCNT:
 10660 000014C3 E2F2                            loop	FNDPOS
 10661                                  FIGTAB:		
 10662 000014C5 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10663                                  HAVTAB:
 10664 000014CA 28F3                    	sub	bl,dh
 10665 000014CC 00D9                    	add	cl,bl
 10666 000014CE 80E107                  	and	cl,7		;CX has correct number to erase
 10667 000014D1 FC                      	cld			;Back to normal
 10668 000014D2 5B                      	pop	bx
 10669 000014D3 5F                      	pop	di
 10670 000014D4 74C5                    	jz	short OLDBAK	;Nothing to erase
 10671                                  TABBAK:
 10672 000014D6 E80700                  	call	BACKMES
 10673 000014D9 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10674 000014DB EBBE                    	jmp	short OLDBAK
 10675                                  
 10676                                  BACKUP:
 10677 000014DD FECE                            dec	dh		;Back up in line
 10678 000014DF 4F                              dec	di
 10679                                  BACKMES:
 10680 000014E0 B008                            mov	al,c_BS ; 8	;Backspace
 10681 000014E2 E86201                          call	OUTT
 10682 000014E5 B020                            mov	al,20h ; ' '	;Erase
 10683 000014E7 E85D01                          call	OUTT
 10684 000014EA B008                            mov	al,c_BS ; 8	;Backspace
 10685 000014EC E95801                  	jmp	OUTT		;Done
 10686                                  
 10687                                  	; 15/01/2024
 10688                                  ;User really wants an ESC character in his line
 10689                                  ;TWOESC:	
 10690                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10691                                  ;	jmp	SAVCH
 10692                                  
 10693                                  ;Copy the rest of the template
 10694                                  COPYLIN:
 10695 000014EF 88D9                            mov	cl,bl		;Total size of template
 10696 000014F1 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10697 000014F3 EB07                            jmp	short COPYEACH
 10698                                  
 10699                                  COPYSTR:
 10700 000014F5 E83200                  	call	FINDOLD         ;Find the char
 10701 000014F8 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10702                                  
 10703                                  ;Copy one char from template to line
 10704                                  COPYONE:
 10705 000014FA B101                            mov	cl,1
 10706                                  ;Copy CX chars from template to line
 10707                                  COPYEACH:
 10708 000014FC 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10709 00001502 38D6                    	cmp	dh,dl
 10710 00001504 740F                            jz	short GETCH2		;At end of line, can't do anything
 10711 00001506 38DF                            cmp	bh,bl
 10712 00001508 740B                            jz	short GETCH2		;At end of template, can't do anything
 10713 0000150A AC                              lodsb
 10714 0000150B AA                              stosb
 10715 0000150C E8CC01                  	call	BUFOUT
 10716 0000150F FEC7                            inc	bh			;Ahead in template
 10717 00001511 FEC6                            inc	dh			;Ahead in line
 10718 00001513 E2E7                            loop	COPYEACH
 10719                                  GETCH2:
 10720 00001515 E9E3FE                          jmp	GETCH
 10721                                  
 10722                                  ;Skip one char in template
 10723                                  SKIPONE:
 10724 00001518 38DF                    	cmp	bh,bl
 10725 0000151A 74F9                    	jz	short GETCH2		;At end of template
 10726 0000151C FEC7                    	inc	bh			;Ahead in template
 10727 0000151E 46                      	inc	si
 10728                                          ;jmp	GETCH
 10729                                  	; 15/01/2024
 10730 0000151F EBF4                    	jmp	short GETCH2
 10731                                  
 10732                                  SKIPSTR:
 10733 00001521 E80600                  	call	FINDOLD                 ;Find out how far to go
 10734 00001524 01CE                            add	si,cx			;Go there
 10735 00001526 00CF                            add	bh,cl
 10736                                          ;jmp	GETCH
 10737                                  	; 15/01/2024
 10738 00001528 EBEB                    	jmp	short GETCH2
 10739                                  
 10740                                  ;Get the next user char, and look ahead in template for a match
 10741                                  ;CX indicates how many chars to skip to get there on output
 10742                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10743                                  ;       address is popped off and a jump to GETCH is taken.
 10744                                  ;       Make sure nothing extra on stack when this routine
 10745                                  ;       is called!!! (no PUSHes before calling it).
 10746                                  
 10747                                  FINDOLD:
 10748 0000152A E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10749                                  
 10750                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10751                                  
 10752                                  	;CMP	AL,[SS:ESCCHAR]	
 10753                                  	;JNZ	SHORT FINDSETUP
 10754                                  
 10755                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10756                                  
 10757                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10758                                  
 10759 0000152D 2E3A06[1A0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10760 00001532 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10761                                  
 10762 00001534 E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10763 00001537 EB1D                            JMP	SHORT NOTFND		; go try again
 10764                                  FINDSETUP:
 10765 00001539 88D9                    	mov	cl,bl
 10766 0000153B 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10767 0000153D 7417                    	jz	short NOTFND	;At end of template
 10768 0000153F 49                              dec	cx		;Cannot point past end, limit search
 10769 00001540 7414                            jz	short NOTFND	;If only one char in template, forget it
 10770 00001542 06                      	push	es
 10771 00001543 1E                      	push	ds
 10772 00001544 07                      	pop	es
 10773 00001545 57                      	push	di
 10774 00001546 89F7                    	mov	di,si		;Template to ES:DI
 10775 00001548 47                      	inc	di
 10776 00001549 F2AE                    	repne	scasb		;Look
 10777 0000154B 5F                      	pop	di
 10778 0000154C 07                      	pop	es
 10779 0000154D 7507                    	jnz	short NOTFND	;Didn't find the char
 10780 0000154F F6D1                            not	cl		;Turn how far to go into how far we went
 10781 00001551 00D9                            add	cl,bl		;Add size of template
 10782 00001553 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10783                                  FINDOLD_RETN:
 10784 00001555 C3                      	retn
 10785                                  
 10786                                  NOTFND:
 10787 00001556 5D                      	pop	bp              ;Chuck return address
 10788                                  	;jmp	GETCH
 10789                                  	; 15/01/2024
 10790                                  GETCH2_j:
 10791 00001557 EBBC                    	jmp	short GETCH2
 10792                                  
 10793                                  REEDIT:
 10794 00001559 B040                    	mov	al,'@'		;Output re-edit character
 10795 0000155B E8E900                  	call	OUTT
 10796 0000155E 5F                      	pop	di
 10797 0000155F 57                      	push	di
 10798 00001560 06                      	push	es
 10799 00001561 1E                      	push	ds
 10800 00001562 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10801 00001565 1F                      	pop	ds
 10802 00001566 07                      	pop	es
 10803 00001567 5E                      	pop	si
 10804 00001568 88F3                    	mov	bl,dh		;Size of line is new size template
 10805 0000156A E9F9FE                  	jmp	PUTNEW		;Start over again
 10806                                  
 10807                                  EXITINS:
 10808                                  ENTERINS:
 10809 0000156D 36F616[7905]            	not	byte [SS:INSMODE]
 10810                                  	;jmp	GETCH
 10811                                  	; 15/01/2024
 10812 00001572 EBE3                    	jmp	short GETCH2_j
 10813                                  
 10814                                  ;Put a real live ^Z in the buffer (embedded)
 10815                                  CTRLZ:
 10816 00001574 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10817 00001576 E9A7FE                          jmp	SAVCH
 10818                                  
 10819                                  ;Output a CRLF
 10820                                  CRLF:
 10821 00001579 B00D                    	mov	al,c_CR ; 0Dh 
 10822 0000157B E8C900                  	call	OUTT
 10823 0000157E B00A                    	mov	al,c_LF ; 0Ah
 10824 00001580 E9C400                  	jmp	OUTT
 10825                                  
 10826                                  ;
 10827                                  ;----------------------------------------------------------------------------
 10828                                  ;
 10829                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10830                                  ;
 10831                                  ;	Input or output raw character from console, no echo
 10832                                  ;
 10833                                  ;	ENTRY	DL = -1 if input
 10834                                  ;		   =  output character if output
 10835                                  ;	EXIT	(AL) = input character if input
 10836                                  ;	USES	all
 10837                                  ;
 10838                                  ;----------------------------------------------------------------------------
 10839                                  ; 20/07/2018 - Retro DOS v3.0
 10840                                  
 10841                                  ; 04/05/2019 - Retro DOS v4.0
 10842                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10843                                  
 10844                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10845                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10846                                  
 10847                                  _$RAW_CON_IO:			; System call 6
 10848 00001583 88D0                    	MOV	AL,DL
 10849 00001585 3CFF                    	CMP	AL,-1
 10850 00001587 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10851                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10852                                  	;jz	short rci1
 10853                                  	;jmp	short RAWOUT
 10854                                  	; 16/12/202
 10855                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10856                                  	;nop
 10857                                  rci1:
 10858                                  			; Get pointer to register save area
 10859 00001589 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10860 0000158E 31DB                    	XOR	BX,BX
 10861                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10862 00001590 E80120                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10863                                          ;JC	SHORT RET17
 10864 00001593 72C0                            jc	short FINDOLD_RETN
 10865 00001595 B401                    	MOV	AH,1
 10866 00001597 E8012E                  	CALL	IOFUNC
 10867 0000159A 750B                    	JNZ	SHORT RESFLG
 10868 0000159C E8873A                  	CALL	SPOOLINT
 10869                                  	;OR	BYTE [ES:DI+16H],40H
 10870 0000159F 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10871 000015A4 30C0                    	XOR	AL,AL
 10872                                  RET17:
 10873 000015A6 C3                      	RETN
 10874                                  
 10875                                  RESFLG:
 10876                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10877 000015A7 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10878                                  				; Reset user's zero flag
 10879                                  ;RILP:
 10880                                  rci0:
 10881 000015AC E8773A                  	CALL	SPOOLINT
 10882                                  ;
 10883                                  ;----------------------------------------------------------------------------
 10884                                  ;
 10885                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10886                                  ;
 10887                                  ;	Input raw character from console, no echo
 10888                                  ;
 10889                                  ;	ENTRY	none
 10890                                  ;	EXIT	(al) = character
 10891                                  ;	USES	all
 10892                                  ;
 10893                                  ;----------------------------------------------------------------------------
 10894                                  ;
 10895                                  
 10896                                  ;rci0:	invoke	SPOOLINT
 10897                                  
 10898                                  	;entry	$RAW_CON_INPUT
 10899                                  
 10900                                  	; 04/05/2019 - Retro DOS v4.0
 10901                                  
 10902                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10903                                  
 10904                                  _$RAW_CON_INPUT:		; System call 7
 10905 000015AF 53                      	push	bx
 10906 000015B0 31DB                    	XOR	BX,BX
 10907                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10908 000015B2 E8DF1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10909 000015B5 5B                      	pop	bx
 10910 000015B6 72EE                    	JC	SHORT RET17
 10911 000015B8 B401                    	MOV	AH,1
 10912 000015BA E8DE2D                  	CALL	IOFUNC
 10913                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10914                                  	;XOR	AH,AH
 10915                                          ;CALL	IOFUNC
 10916                                          ;RETN
 10917 000015BD 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10918 000015BF B484                    	MOV	AH,84h
 10919 000015C1 CD2A                    	INT	int_IBM  ; int 2Ah
 10920 000015C3 EBE7                    	JMP	short rci0
 10921                                  rci5:	
 10922 000015C5 30E4                    	XOR	AH,AH
 10923                                  	;CALL	IOFUNC
 10924                                  	;RETN
 10925                                  	; 18/12/2022
 10926 000015C7 E9D12D                  	jmp	IOFUNC
 10927                                  
 10928                                  ;       Output the character in AL to stdout
 10929                                  ;
 10930                                  	;entry	RAWOUT
 10931                                  RAWOUT:
 10932 000015CA 53                      	PUSH    BX
 10933 000015CB BB0100                  	MOV     BX,1
 10934                                  
 10935                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10936 000015CE E8C31F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10937 000015D1 721B                    	JC	SHORT RAWRET1
 10938                                  
 10939                                  	;
 10940                                  	; MSDOS 2.11
 10941                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10942                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10943                                          ;PUSH	DS
 10944                                          ;PUSH	SI
 10945                                          ;LDS	SI,[SI+19H]		; output to special?
 10946                                  	;TEST	BYTE [SI+4],ISSPEC
 10947                                  	;POP	SI
 10948                                  	;
 10949                                          
 10950                                  	; MSDOS 3.3 & MSDOS 6.0
 10951                                  	;mov	bx,[si+5]
 10952 000015D3 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10953                                   ;
 10954                                   ; If we are a network handle OR if we are not a local device then go do the
 10955                                   ; output the hard way.
 10956                                   ;	
 10957                                  	;and	bx,8080h
 10958 000015D6 81E38080                	AND	BX,sf_isnet+devid_device
 10959                                  	;cmp	bx,80h
 10960 000015DA 81FB8000                	CMP	BX,devid_device
 10961 000015DE 7510                    	jnz     short RAWNORM
 10962 000015E0 1E                      	push    ds
 10963                                  	;lds	bx,[si+7]
 10964 000015E1 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10965                                  	;test	byte [bx+4],10h
 10966 000015E4 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10967                                  	;
 10968                                  
 10969 000015E8 1F                      	POP	DS
 10970 000015E9 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10971                                  
 10972 000015EB CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10973                                  
 10974                                  	;JMP	SHORT RAWRET
 10975                                  ;RAWNORM:
 10976                                  ;	CALL    RAWOUT3
 10977                                  RAWRET: 
 10978 000015ED F8                      	CLC
 10979                                  RAWRET1:
 10980 000015EE 5B                      	POP     BX
 10981                                  RAWRET2:
 10982 000015EF C3                      	RETN
 10983                                  RAWNORM:
 10984 000015F0 E80700                  	CALL    RAWOUT3
 10985 000015F3 EBF8                    	jmp	short RAWRET
 10986                                  
 10987                                  ;	Output the character in AL to handle in BX
 10988                                  ;
 10989                                  ;	entry	RAWOUT2
 10990                                  
 10991                                  RAWOUT2:
 10992                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10993                                  	;JC	SHORT RET18
 10994 000015F5 E89C1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10995 000015F8 72F5                    	JC	SHORT RAWRET2
 10996                                  RAWOUT3:
 10997 000015FA 50                      	PUSH	AX
 10998 000015FB EB0C                    	JMP	SHORT RAWOSTRT
 10999                                  ROLP:
 11000 000015FD E8263A                  	CALL	SPOOLINT
 11001                                  
 11002                                  	; 01/05/2019 - Retro DOS v4.0
 11003                                  
 11004                                  	; MSDOS 6.0
 11005                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 11006                                  	; 17/12/2022
 11007 00001600 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 11008                                  	;or	word [ss:DOS34_FLAG],200h
 11009                                  				;AN002; set control break
 11010                                  	;invoke DSKSTATCHK
 11011 00001606 E89C39                  	call	DSKSTATCHK	;AN002; check control break
 11012                                  RAWOSTRT:
 11013 00001609 B403                    	MOV	AH,3
 11014 0000160B E88D2D                  	CALL	IOFUNC
 11015 0000160E 74ED                    	JZ	SHORT ROLP
 11016                                  
 11017                                  	; MSDOS 6.0
 11018                                  ;SR;
 11019                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 11020                                  ;the user failed. We do not send a char if this happens. We however return
 11021                                  ;to the caller with carry clear because this DOS call does not return any
 11022                                  ;status. 
 11023                                  ;
 11024 00001610 40                      	inc	ax		;fail on I24 if ax = -1
 11025 00001611 58                      	POP	AX
 11026 00001612 7405                    	jz	short nosend	;yes, do not send char
 11027 00001614 B402                    	MOV	AH,2
 11028 00001616 E8822D                  	call	IOFUNC
 11029                                  nosend:
 11030 00001619 F8                      	CLC			; Clear carry indicating successful
 11031 0000161A C3                      	retn
 11032                                  
 11033                                  	; MSDOS 3.3 & MSDOS 2.11
 11034                                  	;POP	AX
 11035                                  	;MOV	AH,2
 11036                                          ;CALL	IOFUNC
 11037                                  	;CLC			; Clear carry indicating successful
 11038                                  ;RET18:    
 11039                                  	;RETN
 11040                                  
 11041                                  ;;10/08/2018
 11042                                  ; 20/07/2018 - Retro DOS v3.0
 11043                                  ; ---------------------------------------------------------------------------
 11044                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11045                                  ; ---------------------------------------------------------------------------
 11046                                  
 11047                                  ; This routine is called at DOS init
 11048                                  
 11049                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11050                                  ;;OUTMES:
 11051                                  ;;	;LODS	CS:BYTE PTR [SI]
 11052                                  ;;	CS	LODSB
 11053                                  ;;	CMP     AL,"$" ; 24h
 11054                                  ;;	JZ	SHORT RET18
 11055                                  ;;	CALL	OUTT
 11056                                  ;;	JMP     SHORT OUTMES
 11057                                  
 11058                                  ; ---------------------------------------------------------------------------
 11059                                  
 11060                                  ; 20/07/2018 - Retro DOS v3.0
 11061                                  
 11062                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11063                                  
 11064                                  ;
 11065                                  ;----------------------------------------------------------------------------
 11066                                  ;
 11067                                  ; Inputs:
 11068                                  ;	AX=0 save the DEVCALL request packet
 11069                                  ;	  =1 restore the DEVCALL request packet
 11070                                  ; Function:
 11071                                  ;	save or restore the DEVCALL packet
 11072                                  ; Returns:
 11073                                  ;	none
 11074                                  ;
 11075                                  ;----------------------------------------------------------------------------
 11076                                  ;
 11077                                  
 11078                                  ; 04/05/2019 - Retro DOS v4.0
 11079                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11080                                  
 11081                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11082                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11083                                  
 11084                                  ; 12/05/2019
 11085                                  
 11086                                  	; 15/01/2024
 11087                                  
 11088                                  Save_Restore_Packet:
 11089 0000161B 1E                      	PUSH	DS
 11090 0000161C 06                      	PUSH	ES
 11091 0000161D 56                      	PUSH	SI
 11092 0000161E 57                      	PUSH	DI
 11093                                  
 11094                                  	; 16/12/2022
 11095                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11096                                  	; 09/09/2018
 11097 0000161F BF[6C0D]                	mov	di,FAKE_STACK_2F
 11098 00001622 BE[5A03]                	mov	si,DEVCALL
 11099 00001625 BE[5A03]                	mov	si,DEVCALL
 11100                                  	;
 11101                                  	; 21/09/2023
 11102 00001628 09C0                    	or	ax,ax 
 11103                                  	;CMP	AX,0		; save packet
 11104 0000162A 7402                    	JZ	short save_packet ; 16/12/2022
 11105                                  	;je	short set_seg
 11106                                  
 11107                                  	; MSDOS 6.0
 11108                                  restore_packet:
 11109                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11110                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11111                                  	; MSDOS 3.3
 11112                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11113                                  	;mov	di,DEVCALL  ; 09/09/2018
 11114                                  	;
 11115                                  	;JMP	short set_seg
 11116                                  
 11117                                  	; 16/12/2022	
 11118                                  	; 09/09/2018
 11119 0000162C 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11120                                  
 11121                                  ; 16/12/2022
 11122                                  %if 0
 11123                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11124                                  	cmp	ax,0		; save packet
 11125                                  	jz	short save_packet
 11126                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11127                                  	mov	di,DEVCALL 
 11128                                  	jmp	short set_seg
 11129                                  
 11130                                  	; MSDOS 6.0
 11131                                  save_packet:
 11132                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11133                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11134                                  	; 09/09/2018
 11135                                  	; MSDOS 3.3
 11136                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11137                                  	;mov	si,DEVCALL ; 09/09/2018
 11138                                  
 11139                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11140                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11141                                  	mov	si,DEVCALL
 11142                                  %endif
 11143                                  
 11144                                  ; 15/01/2024
 11145                                  ; 16/12/2022
 11146                                  save_packet:
 11147                                  ;set_seg:
 11148                                  	; MSDOS 3.3
 11149                                  	;mov	ax,cs
 11150                                  
 11151                                  	; MSDOS 6.0
 11152                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11153                                  	;MOV	DS,AX
 11154                                  	;MOV	ES,AX
 11155                                  	; 15/01/2024
 11156 0000162E 16                      	push	ss
 11157 0000162F 1F                      	pop	ds
 11158 00001630 1E                      	push	ds
 11159 00001631 07                      	pop	es
 11160                                  
 11161 00001632 B90B00                  	MOV	CX,11		; 11 words to move
 11162 00001635 F3A5                    	REP	MOVSW
 11163                                  
 11164 00001637 5F                      	POP	DI
 11165 00001638 5E                      	POP	SI
 11166 00001639 07                      	POP	ES
 11167 0000163A 1F                      	POP	DS
 11168 0000163B C3                      	retn
 11169                                  
 11170                                  ;============================================================================
 11171                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11172                                  ;============================================================================
 11173                                  ; 20/07/2018 - Retro DOS v3.0
 11174                                  ; 01/05/2019 - Retro DOS v4.0
 11175                                  
 11176                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11177                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11178                                  ;hkn;	not valid. 
 11179                                  
 11180                                  ;
 11181                                  ;----------------------------------------------------------------------------
 11182                                  ;
 11183                                  ;**	$STD_CON_INPUT - System Call 1
 11184                                  ;
 11185                                  ;	Input character from console, echo
 11186                                  ;
 11187                                  ;	ENTRY	none
 11188                                  ;	EXIT	(al) = character
 11189                                  ;	USES	ALL
 11190                                  ;
 11191                                  ;----------------------------------------------------------------------------
 11192                                  ;
 11193                                  
 11194                                  _$STD_CON_INPUT:	;System call 1
 11195                                  	
 11196 0000163C E81EFD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11197 0000163F 50                      	PUSH	AX
 11198 00001640 E80400                  	CALL	OUTT
 11199 00001643 58                      	POP	AX
 11200                                  CON_INPUT_RETN:	
 11201 00001644 C3                      	RETN
 11202                                  
 11203                                  ;
 11204                                  ;----------------------------------------------------------------------------
 11205                                  ;
 11206                                  ;**	$STD_CON_OUTPUT - System Call 2
 11207                                  ;
 11208                                  ;	Output character to console
 11209                                  ;
 11210                                  ;	ENTRY	(dl) = character
 11211                                  ;	EXIT	none
 11212                                  ;	USES	all
 11213                                  ;
 11214                                  ;----------------------------------------------------------------------------
 11215                                  ;
 11216                                  
 11217                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11218                                  
 11219                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11220                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11221                                  
 11222                                  _$STD_CON_OUTPUT:	;System call 2
 11223                                  
 11224 00001645 88D0                    	MOV	AL,DL
 11225                                  OUTT:
 11226 00001647 3C20                    	CMP	AL,20H ; " "
 11227 00001649 725C                    	JB	SHORT CTRLOUT
 11228 0000164B 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11229 0000164D 7405                    	JZ	SHORT OUTCH
 11230                                  OUTCHA:	
 11231                                  	;INC	BYTE PTR [CARPOS]
 11232 0000164F 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11233                                  OUTCH:
 11234 00001654 1E                      	PUSH	DS
 11235 00001655 56                      	PUSH	SI
 11236                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11237                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11238 00001656 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11239                                  	;AND	BYTE [SS:CHARCO],00111111B
 11240                                  	; 01/05/2019 - Retro DOS v4.0
 11241 0000165B 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11242 00001661 7505                    	JNZ	SHORT OUTSKIP
 11243                                  
 11244 00001663 50                      	PUSH	AX
 11245 00001664 E8ED39                  	CALL	STATCHK
 11246 00001667 58                      	POP	AX
 11247                                  OUTSKIP:
 11248 00001668 E85FFF                  	CALL	RAWOUT				;output the character
 11249                                  
 11250 0000166B 5E                      	POP	SI
 11251 0000166C 1F                      	POP	DS
 11252                                  
 11253                                  	;TEST	BYTE PTR [PFLAG],-1
 11254                                  	;retz
 11255 0000166D 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11256 00001673 74CF                    	JZ	SHORT CON_INPUT_RETN
 11257                                  
 11258 00001675 53                      	PUSH	BX
 11259 00001676 1E                      	PUSH	DS
 11260 00001677 56                      	PUSH	SI
 11261 00001678 BB0100                  	MOV	BX,1
 11262                                  	; 20/07/2018 - Retro DOS v3.0
 11263                                  	; MSDOS 3.3
 11264                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11265 0000167B E8161F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11266                                  					;hkn; to sft entry
 11267 0000167E 7224                    	JC	SHORT TRIPOPJ
 11268                                  
 11269                                  	; 01/05/2019 - Retro DOS v4.0
 11270                                  
 11271                                  	;mov	bx,[si+5]
 11272 00001680 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11273                                  	;test	bx,8000h
 11274                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11275 00001683 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11276 00001686 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11277                                  	;;test	bx,80h
 11278                                  	;TEST	BX,devid_device 		; output to file?
 11279 00001688 F6C380                  	test	bl,devid_device ; 80h
 11280 0000168B 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11281                                  	; 14/03/2018
 11282                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11283                                  	;jc	short TRIPOPJ
 11284                                  	; MSDOS 2.11
 11285                                  	;test	byte [SI+18H], 80h
 11286                                  	;jz	short TRIPOPJ
 11287 0000168D BB0400                  	MOV	BX,4
 11288 00001690 E8011F                  	CALL	GET_IO_SFT
 11289 00001693 720F                    	JC	SHORT TRIPOPJ
 11290                                  	;;test	word [si+5], 800h
 11291                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11292                                  	;test	byte [si+6],8 ; 08/11/2022
 11293 00001695 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11294                                  						; StdPrn redirected?
 11295                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11296                                  	;jz	LISSTRT2 ; 10/08/2018 
 11297                                  	; 16/12/2022
 11298 00001699 7503                    	jnz	short outch1
 11299 0000169B E98700                  	jmp	LISSTRT2
 11300                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11301                                  	;jz	short LISSTRT2J
 11302                                  outch1:
 11303                                  	;MOV	BYTE [PFLAG],0
 11304 0000169E 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11305                                  	; MSDOS 2.11
 11306                                  	;mov	bx,4
 11307                                  	;jmp	short LISSTRT2
 11308                                  	
 11309                                  TRIPOPJ:
 11310                                  	; 20/07/2018
 11311 000016A4 E98100                  	JMP	TRIPOP
 11312                                  
 11313                                  	; 16/12/2022
 11314                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11315                                  ;LISSTRT2J:
 11316                                  ;	JMP	LISSTRT2
 11317                                  
 11318                                  CTRLOUT:
 11319 000016A7 3C0D                    	CMP	AL,c_CR ; 0Dh
 11320 000016A9 7420                    	JZ	SHORT ZERPOS
 11321 000016AB 3C08                    	CMP	AL,c_BS ; 8
 11322 000016AD 7424                    	JZ	SHORT BACKPOS
 11323 000016AF 3C09                    	CMP	AL,c_HT ; 9
 11324 000016B1 75A1                    	JNZ	SHORT OUTCH
 11325                                  	;MOV	AL,[CARPOS]
 11326 000016B3 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11327 000016B7 0CF8                    	OR	AL,0F8H
 11328 000016B9 F6D8                    	NEG	AL
 11329                                  TAB:
 11330 000016BB 51                      	PUSH	CX
 11331 000016BC 88C1                    	MOV	CL,AL
 11332 000016BE B500                    	MOV	CH,0
 11333 000016C0 E307                    	JCXZ	POPTAB
 11334                                  TABLP:
 11335 000016C2 B020                    	MOV	AL," "
 11336 000016C4 E880FF                  	CALL	OUTT
 11337 000016C7 E2F9                    	LOOP	TABLP
 11338                                  POPTAB:
 11339 000016C9 59                      	POP	CX
 11340                                  
 11341 000016CA C3                      	RETN
 11342                                  
 11343                                  ZERPOS:
 11344                                  	;MOV	BYTE PTR [CARPOS],0
 11345 000016CB 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11346                                  	; 10/08/2018
 11347 000016D1 EB81                    	JMP	short OUTCH ; 04/05/2019
 11348                                  	
 11349                                  	; 18/12/2022
 11350                                  ;OUTJ:	
 11351                                  	;JMP	OUTT
 11352                                  
 11353                                  BACKPOS:
 11354                                  	;DEC	BYTE PTR [CARPOS]
 11355 000016D3 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11356 000016D8 E979FF                  	JMP	OUTCH
 11357                                  
 11358                                  BUFOUT:
 11359 000016DB 3C20                    	CMP	AL," "
 11360 000016DD 7315                    	JAE	SHORT OUTJ		;Normal char
 11361 000016DF 3C09                    	CMP	AL,9
 11362 000016E1 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11363                                  	;DOS 3.3  7/14/86
 11364 000016E3 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11365 000016E5 740D                    	JZ	short CTRLU
 11366 000016E7 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11367 000016E9 7409                    	JZ	short CTRLU
 11368                                  NOT_CTRLU:
 11369                                  	;DOS 3.3  7/14/86
 11370 000016EB 50                      	PUSH	AX
 11371 000016EC B05E                    	MOV	AL,"^"
 11372 000016EE E856FF                  	CALL	OUTT		;Print '^' before control chars
 11373 000016F1 58                      	POP	AX
 11374 000016F2 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11375                                  CTRLU:
 11376                                  	;CALL	OUTT
 11377                                  	; 18/12/2022
 11378                                  OUTJ:
 11379 000016F4 E950FF                  	jmp	OUTT
 11380                                  ;BUFOUT_RETN:
 11381                                  	;RETN
 11382                                  
 11383                                  ;
 11384                                  ;----------------------------------------------------------------------------
 11385                                  ;
 11386                                  ;**	$STD_AUX_INPUT - System Call 3
 11387                                  ;
 11388                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11389                                  ;
 11390                                  ;	ENTRY	none
 11391                                  ;	EXIT	(al) = character
 11392                                  ;	USES	all
 11393                                  ;
 11394                                  ;----------------------------------------------------------------------------
 11395                                  ;
 11396                                  
 11397                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11398                                  
 11399                                  _$STD_AUX_INPUT:	;System call 3
 11400                                  
 11401 000016F7 E85A39                  	CALL	STATCHK
 11402 000016FA BB0300                  	MOV	BX,3
 11403 000016FD E8941E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11404                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11405                                  	;retc
 11406                                  	; 16/12/2022
 11407                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11408                                  	;JC	SHORT BUFOUT_RETN
 11409                                  	;JMP	SHORT TAISTRT
 11410                                  	; 07/12/2022
 11411 00001700 7304                    	jnc	SHORT TAISTRT
 11412 00001702 C3                      	retn	
 11413                                  
 11414                                  AUXILP:
 11415 00001703 E82039                  	CALL	SPOOLINT
 11416                                  TAISTRT:
 11417 00001706 B401                    	MOV	AH,1
 11418 00001708 E8902C                  	CALL	IOFUNC
 11419 0000170B 74F6                    	JZ	SHORT AUXILP
 11420 0000170D 30E4                    	XOR	AH,AH
 11421                                  	; 16/12/2022
 11422                                  	;CALL	IOFUNC
 11423                                  	;RETN
 11424                                  	; 07/12/2022
 11425 0000170F E9892C                  	jmp	IOFUNC
 11426                                  
 11427                                  ;
 11428                                  ;----------------------------------------------------------------------------
 11429                                  ;
 11430                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11431                                  ;
 11432                                  ;	ENTRY	(dl) = character
 11433                                  ;	EXIT	none
 11434                                  ;	USES	all
 11435                                  ;
 11436                                  ;----------------------------------------------------------------------------
 11437                                  ;
 11438                                  
 11439                                  _$STD_AUX_OUTPUT:	;System call 4
 11440                                  
 11441 00001712 53                      	PUSH	BX
 11442 00001713 BB0300                  	MOV	BX,3
 11443 00001716 EB04                    	JMP	SHORT SENDOUT
 11444                                  
 11445                                  ;
 11446                                  ;----------------------------------------------------------------------------
 11447                                  ;
 11448                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11449                                  ;
 11450                                  ;	ENTRY	(dl) = character
 11451                                  ;	EXIT	none
 11452                                  ;	USES	all
 11453                                  ;
 11454                                  ;----------------------------------------------------------------------------
 11455                                  ;
 11456                                  
 11457                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11458                                  
 11459 00001718 53                      	PUSH	BX
 11460 00001719 BB0400                  	MOV	BX,4
 11461                                  
 11462                                  SENDOUT:
 11463 0000171C 88D0                    	MOV	AL,DL
 11464 0000171E 50                      	PUSH	AX
 11465 0000171F E83239                  	CALL	STATCHK
 11466 00001722 58                      	POP	AX
 11467 00001723 1E                      	PUSH	DS
 11468 00001724 56                      	PUSH	SI
 11469                                  LISSTRT2:
 11470 00001725 E8CDFE                  	CALL	RAWOUT2
 11471                                  TRIPOP:
 11472 00001728 5E                      	POP	SI
 11473 00001729 1F                      	POP	DS
 11474 0000172A 5B                      	POP	BX
 11475                                  SCIS_RETN:	; 20/07/2018
 11476 0000172B C3                      	RETN
 11477                                  ;
 11478                                  ;----------------------------------------------------------------------------
 11479                                  ;
 11480                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11481                                  ;
 11482                                  ;	Check console input status
 11483                                  ;
 11484                                  ;	ENTRY	none
 11485                                  ;	EXIT	AL = -1 character available, = 0 no character
 11486                                  ;	USES	all
 11487                                  ;
 11488                                  ;----------------------------------------------------------------------------
 11489                                  ;
 11490                                  
 11491                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11492                                  
 11493 0000172C E82539                  	CALL	STATCHK
 11494 0000172F B000                    	MOV	AL,0		; no xor!!
 11495                                  	;retz
 11496 00001731 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11497 00001733 0CFF                    	OR	AL,-1
 11498                                  ;SCIS_RETN:
 11499 00001735 C3                      	RETN
 11500                                  
 11501                                  ;
 11502                                  ;----------------------------------------------------------------------------
 11503                                  ;
 11504                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11505                                  ;
 11506                                  ;	Flush console input buffer and perform call in AL
 11507                                  ;
 11508                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11509                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11510                                  ;		return arguments for the fcn supplied in (AL)
 11511                                  ;	USES	all
 11512                                  ;
 11513                                  ;----------------------------------------------------------------------------
 11514                                  ;
 11515                                  
 11516                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11517                                  
 11518 00001736 50                      	PUSH	AX
 11519 00001737 52                      	PUSH	DX
 11520 00001738 31DB                    	XOR	BX,BX
 11521 0000173A E8571E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11522                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11523 0000173D 7205                    	JC	SHORT BADJFNCON
 11524 0000173F B404                    	MOV	AH,4
 11525 00001741 E8572C                  	CALL	IOFUNC
 11526                                  
 11527                                  BADJFNCON:
 11528 00001744 5A                      	POP	DX
 11529 00001745 58                      	POP	AX
 11530 00001746 88C4                    	MOV	AH,AL
 11531 00001748 3C01                    	CMP	AL,1
 11532 0000174A 7413                    	JZ	SHORT REDISPJ
 11533 0000174C 3C06                    	CMP	AL,6
 11534 0000174E 740F                    	JZ	SHORT REDISPJ
 11535 00001750 3C07                    	CMP	AL,7
 11536 00001752 740B                    	JZ	SHORT REDISPJ
 11537 00001754 3C08                    	CMP	AL,8
 11538 00001756 7407                    	JZ	SHORT REDISPJ
 11539 00001758 3C0A                    	CMP	AL,10
 11540 0000175A 7403                    	JZ	SHORT REDISPJ
 11541 0000175C B000                    	MOV	AL,0
 11542 0000175E C3                      	RETN
 11543                                  
 11544                                  REDISPJ:
 11545 0000175F FA                      	CLI
 11546                                  	;transfer REDISP
 11547 00001760 E925EC                  	JMP	REDISP
 11548                                  
 11549                                  ;============================================================================
 11550                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11551                                  ;============================================================================
 11552                                  ; 20/07/2018 - Retro DOS v3.0
 11553                                  ; 17/05/2019 - Retro DOS v4.0
 11554                                  
 11555                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11556                                  ;
 11557                                  ;	$GET_FCB_POSITION
 11558                                  ;	$FCB_DELETE
 11559                                  ;	$GET_FCB_FILE_LENGTH
 11560                                  ;	$FCB_CLOSE
 11561                                  ;	$FCB_RENAME
 11562                                  ;	SaveFCBInfo
 11563                                  ;	ResetLRU
 11564                                  ;	SetOpenAge
 11565                                  ;	LRUFCB
 11566                                  ;	FCBRegen
 11567                                  ;	BlastSFT
 11568                                  ;	CheckFCB
 11569                                  ;	SFTFromFCB
 11570                                  ;	FCBHardErr
 11571                                  ;
 11572                                  ;	Revision history:
 11573                                  ;
 11574                                  ;		Created: ARR 4 April 1983"
 11575                                  ;			 MZ  6 June  1983 completion of functions
 11576                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11577                                  ;					  times.  Change so successive closes work by
 11578                                  ;					  always returning OK.	Also, detect I/O to
 11579                                  ;					  already closed FCB and return EOF.
 11580                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11581                                  ;					  out of sft into FCB for reconnection
 11582                                  ;
 11583                                  ;		A000	 version 4.00  Jan. 1988
 11584                                  
 11585                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11586                                  ;----------------------------------------------------------------------------
 11587                                  ;
 11588                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11589                                  ;	extent and next record field and set the random record field to point
 11590                                  ;	to that record
 11591                                  ;
 11592                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11593                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11594                                  ;   Registers modified: all
 11595                                  ;
 11596                                  ;----------------------------------------------------------------------------
 11597                                  ;
 11598                                  
 11599                                  _$GET_FCB_POSITION:
 11600 00001763 E8D404                  	call	GetExtended		; point to FCB
 11601 00001766 E8A504                  	call	GetExtent		; DX:AX is current record
 11602                                  	;mov	[si+21h],ax
 11603 00001769 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11604                                  	;mov	[si+23h],dl
 11605 0000176C 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11606                                  	;cmp	word [si+0Eh],64
 11607 0000176F 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11608 00001773 7303                    	JAE	short GetFCBBye
 11609                                  	;mov	[si+24h],dh
 11610 00001775 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11611                                  GoodPath:	; 16/12/2022
 11612                                  GetFCBBye:
 11613 00001778 E9D8EE                  	jmp	FCB_RET_OK
 11614                                  
 11615                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11616                                  ;----------------------------------------------------------------------------
 11617                                  ;
 11618                                  ;**	$FCB_Delete - Delete from FCB Template
 11619                                  ;
 11620                                  ;	given an FCB, remove all directory entries in the current
 11621                                  ;	directory that have names that match the FCB's ?  marks.
 11622                                  ;
 11623                                  ;	ENTRY	(DS:DX) = address of FCB
 11624                                  ;	EXIT	entries matching the FCB are deleted
 11625                                  ;		(al) = ff iff no entries were deleted
 11626                                  ;	USES	all
 11627                                  ;
 11628                                  ;----------------------------------------------------------------------------
 11629                                  ;
 11630                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11631                                  
 11632                                  _$FCB_DELETE:		; System call 19
 11633                                  					; OpenBuf is in DOSDATA
 11634 0000177B BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11635                                  
 11636 0000177E E87652                  	call	TransFCB		; convert FCB to path
 11637 00001781 7207                    	JC	short BadPath 		; signal no deletions
 11638                                  
 11639 00001783 16                      	push	SS
 11640 00001784 1F                      	pop	DS			; SS is DOSDATA
 11641                                  
 11642 00001785 E8370D                  	call	DOS_DELETE		; wham
 11643                                  	;JC	short BadPath
 11644                                  	; 16/12/2022
 11645 00001788 73EE                    	jnc 	short GoodPath
 11646                                  ;GoodPath:
 11647                                  ;	;jmp	FCB_RET_OK		; do a good return
 11648                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11649                                  ;	jmp	short GetFCBBye
 11650                                  
 11651                                  BadPath:
 11652                                  	; Error code is in AX
 11653                                  
 11654 0000178A E9C9EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11655                                  
 11656                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11657                                  ;----------------------------------------------------------------------------
 11658                                  ;
 11659                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11660                                  ;	file in records (rounded up if partial).
 11661                                  ;
 11662                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11663                                  ;   Outputs:	Random record field updated to reflect the number of records
 11664                                  ;   Registers modified: all
 11665                                  ;
 11666                                  ;----------------------------------------------------------------------------
 11667                                  ;
 11668                                  	; 15/01/2024
 11669                                  
 11670                                  _$GET_FCB_FILE_LENGTH:
 11671                                  
 11672 0000178D E8AA04                  	call	GetExtended		; get real FCB pointer
 11673                                  					; DX points to Input FCB
 11674                                  
 11675                                  					; OpenBuf is in DOSDATA
 11676 00001790 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11677                                  
 11678 00001793 1E                      	push	ds			; save pointer to true FCB
 11679 00001794 56                      	push	si
 11680 00001795 E85F52                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11681 00001798 5E                      	pop	si
 11682 00001799 1F                      	pop	ds
 11683 0000179A 72EE                    	JC	short BadPath
 11684 0000179C 1E                      	push	ds			; save pointer
 11685 0000179D 56                      	push	si
 11686 0000179E 16                      	push	ss		
 11687 0000179F 1F                      	pop	ds
 11688 000017A0 E81A11                  	call	GET_FILE_INFO		; grab the info
 11689 000017A3 5E                      	pop	si			; get pointer back
 11690 000017A4 1F                      	pop	ds
 11691 000017A5 72E3                    	JC	short BadPath 		; invalid something
 11692                                  	; 15/01/2024
 11693                                  	;MOV	DX,BX (*)		; get high order size
 11694                                  	;MOV	AX,DI (**)		; get low order size
 11695 000017A7 89D8                    	mov	ax,bx ; hw of file size
 11696                                  	;
 11697                                  	;mov	bx,[si+0Eh]
 11698 000017A9 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11699 000017AC 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11700 000017AE 7502                    	JNZ	short GetSize 		; not empty
 11701                                  	;MOV	BX,128
 11702 000017B0 B380                    	mov	bl,128	; 15/01/2024
 11703                                  GetSize:
 11704                                  	; 15/01/2024
 11705                                  	;MOV	DI,AX			; save low order word
 11706                                  	;MOV	AX,DX			; move high order for divide
 11707                                  	;xchg	ax,dx ; (*)
 11708                                  	; ax = hw of file size
 11709                                  
 11710 000017B2 31D2                    	XOR	DX,DX			; clear out high
 11711 000017B4 F7F3                    	DIV	BX			; wham
 11712 000017B6 50                      	PUSH	AX			; save dividend
 11713 000017B7 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11714 000017B9 F7F3                    	DIV	BX			; wham
 11715 000017BB 89D1                    	MOV	CX,DX			; save remainder
 11716 000017BD 5A                      	POP	DX			; get high order dividend
 11717 000017BE E306                    	JCXZ	LengthStore		; no roundup
 11718 000017C0 83C001                  	ADD	AX,1
 11719 000017C3 83D200                  	ADC	DX,0			; 32-bit increment
 11720                                  LengthStore:
 11721                                  	;mov	[si+21h],ax
 11722 000017C6 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11723                                  	;mov	[si+23h],dl
 11724 000017C9 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11725 000017CC 08F6                    	OR	DH,DH
 11726 000017CE 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11727                                  	;mov	[si+24h],dh
 11728 000017D0 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11729                                  	; 16/12/2022
 11730                                  GoodRet:
 11731                                  	;jmp	FCB_RET_OK
 11732 000017D3 EBA3                    	jmp	short GoodPath
 11733                                  
 11734                                  ;Break <$FCB_Close - close a file>
 11735                                  ;----------------------------------------------------------------------------
 11736                                  ;
 11737                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11738                                  ;	as the FCB may be used for further I/O
 11739                                  ;
 11740                                  ;   Inputs:	DS:DX point to FCB
 11741                                  ;   Outputs:	AL = FF if file was not found on disk
 11742                                  ;   Registers modified: all
 11743                                  ;
 11744                                  ;----------------------------------------------------------------------------
 11745                                  ;
 11746                                  
 11747                                  	; 16/01/2024
 11748                                  
 11749                                  _$FCB_CLOSE:		; System call 16
 11750                                  
 11751 000017D5 30C0                    	XOR	AL,AL			; default search attributes
 11752 000017D7 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11753 000017DA 7403                    	JZ	short NoAttr		; not extended
 11754 000017DC 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11755                                  NoAttr:
 11756                                  					; SS override
 11757 000017DF 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11758 000017E3 E8C303                  	call	SFTFromFCB
 11759 000017E6 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11760                                  
 11761                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11762                                  	; there is no need to set the SFT's attribute.
 11763                                  
 11764                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11765                                  	;;; done
 11766                                  
 11767                                  	;mov	al,[es:di+4]
 11768 000017E8 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11769 000017EC 30E4                    	XOR	AH,AH
 11770 000017EE 50                      	PUSH	AX
 11771                                  
 11772                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11773                                  	;;; done
 11774                                  
 11775 000017EF E8315A                  	call	CheckShare
 11776 000017F2 7508                    	JNZ	short NoStash
 11777 000017F4 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11778                                  	;mov	[es:di+4],al
 11779 000017F8 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11780                                  NoStash:
 11781                                  
 11782                                  ; 16/01/2024
 11783                                  %if 0
 11784                                  	;mov	ax,[si+14h]
 11785                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11786                                  	;mov	[es:di+0Fh],ax
 11787                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11788                                  	;mov	ax,[si+16h]
 11789                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11790                                  	;mov	[es:di+0Dh],ax
 11791                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11792                                  	;mov	ax,[si+10h]
 11793                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11794                                  	;mov	[es:di+11h],ax
 11795                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11796                                  	;mov	ax,[si+12h]
 11797                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11798                                  	;mov	[es:di+13h],ax
 11799                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11800                                  	;or	word [es:di+5],4000h
 11801                                  	; 17/12/2022
 11802                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11803                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11804                                  %else
 11805                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11806 000017FC 1E                      	push	ds
 11807                                  	;lds	ax,[si+14h]
 11808 000017FD C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11809                                  	;mov	[es:di+0Fh],ax
 11810 00001800 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11811                                  	;mov	[es:di+0Dh],ds		
 11812 00001804 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11813 00001808 1F                      	pop	ds
 11814                                  	;lds	ax,[si+10h]
 11815 00001809 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11816                                  	;mov	[es:di+11h],ax
 11817 0000180C 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11818                                  	;mov	[es:di+13h],ds
 11819 00001810 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11820                                  	; 16/01/2024
 11821                                  	;;or	word [es:di+5], 4000h
 11822                                  	;or	word [es:di+SF_ENTRY.sf_flags], sf_close_nodate
 11823 00001814 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11824                                  %endif
 11825                                  
 11826 00001819 16                      	push	ss
 11827 0000181A 1F                      	pop	ds
 11828 0000181B E89016                  	call	DOS_CLOSE	; wham
 11829 0000181E C43E[9E05]              	LES	DI,[THISSFT]
 11830                                  
 11831                                  	;;; 9/8/86 F.C. restore SFT attribute
 11832 00001822 59                      	POP	CX
 11833                                  	;mov	[es:di+4],cl
 11834 00001823 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11835                                  	;;; 9/8/86 F.C. restore SFT attribute
 11836                                  
 11837 00001827 9C                      	PUSHF
 11838                                  	;test	word [es:di],0FFFFh
 11839                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11840                                  				; zero ref count gets blasted
 11841 00001828 26833D00                	cmp	word [ES:DI],0
 11842 0000182C 7507                    	jnz     short CloseOK
 11843 0000182E 50                      	PUSH	AX
 11844 0000182F B04D                    	MOV	AL,'M' ; 4Dh
 11845 00001831 E8F202                  	call	BlastSFT
 11846 00001834 58                      	POP	AX
 11847                                  CloseOK:
 11848 00001835 9D                      	POPF
 11849 00001836 739B                    	JNC	short GoodRet
 11850                                  	;cmp	al,6
 11851 00001838 3C06                    	CMP	AL,error_invalid_handle
 11852 0000183A 7497                    	JZ	short GoodRet
 11853                                  	;mov	al,2
 11854 0000183C B002                    	MOV	AL,error_file_not_found
 11855                                  fren90:
 11856                                  	; 16/12/2022
 11857                                  fcb_close_err:
 11858 0000183E E915EE                  	jmp	FCB_RET_ERR
 11859                                  
 11860                                  ;
 11861                                  ;----------------------------------------------------------------------------
 11862                                  ;
 11863                                  ;**	$FCB_Rename - Rename a File
 11864                                  ;
 11865                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11866                                  ;	multiple files copying from the meta characters.
 11867                                  ;
 11868                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11869                                  ;		    name of the files to be renamed. Starting at offset 11h
 11870                                  ;		    in the FCB is the destination name.
 11871                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11872                                  ;		AL = FF -> some files may have been renamed but:
 11873                                  ;			rename to existing file or source file not found
 11874                                  ;	USES	ALL
 11875                                  ;
 11876                                  ;----------------------------------------------------------------------------
 11877                                  ;
 11878                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11879                                  
 11880                                  _$FCB_RENAME:		; System call 23
 11881                                  
 11882 00001841 E8F603                  	call	GetExtended		; get pointer to real FCB
 11883 00001844 52                      	push	dx
 11884 00001845 8A04                    	MOV	AL,[SI] 		; get drive byte
 11885 00001847 83C610                  	ADD	SI,10h			; point to destination
 11886                                  
 11887                                  					; RenBuf is in DOSDATA
 11888 0000184A BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11889 0000184D FF34                    	push	word [SI]
 11890 0000184F 1E                      	push	ds
 11891                                  	;push	di			; save source pointer for TransFCB
 11892                                  	; 16/01/2024 - BugFix !
 11893 00001850 56                      	push	si
 11894 00001851 8804                    	MOV	[SI],AL			; drop in real drive
 11895 00001853 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11896 00001855 E89F51                  	call	TransFCB		; munch this pathname
 11897 00001858 5E                      	pop	si
 11898 00001859 1F                      	pop	ds	
 11899 0000185A 8F04                    	pop	WORD [SI]		; get path back
 11900 0000185C 5A                      	pop	dx			; Original FCB pointer
 11901 0000185D 72DF                    	JC	short fren90		; bad path -> error
 11902                                  
 11903                                  					; SS override for WFP_Start & Ren_WFP
 11904 0000185F 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11905 00001864 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11906                                  
 11907                                  					; OpenBuf is in DOSDATA
 11908 00001869 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11909 0000186C E88851                  	call	TransFCB		; wham
 11910                                  					; NOTE that this call is pointing
 11911                                  					;  back to the ORIGINAL FCB so
 11912                                  					;  SATTRIB gets set correctly
 11913 0000186F 72CD                    	JC	short fren90		; error
 11914 00001871 E81F0E                  	call	DOS_RENAME
 11915 00001874 72C8                    	JC	short fren90
 11916                                  	; 16/12/2022
 11917 00001876 E9DAED                  	jmp	FCB_RET_OK
 11918                                  	
 11919                                  ;	Error -
 11920                                  ;
 11921                                  ;	(al) = error code
 11922                                  
 11923                                  	; 16/12/2022
 11924                                  ;fren90:	
 11925                                  ;	;jmp	FCB_RET_ERR
 11926                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11927                                  ;	jmp	short fcb_close_err
 11928                                  
 11929                                  ;Break <Misbehavior fixers>
 11930                                  ;
 11931                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11932                                  ;   user's space so he may move them at will. Second, they have a small
 11933                                  ;   reserved area that may be used for system information. Third, there was
 11934                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11935                                  ;   usage.
 11936                                  ;
 11937                                  ;   This results in the following misbehavior:
 11938                                  ;
 11939                                  ;	infinite opens of the same file:
 11940                                  ;
 11941                                  ;	While (TRUE) {			While (TRUE) {
 11942                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11943                                  ;	    Read (FCB); 		    Write (FCB);
 11944                                  ;	    }				    }
 11945                                  ;
 11946                                  ;	infinite opens of different files:
 11947                                  ;
 11948                                  ;	While (TRUE) {			While (TRUE) {
 11949                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11950                                  ;	    Read (FCB); 		    Write (FCB);
 11951                                  ;	    }				    }
 11952                                  ;
 11953                                  ;	multiple closes of the same file:
 11954                                  ;
 11955                                  ;	FCBOpen (FCB);
 11956                                  ;	while (TRUE)
 11957                                  ;	    FCBClose (FCB);
 11958                                  ;
 11959                                  ;	I/O after closing file:
 11960                                  ;
 11961                                  ;	FCBOpen (FCB);
 11962                                  ;	while (TRUE) {
 11963                                  ;	    FCBWrite (FCB);
 11964                                  ;	    FCBClose (FCB);
 11965                                  ;	    }
 11966                                  ;
 11967                                  ;   The following is am implementation of a methodology for emulating the
 11968                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11969                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11970                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11971                                  ;   the local machine.
 11972                                  ;
 11973                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11974                                  ;   structures depending on the file itself and the state of operations of the
 11975                                  ;   OS. The information contained in this reserved field is enough to
 11976                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11977                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11978                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11979                                  ;
 11980                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11981                                  ;
 11982                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11983                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11984                                  ;   regenerated.
 11985                                  ;
 11986                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11987                                  ;   longer available. We can make up for this by using the following
 11988                                  ;   information:
 11989                                  ;
 11990                                  ;	The Drive number (from the DPB).
 11991                                  ;	The physical sector of the directory that contains the entry.
 11992                                  ;	The relative position of the entry in the sector.
 11993                                  ;	The first cluster field.
 11994                                  ;	The last used SFT.
 11995                                  ;      OR In the case of a device FCB
 11996                                  ;	The low 6 bits of sf_flags (indicating device type)
 11997                                  ;	The pointer to the device header
 11998                                  ;
 11999                                  ;   We read in the particular directory sector and examine the indicated
 12000                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 12001                                  ;
 12002                                  ;   Some key items need to be remembered:
 12003                                  ;
 12004                                  ;	Even though we are caching SFTs, they may contain useful sharing
 12005                                  ;	information. We enforce good behavior on the FCBs.
 12006                                  ;
 12007                                  ;	Network support must not treat FCBs as impacting the ref counts on
 12008                                  ;	open VCs. The VCs may be closed only at process termination.
 12009                                  ;
 12010                                  ;	If this is not an installed version of the DOS, file sharing will
 12011                                  ;	always be present.
 12012                                  ;
 12013                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 12014                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 12015                                  ;
 12016                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 12017                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 12018                                  ;	proper OI record.
 12019                                  ;
 12020                                  ;   The test bits are:
 12021                                  ;
 12022                                  ;	00 -> local file
 12023                                  ;	40 -> sharing local
 12024                                  ;	80 -> network
 12025                                  ;	C0 -> local device
 12026                                  
 12027                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 12028                                  ;----------------------------------------------------------------------------
 12029                                  ;
 12030                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 12031                                  ;	pieces of information into the FCB to allow for subsequent
 12032                                  ;	regeneration. Poke LRU also.
 12033                                  ;
 12034                                  ;   Inputs:	ThisSFT points to a complete SFT.
 12035                                  ;		DS:SI point to the FCB (not an extended one)
 12036                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 12037                                  ;		DS:SI preserved
 12038                                  ;		ES:DI point to sft
 12039                                  ;   Registers modified: All
 12040                                  ;
 12041                                  ;
 12042                                  ;----------------------------------------------------------------------------
 12043                                  ;
 12044                                  
 12045                                  	; 20/01/2024
 12046                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12047                                  
 12048                                  SaveFCBInfo:
 12049                                  
 12050 00001879 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12051 0000187E E8C9F9                  	call	IsSFTNet
 12052 00001881 740B                    	JZ	short SaveLocal		; if not network then save local info
 12053                                  ;
 12054                                  ;----- In net support -----
 12055                                  ;
 12056                                  	; 17/05/2019 - Retro DOS v4.0
 12057                                  
 12058                                  	; MSDOS 3.3
 12059                                  	;;mov	ax,[es:di+1Dh]
 12060                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12061                                  	;;mov	[si+1Ah],ax
 12062                                  	;mov	[si+fcb_net_handle],ax
 12063                                  	;push	es
 12064                                  	;push	di
 12065                                  	;;les	di,[es:di+19h]
 12066                                  	;LES	DI,[ES:DI+sf_netid]
 12067                                  	;;mov	[si+1Ch],di
 12068                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12069                                  	;;mov 	[si+1Eh],es
 12070                                  	;MOV	[SI+fcb_netID+2],ES
 12071                                  	;pop	di
 12072                                  	;pop	es
 12073                                  
 12074                                  	; MSDOS 6.0
 12075                                  	;mov	ax,[es:di+0Bh]
 12076 00001883 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12077                                  	;mov	[si+1Ch],ax
 12078 00001887 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12079                                  	
 12080                                  	;mov	bl,80h
 12081 0000188A B380                    	MOV	BL,FCBNETWORK
 12082                                  ;
 12083                                  ;----- END In net support -----
 12084                                  ;
 12085 0000188C EB63                    	jmp	SHORT SaveSFN
 12086                                  
 12087                                  SaveLocal:
 12088                                  	;IF	Installed
 12089 0000188E E89259                  	call	CheckShare
 12090                                  	;JZ	short SaveNoShare	; no sharer
 12091                                  	;JMP	short SaveShare		; sharer present
 12092                                  	; 16/12/2022
 12093                                  	; 28/07/2019
 12094 00001891 7559                    	jnz	short SaveShare
 12095                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12096                                  	;JZ	short SaveNoShare	; no sharer
 12097                                  	;JMP	short SaveShare		; sharer present
 12098                                  
 12099                                  SaveNoShare:
 12100                                  	;;test 	word [es:di+5],80h
 12101                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12102 00001893 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12103 00001898 7542                    	JNZ	short SaveNoShareDev	; Device
 12104                                  
 12105                                  	; Save no sharing local file information
 12106                                  
 12107                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12108                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12109 0000189A 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12110                                  	;mov	[si+1Dh],ax
 12111 0000189E 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12112                                  
 12113                                  	; MSDOS 6.0
 12114                                  
 12115                                  	;SR; Store high byte of directory sector
 12116                                  	;mov	ax,[es:di+1Dh]
 12117 000018A1 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12118                                  	
 12119                                  	; SR;
 12120                                  	; We have to store the read-only and archive attributes of the file.
 12121                                  	; We extract it from the SFT and store it in the top two bits of the 
 12122                                  	; sector number ( sector number == 22 bits only )
 12123                                  
 12124                                  	;mov	bl,[es:di+4]
 12125 000018A5 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12126 000018A9 88DF                    	mov	bh,bl
 12127 000018AB D0CB                    	ror	bl,1
 12128 000018AD D0E7                    	shl	bh,1
 12129 000018AF 08FB                    	or	bl,bh
 12130 000018B1 80E3C0                  	and	bl,0C0h
 12131 000018B4 08D8                    	or	al,bl
 12132                                  	;mov	[si+18h],al ; 08/11/2022
 12133 000018B6 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12134                                  
 12135                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12136                                  	;mov	al,[es:di+1Fh]
 12137 000018B9 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12138                                  	;mov	[si+1Fh],al
 12139 000018BD 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12140                                  	;mov	ax,[es:di+0Bh]
 12141 000018C0 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12142                                  	;mov	[si+1Bh],ax
 12143 000018C4 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12144 000018C7 B300                    	MOV	BL,0
 12145                                  
 12146                                  	; Create the bits field from the dirty/device bits of the flags word 
 12147                                  	; and the mode byte
 12148                                  
 12149                                  SetFCBBits:
 12150                                  	;mov	ax,[es:di+5]
 12151 000018C9 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12152 000018CD 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12153                                  	;or	al,[es:di+2]
 12154 000018CF 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12155                                  	;mov	[si+1Ah], al
 12156 000018D3 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12157                                  
 12158                                  	; MSDOS 6.0
 12159                                  	
 12160                                  	; SR;
 12161                                  	; Check if we came here for local file or device. If for local file, 
 12162                                  	; skip setting of SFT index
 12163                                  	
 12164 000018D6 08DB                    	or	bl,bl
 12165 000018D8 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12166                                  
 12167 000018DA EB15                    	JMP	short SaveSFN 		; go and save SFN
 12168                                  
 12169                                  	; Save no sharing local device information
 12170                                  
 12171                                  SaveNoShareDev:
 12172                                  	; 20/01/2024
 12173                                  	;;mov	ax,[es:di+7]
 12174                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12175                                  	;;mov	[si+1Ah],ax
 12176                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12177                                  	;;mov	ax,[es:di+9]
 12178                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12179                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12180                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12181 000018DC 06                      	push	es
 12182 000018DD 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12183 000018E1 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12184 000018E4 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12185 000018E7 07                      	pop	es
 12186                                  	
 12187                                  	;mov	bl,40h
 12188 000018E8 B340                    	MOV	BL,FCBDEVICE
 12189                                  	; 28/12/2022
 12190 000018EA EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12191                                  
 12192                                  SaveShare:
 12193                                  	;ENDIF
 12194                                  
 12195                                  ;----- In share support -----
 12196                                  
 12197                                  	;call	far [ss:ShSave]
 12198 000018EC 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12199                                  
 12200                                  ;----- end in share support -----
 12201                                  
 12202                                  	; 17/05/2019
 12203                                  
 12204                                  SaveSFN:
 12205                                  	;lea	ax,[di-6]
 12206 000018F1 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12207                                  	
 12208                                  	; Adjust for offset to table.
 12209                                  	
 12210 000018F4 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12211                                  
 12212 000018F9 53                      	push	bx			;bx = FCB type (net/Share or local)
 12213                                  	;;mov	bl,53 ; MSDOS 3.3
 12214                                  	;mov	bl,59 ; MSDOS 6.0
 12215 000018FA B33B                    	MOV	BL,SF_ENTRY.size
 12216 000018FC F6F3                    	DIV	BL
 12217                                  	;mov	[si+18h],al
 12218 000018FE 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12219 00001901 5B                      	pop	bx			;restore bx
 12220                                  
 12221                                  SaveNoSFN:
 12222                                  	;mov	ax,[es:di+5]
 12223 00001902 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12224 00001906 243F                    	AND	AL,3Fh			; get real drive
 12225 00001908 08D8                    	OR	AL,BL
 12226                                  	;mov	[si+19h],al
 12227 0000190A 884419                  	MOV	[SI+fcb_l_drive],AL
 12228                                  
 12229 0000190D 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12230 00001911 40                      	INC	AX
 12231                                  	;mov	[es:di+15h],ax
 12232 00001912 26894515                	MOV	[ES:DI+sf_LRU],AX
 12233 00001916 7506                    	JNZ	short SimpleStuff
 12234                                  	
 12235                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12236                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12237                                  	
 12238                                  	;mov	bx,15h
 12239 00001918 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12240 0000191B E80500                  	call	ResetLRU
 12241                                  
 12242                                  	; Set new LRU to AX
 12243                                  SimpleStuff:
 12244 0000191E 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12245 00001922 C3                      	retn
 12246                                  
 12247                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12248                                  ;----------------------------------------------------------------------------
 12249                                  ;
 12250                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12251                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12252                                  ;   at 0.
 12253                                  ;
 12254                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12255                                  ;		ES:DI point to SFT currently being updated
 12256                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12257                                  ;		AX has 8000h
 12258                                  ;   Registers modified: none
 12259                                  ;
 12260                                  ;----------------------------------------------------------------------------
 12261                                  ;
 12262                                  
 12263                                  	; 17/05/2019 - Retro DOS v4.0
 12264                                  ResetLRU:
 12265                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12266                                  	; DOSDATA
 12267                                  
 12268 00001923 B80080                  	MOV	AX,8000h
 12269 00001926 06                      	push	es
 12270 00001927 57                      	push	di
 12271                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12272 00001928 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12273                                  	;mov	cx,[es:di+4]
 12274 0000192D 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12275                                  	;lea	di,[di+6]
 12276 00001931 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12277                                  ovScan:
 12278 00001934 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12279 00001937 7703                    	JA	short ovLoop
 12280 00001939 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12281                                  ovLoop:
 12282                                  	;;add	di,53	; MSDOS 3.3
 12283                                  	;add	di,59	; MSDOS 6.0	
 12284 0000193C 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12285 0000193F E2F3                    	LOOP	ovScan
 12286 00001941 5F                      	pop	di
 12287 00001942 07                      	pop	es
 12288 00001943 268901                  	MOV	[ES:DI+BX],AX
 12289 00001946 C3                      	retn
 12290                                  
 12291                                  ;IF  0  ; We dont need this routine any more.
 12292                                  ;
 12293                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12294                                  ;----------------------------------------------------------------------------
 12295                                  ;
 12296                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12297                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12298                                  ;   count here and fill in the appropriate field.
 12299                                  ;
 12300                                  ;   Inputs:	ES:DI point to SFT
 12301                                  ;   Outputs:	ES:DI has the open age field filled in.
 12302                                  ;		If open age has wraparound, we will have subtracted 8000h
 12303                                  ;		    from all open ages.
 12304                                  ;   Registers modified: AX
 12305                                  ;
 12306                                  ;----------------------------------------------------------------------------
 12307                                  ;
 12308                                  ;SetOpenAge:
 12309                                  ;	; 20/07/2018 - Retro DOS v3.0
 12310                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12311                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12312                                  ;
 12313                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12314                                  ;
 12315                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12316                                  ;	INC	AX
 12317                                  ;	;mov	[es:di+17h],ax
 12318                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12319                                  ;	JNZ	short SetDone
 12320                                  ;	;mov	bx,17h
 12321                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12322                                  ;	call	ResetLRU
 12323                                  ;SetDone:
 12324                                  ;	MOV	[CS:OpenLRU],AX
 12325                                  ;	retn
 12326                                  ;
 12327                                  ;ENDIF	; SetOpenAge no longer needed
 12328                                  
 12329                                  ; 21/07/2018 - Retro DOS v3.0
 12330                                  ; LRUFCB for MSDOS 6.0 !
 12331                                  
 12332                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12333                                  ;----------------------------------------------------------------------------
 12334                                  ;
 12335                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12336                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12337                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12338                                  ;
 12339                                  ;   Inputs:	none
 12340                                  ;   Outputs:	ES:DI point to SFT
 12341                                  ;		ThisSFT points to SFT
 12342                                  ;		SFT is zeroed
 12343                                  ;		Carry set of closes failed
 12344                                  ;   Registers modified: none
 12345                                  ;
 12346                                  ;----------------------------------------------------------------------------
 12347                                  ;
 12348                                  ; MSDOS 6.0
 12349                                  ;IF 0	; rewritten this routine
 12350                                  ;
 12351                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12352                                  ;	call	save_world
 12353                                  ;	
 12354                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12355                                  ; to find the lease recently used one that is younger than the open age.  We
 12356                                  ; operate be scanning the list n times finding the least age that is greater
 12357                                  ; or equal to the previous minimum age.
 12358                                  ;
 12359                                  ;   BP is the count of times we need to go through this loop.
 12360                                  ;   AX is the current acceptable minimum age to consider
 12361                                  ;
 12362                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12363                                  ;	XOR	AX,AX			; low = 0;
 12364                                  ;
 12365                                  ; If we've scanned the table n times, then we are done.
 12366                                  ;
 12367                                  ;lru1:
 12368                                  ;	CMP	bp,0			; while (k--) {
 12369                                  ;	JZ	short lru75
 12370                                  ;	DEC	bp
 12371                                  ;
 12372                                  ; Set up for scan.
 12373                                  ;
 12374                                  ;   AX is the minimum age for consideration
 12375                                  ;   BX is the minimum age found during the scan
 12376                                  ;   SI is the position of the entry that corresponds to BX
 12377                                  ;
 12378                                  ;	MOV	BX,-1			;     min = 0xffff;
 12379                                  ;	MOV	si,BX			;     pos = 0xffff;
 12380                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12381                                  ;	;mov	cx,[es:di+4]
 12382                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12383                                  ;	;lea	di,[di+6]
 12384                                  ;	LEA	DI,[DI+SFT.SFTable]
 12385                                  ;
 12386                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12387                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12388                                  ; are done.  In both cases, we use the found entry.
 12389                                  ;
 12390                                  ;lru2:
 12391                                  ;	cmp	word [es:di],0
 12392                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12393                                  ;	jz	short lru25
 12394                                  ;	;cmp	word [es:di],-1
 12395                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12396                                  ;	cmp	word [es:di],sf_busy
 12397                                  ;	jnz	short lru3
 12398                                  ;
 12399                                  ; The entry is usable without further scan.  Go and use it.
 12400                                  ;
 12401                                  ;lru25:
 12402                                  ;	MOV	si,DI			;	      pos = i;
 12403                                  ;	JMP	short lru11		;	      goto got;
 12404                                  ;
 12405                                  ; See if the entry is for the network or for the sharer.
 12406                                  ;
 12407                                  ;  If for the sharer or network then
 12408                                  ;	if the age < current minimum AND >= allowed minimum then
 12409                                  ;	    this entry becomes current minimum
 12410                                  ;
 12411                                  ;lru3:
 12412                                  ;	;test	word [es:di+5],8000h
 12413                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12414                                  ;					;	  if (!net[i]
 12415                                  ;	JNZ	short lru35
 12416                                  ;if installed
 12417                                  ;	call	CheckShare		;		&& !sharing)
 12418                                  ;	JZ	short lru5		;	  else
 12419                                  ;ENDIF
 12420                                  ;
 12421                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12422                                  ; current minimum.
 12423                                  ;
 12424                                  ;lru35:
 12425                                  ;	;mov	dx,[es:di+17h]
 12426                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12427                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12428                                  ;	JB	short lru5
 12429                                  ;	CMP	DX,BX
 12430                                  ;	JAE	short lru5		;	      age[i] < min) {
 12431                                  ;
 12432                                  ; entry is new minimum.  Remember his age.
 12433                                  ;
 12434                                  ;	mov	bx,DX			;	      min = age[i];
 12435                                  ;	mov	si,di			;	      pos = i;
 12436                                  ;
 12437                                  ; End of loop.	gp back for more
 12438                                  ;
 12439                                  ;lru5:
 12440                                  ;	;add	di,53
 12441                                  ;	add	di,SF_ENTRY.size
 12442                                  ;	loop	lru2			;	      }
 12443                                  ;
 12444                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12445                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12446                                  ; complete.  Go find LRU.
 12447                                  ;
 12448                                  ;lru6:	
 12449                                  ;	cmp	si,-1			; position not -1?
 12450                                  ;	jz	short lru75		; no, done with everything
 12451                                  ;	lea	ax,[bx+1]		; set new threshold age
 12452                                  ;	jmp	short lru1		; go and loop for more
 12453                                  ;lru65:	
 12454                                  ;	stc
 12455                                  ;	jmp	short LRUDead		;	  return -1;
 12456                                  ;
 12457                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12458                                  ; network entry. We now make a second pass through to find the LRU entry
 12459                                  ; that is local-no-share or has age >= AX
 12460                                  ;
 12461                                  ;lru75:
 12462                                  ;	mov	bx,-1			; min = 0xffff;
 12463                                  ;	mov	si,bx			; pos = 0xffff;
 12464                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12465                                  ;	;mov	cx,[es:di+4]
 12466                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12467                                  ;	;lea	di,[di+6]
 12468                                  ;	LEA	DI,[DI+SFT.SFTable]
 12469                                  ;
 12470                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12471                                  ; then check for lru.
 12472                                  ;
 12473                                  ;lru8:
 12474                                  ;	;test	word [es:di+5],8000h
 12475                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12476                                  ;	jnz	short lru85		; is for network, go check age
 12477                                  ;	call	CheckShare		; sharer here?
 12478                                  ;	jz	short lru86		; no, go check lru
 12479                                  ;
 12480                                  ; Network or sharer.  Check age
 12481                                  ;
 12482                                  ;lru85:
 12483                                  ;	;cmp	[es:di+17h],ax
 12484                                  ;	cmp	[es:di+sf_OpenAge],ax
 12485                                  ;	jb	short lru9		; age is before threshold, skip it
 12486                                  ;
 12487                                  ; Check LRU
 12488                                  ;
 12489                                  ;lru86:
 12490                                  ;	;cmp	[es:di+15h],bx
 12491                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12492                                  ;	jae	short lru9		; no, skip this
 12493                                  ;	mov	si,di			; remember position
 12494                                  ;	;mov	bx,[es:di+15h]
 12495                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12496                                  ;
 12497                                  ; Done with this entry, go back for more.
 12498                                  ;
 12499                                  ;lru9:
 12500                                  ;	;add	di, 53
 12501                                  ;	add	di,SF_ENTRY.size
 12502                                  ;	loop	lru8
 12503                                  ;
 12504                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12505                                  ; out. The conditions here are:
 12506                                  ;
 12507                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12508                                  ;
 12509                                  ;lru10:
 12510                                  ;	cmp	si,-1			; if no one f
 12511                                  ;	jz	short lru65		;     return -1;
 12512                                  ;lru11:
 12513                                  ;	mov	di,si
 12514                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12515                                  ;	MOV	[CS:THISSFT+2],ES
 12516                                  ;
 12517                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12518                                  ; is 0.
 12519                                  ;
 12520                                  ;	;test	word [es:di+5],8000h
 12521                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12522                                  ;	JNZ	short LRUClose
 12523                                  ;IF INSTALLED
 12524                                  ;	call	CheckShare
 12525                                  ;	JZ	short LRUDone
 12526                                  ;ENDIF
 12527                                  ;
 12528                                  ; Repeat close until ref count is 0
 12529                                  ;
 12530                                  ;LRUClose:
 12531                                  ;	push	ss
 12532                                  ;	pop	ds
 12533                                  ;	LES	DI,[THISSFT]
 12534                                  ;	cmp     word [es:di],0
 12535                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12536                                  ;	JZ	short LRUDone 		; nope, all done
 12537                                  ;	call	DOS_CLOSE
 12538                                  ;	jnc	short LRUClose		; no error => clean up
 12539                                  ;	;cmp	al,6
 12540                                  ;	cmp	al,error_invalid_handle
 12541                                  ;	jz	short LRUClose
 12542                                  ;	stc
 12543                                  ;	JMP	short LRUDead
 12544                                  ;LRUDone:
 12545                                  ;	XOR	AL,AL
 12546                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12547                                  ;
 12548                                  ;LRUDead:
 12549                                  ;	call	restore_world
 12550                                  ;	LES     DI,[CS:THISSFT]
 12551                                  ;	jnc	short LRUFCB_retn
 12552                                  ;LRUFCB_err:
 12553                                  ;	; mov	al, 23h	
 12554                                  ;	MOV	AL,error_FCB_unavailable
 12555                                  ;LRUFCB_retn:	
 12556                                  ;	retn:
 12557                                  ;
 12558                                  ;ENDIF	; LRUFCB has been rewritten below.
 12559                                  
 12560                                  ; 17/05/2019 - Retro DOS v4.0
 12561                                  ; LRUFCB for MSDOS 6.0 !
 12562                                  ;----------------------------------------------------------------------------
 12563                                  ;
 12564                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12565                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12566                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12567                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12568                                  ; optimize regeneration operations by keeping track of the current local
 12569                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12570                                  ; local SFT in the SFT Block.
 12571                                  ;
 12572                                  ; Inputs: al = 0 => Regenerate SFT operation
 12573                                  ;	    = 1 => Allocate new SFT for Open/Create
 12574                                  ;
 12575                                  ; Outputs: Carry clear
 12576                                  ;	 	es:di = Address of allocated SFT
 12577                                  ;	  	ThisSFT = Address of allocated SFT
 12578                                  ;
 12579                                  ;	  carry set if closes of net/Share files failed 
 12580                                  ;		al = error_FCB_unavailable
 12581                                  ;
 12582                                  ; Registers affected: None
 12583                                  ;
 12584                                  ;----------------------------------------------------------------------------
 12585                                  
 12586                                  ;LruFCB	PROC	NEAR
 12587                                  LRUFCB:
 12588                                  	; 17/05/2019 - Retro DOS v4.0
 12589                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12590                                  
 12591                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12592                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12593                                  
 12594                                  	; 20/01/2024
 12595                                  
 12596 00001947 06                      	push	es	; * (MSDOS 6.21)
 12597                                  	
 12598 00001948 E817EB                  	call	save_world
 12599                                  	
 12600                                  	;getdseg <ds>		;ds = DOSDATA
 12601 0000194B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12602                                  
 12603 00001950 08C0                    	or	al,al		;Check if regenerate allocation
 12604 00001952 7516                    	jnz	short lru1	;Try to find SFT to use
 12605                                  
 12606                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12607                                  	; local SFT, just return that SFT to reuse
 12608                                  
 12609                                  	; 20/01/2024
 12610                                  	;mov	di,[LocalSFT]
 12611                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12612                                  	;jz	short lru1	;invalid local SFT, find one
 12613                                  
 12614                                  	; We have found a valid local SFT. Recycle this SFT
 12615                                  
 12616 00001954 C43E[4410]              	les	di,[LocalSFT]
 12617                                  
 12618                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12619 00001958 8CC1                    	mov	cx,es
 12620 0000195A 09F9                    	or	cx,di		; is address == 0?
 12621 0000195C 740C                    	jz	short lru1	; invalid local SFT, find one
 12622                                  
 12623                                  gotlocalSFT:
 12624 0000195E 893E[9E05]              	mov	[THISSFT],di
 12625 00001962 8C06[A005]              	mov	[THISSFT+2],es
 12626 00001966 F8                      	clc
 12627 00001967 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12628                                  
 12629                                  lru1:
 12630 0000196A C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12631                                  	;mov	cx,[es:di+4]
 12632 0000196E 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12633                                  	;lea	di,[di+6]
 12634 00001972 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12635                                  
 12636                                  	; We scan through all the SFTs scanning for a free one. It also 
 12637                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12638                                  	; bx = min. LRU for local SFTs
 12639                                  	; si = pos. of local SFT with min. LRU
 12640                                  	; dx = min. LRU for net/Share SFTs
 12641                                  	; bp = pos. of net/Share SFT with min. LRU
 12642                                  
 12643 00001975 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12644 00001978 89DE                    	mov	si,bx
 12645 0000197A 89DA                    	mov	dx,bx
 12646 0000197C 89DD                    	mov	bp,bx
 12647                                  
 12648                                  findSFT:
 12649                                  	;See if this SFT is a free one. If so, return it
 12650 0000197E 26830D00                	or	word [es:di],0
 12651                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12652 00001982 744C                    	jz	short gotSFT	;yes, SFT is free
 12653                                  	;;cmp	word [es:di],-1
 12654                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12655 00001984 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12656 00001988 7446                    	jz	short gotSFT	;no, can use it
 12657                                  
 12658                                  	; Check if this SFT is local and store its address in LocalSFT. Can be
 12659                                  	; used for a later regen.
 12660                                  
 12661                                  	; 16/12/2022
 12662                                  	; 08/11/2022
 12663                                  	;test	byte [es:di+6],80h
 12664 0000198A 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12665                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12666                                  	;;test	word [es:di+5],8000h
 12667                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12668 0000198F 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12669                                  
 12670                                  ;IF installed
 12671 00001991 E88F58                  	call	CheckShare	;Share present?
 12672                                  ;ENDIF
 12673 00001994 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12674                                  
 12675                                  	;Local SFT, register its address
 12676                                  
 12677                                  	; !!HACK!!!
 12678                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12679                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12680                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12681                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12682                                  	; out the code that previously existed at label 'gotSFT'
 12683                                  
 12684                                  hackpoint:
 12685 00001996 893E[4410]              	mov	[LocalSFT],di
 12686 0000199A 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12687                                  
 12688 0000199E 08C0                    	or	al,al		;Is operation = REGEN?
 12689 000019A0 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12690                                  
 12691                                  	;Get LRU for local files
 12692                                  	
 12693                                  	;cmp	[es:di+15h],bx
 12694 000019A2 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12695 000019A6 7306                    	jae	short lru4	;no, skip 
 12696                                  
 12697                                  	;mov	bx,[es:di+15h]
 12698 000019A8 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12699 000019AC 89FE                    	mov	si,di		;store SFT position
 12700                                  lru4:
 12701                                  	;add	di,59
 12702 000019AE 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12703 000019B1 E2CB                    	loop	findSFT
 12704                                  	
 12705                                  	; 20/01/2024
 12706 000019B3 49                      	dec	cx ; -1
 12707                                  
 12708                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12709                                  	; available, we will reuse it instead of net/Share LRU
 12710                                  
 12711 000019B4 89F7                    	mov	di,si
 12712                                  	;cmp	si,-1		;local SFT available?
 12713 000019B6 39CE                    	cmp	si,cx ; 20/01/2024
 12714 000019B8 7516                    	jnz	short gotSFT	;yes, return it
 12715                                  
 12716                                  	;No local SFT, see if we got a net/Share SFT
 12717                                  
 12718 000019BA 89EF                    	mov	di,bp
 12719                                  
 12720 000019BC 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12721                                  	;cmp	bp,-1		;net/Share SFT available?
 12722 000019BE 752D                    	jnz	short gotnetSFT	;yes, return it
 12723                                  noSFT:
 12724                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12725                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12726                                  	; count is not maintained properly.
 12727                                  
 12728 000019C0 EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12729                                  
 12730                                  	; Handle the LRU for net/Share SFTs
 12731                                  lru5:
 12732                                  	;cmp	[es:di+15h],dx
 12733 000019C2 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12734 000019C6 73E6                    	jae	short lru4	;no, skip
 12735                                  
 12736                                  	;mov	dx,[es:di+15h]
 12737 000019C8 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12738                                  
 12739 000019CC 89FD                    	mov	bp,di		;store SFT position
 12740 000019CE EBDE                    	jmp	short lru4	;continue with next SFT
 12741                                  
 12742                                  gotSFT:
 12743 000019D0 08C0                    	or	al,al
 12744 000019D2 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12745                                  
 12746                                  	; HACK!!!
 12747                                  	; The code here differs from the code at 'hackpoint' only in the
 12748                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12749                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12750                                  	; has been commented out below and replaced by the code just above.
 12751                                  
 12752                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12753                                  ;
 12754                                  ;	or	al,al		  ;Regen?
 12755                                  ;	jnz	short notlocaluse ;yes, register it and return
 12756                                  ;
 12757                                  ;Register this SFT as a local one
 12758                                  ;
 12759                                  ;	mov	[LocalSFT],di
 12760                                  ;	mov	[LocalSFT+2],es
 12761                                  ;	jmp	gotlocalSFT	;return to caller
 12762                                  ;
 12763                                  ;notlocaluse:
 12764                                  
 12765                                  	; The caller is probably going to use this SFT for a net/Share file.
 12766                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12767                                  	; does not really know whether it is a local file or not. We
 12768                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12769                                  	; registered as a local SFT that can be recycled.
 12770                                  
 12771 000019D4 8CC0                    	mov	ax,es
 12772 000019D6 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12773 000019DA 750E                    	jne	short notinvalid
 12774 000019DC 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12775                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12776                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12777 000019E0 7508                    	jne	short notinvalid
 12778                                  zerolocalSFT:	
 12779 000019E2 31C0                    	xor	ax,ax ; 0
 12780 000019E4 A3[4410]                	mov	[LocalSFT],ax
 12781 000019E7 A3[4610]                	mov	[LocalSFT+2],ax
 12782                                  	
 12783                                  notinvalid:
 12784 000019EA E971FF                  	jmp	gotlocalSFT
 12785                                  
 12786                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12787                                  	; Invalidate this variable i.e LocalSFT = NULL
 12788                                  
 12789                                  ;zerolocalSFT:
 12790                                  	;xor	ax,ax ; 0
 12791                                  	;mov	[LocalSFT],ax
 12792                                  	;mov	[LocalSFT+2],ax
 12793                                  	;
 12794                                  	;jmp	gotlocalSFT
 12795                                  
 12796                                  gotnetSFT:
 12797                                  	; We have an SFT that is currently net/Share. If it is going to be
 12798                                  	; used for a regen, we know it has to be a local SFT. Update the
 12799                                  	; LocalSFT variable
 12800                                  
 12801 000019ED 08C0                    	or	al,al
 12802 000019EF 7508                    	jnz	short closenet
 12803                                  
 12804 000019F1 893E[4410]              	mov	[LocalSFT],di
 12805 000019F5 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12806                                  closenet:
 12807 000019F9 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12808 000019FD 8C06[A005]              	mov	[THISSFT+2],es
 12809                                  
 12810                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12811                                  	; count is 0.
 12812                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12813                                  	; recycled -- no need to check for this.
 12814                                  
 12815                                  LRUClose:
 12816 00001A01 26833D00                	cmp	word [es:di],0
 12817                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12818 00001A05 740C                    	jz	short LRUDone	; nope, all done
 12819                                  
 12820 00001A07 E8A414                  	call	DOS_CLOSE
 12821 00001A0A 73F5                    	jnc	short LRUClose	; no error => clean up
 12822                                  
 12823                                  	; Bugbug: I dont know why we are trying to close after we get an
 12824                                  	; error closing. Seems like we could have a potential infinite loop
 12825                                  	; here. This has to be verified.
 12826                                  
 12827 00001A0C 3C06                    	cmp	al,error_invalid_handle ; 6
 12828 00001A0E 74F1                    	je	short LRUClose
 12829                                  errorbadSFT:
 12830 00001A10 F9                      	stc
 12831 00001A11 EB05                    	JMP	short LRUDead
 12832                                  LRUDone:
 12833 00001A13 30C0                    	XOR	AL,AL
 12834 00001A15 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12835                                  
 12836                                  LRUDead:
 12837 00001A18 E830EA                  	call	restore_world		; use macro
 12838                                  	
 12839 00001A1B 07                      	pop	es ; * (MSDOS 6.21)
 12840                                  
 12841                                  	;getdseg <es>
 12842 00001A1C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12843 00001A21 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12844                                  
 12845                                  	;;retnc
 12846                                  	;jc	short LruFCB_err
 12847                                  	;retn
 12848                                  
 12849                                  	; 16/12/2022
 12850                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12851 00001A26 7302                    	jnc	short LruFCB_retn
 12852                                  	;jc	short LruFCB_err
 12853                                  	;retn
 12854                                  		
 12855                                  LruFCB_err:
 12856 00001A28 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12857                                  LruFCB_retn:
 12858 00001A2A C3                      	retn
 12859                                  	
 12860                                  ;LruFCB	ENDP
 12861                                  
 12862                                  ; 17/05/2019 - Retro DOS v4.0
 12863                                  
 12864                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12865                                  
 12866                                  ; --------------------------------------------------------------------------
 12867                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12868                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12869                                  ; to copy the name to different destinations
 12870                                  ;
 12871                                  ; Inputs: ds:si = source string
 12872                                  ;	 es:di = destination string
 12873                                  ;	 cx = length of string
 12874                                  ;
 12875                                  ; Outputs: String copied to destination
 12876                                  ;
 12877                                  ; Registers affected: cx,di,si
 12878                                  ; --------------------------------------------------------------------------
 12879                                  
 12880                                  RegenCopyName:
 12881                                  CopyName:
 12882 00001A2B AC                      	lodsb			;load character
 12883 00001A2C E80835                  	call	UCase		; convert char to upper case
 12884                                  StuffChar2:
 12885 00001A2F AA                      	STOSB			;store converted character
 12886 00001A30 E2F9                    	LOOP	CopyName	;
 12887                                  DoneName:
 12888 00001A32 C3                      	retn
 12889                                  
 12890                                  ; --------------------------------------------------------------------------
 12891                                  
 12892                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12893                                  FCBRegen:
 12894                                  	; called from SFTFromFCB. SS already DOSDATA
 12895                                  
 12896                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12897                                  	; we do not fill, size we do no fill, position we do not fill,
 12898                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12899                                  
 12900                                  	;mov	al,[si+19h]
 12901 00001A33 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12902                                  
 12903                                  	; We discriminate based on the first two bits in the reserved field.
 12904                                  	
 12905                                  	;test	al,80h
 12906 00001A36 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12907 00001A38 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12908                                  
 12909                                  	; The FCB is for a network or a sharing based system. At this point 
 12910                                  	; we have already closed the SFT for this guy and reconnection is 
 12911                                  	; impossible.
 12912                                  	;
 12913                                  	; Remember that he may have given us a FCB with bogus information in
 12914                                  	; it. Check to see if sharing is present or if the redir is present.
 12915                                  	; If either is around, presume that we have cycled out the FCB and 
 12916                                  	; give the hard error. Otherwise, just return with carry set.
 12917                                  
 12918 00001A3A E8E657                  	call	CheckShare		; test for sharer
 12919 00001A3D 7509                    	JNZ	short RegenFail		; yep, fail this.
 12920                                  	
 12921                                  	;mov	ax,1100h
 12922 00001A3F B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12923 00001A42 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12924                                  			; Return: AL = 00h  not installed, OK to install
 12925                                  			; 01h  not installed, not OK to install
 12926                                  			; FFh  installed
 12927 00001A44 08C0                    	OR	AL,AL			; is it there?
 12928 00001A46 740C                    	JZ	short RegenDead		; no, just fail the operation
 12929                                  RegenFail:
 12930                                  	; 17/05/2019 - Retro DOS v4.0
 12931                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12932 00001A48 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12933                                  
 12934                                  	;cmp	ah,10h
 12935 00001A4C 80FC10                  	cmp	AH,FCB_CLOSE
 12936 00001A4F 7403                    	jz	short RegenDead
 12937 00001A51 E88B01                  	call	FCBHardErr		; massive hard error.
 12938                                  RegenDead:
 12939 00001A54 F9                      	STC				; carry set
 12940                                  FCBRegen_retn:
 12941 00001A55 C3                      	retn
 12942                                  
 12943                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12944                                  	; so fail the operation.
 12945                                  
 12946                                  RegenNoSharing:
 12947 00001A56 E8CA57                  	call	CheckShare		; Sharing around?
 12948 00001A59 75ED                    	JNZ	short RegenFail
 12949                                  	
 12950                                  	; Find an SFT for this guy.
 12951                                  	
 12952                                  	; 17/05/2019 - Retro DOS v4.0
 12953                                  
 12954                                  	; MSDOS 3.3
 12955                                  	;call	LRUFCB
 12956                                  	;jc	short FCBRegen_retn
 12957                                  	
 12958                                  	; MSDOS 6.0
 12959 00001A5B 50                      	push	ax
 12960 00001A5C B000                    	mov	al,0			;indicate it is a regen operation
 12961 00001A5E E8E6FE                  	call	LRUFCB
 12962 00001A61 58                      	pop	ax
 12963 00001A62 72F1                    	jc	short FCBRegen_retn
 12964                                  
 12965                                  	;mov	word [es:di+2],8002h
 12966 00001A64 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12967 00001A6A 243F                    	AND	AL,3Fh			; get drive number for flags
 12968 00001A6C 98                      	CBW
 12969                                  	;or	ax,4000h
 12970 00001A6D 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12971                                  
 12972                                  	; The bits field consists of the upper two bits (dirty and device) 
 12973                                  	; from the SFT and the low 4 bits from the open mode.
 12974                                  
 12975                                  	;mov	cl,[si+1Ah]
 12976 00001A70 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12977 00001A73 88CD                    	MOV	CH,CL
 12978 00001A75 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12979 00001A78 08E8                    	OR	AL,CH
 12980                                  	;and	cl,0Fh
 12981 00001A7A 80E10F                  	AND	CL,access_mask		; get the mode bits
 12982                                  	;mov	[es:di+2],cl
 12983 00001A7D 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12984                                  	;mov	[es:di+5],ax
 12985 00001A81 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12986                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12987 00001A85 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12988                                  	;mov	[es:di+31h],ax
 12989 00001A89 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12990 00001A8D 1E                      	push	ds
 12991 00001A8E 56                      	push	si
 12992 00001A8F 06                      	push	es
 12993 00001A90 57                      	push	di
 12994 00001A91 16                      	push	ss
 12995 00001A92 07                      	pop	es
 12996 00001A93 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12997                                  
 12998 00001A96 B90800                  	MOV	CX,8
 12999 00001A99 46                      	INC	SI			; Skip past drive byte to name in FCB
 13000                                  
 13001                                  	; MSDOS 3.3
 13002                                  ;RegenCopyName:
 13003                                  	;lodsb
 13004                                  	;call	UCase
 13005                                  	;stosb
 13006                                  	;loop	RegenCopyName
 13007                                  
 13008                                  	; MSDOS 6.0
 13009 00001A9A E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 13010                                  
 13011 00001A9D 16                      	push	ss	; SS is DOSDATA
 13012 00001A9E 1F                      	pop	ds
 13013                                  
 13014                                  	;mov	byte [ATTRIB],16h
 13015 00001A9F C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 13016                                  					; Must set this to something interesting
 13017                                  					; to call DEVNAME.
 13018 00001AA4 E83326                  	call	DEVNAME 		; check for device
 13019 00001AA7 5E                      	pop	si
 13020 00001AA8 07                      	pop	es
 13021 00001AA9 5E                      	pop	si
 13022 00001AAA 1F                      	pop	ds
 13023 00001AAB 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 13024                                  
 13025                                  	; Device found. We can ignore disk-specific info
 13026                                  
 13027                                  	;mov	[es:di+5],bh
 13028 00001AAD 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 13029                                  	;mov	byte [es:di+4],0
 13030 00001AB1 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 13031                                  					; SS override
 13032                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 13033 00001AB6 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 13034                                  	;mov	[es:di+7],si
 13035 00001ABB 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13036                                  	;mov	[es:di+9],ds
 13037 00001ABF 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13038 00001AC3 C3                      	retn				; carry is clear
 13039                                  
 13040                                  RegenDeadJ:
 13041 00001AC4 EB8E                    	JMP	short RegenDead
 13042                                  
 13043                                  	; File found. Just copy in the remaining pieces.
 13044                                  
 13045                                  RegenFileNoSharing:
 13046                                  	;mov	ax,[es:di+5]
 13047 00001AC6 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13048 00001ACA 83E03F                  	AND	AX,03Fh
 13049 00001ACD 1E                      	push	ds
 13050 00001ACE 56                      	push	si
 13051 00001ACF E8DE4D                  	call	FIND_DPB
 13052                                  	;mov	[es:di+7],si
 13053 00001AD2 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13054                                  	;mov	[es:di+9],ds
 13055 00001AD6 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13056 00001ADA 5E                      	pop	si
 13057 00001ADB 1F                      	pop	ds
 13058 00001ADC 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13059                                  					; indicator was bogus
 13060                                  	;mov	ax,[si+1Dh]
 13061 00001ADE 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13062                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13063                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13064 00001AE1 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13065                                  
 13066                                  	; MSDOS 6.0
 13067                                  
 13068                                  	; SR;
 13069                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13070                                  	; number
 13071                                  
 13072                                  	;mov	al,[si+18h]
 13073 00001AE5 8A4418                  	mov	al,[si+fcb_sfn]
 13074 00001AE8 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13075 00001AEA 88C4                    	mov	ah,al
 13076 00001AEC D0C4                    	rol	ah,1
 13077 00001AEE D0E8                    	shr	al,1
 13078 00001AF0 08E0                    	or	al,ah
 13079 00001AF2 243F                    	and	al,03Fh		;mask off unused bits
 13080                                  	;mov	[es:di+4],al
 13081 00001AF4 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13082                                  
 13083                                  	; SR;
 13084                                  	; Update the higher word of the directory sector from the FCB
 13085                                  
 13086                                  	;;mov	al,[si+18h]
 13087 00001AF8 8A4418                  	mov	al,[si+fcb_sfn]
 13088 00001AFB 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13089 00001AFD 28E4                    	sub	ah,ah
 13090                                  	;mov	[es:di+1Dh],ax
 13091 00001AFF 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13092                                  
 13093                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13094                                  	;mov	ax,[si+1Bh]
 13095 00001B03 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13096                                  	;mov	[es:di+0Bh],ax
 13097 00001B06 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13098                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13099                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13100 00001B0A 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13101                                  	;mov	al,[si+1Fh]
 13102 00001B0E 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13103                                  	;mov  	[es:di+1Fh],al
 13104 00001B11 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13105                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13106 00001B15 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13107                                  					; Existing FCB entries would be
 13108                                  					; flushed unnecessarily because of
 13109                                  					; check in CheckFCB of the ref_count.
 13110                                  					; July 22/85 - BAS
 13111                                  	;lea	si,[si+1]
 13112 00001B18 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13113                                  	;lea	di,[di+20h]
 13114 00001B1B 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13115                                  	;mov	cx,11
 13116 00001B1E B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13117                                  	
 13118                                  	; MSDOS 6.0
 13119 00001B21 E807FF                  	call	RegenCopyName	;copy name to SFT 
 13120                                  	
 13121                                  	; MSDOS 3.3
 13122                                  ;RegenCopyName2:
 13123                                  	;lodsb
 13124                                  	;call    UCase
 13125                                  	;stosb
 13126                                  	;loop    RegenCopyName2
 13127                                  
 13128 00001B24 F8                      	clc
 13129 00001B25 C3                      	retn
 13130                                  
 13131                                  ; 17/05/2019 - Retro DOS v4.0
 13132                                  
 13133                                  ;**	BlastSFT - FIll SFT with Garbage
 13134                                  ; --------------------------------------------------------------------------
 13135                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13136                                  ;	various garbage values to put into the SFT.  I don't know why,
 13137                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13138                                  ;	necessary to show that the SFT is free after filling it.
 13139                                  ;
 13140                                  ;	ENTRY	(es:di) = address of SFT
 13141                                  ;		(al) = fill character
 13142                                  ;	EXIT	(ax) = -1
 13143                                  ;		'C' clear
 13144                                  ;	USES	AX, CX, Flags
 13145                                  
 13146                                  BlastSFT:
 13147 00001B26 57                      	push	di
 13148                                  	;mov	cx,53 ; MSDOS 3.3
 13149                                  	;mov	cx,59 ; MSDOS 6.0
 13150 00001B27 B93B00                  	mov	cx,SF_ENTRY.size
 13151 00001B2A F3AA                    	rep	stosb
 13152 00001B2C 5F                      	pop	di
 13153 00001B2D 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13154 00001B2F 268905                  	mov	[es:di],ax
 13155                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13156                                  	;mov	[es:di+15h],ax
 13157 00001B32 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13158 00001B36 48                      	dec	ax	; -1					    ;
 13159                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13160 00001B37 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13161                                  BlastSFT_retn:
 13162 00001B3B C3                      	retn				; return with 'C' clear     ;
 13163                                  
 13164                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13165                                  ; --------------------------------------------------------------------------
 13166                                  ;
 13167                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13168                                  ;   regenerated.
 13169                                  ;
 13170                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13171                                  ;		AL is SFT index
 13172                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13173                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13174                                  ;   Registers modified: AX and BX
 13175                                  ;
 13176                                  ; --------------------------------------------------------------------------
 13177                                  
 13178                                  	; 21/01/2024
 13179                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13180                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13181                                  CheckFCB:
 13182                                  		
 13183                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13184                                  
 13185                                  	; MSDOS 3.3
 13186                                  
 13187                                  	; LES	DI,[CS:SFTFCB]
 13188                                  
 13189                                  	; MSDOS 6.0
 13190                                  	
 13191                                  	; SR;
 13192                                  	; We check if the given FCB is for a local file. If so, we return a 
 13193                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13194                                  
 13195                                  	;test	byte [si+19h],0C0h
 13196 00001B3C F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13197 00001B40 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13198 00001B42 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13199                                  
 13200                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13201                                  	;cmp	[es:di+4],al
 13202 00001B47 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13203 00001B4B 723C                    	JC	short BadSFT
 13204                                  	;;mov	bl,53 ; MSDOS 3.3
 13205                                  	;mov	bl,59 ; MSDOS 6.0
 13206 00001B4D B33B                    	MOV	BL,SF_ENTRY.size
 13207 00001B4F F6E3                    	MUL	BL
 13208                                  	;lea	di,[di+6]
 13209 00001B51 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13210 00001B54 01C7                    	ADD	DI,AX
 13211                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13212 00001B56 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13213                                  	;cmp	[es:di+31h],ax
 13214 00001B5A 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13215 00001B5E 7529                    	JNZ	short BadSFT		; must match process
 13216 00001B60 26833D00                	cmp	word [es:di],0
 13217                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13218 00001B64 7423                    	JZ	short BadSFT		; must also be in use
 13219                                  	;mov	al,[si+19h]
 13220 00001B66 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13221                                  	;test	al,80h
 13222 00001B69 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13223 00001B6B 7428                    	JZ	short CheckNoShare	; No. try local or device
 13224                                  
 13225                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13226                                  	; FCBSHARE is a superset of FCBNETWORK.
 13227                                  
 13228 00001B6D 50                      	PUSH	AX
 13229                                  	;and	al,0C0h
 13230 00001B6E 24C0                    	AND	AL,FCBMASK
 13231                                  	;cmp	al,0C0h
 13232 00001B70 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13233 00001B72 58                      	POP	AX
 13234 00001B73 7516                    	JNZ	short CheckNet		; yes
 13235                                  ;
 13236                                  ;----- In share support -----
 13237                                  ;
 13238                                  	;call	far [cs:JShare+(11*4)]
 13239 00001B75 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13240 00001B7A 720D                    	JC	short BadSFT
 13241                                  
 13242                                  ; 21/01/2024
 13243                                  %if 0
 13244                                  	JMP	SHORT CheckD
 13245                                  ;
 13246                                  ;----- End in share support -----
 13247                                  ;
 13248                                  	; 09/11/2022
 13249                                  	; (There is not any procedure/sub
 13250                                  	;  which calls or jumps to CheckFirClus here)
 13251                                  	;;;
 13252                                  CheckFirClus:
 13253                                  	;cmp     bx,[es:di+0Bh]
 13254                                  	; 07/12/2022
 13255                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13256                                  	JNZ	short BadSFT
 13257                                  	;;;
 13258                                  %endif
 13259                                  
 13260                                  CheckD: 
 13261 00001B7C 243F                    	AND	AL,3Fh
 13262                                  	;mov	ah,[es:di+5]
 13263 00001B7E 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13264 00001B82 80E43F                  	AND	AH,3Fh
 13265 00001B85 38C4                    	CMP	AH,AL
 13266                                  	; 16/12/2022
 13267 00001B87 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13268                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13269                                  	;jnz	short BadSFT
 13270                                  ;CheckD_retn:
 13271                                  	;retn
 13272                                  BadSFT: 
 13273 00001B89 F9                      	STC
 13274 00001B8A C3                      	retn
 13275                                  				
 13276                                  CheckNet:
 13277                                  	; 17/05/2019 - Retro DOS v4.0
 13278                                  	
 13279                                  ;----- In net support -----
 13280                                  
 13281                                  	; MSDOS 3.3
 13282                                  	;;mov	ax,[si+1Ah]
 13283                                  	;mov	ax,[si+fcb_net_handle]
 13284                                  	;;cmp	ax,[es:di+1Dh]
 13285                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13286                                  	;jnz	short BadSFT
 13287                                  	;;cmp	ax,[es:di+19h]
 13288                                  	;cmp	ax,[ES:DI+sf_netid]
 13289                                  	;jnz     short BadSFT
 13290                                  	;;mov	ax,[si+1Eh]
 13291                                  	;mov	ax,[si+fcb_l_attr]
 13292                                  	;;cmp	ax,[es:di+1Bh]
 13293                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13294                                  	;jnz     short BadSFT
 13295                                  
 13296                                  	; MSDOS 6.0
 13297                                  	;mov	ax,[si+1Ch]
 13298 00001B8B 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13299                                  	; 09/11/2022
 13300                                  	;cmp	ax,[es:di+0Bh] 
 13301 00001B8E 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13302 00001B92 75F5                    	JNZ	short BadSFT
 13303                                  
 13304                                  ;----- END In net support -----
 13305                                  
 13306                                  CheckNet_retn:
 13307 00001B94 C3                      	retn
 13308                                  
 13309                                  CheckNoShare:
 13310                                  
 13311                                  ; 16/12/2022
 13312                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13313                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13314                                  ;	;test	al,40h
 13315                                  ;	test	AL,FCBDEVICE		; Device?
 13316                                  ;	;jnz	short $+2 ; 09/11/2022
 13317                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13318                                  
 13319                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13320                                  	;;mov	bx,[si+1Dh]
 13321                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13322                                  	;;cmp	bx,[es:di+1Dh]
 13323                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13324                                  	;jnz	short BadSFT
 13325                                  	;;mov	bl,[si+1Fh]
 13326                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13327                                  	;;cmp	bl,[es:di+1Fh]
 13328                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13329                                  	;jnz	short BadSFT
 13330                                  	;;mov	bl,[si+1Ah]
 13331                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13332                                  	;;mov	bh,[es:di+5]
 13333                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13334                                  	;xor	bh,bl
 13335                                  	;and	bh,0C0h
 13336                                  	;jnz	short BadSFT
 13337                                  	;;xor	bl,[es:di+2]
 13338                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13339                                  	;and	bl,0Fh
 13340                                  	;jnz	short BadSFT
 13341                                  	;push	di
 13342                                  	;push	si
 13343                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13344                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13345                                  	;;lea	si,[si+1]
 13346                                  	;LEA	SI,[SI+SYS_FCB.name]
 13347                                  	;;mov	cx,11
 13348                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13349                                  	;repe	cmpsb
 13350                                  	;pop	si
 13351                                  	;pop	di
 13352                                  	;jnz	short BadSFT
 13353                                  	;;mov	bx,[si+1Bh]
 13354                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13355                                  	;jmp	short CheckFirClus
 13356                                  
 13357                                  	; MSDOS 6.0
 13358                                  
 13359                                  	; SR;
 13360                                  	; The code below to match a local FCB with its SFT can no longer be
 13361                                  	; used. We just return a no-match status. This check is done right
 13362                                  	; at the top.
 13363                                  
 13364                                  CheckNoShareDev:
 13365                                  	;mov	bx,[si+1Ah]
 13366 00001B95 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13367                                  	;cmp	bx,[es:di+7]
 13368 00001B98 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13369 00001B9C 75EB                    	JNZ	short BadSFT
 13370                                  	;mov	bx,[si+1Ch]
 13371 00001B9E 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13372                                  	;cmp	bx,[es:di+9]
 13373 00001BA1 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13374 00001BA5 75E2                    	JNZ	short BadSFT
 13375 00001BA7 EBD3                    	JMP	short CheckD
 13376                                  
 13377                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13378                                  ;----------------------------------------------------------------------------
 13379                                  ;
 13380                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13381                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13382                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13383                                  ;	with PID
 13384                                  ;
 13385                                  ;   Inputs:	DS:SI point to FCB
 13386                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13387                                  ;		Carry clear -> OK ES:DI -> SFT
 13388                                  ;		Carry set -> error in ax
 13389                                  ;   Registers modified: ES,DI, AX
 13390                                  ;
 13391                                  ;----------------------------------------------------------------------------
 13392                                  
 13393                                  SFTFromFCB:
 13394                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13395                                  
 13396                                  	; 17/05/2019 - Retro DOS v4.0
 13397                                  
 13398 00001BA9 50                      	push	ax
 13399 00001BAA 53                      	push	bx
 13400                                  	;mov	al,[si+18h]
 13401 00001BAB 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13402 00001BAE E88BFF                  	call	CheckFCB
 13403 00001BB1 5B                      	pop	bx
 13404 00001BB2 58                      	pop	ax
 13405                                  	;MOV	[CS:THISSFT],DI		; SS override
 13406                                  	;MOV	[CS:THISSFT+2],ES
 13407 00001BB3 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13408 00001BB8 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13409 00001BBD 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13410                                  	
 13411                                  	; 09/11/2022 (MSDOS 5.0)
 13412                                  	; 31/05/2019
 13413 00001BBF 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13414 00001BC0 E89FE8                  	call	save_world
 13415 00001BC3 E86DFE                  	call	FCBRegen
 13416 00001BC6 E882E8                  	call	restore_world		; use macro restore world
 13417 00001BC9 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13418                                  
 13419                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13420 00001BCA 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13421 00001BCE 72C4                    	jc	short CheckNet_retn
 13422                                  
 13423                                  Set_SFT: 
 13424                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13425 00001BD0 36C43E[9E05]            	les	di,[ss:THISSFT]
 13426                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13427 00001BD5 36FF36[3C03]            	push	word [ss:PROC_ID]
 13428                                  	;pop	word [es:di+31h]
 13429 00001BDA 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13430 00001BDE C3                      	retn				; carry is clear
 13431                                  
 13432                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13433                                  ;----------------------------------------------------------------------------
 13434                                  ;
 13435                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13436                                  ;	unavailable FCB.
 13437                                  ;
 13438                                  ;   Inputs:	none.
 13439                                  ;   Outputs:	none.
 13440                                  ;   Registers modified: all
 13441                                  ;
 13442                                  ;----------------------------------------------------------------------------
 13443                                  
 13444                                  FCBHardErr:
 13445                                  	; 17/05/2019 - Retro DOS v4.0
 13446 00001BDF 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13447                                  	;
 13448                                  	;mov	ax,23h
 13449 00001BE4 B82300                  	MOV	AX,error_FCB_unavailable
 13450                                  	;;mov	byte [cs:ALLOWED],8
 13451                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13452 00001BE7 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13453                                  	
 13454                                  	;LES	BP,[CS:THISDPB]
 13455 00001BED 26C42E[8A05]            	les	bp,[es:THISDPB]
 13456                                  	
 13457 00001BF2 BF0100                  	MOV	DI,1			; Fake some registers
 13458 00001BF5 89F9                    	MOV	CX,DI
 13459                                  	;mov	dx,[es:bp+0Bh]
 13460 00001BF7 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13461 00001BFB E8F335                  	call	HARDERR
 13462 00001BFE F9                      	STC
 13463 00001BFF C3                      	retn
 13464                                  
 13465                                  ;============================================================================
 13466                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13467                                  ;============================================================================
 13468                                  ; 21/07/2018 - Retro DOS v3.0
 13469                                  ; 17/05/2019 - Retro DOS v4.0
 13470                                  
 13471                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13472                                  ;
 13473                                  ;	GetRR
 13474                                  ;	GetExtent
 13475                                  ;	SetExtent
 13476                                  ;	GetExtended
 13477                                  ;	GetRecSize
 13478                                  ;	FCBIO
 13479                                  ;	$FCB_OPEN
 13480                                  ;	$FCB_CREATE
 13481                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13482                                  ;	$FCB_RANDOM_READ_BLOCK
 13483                                  ;	$FCB_SEQ_READ
 13484                                  ;	$FCB_SEQ_WRITE
 13485                                  ;	$FCB_RANDOM_READ
 13486                                  ;	$FCB_RANDOM_WRITE
 13487                                  ;
 13488                                  ;	Revision history:
 13489                                  ;
 13490                                  ;		Created: ARR 4 April 1983
 13491                                  ;			 MZ  6 June  1983 completion of functions
 13492                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13493                                  ;				  times.  Change so successive closes work by
 13494                                  ;				  always returning OK.	Also, detect I/O to
 13495                                  ;				  already closed FCB and return EOF.
 13496                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13497                                  ;				  out of sft into FCB for reconnection
 13498                                  ;
 13499                                  ;	    A000   version 4.00	Jan. 1988
 13500                                  
 13501                                  ; Defintions for FCBOp flags
 13502                                  
 13503                                  RANDOM	equ 2				; random operation
 13504                                  FCBREAD equ 4				; doing a read
 13505                                  BLOCK	equ 8				; doing a block I/O
 13506                                  
 13507                                  ;Break <GetRR - return the random record field in DX:AX>
 13508                                  ;---------------------------------------------------------------------------
 13509                                  ;
 13510                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13511                                  ;	from the FCB pointed to by DS:SI
 13512                                  ;
 13513                                  ;   Inputs:	DS:SI point to an FCB
 13514                                  ;		BX has record size
 13515                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13516                                  ;   Registers modified: none
 13517                                  ;---------------------------------------------------------------------------
 13518                                  
 13519                                  GetRR:
 13520                                  	;mov	ax,[si+21h]
 13521 00001C00 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13522                                  	;mov	dx,[si+23h]
 13523 00001C03 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13524 00001C06 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13525 00001C09 7202                    	JB	short GetRRBye
 13526                                  GetExtent_bye:	; 21/01/2024
 13527 00001C0B 30F6                    	XOR	DH,DH
 13528                                  GetRRBye:
 13529 00001C0D C3                      	retn
 13530                                  
 13531                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13532                                  ;---------------------------------------------------------------------------
 13533                                  ;
 13534                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13535                                  ;	NR fields in the FCB.
 13536                                  ;
 13537                                  ;   Inputs:	DS:SI - point to FCB
 13538                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13539                                  ;   Registers modified: none
 13540                                  ;---------------------------------------------------------------------------
 13541                                  
 13542                                  GetExtent:
 13543                                  	;mov	al,[si+20h]
 13544 00001C0E 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13545                                  	;mov	dx,[si+0Ch]
 13546 00001C11 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13547 00001C14 D0E0                    	SHL	AL,1
 13548 00001C16 D1EA                    	SHR	DX,1
 13549 00001C18 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13550 00001C1A 88D4                    	MOV	AH,DL
 13551 00001C1C 88F2                    	MOV	DL,DH
 13552                                  	; 21/01/2024
 13553                                  	;XOR	DH,DH
 13554                                  	;retn
 13555 00001C1E EBEB                    	jmp	short GetExtent_bye
 13556                                  
 13557                                  ;Break <SetExtent - update the extent/NR field>
 13558                                  ;---------------------------------------------------------------------------
 13559                                  ;
 13560                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13561                                  ;	fields
 13562                                  ;
 13563                                  ;   Inputs:	DS:SI point to FCB
 13564                                  ;		DX:AX is a record location in file
 13565                                  ;   Outputs:	Extent/NR fields are filled in
 13566                                  ;   Registers modified: CX
 13567                                  ;---------------------------------------------------------------------------
 13568                                  
 13569                                  SetExtent:
 13570 00001C20 50                      	push	ax
 13571 00001C21 52                      	push	dx
 13572 00001C22 89C1                    	MOV	CX,AX
 13573 00001C24 247F                    	AND	AL,7FH			; next rec field
 13574                                  	;mov	[si+20h],al
 13575 00001C26 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13576 00001C29 80E180                  	AND	CL,80H			; save upper bit
 13577 00001C2C D1E1                    	SHL	CX,1
 13578 00001C2E D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13579 00001C30 88E8                    	MOV	AL,CH
 13580 00001C32 88D4                    	MOV	AH,DL
 13581                                  	;mov	[si+0Ch], ax
 13582 00001C34 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13583 00001C37 5A                      	pop	dx
 13584 00001C38 58                      	pop	ax
 13585 00001C39 C3                      	retn
 13586                                  
 13587                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13588                                  ;---------------------------------------------------------------------------
 13589                                  ;
 13590                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13591                                  ;
 13592                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13593                                  ;   Outputs:	DS:SI point to the FCB part
 13594                                  ;		zeroflag set if not extended fcb
 13595                                  ;   Registers modified: SI
 13596                                  ;---------------------------------------------------------------------------
 13597                                  
 13598                                  GetExtended:
 13599 00001C3A 89D6                    	MOV	SI,DX			; point to Something
 13600 00001C3C 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13601 00001C3F 7503                    	JNZ	short GetBye		; not there
 13602 00001C41 83C607                  	ADD	SI,7			; point to FCB
 13603                                  GetBye:
 13604 00001C44 39D6                    	CMP	SI,DX			; set condition codes
 13605                                  getextd_retn:
 13606 00001C46 C3                      	retn
 13607                                  
 13608                                  ;Break <GetRecSize - return in BX the FCB record size>
 13609                                  ;---------------------------------------------------------------------------
 13610                                  ;
 13611                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13612                                  ;
 13613                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13614                                  ;   Outputs:	BX contains the record size
 13615                                  ;   Registers modified: None
 13616                                  ;---------------------------------------------------------------------------
 13617                                  
 13618                                  	; 22/01/2024
 13619                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13620                                  GetRecSize:
 13621                                  	;mov	bx,[si+0Eh]
 13622 00001C47 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13623 00001C4A 09DB                    	OR	BX,BX			; is it nul?
 13624                                  	;jz	short getextd_retn
 13625                                  	; 22/01/2024 (BugFix)
 13626 00001C4C 75F8                    	jnz	short getextd_retn
 13627                                  	;MOV	BX,128			; use default size
 13628 00001C4E B380                    	mov	bl,128
 13629                                  	;mov	[si+0Eh],bx
 13630 00001C50 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13631 00001C53 C3                      	retn
 13632                                  ; 23/01/2024 - Retro DOS v5.0
 13633                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13634                                  ; 23/01/2024 - Retro DOS v4.2
 13635                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13636                                  ; 23/01/2024 - Retro DOS v4.1
 13637                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13638                                  
 13639                                  ; 22/07/2018 - Retro DOS v3.0
 13640                                  
 13641                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13642                                  ;----------------------------------------------------------------------------
 13643                                  ;
 13644                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13645                                  ;	and write a number of blocks from it.
 13646                                  ;
 13647                                  ;   Inputs:	DS:DX point to an FCB
 13648                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13649                                  ;		AL <> 0 Not enough room on disk for the output
 13650                                  ;
 13651                                  ;----------------------------------------------------------------------------
 13652                                  
 13653                                  _$FCB_RANDOM_WRITE_BLOCK:
 13654                                  	;mov	AL,0Ah
 13655 00001C54 B00A                    	MOV	AL,RANDOM+BLOCK
 13656 00001C56 EB12                    	JMP	short FCBIO	; 23/01/2024
 13657                                  
 13658                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13659                                  ;----------------------------------------------------------------------------
 13660                                  ;
 13661                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13662                                  ;	and read a number of blocks from it.
 13663                                  ;
 13664                                  ;   Inputs:	DS:DX point to an FCB
 13665                                  ;   Outputs:	AL = error codes defined above
 13666                                  ;
 13667                                  ;----------------------------------------------------------------------------
 13668                                  
 13669                                  _$FCB_RANDOM_READ_BLOCK:
 13670                                  	;mov	AL,0Eh
 13671 00001C58 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13672 00001C5A EB0E                    	JMP	short FCBIO	; 23/01/2024
 13673                                  
 13674                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13675                                  ;----------------------------------------------------------------------------
 13676                                  ;
 13677                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13678                                  ;	memory
 13679                                  ;
 13680                                  ;   Inputs:	DS:DX point to an FCB
 13681                                  ;   Outputs:	AL = error codes defined above
 13682                                  ;
 13683                                  ;----------------------------------------------------------------------------
 13684                                  
 13685                                  _$FCB_SEQ_READ:
 13686                                  	;mov	AL,4
 13687 00001C5C B004                    	MOV	AL,FCBREAD
 13688 00001C5E EB0A                    	JMP	short FCBIO	; 23/01/2024
 13689                                  
 13690                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13691                                  ;----------------------------------------------------------------------------
 13692                                  ;
 13693                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13694                                  ;	file
 13695                                  ;
 13696                                  ;   Inputs:	DS:DX point to an FCB
 13697                                  ;   Outputs:	AL = error codes defined above
 13698                                  ;
 13699                                  ;----------------------------------------------------------------------------
 13700                                  
 13701                                  _$FCB_SEQ_WRITE:
 13702 00001C60 B000                    	MOV	AL,0
 13703 00001C62 EB06                    	JMP	short FCBIO	; 23/01/2024
 13704                                  
 13705                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13706                                  ;----------------------------------------------------------------------------
 13707                                  ;
 13708                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13709                                  ;	record from it.
 13710                                  ;
 13711                                  ;   Inputs:	DS:DX point to an FCB
 13712                                  ;   Outputs:	AL = error codes defined above
 13713                                  ;
 13714                                  ;----------------------------------------------------------------------------
 13715                                  
 13716                                  _$FCB_RANDOM_READ:
 13717                                  	;mov	AL,6
 13718 00001C64 B006                    	MOV	AL,RANDOM+FCBREAD
 13719                                  	; 23/01/2024
 13720                                  	;jmp	FCBIO 		; single block
 13721 00001C66 EB02                    	jmp	short FCBIO
 13722                                  
 13723                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13724                                  ;----------------------------------------------------------------------------
 13725                                  ;
 13726                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13727                                  ;	a record to it.
 13728                                  ;
 13729                                  ;   Inputs:	DS:DX point to an FCB
 13730                                  ;   Outputs:	AL = error codes defined above
 13731                                  ;
 13732                                  ;----------------------------------------------------------------------------
 13733                                  
 13734                                  _$FCB_RANDOM_WRITE:
 13735                                  	;mov	AL,2
 13736 00001C68 B002                    	MOV	AL,RANDOM
 13737                                  	; 23/01/2024
 13738                                  	;;jmp	FCBIO
 13739                                  	;jmp	short FCBIO
 13740                                  
 13741                                  ;BREAK <FCBIO - do internal FCB I/O>
 13742                                  ;---------------------------------------------------------------------------
 13743                                  ;
 13744                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13745                                  ;
 13746                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13747                                  ;		DS:DX point to FCB
 13748                                  ;		CX may have count of number of records to xfer
 13749                                  ;   Outputs:	AL has error code
 13750                                  ;   Registers modified: all
 13751                                  ;---------------------------------------------------------------------------
 13752                                  
 13753                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13754                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13755                                  
 13756                                  	; 23/01/2024
 13757                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13758                                  
 13759                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13760                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13761                                  
 13762                                  FCBIO:
 13763                                  
 13764                                  FEOF	EQU	1
 13765                                  FTRIM	EQU	2
 13766                                  
 13767                                  %define	FCBErr	byte [bp-1]  ; byte
 13768                                  %define	cRec	word [bp-3]  ; word
 13769                                  ;%define RecPos	word [bp-7]  ; dword
 13770                                  %define RecPosL	word [bp-7]  ; word
 13771                                  %define RecPosH	word [bp-5]  ; word
 13772                                  %define	RecSize	word [bp-9]  ; word
 13773                                  ;%define bPos	word [bp-13] ; dword
 13774                                  %define bPosL	word [bp-13] ; word
 13775                                  %define bPosH	word [bp-11] ; word
 13776                                  %define cByte	word [bp-15] ; word
 13777                                  %define cResult word [bp-17] ; word
 13778                                  %define	cRecRes	word [bp-19] ; word
 13779                                  %define	FCBOp	byte [bp-20] ; byte
 13780                                  ; 23/01/2024
 13781                                  %define bPos bp-13
 13782                                  
 13783                                  	;Enter
 13784                                  
 13785 00001C6A 55                      	push	bp
 13786 00001C6B 89E5                    	mov	bp,sp
 13787 00001C6D 83EC14                  	sub	sp,20
 13788                                  	;mov	[bp-20],al
 13789 00001C70 8846EC                  	MOV	FCBOp,AL
 13790                                  	;mov	byte [bp-1],0
 13791 00001C73 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13792 00001C77 E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13793                                  	;test	byte [bp-20],8
 13794 00001C7A F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13795 00001C7E 7503                    	JNZ	short GetPos
 13796 00001C80 B90100                  	MOV	CX,1			;	cRec = 1;
 13797                                  GetPos:
 13798                                  	;mov	[bp-3],cx
 13799 00001C83 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13800 00001C86 E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13801 00001C89 E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13802                                  	;mov	[bp-9],bx
 13803 00001C8C 895EF7                  	MOV	RecSize,BX
 13804                                  	;test	byte [bp-20],2
 13805 00001C8F F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13806 00001C93 7403                    	JZ	short GetRec
 13807 00001C95 E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13808                                  GetRec:
 13809                                  	;mov	[bp-7],ax
 13810 00001C98 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13811                                  	;mov	[bp-5],dx
 13812 00001C9B 8956FB                  	MOV	RecPosH,DX
 13813 00001C9E E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13814                                  	;mov	ax,[bp-5]
 13815 00001CA1 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13816 00001CA4 F7E3                    	MUL	BX
 13817 00001CA6 89C7                    	MOV	DI,AX
 13818                                  	;mov	ax,[bp-7]
 13819 00001CA8 8B46F9                  	MOV	AX,RecPosL
 13820 00001CAB F7E3                    	MUL	BX
 13821 00001CAD 01FA                    	ADD	DX,DI
 13822                                  	;mov	[bp-13],ax
 13823 00001CAF 8946F3                  	MOV	bPosL,AX
 13824                                  	;mov	[bp-11],dx
 13825 00001CB2 8956F5                  	MOV	bPosH,DX
 13826                                  	;mov	ax,[bp-3]
 13827 00001CB5 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13828 00001CB8 F7E3                    	MUL	BX
 13829                                  	;mov	[bp-15],ax
 13830 00001CBA 8946F1                  	MOV	cByte,AX
 13831                                  
 13832                                  ;hkn; 	SS override
 13833 00001CBD 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13834 00001CC2 83D200                  	ADC	DX,0
 13835 00001CC5 7419                    	JZ	short DoOper
 13836                                  	;mov	byte [bp-1],2
 13837 00001CC7 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13838                                  
 13839                                  ;hkn; 	SS override
 13840 00001CCB 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13841 00001CCF F7D8                    	NEG	AX
 13842 00001CD1 7501                    	JNZ	short DoDiv
 13843 00001CD3 48                      	DEC	AX
 13844                                  DoDiv:
 13845 00001CD4 31D2                    	XOR	DX,DX
 13846 00001CD6 F7F3                    	DIV	BX
 13847                                  	;mov	[bp-3],ax
 13848 00001CD8 8946FD                  	MOV	cRec,AX
 13849 00001CDB F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13850                                  	;mov	[bp-15],ax
 13851 00001CDD 8946F1                  	MOV	cByte,AX		;	}
 13852                                  DoOper:
 13853 00001CE0 31DB                    	XOR	BX,BX
 13854                                  	;mov	[bp-17],bx
 13855 00001CE2 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13856                                  	;cmp	[bp-15],bx
 13857 00001CE5 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13858 00001CE8 7506                    	JNZ	short DoGetExt
 13859                                  	;test	byte [bp-1],2
 13860 00001CEA F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13861                                  	;JZ	short DoGetExt
 13862                                  	;JMP	short SkipOp
 13863                                  	; 16/12/2022
 13864 00001CEE 7572                    	jnz	short SkipOp
 13865                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13866                                  	;JZ	short DoGetExt
 13867                                  	;JMP	short SkipOp
 13868                                  DoGetExt:
 13869 00001CF0 E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13870 00001CF3 730F                    	JNC	short ContinueOp
 13871                                  FCBDeath:
 13872 00001CF5 E85EE9                  	call	FCB_RET_ERR		; signal error, map for extended
 13873                                  	;mov	word [bp-19],0
 13874 00001CF8 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13875                                  	;mov	byte [bp-1],1
 13876 00001CFD C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13877 00001D01 E9EB00                  	JMP	FCBSave 		; bam!
 13878                                  ContinueOp:
 13879                                  	; 23/01/2024
 13880                                  	; (PCDOS 7.1 IBMDOS.COM)
 13881                                  	;
 13882                                  	;;mov	ax,[si+10h]
 13883                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13884                                  	;;mov	[es:di+11h],ax
 13885                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13886                                  	;;mov	ax,[si+12h]
 13887                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13888                                  	;;mov	[es:di+13h],ax
 13889                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13890                                  	;;;
 13891 00001D04 1E                      	push	ds
 13892 00001D05 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13893 00001D08 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13894 00001D0C 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13895 00001D10 C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13896 00001D13 8CDA                    	mov	dx,ds
 13897 00001D15 1F                      	pop	ds
 13898                                  	;;;
 13899                                  	;;mov	ax,[bp-13]
 13900                                  	;MOV	AX,bPosL
 13901                                  	;;mov	dx,[bp-11]
 13902                                  	;MOV	DX,bPosH
 13903                                  
 13904                                  	;mov	[es:di+15h],ax
 13905 00001D16 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13906                                  	;xchg	dx,[es:di+17h]
 13907 00001D1A 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13908 00001D1E 52                      	PUSH	DX			; save away Open age.
 13909                                  	;mov	cx,[bp-15]
 13910 00001D1F 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13911                                  
 13912                                  ;hkn; DOS_Read is in DOSCODE
 13913 00001D22 BF[4232]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13914                                  	;test	byte [bp-20],4
 13915 00001D25 F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13916 00001D29 7503                    	JNZ	short DoContext
 13917                                  
 13918                                  ;hkn; DOS_Write is in DOSCODE
 13919 00001D2B BF[4234]                	MOV	DI,DOS_WRITE
 13920                                  DoContext:
 13921 00001D2E 55                      	push	bp
 13922 00001D2F 1E                      	push	ds
 13923 00001D30 56                      	push	si
 13924                                  
 13925                                  ;hkn; SS is DOSDATA
 13926 00001D31 16                      	push	ss
 13927 00001D32 1F                      	pop	ds
 13928                                  
 13929                                  ;; Fix for disk full
 13930 00001D33 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13931                                  	
 13932 00001D35 5E                      	pop	si
 13933 00001D36 1F                      	pop	ds
 13934 00001D37 5D                      	pop	bp
 13935 00001D38 72BB                    	JC	short FCBDeath
 13936                                  	
 13937 00001D3A 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13938 00001D40 740A                    	JZ	short NODSKFULL
 13939 00001D42 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13940                                  
 13941                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13942                                  	;mov	byte [bp-1],1 
 13943 00001D48 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13944                                  
 13945                                  	; 23/01/2024
 13946                                  	; (PCDOS 7.1 IBMDOS.COM)
 13947                                  	;;mov	byte [bp-1],1 
 13948                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13949                                  
 13950                                  NODSKFULL:
 13951                                  ;; Fix for disk full
 13952                                  	;mov	[bp-17],cx
 13953 00001D4C 894EEF                  	MOV	cResult,CX
 13954 00001D4F E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13955                                  	;pop	word [es:di+17h]	
 13956 00001D52 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13957                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13958                                  
 13959                                  	; 23/01/2024
 13960                                  	; (PCDOS 7.1 IBMDOS.COM)
 13961                                  	;
 13962                                  	;;mov	ax,[es:di+11h]
 13963                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13964                                  	;;mov	[si+10h],ax
 13965                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13966                                  	;;mov	ax,[es:di+13h]
 13967                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13968                                  	;;mov	[si+12h],ax
 13969                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13970                                  	;;;
 13971 00001D56 06                      	push	es
 13972 00001D57 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13973 00001D5B 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13974 00001D5E 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13975 00001D61 07                      	pop	es
 13976                                  	;;;
 13977                                  					;	}
 13978                                  SkipOp:
 13979                                  	;mov	ax,[bp-17]
 13980 00001D62 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13981 00001D65 31D2                    	XOR	DX,DX
 13982                                  	;div	word [bp-9]
 13983 00001D67 F776F7                  	DIV	RecSize
 13984                                  	;mov	[bp-19],ax
 13985 00001D6A 8946ED                  	MOV	cRecRes,AX
 13986                                  	;add	[bp-7],ax
 13987 00001D6D 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13988                                  	;adc	word [bp-5],0
 13989 00001D70 8356FB00                	ADC	RecPosH,0
 13990                                  
 13991                                  ; If we have not gotten the expected number of records, we signal an EOF
 13992                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13993                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13994                                  ; do we.
 13995                                  
 13996                                  	;cmp	ax,[bp-3]
 13997 00001D74 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13998 00001D77 7411                    	JZ	short TryBlank
 13999                                  	;test	byte [bp-20],4
 14000 00001D79 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 14001 00001D7D 7507                    	JNZ	short SetEOF
 14002                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14003                                  	; MSDOS 3.3
 14004                                  	;;test	word [es:di+5],80h
 14005                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14006                                  	;JNZ	short TryBlank
 14007                                  	; MSDOS 5.0 & MSDOS 6.0
 14008                                  	;test	byte [es:di+5],80h
 14009 00001D7F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 14010 00001D84 7504                    	jnz	short TryBlank
 14011                                  
 14012                                  SetEOF:
 14013                                  	;mov	byte [bp-1],1
 14014 00001D86 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 14015                                  TryBlank:				;
 14016 00001D8A 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 14017 00001D8C 7426                    	JZ	short SetExt
 14018                                  	;add	word [bp-7],1
 14019 00001D8E 8346F901                	ADD	RecPosL,1		;	RecPos++;
 14020                                  	;adc	word [bp-5],0
 14021 00001D92 8356FB00                	ADC	RecPosH,0
 14022                                  	;test	byte [bp-20],4
 14023 00001D96 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 14024 00001D9A 7418                    	JZ	short SetExt
 14025                                  	;inc	word [bp-19]
 14026 00001D9C FF46ED                  	INC	cRecRes 		;	cRecRes++;
 14027                                  	;mov	byte [bp-1],3
 14028 00001D9F C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 14029                                  	;mov	cx,[bp-9]
 14030 00001DA3 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 14031 00001DA6 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 14032 00001DA8 30C0                    	XOR	AL,AL
 14033                                  ;hkn; 	SS override
 14034 00001DAA 36C43E[2C03]            	les     di,[ss:DMAADD]
 14035                                  	;add	di,[bp-17]
 14036 00001DAF 037EEF                  	ADD	DI,cResult
 14037 00001DB2 F3AA                    	REP	STOSB			;   }	}
 14038                                  SetExt:
 14039                                  	;mov	dx,[bp-5]
 14040 00001DB4 8B56FB                  	MOV	DX,RecPosH
 14041                                  	;mov	ax,[bp-7]
 14042 00001DB7 8B46F9                  	MOV	AX,RecPosL
 14043                                  	;test	byte [bp-20],2
 14044 00001DBA F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14045 00001DBE 7406                    	JZ	short DoSetExt
 14046                                  	;test	byte [bp-20],8
 14047 00001DC0 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14048 00001DC4 7403                    	JZ	short TrySetRR
 14049                                  DoSetExt:
 14050 00001DC6 E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14051                                  TrySetRR:
 14052                                  	;test	byte [bp-20],8
 14053 00001DC9 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14054 00001DCD 740F                    	JZ	short TryReturn
 14055                                  	;mov	[si+21h],ax
 14056 00001DCF 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14057                                  	;mov	[si+23h],dl
 14058 00001DD2 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14059                                  	;cmp	word [si+0Eh],64
 14060 00001DD5 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14061 00001DD9 7303                    	JAE	short TryReturn
 14062                                  	;mov	[si+24h],dh
 14063 00001DDB 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14064                                  TryReturn: 
 14065                                  	;test	byte [bp-20],4
 14066 00001DDE F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14067 00001DE2 750B                    	JNZ	short FCBSave
 14068 00001DE4 1E                      	push	ds			;	FCB->FDate = date;
 14069 00001DE5 E8FEEC                  	call	DATE16			;	FCB->FTime = time;
 14070 00001DE8 1F                      	pop	ds
 14071                                  	;mov	[si+14h],ax
 14072 00001DE9 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14073                                  	;mov	[si+16h],dx
 14074 00001DEC 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14075                                  FCBSave: 
 14076                                  	;test	byte [bp-20],8
 14077 00001DEF F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14078 00001DF3 7409                    	jz	short DoReturn
 14079                                  	;mov	cx,[bp-19]
 14080 00001DF5 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14081 00001DF8 E886E6                  	call    Get_User_Stack
 14082                                  	;mov	[si+4],cx
 14083 00001DFB 894C04                  	MOV	[SI+user_env.user_CX],CX
 14084                                  DoReturn:
 14085                                  	;mov	al,[bp-1]
 14086 00001DFE 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14087                                  	;Leave	
 14088 00001E01 89EC                    	mov     sp,bp
 14089 00001E03 5D                      	pop     bp
 14090 00001E04 C3                      	retn
 14091                                  
 14092                                  ; 22/07/2018 - Retro DOS v3.0
 14093                                  
 14094                                  ;Break <$FCB_Open - open an old-style FCB>
 14095                                  ;---------------------------------------------------------------------------
 14096                                  ;
 14097                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14098                                  ;	for us and asked to have the rest filled in.
 14099                                  ;
 14100                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14101                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14102                                  ;		FCB has the following fields filled in:
 14103                                  ;		    Time/Date Extent/NR Size
 14104                                  ;---------------------------------------------------------------------------
 14105                                  
 14106                                  _$FCB_OPEN:			; System call 15
 14107                                  
 14108 00001E05 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14109                                  
 14110                                  ;hkn; DOS_Open is in DOSCODE
 14111 00001E08 B9[F82A]                	MOV	CX,DOS_OPEN
 14112                                  
 14113                                  ; The following is common code for Creation and openning of FCBs. AX is
 14114                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14115                                  ; the FCB
 14116                                  
 14117                                  DoAccess:
 14118 00001E0B 1E                      	push	ds
 14119 00001E0C 52                      	push	dx
 14120 00001E0D 51                      	push	cx
 14121 00001E0E 50                      	push	ax			; save FCB pointer away
 14122                                  
 14123                                  ;hkn; 	OpenBuf is in DOSDATA
 14124 00001E0F BF[BE03]                	MOV	DI,OPENBUF
 14125 00001E12 E8E24B                  	call	TransFCB		; crunch the fcb
 14126 00001E15 58                      	pop	ax
 14127 00001E16 59                      	pop	cx
 14128 00001E17 5A                      	pop	dx
 14129 00001E18 1F                      	pop	ds			; get fcb
 14130 00001E19 7303                    	JNC	short FindFCB		; everything seems ok
 14131                                  FCBOpenErr:
 14132                                  	; AL has error code
 14133 00001E1B E938E8                  	jmp	FCB_RET_ERR
 14134                                  FindFCB:
 14135 00001E1E E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14136                                  
 14137                                  	; 17/05/2019 - Retro DOS v4.0
 14138                                  
 14139                                  	; MSDOS 3.3
 14140                                  	;call	LRUFCB
 14141                                  	;jc	short HardMessage
 14142                                  
 14143                                  	; MSDOS 6.0
 14144 00001E21 50                      	push	ax
 14145 00001E22 B001                    	mov	al,1			;indicate Open/Create operation
 14146 00001E24 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 14147 00001E27 58                      	pop	ax
 14148 00001E28 722A                    	jc	short HardMessage
 14149                                  	
 14150                                  	;mov	word [es:di+2],8000h
 14151 00001E2A 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14152 00001E30 1E                      	push	ds
 14153 00001E31 56                      	push	si	
 14154 00001E32 53                      	push	bx			; save fcb pointer
 14155 00001E33 89CE                    	MOV	SI,CX
 14156                                  
 14157                                  ;hkn; SS is DOSDATA
 14158 00001E35 16                      	push	ss
 14159 00001E36 1F                      	pop	ds			    ; let DOS_Open see variables
 14160 00001E37 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14161 00001E39 5B                      	pop	bx
 14162 00001E3A 5E                      	pop	si
 14163 00001E3B 1F                      	pop	ds			; get fcb
 14164                                  
 14165                                  ;hkn; SS override
 14166 00001E3C 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14167 00001E41 7318                    	JNC	short FCBOK		; operation succeeded
 14168                                  failopen:
 14169 00001E43 50                      	PUSH	AX
 14170 00001E44 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14171 00001E46 E8DDFC                  	call	BlastSFT
 14172 00001E49 58                      	POP	AX
 14173                                  	;cmp	ax,4
 14174 00001E4A 83F804                  	CMP	AX,error_too_many_open_files
 14175 00001E4D 7405                    	JZ	short HardMessage
 14176                                  	;cmp	ax,24h
 14177 00001E4F 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14178 00001E52 7505                    	jnz	short DeadFCB
 14179                                  HardMessage:
 14180 00001E54 50                      	PUSH	AX
 14181 00001E55 E887FD                  	call	FCBHardErr
 14182 00001E58 58                      	POP	AX
 14183                                  DeadFCB:
 14184                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14185                                  	;jmp	FCB_RET_ERR
 14186 00001E59 EBC0                    	jmp	short FCBOpenErr
 14187                                  FCBOK:
 14188                                  	; MSDOS 6.0
 14189 00001E5B E8ECF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14190 00001E5E 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14191 00001E60 E8C053                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14192 00001E63 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14193                                  ;SR;
 14194                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14195                                  ; LocalSFT variable to reflect this.
 14196                                  
 14197 00001E65 36893E[4410]            	mov	[ss:LocalSFT],di
 14198 00001E6A 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14199                                  ;;SR;
 14200                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14201                                  ;;
 14202                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14203                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14204                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14205                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14206                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14207                                  
 14208                                  FCBOK2:
 14209                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14210 00001E6F 26FF05                  	inc	word [es:di]
 14211                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14212 00001E72 E804FA                  	call	SaveFCBInfo
 14213                                  	; MSDOS 3.3
 14214                                  	;call	SetOpenAge
 14215                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14216                                  	;test	word [es:di+5],80h
 14217                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14218 00001E75 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14219 00001E7A 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14220 00001E7C 8A04                    	MOV	AL,[SI]			; get drive byte
 14221 00001E7E E8014B                  	call	GETTHISDRV		; convert
 14222                                  	;INC	AL
 14223                                  	; 17/12/2022
 14224 00001E81 40                      	inc	ax
 14225 00001E82 8804                    	MOV	[SI],AL			; stash in good drive letter
 14226                                  
 14227                                  FCBNoDrive:
 14228                                  	;mov	word [si+0Eh],128
 14229 00001E84 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14230                                  
 14231                                  	; 23/01/2024
 14232                                  	; (PCDOS 7.1 IBMDOS.COM)
 14233                                  	;;;
 14234                                  	;;mov	ax,[es:di+0Dh]
 14235                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14236                                  	;;mov	[si+16h],ax
 14237                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14238                                  	;;mov	ax,[es:di+0Fh]
 14239                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14240                                  	;;mov	[si+14h],ax
 14241                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14242                                  	;;mov	ax,[es:di+11h]
 14243                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14244                                  	;;mov	[si+10h],ax
 14245                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14246                                  	;;mov	ax,[es:di+13h]
 14247                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14248                                  	;;mov	[si+12h],ax
 14249                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14250                                  	;
 14251 00001E89 06                      	push	es
 14252                                  	;les	ax,[es:di+0Dh]
 14253 00001E8A 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14254                                  	;mov	[si+16h],ax
 14255 00001E8E 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14256                                  	;mov	[si+14h],es
 14257 00001E91 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14258 00001E94 07                      	pop	es
 14259 00001E95 06                      	push	es
 14260                                  	;les	ax,[es:di+11h]
 14261 00001E96 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14262                                  	;mov	[si+10h],ax
 14263 00001E9A 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14264                                  	;mov	[si+12h],ax
 14265 00001E9D 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14266 00001EA0 07                      	pop	es
 14267                                  	;;;
 14268                                  	
 14269 00001EA1 31C0                    	XOR	AX,AX			; convenient zero
 14270                                  	;mov	[si+0Ch],ax
 14271 00001EA3 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14272                                  
 14273                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14274                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14275                                  
 14276                                  ;hkn; 	SS override
 14277 00001EA6 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14278                                  	;mov	ah,[es:di+4]
 14279 00001EAB 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14280                                  OpenScan:
 14281                                  	;cmp	al,[si+18h]
 14282 00001EAF 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14283 00001EB2 7407                    	JZ	short SkipCheck
 14284 00001EB4 50                      	push	ax			; preserve count
 14285 00001EB5 E884FC                  	call	CheckFCB		; do they match
 14286 00001EB8 58                      	pop	ax			; get count back
 14287 00001EB9 7309                    	JNC	short OpenFound		; found a match!
 14288                                  SkipCheck:
 14289 00001EBB FEC0                    	INC	AL			; advance to next FCB
 14290 00001EBD 38E0                    	CMP	AL,AH			; table full?
 14291 00001EBF 75EE                    	JNZ	short OpenScan		; no, go for more
 14292                                  OpenDone:
 14293 00001EC1 30C0                    	xor	al,al			; return success
 14294 00001EC3 C3                      	retn
 14295                                  
 14296                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14297                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14298                                  ; Consider:
 14299                                  ;
 14300                                  ;   open (foo)	delete (foo) open (bar)
 14301                                  ;
 14302                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14303                                  ; foo even though foo is no longer needed; this is due to the server closing
 14304                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14305                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14306                                  ; bar and subsequent I/O would be lost to the redirector.
 14307                                  ;
 14308                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14309                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14310                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14311                                  ; around. This will allow us to access the same file through multiple network
 14312                                  ; connections and NOT prematurely terminate when the ref count on one
 14313                                  ; connection goes to zero.
 14314                                  
 14315                                  OpenFound:
 14316                                  	;mov	[si+18h],al
 14317 00001EC4 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14318 00001EC7 26FF05                  	inc	word [es:di]
 14319                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14320                                  					; remember this new invocation
 14321                                  	; 24/01/2024
 14322 00001ECA 16                      	push	ss
 14323 00001ECB 1F                      	pop	ds
 14324                                  	
 14325                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14326 00001ECC A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14327                                  	;mov	[es:di+15h],ax
 14328 00001ECF 26894515                	MOV	[ES:DI+sf_LRU],AX
 14329                                  ;
 14330                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14331                                  ; blast it to prevent other reuse.
 14332                                  ;
 14333                                  	;push	ss
 14334                                  	;pop	ds
 14335                                  
 14336 00001ED3 C43E[9E05]              	LES	DI,[THISSFT]
 14337 00001ED7 26FF0D                  	dec	word [es:di]
 14338                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14339                                  					; free the newly allocated SFT
 14340 00001EDA E87E53                  	call	ShareEnd
 14341 00001EDD B043                    	MOV	AL,'C'	 ; 43h
 14342 00001EDF E844FC                  	call	BlastSFT
 14343 00001EE2 EBDD                    	JMP	short OpenDone
 14344                                  
 14345                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14346                                  ;----------------------------------------------------------------------------
 14347                                  ;
 14348                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14349                                  ;	FCB for us and asked to have the rest filled in.
 14350                                  ;
 14351                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14352                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14353                                  ;		FCB has the following fields filled in:
 14354                                  ;		    Time/Date Extent/NR Size
 14355                                  ;----------------------------------------------------------------------------
 14356                                  
 14357                                  _$FCB_CREATE:		; System call 22
 14358                                  
 14359                                  ;hkn; DOS_Create is in DOSCODE
 14360 00001EE4 B9[D229]                	MOV	CX,DOS_CREATE		; routine to call
 14361 00001EE7 31C0                    	XOR	AX,AX			; attributes to create
 14362 00001EE9 E84EFD                  	call	GetExtended		; get extended FCB
 14363 00001EEC 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14364 00001EEE 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14365                                  DoAccessJ:
 14366 00001EF1 E917FF                  	JMP	DoAccess		; do dirty work
 14367                                  
 14368                                  ;============================================================================
 14369                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14370                                  ;============================================================================
 14371                                  ; 22/07/2018 - Retro DOS v3.0
 14372                                  ; 17/05/2019 - Retro DOS v4.0
 14373                                  
 14374                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14375                                  
 14376                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14377                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14378                                  
 14379                                  ;**	Search.asm
 14380                                  ;----------------------------------------------------------------------------
 14381                                  ;	Directory search system calls.
 14382                                  ;	These will be passed direct text of the pathname from the user. 
 14383                                  ;	They will need to be passed through the macro expander prior to
 14384                                  ;	being sent through the low-level stuff. 
 14385                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14386                                  ;
 14387                                  ;	$Dir_Search_First	  written
 14388                                  ;	$Dir_Search_Next	  written
 14389                                  ;	$Find_First	  written
 14390                                  ;	$Find_Next		  written
 14391                                  ;	PackName		  written
 14392                                  ;
 14393                                  ;	Modification history:
 14394                                  ;
 14395                                  ;	  Created: ARR 4 April 1983
 14396                                  
 14397                                  ;----------------------------------------------------------------------------
 14398                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14399                                  ;
 14400                                  ; Inputs:
 14401                                  ;	DS:DX Points to unopenned FCB
 14402                                  ; Function:
 14403                                  ;	Directory is searched for first matching entry and the directory
 14404                                  ;	entry is loaded at the disk transfer address
 14405                                  ; Returns:
 14406                                  ;	AL = -1 if no entries matched, otherwise 0
 14407                                  ;----------------------------------------------------------------------------
 14408                                  
 14409                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14410                                  
 14411                                  	; 24/01/2024
 14412                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14413                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14414                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14415                                  
 14416                                  _$DIR_SEARCH_FIRST:
 14417 00001EF4 368916[A605]            	MOV	[SS:THISFCB],DX
 14418 00001EF9 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14419 00001EFE 89D6                    	MOV	SI,DX
 14420 00001F00 803CFF                  	CMP	BYTE [SI],0FFH
 14421 00001F03 7503                    	JNZ	short NORMFCB4
 14422 00001F05 83C607                  	ADD	SI,7			; Point to drive select byte
 14423                                  NORMFCB4:
 14424 00001F08 FF34                    	push	word [SI]		; Save original drive byte for later
 14425                                  
 14426 00001F0A 16                      	push	ss
 14427 00001F0B 07                      	pop	es			; get es to address DOSGroup
 14428                                  
 14429 00001F0C BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14430 00001F0F E8E54A                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14431 00001F12 7304                    	JNC	short SearchIt		; no error, go and look
 14432 00001F14 5B                      	pop	bx			; Clean stack
 14433                                  
 14434                                  ; Error code is in AX
 14435                                  
 14436                                  	; 09/11/2022
 14437                                  dcf_errj:
 14438 00001F15 E93EE7                  	jmp	FCB_RET_ERR		; error
 14439                                  
 14440                                  SearchIt:
 14441 00001F18 16                      	push	ss
 14442 00001F19 1F                      	pop	ds			; get ready for search
 14443                                  	;push	word [DMAADD]
 14444                                  	;push	word [DMAADD+2]
 14445                                  	; 24/01/2024
 14446 00001F1A C43E[2C03]              	les	di,[DMAADD]
 14447 00001F1E 57                      	push	di
 14448 00001F1F 06                      	push	es
 14449 00001F20 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14450 00001F26 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14451                                  	; MSDOS 3.3
 14452                                  	;call	DOS_SEARCH_FIRST
 14453                                  	; MSDOS 6.0
 14454 00001F2A E8930D                  	call	GET_FAST_SEARCH		; search
 14455 00001F2D 8F06[2E03]              	pop	word [DMAADD+2]
 14456 00001F31 8F06[2C03]              	pop	word [DMAADD]
 14457 00001F35 735C                    	JNC	short SearchSet		; no error, transfer info
 14458 00001F37 5B                      	pop	bx			; Clean stack
 14459                                  
 14460                                  ; Error code is in AX
 14461                                  
 14462                                  	; 09/11/2022
 14463                                  	;jmp	FCB_RET_ERR
 14464 00001F38 EBDB                    	jmp	short dcf_errj
 14465                                  
 14466                                  ;----------------------------------------------------------------------------
 14467                                  ;
 14468                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14469                                  ;
 14470                                  ; Inputs:
 14471                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14472                                  ; Function:
 14473                                  ;	Directory is searched for the next matching entry and the directory
 14474                                  ;	entry is loaded at the disk transfer address
 14475                                  ; Returns:
 14476                                  ;	AL = -1 if no entries matched, otherwise 0
 14477                                  ;----------------------------------------------------------------------------
 14478                                  
 14479                                  	; 24/01/2024
 14480                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14481                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14482                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14483                                  
 14484                                  _$DIR_SEARCH_NEXT:
 14485 00001F3A 368916[A605]            	MOV	[SS:THISFCB],DX
 14486 00001F3F 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14487 00001F44 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14488 00001F4A 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14489                                  
 14490 00001F50 16                      	push	ss
 14491 00001F51 07                      	pop	es
 14492                                  
 14493 00001F52 BF[BE04]                	MOV	DI,SEARCHBUF
 14494                                  
 14495 00001F55 89D6                    	MOV	SI,DX
 14496 00001F57 803CFF                  	CMP	BYTE [SI],0FFh
 14497 00001F5A 750D                    	JNZ	short NORMFCB6
 14498 00001F5C 83C606                  	ADD	SI,6
 14499 00001F5F AC                      	LODSB
 14500                                  
 14501 00001F60 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14502 00001F64 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14503                                  NORMFCB6:
 14504 00001F69 AC                      	LODSB				; Get original user drive byte
 14505 00001F6A 50                      	push	ax			; Put it on stack
 14506 00001F6B 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14507 00001F6E AA                      	STOSB				; Put in correct place
 14508 00001F6F B90A00                  	MOV	CX,20/2
 14509 00001F72 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14510                                  
 14511 00001F74 16                      	push	ss
 14512 00001F75 1F                      	pop	ds
 14513                                  
 14514                                  	;push	word [DMAADD]
 14515                                  	;push	word [DMAADD+2]
 14516                                  	; 24/01/2024
 14517 00001F76 C43E[2C03]              	les	di,[DMAADD]
 14518 00001F7A 57                      	push	di
 14519 00001F7B 06                      	push	es
 14520 00001F7C C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14521 00001F82 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14522 00001F86 E8330E                  	call	DOS_SEARCH_NEXT 	; Find it
 14523 00001F89 8F06[2E03]              	pop	word [DMAADD+2]
 14524 00001F8D 8F06[2C03]              	pop	word [DMAADD]
 14525 00001F91 724A                    	JC	short SearchNoMore
 14526                                  	; 24/01/2024
 14527                                  	;JMP	SearchSet		; Ok set return
 14528                                  
 14529                                  ;;;	; 24/01/2024
 14530                                  
 14531                                  ; The search was successful (or the search-next). We store the information
 14532                                  ; into the user's FCB for continuation.
 14533                                  
 14534                                  SearchSet:
 14535 00001F93 BE[BE04]                	MOV	SI,SEARCHBUF
 14536 00001F96 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14537 00001F9A F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14538 00001F9F 7403                    	JZ	short NORMFCB1
 14539 00001FA1 83C707                  	ADD	DI,7			; Point past the extension
 14540                                  NORMFCB1:
 14541 00001FA4 5B                      	pop	bx			; Get original drive byte
 14542 00001FA5 08DB                    	OR	BL,BL
 14543 00001FA7 7506                    	JNZ	short SearchDrv
 14544 00001FA9 8A1E[3603]              	MOV	BL,[CURDRV]
 14545 00001FAD FEC3                    	INC	BL
 14546                                  SearchDrv:
 14547 00001FAF AC                      	LODSB				; Get correct search contin drive byte
 14548 00001FB0 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14549 00001FB2 47                      	INC	DI
 14550                                  	;STOSB				; Store the correct "user" drive byte
 14551                                  					;  at the start of the search info
 14552 00001FB3 B90A00                  	MOV	CX,20/2
 14553 00001FB6 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14554 00001FB8 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14555                                  					;   byte to AL
 14556 00001FBA AA                      	STOSB				; Search contin drive byte at end of
 14557                                  					;   contin info
 14558 00001FBB C43E[2C03]              	LES	DI,[DMAADD]
 14559 00001FBF F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14560 00001FC4 740D                    	JZ	short NORMFCB2
 14561 00001FC6 B0FF                    	MOV	AL,0FFh
 14562 00001FC8 AA                      	STOSB
 14563 00001FC9 FEC0                    	INC	AL
 14564                                  	;MOV	CX,5
 14565                                  	; 17/12/2022
 14566 00001FCB B105                    	mov	cl,5
 14567 00001FCD F3AA                    	REP	STOSB
 14568 00001FCF A0[6D05]                	MOV	AL,[SATTRIB]
 14569 00001FD2 AA                      	STOSB
 14570                                  NORMFCB2:
 14571 00001FD3 88D8                    	MOV	AL,BL			; User Drive byte
 14572 00001FD5 AA                      	STOSB
 14573                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14574                                  	; 17/12/2022
 14575 00001FD6 B110                    	mov	cl,16
 14576 00001FD8 F3A5                    	REP	MOVSW
 14577 00001FDA E976E6                  	jmp	FCB_RET_OK
 14578                                  ;;;
 14579                                  
 14580                                  SearchNoMore:
 14581 00001FDD C43E[A605]              	LES	DI,[THISFCB]
 14582 00001FE1 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14583 00001FE6 7403                    	JZ	short NORMFCB8
 14584 00001FE8 83C707                  	ADD	DI,7			; Point past the extension
 14585                                  NORMFCB8:
 14586 00001FEB 5B                      	pop	bx			; Get original drive byte
 14587 00001FEC 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14588                                  					;  at the right spot
 14589                                  ; error code is in AX
 14590                                  
 14591 00001FEF E964E6                  	jmp	FCB_RET_ERR
 14592                                  
 14593                                  ; 17/05/2019 - Retro DOS v4.0
 14594                                  
 14595                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14596                                  
 14597                                  ;---------------------------------------------------------------------------
 14598                                  ;
 14599                                  ;   Procedure Name : $FIND_FIRST
 14600                                  ; 
 14601                                  ;   Assembler usage:
 14602                                  ;	    MOV AH, FindFirst
 14603                                  ;	    LDS DX, name
 14604                                  ;	    MOV CX, attr
 14605                                  ;	    INT 21h
 14606                                  ;	; DMA address has datablock
 14607                                  ;
 14608                                  ;   Error Returns:
 14609                                  ;	    AX = error_path_not_found
 14610                                  ;	       = error_no_more_files
 14611                                  ;---------------------------------------------------------------------------
 14612                                  
 14613                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14614                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14615                                  
 14616                                  	; 24/01/2024
 14617                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14618                                  
 14619                                  _$FIND_FIRST:
 14620 00001FF2 89D6                    	MOV	SI,DX			; get name in appropriate place
 14621 00001FF4 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14622                                  
 14623 00001FF9 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14624                                  
 14625 00001FFC E85E4A                  	call	TransPathSet		; convert the path
 14626 00001FFF 7305                    	JNC	short Find_it 		; no error, go and look
 14627                                  FindError:
 14628                                  	;mov	al,3
 14629 00002001 B003                    	mov	al, error_path_not_found ; error and map into one.
 14630                                  	; 09/11/2022
 14631                                  FF_errj:
 14632 00002003 E93AE6                  	jmp	SYS_RET_ERR
 14633                                  Find_it:
 14634 00002006 16                      	push	ss
 14635 00002007 1F                      	pop	ds
 14636                                  
 14637                                  	;push	word [DMAADD]
 14638                                  	;push	word [DMAADD+2]
 14639                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14640 00002008 C43E[2C03]              	les	di,[DMAADD]
 14641 0000200C 57                      	push	di
 14642 0000200D 06                      	push	es
 14643 0000200E C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14644 00002014 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14645                                  	; MSDOS 3.3
 14646                                  	;call	DOS_SEARCH_FIRST
 14647                                  	; MSDOS 6.0
 14648 00002018 E8A50C                  	call	GET_FAST_SEARCH 	; search
 14649 0000201B 8F06[2E03]              	pop	word [DMAADD+2]
 14650 0000201F 8F06[2C03]              	pop	word [DMAADD]
 14651                                  	
 14652                                  	; 16/12/2022
 14653                                  	;JNC	short FindSet 		; no error, transfer info
 14654 00002023 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14655                                  	;
 14656                                  	;jmp	SYS_RET_ERR
 14657                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14658                                  ;FFF_errj:
 14659                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14660                                  
 14661                                  FindSet:
 14662 00002025 BE[BE04]                	MOV	SI,SEARCHBUF
 14663 00002028 C43E[2C03]              	LES	DI,[DMAADD]
 14664 0000202C B91500                  	MOV	CX,21
 14665 0000202F F3A4                    	REP	MOVSB
 14666 00002031 56                      	PUSH	SI			; Save pointer to start of entry
 14667                                  	;mov	al,[si+0Bh]
 14668 00002032 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14669 00002035 AA                      	STOSB
 14670                                  	;add	si,16h ; 22
 14671 00002036 83C616                  	ADD	SI,dir_entry.dir_time
 14672 00002039 A5                      	MOVSW				; dir_time
 14673 0000203A A5                      	MOVSW				; dir_date
 14674 0000203B 46                      	INC	SI
 14675 0000203C 46                      	INC	SI			; Skip dir_first
 14676 0000203D A5                      	MOVSW				; dir_size (2 words)
 14677 0000203E A5                      	MOVSW
 14678 0000203F 5E                      	POP	SI			; Point back to dir_name
 14679 00002040 E83300                   	CALL	PackName
 14680 00002043 E9F1E5                  	jmp	SYS_RET_OK		; bye with no errors
 14681                                  
 14682                                  ;---------------------------------------------------------------------------
 14683                                  ;
 14684                                  ;   Procedure Name : $FIND_NEXT
 14685                                  ;
 14686                                  ;   Assembler usage:
 14687                                  ;	; dma points at area returned by find_first
 14688                                  ;	    MOV AH, findnext
 14689                                  ;	    INT 21h
 14690                                  ;	; next entry is at dma
 14691                                  ;
 14692                                  ;   Error Returns:
 14693                                  ;	    AX = error_no_more_files
 14694                                  ;---------------------------------------------------------------------------
 14695                                  
 14696                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14697                                  
 14698                                  	; 24/01/2024
 14699                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14700                                  
 14701                                  _$FIND_NEXT:
 14702 00002046 16                      	push	ss
 14703 00002047 07                      	pop	es
 14704                                  
 14705 00002048 BF[BE04]                	MOV	DI,SEARCHBUF
 14706                                  
 14707 0000204B 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14708                                  
 14709 00002050 B91500                  	MOV	CX,21
 14710 00002053 F3A4                    	REP	MOVSB			; Put the search continuation info
 14711                                  					;  in the right place
 14712 00002055 16                      	push	ss
 14713 00002056 1F                      	pop	ds			; get ready for search
 14714                                  	
 14715                                  	;push	word [DMAADD]
 14716                                  	;push	word [DMAADD+2]
 14717                                  	; 24/01/2024
 14718 00002057 C43E[2C03]              	les	di,[DMAADD]
 14719 0000205B 57                      	push	di
 14720 0000205C 06                      	push	es
 14721 0000205D C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14722 00002063 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14723 00002067 E8520D                  	call	DOS_SEARCH_NEXT 	; Find it
 14724 0000206A 8F06[2E03]              	pop	word [DMAADD+2]
 14725 0000206E 8F06[2C03]              	pop	word [DMAADD]
 14726 00002072 73B1                    	JNC	short FindSet 		; No error, set info
 14727                                  	;jmp	SYS_RET_ERR
 14728                                  	; 16/12/2022
 14729 00002074 EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14730                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14731                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14732                                  
 14733                                  ;---------------------------------------------------------------------------
 14734                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14735                                  ;
 14736                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14737                                  ;	the ASCIZ format.
 14738                                  ;
 14739                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14740                                  ;		(ES:DI) = destination area (13 bytes)
 14741                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14742                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14743                                  ;---------------------------------------------------------------------------
 14744                                  
 14745                                  	; 25/01/2024 - Retro DOS v4.2
 14746                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5F70h
 14747                                  
 14748                                  PackName:
 14749                                  ;	Move over 8 characters to cover the name component, then trim it's
 14750                                  ;	trailing blanks.
 14751                                  
 14752                                  	;MOV	CX,8			; Pack the name
 14753                                  	;REP	MOVSB			; Move all of it
 14754                                  	; 25/01/2024
 14755 00002076 B90400                  	mov	cx,4
 14756 00002079 F3A5                    	rep	movsw
 14757                                  main_kill_tail:
 14758 0000207B 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14759 00002080 7507                    	JNZ	short find_check_dot
 14760 00002082 4F                      	DEC	DI			; Back up over trailing space
 14761 00002083 41                      	INC	CX
 14762 00002084 83F908                  	CMP	CX,8
 14763 00002087 72F2                    	JB	short main_kill_tail
 14764                                  find_check_dot:
 14765                                  	;CMP	WORD [SI],(" " << 8) | " "
 14766 00002089 813C2020                	cmp     word [si],2020h 
 14767 0000208D 7506                    	JNZ	short got_ext 		; Some chars in extension
 14768 0000208F 807C0220                	CMP	BYTE [SI+2]," "
 14769 00002093 740F                    	JZ	short find_done		; No extension
 14770                                  got_ext:
 14771 00002095 B02E                    	MOV	AL,"."	; 2Eh
 14772 00002097 AA                      	STOSB
 14773                                  	;MOV	CX,3
 14774                                  	;; 18/12/2022
 14775                                  	;;mov	cl,3
 14776                                  	;;REP	MOVSB
 14777                                  	;movsb
 14778                                  	;movsb
 14779                                  	;movsb
 14780                                  	; 25/01/2024
 14781 00002098 A5                      	movsw
 14782 00002099 A4                      	movsb
 14783                                  ext_kill_tail:
 14784 0000209A 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14785 0000209F 7503                    	JNZ	short find_done
 14786 000020A1 4F                      	DEC	DI			; Back up over trailing space
 14787 000020A2 EBF6                    	JMP	short ext_kill_tail
 14788                                  find_done:
 14789 000020A4 31C0                    	XOR	AX,AX
 14790 000020A6 AA                      	STOSB				; NUL terminate
 14791 000020A7 C3                      	retn
 14792                                  
 14793                                  ;---------------------------------------------------------------------------
 14794                                  
 14795                                  ; 24/01/2024
 14796                                  %if 0
 14797                                  	; 17/05/2019 - Retro DOS v4.0
 14798                                  GET_FAST_SEARCH:
 14799                                  	; 22/07/2018
 14800                                  	; MSDOS 6.0
 14801                                  	; 17/12/2022
 14802                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14803                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14804                                  					;FO.trigger fastopen ;AN000;
 14805                                  	;call	DOS_SEARCH_FIRST
 14806                                  	;retn
 14807                                  	; 17/12/2022
 14808                                  	jmp	DOS_SEARCH_FIRST
 14809                                  %endif
 14810                                  
 14811                                  ;============================================================================
 14812                                  ; PATH.ASM, MSDOS 6.0, 1991
 14813                                  ;============================================================================
 14814                                  ; 06/08/2018 - Retro DOS v3.0
 14815                                  ; 17/05/2019 - Retro DOS v4.0
 14816                                  
 14817                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14818                                  
 14819                                  ;**	Directory related system calls. These will be passed direct text of the
 14820                                  ;	pathname from the user. They will need to be passed through the macro
 14821                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14822                                  ;	defined in DISPATCH. The system calls are:
 14823                                  ;
 14824                                  ;	$CURRENT_DIR  Written
 14825                                  ;	$RMDIR	  Written
 14826                                  ;	$CHDIR	  Written
 14827                                  ;	$MKDIR	  Written
 14828                                  ;
 14829                                  ;
 14830                                  ;	Modification history:
 14831                                  ;
 14832                                  ;	    Created: ARR 4 April 1983
 14833                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14834                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14835                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14836                                  ;				    current directory.
 14837                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14838                                  
 14839                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14840                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14841                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14842                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14843                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14844                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14845                                  ;	I_Need	cMeta,BYTE
 14846                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14847                                  
 14848                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14849                                  ;----------------------------------------------------------------------------
 14850                                  ;
 14851                                  ;   Procedure Name : $CURRENT_DIR
 14852                                  ;
 14853                                  ;   Assembler usage:
 14854                                  ;		LDS	SI,area
 14855                                  ;		MOV	DL,drive
 14856                                  ;		INT	21h
 14857                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14858                                  ;	    ; current directory.
 14859                                  ;   Error returns:
 14860                                  ;	    AX = error_invalid_drive
 14861                                  ;
 14862                                  ;----------------------------------------------------------------------------
 14863                                  
 14864                                  	; 06/08/2018 - Retro DOS v3.0
 14865                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14866                                  
 14867                                  	; 25/01/2024 - Retro DOS v4.2
 14868                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14869                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14870                                  	; Windows ME IO.SYS - BIOSCODE:6393h
 14871                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14872                                  
 14873                                  _$CURRENT_DIR:
 14874 000020A8 E848F2                  	call	ECritDisk
 14875 000020AB 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14876 000020AD E8B648                  	call	GetVisDrv		; grab it
 14877 000020B0 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14878                                  CurdirErr:
 14879 000020B2 E859F2                  	call	LCritDisk
 14880                                  
 14881                                  	; MSDOS 3.3
 14882                                  	;mov	al,0Fh
 14883                                  	
 14884                                  	; MSDOS 6.0
 14885 000020B5 1E                      	push	ds
 14886 000020B6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14887 000020BB A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14888 000020BE 1F                      	pop	ds
 14889                                  
 14890                                  curdir_errj:
 14891 000020BF E97EE5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14892                                  
 14893                                  CurrentValidate:
 14894 000020C2 1E                      	push	ds			; save destination
 14895 000020C3 56                      	push	si
 14896                                  	
 14897                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14898                                  	
 14899                                  	; MSDOS 6.0
 14900 000020C4 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14901                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14902 000020C9 C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14903                                  	
 14904                                  	; 25/01/2024
 14905                                  	;lds     si,[THISCDS]
 14906                                  
 14907                                  ; 16/12/2022
 14908                                  %if 0
 14909                                  	; 09/11/2022 (following test instruction is nonsense!)
 14910                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14911                                  
 14912                                  	;test	word [si+43h],8000h
 14913                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14914                                  	;jnz	short $+2  ; 09/11/2022	
 14915                                  	jnz	short DoCheck
 14916                                  %endif
 14917                                  
 14918                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14919                                  ; media check.
 14920                                  ;	CMP	word [SI+curdir.ID],0
 14921                                  ;	JZ	short GetDst
 14922                                  DoCheck:
 14923                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14924                                  
 14925                                  	; 25/01/2024
 14926                                  	; MSDOS 6.0
 14927                                  	;push	ds
 14928                                  	;mov	ds,[cs:DosDSeg]
 14929                                  	;mov	byte [NoSetDir],0 ; *
 14930                                  	;pop	ds
 14931                                  
 14932 000020CE BF[BE03]                	MOV	DI,OPENBUF
 14933 000020D1 E89320                  	call	ValidateCDS		; output is ES:DI -> CDS
 14934                                  
 14935 000020D4 06                      	push	es	 		; swap source and destination
 14936 000020D5 57                      	push	di
 14937 000020D6 5E                      	pop	si
 14938 000020D7 1F                      	pop	ds
 14939                                  GetDst:
 14940 000020D8 5F                      	pop	di
 14941 000020D9 07                      	pop	es			; get real destination
 14942 000020DA 72D6                    	JC	short CurdirErr
 14943                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14944                                  	;
 14945                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14946                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14947                                  	; 16/12/2022
 14948                                  	;add	si,0  ; add si,curdir.text
 14949                                  	;
 14950                                  	;add	si,[si+4Fh] ; 17/05/2019
 14951 000020DC 03744F                  	ADD	SI,[SI+curdir.end]
 14952 000020DF 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14953 000020E2 7501                    	JNZ	short CurrentCopy
 14954 000020E4 46                      	INC	SI
 14955                                  CurrentCopy:
 14956                                  ;	call	FStrCpy
 14957                                  ;; 10/29/86 E5 char
 14958 000020E5 50                      	PUSH	AX
 14959 000020E6 AC                      	LODSB				; get char
 14960 000020E7 08C0                    	OR	AL,AL
 14961 000020E9 7413                    	JZ	short FOK
 14962 000020EB 3C05                    	CMP	AL,05H
 14963 000020ED 740D                    	JZ	short FCHANGE
 14964 000020EF EB01                    	JMP	short FFF
 14965                                  FCPYNEXT:
 14966 000020F1 AC                      	LODSB				; get char
 14967                                  FFF:
 14968 000020F2 3C5C                    	CMP	AL,'\'			; beginning of directory
 14969 000020F4 7508                    	JNZ	short FOK		; no
 14970 000020F6 AA                      	STOSB				; put into user's buffer
 14971 000020F7 AC                      	LODSB				; 1st char of dir is 05?
 14972 000020F8 3C05                    	CMP	AL,05H
 14973 000020FA 7502                    	JNZ	short FOK		; no
 14974                                  FCHANGE:
 14975 000020FC B0E5                    	MOV	AL,0E5H			; make it E5
 14976                                  FOK:
 14977 000020FE AA                      	STOSB				; put into user's buffer
 14978 000020FF 08C0                    	OR	AL,AL			; final char
 14979 00002101 75EE                    	JNZ	short FCPYNEXT		; no
 14980 00002103 58                      	POP	AX
 14981                                  
 14982                                  ;; 10/29/86 E5 char
 14983 00002104 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14984 00002106 E805F2                  	call	LCritDisk
 14985 00002109 E92BE5                  	jmp	SYS_RET_OK		; no more, bye!
 14986                                  
 14987                                  ; 17/05/2019 - Retro DOS v4.0
 14988                                  
 14989                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14990                                  
 14991                                  ;BREAK <$RmDir -- Remove a directory>
 14992                                  ;----------------------------------------------------------------------------
 14993                                  ;
 14994                                  ; Procedure Name : $RmDir
 14995                                  ;
 14996                                  ; Inputs:
 14997                                  ;	DS:DX Points to asciz name
 14998                                  ; Function:
 14999                                  ;	Delete directory if empty
 15000                                  ; Returns:
 15001                                  ;	STD XENIX Return
 15002                                  ;	AX = error_path_not_found If path bad
 15003                                  ;	AX = error_access_denied If
 15004                                  ;		Directory not empty
 15005                                  ;		Path not directory
 15006                                  ;		Root directory specified
 15007                                  ;		Directory malformed (. and .. not first two entries)
 15008                                  ;		User tries to delete a current directory
 15009                                  ;	AX = error_current_directory
 15010                                  ;
 15011                                  ;----------------------------------------------------------------------------
 15012                                  
 15013                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15014                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 15015                                  
 15016                                  _$RMDIR:
 15017 0000210C 52                      	push	dx			; Save ptr to name
 15018 0000210D 1E                      	push	ds
 15019 0000210E 89D6                    	mov	si,dx			; Load ptr into si
 15020 00002110 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 15021 00002113 57                      	push	di
 15022 00002114 E84E49                  	call	TransPathNoSet		; Translate the name
 15023 00002117 5F                      	pop	di			; di = ptr to buf for trans name
 15024 00002118 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 15025 0000211A 1F                      	pop	ds
 15026 0000211B 5A                      	pop	dx			; Restore the name
 15027                                  	;mov	al,3
 15028 0000211C B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 15029                                  	; 16/12/2022
 15030                                  rmdir_errj: ; 10/08/2018
 15031                                  chdir_errj:
 15032 0000211E EB9F                    	jmp	short curdir_errj
 15033                                  	;jmp	SYS_RET_ERR
 15034                                  rmlset:
 15035 00002120 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 15036 00002126 7512                    	Jnz	short rmerr		;	return (-1);
 15037 00002128 16                      	push	ss
 15038 00002129 07                      	pop	es
 15039 0000212A 30C0                    	xor	al,al			; al = 0 , ie drive a:
 15040                                  rmloop: 
 15041 0000212C E8A848                  	call	GetCDSFromDrv		; Get curdir for drive in al
 15042 0000212F 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 15043 00002131 E863F0                  	call	StrCmp			; Are the 2 paths the same?
 15044 00002134 7404                    	jz	short rmerr		; Yes, report error.
 15045 00002136 FEC0                    	inc	al			; No, inc al to next drive number
 15046 00002138 EBF2                    	jmp	short rmloop		; Go check next drive.
 15047                                  rmerr:
 15048 0000213A 1F                      	pop	ds
 15049 0000213B 5A                      	pop	dx			; Restore the name
 15050                                  	;mov	al,10h
 15051 0000213C B010                    	mov	al,error_current_directory ; error
 15052                                  	; 16/12/2022
 15053                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15054                                  ;chdir_errj:
 15055 0000213E EBDE                    	jmp	short rmdir_errj
 15056                                  rmcont:
 15057 00002140 1F                      	pop	ds
 15058 00002141 5A                      	pop	dx			; Restore the name
 15059 00002142 BE[6B31]                	MOV	SI,DOS_RMDIR
 15060 00002145 EB7C                    	JMP	DoDirCall
 15061                                  
 15062                                  ; 17/05/2019 - Retro DOS v4.0
 15063                                  
 15064                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15065                                  
 15066                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15067                                  ;----------------------------------------------------------------------------
 15068                                  ;
 15069                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15070                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15071                                  ; several cases to consider:
 15072                                  ;
 15073                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15074                                  ;	it into a WFP.	We verify the existance of this directory and then
 15075                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15076                                  ;	directory cluster.
 15077                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15078                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15079                                  ;	WFP back into the CDS.
 15080                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15081                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15082                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15083                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15084                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15085                                  ;	to process the path but to return the logical CDS and the logical
 15086                                  ;	path.  We then copy the logical path into the logical CDS.
 15087                                  ;
 15088                                  ; Inputs:
 15089                                  ;	DS:DX Points to asciz name
 15090                                  ; Returns:
 15091                                  ;	STD XENIX Return
 15092                                  ;	AX = chdir_path_not_found if error
 15093                                  ;
 15094                                  ;----------------------------------------------------------------------------
 15095                                  
 15096                                  _$CHDIR:
 15097 00002147 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15098 0000214A 89D6                    	MOV	SI,DX			; get source
 15099 0000214C E80A49                  	call	TransPath		; go munge the path and get real CDS
 15100 0000214F 7304                    	JNC	short ChDirCrack	; no errors, try path
 15101                                  ChDirErrP:
 15102                                  	;mov	al,3
 15103 00002151 B003                    	MOV	AL,error_path_not_found
 15104                                  ChDirErr:
 15105                                  	;jmp	SYS_RET_ERR 	; oops!
 15106                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15107 00002153 EBC9                    	jmp	short chdir_errj
 15108                                  
 15109                                  ChDirCrack:
 15110 00002155 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15111 0000215A 75F5                    	JNZ	short ChDirErrP
 15112                                  
 15113                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15114                                  ; found.
 15115                                  
 15116 0000215C C43E[A205]              	LES	DI,[THISCDS]
 15117 00002160 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15118 00002163 74EC                    	JZ	short ChDirErrP		;	error ();
 15119                                  
 15120                                  ; Find out if the directory exists.
 15121                                  
 15122 00002165 E8C00F                  	call	DOS_CHDIR
 15123                                  	;Jc	short ChDirErr
 15124                                  	; 16/12/2022
 15125 00002168 72B4                    	jc	short chdir_errj
 15126                                  ;
 15127                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15128                                  ; not network). If one was seen, all we need to do is copy in the text
 15129                                  ;
 15130 0000216A C43E[A205]              	LES	DI,[THISCDS]
 15131                                  	;test	word [es:di+43h],2000h
 15132                                  	; 17/12/2022
 15133 0000216E 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15134                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15135 00002173 7425                    	JZ	short GotCDS
 15136                                  
 15137                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15138                                  
 15139 00002175 06                      	push	es	
 15140 00002176 57                      	push	di
 15141 00002177 51                      	push	cx			; save CDS and cluster...
 15142 00002178 E806E3                  	call	Get_User_Stack		; get original text
 15143                                  	
 15144                                  	;mov	di,[si+6]
 15145 0000217B 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15146                                  	;mov	ds,[si+0Eh]
 15147 0000217E 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15148                                  	
 15149 00002181 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15150 00002184 87F7                    	XCHG	SI,DI
 15151 00002186 30C0                    	XOR	AL,AL			; do no splicing
 15152 00002188 57                      	push	di
 15153 00002189 E8D948                  	call	TransPathNoSet		; Munge path
 15154 0000218C 5E                      	pop	si
 15155                                  
 15156                                  ; There should NEVER be an error here.
 15157                                  
 15158                                  ;IF FALSE
 15159                                  ;	JNC SKipErr
 15160                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15161                                  ;SkipErr:
 15162                                  ;ENDIF
 15163 0000218D C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15164                                  	;mov	word [es:di+49h],-1
 15165 00002191 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15166                                  					; no valid cluster here...
 15167 00002197 59                      	pop	cx
 15168 00002198 5F                      	pop	di
 15169 00002199 07                      	pop	es
 15170                                  
 15171                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15172                                  
 15173                                  GotCDS:
 15174                                  
 15175                                  ; wfp_start points to the text. See if it is long enough
 15176                                  
 15177                                  	; MSDOS 3.3
 15178                                  	;push	ss
 15179                                  	;pop	ds
 15180                                  	;mov	si,[WFP_START]
 15181                                  	;push	cx
 15182                                  	;call	DStrLen
 15183                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15184                                  	;pop	cx
 15185                                  	;ja	short ChDirErrP
 15186                                  
 15187                                  	; MSDOS 6.0
 15188 0000219A E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15189 0000219D 77B2                    	JA	short ChDirErrP
 15190                                  	; MSDOS 3.3 & MSDOS 6.0
 15191                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15192                                  	; 17/12/2022
 15193 0000219F 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15194 000021A4 7512                    	JNZ	short SkipRecency
 15195                                  	; MSDOS 6.0
 15196                                  	;test	word [es:di+43h],2000h
 15197                                  	; 17/12/2022
 15198 000021A6 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15199                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15200                                  					;PTM. for Join and Subst ;AN000;
 15201 000021AB 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15202 000021AD B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15203                                  setdirclus:
 15204                                  	;mov	[es:di+49h],cx
 15205 000021B0 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15206 000021B4 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15207                                  SkipRecency:
 15208 000021B8 E80DF0                  	call	FStrCpy
 15209 000021BB 30C0                    	XOR	AL,AL
 15210                                  mkdir_ok:
 15211 000021BD E977E4                  	jmp	SYS_RET_OK
 15212                                  
 15213                                  ; 17/05/2019 - Retro DOS v4.0
 15214                                  
 15215                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15216                                  
 15217                                  ;BREAK <$MkDir - Make a directory entry>
 15218                                  ;---------------------------------------------------------------------------
 15219                                  ;
 15220                                  ; Procedure Name : $MkDir
 15221                                  ; Inputs:
 15222                                  ;	DS:DX Points to asciz name
 15223                                  ; Function:
 15224                                  ;	Make a new directory
 15225                                  ; Returns:
 15226                                  ;	STD XENIX Return
 15227                                  ;	AX = mkdir_path_not_found if path bad
 15228                                  ;	AX = mkdir_access_denied  If
 15229                                  ;		Directory cannot be created
 15230                                  ;		Node already exists
 15231                                  ;		Device name given
 15232                                  ;		Disk or directory(root) full
 15233                                  ;---------------------------------------------------------------------------
 15234                                  
 15235                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15236                                  
 15237                                  _$MKDIR:
 15238 000021C0 BE[3B30]                	MOV	SI,DOS_MKDIR
 15239                                  DoDirCall:
 15240 000021C3 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15241                                  
 15242 000021C6 56                      	push	si
 15243 000021C7 89D6                    	MOV	SI,DX			; get source
 15244 000021C9 E88D48                  	call	TransPath		; go munge the path
 15245 000021CC 5E                      	pop	si
 15246 000021CD 7305                    	JNC	short MkDirCrack	; no errors, try path
 15247                                  MkErrP:
 15248 000021CF B003                    	MOV	AL,error_path_not_found	; oops!
 15249                                  MkErr:
 15250 000021D1 E96CE4                  	jmp	SYS_RET_ERR
 15251                                  MkDirCrack:
 15252 000021D4 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15253 000021DA 75F3                    	JNZ	short MkErrP
 15254                                  
 15255                                  	; MSDOS 3.3
 15256                                  	;push	ss
 15257                                  	;pop	ds
 15258                                  	;call	si
 15259                                  	;jb	short MkErr
 15260                                  	;;jmp	short mkdir_ok
 15261                                  	;jmp	SYS_RET_OK
 15262                                  
 15263                                  	; MSDOS 6.0
 15264 000021DC 56                      	PUSH	SI			;PTM.			;AN000;
 15265 000021DD E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15266 000021E0 5E                      	POP	SI			;PTM.			;AN000;
 15267 000021E1 7604                    	JBE	short pathok		;PTM.			;AN000;
 15268                                  	;mov	al,5
 15269 000021E3 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15270                                  	;jmp	SYS_RET_ERR		;PTM.
 15271 000021E5 EBEA                    	jmp	short MkErr
 15272                                  pathok:
 15273 000021E7 FFD6                    	CALL	SI			; go get file
 15274 000021E9 72E6                    	JC	short MkErr		; no errors
 15275                                  	; 16/12/2022
 15276                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15277 000021EB EBD0                    	jmp	short mkdir_ok
 15278                                  	;jmp	SYS_RET_OK
 15279                                  
 15280                                  ;----------------------------------------------------------------------------
 15281                                  ;
 15282                                  ; Procedure Name : Check_PathLen
 15283                                  ;
 15284                                  ; Inputs:
 15285                                  ;	nothing
 15286                                  ; Function:
 15287                                  ;	check if final path length greater than 67
 15288                                  ; Returns:
 15289                                  ;	Above flag set if > 67
 15290                                  ;
 15291                                  ;---------------------------------------------------------------------------
 15292                                  
 15293                                  Check_PathLen:
 15294                                  	; 09/09/2018
 15295                                  	;mov	SI,[WFP_START]
 15296 000021ED 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15297                                  Check_PathLen2:
 15298 000021F2 16                      	push	ss
 15299 000021F3 1F                      	pop	ds
 15300                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15301 000021F4 51                      	push	CX	
 15302 000021F5 E8E7EF                  	CALL	DStrLen
 15303 000021F8 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15304 000021FB 59                      	POP	CX
 15305 000021FC C3                      	retn
 15306                                  
 15307                                  ;============================================================================
 15308                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15309                                  ;============================================================================
 15310                                  ; 07/08/2018 - Retro DOS v3.0
 15311                                  ; 17/05/2019 - Retro DOS v4.0
 15312                                  
 15313                                  ;**	IOCTL system call.
 15314                                  ;----------------------------------------------------------------------------
 15315                                  ;	$IOCTL
 15316                                  ;
 15317                                  ;	  Revision history:
 15318                                  ;
 15319                                  ;		Created: ARR 4 April 1983
 15320                                  ;
 15321                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15322                                  ;
 15323                                  ;		A000	version 4.00	Jan. 1988
 15324                                  ;
 15325                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15326                                  ;
 15327                                  
 15328                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15329                                  ;---------------------------------------------------------------------------
 15330                                  ;
 15331                                  ;   Assembler usage:
 15332                                  ;	    MOV     BX, Handle
 15333                                  ;	    MOV     DX, Data
 15334                                  ;
 15335                                  ;	(or LDS     DX,BUF
 15336                                  ;	    MOV     CX,COUNT)
 15337                                  ;
 15338                                  ;	    MOV     AH, Ioctl
 15339                                  ;	    MOV     AL, Request
 15340                                  ;	    INT     21h
 15341                                  ;
 15342                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15343                                  ;	    attribute word in DX, handle in BX:
 15344                                  ;	    DH = high word of device driver attributes
 15345                                  ;	    DL = low byte of sf_flags
 15346                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15347                                  ;	    in BX.
 15348                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15349                                  ;	    into DS:DX.  Return number read in AX.
 15350                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15351                                  ;	    DS:DX.  Return bytes written in AX.
 15352                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15353                                  ;	    into DS:DX.  Return number read in AX.
 15354                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15355                                  ;	    DS:DX.  Return bytes written in AX.
 15356                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15357                                  ;	    device, AL = 0FFh, otherwise 0.
 15358                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15359                                  ;	    device, AL = 0FFh, otherwise 0.
 15360                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15361                                  ;	    removable media, 0 otherwise.
 15362                                  ;	 9  Return the contents of the device attribute word in DX for the
 15363                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15364                                  ;	    network. 8000h is the bit for local use.
 15365                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15366                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15367                                  ;	    the count and CX is the delay.
 15368                                  ;
 15369                                  ;   Error returns:
 15370                                  ;	    AX = error_invalid_handle
 15371                                  ;	       = error_invalid_function
 15372                                  ;	       = error_invalid_data
 15373                                  ;
 15374                                  ;-------------------------------------------------------------------------------
 15375                                  ;
 15376                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15377                                  ;   than the above
 15378                                  ;
 15379                                  ;	There are several basic forms of IOCTL calls:
 15380                                  ;
 15381                                  ;
 15382                                  ;	** Get/Set device information:	**
 15383                                  ;
 15384                                  ;	ENTRY	(AL) = function code
 15385                                  ;		  0 - Get device information
 15386                                  ;		  1 - Set device information
 15387                                  ;		(BX) = file handle
 15388                                  ;		(DX) = info for "Set Device Information"
 15389                                  ;	EXIT	'C' set if error
 15390                                  ;		  (AX) = error code
 15391                                  ;		'C' clear if OK
 15392                                  ;		  (DX) = info for "Get Device Information"
 15393                                  ;	USES	ALL
 15394                                  ;
 15395                                  ;
 15396                                  ;	**  Read/Write Control Data From/To Handle  **
 15397                                  ;
 15398                                  ;	ENTRY	(AL) = function code
 15399                                  ;		  2 - Read device control info
 15400                                  ;		  3 - Write device control info
 15401                                  ;		(BX) = file handle
 15402                                  ;		(CX) = transfer count
 15403                                  ;		(DS:DX) = address for data
 15404                                  ;	EXIT	'C' set if error
 15405                                  ;		  (AX) = error code
 15406                                  ;		'C' clear if OK
 15407                                  ;		  (AX) = count of bytes transfered
 15408                                  ;	USES	ALL
 15409                                  ;
 15410                                  ;
 15411                                  ;	**  Read/Write Control Data From/To Block Device  **
 15412                                  ;
 15413                                  ;	ENTRY	(AL) = function code
 15414                                  ;		  4 - Read device control info
 15415                                  ;		  5 - Write device control info
 15416                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15417                                  ;		(CX) = transfer count
 15418                                  ;		(DS:DX) = address for data
 15419                                  ;	EXIT	'C' set if error
 15420                                  ;		  (AX) = error code
 15421                                  ;		'C' clear if OK
 15422                                  ;		  (AX) = count of bytes transfered
 15423                                  ;	USES	ALL
 15424                                  ;
 15425                                  ;
 15426                                  ;	**  Get Input/Output Status  **
 15427                                  ;
 15428                                  ;	ENTRY	(AL) = function code
 15429                                  ;		  6 - Get Input status
 15430                                  ;		  7 - Get Output Status
 15431                                  ;		(BX) = file handle
 15432                                  ;	EXIT	'C' set if error
 15433                                  ;		  (AX) = error code
 15434                                  ;		'C' clear if OK
 15435                                  ;		  (AL) = 00 if not ready
 15436                                  ;		  (AL) = FF if ready
 15437                                  ;	USES	ALL
 15438                                  ;
 15439                                  ;
 15440                                  ;	**  Get Drive Information  **
 15441                                  ;
 15442                                  ;	ENTRY	(AL) = function code
 15443                                  ;		  8 - Check for removable media
 15444                                  ;		  9 - Get device attributes
 15445                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15446                                  ;	EXIT	'C' set if error
 15447                                  ;		  (AX) = error code
 15448                                  ;		'C' clear if OK
 15449                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15450                                  ;		  (DX) = device attribute word (func. 9)
 15451                                  ;	USES	ALL
 15452                                  ;
 15453                                  ;
 15454                                  ;	**  Get Redirected bit	**
 15455                                  ;
 15456                                  ;	ENTRY	(AL) = function code
 15457                                  ;		  0Ah - Network stuff
 15458                                  ;		(BX) = file handle
 15459                                  ;	EXIT	'C' set if error
 15460                                  ;		  (AX) = error code
 15461                                  ;		'C' clear if OK
 15462                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15463                                  ;	USES	ALL
 15464                                  ;
 15465                                  ;
 15466                                  ;	**  Change sharer retry parameters  **
 15467                                  ;
 15468                                  ;	ENTRY	(AL) = function code
 15469                                  ;		  0Bh - Set retry parameters
 15470                                  ;		(CX) = retry loop count
 15471                                  ;		(DX) = number of retries
 15472                                  ;	EXIT	'C' set if error
 15473                                  ;		  (AX) = error code
 15474                                  ;		'C' clear if OK
 15475                                  ;	USES	ALL
 15476                                  ;
 15477                                  ;
 15478                                  ;   =================================================================
 15479                                  ;
 15480                                  ;	**  New Standard Control  **
 15481                                  ;
 15482                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15483                                  ;	FORMS ARE OBSOLETE.
 15484                                  ;
 15485                                  ;   =================================================================
 15486                                  ;
 15487                                  ;	ENTRY	(AL) = function code
 15488                                  ;		  0Ch - Control Function subcode
 15489                                  ;		(BX) = File Handle
 15490                                  ;		(CH) = Category Indicator
 15491                                  ;		(CL) = Function within category
 15492                                  ;		(DS:DX) = address for data, if any
 15493                                  ;		(SI) = Passed to device as argument, use depends upon function
 15494                                  ;		(DI) = Passed to device as argument, use depends upon function
 15495                                  ;	EXIT	'C' set if error
 15496                                  ;		  (AX) = error code
 15497                                  ;		'C' clear if OK
 15498                                  ;		  (SI) = Return value, meaning is function dependent
 15499                                  ;		  (DI) = Return value, meaning is function dependent
 15500                                  ;		  (DS:DX) = Return address, use is function dependent
 15501                                  ;	USES	ALL
 15502                                  ;
 15503                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15504                                  ;     (See inc\ioctl.inc for more info)
 15505                                  ;
 15506                                  ;	ENTRY	(AL) = function code
 15507                                  ;		  0Dh - Control Function subcode
 15508                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15509                                  ;		(CH) = Category Indicator
 15510                                  ;		(CL) = Function within category
 15511                                  ;		(DS:DX) = address for data, if any
 15512                                  ;		(SI) = Passed to device as argument, use depends upon function
 15513                                  ;		(DI) = Passed to device as argument, use depends upon function
 15514                                  ;
 15515                                  ;	EXIT	'C' set if error
 15516                                  ;		  (AX) = error code
 15517                                  ;		'C' clear if OK
 15518                                  ;		  (DS:DX) = Return address, use is function dependent
 15519                                  ;	USES	ALL
 15520                                  ;
 15521                                  ;---------------------------------------------------------------------------
 15522                                  	
 15523                                  	; 17/05/2019 - Retro DOS v4.0
 15524                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15525                                  
 15526                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15527                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15528                                  
 15529                                  IOCTLJMPTABLE:	;label	word
 15530                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15531 000021FD [3922]                  	dw	ioctl_getset_data	; 0
 15532 000021FF [3922]                  	dw	ioctl_getset_data   	; 1
 15533 00002201 [8922]                  	dw	ioctl_control_string	; 2
 15534 00002203 [8922]                  	dw	ioctl_control_string	; 3
 15535 00002205 [D723]                  	dw	ioctl_get_dev		; 4
 15536 00002207 [D723]                  	dw	ioctl_get_dev		; 5
 15537 00002209 [A322]                  	dw	ioctl_status		; 6
 15538 0000220B [A322]                  	dw	ioctl_status		; 7
 15539 0000220D [4423]                  	dw	ioctl_rem_media		; 8
 15540 0000220F [7F23]                  	dw	ioctl_drive_attr	; 9
 15541 00002211 [C923]                  	dw	ioctl_handle_redir	; A
 15542 00002213 [BF22]                  	dw	Set_Retry_Parameters	; B
 15543 00002215 [CD22]                  	dw	GENERICIOCTLHANDLE	; C
 15544 00002217 [E422]                  	dw	GENERICIOCTL		; D
 15545                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15546 00002219 [7A24]                  	dw	ioctl_drive_owner	; E
 15547 0000221B [7A24]                  	dw	ioctl_drive_owner	; F
 15548                                  	; MSDOS 6.0
 15549 0000221D [CD22]                  	dw	query_handle_support	; 10h
 15550 0000221F [E422]                  	dw	query_device_support	; 11h
 15551                                  
 15552                                  	; 11/11/2022
 15553                                  _$IOCTL:
 15554 00002221 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15555 00002223 16                      	push	ss
 15556 00002224 1F                      	pop	ds			;hkn; SS is DOSDATA
 15557                                  
 15558                                  	; MSDOS 3.3
 15559                                  	;cmp	al,0Fh 
 15560                                  	; MSDOS 6.0
 15561 00002225 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15562 00002227 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15563                                  
 15564                                  	; 14/01/2024
 15565                                  	; 28/05/2019
 15566                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15567 00002229 89C7                    	mov	di,ax			; di NOT a PARM
 15568 0000222B 81E7FF00                	and	di,0FFh			; di = al
 15569 0000222F D1E7                    	shl	di,1			; di = index into jmp table
 15570                                  	;pop	AX			; Restore AL for generic IOCTL
 15571                                  
 15572 00002231 2EFFA5[FD21]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15573                                  
 15574                                  ioctl_bad_funj2:
 15575 00002236 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15576                                  
 15577                                  ;--------------------------------------------------------------------------
 15578                                  ;
 15579                                  ; IOCTL: AL = 0,1
 15580                                  ;
 15581                                  ; ENTRY: DS = DOSDATA
 15582                                  ;
 15583                                  ;--------------------------------------------------------------------------
 15584                                  
 15585                                  ioctl_getset_data:
 15586                                  	; MSDOS 6.0
 15587 00002239 E82243                  	call	SFFromHandle		; ES:DI -> SFT
 15588 0000223C 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15589                                  ioctl_bad_handle:
 15590                                  	;mov	al,6
 15591 0000223E B006                    	mov	al,error_invalid_handle
 15592                                  ioctl_error:
 15593 00002240 E9FDE3                  	jmp	SYS_RET_ERR
 15594                                  
 15595                                  ioctl_check_permissions:
 15596 00002243 3C00                    	CMP	AL,0
 15597                                  	;mov	al,[es:di+5]
 15598 00002245 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15599 00002249 741B                    	JZ	short ioctl_read	; read the byte
 15600                                  
 15601 0000224B 08F6                    	or	dh,dh
 15602 0000224D 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15603                                  	;mov	al,0Dh
 15604 0000224F B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15605                                  	;jmp	SYS_RET_ERR
 15606 00002251 EBED                    	jmp	short ioctl_error
 15607                                  
 15608                                  ioctl_check_device:
 15609 00002253 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15610 00002255 74DF                    	jz	short ioctl_bad_funj2
 15611 00002257 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15612                                  					;   device bit!! He can muck with the
 15613                                  					;   others at will.
 15614 0000225A C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15615 0000225F 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15616                                  ioctl_ok:
 15617 00002263 E9D1E3                  	jmp	SYS_RET_OK
 15618                                  
 15619                                  ioctl_read:
 15620 00002266 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15621 0000226B 30E4                    	XOR	AH,AH
 15622 0000226D A880                    	test	AL,devid_device 	; Should I set high byte
 15623 0000226F 740D                    	JZ	short ioctl_no_high	; no
 15624 00002271 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15625                                  	;les	di,[es:di+7]
 15626 00002276 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15627                                  	;mov	ah,[es:di+5]
 15628 0000227A 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15629                                  ioctl_no_high:
 15630 0000227E 89C2                    	MOV	DX,AX
 15631                                  ioctl_set_dx:	; 16/12/2022
 15632 00002280 E8FEE1                  	call	Get_User_Stack
 15633                                  	;mov	[si+6],dx
 15634 00002283 895406                  	MOV	[SI+user_env.user_DX],DX
 15635                                  	;;jmp	SYS_RET_OK
 15636                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15637                                  ioctl_ok_j:
 15638                                  	; 16/12/2022
 15639 00002286 E9B1E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15640                                  	;jmp	short ioctl_ok
 15641                                  	; 26/07/2019
 15642                                  	;jmp	SYS_RET_OK_clc
 15643                                  
 15644                                  ;--------------------------------------------------------------------------
 15645                                  ;
 15646                                  ; IOCTL: AL = 2,3
 15647                                  ;
 15648                                  ; ENTRY: DS = DOSDATA
 15649                                  ;	 SI = user's DS
 15650                                  ;
 15651                                  ;--------------------------------------------------------------------------
 15652                                  
 15653                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15654                                  ioctl_control_string:
 15655 00002289 E8D242                  	call	SFFromHandle		; ES:DI -> SFT
 15656 0000228C 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15657                                  	; 07/12/2022
 15658                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15659                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15660                                  	; MSDOS 5.0 & MSDOS 6.0
 15661 0000228E 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15662 00002293 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15663 00002295 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15664 0000229A 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15665 0000229E 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15666 000022A0 E93C01                  	JMP	ioctl_do_string
 15667                                  
 15668                                  ;--------------------------------------------------------------------------
 15669                                  ;
 15670                                  ; IOCTL: AL = 6,7
 15671                                  ;
 15672                                  ; ENTRY: DS = DOSDATA
 15673                                  ;
 15674                                  ;--------------------------------------------------------------------------
 15675                                  
 15676                                  ioctl_status:
 15677 000022A3 B401                    	MOV	AH,1
 15678 000022A5 2C06                    	SUB	AL,6			; 6=0,7=1
 15679 000022A7 7402                    	JZ	short ioctl_get_status
 15680 000022A9 B403                    	MOV	AH,3
 15681                                  ioctl_get_status:
 15682 000022AB 50                      	PUSH	AX
 15683 000022AC E8E512                  	call	GET_IO_SFT
 15684 000022AF 58                      	POP	AX
 15685                                  	;JNC	short DO_IOFUNC
 15686                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15687                                  	; 16/12/2022
 15688 000022B0 728C                    	jc	short ioctl_bad_handle
 15689                                  DO_IOFUNC:
 15690 000022B2 E8E620                  	call	IOFUNC
 15691 000022B5 88C4                    	MOV	AH,AL
 15692 000022B7 B0FF                    	MOV	AL,0FFH
 15693                                  	;JNZ	short ioctl_status_ret
 15694                                  	; 29/01/2024
 15695 000022B9 75A8                    	jnz	short ioctl_ok
 15696 000022BB FEC0                    	INC	AL
 15697                                  ioctl_status_ret:
 15698                                  	;jmp	SYS_RET_OK
 15699                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15700                                  	;jmp	short ioctl_ok_j
 15701                                  	; 16/12/2022
 15702 000022BD EBA4                    	jmp	short ioctl_ok
 15703                                  
 15704                                  ;--------------------------------------------------------------------------
 15705                                  ;
 15706                                  ; IOCTL: AL = B
 15707                                  ;
 15708                                  ; ENTRY: DS = DOSDATA
 15709                                  ;
 15710                                  ;--------------------------------------------------------------------------
 15711                                  
 15712                                  Set_Retry_Parameters:
 15713                                  	; 09/09/2018
 15714 000022BF 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15715 000022C3 09D2                    	OR	DX,DX			; zero retries not allowed
 15716 000022C5 7475                    	JZ	short ioctl_bad_fun
 15717 000022C7 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15718                                  doneok:
 15719                                  	;jmp	SYS_RET_OK		; Done
 15720                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15721                                  	;jmp	short ioctl_status_ret
 15722                                  	; 16/12/2022
 15723 000022CB EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15724                                  
 15725                                  ;--------------------------------------------------------------------------
 15726                                  ;
 15727                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15728                                  ;
 15729                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15730                                  ;	SI:DX -> Users Device Parameter Table
 15731                                  ;	IOCALL -> IOCTL_Req structure
 15732                                  ;
 15733                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15734                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15735                                  ;	call.
 15736                                  ;
 15737                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15738                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15739                                  ;         return address off the stack if the drive is invalid.
 15740                                  ;
 15741                                  ;--------------------------------------------------------------------------
 15742                                  
 15743                                  query_handle_support:	; Entry point for handles
 15744                                  GENERICIOCTLHANDLE:
 15745 000022CD E88E42                  	call	SFFromHandle		; Get SFT for device.
 15746 000022D0 726F                    	jc	short ioctl_bad_handlej
 15747                                  
 15748                                  	;test	word [es:di+5],8000h
 15749                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15750                                  	;test	byte [es:di+6],80h
 15751 000022D2 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15752 000022D7 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15753                                  
 15754 000022D9 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15755                                  	;les	di,[es:di+7]
 15756 000022DE 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15757 000022E2 EB0F                    	jmp	short Do_GenIOCTL
 15758                                  
 15759                                  query_device_support:	; Entry point for devices:
 15760                                  GENERICIOCTL:
 15761 000022E4 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15762 000022E9 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15763 000022EC 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15764                                  
 15765 000022EE E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15766 000022F1 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15767                                  
 15768                                  Do_GenIOCTL:
 15769                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15770                                  					; Can device handle Generic IOCTL funcs
 15771                                  	; 09/09/2018
 15772                                  	;test	byte [es:di+4],40h
 15773 000022F3 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15774 000022F8 7442                    	jz	short ioctl_bad_fun
 15775                                  
 15776                                  	; 17/05/2019 - Retro DOS v4.0
 15777                                  
 15778                                  	; MSDOS 6.0
 15779                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15780 000022FA C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15781                                  	;cmp	al,10h
 15782 000022FF 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15783 00002301 7C0C                    	jl	short SetIOCtlBlock
 15784                                  	
 15785                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15786                                  	;test	byte [es:di+4],80h 
 15787 00002303 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15788 00002308 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15789                                  	;
 15790                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15791 0000230A C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15792                                  
 15793                                  SetIOCtlBlock:
 15794 0000230F 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15795 00002310 57                      	PUSH	DI			; in DS:SI
 15796                                  					; Setup Generic IOCTL Request Block
 15797                                  	;mov	byte [IOCALL_REQLEN],23
 15798 00002311 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15799                                  	; 07/09/2018 (MSDOS 3.3)
 15800                                  	;;mov	byte [IOCALL_REQFUNC],19
 15801                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15802                                  	;
 15803 00002316 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15804 0000231A 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15805 0000231E 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15806 00002322 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15807 00002326 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15808 0000232A 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15809 0000232E 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15810                                  
 15811                                  ;hkn; IOCALL is in DOSDATA
 15812 00002332 BB[7C03]                	MOV	BX,IOCALL
 15813                                  
 15814 00002335 16                      	PUSH	SS
 15815 00002336 07                      	POP	ES
 15816                                  					; DS:SI -> Device header.
 15817 00002337 5E                      	POP	SI
 15818 00002338 1F                      	POP	DS
 15819                                  	; 10/08/2018
 15820 00002339 E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15821                                  
 15822                                  ioctl_bad_fun:
 15823 0000233C B001                    	mov	al, error_invalid_function  ; 1
 15824 0000233E E9FFE2                  	jmp	SYS_RET_ERR	
 15825                                  
 15826                                  ioctl_bad_handlej:
 15827 00002341 E9FAFE                  	jmp	ioctl_bad_handle
 15828                                  
 15829                                  ;---------------------------------------------------------------------------
 15830                                  ;
 15831                                  ; IOCTL: AL = 8
 15832                                  ;
 15833                                  ; ENTRY: DS = DOSDATA
 15834                                  ;
 15835                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15836                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15837                                  ;         return address off the stack if the drive is invalid.
 15838                                  ;
 15839                                  ;-------------------------------------------------------------------------
 15840                                  
 15841                                  	; 30/01/2024
 15842                                  ioctl_rem_media:
 15843                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15844 00002344 E82401                  	CALL	Check_If_Net
 15845 00002347 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15846                                  					;   certainly don't know how to do this
 15847                                  					;   call.
 15848                                  	;test	word [es:di+4],800h
 15849                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15850                                  	;test	byte [es:di+5],8
 15851 00002349 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15852 0000234E 74EC                    	JZ	short ioctl_bad_fun		; NO
 15853                                  
 15854                                  ;hkn; SS override for IOCALL
 15855                                  	; 30/01/2024
 15856                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15857                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15858 00002350 C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15859 00002355 B00D                    	MOV	AL,REMHL  ; 13
 15860 00002357 88DC                    	MOV	AH,BL			; Unit number
 15861                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15862 00002359 A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15863 0000235C 31C0                    	XOR	AX,AX
 15864                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15865 0000235E A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15866                                  	
 15867 00002361 06                      	PUSH	ES
 15868 00002362 1F                      	POP	DS
 15869 00002363 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15870 00002365 16                      	PUSH	SS
 15871 00002366 07                      	POP	ES
 15872                                  
 15873                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15874                                  	; 30/01/2024
 15875                                  	; (ds <> ss, ss = DOSDATA segment)
 15876 00002367 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15877 0000236A 1E                      	push	ds
 15878 0000236B 56                      	push	si
 15879 0000236C E8FB21                  	call	DEVIOCALL2
 15880 0000236F 5E                      	pop	si
 15881 00002370 1F                      	pop	ds
 15882                                  
 15883                                  ;hkn; SS override
 15884 00002371 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15885                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15886                                  	; 29/01/2024
 15887 00002375 80E402                  	and	ah,STBUI>>8
 15888 00002378 B109                    	MOV	CL,9
 15889 0000237A D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15890                                  ioctl_da_ok_j:	; 11/11/2022
 15891 0000237C E9B8E2                  	jmp	SYS_RET_OK
 15892                                  
 15893                                  ;-------------------------------------------------------------------------
 15894                                  ;
 15895                                  ; IOCTL: AL = 9
 15896                                  ;
 15897                                  ; ENTRY: DS = DOSDATA
 15898                                  ;
 15899                                  ;-------------------------------------------------------------------------
 15900                                  
 15901                                  ioctl_drive_attr:
 15902                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15903 0000237F 88D8                    	mov	al,bl
 15904 00002381 E8FE45                  	call	GETTHISDRV
 15905 00002384 723E                    	jc	short ioctl_drv_err
 15906 00002386 E8B500                  	call	Get_Driver_BL
 15907                                  	; MSDOS 6.0
 15908 00002389 7239                    	JC	short ioctl_drv_err	; drive not valid
 15909                                  
 15910                                  	;mov	dx,[es:di+4]
 15911 0000238B 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15912                                  					; get device attribute word
 15913 0000238F 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15914                                  
 15915                                  ;hkn; SS override
 15916                                  	;LES	DI,[SS:THISCDS]
 15917                                  	; 30/01/2024
 15918 00002391 C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15919                                  
 15920                                  	;test	word [es:di+43h],8000h
 15921                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15922                                  	;test	byte [es:di+44h],80h
 15923 00002395 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15924 0000239A 7403                    	JZ	short IOCTLShare
 15925                                  
 15926                                  	;or	dx,1000h ; (MSDOS 3.3)
 15927                                  
 15928                                  ;	Net devices don't return a device attribute word.
 15929                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15930                                  
 15931 0000239C BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15932                                  
 15933                                  IOCTLShare:
 15934                                  	; 30/01/2024
 15935                                  	; ds = ss = DOSDATA segment
 15936                                  	;push	ss
 15937                                  	;pop	ds
 15938                                  
 15939 0000239F BE[BE03]                	MOV	SI,OPENBUF
 15940 000023A2 80C341                  	ADD	BL,"A"	; 41h
 15941 000023A5 881C                    	MOV	[SI],BL
 15942 000023A7 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15943 000023AC B80003                  	MOV	AX,0300h
 15944 000023AF F8                      	CLC
 15945                                  	;INT	int_IBM
 15946 000023B0 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15947                                  			; DS:SI -> ASCIZ disk device name 
 15948                                  			; (may be full path or only drive
 15949                                  			; specifier--must include the colon)
 15950                                  			; Return: CF clear if absolute disk access allowed
 15951 000023B2 7303                    	JNC	short IOCTLLocal	; Not shared
 15952                                  	;OR	DX,0200H		; Shared, bit 9
 15953                                  	; 17/12/2022
 15954 000023B4 80CE02                  	or	dh,02h
 15955                                  IOCTLLocal:
 15956                                  	;test	word [es:di+43h],1000h
 15957                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15958                                  	;test	byte [es:di+44h],10h
 15959 000023B7 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15960                                  	;JZ	short ioctl_set_DX
 15961                                  	; 16/12/2022
 15962 000023BC 7403                    	jz	short _ioctl_set_DX
 15963                                  	;OR	DX,8000h
 15964                                  	; 17/12/2022
 15965 000023BE 80CE80                  	or	dh,80h
 15966                                  ;ioctl_set_DX:
 15967                                  _ioctl_set_DX:
 15968                                  	; 16/12/2022
 15969 000023C1 E9BCFE                  	jmp	ioctl_set_dx
 15970                                  ; 16/12/2022
 15971                                  %if 0	
 15972                                  	call	Get_User_Stack
 15973                                  	MOV	[SI+user_env.user_DX],DX
 15974                                  	;;jmp	SYS_RET_OK
 15975                                  	;; 25/06/2019
 15976                                  	;jmp	SYS_RET_OK_clc
 15977                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15978                                  ioctl_gd_ok_j:
 15979                                  	jmp	short ioctl_da_ok_j
 15980                                  %endif
 15981                                  
 15982                                  ioctl_drv_err:
 15983 000023C4 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15984                                  ioctl_gd_err_j:	; 11/11/2022
 15985 000023C6 E977E2                  	jmp	SYS_RET_ERR
 15986                                  
 15987                                  ;--------------------------------------------------------------------------
 15988                                  ;
 15989                                  ; IOCTL: AL = A
 15990                                  ;
 15991                                  ; ENTRY: DS = DOSDATA
 15992                                  ;
 15993                                  ;--------------------------------------------------------------------------
 15994                                  
 15995                                  ioctl_handle_redir:
 15996 000023C9 E89241                  	call	SFFromHandle		; ES:DI -> SFT
 15997 000023CC 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15998 000023CE E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15999                                  
 16000                                  ioctl_got_sft:
 16001                                  	;mov	dx,[es:di+5]
 16002 000023D1 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 16003                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 16004                                  	; 16/12/2022
 16005 000023D5 EBEA                    	jmp	short _ioctl_set_DX
 16006                                  
 16007                                  	; 16/12/2022
 16008                                  ;ioctl_bad_funj:
 16009                                  	;JMP	ioctl_bad_fun
 16010                                  
 16011                                  ;--------------------------------------------------------------------------
 16012                                  ;
 16013                                  ; IOCTL: AL= 4,5
 16014                                  ;
 16015                                  ; ENTRY: DS = DOSDATA
 16016                                  ;	 SI = user's DS
 16017                                  ;
 16018                                  ;
 16019                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 16020                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16021                                  ;         return address off the stack if the drive is invalid.
 16022                                  ;
 16023                                  ;-------------------------------------------------------------------------
 16024                                  
 16025                                  ioctl_get_dev:
 16026 000023D7 E89100                  	CALL	Check_If_Net
 16027                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 16028                                  					; certainly don't know how to do this
 16029                                  					; call.
 16030                                  	; 16/12/2022
 16031 000023DA 7403                    	jz	short ioctl_do_string
 16032                                  ioctl_bad_funj:
 16033 000023DC E95DFF                  	JMP	ioctl_bad_fun
 16034                                  
 16035                                  ioctl_do_string:
 16036                                  	;test	word [es:di+4],4000h
 16037                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 16038                                  	;test	byte [es:di+5],40h
 16039 000023DF 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 16040 000023E4 74F6                    	JZ	short ioctl_bad_funj		; NO
 16041                                  					; assume IOCTL read
 16042 000023E6 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 16043                                  
 16044 000023EB A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16045 000023ED 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16046                                  
 16047                                  					; it is an IOCTL write
 16048 000023EF C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16049                                  
 16050                                  ioctl_control_call:
 16051 000023F4 B016                    	MOV	AL,DRDWRHL ; 22
 16052                                  ioctl_setup_pkt:
 16053 000023F6 88DC                    	MOV	AH,BL			; Unit number
 16054 000023F8 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16055 000023FB 31C0                    	XOR	AX,AX
 16056 000023FD A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16057 00002400 A2[8903]                	MOV	[IOMED],AL
 16058 00002403 890E[8E03]              	MOV	[IOSCNT],CX
 16059 00002407 8916[8A03]              	MOV	[IOXAD],DX
 16060 0000240B 8936[8C03]              	MOV	[IOXAD+2],SI
 16061 0000240F 06                      	PUSH	ES
 16062 00002410 1F                      	POP	DS
 16063 00002411 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16064 00002413 16                      	PUSH	SS
 16065 00002414 07                      	POP	ES
 16066                                  
 16067 00002415 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16068                                  ioctl_do_IO:
 16069 00002418 E84F21                  	call	DEVIOCALL2
 16070                                  
 16071                                  ;hkn; SS override for IOCALL
 16072                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16073                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16074                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16075 0000241B 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16076 00002421 7507                    	JNZ	short ioctl_string_err
 16077                                  
 16078                                  ;hkn; SS override
 16079 00002423 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16080                                  	; 16/12/2022
 16081 00002427 E90DE2                  	jmp	SYS_RET_OK
 16082                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16083                                  	;jmp	short ioctl_gd_ok_j
 16084                                  
 16085                                  ioctl_string_err:
 16086 0000242A 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16087                                  device_err:
 16088 0000242F 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16089 00002433 89F8                    	MOV	AX,DI
 16090 00002435 E8B32F                  	call	SET_I24_EXTENDED_ERROR
 16091                                  
 16092                                  ;hkn; use SS override
 16093                                  ;hkn;	mov	ax,[CS:EXTERR]
 16094 00002438 36A1[2403]              	mov	ax,[SS:EXTERR]
 16095                                  	;jmp	SYS_RET_ERR
 16096                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16097 0000243C EB88                    	jmp	short ioctl_gd_err_j
 16098                                  
 16099                                  ; 17/05/2019 - Retro DOS v4.0
 16100                                  
 16101                                  ;--------------------------------------------------------------------------
 16102                                  ; Proc name : Get_Driver_BL
 16103                                  ;
 16104                                  ;	DS is DOSDATA
 16105                                  ;	BL is drive number (0=default)
 16106                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16107                                  ;	No regs modified
 16108                                  ;
 16109                                  ;---------------------------------------------------------------------------
 16110                                  
 16111                                  	; 30/01/2024
 16112                                  Get_Driver_BL:
 16113 0000243E 50                      	PUSH	AX
 16114 0000243F 88D8                    	MOV	AL,BL			; Drive
 16115 00002441 E83E45                  	call	GETTHISDRV
 16116 00002444 7223                    	jc	short ioctl_bad_drv
 16117 00002446 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16118 00002448 C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16119 0000244D C43E[A205]              	LES	DI,[THISCDS]
 16120                                  	;test	word [es:di+43h],8000h
 16121                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16122                                  	;test	byte [es:di+44h],80h
 16123 00002451 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16124                                  	;les	di,[es:di+45h]
 16125 00002456 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16126 0000245A 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16127 0000245C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16128                                  	;mov	bl,[es:di+1]
 16129 00002461 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16130                                  	;les	di,[es:di+13h]
 16131 00002465 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16132                                  got_dev_ptr:
 16133                                  	; 30/01/2024
 16134                                  	; cf=0
 16135                                  	;CLC
 16136                                  ioctl_bad_drv:
 16137 00002469 58                      	POP	AX
 16138 0000246A C3                      	retn
 16139                                  
 16140                                  ;-------------------------------------------------------------------------
 16141                                  ; Proc Name : Check_If_Net:
 16142                                  ;
 16143                                  ;
 16144                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16145                                  ; If no device is found, the return address is popped off the stack, and a
 16146                                  ; jump is made to ioctl_drv_err.
 16147                                  ;
 16148                                  ; On Entry:
 16149                                  ; Registers same as those for Get_Driver_BL
 16150                                  ;
 16151                                  ; On Exit:
 16152                                  ; ZERO flag	- set if not a net device
 16153                                  ;		- reset if net device
 16154                                  ; ES:DI -> the device
 16155                                  ;
 16156                                  ;
 16157                                  ; BUGBUG: This function assumes the following stack setup on entry
 16158                                  ;
 16159                                  ;	  SP+2 -> Error return address
 16160                                  ;	  SP   -> Normal return address
 16161                                  ;
 16162                                  ;-------------------------------------------------------------------------
 16163                                  
 16164                                  	; 30/01/2024 - Retro DOS v5.0
 16165                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:639Ch
 16166                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6A91h
 16167                                  	; Windows ME IO.SYS - BIOSCODE:68E1h
 16168                                  
 16169                                  Check_If_Net:
 16170                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16171 0000246B E8D0FF                  	CALL	Get_Driver_BL
 16172 0000246E 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16173                                  
 16174                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16175                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16176                                  %if 0
 16177                                  	;;;
 16178                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16179                                  	PUSH	ES
 16180                                  	PUSH	DI
 16181                                  	LES	DI,[THISCDS]
 16182                                  	;test	word [es:di+43h],8000h
 16183                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16184                                  	;test	byte [es:di+44h],80h
 16185                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16186                                  	POP	DI
 16187                                  	POP	ES
 16188                                  	;;;
 16189                                  %endif
 16190 00002470 C3                      	retn
 16191                                  
 16192                                  ioctl_drv_err_pop:
 16193 00002471 58                      	pop	ax			; pop off return address
 16194 00002472 E94FFF                  	jmp	ioctl_drv_err
 16195                                  
 16196                                  ioctl_bad_funj3:
 16197 00002475 E9C4FE                  	jmp	ioctl_bad_fun
 16198                                  
 16199                                  ioctl_string_errj:
 16200 00002478 EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16201                                  
 16202                                  ;--------------------------------------------------------------------------
 16203                                  ;
 16204                                  ; IOCTL: AL = E, F
 16205                                  ;
 16206                                  ; ENTRY: DS = DOSDATA
 16207                                  ;
 16208                                  ;
 16209                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16210                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16211                                  ;         return address off the stack if the drive is invalid.
 16212                                  ;
 16213                                  ;--------------------------------------------------------------------------
 16214                                  
 16215                                  ioctl_drive_owner:
 16216                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16217 0000247A E8EEFF                  	Call	Check_If_Net
 16218 0000247D 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16219                                  					;   certainly don't know how to do this
 16220                                  					;   call.
 16221                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16222                                  	; 09/09/2018
 16223                                  	;test	byte [es:di+4],40h
 16224 0000247F 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16225 00002484 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16226                                  	;mov	byte [IOCALL_REQFUNC],23
 16227 00002486 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16228 0000248B 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16229 0000248D 7405                    	jz	short GetOwner
 16230                                  SetOwner:
 16231 0000248F C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16232                                  GetOwner:
 16233 00002494 B00D                    	MOV	AL,OWNHL ; 13
 16234 00002496 88DC                    	MOV	AH,BL			; Unit number
 16235 00002498 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16236 0000249B 31C0                    	XOR	AX,AX
 16237 0000249D A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16238 000024A0 06                      	PUSH	ES
 16239 000024A1 1F                      	POP	DS
 16240 000024A2 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16241 000024A4 16                      	PUSH	SS
 16242 000024A5 07                      	POP	ES
 16243 000024A6 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16244 000024A9 1E                      	push	ds
 16245 000024AA 56                      	push	si
 16246 000024AB E8BC20                  	call	DEVIOCALL2
 16247 000024AE 5E                      	pop	si
 16248 000024AF 1F                      	pop	ds
 16249                                  ;hkn; SS override
 16250                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16251                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16252 000024B0 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16253 000024B6 75C0                    	jnz	short ioctl_string_errj
 16254 000024B8 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16255                                  					; owner returned is 1-based.
 16256 000024BC E978E1                  	jmp	SYS_RET_OK
 16257                                  
 16258                                  ;============================================================================
 16259                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16260                                  ;============================================================================
 16261                                  ; 07/08/2018 - Retro DOS v3.0
 16262                                  ; 17/05/2019 - Retro DOS v4.0
 16263                                  
 16264                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16265                                  ;	NAME	DOS_DELETE
 16266                                  
 16267                                  ;
 16268                                  ;	Microsoft Confidential
 16269                                  ;	Copyright (C) Microsoft Corporation 1991
 16270                                  ;	All Rights Reserved.
 16271                                  ;
 16272                                  
 16273                                  ;**	DELETE.ASM - Low level routine for deleting files
 16274                                  ;----------------------------------------------------------------------------
 16275                                  ;		DOS_DELETE
 16276                                  ;		REN_DEL_Check
 16277                                  ;		FastOpen_Delete	       ; DOS 3.3
 16278                                  ;		FastOpen_Update	       ; DOS 3.3
 16279                                  
 16280                                  ;   Revision history:
 16281                                  ;
 16282                                  ;   A000  version 4.00	Jan. 1988
 16283                                  ;   A001  Fastopen Rename fix	April 1989
 16284                                  
 16285                                  ;Installed = TRUE
 16286                                  
 16287                                  ;	i_need	NoSetDir,BYTE
 16288                                  ;	i_need	Creating,BYTE
 16289                                  ;	i_need	DELALL,BYTE
 16290                                  ;	i_need	THISDPB,DWORD
 16291                                  ;	i_need	THISSFT,DWORD
 16292                                  ;	i_need	THISCDS,DWORD
 16293                                  ;	i_need	CURBUF,DWORD
 16294                                  ;	i_need	ATTRIB,BYTE
 16295                                  ;	i_need	SATTRIB,BYTE
 16296                                  ;	i_need	WFP_START,WORD
 16297                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16298                                  ;	i_need	NAME1,BYTE			 ;BN001
 16299                                  ;	i_need	FoundDel,BYTE
 16300                                  ;	i_need	AUXSTACK,BYTE
 16301                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16302                                  ;	i_need	JShare,DWORD
 16303                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16304                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16305                                  ;
 16306                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16307                                  ;
 16308                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16309                                  ;	i_need	DMAADD,DWORD
 16310                                  ;	i_need	RENAMEDMA,BYTE
 16311                                  
 16312                                  ;----------------------------------------------------------------------------
 16313                                  ;
 16314                                  ; Procedure Name : DOS_DELETE
 16315                                  ;
 16316                                  ; Inputs:
 16317                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16318                                  ;		terminated)
 16319                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16320                                  ;		( = -1 if current dir not involved, else
 16321                                  ;		 Points to first char after last "/" of current dir part)
 16322                                  ;	[THISCDS] Points to CDS being used
 16323                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16324                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16325                                  ; Function:
 16326                                  ;	Delete the specified file(s)
 16327                                  ; Outputs:
 16328                                  ;	CARRY CLEAR
 16329                                  ;		OK
 16330                                  ;	CARRY SET
 16331                                  ;	    AX is error code
 16332                                  ;		error_file_not_found
 16333                                  ;			Last element of path not found
 16334                                  ;		error_path_not_found
 16335                                  ;			Bad path (not in curr dir part if present)
 16336                                  ;		error_bad_curr_dir
 16337                                  ;			Bad path in current directory part of path
 16338                                  ;		error_access_denied
 16339                                  ;			Attempt to delete device or directory
 16340                                  ;		***error_sharing_violation***
 16341                                  ;			Deny both access required, generates an INT 24.
 16342                                  ;			This error is NOT returned. The INT 24H is generated,
 16343                                  ;			  and the file is ignored (not deleted). Delete will
 16344                                  ;			  simply continue on looking for more files.
 16345                                  ;			  Carry will NOT be set in this case.
 16346                                  ; DS preserved, others destroyed
 16347                                  ;
 16348                                  ;----------------------------------------------------------------------------
 16349                                  
 16350                                  FILEFOUND   equ 01h
 16351                                  FILEDELETED equ 10h
 16352                                  
 16353                                  
 16354                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16355                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16356                                  
 16357                                  	; 30/01/2024
 16358                                  
 16359                                  DOS_DELETE:
 16360                                  
 16361                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16362                                  ;hkn; appropriately at this point.
 16363                                  
 16364 000024BF E86FED                  	call	TestNet
 16365 000024C2 7306                    	JNC	short LOCAL_DELETE
 16366                                  
 16367                                  ;IF NOT Installed
 16368                                  ;	transfer NET_DELETE
 16369                                  ;ELSE
 16370                                  	;MOV	AX,(MultNET SHL 8) | 19
 16371                                  	;INT	2FH
 16372                                  	;return
 16373                                  
 16374 000024C4 B81311                  	mov	ax,1113h
 16375 000024C7 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16376                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16377                                  			;		fully-qualified filename in DOS CS
 16378                                  			; SDA CDS pointer -> current directory structure for drive with file
 16379                                  			; Return: CF set on error
 16380 000024C9 C3                      	retn
 16381                                  ;ENDIF
 16382                                  
 16383                                  LOCAL_DELETE:
 16384 000024CA C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16385 000024CF E821EE                  	call	ECritDisk
 16386                                  	;mov	word [CREATING],0E500h
 16387 000024D2 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16388 000024D8 8B36[B205]              	MOV	SI,[WFP_START]
 16389                                  SKPNUL:
 16390 000024DC AC                      	LODSB
 16391 000024DD 08C0                    	OR	AL,AL
 16392 000024DF 75FB                    	JNZ	short SKPNUL		; go to end
 16393 000024E1 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16394 000024E4 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16395 000024E8 7506                    	JNZ	short TEST_QUEST
 16396 000024EA 807C022A                	CMP	BYTE [SI+2],"*"
 16397 000024EE 741F                    	JZ	short CHECK_ATTS
 16398                                  TEST_QUEST:
 16399 000024F0 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16400 000024F3 87FE                    	XCHG	DI,SI
 16401                                  
 16402 000024F5 16                      	push	ss
 16403                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16404 000024F6 07                      	pop	es ; 17/05/2019
 16405                                  
 16406 000024F7 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16407 000024FA B90400                  	MOV	CX,4		; four sets of "??"
 16408 000024FD F3AF                    	REPE	SCASW
 16409 000024FF 751C                    	JNZ	short NOT_ALL
 16410 00002501 87FE                    	XCHG	DI,SI
 16411 00002503 AD                      	LODSW
 16412 00002504 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16413 00002507 7514                    	JNZ	short NOT_ALL
 16414 00002509 AD                      	LODSW
 16415 0000250A 3D3F3F                  	CMP	AX,"??"
 16416 0000250D 750E                    	JNZ	short NOT_ALL
 16417                                  CHECK_ATTS:
 16418 0000250F A0[6D05]                	MOV	AL,[SATTRIB]
 16419                                  	;and	al,1Fh
 16420 00002512 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16421                                  					; Look only at hidden bits
 16422                                  	;cmp	al,1Fh
 16423 00002514 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16424                                  					; All must be set
 16425 00002516 7505                    	JNZ	short NOT_ALL
 16426                                  
 16427                                  ; NOTE WARNING DANGER-----
 16428                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16429                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16430                                  
 16431 00002518 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16432                                  NOT_ALL:
 16433 0000251D C606[4C03]01            	MOV	byte [NoSetDir],1
 16434 00002522 E81819                  	call	GetPathNoSet
 16435 00002525 7312                    	JNC	short Del_found
 16436 00002527 750B                    	JNZ	short _bad_path
 16437 00002529 08C9                    	OR	CL,CL
 16438 0000252B 7407                    	JZ	short _bad_path
 16439                                  No_file:
 16440 0000252D B80200                  	MOV	AX,error_file_not_found
 16441                                  ErrorReturn:
 16442 00002530 F9                      	STC
 16443                                  	;call	LCritDisk
 16444                                  	;retn
 16445                                  	; 18/12/2022
 16446 00002531 E9DAED                  	jmp	LCritDisk
 16447                                  
 16448                                  _bad_path:
 16449 00002534 B80300                  	MOV	AX,error_path_not_found
 16450 00002537 EBF7                    	JMP	short ErrorReturn
 16451                                  
 16452                                  Del_found:
 16453 00002539 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16454 0000253B 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16455 00002540 7405                    	JZ	short NOT_DIR
 16456                                  Del_access_err:
 16457 00002542 B80500                  	MOV	AX,error_access_denied
 16458 00002545 EBE9                    	JMP	short ErrorReturn
 16459                                  
 16460                                  NOT_DIR:
 16461 00002547 08E4                    	OR	AH,AH			; Check if device name
 16462 00002549 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16463                                  
 16464                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16465                                  
 16466                                  DELFILE:
 16467 0000254B 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16468                                  
 16469                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16470                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16471                                  
 16472 00002550 1E                      	PUSH	DS
 16473 00002551 8A26[7F05]              	MOV	AH,[DELALL]
 16474 00002555 C53E[E205]              	LDS	DI,[CURBUF]
 16475                                  	
 16476                                  ;hkn; SS override
 16477 00002559 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16478 0000255F 7509                    	JNZ	short DoDelete		; yes
 16479                                  
 16480 00002561 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16481 00002565 7403                    	JZ	short DoDelete		; not read only
 16482                                  
 16483                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16484                                  Skip_it:
 16485 00002567 1F                      	POP	DS
 16486 00002568 EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16487                                  
 16488                                  DoDelete:
 16489 0000256A E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16490                                  	;JNC	short DEL_SHARE_OK
 16491                                  	;POP	DS
 16492                                  	;JMP	SHORT DELNXT		; Skip it
 16493                                  	; 30/01/2024
 16494 0000256D 72F8                    	jc	short Skip_it
 16495                                  
 16496                                  DEL_SHARE_OK:
 16497                                  	; 17/05/2019 - Retro DOS v4.0
 16498                                  	; MSDOS 6.0
 16499                                  	;test	byte [di+5],40h
 16500 0000256F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16501                                  					;LB. if already dirty		  ;AN000;
 16502 00002573 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16503 00002575 E8C534                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16504                                  	;or	byte [di+5],40h
 16505 00002578 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16506                                  yesdirty:
 16507 0000257C 8827                    	mov	[bx],ah 
 16508                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16509 0000257E 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16510 00002580 1F                      	POP	DS
 16511 00002581 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16512                                  
 16513 00002586 83FB02                  	CMP	BX,2
 16514 00002589 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16515                                  	;cmp	bx,[es:bp+0Dh]
 16516 0000258B 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16517 0000258F 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16518                                  
 16519 00002591 E82328                  	call	RELEASE 		; Free file data
 16520 00002594 7252                    	JC	short No_fileJ
 16521                                  
 16522                                  ; DOS 3.3  FastOpen
 16523                                  
 16524 00002596 E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16525                                  
 16526                                  ; DOS 3.3  FastOpen
 16527                                  
 16528                                  DELNXT:
 16529 00002599 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16530 0000259D E80A18                  	call	GETENTRY		; Registers need to be reset
 16531 000025A0 7246                    	JC	short No_fileJ
 16532 000025A2 E84517                  	call	NEXTENT
 16533 000025A5 73A4                    	JNC	short DELFILE
 16534 000025A7 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16535                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16536                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16537                                  	;;mov	al,[es:bp+0]
 16538                                  	; 15/12/2022
 16539 000025AB 268A4600                	MOV	AL,[ES:BP]
 16540 000025AF E88633                  	call	FLUSHBUF
 16541 000025B2 7234                    	JC	short No_fileJ
 16542                                  ;
 16543                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16544                                  ;
 16545                                  ;   not found not deleted		file not found
 16546                                  ;   not found	  deleted		*** impossible ***
 16547                                  ;	found not deleted		access denied (read-only)
 16548                                  ;	found	  deleted		no error
 16549                                  ;
 16550 000025B4 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16551 000025B9 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16552                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16553                                  ; and to force the DOS to issue a media check.
 16554 000025BB F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16555 000025C0 741C                    	jz	short No_Set_Flag
 16556 000025C2 50                      	PUSH	AX
 16557 000025C3 06                      	PUSH	ES
 16558 000025C4 57                      	PUSH	DI
 16559 000025C5 C43E[A205]              	LES	DI,[THISCDS]
 16560 000025C9 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16561 000025CC 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16562 000025CF 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16563                                  	
 16564                                  	; MSDOS 6.0
 16565 000025D3 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16566 000025D5 E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16567                                  	 
 16568 000025D8 E8E42F                  	call	FATREAD_CDS		; force media check
 16569 000025DB 5F                      	POP	DI
 16570 000025DC 07                      	POP	ES
 16571 000025DD 58                      	POP	AX
 16572                                  No_Set_Flag:
 16573                                  	;call	LCritDisk		; carry is clear
 16574                                  	;retn
 16575                                  	; 18/12/2022
 16576 000025DE E92DED                  	jmp	LCritDisk
 16577                                  DelError:
 16578 000025E1 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16579 000025E6 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16580                                  No_fileJ:
 16581 000025E8 E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16582                                  Del_access_errJ:
 16583 000025EB E954FF                  	JMP	Del_access_err ; 10/08/2018
 16584                                  
 16585                                  ; 08/08/2018 - Retro DOS v3.0
 16586                                  
 16587                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16588                                  ;---------------------------------------------------------------------------
 16589                                  ; Procedure Name : REN_DEL_Check
 16590                                  ;
 16591                                  ; Inputs:
 16592                                  ;	[THISDPB] set
 16593                                  ;	[CURBUF+2]:BX points to entry
 16594                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16595                                  ;	[WFP_Start] points to name
 16596                                  ; Function:
 16597                                  ;	Check for Exclusive access on given file.
 16598                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16599                                  ; Outputs:
 16600                                  ;	ES:BP = [THISDPB]
 16601                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16602                                  ;		last element will be loaded from the directory entry.  This is
 16603                                  ;		so the name given to the sharer doesn't have any meta chars in
 16604                                  ;		it.
 16605                                  ;	Carry set if sharing violation, INT 24H generated
 16606                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16607                                  ;		This is because input AX is preserved.
 16608                                  ;		Caller must set the error if needed.
 16609                                  ;	Carry clear
 16610                                  ;		OK
 16611                                  ; AX,DS,BX,SI,DI preserved
 16612                                  ;---------------------------------------------------------------------------
 16613                                  
 16614                                  REN_DEL_Check:
 16615                                  
 16616 000025EE 1E                      	PUSH	DS
 16617 000025EF 57                      	PUSH	DI
 16618 000025F0 50                      	PUSH	AX
 16619 000025F1 53                      	PUSH	BX
 16620 000025F2 56                      	PUSH	SI		; Save CURBUF pointers
 16621                                  	
 16622 000025F3 16                      	push	ss
 16623 000025F4 07                      	pop	es
 16624                                  
 16625                                  ;hkn; context ES will assume ES to DOSDATA
 16626                                  ;hkn; ASSUME	ES:DOSGROUP
 16627                                  
 16628                                  ;hkn; SS override
 16629 000025F5 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16630 000025FA 89DE                    	MOV	SI,BX
 16631                                  
 16632                                  ;hkn; SS override
 16633 000025FC 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16634 00002601 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16635                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16636                                  	; 31/01/2024
 16637 00002603 43                      	inc	bx
 16638 00002604 43                      	inc	bx
 16639 00002605 E8C9EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16640 00002608 49                      	DEC	CX		; Don't include nul in count
 16641 00002609 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16642 0000260B E82E46                  	call	SkipBack	; Back up one element
 16643 0000260E 47                      	INC	DI		; Point to start of last element
 16644                                  
 16645                                  	; 17/05/2019 - Retro DOS v4.0
 16646                                  ;hkn; SS override
 16647                                  	; MSDOS 6.0
 16648 0000260F 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16649                                  	;
 16650 00002614 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16651 00002617 5E                      	POP	SI		; Get back entry pointers
 16652 00002618 5B                      	POP	BX
 16653 00002619 53                      	PUSH	BX
 16654 0000261A 56                      	PUSH	SI		; Back on stack
 16655                                  	
 16656 0000261B 16                      	push	ss
 16657 0000261C 1F                      	pop	ds
 16658                                  
 16659                                  ;hkn; context DS will assume ES to DOSDATA
 16660                                  ;hkn; ASSUME	DS:DOSGROUP
 16661                                  
 16662                                  ; Close the file if possible by us.
 16663                                  ;
 16664                                  ;if installed
 16665 0000261D FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16666                                  ;else
 16667                                  ;	Call	ShCloseFile
 16668                                  ;endif
 16669 00002621 8C1E[A005]              	MOV	[THISSFT+2],DS
 16670                                  
 16671                                  ;hkn; AUXSTACK is in DOSDATA
 16672 00002625 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16673                                  				; Scratch space
 16674 0000262B 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16675 0000262D E81A24                  	call	DOOPEN		; Fill in SFT for share check
 16676 00002630 C43E[9E05]              	LES	DI,[THISSFT]
 16677                                  	;mov	word [es:di+2],10h
 16678 00002634 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16679                                  				; requires exclusive access
 16680                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16681 0000263A 26C7050100              	mov	word [ES:DI],1
 16682 0000263F E81E4C                  	call	ShareEnter
 16683 00002642 720D                    	jc	short CheckDone
 16684 00002644 C43E[9E05]              	LES	DI,[THISSFT]
 16685                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16686 00002648 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16687                                  	
 16688 0000264D E80B4C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16689 00002650 F8                      	CLC
 16690                                  CheckDone:
 16691 00002651 C42E[8A05]              	LES	BP,[THISDPB]
 16692 00002655 5E                      	POP	SI
 16693 00002656 5B                      	POP	BX
 16694 00002657 58                      	POP	AX
 16695 00002658 5F                      	POP	DI
 16696 00002659 1F                      	POP	DS
 16697 0000265A C3                      	retn
 16698                                  
 16699                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16700                                  ;---------------------------------------------------------------------------
 16701                                  ; Procedure Name : FastOpen_Delete
 16702                                  ; Inputs:
 16703                                  ;	None
 16704                                  ; Function:
 16705                                  ;	Call FastOpen to delete the dir info.
 16706                                  ; Outputs:
 16707                                  ;	None
 16708                                  ;---------------------------------------------------------------------------
 16709                                  
 16710                                  	; 31/01/2024
 16711                                  
 16712                                  FastOpen_Delete:
 16713 0000265B 9C                      	PUSHF			; save flag
 16714 0000265C 56                      	PUSH	SI		; save registers
 16715 0000265D 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16716 0000265E 53                      	PUSH	BX
 16717 0000265F 50                      	PUSH	AX
 16718                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16719                                  ;hkn; SS override
 16720                                  	; 17/05/2019 - Retro DOS v4.0
 16721                                  	; MSDOS 6.0
 16722 00002660 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16723                                  	
 16724 00002665 B003                    	MOV	AL,FONC_delete	; al = 3
 16725                                  
 16726                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16727                                  %if 0 
 16728                                  fastinvoke:
 16729                                  ;hkn; FastTable is in DOSDATA
 16730                                  	MOV	BX,FastTable+2
 16731                                  	CALL	far [BX]	; call fastopen
 16732                                  	POP	AX		; restore registers
 16733                                  	POP	BX
 16734                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16735                                  	POP	SI
 16736                                  	POPF			; restore flag
 16737                                  	retn
 16738                                  %else
 16739 00002667 EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16740                                  %endif
 16741                                  
 16742                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16743                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16744                                  
 16745                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16746                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16747                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16748                                  
 16749                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16750                                  ;---------------------------------------------------------------------------
 16751                                  ; PROCEDURE Name : FastOpen_Rename
 16752                                  ;
 16753                                  ; Inputs:
 16754                                  ;	 REN_WFP   = Path Name
 16755                                  ;	 NAME1	   = New Name
 16756                                  ; Function:
 16757                                  ;	Call FastOpen to rename the dir entry in the cache
 16758                                  ; Outputs:
 16759                                  ;	None
 16760                                  ;---------------------------------------------------------------------------
 16761                                  
 16762                                  FastOpen_Rename:
 16763                                  	; 17/05/2019 - Retro DOS v4.0
 16764                                  	; 08/08/2018 - Retro DOS v3.0
 16765                                  	; MSDOS 6.0
 16766 00002669 9C                      	PUSHF			;AN001 save flag
 16767 0000266A 56                      	PUSH	SI		;AN001 save registers
 16768 0000266B 57                      	PUSH	DI		;AN001
 16769 0000266C 53                      	PUSH	BX		;AN001
 16770 0000266D 50                      	PUSH	AX		;AN001
 16771                                  	;
 16772                                  ;hkn; SS override
 16773 0000266E 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16774                                  
 16775                                  ;hkn; NAME1 is in DOSDATA
 16776 00002673 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16777                                  	;mov	al,6
 16778 00002676 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16779                                  
 16780                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16781                                  	
 16782                                  ;hkn; FastTable is in DOSDATA
 16783 00002678 BB[320D]                	MOV	BX,FastTable+2
 16784 0000267B FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16785                                  	
 16786 0000267D 58                      	POP	AX		; restore registers  ;AN001
 16787 0000267E 5B                      	POP	BX				     ;AN001
 16788 0000267F 5F                      	POP	DI				     ;AN001
 16789 00002680 5E                      	POP	SI				     ;AN001
 16790 00002681 9D                      	POPF			; restore flag	     ;AN001
 16791 00002682 C3                      	retn					     ;AN001
 16792                                  
 16793                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16794                                  ;---------------------------------------------------------------------------
 16795                                  ; Procedure Name : FastOpen_Update
 16796                                  ;
 16797                                  ; Inputs:
 16798                                  ;	DL     drive number (A=0,B=1,,,)
 16799                                  ;	CX     first cluster #
 16800                                  ;	AH     0 updates dir entry
 16801                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16802                                  ;	ES:DI  directory entry
 16803                                  ; Function:
 16804                                  ;	Call FastOpen to update the dir info.
 16805                                  ; Outputs:
 16806                                  ;	None
 16807                                  ;---------------------------------------------------------------------------
 16808                                  
 16809                                  FastOpen_Update:
 16810 00002683 9C                      	PUSHF			; save flag
 16811 00002684 56                      	PUSH	SI
 16812 00002685 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16813 00002686 53                      	PUSH	BX		; save regs
 16814 00002687 50                      	PUSH	AX
 16815 00002688 B004                    	MOV	AL,FONC_update	; al = 4
 16816 0000268A EBEC                    	JMP	short fastinvoke
 16817                                  
 16818                                  	; 17/05/2019
 16819                                  
 16820                                  	; MSDOS 6.0
 16821                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16822                                  ;---------------------------------------------------------------------------
 16823                                  Fast_Dispatch:
 16824                                  ;hkn; FastTable is in DOSDATA
 16825 0000268C BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16826                                  ;hkn; use SS override
 16827 0000268F 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16828 00002692 C3                      	retn
 16829                                  
 16830                                  ;============================================================================
 16831                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16832                                  ;============================================================================
 16833                                  ; 08/08/2018 - Retro DOS v3.0
 16834                                  ; 17/05/2019 - Retro DOS v4.0
 16835                                  
 16836                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16837                                  ;	NAME	DOS_RENAME
 16838                                  
 16839                                  ;**	Low level routine for renaming files
 16840                                  ;----------------------------------------------------------------------------
 16841                                  ;	DOS_RENAME
 16842                                  ;
 16843                                  ;	Modification history:
 16844                                  ;
 16845                                  ;	    Created: ARR 30 March 1983
 16846                                  
 16847                                  ;----------------------------------------------------------------------------
 16848                                  ;
 16849                                  ; Procedure Name : DOS_RENAME
 16850                                  ;
 16851                                  ; Inputs:
 16852                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16853                                  ;		chars, NUL terminated)
 16854                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16855                                  ;		( = -1 if current dir not involved, else
 16856                                  ;		 Points to first char after last "/" of current dir part)
 16857                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16858                                  ;		chars, NUL terminated)
 16859                                  ;	[THISCDS] Points to CDS being used
 16860                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16861                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16862                                  ; Function:
 16863                                  ;	Rename the specified file(s)
 16864                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16865                                  ; Outputs:
 16866                                  ;	CARRY CLEAR
 16867                                  ;	    OK
 16868                                  ;	CARRY SET
 16869                                  ;	    AX is error code
 16870                                  ;		error_file_not_found
 16871                                  ;			No match for source, or dest path invalid
 16872                                  ;		error_not_same_device
 16873                                  ;			Source and dest are on different devices
 16874                                  ;		error_access_denied
 16875                                  ;			Directory specified (not simple rename),
 16876                                  ;			Device name given, Destination exists.
 16877                                  ;			NOTE: In third case some renames may have
 16878                                  ;			 been done if metas.
 16879                                  ;		error_path_not_found
 16880                                  ;			Bad path (not in curr dir part if present)
 16881                                  ;			SOURCE ONLY
 16882                                  ;		error_bad_curr_dir
 16883                                  ;			Bad path in current directory part of path
 16884                                  ;			SOURCE ONLY
 16885                                  ;		error_sharing_violation
 16886                                  ;			Deny both access required, generates an INT 24.
 16887                                  ; DS preserved, others destroyed
 16888                                  ;
 16889                                  ;----------------------------------------------------------------------------
 16890                                  
 16891                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16892                                  
 16893                                  	; 31/01/2024
 16894                                  
 16895                                  DOS_RENAME:
 16896                                  
 16897                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16898                                  ;hkn; at this point to DOSDATA.
 16899                                  
 16900 00002693 E89BEB                  	call	TestNet
 16901 00002696 7306                    	JNC	short LOCAL_RENAME
 16902                                  
 16903                                  ;IF NOT Installed
 16904                                  ;	transfer NET_RENAME
 16905                                  ;ELSE
 16906                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16907                                  	;INT	2FH
 16908                                  	;return
 16909                                  
 16910 00002698 B81111                  	mov     ax, 1111h
 16911 0000269B CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16912                                  			; SS = DS = DOS CS, 
 16913                                  			; SDA first filename pointer = offset of fully-qualified old name
 16914                                  			; SDA CDS pointer -> current directory
 16915                                  			; Return: CF set on error
 16916 0000269D C3                      	retn
 16917                                  ;ENDIF
 16918                                  
 16919                                  LOCAL_RENAME:
 16920 0000269E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16921 000026A3 8B36[B205]              	MOV	SI,[WFP_START]
 16922 000026A7 8B3E[B405]              	MOV	DI,[REN_WFP]
 16923 000026AB 8A04                    	MOV	AL,[SI]
 16924 000026AD 8A25                    	MOV	AH,[DI]
 16925 000026AF 0D2020                  	OR	AX,2020H		; Lower case
 16926 000026B2 38E0                    	CMP	AL,AH
 16927 000026B4 7405                    	JZ	short SAMEDRV
 16928 000026B6 B81100                  	MOV	AX,error_not_same_device ; 11h
 16929 000026B9 F9                      	STC
 16930 000026BA C3                      	retn
 16931                                  
 16932                                  SAMEDRV:
 16933 000026BB FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16934 000026BF FF36[2C03]              	PUSH	WORD [DMAADD]
 16935 000026C3 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16936                                  
 16937                                  ;hkn; RENAMEDMA is in DOSDATA
 16938 000026C7 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16939 000026CD C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16940 000026D2 E81EEC                  	call	ECritDisk
 16941 000026D5 E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16942                                  					;    points to entry
 16943 000026D8 7314                    	JNC	short Check_Dev
 16944 000026DA 83F812                  	CMP	AX,error_no_more_files ; 12h
 16945 000026DD 7503                    	JNZ	short GOTERR
 16946 000026DF B80200                  	MOV	AX,error_file_not_found ; 2
 16947                                  GOTERR:
 16948 000026E2 F9                      	STC
 16949                                  RENAME_POP:
 16950 000026E3 8F06[2C03]              	POP	WORD [DMAADD]
 16951 000026E7 8F06[2E03]              	POP	WORD [DMAADD+2]
 16952                                  	;call	LCritDisk
 16953                                  	;retn
 16954                                  	; 16/12/2022
 16955 000026EB E920EC                  	jmp	LCritDisk
 16956                                  
 16957                                  Check_Dev:
 16958                                  	; 17/05/2019 - Retro DOS v4.0
 16959                                  	;mov	ax,5
 16960 000026EE B80500                  	MOV	AX,error_access_denied	; Assume error
 16961                                  	
 16962                                  	; MSDOS 6.0
 16963 000026F1 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16964 000026F2 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16965                                  	;add	si,21
 16966 000026F6 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16967                                  	;test	byte [si+11],10h
 16968 000026F9 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16969 000026FD 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16970 000026FF 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16971 00002703 E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16972                                  notdir:
 16973 00002706 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16974 00002707 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16975                                  
 16976                                  	; MSDOS 3.3 & MSDOS 6.0
 16977 00002709 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16978 0000270E 75D2                    	JNZ	short GOTERR
 16979                                  
 16980                                  ; At this point a source has been found. There is search continuation info (a
 16981                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16982                                  ; directory entry found.
 16983                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16984                                  ; throughout the RENAME since it is known at this point that the source and
 16985                                  ; destination are both on the same device.
 16986                                  ; [SATTRIB] is also set.
 16987                                  
 16988 00002710 89DE                    	MOV	SI,BX
 16989                                  	;add	si,26
 16990 00002712 83C61A                  	ADD	SI,dir_entry.dir_first
 16991 00002715 E8D6FE                  	call	REN_DEL_Check
 16992 00002718 7305                    	JNC	short REN_OK1
 16993 0000271A B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16994 0000271D EBC4                    	JMP	short RENAME_POP
 16995                                  
 16996                                  ;------------------------------------------------------------------------------
 16997                                  ; Check if the source is a file or directory. If file, delete the entry
 16998                                  ; from the Fastopen cache. If directory, rename it later
 16999                                  ;------------------------------------------------------------------------------
 17000                                  
 17001                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 17002                                  	; MSDOS 6.0
 17003                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 17004                                  	;PUSH	SI
 17005 0000271F C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 17006                                  	;add	si,21
 17007 00002723 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17008                                  	;test	byte [si+11],10h
 17009 00002726 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 17010                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 17011 0000272A 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 17012                                  	;POP	SI			;BN00X
 17013                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 17014                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 17015                                  	;POP	SI
 17016                                  
 17017                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17018 0000272C E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 17019                                  SWAP_SOURCE:
 17020                                  	; MSDOS 3.3
 17021                                  	;MOV	SI,[REN_WFP]
 17022                                  	;MOV	[WFP_START],SI
 17023                                  	; MSDOS 6.0
 17024 0000272F A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 17025 00002732 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 17026 00002736 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 17027 0000273A A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 17028                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17029 0000273D C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 17030                                  	;mov	word [CREATING],0E5FFh
 17031 00002743 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 17032                                  					; A rename is like a CREATE_NEW as far
 17033                                  					; as the destination is concerned.
 17034 00002749 E8F116                  	call	GetPathNoSet
 17035                                  
 17036                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 17037                                  ;   since no files match the destination name. If it fails for any other
 17038                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 17039                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 17040                                  ;   if the rename should fail because we haven't built an explicit name by
 17041                                  ;   substituting for the meta chars in it. In this case the destination file
 17042                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 17043                                  ;   in the directory entry part.
 17044                                  	
 17045 0000274C 7223                    	JC	short NODEST
 17046                                  	
 17047                                  	; MSDOS 6.0
 17048                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 17049                                  	; !! MSDOS 3.3 !!
 17050                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17051                                  
 17052 0000274E 08E4                    	OR	AH,AH			; Device?
 17053 00002750 792C                    	JNS	short SAVEDEST		; No, continue
 17054                                  BAD_ACC:
 17055 00002752 B80500                  	MOV	AX,error_access_denied
 17056 00002755 F9                      	STC
 17057                                  RENAME_CLEAN:
 17058 00002756 9C                      	PUSHF				; Save carry state
 17059 00002757 50                      	PUSH	AX			; and error code (if carry set)
 17060 00002758 A0[7605]                	MOV	AL,[THISDRV]
 17061 0000275B E8DA31                  	call	FLUSHBUF
 17062 0000275E 58                      	POP	AX
 17063 0000275F 803E[4A03]00            	CMP	byte [FAILERR],0
 17064 00002764 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17065 00002766 9D                      	POPF
 17066 00002767 E979FF                  	JMP	RENAME_POP
 17067                                  
 17068                                  BAD_ERR:
 17069 0000276A 58                      	POP	AX			; Saved flags
 17070                                  	; 16/12/202
 17071                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17072                                  BAD_PATH: ; *
 17073 0000276B B80300                  	MOV	AX,error_path_not_found
 17074 0000276E E971FF                  	JMP	GOTERR
 17075                                  
 17076                                  NODEST:
 17077 00002771 75F8                    	JNZ	short BAD_PATH
 17078 00002773 803E[4A03]00            	CMP	byte [FAILERR],0
 17079 00002778 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17080                                  					; because user FAILed on I 24
 17081                                  	; 14/11/2022
 17082 0000277A 08C9                    	OR	CL,CL
 17083                                  	;JNZ	short SAVEDEST
 17084                                  	; 17/05/2019
 17085 0000277C 74ED                    	jz	short BAD_PATH ; *
 17086                                  ;BAD_PATH: ; *
 17087                                  ;	MOV	AX,error_path_not_found
 17088                                  ;	;STC
 17089                                  ;	;JMP	RENAME_POP
 17090                                  ;	; 17/05/2019
 17091                                  ;	jmp	GOTERR 
 17092                                  
 17093                                  ; 16/12/2022
 17094                                  %if 0
 17095                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17096                                  	or	cl,cl
 17097                                  	jnz	short SAVEDEST
 17098                                  	;jz	short BAD_PATH ; *
 17099                                  BAD_PATH: ; *
 17100                                  	;mov	ax,3
 17101                                  	mov	ax,error_path_not_found
 17102                                  	stc
 17103                                  	jmp	RENAME_POP
 17104                                  %endif
 17105                                  
 17106                                  SAVEDEST:
 17107 0000277E 16                      	push	ss
 17108 0000277F 07                      	pop	es
 17109                                  
 17110                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17111 00002780 BF[5705]                	MOV	DI,NAME2
 17112 00002783 BE[4B05]                	MOV	SI,NAME1
 17113                                  
 17114 00002786 B90B00                  	MOV	CX,11
 17115 00002789 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17116 0000278B A1[C205]                	MOV	AX,[DIRSTART]
 17117 0000278E A3[6405]                	MOV	[DESTSTART],AX
 17118                                  BUILDDEST:
 17119                                  	; 31/01/2024
 17120                                  	;push	ss
 17121                                  	;pop	es			; needed due to JMP BUILDDEST below
 17122                                  
 17123                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17124 00002791 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17125 00002794 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17126 00002797 BE[5705]                	MOV	SI,NAME2		; Raw dest
 17127                                  
 17128 0000279A B90B00                  	MOV	CX,11
 17129                                  
 17130                                  	; 17/05/2019 - Retro DOS v4.0
 17131                                  	
 17132                                  	; MSDOS 6.0
 17133 0000279D E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17134                                  
 17135                                  	; MSDOS 3.3
 17136                                  
 17137                                  ; 08/08/2018 - Retro DOS v3.0
 17138                                  ; MSDOS 6.0 
 17139                                  ;---------------------------------------------------------------------------
 17140                                  ;Procedure: NEW_RENAME
 17141                                  ;
 17142                                  ;Input: DS:SI -> raw string with ?
 17143                                  ;	ES:DI -> destination string
 17144                                  ;	DS:BX -> source string
 17145                                  ;Function: replace ? chars of raw string with chars in source string and
 17146                                  ;	   put in destination string
 17147                                  ;Output: ES:DI-> new string
 17148                                  ;---------------------------------------------------------------------------
 17149                                  ;
 17150                                  ;NEW_RENAME:
 17151                                  ;NEWNAM:
 17152                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17153                                  ;	LODSB
 17154                                  ;	CMP	AL,"?"
 17155                                  ;	JNZ	short NOCHG
 17156                                  ;	MOV	AL,[BX] 		; Get replace char
 17157                                  ;NOCHG:
 17158                                  ;	STOSB
 17159                                  ;	INC	BX			; Next replace char
 17160                                  ;	LOOP	NEWNAM
 17161                                  ;	; MSDOS 6.0
 17162                                  ;	;retn
 17163                                  
 17164                                  	; MSDOS 3.3 & MSDOS 6.0
 17165                                  	;mov	byte [ATTRIB],16h
 17166 000027A0 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17167 000027A5 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17168 000027AA E82D19                  	call	DEVNAME 		; Check if we built a device name
 17169 000027AD 73A3                    	JNC	short BAD_ACC
 17170 000027AF 8B1E[6405]              	MOV	BX,[DESTSTART]
 17171 000027B3 C42E[8A05]              	LES	BP,[THISDPB]
 17172 000027B7 E82016                  	call	SETDIRSRCH		; Reset search to start of dir
 17173 000027BA 7296                    	JC	short BAD_ACC 		; Screw up
 17174 000027BC E8E114                  	call	FINDENTRY		; See if new name already exists
 17175 000027BF 7391                    	JNC	short BAD_ACC 		; Error if found
 17176 000027C1 803E[4A03]00            	CMP	byte [FAILERR],0
 17177 000027C6 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17178 000027C8 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17179 000027CB 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17180 000027CF 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17181                                  
 17182                                  	;mov	al,[RENAMEDMA+32]
 17183 000027D1 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17184 000027D4 A810                    	TEST	AL,attr_directory ; 10h
 17185 000027D6 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17186                                  					; otherwise the . and .. entries get
 17187                                  					; wiped.
 17188 000027D8 A2[6B05]                	MOV	[ATTRIB],AL
 17189 000027DB 8C1E[A005]              	MOV	[THISSFT+2],DS
 17190                                  
 17191                                  ;hkn; AUXSTACK is in DOSDATA
 17192                                  	;mov	si,RENAMEDMA+145h
 17193 000027DF BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17194 000027E2 8936[9E05]              	MOV	[THISSFT],SI
 17195                                  	;mov	word [SI+2],2
 17196 000027E6 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17197 000027EB 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17198 000027ED E8C320                  	call	RENAME_MAKE		; This is in mknode
 17199 000027F0 7303                    	JNC	short GOT_DEST
 17200                                  BAD_ACCJ:
 17201 000027F2 E95DFF                  	JMP	BAD_ACC
 17202                                  
 17203                                  GOT_DEST:
 17204 000027F5 53                      	push	bx
 17205 000027F6 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17206 000027FA E85E4A                  	call	ShareEnd		; we need to remove it.
 17207 000027FD 5B                      	pop	bx
 17208                                  
 17209                                  ; A zero length entry with the correct new name has now been made at
 17210                                  ;   [CURBUF+2]:BX.
 17211                                  
 17212 000027FE C43E[E205]              	LES	DI,[CURBUF]
 17213                                  
 17214                                  	; MSDOS 6.0
 17215                                  	;test	byte [es:di+5],40h
 17216 00002802 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17217                                  					;LB. if already dirty		  ;AN000;
 17218 00002807 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17219 00002809 E83132                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17220                                  	;or	byte [es:di+5],40h
 17221 0000280C 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17222                                  yesdirty1:
 17223 00002811 89DF                    	MOV	DI,BX
 17224                                  	;add	di,11
 17225 00002813 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17226                                  
 17227                                  ;hkn; RENAMEDMA is in DOSDATA
 17228                                  	;mov	si,[RENAMEDMA+32]
 17229 00002816 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17230                                  	;mov	cx,21
 17231 00002819 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17232 0000281C F3A4                    	REP	MOVSB
 17233 0000281E E87A00                  	CALL	GET_SOURCE
 17234 00002821 7275                    	JC	short RENAME_OVER
 17235 00002823 89DF                    	MOV	DI,BX
 17236 00002825 8E06[E405]              	MOV	ES,[CURBUF+2]
 17237 00002829 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17238 0000282B AA                      	STOSB				; "free" the source
 17239 0000282C EB13                    	JMP	SHORT DIRTY_IT
 17240                                  
 17241                                  SIMPLE_RENAME:
 17242 0000282E E86A00                  	CALL	GET_SOURCE		; Get the source back
 17243 00002831 7265                    	JC	short RENAME_OVER
 17244 00002833 89DF                    	MOV	DI,BX
 17245 00002835 8E06[E405]              	MOV	ES,[CURBUF+2]
 17246                                  
 17247                                  ;hkn; NAME1 is in DOSDATA
 17248 00002839 BE[4B05]                	MOV	SI,NAME1		; New Name
 17249 0000283C B90B00                  	MOV	CX,11
 17250 0000283F F3A4                    	REP	MOVSB
 17251                                  DIRTY_IT:
 17252 00002841 8B3E[E205]              	MOV	DI,[CURBUF]
 17253                                  
 17254                                  	; MSDOS 6.0
 17255 00002845 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17256                                  					;LB. if already dirty		  ;AN000;
 17257 0000284A 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17258 0000284C E8EE31                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17259                                  	
 17260 0000284F 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17261                                  
 17262                                  ;------------------------------------------------------------------------------
 17263                                  ; Check if the source is a directory of file. If directory rename it to the
 17264                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17265                                  ; previously deleted.
 17266                                  ;------------------------------------------------------------------------------
 17267                                  
 17268                                  yesdirty2:
 17269                                  	; MSDOS 6.0
 17270 00002854 56                      	PUSH	SI
 17271 00002855 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17272 00002859 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17273 0000285C F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17274 00002860 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17275 00002862 E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17276                                  	; 31/01/2024
 17277                                  	;POP	SI
 17278                                  	;JMP	SHORT NOT_DIRTY1
 17279                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17280 00002865 5E                      	POP	SI
 17281                                  NOT_DIRTY1:				;;BN00X
 17282                                  NEXT_SOURCE:
 17283                                  ;hkn; RENAMEDMA is in DOSDATA
 17284 00002866 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17285                                  
 17286                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17287                                  ; to enter it before going to RENAME_Next.
 17288                                  
 17289 00002869 E887EA                  	call	ECritDisk
 17290 0000286C C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17291                                  				  ;  to FF when we made the prev new file).
 17292 00002871 E89405                  	call	RENAME_NEXT
 17293                                  
 17294                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17295                                  ; we were before.
 17296                                  
 17297 00002874 7222                    	JC	short RENAME_OVER
 17298                                  
 17299                                  	;lea	si,[bx+26]
 17300 00002876 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17301 00002879 E872FD                  	call	REN_DEL_Check
 17302 0000287C 7306                    	JNC	short REN_OK2
 17303 0000287E B82000                  	MOV	AX,error_sharing_violation ; 20h
 17304                                  jmp_to_rename_clean: ; 28/12/2022
 17305 00002881 E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17306                                  
 17307                                  ;------------------------------------------------------------------------------
 17308                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17309                                  ; if directory, rename directory name in the Fastopen cache.
 17310                                  ;-----------------------------------------------------------------------------
 17311                                  
 17312                                  REN_OK2:
 17313                                  	; MSDOS 6.0
 17314                                  	;mov	al,[RERNAMEDMA+32]
 17315 00002884 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17316                                  	;test	al,10h
 17317 00002887 A810                    	TEST	AL,attr_directory	;;BN00X directory
 17318 00002889 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17319                                  	
 17320                                  	; MSDOS 3.3 & MSDOS 6.0
 17321 0000288B E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17322                                  jmp_to_builddest: ; 28/12/2022
 17323                                  	; 31/01/2024
 17324 0000288E 16                      	push	ss
 17325 0000288F 07                      	pop	es
 17326 00002890 E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17327                                  
 17328                                  	; MSDOS 6.0
 17329                                  Ren_Directory:
 17330 00002893 E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17331                                  	;JMP	BUILDDEST
 17332                                  	; 28/12/2022
 17333 00002896 EBF6                    	jmp	short jmp_to_builddest
 17334                                  
 17335                                  RENAME_OVER:
 17336 00002898 F8                      	CLC
 17337                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17338                                  	; 28/12/2022
 17339 00002899 EBE6                    	jmp	short jmp_to_rename_clean
 17340                                  
 17341                                  ;----------------------------------------------------------------------------
 17342                                  ; Procedure: GET_SOURCE
 17343                                  ;
 17344                                  ; Inputs:
 17345                                  ;	RENAMEDMA has source info
 17346                                  ; Function:
 17347                                  ;	Re-find the source
 17348                                  ; Output:
 17349                                  ;	[CURBUF] set
 17350                                  ;	[CURBUF+2]:BX points to entry
 17351                                  ;	Carry set if error (currently user FAILed to I 24)
 17352                                  ; DS preserved, others destroyed
 17353                                  ;----------------------------------------------------------------------------
 17354                                  
 17355                                  GET_SOURCE:
 17356 0000289B 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17357 0000289F C42E[8A05]              	LES	BP,[THISDPB]
 17358 000028A3 E83415                  	call	SETDIRSRCH
 17359 000028A6 7214                    	JC	short gs_ret_label	; retc
 17360 000028A8 E80E18                  	call	STARTSRCH
 17361 000028AB A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17362                                  	;call	GETENT
 17363                                  	; 18/12/2022
 17364 000028AE E9FC14                  	jmp	GETENT
 17365                                  ;gs_ret_label:
 17366                                  	;retn
 17367                                  
 17368                                  ; MSDOS 6.0 
 17369                                  ;---------------------------------------------------------------------------
 17370                                  ;Procedure: NEW_RENAME
 17371                                  ;
 17372                                  ;Input: DS:SI -> raw string with ?
 17373                                  ;	ES:DI -> destination string
 17374                                  ;	DS:BX -> source string
 17375                                  ;Function: replace ? chars of raw string with chars in source string and
 17376                                  ;	   put in destination string
 17377                                  ;Output: ES:DI-> new string
 17378                                  ;---------------------------------------------------------------------------
 17379                                  
 17380                                  NEW_RENAME:
 17381                                  	; 17/05/2019 - Retro DOS v4.0
 17382                                  NEWNAM:
 17383                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17384 000028B1 AC                      	LODSB
 17385 000028B2 3C3F                    	CMP	AL,"?" ; 3Fh
 17386 000028B4 7502                    	JNZ	short NOCHG
 17387 000028B6 8A07                    	MOV	AL,[BX] 		; Get replace char
 17388                                  NOCHG:
 17389 000028B8 AA                      	STOSB
 17390 000028B9 43                      	INC	BX			; Next replace char
 17391 000028BA E2F5                    	LOOP	NEWNAM
 17392                                  	; MSDOS 6.0
 17393                                  gs_ret_label:	; 18/12/2022
 17394 000028BC C3                      	retn
 17395                                  
 17396                                  ;============================================================================
 17397                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17398                                  ;============================================================================
 17399                                  ; 08/08/2018 - Retro DOS v3.0
 17400                                  ; 17/05/2019 - Retro DOS v4.0
 17401                                  
 17402                                  ;**	Low level routines for returning file information and setting file
 17403                                  ;	attributes
 17404                                  ;
 17405                                  ;	GET_FILE_INFO
 17406                                  ;	SET_FILE_ATTRIBUTE
 17407                                  ;
 17408                                  ;	Modification history:
 17409                                  ;
 17410                                  ;	    Created: ARR 30 March 1983
 17411                                  ;
 17412                                  ;	M025: Return access_denied if attempting to set
 17413                                  ;	      attribute of root directory.
 17414                                  ;
 17415                                  
 17416                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17417                                  
 17418                                  ;---------------------------------------------------------------------------
 17419                                  ; Procedure Name : GET_FILE_INFO
 17420                                  ;
 17421                                  ; Inputs:
 17422                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17423                                  ;		terminated)
 17424                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17425                                  ;		( = -1 if current dir not involved, else
 17426                                  ;		 Points to first char after last "/" of current dir part)
 17427                                  ;	[THISCDS] Points to CDS being used
 17428                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17429                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17430                                  ; Function:
 17431                                  ;	Get Information about a file
 17432                                  ; Returns:
 17433                                  ;	CARRY CLEAR
 17434                                  ;	    AX = Attribute of file
 17435                                  ;	    CX = Time stamp of file
 17436                                  ;	    DX = Date stamp of file
 17437                                  ;	    BX:DI = Size of file (32 bit)
 17438                                  ;	CARRY SET
 17439                                  ;	    AX is error code
 17440                                  ;		error_file_not_found
 17441                                  ;			Last element of path not found
 17442                                  ;		error_path_not_found
 17443                                  ;			Bad path (not in curr dir part if present)
 17444                                  ;		error_bad_curr_dir
 17445                                  ;			Bad path in current directory part of path
 17446                                  ; DS preserved, others destroyed
 17447                                  ;---------------------------------------------------------------------------
 17448                                  
 17449                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17450                                  
 17451                                  GET_FILE_INFO:
 17452                                  
 17453                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17454                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17455                                  
 17456 000028BD E871E9                  	call	TestNet
 17457 000028C0 7306                    	JNC	short LOCAL_INFO
 17458                                  
 17459                                  ;IF NOT Installed
 17460                                  ;	transfer NET_GET_FILE_INFO
 17461                                  ;ELSE
 17462                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17463                                  ;	INT	2FH
 17464                                  ;	return
 17465                                  
 17466 000028C2 B80F11                  	mov     ax, 110Fh
 17467 000028C5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17468                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17469                                  			; SDA CDS pointer -> current directory
 17470                                  			; Return: CF set on error, AX = file attributes
 17471 000028C7 C3                      	retn
 17472                                  ;ENDIF
 17473                                  
 17474                                  LOCAL_INFO:
 17475 000028C8 E828EA                  	call	ECritDisk
 17476 000028CB C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17477                                  	; MSDOS 3.3
 17478                                  	;call	GETPATH
 17479                                  	; MSDOS 6.0
 17480 000028D0 E8D700                  	call	GET_FAST_PATH
 17481                                  	; MSDOS 3.3 & MSDOS 6.0
 17482 000028D3 7312                    	JNC	short info_check_dev
 17483                                  NO_PATH:
 17484 000028D5 750B                    	JNZ	short bad_path1
 17485 000028D7 08C9                    	OR	CL,CL
 17486 000028D9 7407                    	JZ	short bad_path1
 17487                                  info_no_file:
 17488 000028DB B80200                  	MOV	AX,error_file_not_found
 17489                                  BadRet:
 17490 000028DE F9                      	STC
 17491                                  JustRet:
 17492                                  	;call	LCritDisk
 17493                                  	;retn
 17494                                  	; 18/12/2022
 17495 000028DF E92CEA                  	jmp	LCritDisk
 17496                                  
 17497                                  bad_path1:
 17498 000028E2 B80300                  	MOV	AX,error_path_not_found
 17499 000028E5 EBF7                    	jmp	short BadRet
 17500                                  
 17501                                  info_check_dev:
 17502 000028E7 08E4                    	OR	AH,AH
 17503 000028E9 78F0                    	JS	short info_no_file	; device
 17504                                  
 17505                                  	; MSDOS 6.0
 17506                                  ;SR;
 17507                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17508                                  ;for a root dir
 17509                                  
 17510 000028EB 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17511 000028F0 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17512                                  
 17513 000028F2 30E4                    	xor	ah,ah
 17514 000028F4 B010                    	mov	al,attr_directory ; 10h
 17515                                  	;clc
 17516                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17517                                  	; (DOSCODE:683Eh)
 17518                                  	; 16/12/2022
 17519                                  	;clc
 17520 000028F6 EBE7                    	jmp	short JustRet
 17521                                  
 17522                                  not_root:
 17523                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17524 000028F8 1E                      	PUSH	DS
 17525 000028F9 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17526 000028FD 89DE                    	MOV	SI,BX
 17527 000028FF 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17528 00002901 89DF                    	MOV	DI,BX
 17529                                  	;mov	cx,[si+16h]
 17530 00002903 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17531                                  	;mov	dx,[si+18h]
 17532 00002906 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17533 00002909 30E4                    	XOR	AH,AH
 17534                                  	;mov	al,[si+0Bh]
 17535 0000290B 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17536                                  	;test	al,10h
 17537 0000290E A810                    	TEST	AL,attr_directory
 17538 00002910 7506                    	JNZ	short NO_SIZE
 17539                                  	;mov	di,[si+1Ch]
 17540 00002912 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17541                                  	;mov	bx,[si+1Eh]
 17542 00002915 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17543                                  NO_SIZE:
 17544 00002918 1F                      	POP	DS
 17545                                  	;CLC
 17546                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17547                                  	; (DOSCODE:6864h)
 17548                                  	; 16/12/2022
 17549                                  	;clc
 17550 00002919 EBC4                    	jmp	short JustRet
 17551                                  
 17552                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17553                                  ;-------------------------------------------------------------------------------
 17554                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17555                                  ; Inputs:
 17556                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17557                                  ;		terminated)
 17558                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17559                                  ;		( = -1 if current dir not involved, else
 17560                                  ;		 Points to first char after last "/" of current dir part)
 17561                                  ;	[THISCDS] Points to CDS being used
 17562                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17563                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17564                                  ;	AX is new attributes to give to file
 17565                                  ; Function:
 17566                                  ;	Set File Attributes
 17567                                  ; Returns:
 17568                                  ;	CARRY CLEAR
 17569                                  ;	    No error
 17570                                  ;	CARRY SET
 17571                                  ;	    AX is error code
 17572                                  ;		error_file_not_found
 17573                                  ;			Last element of path not found
 17574                                  ;		error_path_not_found
 17575                                  ;			Bad path (not in curr dir part if present)
 17576                                  ;		error_bad_curr_dir
 17577                                  ;			Bad path in current directory part of path
 17578                                  ;		error_access_denied
 17579                                  ;			Attempt to set an attribute which cannot be set
 17580                                  ;			(attr_directory, attr_volume_ID)
 17581                                  ;		error_sharing_violation
 17582                                  ;			Sharing mode of file did not allow the change
 17583                                  ;			(this request requires exclusive write/read access)
 17584                                  ;			(INT 24H generated)
 17585                                  ; DS preserved, others destroyed
 17586                                  ;----------------------------------------------------------------------------
 17587                                  
 17588                                  SET_FILE_ATTRIBUTE:
 17589                                  
 17590                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17591                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17592                                  
 17593 0000291B A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17594 0000291E 7414                    	JZ	short set_look
 17595                                  _BAD_ACC:
 17596 00002920 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17597 00002925 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17598 0000292A C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17599 0000292F B80500                  	MOV	AX,error_access_denied ; 5
 17600 00002932 F9                      	STC
 17601 00002933 C3                      	retn
 17602                                  
 17603                                  set_look:
 17604 00002934 E8FAE8                  	call	TestNet
 17605 00002937 7308                    	JNC	short LOCAL_SET
 17606                                  
 17607                                  ;IF NOT Installed
 17608                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17609                                  ;ELSE
 17610 00002939 50                      	PUSH	AX
 17611                                  	
 17612                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17613                                  	;INT	2FH
 17614                                  
 17615 0000293A B80E11                  	mov     ax, 110Eh
 17616 0000293D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17617                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17618                                  			; SDA CDS pointer -> current directory
 17619                                  			; STACK: WORD new file attributes
 17620                                  			; Return: CF set on error
 17621                                  
 17622 0000293F 5B                      	POP	BX			; clean stack
 17623 00002940 C3                      	retn
 17624                                  ;ENDIF
 17625                                  
 17626                                  LOCAL_SET:
 17627 00002941 E8AFE9                  	call	ECritDisk
 17628 00002944 50                      	PUSH	AX			; Save new attributes
 17629 00002945 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17630 0000294A E8EA14                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17631 0000294D 7308                    	JNC	short set_check_device
 17632 0000294F 5B                      	POP	BX			; Clean stack (don't zap AX)
 17633 00002950 EB83                    	JMP	short NO_PATH
 17634                                  
 17635                                  	; MSDOS 6.0
 17636                                  cannot_set_root:			; M025:
 17637 00002952 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17638                                  	;stc				; M025: to set attr. of root
 17639                                  	;jmp	short OK_BYE		; M025:
 17640                                  	; 01/02/2024
 17641 00002955 EB87                    	jmp	short BadRet
 17642                                  
 17643                                  set_check_device:
 17644 00002957 08E4                    	OR	AH,AH
 17645 00002959 7906                    	JNS	short set_check_share
 17646 0000295B 58                      	POP	AX
 17647 0000295C E8AFE9                  	call	LCritDisk
 17648 0000295F EBBF                    	JMP	short _BAD_ACC 		; device
 17649                                  
 17650                                  set_check_share:
 17651 00002961 58                      	POP	AX			; Get new attributes
 17652                                  
 17653                                  	; MSDOS 6.0
 17654 00002962 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17655 00002967 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17656                                  
 17657                                  	; MSDOS 3.3 & MSDOS 6.0
 17658 00002969 E882FC                  	call	REN_DEL_Check
 17659 0000296C 7305                    	JNC	short set_do
 17660 0000296E B82000                  	MOV	AX,error_sharing_violation ; 32
 17661 00002971 EB34                    	jmp	short OK_BYE
 17662                                  
 17663                                  set_do:
 17664                                  	; MSDOS 3.3 & MSDOS 6.0
 17665 00002973 C43E[E205]              	LES	DI,[CURBUF]
 17666 00002977 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17667 0000297C 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17668                                  
 17669                                  	; MSDOS 6.0
 17670 00002980 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17671                                  					;LB. if already dirty		  ;AN000;
 17672 00002985 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17673 00002987 E8B330                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17674                                  	
 17675 0000298A 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17676                                  yesdirty3:
 17677 0000298F A0[7605]                	MOV	AL,[THISDRV]
 17678                                  ;;;; 10/1/86 F.C update fastopen cache
 17679 00002992 52                      	PUSH	DX
 17680 00002993 57                      	PUSH	DI
 17681 00002994 B400                    	MOV	AH,0		  ; dir entry update
 17682 00002996 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17683 00002998 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17684 0000299A E8E6FC                  	call	FastOpen_Update
 17685 0000299D 5F                      	POP	DI
 17686 0000299E 5A                      	POP	DX
 17687                                  ;;;; 9/11/86 F.C update fastopen cache
 17688 0000299F E8962F                  	call	FLUSHBUF
 17689 000029A2 7303                    	JNC	short OK_BYE
 17690 000029A4 B80200                  	MOV	AX,error_file_not_found
 17691                                  OK_BYE:
 17692                                  	;call	LCritDisk
 17693                                  	;retn
 17694                                  	; 16/12/2022
 17695 000029A7 E964E9                  	jmp	LCritDisk
 17696                                  
 17697                                  	; 17/05/2019 - Retro DOS v4.0
 17698                                  
 17699                                  	; MSDOS 6.0
 17700                                  GET_FAST_PATH:
 17701                                  ;hkn; use SS override for FastOpenFlg
 17702 000029AA 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17703                                  					;FO. trigger fastopen	;AN000;
 17704 000029B0 E88414                  	call	GETPATH
 17705 000029B3 9C                      	PUSHF			 	;FO.			;AN000;
 17706 000029B4 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17707                                  					;FO. clear all fastopen flags ;AN000;
 17708 000029BA 9D                      	POPF				;FO.			;AN000;
 17709 000029BB C3                      	retn
 17710                                  
 17711                                  ;============================================================================
 17712                                  ; DUP.ASM, MSDOS 6.0, 1991
 17713                                  ;============================================================================
 17714                                  ; 08/08/2018 - Retro DOS v3.0
 17715                                  ; 17/05/2019 - Retro DOS v4.0
 17716                                  
 17717                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17718                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17719                                  ;
 17720                                  ;	DOS_DUP
 17721                                  ;
 17722                                  ;	Modification history:
 17723                                  ;
 17724                                  ;	  Created: ARR 30 March 1983
 17725                                  
 17726                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17727                                  ;---------------------------------------------------------------------------
 17728                                  ; Procedure Name : DOS_DUP
 17729                                  ;
 17730                                  ; Inputs:
 17731                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17732                                  ;		(a non net SFT is OK, in this case the ref
 17733                                  ;		 count is simply incremented)
 17734                                  ; Function:
 17735                                  ;	Signal to the devices that a logical open is occurring
 17736                                  ; Returns:
 17737                                  ;	ES:DI point to SFT
 17738                                  ;    Carry clear
 17739                                  ;	SFT ref_count is incremented
 17740                                  ; Registers modified: None.
 17741                                  ; NOTE:
 17742                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17743                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17744                                  ;	that time.
 17745                                  ;---------------------------------------------------------------------------
 17746                                  
 17747                                  DOS_DUP:
 17748                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17749                                  
 17750                                  	; MSDOS 6.0
 17751 000029BC 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17752 000029C1 26C43E[9E05]            	les	di,[es:THISSFT]
 17753                                  
 17754                                  	;Entry	Dos_Dup_Direct
 17755                                  DOS_Dup_Direct:
 17756 000029C6 E881E8                  	call	IsSFTNet
 17757 000029C9 7503                    	JNZ	short DO_INC
 17758 000029CB E81B1B                  	call	DEV_OPEN_SFT
 17759                                  DO_INC:
 17760                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17761 000029CE 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17762                                  					;   we're in big trouble anyway)
 17763 000029D1 C3                      	retn
 17764                                  
 17765                                  ;============================================================================
 17766                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17767                                  ;============================================================================
 17768                                  ; 08/08/2018 - Retro DOS v3.0
 17769                                  ; 18/05/2019 - Retro DOS v4.0
 17770                                  
 17771                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17772                                  ;NAME	DOS_CREATE
 17773                                  ;----------------------------------------------------------------------------
 17774                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17775                                  ;
 17776                                  ;	DOS_CREATE
 17777                                  ;	DOS_CREATE_NEW
 17778                                  ;	SET_MKND_ERR
 17779                                  ;	SET_Media_ID
 17780                                  ;	SET_EXT_Mode
 17781                                  ;
 17782                                  ;	Revision history:
 17783                                  ;
 17784                                  ;	    A000 version 4.00	  Jan. 1988
 17785                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17786                                  
 17787                                  ;Installed = TRUE
 17788                                  
 17789                                  ;	i_need	THISSFT,DWORD
 17790                                  ;	i_need	THISCDS,DWORD
 17791                                  ;	I_need	EXTERR,WORD
 17792                                  ;	I_Need	ExtErr_locus,BYTE
 17793                                  ;	I_need	JShare,DWORD
 17794                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17795                                  ;	I_need	SATTRIB,BYTE
 17796                                  ;	I_need	CALLVIDM,DWORD
 17797                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17798                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17799                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17800                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17801                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17802                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17803                                  
 17804                                  ;***	DOS_CREATE - Create a File
 17805                                  ;----------------------------------------------------------------------------
 17806                                  ;	DOS_Create is called to create the specified file, truncating
 17807                                  ;	the old one if it exists.
 17808                                  ;
 17809                                  ;	ENTRY	AX is Attribute to create
 17810                                  ;		(ds) = DOSDATA
 17811                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17812                                  ;			terminated)
 17813                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17814                                  ;			( = -1 if current dir not involved, else
 17815                                  ;			 Points to first char after last "/" of current dir part)
 17816                                  ;		[THISCDS] Points to CDS being used
 17817                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17818                                  ;		[THISSFT] Points to SFT to fill in if file created
 17819                                  ;			(sf_mode field set so that FCB may be detected)
 17820                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17821                                  ;
 17822                                  ;	EXIT	sf_ref_count is NOT altered
 17823                                  ;		CARRY CLEAR
 17824                                  ;		    THISSFT filled in.
 17825                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17826                                  ;		CARRY SET
 17827                                  ;		    AX is error code
 17828                                  ;			error_path_not_found
 17829                                  ;				Bad path (not in curr dir part if present)
 17830                                  ;			error_bad_curr_dir
 17831                                  ;				Bad path in current directory part of path
 17832                                  ;			error_access_denied
 17833                                  ;				Attempt to re-create read only file , or
 17834                                  ;				create a second volume id or create a dir
 17835                                  ;			error_sharing_violation
 17836                                  ;				The sharing mode was correct but not allowed
 17837                                  ;				generates an INT 24
 17838                                  ;	USES	all but DS
 17839                                  ;----------------------------------------------------------------------------
 17840                                  
 17841                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17842                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17843                                  
 17844                                  DOS_CREATE:
 17845                                  	; 18/05/2019 - Retro DOS v4.0
 17846                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17847                                  
 17848                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17849                                  ;hkn; this point.
 17850                                  
 17851 000029D2 30E4                    	XOR	AH,AH		; Truncate is OK
 17852                                  
 17853                                  ;	Enter here from Dos_Create_New
 17854                                  ;
 17855                                  ;	(ah) = 0 iff truncate OK
 17856                                  
 17857                                  Create_inter:
 17858 000029D4 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17859                                  				; Mask out any meaningless bits
 17860 000029D6 7511                    	JNZ	short AttErr
 17861 000029D8 A808                    	TEST	AL,attr_volume_id
 17862 000029DA 7407                    	JZ	short NoReset
 17863                                  	
 17864                                  	; MSDOS 6.0
 17865                                  	; 16/12/2022
 17866 000029DC 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17867                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17868                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17869                                  	
 17870 000029E1 B008                    	MOV	AL,attr_volume_id ; 8
 17871                                  NoReset:
 17872 000029E3 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17873 000029E5 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17874 000029E7 740A                    	JZ	short ATT_OK
 17875                                  AttErr:
 17876 000029E9 B80500                  	MOV	AX,5		; Attribute problem
 17877 000029EC C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17878 000029F1 EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17879                                  				   ;	attr_device to be set.
 17880                                  ATT_OK:
 17881 000029F3 C43E[9E05]              	LES	DI,[THISSFT]
 17882 000029F7 06                      	PUSH	ES
 17883 000029F8 C436[A205]              	LES	SI,[THISCDS]
 17884 000029FC 83FEFF                  	CMP	SI,-1
 17885 000029FF 751B                    	JNE	short TEST_RE_NET
 17886                                  
 17887                                  ;	No CDS, it must be redirected.
 17888                                  
 17889 00002A01 07                      	POP	ES
 17890                                  
 17891                                  	; MSDOS 6.0
 17892                                  ;Extended open hooks
 17893                                  	;test	byte [EXTOPEN_ON],1
 17894 00002A02 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17895 00002A07 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17896                                  IFS_extopen:				    ;AN000;EO.
 17897 00002A09 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17898                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17899 00002A0A B82E11                  	mov	ax,112Eh
 17900                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17901 00002A0D CD2F                    	INT	2FH			    ;AN000;EO.
 17902 00002A0F 5B                      	POP	BX			    ;AN000;EO. trash bx
 17903 00002A10 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17904 00002A15 C3                      	retn				    ;AN000;EO.
 17905                                  NOEXTOP:				    ;AN000;
 17906                                  ;Extended open hooks
 17907                                  
 17908                                  ;IF NOT Installed
 17909                                  ;	transfer NET_SEQ_CREATE
 17910                                  ;ELSE
 17911 00002A16 50                      	PUSH	AX
 17912                                  
 17913                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17914                                  	;INT	2FH
 17915                                  
 17916 00002A17 B81811                  	mov	ax,1118h
 17917                                  	; 01/02/2024
 17918                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17919                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17920                                  			; SDA first filename pointer -> fully-qualified name of file
 17921                                  			; STACK: WORD file creation mode???
 17922                                  
 17923                                  	;POP	BX			; BX is trashed anyway
 17924                                  	;retn
 17925 00002A1A EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17926                                  ;ENDIF
 17927                                  
 17928                                  ;	We have a CDS. See if it's network
 17929                                  
 17930                                  TEST_RE_NET:
 17931                                  	;;test	word [es:si+43h],8000h
 17932                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17933                                  	; 07/12/2022
 17934                                  	;test	byte [es:si+44h],80h
 17935                                  	; 17/12/2022
 17936 00002A1C 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17937 00002A21 07                      	POP	ES
 17938 00002A22 7417                    	JZ	short LOCAL_CREATE
 17939                                  
 17940                                  	; MSDOS 6.0
 17941 00002A24 E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17942 00002A27 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17943                                  	;;or	word [es:di+2],2
 17944                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17945                                  	; 17/12/2022
 17946 00002A29 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17947                                  
 17948                                  ;Extended open hooks
 17949                                  dochk:
 17950 00002A2E F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17951 00002A33 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17952                                  ;Extended open hooks
 17953                                  
 17954                                  ;IF NOT Installed
 17955                                  ;	transfer NET_CREATE
 17956                                  ;ELSE
 17957 00002A35 50                      	PUSH	AX
 17958                                  	
 17959                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17960                                  	;INT	2FH
 17961                                  	
 17962 00002A36 B81711                  	mov	ax,1117h
 17963                                  	
 17964                                  	; 01/02/2024
 17965                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17966                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17967                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17968                                  			; SDA CDS pointer -> current directory
 17969                                  			; Return: CF set on error
 17970                                  
 17971                                  	;POP	BX			; BX is trashed anyway
 17972                                  ;nomore:
 17973                                  	;retn
 17974 00002A39 EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 17975                                  ;ENDIF
 17976                                  
 17977                                  ;**	It's a local create. We have a local CDS for it.
 17978                                  
 17979                                  LOCAL_CREATE:
 17980                                  	; MSDOS 6.0
 17981 00002A3B E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17982 00002A3E 7205                    	JC	short setdone	;AN000;EO.
 17983                                  	
 17984                                  	; MSDOS 3.3 & MSDOS 6.0
 17985                                  	; 17/12/2022
 17986                                  	;;or	word [es:di+2],2
 17987                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17988                                  	;or	byte [es:di+2],2
 17989 00002A40 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17990                                  setdone:
 17991 00002A45 E8ABE8                  	call	ECritDisk
 17992 00002A48 E8441E                  	call	MakeNode
 17993 00002A4B 7317                    	JNC	short Create_ok
 17994 00002A4D C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17995 00002A52 E8B9E8                  	call	LCritDisk
 17996                                  
 17997                                  	;entry	SET_MKND_ERR
 17998                                  SET_MKND_ERR:
 17999                                  
 18000                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 18001                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 18002                                  
 18003                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 18004 00002A55 BB[5C2A]                	MOV     BX,CRTERRTAB
 18005                                  	;XLAT  ; MSDOS 3.3
 18006                                  	; 18/05/2019 - Retro DOS v4.0
 18007 00002A58 2E                      	CS
 18008 00002A59 D7                      	XLAT
 18009                                  CreatBadRet:
 18010 00002A5A F9                      	STC
 18011 00002A5B C3                      	retn
 18012                                  
 18013                                  ; 13/05/2019 - Retro DOS v4.0
 18014                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 18015                                  ; ---------------------------------------------------------------------------
 18016                                  
 18017                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 18018                                  
 18019                                  ; 17/07/2018 - Retro DOS v3.0
 18020                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 18021                                  
 18022                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 18023                                  ;	db	0,5,52h,50h,3,5,20h
 18024                                  
 18025                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 18026                                  ;	db	0,5,52h,50h,3,5,20h,2
 18027                                  
 18028                                  ; 08/08/2018
 18029                                  
 18030                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 18031 00002A5C 00                      	DB	0			; none
 18032 00002A5D 05                      	DB	error_access_denied	; MakeNode error 1
 18033 00002A5E 52                      	DB	error_cannot_make	; MakeNode error 2
 18034 00002A5F 50                      	DB	error_file_exists	; MakeNode error 3
 18035 00002A60 03                      	DB	error_path_not_found	; MakeNode error 4
 18036 00002A61 05                      	DB	error_access_denied	; MakeNode error 5
 18037 00002A62 20                      	DB	error_sharing_violation ; MakeNode error 6
 18038                                  	; MSDOS 6.0
 18039 00002A63 02                      	DB	error_file_not_found	; MakeNode error 7
 18040                                  
 18041                                  ; ---------------------------------------------------------------------------
 18042                                  
 18043                                  ; We have just created a new file. This results in the truncation of old
 18044                                  ; files. We must inform the sharer to slash all the open SFT's for this
 18045                                  ; file to the current size.
 18046                                  
 18047                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 18048                                  ; drive number to force a Build BPB after Media Check.
 18049                                  
 18050                                  ;;; FASTOPEN 8/29/86
 18051                                  Create_ok:
 18052 00002A64 E8F4FB                  	call	FastOpen_Delete
 18053                                  ;;; FASTOPEN 8/29/86
 18054 00002A67 A0[6D05]                	mov	al,[SATTRIB]
 18055 00002A6A A808                    	test	al,attr_volume_id
 18056 00002A6C 741C                    	jz	short NoVolLabel
 18057 00002A6E C43E[A205]              	LES	DI,[THISCDS]
 18058                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18059 00002A72 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18060 00002A75 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18061 00002A78 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18062                                  	
 18063                                  	; 18/05/2019 - Retro DOS v4.0
 18064                                  
 18065                                  	; MSDOS 6.0
 18066 00002A7C B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18067 00002A7E E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18068                                  	
 18069 00002A81 E86FE8                  	call	ECritDisk
 18070 00002A84 E8382B                  	call	FATREAD_CDS		; force a media check
 18071 00002A87 E884E8                  	call	LCritDisk
 18072                                  
 18073                                  NoVolLabel:
 18074 00002A8A B80200                  	MOV	ax,2
 18075 00002A8D C43E[9E05]              	LES	DI,[THISSFT]
 18076                                  ;if installed
 18077                                  	;call	JShare + 14 * 4
 18078 00002A91 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18079                                  ;else
 18080                                  ;	Call	ShSU
 18081                                  ;endif
 18082 00002A95 E876E8                  	call	LCritDisk
 18083 00002A98 E94901                  	jmp	SET_SFT_MODE
 18084                                  
 18085                                  ;---------------------------------------------------------------------------
 18086                                  ; Procedure Name : Dos_Create_New
 18087                                  ;
 18088                                  ; Inputs:
 18089                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18090                                  ;		terminated)
 18091                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18092                                  ;		( = -1 if current dir not involved, else
 18093                                  ;		 Points to first char after last "/" of current dir part)
 18094                                  ;	[THISCDS] Points to CDS being used
 18095                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18096                                  ;	[THISSFT] Points to SFT to fill in if file created
 18097                                  ;		(sf_mode field set so that FCB may be detected)
 18098                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18099                                  ;	AX is Attribute to create
 18100                                  ; Function:
 18101                                  ;	Try to create the specified file truncating an old one that exists
 18102                                  ; Outputs:
 18103                                  ;	sf_ref_count is NOT altered
 18104                                  ;	CARRY CLEAR
 18105                                  ;	    THISSFT filled in.
 18106                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18107                                  ;	CARRY SET
 18108                                  ;	    AX is error code
 18109                                  ;		error_path_not_found
 18110                                  ;			Bad path (not in curr dir part if present)
 18111                                  ;		error_bad_curr_dir
 18112                                  ;			Bad path in current directory part of path
 18113                                  ;		error_access_denied
 18114                                  ;			Create a second volume id or create a dir
 18115                                  ;		error_file_exists
 18116                                  ;			Already a file by this name
 18117                                  ; DS preserved, others destroyed
 18118                                  ;---------------------------------------------------------------------------
 18119                                  
 18120                                  DOS_Create_New:
 18121 00002A9B B401                    	MOV	AH,1		; Truncate is NOT OK
 18122 00002A9D E934FF                  	JMP	Create_inter
 18123                                  
 18124                                  ; MSDOS 6.0
 18125                                  ;---------------------------------------------------------------------------
 18126                                  ; Procedure Name : Set_Media_ID
 18127                                  ;
 18128                                  ; Inputs:
 18129                                  ;	NAME1= Volume ID
 18130                                  ;	BH= 0, delete volume id
 18131                                  ;	    1, set new volume id
 18132                                  ;	DS= DOSGROUP
 18133                                  ; Function:
 18134                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18135                                  ; Outputs:
 18136                                  ;	CARRY CLEAR
 18137                                  ;	    volume id set
 18138                                  ;	CARRY SET
 18139                                  ;	    AX is error code
 18140                                  ;---------------------------------------------------------------------------
 18141                                  
 18142                                  	; 18/05/2019 - Retro DOS v4.0
 18143                                  Set_Media_ID:
 18144 00002AA0 50                      	PUSH	AX		;AN000;;>32mb
 18145 00002AA1 06                      	PUSH	ES		;AN000;;>32mb
 18146 00002AA2 57                      	PUSH	DI		;AN000;;>32mb
 18147                                  
 18148 00002AA3 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18149 00002AA5 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18150 00002AA7 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18151 00002AA9 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18152                                  
 18153                                  ;hkn; PACKET_TEMP is in DOSDATA
 18154 00002AAC BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18155                                  
 18156 00002AAF 53                      	PUSH	BX		;AN000;;>32mb
 18157 00002AB0 52                      	PUSH	DX		;AN000;;>32mb
 18158 00002AB1 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18159                                  
 18160                                  	;invoke	$IOCTL		;AN000;;>32mb
 18161 00002AB3 E86BF7                  	call	_$IOCTL	
 18162                                  
 18163 00002AB6 5A                      	POP	DX		;AN000;;>32mb
 18164 00002AB7 5B                      	POP	BX		;AN000;;>32mb
 18165 00002AB8 7224                    	JC	short geterr	;AN000;;>32mb
 18166                                  
 18167 00002ABA 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18168 00002ABC 7405                    	JZ	short NoName	;AN000;>32mb yes
 18169                                  
 18170                                  ;hkn; NAME1 is in DOSDATA
 18171 00002ABE BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18172                                  
 18173 00002AC1 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18174                                  NoName: 			;AN000;
 18175                                  
 18176                                  ;hkn; NO_NAME_ID is in DOSDATA
 18177 00002AC3 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18178                                  
 18179                                  doset:				;AN000;
 18180 00002AC6 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18181                                  	;add	di,6
 18182 00002AC8 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18183                                  
 18184                                  ;hkn; ES & DS must point to SS
 18185                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18186 00002ACB 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18187                                  
 18188 00002ACC 1F                      	POP	DS		;AN000;;>32mb
 18189                                  
 18190                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18191 00002ACD 16                      	PUSH	SS		;AN000;;>32mb
 18192                                  
 18193 00002ACE 07                      	POP	ES		;AN000;;>32mb
 18194 00002ACF B90B00                  	MOV	CX,11		;AN000;;>32mb
 18195 00002AD2 F3A4                    	REP	MOVSB		;AN000;;>32mb
 18196 00002AD4 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18197 00002AD7 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18198 00002AD9 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18199                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18200 00002ADB E843F7                  	call	_$IOCTL	
 18201                                  geterr: 			;AN000;
 18202                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18203 00002ADE 16                      	PUSH	SS		;AN000;>32mb
 18204                                  
 18205 00002ADF 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18206                                  
 18207 00002AE0 5F                      	POP	DI		;AN000;;>32mb
 18208 00002AE1 07                      	POP	ES		;AN000;;>32mb
 18209 00002AE2 58                      	POP	AX		;AN000;;>32mb
 18210 00002AE3 C3                      	retn			;AN000;>32mb
 18211                                  
 18212                                  ; MSDOS 6.0
 18213                                  ;---------------------------------------------------------------------------
 18214                                  ; Procedure Name : Set_EXT_mode
 18215                                  ;
 18216                                  ; Inputs:
 18217                                  ;	[EXTOPEN_ON]= flag for extended open
 18218                                  ;	SAVE_BX= mode specified in Extended Open
 18219                                  ; Function:
 18220                                  ;	Set mode in ThisSFT
 18221                                  ; Outputs:
 18222                                  ;	carry set,mode is set if from Extended Open
 18223                                  ;	carry clear, mode not set yet
 18224                                  ;---------------------------------------------------------------------------
 18225                                  
 18226                                  ; 13/05/2019 - Retro DOS v4.0
 18227                                  
 18228                                  Set_EXT_mode:
 18229                                  
 18230                                  ;hkn; SS override
 18231 00002AE4 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18232 00002AEA 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18233 00002AEC 50                      	PUSH	AX			    ;AN000;EO.
 18234                                  
 18235                                  ;hkn; SS override
 18236 00002AED 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18237                                  	;or	[es:di+2],ax
 18238 00002AF1 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18239 00002AF5 58                      	POP	AX			    ;AN000;EO.
 18240 00002AF6 F9                      	STC				    ;AN000;EO.
 18241                                  NOTEX:					    ;AN000;
 18242 00002AF7 C3                      	retn				    ;AN000;EO.
 18243                                  
 18244                                  ;============================================================================
 18245                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18246                                  ;============================================================================
 18247                                  ; 08/08/2018 - Retro DOS v3.0
 18248                                  ; 18/05/2019 - Retro DOS v4.0
 18249                                  
 18250                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18251                                  ;	NAME	DOS_OPEN
 18252                                  
 18253                                  ;**	OPEN.ASM - File Open
 18254                                  ;----------------------------------------------------------------------------
 18255                                  ;	Low level routines for openning a file from a file spec.
 18256                                  ;	Also misc routines for sharing errors
 18257                                  ;
 18258                                  ;	DOS_Open
 18259                                  ;	Check_Access_AX
 18260                                  ;	SHARE_ERROR
 18261                                  ;	SET_SFT_MODE
 18262                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18263                                  ;
 18264                                  ;	Revision history:
 18265                                  ;
 18266                                  ;	    Created: ARR 30 March 1983
 18267                                  ;	    A000	version 4.00   Jan. 1988
 18268                                  ;
 18269                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18270                                  ; 	       remote extended opens and not save_cx.
 18271                                  ;
 18272                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18273                                  ;	       on the stack before calling off to the redir.
 18274                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18275                                  ;	       to handle open from exec. In this case set the appropriate bit
 18276                                  ;	       else do not.
 18277                                  ;----------------------------------------------------------------------------	
 18278                                  
 18279                                  ;Installed = TRUE
 18280                                  
 18281                                  ;	i_need	NoSetDir,BYTE
 18282                                  ;	i_need	THISSFT,DWORD
 18283                                  ;	i_need	THISCDS,DWORD
 18284                                  ;	i_need	CURBUF,DWORD
 18285                                  ;	i_need	CurrentPDB,WORD
 18286                                  ;	i_need	CURR_DIR_END,WORD
 18287                                  ;	I_need	RetryCount,WORD
 18288                                  ;	I_need	Open_Access,BYTE
 18289                                  ;	I_need	fSharing,BYTE
 18290                                  ;	i_need	JShare,DWORD
 18291                                  ;	I_need	FastOpenFlg,byte
 18292                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18293                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18294                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18295                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18296                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18297                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18298                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18299                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18300                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18301                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18302                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18303                                  ;
 18304                                  ;	I_need	DOS_FLAG,BYTE
 18305                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18306                                  
 18307                                  ;Break	<DOS_Open - internal file access>
 18308                                  ;---------------------------------------------------------------------------
 18309                                  ; Procedure Name : DOS_Open
 18310                                  ;
 18311                                  ; Inputs:
 18312                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18313                                  ;		terminated)
 18314                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18315                                  ;		( = -1 if current dir not involved, else
 18316                                  ;		 Points to first char after last "/" of current dir part)
 18317                                  ;	[THISCDS] Points to CDS being used
 18318                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18319                                  ;	[THISSFT] Points to SFT to fill in if file found
 18320                                  ;		(sf_mode field set so that FCB may be detected)
 18321                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18322                                  ;	AX is Access and Sharing mode
 18323                                  ;	  High NIBBLE of AL (Sharing Mode)
 18324                                  ;		sharing_compat	   file is opened in compatibility mode
 18325                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18326                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18327                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18328                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18329                                  ;	  Low NIBBLE of AL (Access Mode)
 18330                                  ;		open_for_read	file is opened for reading
 18331                                  ;		open_for_write	file is opened for writing
 18332                                  ;		open_for_both	file is opened for both reading and writing.
 18333                                  ;
 18334                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18335                                  ;		(not checked)
 18336                                  ; Function:
 18337                                  ;	Try to open the specified file
 18338                                  ; Outputs:
 18339                                  ;	sf_ref_count is NOT altered
 18340                                  ;	CARRY CLEAR
 18341                                  ;	    THISSFT filled in.
 18342                                  ;	CARRY SET
 18343                                  ;	    AX is error code
 18344                                  ;		error_file_not_found
 18345                                  ;			Last element of path not found
 18346                                  ;		error_path_not_found
 18347                                  ;			Bad path (not in curr dir part if present)
 18348                                  ;		error_bad_curr_dir
 18349                                  ;			Bad path in current directory part of path
 18350                                  ;		error_invalid_access
 18351                                  ;			Bad sharing mode or bad access mode or bad combination
 18352                                  ;		error_access_denied
 18353                                  ;			Attempt to open read only file for writting, or
 18354                                  ;			open a directory
 18355                                  ;		error_sharing_violation
 18356                                  ;			The sharing mode was correct but not allowed
 18357                                  ;			generates an INT 24 on compatibility mode SFTs
 18358                                  ; DS preserved, others destroyed
 18359                                  ;----------------------------------------------------------------------------
 18360                                  
 18361                                  ; 18/05/2019 - Retro DOS v4.0
 18362                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18363                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18364                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18365                                  
 18366                                  DOS_OPEN:
 18367                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18368                                  
 18369 00002AF8 C606[4C03]00            	MOV	byte [NoSetDir],0
 18370 00002AFD E83301                  	CALL	Check_Access_AX
 18371 00002B00 722B                    	JC	short do_ret_label	    ; retc
 18372                                  
 18373 00002B02 C43E[9E05]              	LES	DI,[THISSFT]
 18374 00002B06 30E4                    	XOR	AH,AH
 18375                                  
 18376                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18377                                  
 18378 00002B08 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18379 00002B0C 06                      	PUSH	ES
 18380 00002B0D C436[A205]              	LES	SI,[THISCDS]
 18381                                  	; 18/08/2018
 18382 00002B11 83FEFF                  	CMP	SI,-1
 18383 00002B14 7530                    	JNZ	short TEST_RE_NET1
 18384 00002B16 07                      	POP	ES
 18385                                  
 18386                                  	; MSDOS 6.0
 18387                                  ;Extended open hooks
 18388 00002B17 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18389 00002B1C 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18390                                  _IFS_extopen:									;AN000;
 18391 00002B1E A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18392                                  					    ; with which call was made. This
 18393                                  					    ; has the open access bits. 
 18394                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18395                                  	
 18396 00002B21 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18397                                  	;mov	ax,112Eh
 18398                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18399 00002B22 B82E11                  	mov	ax,(MultNET*256)+46 
 18400 00002B25 CD2F                    	INT	2FH			    ;FT.				;AN000;
 18401 00002B27 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18402 00002B28 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18403                                  
 18404                                  do_ret_label:
 18405 00002B2D C3                      	retn				    ;FT.				;AN000;
 18406                                  _NOEXTOP:
 18407                                  ;Extended open hooks
 18408                                  	;
 18409                                  ;IF NOT Installed
 18410                                  	;transfer NET_SEQ_OPEN
 18411                                  ;ELSE
 18412                                  	
 18413                                  do_net_int2f:
 18414 00002B2E F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18415 00002B33 7409                    	jz	short not_exec_open	; N: just do net open
 18416                                  					; Y: check to see if redir is aware
 18417                                  					;    of this 
 18418                                  	
 18419                                  					; M042 - start
 18420                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18421 00002B35 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18422                                  					; Q: does this redir know how to 
 18423                                  					;    this
 18424 00002B3A 7402                    	jz	short not_exec_open	; N: just do net open
 18425                                  					; Y: set bit 3 of access byte and 
 18426                                  					;    set sharing mode to DENY_WRITE
 18427                                  					; M042 - end
 18428                                  	
 18429                                  	; NOTE: This specific mode has not been set for the code assembled
 18430                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18431                                  	; always one.
 18432                                  					; M035 - set the bits on the stack
 18433                                  	;mov	al,23h
 18434 00002B3C B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18435                                  	
 18436                                  not_exec_open:
 18437                                  	; MSDOS 3.3 & MSDOS 6.0
 18438 00002B3E 50                      	PUSH	AX
 18439                                  
 18440                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18441                                  	;INT	2FH
 18442                                  
 18443 00002B3F B81611                  	mov     ax,1116h
 18444 00002B42 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18445                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18446                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18447                                  			; STACK: WORD file open mode
 18448                                  			; Return: CF set on error
 18449                                  
 18450 00002B44 5B                      	POP	BX			; clean stack
 18451                                  ;do_ret_label: ; 09/08/2018
 18452 00002B45 C3                      	retn
 18453                                  ;ENDIF
 18454                                  
 18455                                  TEST_RE_NET1:
 18456                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18457                                  	; 17/12/2022
 18458 00002B46 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18459 00002B4B 07                      	POP	ES
 18460                                  	; 18/05/2019
 18461 00002B4C 7409                    	JZ	short LOCAL_OPEN
 18462                                  
 18463                                  ;Extended open hooks
 18464                                  	; MSDOS 6.0
 18465 00002B4E F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18466 00002B53 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18467                                  ;Extended open hooks
 18468                                  
 18469                                  ;IF NOT Installed
 18470                                  ;	transfer NET_OPEN
 18471                                  ;ELSE
 18472 00002B55 EBD7                    	jmp	short do_net_int2f
 18473                                  ;ENDIF
 18474                                  
 18475                                  LOCAL_OPEN:
 18476                                  	; MSDOS 3.3 & MSDOS 6.0
 18477 00002B57 E899E7                  	call	ECritDisk
 18478                                  
 18479                                  ; DOS 3.3 FastOPen 6/16/86
 18480                                  
 18481                                  	;or	byte [FastOpenFlg],5
 18482 00002B5A 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18483                                  
 18484 00002B5F E8D512                  	call	GETPATH
 18485                                  
 18486                                  ; DOS 3.3 FastOPen 6/16/86
 18487                                  
 18488 00002B62 731D                    	JNC	short Open_found
 18489 00002B64 7511                    	JNZ	short bad_path2
 18490 00002B66 08C9                    	OR	CL,CL
 18491 00002B68 740D                    	JZ	short bad_path2
 18492                                  OpenFNF:
 18493 00002B6A B80200                  	MOV	AX,error_file_not_found	; 2
 18494                                  OpenBadRet:
 18495                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18496                                  	; 12/08/2018
 18497                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18498                                  	; MSDOS 6.0
 18499 00002B6D 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18500 00002B73 F9                      	STC
 18501                                  	;call	LCritDisk
 18502                                  	; 16/12/2022
 18503 00002B74 E997E7                  	jmp	LCritDisk
 18504                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18505                                  	;retn 	; 08/09/2018
 18506                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18507                                  	;jmp	Clear_FastOpen
 18508                                  
 18509                                  bad_path2:
 18510 00002B77 B80300                  	MOV	AX,error_path_not_found	; 3
 18511 00002B7A EBF1                    	JMP	short OpenBadRet
 18512                                  
 18513                                  Open_Bad_Access:
 18514 00002B7C B80500                  	MOV	AX,error_access_denied	; 5
 18515 00002B7F EBEC                    	JMP	short OpenBadRet
 18516                                  
 18517                                  Open_found:
 18518 00002B81 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18519 00002B83 08E4                    	OR	AH,AH
 18520 00002B85 783E                    	JS	short open_ok		; Devices don't have attributes
 18521 00002B87 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18522                                  	;mov	al,[es:bx+0Bh]
 18523 00002B8B 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18524 00002B8F A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18525 00002B91 75E9                    	JNZ	short Open_Bad_Access
 18526 00002B93 A801                    	TEST	AL,attr_read_only	; check write on read only
 18527 00002B95 742E                    	JZ	short open_ok
 18528                                  
 18529                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18530                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18531                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18532                                  ; processing until the actual write operation:
 18533                                  ;
 18534                                  ; If FCB, then we change the mode to be read_only.
 18535                                  ; If net_FCB, then we change the mode to be read_only.
 18536                                  ; If not open for read then error.
 18537                                  
 18538 00002B97 1E                      	push	ds
 18539 00002B98 56                      	push	si
 18540 00002B99 C536[9E05]              	LDS	SI,[THISSFT]
 18541                                  	;mov	cx,[si+2]
 18542 00002B9D 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18543                                  	; 17/12/2022
 18544                                  	;test	ch,80h
 18545 00002BA0 F6C580                  	test	ch,sf_isFCB>>8
 18546                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18547 00002BA3 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18548 00002BA5 88CA                    	MOV	DL,CL
 18549 00002BA7 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18550 00002BAA 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18551 00002BAD 7508                    	JNZ	short NormalOpen	; no
 18552                                  ResetAccess:
 18553                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18554                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18555                                  	; 16/12/2022
 18556 00002BAF 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18557                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18558 00002BB2 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18559 00002BB5 EB0C                    	JMP	SHORT FillSFT
 18560                                  
 18561                                  ; The SFT is normal. See if the requested access is open_for_read
 18562                                  
 18563                                  NormalOpen:
 18564 00002BB7 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18565 00002BBA 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18566 00002BBD 7404                    	JZ	short FillSFT
 18567 00002BBF 5E                      	pop	si
 18568 00002BC0 1F                      	pop	ds
 18569 00002BC1 EBB9                    	JMP	short Open_Bad_Access
 18570                                  ;
 18571                                  ; All done, restore registers and fill the SFT.
 18572                                  ;
 18573                                  FillSFT:
 18574 00002BC3 5E                      	pop	si
 18575 00002BC4 1F                      	pop	ds
 18576                                  open_ok:
 18577 00002BC5 E8821E                  	call	DOOPEN			; Fill in SFT
 18578                                  
 18579                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18580                                  	; 18/05/2019
 18581                                  	;and	byte [ss:FastOpenFlag],80h
 18582 00002BC8 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18583                                  	; 12/08/2018
 18584                                  	;and	byte [FastOpenFlg],Fast_yes	
 18585                                  
 18586                                  	; MSDOS 6.0
 18587 00002BCE E84300                  	CALL	DO_SHARE_CHECK
 18588 00002BD1 7303                    	JNC	short SHARE_OK
 18589                                  	;call	LCritDisk
 18590                                  	; 16/12/2022
 18591 00002BD3 E938E7                  	jmp	LCritDisk
 18592                                  	;;JMP	short Clear_FastOpen
 18593                                  	;retn	; 18/05/2019
 18594                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18595                                  	;jmp	short Clear_FastOpen	
 18596                                  
 18597                                  	; MSDOS 3.3
 18598                                  ;DO_SHARE_CHECK:
 18599                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18600                                  ;OpenShareRetry:
 18601                                  ;	push	cx			; Save number left to do
 18602                                  ;	call	SHARE_CHECK		; Final Check
 18603                                  ;	pop	cx			; CX = # left
 18604                                  ;	JNC	short SHARE_OK		; No problem with access
 18605                                  ;	call	Idle
 18606                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18607                                  ;OpenShareFail:
 18608                                  ;	LES	DI,[THISSFT]
 18609                                  ;	call	SHARE_ERROR
 18610                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18611                                  	
 18612                                  	;12/08/2018
 18613                                  	;mov	byte [ss:FastOpenFlg],0
 18614                                  	;08/09/2018
 18615                                  	;mov	byte [FastOpenFlg],0
 18616                                  	;call	LCritDisk
 18617                                  	;JMP	short Clear_FastOpen
 18618                                  	;retn
 18619                                  
 18620                                  SHARE_OK:
 18621                                  	; MSDOS 3.3 & MSDOS 6.0
 18622 00002BD6 B80300                  	MOV	AX,3
 18623 00002BD9 C43E[9E05]              	LES	DI,[THISSFT]
 18624                                  ;if installed
 18625                                  	;call	JShare + 14 * 4
 18626 00002BDD FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18627                                  ;else
 18628                                  ;	Call	ShSU
 18629                                  ;endif
 18630 00002BE1 E82AE7                  	call	LCritDisk
 18631                                  	
 18632                                  	;FallThru Set_SFT_Mode
 18633                                  
 18634                                  ;----------------------------------------------------------------------------
 18635                                  ; Procedure Name : SET_SFT_MODE
 18636                                  ;
 18637                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18638                                  ;
 18639                                  ;   Inputs:
 18640                                  ;	ThisSFT points to SFT
 18641                                  ;
 18642                                  ;   Outputs:
 18643                                  ;	Carry clear
 18644                                  ;   Registers modified: AX.
 18645                                  ;---------------------------------------------------------------------------
 18646                                  
 18647                                  ;hkn; called from create. DS already set up to DOSDATA.
 18648                                  
 18649                                  SET_SFT_MODE:
 18650 00002BE4 C43E[9E05]              	LES	DI,[THISSFT]
 18651 00002BE8 E8FE18                  	call	DEV_OPEN_SFT
 18652                                  	;test	word [es:di+2],8000h
 18653                                  	; 17/12/2022
 18654                                  	;test	byte [es:di+3],80h
 18655 00002BEB 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18656                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18657 00002BF0 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18658 00002BF2 A1[3003]                	MOV	AX,[CurrentPDB]
 18659                                  	;mov	[es:di+31h],ax
 18660 00002BF5 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18661                                  
 18662                                  Clear_FastOpen:
 18663 00002BF9 C3                      	retn			       ;;;;; DOS 3.3
 18664                                  
 18665                                  ;----------------------------------------------------------------------------
 18666                                  ; Procedure Name : SHARE_ERROR
 18667                                  ;
 18668                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18669                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18670                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18671                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18672                                  ;---------------------------------------------------------------------------
 18673                                  
 18674                                  SHARE_ERROR:
 18675                                  	; 17/12/2022
 18676                                  	;test	byte [es:di+3],80h
 18677 00002BFA 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18678                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18679 00002BFF 7509                    	JNZ	short _HARD_ERR
 18680 00002C01 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18681 00002C05 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18682                                  	;CMP	CL,SHARING_COMPAT ; 0
 18683                                  	;JNE	short _NO_HARD_ERR
 18684                                  	; 21/09/2023
 18685 00002C08 7505                    	jnz	short _NO_HARD_ERR
 18686                                  _HARD_ERR:
 18687 00002C0A E82846                  	call	SHARE_VIOLATION
 18688                                  	;retnc				; User wants retry
 18689 00002C0D 73EA                    	jnc	short Clear_FastOpen
 18690                                  _NO_HARD_ERR:
 18691 00002C0F B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18692 00002C12 F9                      	STC
 18693 00002C13 C3                      	retn
 18694                                  
 18695                                  ; MSDOS 6.0
 18696                                  ;----------------------------------------------------------------------------
 18697                                  ; Procedure Name : DO_SHARE_CHECK
 18698                                  ;
 18699                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18700                                  ; Functions: check file sharing mode is valid
 18701                                  ; Output: carry set, error
 18702                                  ;	  carry clear, share ok
 18703                                  ;----------------------------------------------------------------------------
 18704                                  
 18705                                  	; 18/05/2019 - Retro DOS v4.0
 18706                                  DO_SHARE_CHECK:
 18707 00002C14 E8DCE6                  	call	ECritDisk		; enter critical section
 18708                                  OPN_RETRY:
 18709 00002C17 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18710                                  OpenShareRetry:
 18711 00002C1B 51                      	push	cx			; Save number left to do
 18712 00002C1C E81146                  	call	SHARE_CHECK		; Final Check
 18713 00002C1F 59                      	pop	cx			; CX = # left
 18714 00002C20 730E                    	JNC	short Share_Ok2		; No problem with access
 18715 00002C22 E8C7E5                  	call	Idle
 18716 00002C25 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18717                                  OpenShareFail:
 18718 00002C27 C43E[9E05]              	LES	DI,[THISSFT]
 18719 00002C2B E8CCFF                  	call	SHARE_ERROR
 18720 00002C2E 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18721                                  Share_Ok2:
 18722                                  	;call	LCritDisk		; leave critical section
 18723                                  	;retn
 18724                                  	; 18/12/2022
 18725 00002C30 E9DBE6                  	jmp	LCritDisk
 18726                                  
 18727                                  ;-----------------------------------------------------------------------------
 18728                                  ; Procedure Name : Check_Access
 18729                                  ;
 18730                                  ; Inputs:
 18731                                  ;	AX is mode
 18732                                  ;	  High NIBBLE of AL (Sharing Mode)
 18733                                  ;		sharing_compat	   file is opened in compatibility mode
 18734                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18735                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18736                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18737                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18738                                  ;	  Low NIBBLE of AL (Access Mode)
 18739                                  ;		open_for_read	file is opened for reading
 18740                                  ;		open_for_write	file is opened for writing
 18741                                  ;		open_for_both	file is opened for both reading and writing.
 18742                                  ; Function:
 18743                                  ;	Check this access mode for correctness
 18744                                  ; Outputs:
 18745                                  ;	[open_access] = AL input
 18746                                  ;	Carry Clear
 18747                                  ;		Mode is correct
 18748                                  ;		AX unchanged
 18749                                  ;	Carry Set
 18750                                  ;		Mode is bad
 18751                                  ;		AX = error_invalid_access
 18752                                  ; No other registers effected
 18753                                  ;----------------------------------------------------------------------------
 18754                                  
 18755                                  Check_Access_AX:
 18756 00002C33 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18757 00002C36 53                      	PUSH	BX
 18758                                  
 18759                                  ;	If sharing, then test for special sharing mode for FCBs
 18760                                  
 18761 00002C37 88C3                    	MOV	BL,AL
 18762 00002C39 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18763 00002C3C 803E[7205]FF            	CMP	byte [FSHARING],-1
 18764 00002C41 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18765 00002C43 80FB70                  	CMP	BL,SHARING_NET_FCB
 18766 00002C46 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18767                                  CheckShareMode:
 18768 00002C48 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18769 00002C4B 770D                    	JA	short Make_Bad_Access
 18770                                  CheckAccessMode:
 18771 00002C4D 88C3                    	MOV	BL,AL
 18772 00002C4F 80E30F                  	AND	BL,access_mask
 18773 00002C52 80FB02                  	CMP	BL,2
 18774 00002C55 7703                    	JA	short Make_Bad_Access
 18775 00002C57 5B                      	POP	BX
 18776 00002C58 F8                      	CLC
 18777 00002C59 C3                      	retn
 18778                                  
 18779                                  Make_Bad_Access:
 18780 00002C5A B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18781 00002C5D 5B                      	POP	BX
 18782 00002C5E F9                      	STC
 18783 00002C5F C3                      	retn
 18784                                  
 18785                                  ;============================================================================
 18786                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18787                                  ;============================================================================
 18788                                  ; 08/08/2018 - Retro DOS v3.0
 18789                                  ; 18/05/2019 - Retro DOS v4.0
 18790                                  
 18791                                  ;**	Low level routine for returning disk drive information from a local
 18792                                  ;	  or NET device
 18793                                  ;
 18794                                  ;	DISK_INFO
 18795                                  ;
 18796                                  ;	  Modification history:
 18797                                  ;
 18798                                  ;		Created: ARR 30 March 1983
 18799                                  
 18800                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18801                                  ;---------------------------------------------------------------------------
 18802                                  ; Procedure Name : DISK_INFO
 18803                                  ;
 18804                                  ; Inputs:
 18805                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18806                                  ;		(It MAY NOT be NUL, error not detected)
 18807                                  ; Function:
 18808                                  ;	Get Interesting Drive Information
 18809                                  ; Returns:
 18810                                  ;	DX = Number of free allocation units
 18811                                  ;	BX = Total Number of allocation units on disk
 18812                                  ;	CX = Sector size
 18813                                  ;	AL = Sectors per allocation unit
 18814                                  ;	AH = FAT ID BYTE
 18815                                  ;	Carry set if error (currently user FAILed to I 24)
 18816                                  ; Segs except ES preserved, others destroyed
 18817                                  ;----------------------------------------------------------------------------
 18818                                  
 18819                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18820                                  ;hkn; DOSDATA. 
 18821                                  
 18822                                  DISK_INFO:
 18823                                  	; 08/08/2018 - Retro DOS v3.0
 18824                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18825                                  
 18826 00002C60 E8CEE5                  	call	TestNet
 18827 00002C63 7306                    	JNC	short LOCAL_DSK_INFO
 18828                                  
 18829                                  ;IF NOT Installed
 18830                                  ;	transfer NET_DISK_INFO
 18831                                  ;ELSE
 18832                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18833                                  	;INT	2FH
 18834                                  	;return
 18835                                  
 18836 00002C65 B80C11                  	mov     ax,110Ch
 18837 00002C68 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18838                                  			; ES:DI -> current directory
 18839                                  			; Return: AL = sectors per cluster, BX = total clusters
 18840                                  			; CX = bytes per sector, DX = number of available clusters
 18841 00002C6A C3                      	retn
 18842                                  ;ENDIF
 18843                                  
 18844                                  LOCAL_DSK_INFO:
 18845 00002C6B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18846 00002C70 E880E6                  	call	ECritDisk
 18847 00002C73 E84929                  	call	FATREAD_CDS		; perform media check.
 18848 00002C76 7241                    	JC	short CRIT_LEAVE
 18849 00002C78 BB0200                  	MOV	BX,2
 18850 00002C7B E8AB27                  	call	UNPACK			; Get first FAT sector into CURBUF
 18851 00002C7E 7239                    	JC	short CRIT_LEAVE
 18852 00002C80 C536[E205]              	LDS	SI,[CURBUF]
 18853                                  	;mov	ah,[si+20]
 18854 00002C84 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18855                                  
 18856                                  ;hkn; SS is DOSDATA
 18857 00002C87 16                      	push	ss
 18858 00002C88 1F                      	pop	ds
 18859                                  	;mov	cx,[es:bp+0Dh]
 18860 00002C89 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18861                                  
 18862                                  ; Examine the current free count. If it indicates that we have an invalid
 18863                                  ; count, do the expensive calculation.
 18864                                  
 18865                                  	;mov	dx,[es:bp+1Fh]
 18866 00002C8D 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18867 00002C91 83FAFF                  	CMP	DX,-1			; is it valid?
 18868 00002C94 7404                    	JZ	short DoScan
 18869                                  
 18870                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18871                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18872                                  ; the count.
 18873                                  
 18874 00002C96 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18875 00002C98 7222                    	JB	short GotVal		; yes, trust it.
 18876                                  DoScan:
 18877 00002C9A 31D2                    	XOR	DX,DX
 18878 00002C9C 49                      	DEC	CX
 18879                                  SCANFREE:
 18880 00002C9D E88927                  	call	UNPACK
 18881 00002CA0 7217                    	JC	short CRIT_LEAVE
 18882 00002CA2 7501                    	JNZ	short NOTFREECLUS
 18883 00002CA4 42                      	INC	DX			; A free one
 18884                                  NOTFREECLUS:
 18885 00002CA5 43                      	INC	BX			; Next cluster
 18886 00002CA6 E2F5                    	LOOP	SCANFREE
 18887 00002CA8 4B                      	DEC	BX			; BX was next cluster. Convert to
 18888                                  ReturnVals:
 18889 00002CA9 4B                      	DEC	BX			; count
 18890                                  	;mov	al,[es:bp+4]
 18891 00002CAA 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18892 00002CAE FEC0                    	INC	AL			; Sectors/cluster
 18893                                  	;mov	cx,[es:bp+2]
 18894 00002CB0 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18895                                  	;mov	[es:bp+1Fh],dx
 18896 00002CB4 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18897 00002CB8 F8                      	CLC
 18898                                  CRIT_LEAVE:
 18899                                  	;call	LCritDisk
 18900                                  	;retn
 18901                                  	; 17/12/2022
 18902 00002CB9 E952E6                  	jmp	LCritDisk
 18903                                  
 18904                                  ; We have correctly computed everything previously. Load up registers for
 18905                                  ; return.
 18906                                  
 18907                                  GotVal: 
 18908 00002CBC 89CB                    	MOV	BX,CX			; get cluster count
 18909 00002CBE EBE9                    	JMP	short ReturnVals
 18910                                  
 18911                                  ;============================================================================
 18912                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18913                                  ;============================================================================
 18914                                  ; 22/07/2018 - Retro DOS v3.0
 18915                                  
 18916                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18917                                  ;	NAME	DOS_SEARCH
 18918                                  
 18919                                  ;**	Low level routines for doing local and NET directory searches
 18920                                  ;
 18921                                  ;	DOS_SEARCH_FIRST
 18922                                  ;	DOS_SEARCH_NEXT
 18923                                  ;	RENAME_NEXT
 18924                                  ;
 18925                                  ;	Revision history:
 18926                                  ;
 18927                                  ;	    Created: ARR 30 March 1983
 18928                                  ;	    A000	version 4.00  Jan. 1988
 18929                                  ;	    A001	PTM 3564 -- search for fastopen
 18930                                  
 18931                                  ;Installed = TRUE
 18932                                  
 18933                                  ;--------------------------------------------------------------------------
 18934                                  ;
 18935                                  ; Procedure Name : DOS_SEARCH_FIRST
 18936                                  ;
 18937                                  ; Inputs:
 18938                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18939                                  ;		terminated)
 18940                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18941                                  ;		( = -1 if current dir not involved, else
 18942                                  ;		 Points to first char after last "/" of current dir part)
 18943                                  ;	[THISCDS] Points to CDS being used
 18944                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18945                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18946                                  ;	[DMAADD] Points to 53 byte buffer
 18947                                  ; Function:
 18948                                  ;	Initiate a search for the given file spec
 18949                                  ; Outputs:
 18950                                  ;	CARRY CLEAR
 18951                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18952                                  ;
 18953                                  ;	LOCAL
 18954                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18955                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18956                                  ;	    11 byte search name with Meta chars in it
 18957                                  ;	    Search Attribute Byte, attribute of search
 18958                                  ;	    WORD LastEnt value
 18959                                  ;	    WORD DirStart
 18960                                  ;	    4 byte pad
 18961                                  ;	    32 bytes of the directory entry found
 18962                                  ;	NET
 18963                                  ;	    21 bytes First byte has high bit set
 18964                                  ;	    32 bytes of the directory entry found
 18965                                  ;
 18966                                  ;	CARRY SET
 18967                                  ;	    AX = error code
 18968                                  ;		error_no_more_files
 18969                                  ;			No match for this file
 18970                                  ;		error_path_not_found
 18971                                  ;			Bad path (not in curr dir part if present)
 18972                                  ;		error_bad_curr_dir
 18973                                  ;			Bad path in current directory part of path
 18974                                  ; DS preserved, others destroyed
 18975                                  ;---------------------------------------------------------------------------
 18976                                  
 18977                                  ; 24/01/2024
 18978                                  %if 1
 18979                                  	; 17/05/2019 - Retro DOS v4.0
 18980                                  GET_FAST_SEARCH:
 18981                                  	; 22/07/2018
 18982                                  	; MSDOS 6.0
 18983                                  	; 17/12/2022
 18984 00002CC0 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 18985                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 18986                                  					;FO.trigger fastopen ;AN000;
 18987                                  	;call	DOS_SEARCH_FIRST
 18988                                  	;retn
 18989                                  	; 24/01/2024
 18990                                  	; 17/12/2022
 18991                                  	;jmp	DOS_SEARCH_FIRST
 18992                                  %endif
 18993                                  
 18994                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18995                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18996                                  
 18997                                  DOS_SEARCH_FIRST:
 18998                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18999                                  
 19000 00002CC6 C43E[A205]              	LES	DI,[THISCDS]
 19001 00002CCA 83FFFF                  	CMP	DI,-1
 19002 00002CCD 7506                    	JNZ	short TEST_RE_NET2
 19003                                  
 19004                                  ;IF NOT Installed
 19005                                  ;	transfer NET_SEQ_SEARCH_FIRST
 19006                                  ;ELSE
 19007                                  	;mov	ax,1119h
 19008 00002CCF B81911                  	MOV	AX,(MultNET<<8)|25
 19009 00002CD2 CD2F                    	INT	2Fh
 19010 00002CD4 C3                      	retn
 19011                                  ;ENDIF
 19012                                  
 19013                                  TEST_RE_NET2:
 19014                                  	;test	word [es:di+43h],8000h
 19015                                  	; 17/12/2022
 19016                                  	;test	byte [es:di+44h],80h
 19017                                  	; 28/12/2022
 19018 00002CD5 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 19019                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 19020 00002CDA 7406                    	JZ	short LOCAL_SEARCH_FIRST
 19021                                  
 19022                                  ;IF NOT Installed
 19023                                  ;	transfer NET_SEARCH_FIRST
 19024                                  ;ELSE
 19025                                  	;mov	ax,111Bh
 19026 00002CDC B81B11                  	MOV	AX,(MultNET<<8)|27
 19027 00002CDF CD2F                    	INT	2FH
 19028 00002CE1 C3                      	retn
 19029                                  ;ENDIF
 19030                                  	; 18/05/2019 - Retro DOS v4.0
 19031                                  LOCAL_SEARCH_FIRST:
 19032 00002CE2 E80EE6                  	call	ECritDisk
 19033                                  	; MSDOS 6.0
 19034                                  	;;test	word [DOS34_FLAG],400h
 19035                                  	; 17/12/2022
 19036                                  	;test	byte [DOS34_FLAG+1],04h
 19037 00002CE5 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 19038                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 19039 00002CEA 7405                    	JZ	short NOFN			;AN000;
 19040                                  	;or	byte [FastOpenFlg],1
 19041 00002CEC 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 19042                                  NOFN:						;AN000;
 19043 00002CF1 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19044                                  
 19045                                  ; 03/02/2024
 19046                                  %if 0
 19047                                  	; MSDOS 6.0
 19048                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 19049                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19050                                  %else
 19051                                  	; 03/02/2024
 19052 00002CF6 16                      	push	ss
 19053 00002CF7 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19054 00002CF8 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19055                                  getnext:				;AN000;
 19056 00002CFC AC                      	lodsb				;AN000;;FO. get char
 19057 00002CFD 08C0                    	or	al,al			;AN000;;FO. is it null
 19058 00002CFF 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19059 00002D01 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19060 00002D03 75F7                    	jne	short getnext 		;AN000;;FO. no
 19061                                  %endif
 19062                                  	;and	byte [FastOpenFlg],80h
 19063 00002D05 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19064                                  NO_Question:	; 03/02/2024
 19065                                  norm_GETPATH:
 19066 00002D0A E82A11                  	call	GETPATH
 19067                                  	; BX = offset NAME1
 19068                                  ;_getdone:
 19069 00002D0D 7318                    	JNC	short find_check_dev
 19070 00002D0F 7511                    	JNZ	short bad_path3
 19071 00002D11 08C9                    	OR	CL,CL
 19072 00002D13 740D                    	JZ	short bad_path3
 19073                                  find_no_more:
 19074                                  	;mov	ax,12h
 19075 00002D15 B81200                  	MOV	AX,error_no_more_files
 19076                                  BadBye:
 19077                                  	; MSDOS 6.0
 19078 00002D18 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19079                                  
 19080 00002D1E F9                      	STC
 19081                                  	;call	LCritDisk
 19082                                  	;retn
 19083                                  	; 18/12/2022
 19084 00002D1F E9ECE5                  	jmp	LCritDisk
 19085                                  
 19086                                  bad_path3:
 19087                                  	;mov	ax,3
 19088 00002D22 B80300                  	MOV	AX,error_path_not_found
 19089 00002D25 EBF1                    	JMP	short BadBye
 19090                                  
 19091                                  find_check_dev:
 19092 00002D27 08E4                    	OR	AH,AH
 19093 00002D29 790A                    	JNS	short found_entry
 19094 00002D2B C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19095 00002D31 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19096                                  found_entry:
 19097                                  
 19098                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19099                                  ; a search-next may not have wfp_start set correctly
 19100                                  
 19101 00002D35 C43E[2C03]              	LES	DI,[DMAADD]
 19102 00002D39 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19103 00002D3D AC                      	LODSB
 19104 00002D3E 2C40                    	SUB	AL,'A'-1                ; logical drive
 19105 00002D40 AA                      	STOSB				; High bit not set (local)
 19106                                  found_it:
 19107 00002D41 C43E[2C03]              	LES	DI,[DMAADD]
 19108 00002D45 47                      	INC	DI
 19109                                  
 19110                                  	; MSDOS 6.0
 19111 00002D46 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19112                                  	;test	byte [FastOpenFlg],10h
 19113 00002D47 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19114 00002D4C 7408                    	JZ	short notfast			  ;FO.;AN001;
 19115 00002D4E 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19116 00002D50 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19117 00002D54 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19118                                  
 19119                                  notfast:
 19120 00002D56 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19121                                  movmov:
 19122                                  ; Special E5 code
 19123 00002D59 A4                      	MOVSB
 19124 00002D5A 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19125 00002D5F 7505                    	JNZ	short NOTKANJB
 19126 00002D61 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19127                                  NOTKANJB:
 19128                                  	;MOV	CX,10
 19129                                  	;REP	MOVSB
 19130                                  	; 03/02/2024
 19131 00002D66 B90500                  	mov	cx,5
 19132 00002D69 F3A5                    	rep	movsw
 19133                                  
 19134                                  	; 08/09/2018
 19135 00002D6B 1F                      	POP	DS			;FO.;AN001; restore ds
 19136                                  
 19137 00002D6C A0[6B05]                	MOV	AL,[ATTRIB]
 19138 00002D6F AA                      	STOSB
 19139 00002D70 50                      	PUSH	AX			; Save AH device info
 19140 00002D71 A1[4803]                	MOV	AX,[LASTENT]
 19141 00002D74 AB                      	STOSW
 19142 00002D75 A1[C205]                	MOV	AX,[DIRSTART]
 19143 00002D78 AB                      	STOSW
 19144                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19145 00002D79 83C704                  	ADD	DI,4
 19146 00002D7C 58                      	POP	AX			; Recover AH device info
 19147 00002D7D 08E4                    	OR	AH,AH
 19148 00002D7F 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19149 00002D81 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19150 00002D86 7510                    	JNZ	short OKSTORE
 19151                                  
 19152                                  	; MSDOS 6.0
 19153 00002D88 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19154                                  					;AN000;;FO. from fastopen and is good
 19155 00002D8D 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19156                                  
 19157                                  	; The user has specified the root directory itself, rather than some
 19158                                  	; contents of it. We can't "find" that.
 19159                                  
 19160 00002D8F 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19161                                  					;   stuffing a -1 at Lastent
 19162 00002D95 E97DFF                  	JMP	find_no_more
 19163                                  
 19164                                  OKSTORE:
 19165 00002D98 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19166                                  DOSREL:
 19167                                  	; BX = offset NAME1 (from GETPATH)
 19168 00002D9C 89DE                    	MOV	SI,BX			; SI-> start of entry
 19169                                  
 19170                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19171                                  
 19172                                  	;;mov	cx,32
 19173                                  	;MOV	CX,dir_entry.size
 19174                                  	; 03/02/2024
 19175 00002D9E B91000                  	mov	cx,dir_entry.size>>1
 19176                                  ;;;;; 7/29/86
 19177 00002DA1 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19178                                  	;REP	MOVSB
 19179 00002DA3 F3A5                    	rep	movsw
 19180                                  	;
 19181 00002DA5 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19182 00002DA7 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19183 00002DAB 7504                    	JNZ	short NO05
 19184 00002DAD 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19185                                  NO05:
 19186                                  
 19187                                  ;;;;; 7/29/86
 19188                                  
 19189                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19190                                  	; 16/12/2022
 19191                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19192                                  	; MSDOS 6.0
 19193                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19194                                  	; 18/05/2019 - Retro DOS v4.0
 19195 00002DB1 16                      	push	ss
 19196 00002DB2 1F                      	pop	ds
 19197                                  	; 16/12/2022
 19198 00002DB3 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19199                                  
 19200                                  ;hkn; SS is DOSDATA
 19201                                  	;push	ss
 19202                                  	;pop	ds
 19203 00002DB8 F8                      	CLC
 19204                                  	;call	LCritDisk
 19205                                  	;retn
 19206                                  	; 16/12/2022
 19207 00002DB9 E952E5                  	jmp	LCritDisk
 19208                                  
 19209                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19210                                  ;----------------------------------------------------------------------------
 19211                                  ;
 19212                                  ; Procedure Name : DOS_SEARCH_NEXT
 19213                                  ;
 19214                                  ; Inputs:
 19215                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19216                                  ;	    (only first 21 bytes must have valid information)
 19217                                  ; Function:
 19218                                  ;	Look for subsequent matches
 19219                                  ; Outputs:
 19220                                  ;	CARRY CLEAR
 19221                                  ;	    The 53 bytes at DMAADD are updated for next call
 19222                                  ;		(see DOS_SEARCH_FIRST)
 19223                                  ;	CARRY SET
 19224                                  ;	    AX = error code
 19225                                  ;		error_no_more_files
 19226                                  ;			No more files to find
 19227                                  ; DS preserved, others destroyed
 19228                                  ;---------------------------------------------------------------------------
 19229                                  
 19230                                  ;hkn; called from search.asm. DS already set up at this point.
 19231                                  
 19232                                  DOS_SEARCH_NEXT:
 19233 00002DBC C43E[2C03]              	LES	DI,[DMAADD]
 19234 00002DC0 268A05                  	MOV	AL,[ES:DI]
 19235 00002DC3 A880                    	TEST	AL,80H			; Test for NET
 19236 00002DC5 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19237                                  ;IF NOT Installed
 19238                                  ;	transfer NET_SEARCH_NEXT
 19239                                  ;ELSE
 19240                                  	;mov	ax,111Ch
 19241 00002DC7 B81C11                  	MOV	AX,(MultNET<<8)|28
 19242 00002DCA CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19243                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19244                                  		     ; Return: CF set on error, AX = DOS error code
 19245                                  		     ; CF clear if successful
 19246 00002DCC C3                      	retn
 19247                                  ;ENDIF
 19248                                  
 19249                                  LOCAL_SEARCH_NEXT:
 19250                                  	;AL is drive A=1
 19251                                  	;mov	byte [EXTERR_LOCUS],2
 19252 00002DCD C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19253 00002DD2 E81EE5                  	call	ECritDisk
 19254                                  
 19255                                  ;hkn; DummyCDS is in DOSDATA
 19256 00002DD5 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19257                                  ;hkn; Segment address is DOSDATA - use ds
 19258                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19259 00002DDB 8C1E[A405]              	mov	[THISCDS+2],DS
 19260                                  
 19261 00002DDF 0440                    	ADD	AL,'A'-1
 19262 00002DE1 E8E13A                  	call	InitCDS
 19263                                  
 19264                                  ;	call	GETTHISDRV		; Set CDS pointer
 19265                                  
 19266 00002DE4 7246                    	JC	short No_files		; Bogus drive letter
 19267 00002DE6 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19268                                  	;les	bp,[es:di+45h]
 19269 00002DEA 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19270 00002DEE E83DD8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19271                                  
 19272                                  	; 16/12/2022
 19273 00002DF1 268A4600                	mov	al,[ES:BP]
 19274                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19275                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19276 00002DF5 A2[7605]                	mov	[THISDRV],AL
 19277                                  	;mov	word [CREATING],0E500h
 19278 00002DF8 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19279 00002DFE C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19280 00002E03 C536[2C03]              	LDS	SI,[DMAADD]
 19281 00002E07 AC                      	LODSB				; Drive Byte
 19282                                  
 19283                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19284                                  RENAME_NEXT:
 19285                                  	;context ES
 19286 00002E08 16                      	push	ss
 19287 00002E09 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19288                                  
 19289                                  ;hkn; NAME1 is in DOSDATA
 19290 00002E0A BF[4B05]                	MOV	DI,NAME1
 19291                                  
 19292 00002E0D B90B00                  	MOV	CX,11
 19293 00002E10 F3A4                    	REP	MOVSB			; Search name
 19294 00002E12 AC                      	LODSB				; Attribute
 19295                                  
 19296                                  ;hkn; SS override
 19297 00002E13 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19298 00002E17 AD                      	LODSW				; LastEnt
 19299 00002E18 09C0                    	OR	AX,AX
 19300                                  	; 03/02/2024
 19301                                  	;JNS	short cont_load
 19302 00002E1A 7810                    	js	short No_files
 19303                                  ;No_files:
 19304                                  	;JMP	find_no_more
 19305                                  
 19306                                  cont_load:
 19307 00002E1C 50                      	PUSH	AX			; Save LastEnt
 19308 00002E1D AD                      	LODSW				; DirStart
 19309 00002E1E 89C3                    	MOV	BX,AX
 19310                                  
 19311                                  ;hkn; SS is DOSDATA
 19312                                  	;context DS
 19313 00002E20 16                      	push	ss
 19314 00002E21 1F                      	pop	ds
 19315 00002E22 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19316                                  	;invoke	SetDirSrch
 19317 00002E26 E8B10F                  	call	SETDIRSRCH
 19318 00002E29 7304                    	JNC	short SEARCH_GOON
 19319 00002E2B 58                      	POP	AX			; Clean stack
 19320                                  	;JMP	short No_files
 19321                                  	; 03/02/2024
 19322                                  No_files:
 19323 00002E2C E9E6FE                  	JMP	find_no_more
 19324                                  
 19325                                  SEARCH_GOON:
 19326 00002E2F E88712                  	call	STARTSRCH
 19327 00002E32 58                      	POP	AX
 19328 00002E33 E8770F                  	call	GETENT
 19329 00002E36 72F4                    	JC	short No_files
 19330 00002E38 E8AF0E                  	call	NEXTENT
 19331 00002E3B 72EF                    	JC	short No_files
 19332 00002E3D 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19333 00002E3F E9FFFE                  	JMP	found_it ; 10/08/2018
 19334                                  
 19335                                  ; MSDOS 6.0
 19336                                  ;---------------------------------------------------------------------------
 19337                                  ;
 19338                                  ; Procedure Name : CHECK_QUESTION
 19339                                  ;
 19340                                  ; Input: [WFP_START]= pointer to final path
 19341                                  ; Function: check '?' char
 19342                                  ; Output: carry clear, if no '?'
 19343                                  ;	 carry set, if '?' exists
 19344                                  ;---------------------------------------------------------------------------
 19345                                  
 19346                                  ; 03/02/2024
 19347                                  %if 0
 19348                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19349                                  CHECK_QUESTION:
 19350                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19351                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19352                                  	push	ss
 19353                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19354                                  	; 16/12/2022
 19355                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19356                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19357                                  	;mov	si,[ss:WFP_START]
 19358                                  getnext:				;AN000;
 19359                                  	LODSB				;AN000;;FO. get char
 19360                                  	OR	AL,AL			;AN000;;FO. is it null
 19361                                  	JZ	short NO_Question	;AN000;;FO. yes
 19362                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19363                                  	JNZ	short getnext 		;AN000;;FO. no
 19364                                  	STC				;AN000;;FO.
 19365                                  NO_Question:				;AN000;
 19366                                  	retn				;AN000;;FO.
 19367                                  %endif
 19368                                  
 19369                                  ;============================================================================
 19370                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19371                                  ;============================================================================
 19372                                  ; 23/07/2018 - Retro DOS v3.0
 19373                                  ; 18/05/2019 - Retro DOS v4.0
 19374                                  
 19375                                  ;**
 19376                                  ;
 19377                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19378                                  ;  If process has NET resources a close all is sent out over the net.
 19379                                  ;
 19380                                  ;   DOS_ABORT
 19381                                  ;
 19382                                  ;   Modification history:
 19383                                  ;
 19384                                  ;       Created: ARR 30 March 1983
 19385                                  ;
 19386                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19387                                  ;				being terminated only if it is busy.
 19388                                  ;
 19389                                  
 19390                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19391                                  ;--------------------------------------------------------------------------
 19392                                  ;
 19393                                  ; Procedure Name : DOS_ABORT
 19394                                  ;
 19395                                  ; Inputs:
 19396                                  ;       [CurrentPDB] set to PID of process aborting
 19397                                  ; Function:
 19398                                  ;       Close all files and free all SFTs for this PID
 19399                                  ; Returns:
 19400                                  ;       None
 19401                                  ; All destroyed except stack
 19402                                  ;---------------------------------------------------------------------------
 19403                                  
 19404                                  DOS_ABORT:
 19405 00002E42 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19406 00002E47 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19407                                  reset_free_jfn:
 19408 00002E4C 89CB                    	MOV     BX,CX
 19409 00002E4E 51                      	PUSH    CX
 19410 00002E4F 4B                      	DEC     BX                      ; get jfn (start with last one)
 19411                                  
 19412 00002E50 E8A637                  	CALL	_$CLOSE
 19413 00002E53 59                      	POP     CX
 19414 00002E54 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19415                                  
 19416                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19417                                  ; are running in the no-sharing no-network environment, we are simulating the
 19418                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19419                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19420                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19421                                  ;
 19422                                  ; If sharing is loaded, then the following call to close process will
 19423                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19424                                  ;
 19425                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19426                                  ; known network resources. These resources are then responsible for cleaning
 19427                                  ; up after this process.
 19428                                  ;
 19429                                  ; Sleazy, eh?
 19430                                  
 19431                                  	;context DS			; SS is DOSDATA
 19432 00002E56 16                      	push	ss
 19433 00002E57 1F                      	pop	ds  ; 09/09/2018
 19434                                  
 19435                                  	;CallInstall Net_Abort, MultNET, 29
 19436 00002E58 B81D11                  	mov	ax,111Dh
 19437 00002E5B CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19438                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19439                                  			; DS???, SS = DOS CS
 19440                                  ;if installed
 19441 00002E5D FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19442                                  ;else
 19443                                  ;	call 	MFTCloseP
 19444                                  ;endif
 19445                                  
 19446                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19447                                  ; counts.
 19448                                  					; SS override
 19449 00002E61 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19450                                  	;mov	cx,[es:di+4]
 19451 00002E66 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19452 00002E6A E317                    	jcxz    FCBScanDone
 19453                                  	;lea	di,[di+6]
 19454 00002E6C 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19455 00002E6F 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19456                                  FCBTest:
 19457                                  	;cmp	[es:di+31h],ax
 19458 00002E73 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19459 00002E77 7505                    	jnz	short FCBNext		; no, skip it
 19460 00002E79 26C7050000              	mov	word [es:di],0
 19461                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19462                                  FCBNext:
 19463 00002E7E 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19464 00002E81 E2F0                    	loop    FCBTest
 19465                                  FCBScanDone:
 19466                                  
 19467                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19468                                  
 19469 00002E83 31DB                    	XOR     BX,BX
 19470                                  Scan:
 19471 00002E85 53                      	push    bx
 19472 00002E86 E8EB36                  	call	SFFromSFN
 19473 00002E89 5B                      	pop     bx
 19474                                  	;jnc	short Scan1
 19475                                  	;retn
 19476                                  
 19477                                  	; 18/12/2022
 19478                                  	;jc	short NO_Question ; retn
 19479                                  	; 03/02/2024
 19480 00002E8A 7234                    	jc	short RET2
 19481                                  
 19482                                  ;M038
 19483                                  ; Do what the comment above says, check for busy state
 19484                                  
 19485                                  Scan1:
 19486                                  	;cmp	word [es:di],0
 19487                                  	;jz	short scan_next  ; MSDOS 3.3
 19488                                  	; MSDOS 6.0
 19489 00002E8C 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19490                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19491                                  				; Is Sft busy? ;M038
 19492 00002E90 7519                    	jnz	short scan_next
 19493                                  ;
 19494                                  ; we have a SFT that is busy. See if it is for the current process
 19495                                  ;
 19496 00002E92 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19497                                  	;cmp	[es:di+31h],ax
 19498 00002E96 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19499 00002E9A 750F                    	jnz	short scan_next
 19500 00002E9C 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19501                                  	;cmp	[es:di+2Fh],ax
 19502 00002EA0 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19503 00002EA4 7505                    	jnz	short scan_next
 19504                                  
 19505                                  ; This SFT is labelled as ours.
 19506                                  
 19507 00002EA6 26C7050000              	mov	word [es:di],0
 19508                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19509                                  scan_next:
 19510 00002EAB 43                      	inc     bx
 19511 00002EAC EBD7                    	jmp     short Scan
 19512                                  
 19513                                  ;============================================================================
 19514                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19515                                  ;============================================================================
 19516                                  ; 23/07/2018 - Retro DOS v3.0
 19517                                  ; 18/05/2019 - Retro DOS v4.0
 19518                                  
 19519                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19520                                  ;
 19521                                  ;	DOS_CLOSE
 19522                                  ;	DOS_COMMIT
 19523                                  ;	FREE_SFT
 19524                                  ;	SetSFTTimes
 19525                                  ;
 19526                                  ;	Revision history:
 19527                                  ;
 19528                                  ;	   AN000  version 4.00	Jan. 1988
 19529                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19530                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19531                                  
 19532                                  ;Installed = TRUE
 19533                                  
 19534                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19535                                  ;---------------------------------------------------------------------------
 19536                                  ;
 19537                                  ; Procedure Name : DOS_CLOSE
 19538                                  ;
 19539                                  ; Inputs:
 19540                                  ;	[THISSFT] set to the SFT for the file being used
 19541                                  ; Function:
 19542                                  ;	Close the indicated file via the SFT
 19543                                  ; Returns:
 19544                                  ;	sf_ref_count decremented otherwise
 19545                                  ;	ES:DI point to SFT
 19546                                  ;	Carry set if error
 19547                                  ;	    AX has error code
 19548                                  ; DS preserved, others destroyed
 19549                                  ;---------------------------------------------------------------------------
 19550                                  
 19551                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19552                                  
 19553                                  ; 18/05/2019 - Retro DOS v4.0
 19554                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19555                                  
 19556                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19557                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19558                                  
 19559                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19560                                  
 19561                                  DOS_CLOSE:
 19562 00002EAE C43E[9E05]              	LES	DI,[THISSFT]
 19563                                  	;mov	bx,[ES:DI+5]
 19564 00002EB2 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19565                                  
 19566                                  ; Network closes are handled entirely by the net code.
 19567                                  
 19568                                  	;;test	bx,8000h
 19569                                  	;TEST	BX,sf_isnet
 19570                                  	; 17/12/2022
 19571                                  	;test	bh,80h
 19572 00002EB6 F6C780                  	test	bh,(sf_isnet>>8)
 19573 00002EB9 7406                    	JZ	short LocalClose
 19574                                  
 19575                                  	;CallInstall Net_Close,MultNET,6
 19576 00002EBB B80611                  	mov     ax,1106h
 19577 00002EBE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19578                                  			; ES:DI -> SFT
 19579                                  			; SFT DPB field -> DPB of drive containing file
 19580                                  			; Return: CF set on error, AX = DOS error code
 19581                                  			; CF clear if successful
 19582                                  RET2:		; 03/02/2024
 19583 00002EC0 C3                      	retn
 19584                                  
 19585                                  ; All closes release the sharing information.
 19586                                  ; No commit releases sharing information
 19587                                  ;
 19588                                  ; All closes decrement the ref count.
 19589                                  ; No commit decrements the ref count.
 19590                                  
 19591                                  LocalClose:
 19592 00002EC1 E82FE4                  	call	ECritDisk
 19593 00002EC4 E85801                  	CALL	SetSFTTimes
 19594 00002EC7 E8D900                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19595                                  
 19596                                  ;hkn; SS is DOSDATA
 19597                                  	;Context DS
 19598 00002ECA 16                      	push	ss
 19599 00002ECB 1F                      	pop	ds
 19600                                  
 19601 00002ECC 50                      	push	ax
 19602 00002ECD 53                      	push	bx
 19603 00002ECE E88A43                  	call	ShareEnd
 19604 00002ED1 5B                      	pop	bx
 19605 00002ED2 58                      	pop	ax
 19606                                  
 19607                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19608                                  
 19609                                  CloseEntry:
 19610 00002ED3 50                      	PUSH	AX
 19611                                  
 19612                                  ; File clean or device does not get stamped nor disk looked at.
 19613                                  
 19614                                  	;test	bx,0C0h
 19615                                  	; 17/12/2022
 19616 00002ED4 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19617                                  	;TEST	BX,devid_file_clean+devid_device
 19618 00002ED7 7403                    	JZ	short rdir
 19619                                  	; 14/11/2022
 19620 00002ED9 E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 19621                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19622                                  
 19623                                  ; Retrieve the directory entry for the file
 19624                                  
 19625                                  rdir:
 19626 00002EDC E8D100                  	CALL	DirFromSFT
 19627                                  	;mov	al,5
 19628 00002EDF B005                    	MOV	AL,error_access_denied
 19629 00002EE1 7303                    	JNC	short clook
 19630                                  	; 14/11/2022
 19631 00002EE3 E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 19632                                  	;jc	short CloseFinish ; 24/07/2019
 19633                                  clook:
 19634                                  
 19635                                  ; ES:DI points to entry
 19636                                  ; DS:SI points to SFT
 19637                                  ; ES:BX points to buffer header
 19638                                  
 19639 00002EE6 57                      	push	di
 19640 00002EE7 56                      	push	si
 19641                                  	;lea	si,[si+20h]
 19642 00002EE8 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19643                                  
 19644                                  ; ES:DI point to directory entry
 19645                                  ; DS:SI point to unpacked name
 19646                                  
 19647 00002EEB E8F7E2                  	call	XCHGP
 19648                                  
 19649                                  ; ES:DI point to unpacked name
 19650                                  ; DS:SI point to directory entry
 19651                                  
 19652 00002EEE E8570E                  	call	MetaCompare
 19653 00002EF1 E8F1E2                  	call	XCHGP
 19654 00002EF4 5E                      	pop	si
 19655 00002EF5 5F                      	pop	di
 19656 00002EF6 740C                    	JZ	short CLOSE_GO		; Name OK
 19657                                  Bye:	
 19658 00002EF8 89F7                    	MOV	DI,SI
 19659 00002EFA 1E                      	PUSH	DS
 19660 00002EFB 07                      	POP	ES			; ES:DI points to SFT
 19661 00002EFC 16                      	PUSH	SS
 19662 00002EFD 1F                      	POP	DS
 19663 00002EFE F9                      	STC
 19664                                  	;mov	al,2
 19665 00002EFF B002                    	MOV	AL,error_file_not_found
 19666 00002F01 E98E00                  	JMP	CloseFinish ; 24/07/2019
 19667                                  
 19668                                  	; 18/05/2019 - Retro DOS v4.0
 19669                                  CLOSE_GO:
 19670                                  	; 03/02/2024
 19671                                  	;mov	al,[si+4]
 19672 00002F04 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19673                                  	
 19674                                  	; MSDOS 6.0
 19675                                  	;test	word [si+2],8000h
 19676                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19677                                  	; 17/12/2022
 19678                                  	;test	byte [si+3],80h
 19679 00002F07 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19680 00002F0B 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19681                                  	; MSDOS 3.3 & MSDOS 6.0
 19682                                  	;mov	ch,[es:di+0Bh]
 19683 00002F0D 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19684                                  
 19685                                  	; 03/02/2024
 19686                                  	;;mov	al,[si+4]
 19687                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19688                                  
 19689                                  ;hkn; SS override
 19690 00002F11 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19691                                  	; MSDOS 3.3
 19692                                  	;;call	MatchAttributes
 19693                                  	;;JNZ	short Bye		; attributes do not match
 19694                                  	; 18/05/2019
 19695 00002F15 EB04                    	JMP	SHORT setattr		;FT.
 19696                                  nofcb:
 19697                                  	; 03/02/2024
 19698                                  	; MSDOS 6.0
 19699                                  	;;mov	al,[si+4]
 19700                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19701                                  
 19702 00002F17 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19703                                  setattr:
 19704                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19705                                  	;or	byte [es:di+0Bh],20h
 19706 00002F1B 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19707                                  	; MSDOS 6.0
 19708                                  	;mov	ax,[es:di+1Ah]
 19709 00002F20 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19710                                  					;F.O. save old first cluster
 19711                                  ;hkn; SS override
 19712 00002F24 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19713                                  
 19714                                  ; 03/02/2024
 19715                                  %if 0
 19716                                  	;mov	ax,[si+0Bh]
 19717                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19718                                  	;mov	[es:di+1Ah],ax
 19719                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19720                                  	;mov	ax,[si+11h]
 19721                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19722                                  	;mov	[es:di+1Ch],ax
 19723                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19724                                  	;mov	ax,[si+13h]
 19725                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19726                                  	;mov	[es:di+1Eh],ax
 19727                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19728                                  	;mov	ax,[si+0Fh]
 19729                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19730                                  	;mov	[es:di+18h],ax
 19731                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19732                                  	;mov	ax,[si+0Dh]
 19733                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19734                                  	;mov	[es:di+16h],ax
 19735                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19736                                  %else
 19737                                  	; 03/02/2024 - Retro DOS v4.2
 19738 00002F28 56                      	push	si
 19739 00002F29 83C60B                  	add	si,0Bh
 19740 00002F2C AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19741                                  	;mov	[es:di+1Ah],ax
 19742 00002F2D 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19743 00002F31 AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19744 00002F32 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19745 00002F36 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19746 00002F37 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19747 00002F3B AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19748 00002F3C 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19749 00002F40 AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19750 00002F41 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19751 00002F45 5E                      	pop	si
 19752                                  %endif
 19753                                  
 19754                                  	; MSDOS 6.0
 19755                                  ;; File Tagging
 19756 00002F46 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19757                                  				  ;LB. if already dirty		    ;AN000;
 19758 00002F4B 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19759                                  	; 02/06/2019
 19760 00002F4D E8ED2A                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19761                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19762                                  	;or	byte [es:bx+5],40h
 19763 00002F50 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19764                                  yesdirty4:
 19765 00002F55 1E                      	push	ds
 19766 00002F56 56                      	push	si
 19767                                  	; MSDOS 6.0
 19768                                  	;mov	cx,[si+0Bh]
 19769                                  	; 07/12/2022
 19770 00002F57 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19771                                  ;hkn; SS override
 19772 00002F5A 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19773                                  	; MSDOS 3.3 
 19774                                  	;push	ss
 19775                                  	;pop	ds
 19776                                  	;MOV	AL,[THISDRV]
 19777                                  ;;; 10/1/86  update fastopen cache
 19778                                  	; MSDOS 3.3 & MSDOS 6.0
 19779 00002F5E 52                      	PUSH	DX
 19780 00002F5F B400                    	MOV	AH,0			; dir entry update
 19781 00002F61 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19782                                  	; MSDOS 6.0
 19783 00002F63 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19784 00002F65 750D                    	JNZ	short do_update2	;AN005; no, do update
 19785 00002F67 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19786                                  	;mov	di,[si+1Bh]
 19787 00002F69 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19788                                  	;mov	cx,[si+1Dh]
 19789 00002F6C 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19790                                  	;mov	dh,[si+1Fh]
 19791 00002F6F 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19792 00002F72 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19793                                  do_update2:				;AN011;F.O.
 19794                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19795                                  	; 
 19796 00002F74 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19797 00002F79 7407                    	JZ	short do_update		;AN011;F.O. yes
 19798 00002F7B B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19799 00002F7D 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19800                                  do_update:				;AN005;
 19801                                  ;hkn; SS is DOSDATA
 19802                                  	;Context DS
 19803 00002F82 16                      	push	ss
 19804 00002F83 1F                      	pop	ds
 19805                                  	; MSDOS 3.3 & MSDOS 6.0
 19806 00002F84 E8FCF6                  	call	FastOpen_Update 	; invoke fastopen
 19807 00002F87 5A                      	POP	DX
 19808                                  
 19809                                  ;;; 10/1/86  update fastopen cache
 19810 00002F88 E8AD29                  	call	FLUSHBUF		; flush all relevant buffers
 19811 00002F8B 5F                      	pop	di
 19812 00002F8C 07                      	pop	es
 19813                                  	;mov	al,5
 19814 00002F8D B005                    	MOV	AL,error_access_denied
 19815 00002F8F 7201                    	JC	short CloseFinish
 19816                                  FREE_SFT_OK:
 19817 00002F91 F8                      	CLC				; signal no error.
 19818                                  CloseFinish:
 19819                                  
 19820                                  ; Indicate to the device that the SFT is being closed.
 19821                                  
 19822                                  ;;;; 7/21/86
 19823 00002F92 9C                      	PUSHF				; save flag from DirFromSFT
 19824 00002F93 E85B15                  	call	DEV_CLOSE_SFT
 19825 00002F96 9D                      	POPF
 19826                                  ;;;; 7/21/86
 19827                                  ;
 19828                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19829                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19830                                  ; going to be moving from busy to free.
 19831                                  ;
 19832 00002F97 59                      	POP	CX			; get old ref count
 19833 00002F98 9C                      	PUSHF
 19834                                  	; 03/02/2024
 19835                                  	;DEC	CX			; if cx != 1
 19836                                  	;JNZ	short NoFree		; then do NOT free SFT
 19837 00002F99 E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19838                                  
 19839 00002F9B 26890D                  	mov	[es:di],cx ; 0
 19840                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19841                                  NoFree:
 19842 00002F9E E86DE3                  	call	LCritDisk
 19843 00002FA1 9D                      	POPF
 19844 00002FA2 C3                      	retn
 19845                                  
 19846                                  ;---------------------------------------------------------------------------
 19847                                  ;
 19848                                  ; Procedure Name : FREE_SFT
 19849                                  ;
 19850                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19851                                  ; Flags preserved. Return old ref count in AX
 19852                                  ;
 19853                                  ; Note that busy is indicated by the SFT ref count being -1.
 19854                                  ;
 19855                                  ;---------------------------------------------------------------------------
 19856                                  
 19857                                  FREE_SFT:
 19858 00002FA3 9C                      	PUSHF		; Save carry state
 19859 00002FA4 268B05                  	mov	ax,[es:di]
 19860                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19861 00002FA7 48                      	DEC	AX
 19862 00002FA8 7501                    	JNZ	short SetCount
 19863 00002FAA 48                      	DEC	AX
 19864                                  SetCount:
 19865 00002FAB 268705                  	xchg	ax,[es:di]
 19866                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19867 00002FAE 9D                      	POPF
 19868 00002FAF C3                      	retn
 19869                                  
 19870                                  	; 18/05/2019 - Retro DOS v4.0
 19871                                  
 19872                                  ;----------------------------------------------------------------------------
 19873                                  ;
 19874                                  ; Procedure Name : DirFromSFT
 19875                                  ;
 19876                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19877                                  ;
 19878                                  ;   Inputs:	ES:DI point to SFT
 19879                                  ;		DS = DOSDATA
 19880                                  ;   Outputs:
 19881                                  ;		EXTERR_LOCUS = errLOC_Disk
 19882                                  ;		CurBuf points to buffer
 19883                                  ;		Carry Clear -> operation OK
 19884                                  ;		    ES:DI point to entry
 19885                                  ;		    ES:BX point to buffer
 19886                                  ;		    DS:SI point to SFT
 19887                                  ;		Carry SET   -> operation failed
 19888                                  ;		    registers trashified
 19889                                  ;   Registers modified: ALL
 19890                                  ;----------------------------------------------------------------------------
 19891                                  
 19892                                  DirFromSFT:
 19893                                  	;mov	byte [EXTERR_LOCUS],2
 19894 00002FB0 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19895 00002FB5 06                      	push	es
 19896 00002FB6 57                      	push	di
 19897                                  	; MSDOS 3.3
 19898                                  	;;mov	dx,[es:di+1Dh]
 19899                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19900                                  	; MSDOS 6.0
 19901                                  	;mov	dx,[es:[di+1Dh]
 19902 00002FB7 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19903 00002FBB 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19904                                  	; 04/02/2024
 19905 00002FBF 52                      	push	dx
 19906                                  	;mov	dx,[es:di+1Bh]
 19907 00002FC0 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19908                                  	; 04/02/2024
 19909                                  	; 19/05/2019
 19910                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19911                                  	; MSDOS 3.3 & MSDOS 6.0
 19912 00002FC4 52                      	PUSH	DX
 19913 00002FC5 E8E725                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19914                                  					; [THISDPB] set
 19915 00002FC8 5A                      	POP	DX
 19916 00002FC9 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19917 00002FCD 721E                    	JC	short PopDone
 19918                                  	; 22/09/2023
 19919                                  	;XOR	AL,AL	; *		; Pre read
 19920                                  	;;mov	byte [ALLOWED],18h
 19921                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19922                                  	;call	GETBUFFR
 19923                                  	; 22/09/2023
 19924 00002FCF E86228                  	call	GETBUFFER ; * 		; Pre read
 19925 00002FD2 7219                    	JC	short PopDone
 19926 00002FD4 5E                      	pop	si
 19927 00002FD5 1F                      	pop	ds			; Get back SFT pointer
 19928                                  
 19929                                  ;hkn; SS override
 19930 00002FD6 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19931                                  	;or	byte [es:di+5],4
 19932 00002FDB 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19933 00002FE0 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19934                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19935                                  	;lea	di,[di+20] ; MSDOS 6.0
 19936 00002FE2 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19937                                  	;mov	al,32
 19938 00002FE5 B020                    	MOV	AL,dir_entry.size
 19939                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19940 00002FE7 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19941 00002FEA 01C7                    	ADD	DI,AX			; Point at the entry
 19942 00002FEC C3                      	retn				; carry is clear
 19943                                  PopDone:
 19944 00002FED 5F                      	pop	di
 19945 00002FEE 07                      	pop	es
 19946                                  PopDone_retn:
 19947 00002FEF C3                      	retn
 19948                                  
 19949                                  ;----------------------------------------------------------------------------
 19950                                  ;
 19951                                  ;**	DOS_Commit - UPdate Directory Entries
 19952                                  ;
 19953                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19954                                  ;		(DS) = DOSGROUP
 19955                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19956                                  ;	USES	all but DS
 19957                                  ;
 19958                                  ;----------------------------------------------------------------------------
 19959                                  
 19960                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19961                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19962                                  
 19963                                  DOS_COMMIT:
 19964                                  	;hkn; called from srvcall. DS already set up.
 19965 00002FF0 C43E[9E05]              	LES	DI,[THISSFT]
 19966                                  	;mov	bx,[es:di+5]
 19967 00002FF4 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19968                                  	;test	bx,0C0h
 19969                                  	; 17/12/2022
 19970 00002FF8 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19971                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19972 00002FFB 75F2                    	jnz	short PopDone_retn
 19973                                  	;test	bx,8000h
 19974                                  	; 17/12/2022
 19975                                  	;test	bh,80h
 19976 00002FFD F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19977                                  	;TEST	BX,sf_isnet ; 8000h
 19978 00003000 7406                    	JZ	short LOCAL_COMMIT
 19979                                  
 19980                                  ;IF NOT Installed
 19981                                  ;	transfer NET_COMMIT
 19982                                  ;ELSE
 19983                                  	;mov	ax,1107h
 19984 00003002 B80711                  	MOV	AX,(MultNET<<8)|7
 19985 00003005 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19986                                  			; ES:DI -> SFT
 19987                                  			; SFT DPB field -> DPB of drive containing file
 19988                                  			; Return: CF set on error, AX = DOS error code
 19989                                  			; CF clear if successful
 19990                                  localcommit_retn: ; 18/12/2022	
 19991 00003007 C3                      	retn
 19992                                  ;ENDIF
 19993                                  
 19994                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19995                                  ; There are three ways we can do this. One is to enter a critical section to
 19996                                  ; protect a potential free. The second is to increment the ref count to mask
 19997                                  ; the close decrementing.
 19998                                  ;
 19999                                  ; The proper way is to let the caller's of close decide if a decrement should
 20000                                  ; be done. We do this by providing another entry into close after the
 20001                                  ; decrement and after the share information release.
 20002                                  
 20003                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 20004                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 20005                                  
 20006                                  LOCAL_COMMIT:
 20007 00003008 E8E8E2                  	call	ECritDisk
 20008                                  	; MSDOS 6.0
 20009 0000300B E8E5E2                  	call	ECritDisk	;PTM.
 20010 0000300E E80E00                  	call	SetSFTTimes
 20011 00003011 B8FFFF                  	MOV	AX,-1
 20012 00003014 E8BCFE                  	call	CloseEntry
 20013                                  	; MSDOS 6.0
 20014 00003017 9C                      	PUSHF			;PTM.				;AN000;
 20015 00003018 E8CE14                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 20016 0000301B 9D                      	POPF			;PTM.				;AN000;
 20017                                  	;call	LCritDisk	;PTM.				;AN000;
 20018                                  	; 18/12/2022
 20019 0000301C E9EFE2                  	jmp	LCritDisk
 20020                                  ;localcommit_retn:
 20021                                  ;	retn
 20022                                  
 20023                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 20024                                  ;----------------------------------------------------------------------------
 20025                                  ;
 20026                                  ; Procedure Name : SetSFTTimes
 20027                                  ;
 20028                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 20029                                  ;   Reflect these times in other SFT's for the same file.
 20030                                  ;
 20031                                  ;   Inputs:	ES:DI point to SFT
 20032                                  ;		BX = sf_flags set apprpriately
 20033                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 20034                                  ;   Registers modified: All except ES:DI, BX, AX
 20035                                  ;
 20036                                  ;----------------------------------------------------------------------------
 20037                                  
 20038                                  	; 04/02/2024 - Retro DOS v4.2
 20039                                  
 20040                                  SetSFTTimes:
 20041                                  
 20042                                  ; 04/02/2024
 20043                                  %if 0
 20044                                  ;	File clean or device does not get stamped nor disk looked at.
 20045                                  	
 20046                                  	;test	bx,0C0h
 20047                                  	; 17/12/2022
 20048                                  	test	bl,devid_file_clean+devid_device
 20049                                  	;TEST	BX,devid_file_clean+devid_device
 20050                                  	;retnz				; clean or device => no timestamp
 20051                                  	jnz	short localcommit_retn
 20052                                  
 20053                                  ;	file and dirty. See if date is good
 20054                                  
 20055                                  	;test	bx,4000h
 20056                                  	; 17/12/2022
 20057                                  	;test	bh,40h
 20058                                  	test	bh,(sf_close_nodate>>8)
 20059                                  	;TEST	BX,sf_close_nodate
 20060                                  	;retnz				; nodate => no timestamp
 20061                                  	jnz	short localcommit_retn
 20062                                  %else
 20063                                  	; 04/02/2024
 20064                                  	; (PCDOS 7.1 IBMDOS.COM)
 20065                                  	;test	bx,40C0h
 20066 0000301F F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20067 00003023 75E2                    	jnz	short localcommit_retn
 20068                                  %endif
 20069                                  
 20070 00003025 50                      	push	ax
 20071 00003026 53                      	push	bx
 20072 00003027 E8BCDA                  	call	DATE16			; Date/Time to AX/DX
 20073                                  	;mov	[es:di+0Fh],ax
 20074 0000302A 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20075                                  	;mov	[es:di+0Dh],dx
 20076 0000302E 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20077 00003032 31C0                    	XOR	AX,AX
 20078                                  ;if installed
 20079                                  	;call	JShare + 14 * 4
 20080 00003034 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20081                                  ;else
 20082                                  ;	call	ShSU
 20083                                  ;endif
 20084 00003038 5B                      	pop	bx
 20085 00003039 58                      	pop	ax
 20086 0000303A C3                      	retn
 20087                                  
 20088                                  ;============================================================================
 20089                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20090                                  ;============================================================================
 20091                                  ; 23/07/2018 - Retro DOS v3.0
 20092                                  ; 18/05/2019 - Retro DOS v4.0
 20093                                  
 20094                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20095                                  
 20096                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20097                                  ;NAME  DIRCALL
 20098                                  
 20099                                  ;**	Low level directory manipulation routines for making removing and
 20100                                  ;	  verifying local or NET directories
 20101                                  ;
 20102                                  ;	DOS_MKDIR
 20103                                  ;	DOS_CHDIR
 20104                                  ;	DOS_RMDIR
 20105                                  ;
 20106                                  ;	Modification history:
 20107                                  ;
 20108                                  ;		Created: ARR 30 March 1983
 20109                                  
 20110                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20111                                  ;---------------------------------------------------------------------------
 20112                                  ;
 20113                                  ; Procedure Name : DOS_MkDir
 20114                                  ;
 20115                                  ; Inputs:
 20116                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20117                                  ;		terminated)
 20118                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20119                                  ;		( = -1 if current dir not involved, else
 20120                                  ;		 Points to first char after last "/" of current dir part)
 20121                                  ;	[THISCDS] Points to CDS being used
 20122                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20123                                  ; Function:
 20124                                  ;	Make a new directory
 20125                                  ; Returns:
 20126                                  ;	Carry Clear
 20127                                  ;		No error
 20128                                  ;	Carry Set
 20129                                  ;	    AX is error code
 20130                                  ;		error_path_not_found
 20131                                  ;			Bad path (not in curr dir part if present)
 20132                                  ;		error_bad_curr_dir
 20133                                  ;			Bad path in current directory part of path
 20134                                  ;		error_access_denied
 20135                                  ;			Already exists, device name
 20136                                  ; DS preserved, Others destroyed
 20137                                  ;---------------------------------------------------------------------------
 20138                                  
 20139                                  ;hkn; called from path.asm. DS already set up.
 20140                                  
 20141                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20142                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20143                                  
 20144                                  ; 04/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 20145                                  ; DOSCODE:6FDAh (MSDOS 6.22, MSDOS.SYS)
 20146                                  
 20147                                  DOS_MKDIR:
 20148 0000303B E8F3E1                  	call	TestNet
 20149 0000303E 7313                    	JNC	short LOCAL_MKDIR
 20150                                  
 20151                                  ;IF NOT Installed
 20152                                  ;	transfer NET_MKDIR
 20153                                  ;ELSE
 20154                                  	;mov	ax,1103h
 20155 00003040 B80311                  	MOV	AX,(MultNET<<8)|3
 20156 00003043 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20157                                  			; SS = DOS CS
 20158                                  			; SDA first filename pointer -> fully-qualified directory name
 20159                                  			; SDA CDS pointer -> current directory
 20160                                  			; Return: CF set on error, AX = DOS error code
 20161                                  			; CF clear if successful
 20162 00003045 C3                      	retn
 20163                                  ;ENDIF
 20164                                  
 20165                                  NODEACCERRJ:
 20166                                  	;mov	ax,5
 20167 00003046 B80500                  	MOV	AX,error_access_denied
 20168                                  _BadRet:
 20169 00003049 F9                      	STC
 20170                                  	;call	LCritDisk
 20171                                  	;retn
 20172                                  	; 18/12/2022
 20173 0000304A E9C1E2                  	jmp	LCritDisk
 20174                                  
 20175                                  PATHNFJ:
 20176 0000304D E8BEE2                  	call	LCritDisk
 20177 00003050 E902FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20178                                  
 20179                                  LOCAL_MKDIR:
 20180 00003053 E89DE2                  	call	ECritDisk
 20181                                  
 20182                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20183                                  
 20184 00003056 8C16[A005]              	MOV	[THISSFT+2],SS
 20185                                  
 20186                                  ;hkn; DOSDATA
 20187 0000305A C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20188                                  
 20189                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20190                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20191                                  
 20192                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20193 00003060 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20194                                  				; make sure SHARER won't complain.
 20195                                  	;mov	al,10h
 20196 00003066 B010                    	MOV	AL,attr_directory
 20197 00003068 E82418                  	call	MakeNode
 20198 0000306B 72E0                    	JC	short PATHNFJ
 20199 0000306D 83F803                  	CMP	AX,3
 20200 00003070 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20201 00003072 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20202 00003076 C53E[E205]              	LDS	DI,[CURBUF]
 20203 0000307A 29FE                    	SUB	SI,DI
 20204 0000307C 56                      	PUSH	SI		; Pointer to dir_first
 20205                                  
 20206                                  ; 04/02/2024
 20207                                  %if 0
 20208                                  	; MSDOS 6.0
 20209                                  	;push	word [DI+8]
 20210                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20211                                  	; MSDOS 3.3 & MSDOS 6.0
 20212                                  	;push	word [di+6]
 20213                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20214                                  %else
 20215                                  	; 04/02/2024
 20216                                  	; (PCDOS 7.1 IBMDOS.COM)
 20217 0000307D C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20218 00003080 1E                      	push	ds
 20219 00003081 50                      	push	ax
 20220                                  %endif
 20221                                  
 20222 00003082 16                      	push	ss
 20223 00003083 1F                      	pop	ds
 20224                                  
 20225                                  	; 04/02/2024
 20226                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20227 00003084 31C0                    	XOR	AX,AX
 20228                                  	;MOV	[DIRSTART],AX	; Null directory
 20229 00003086 8706[C205]              	xchg	ax,[DIRSTART]
 20230 0000308A 50                      	push	ax
 20231                                  
 20232 0000308B E83E17                  	call	NEWDIR
 20233 0000308E 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20234 00003090 E81A0D                  	call	GETENT		; First entry
 20235 00003093 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20236 00003095 C43E[E205]              	LES	DI,[CURBUF]
 20237                                  
 20238                                  	; MSDOS 6.0
 20239 00003099 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20240                                  				 ;LB. if already dirty		    ;AN000;
 20241 0000309E 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20242 000030A0 E89A29                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20243                                  	
 20244                                  	; MSDOS 3.3 & MSDOS 6.0
 20245                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20246 000030A3 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20247                                  yesdirty5:
 20248                                  	;;add	di,16 ; MSDOS 3.3
 20249                                  	;add	di,20 ; MSDOS 6.0
 20250 000030A8 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20251 000030AB B82E20                  	MOV	AX,202EH	; ". "
 20252 000030AE 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20253 000030B2 E8B717                  	call	SETDOTENT
 20254 000030B5 B82E2E                  	MOV	AX,2E2EH	; ".."
 20255 000030B8 5A                      	POP	DX		; Parent
 20256 000030B9 E8B017                  	call	SETDOTENT
 20257 000030BC C42E[8A05]              	LES	BP,[THISDPB]
 20258                                  	; 22/09/2023
 20259                                  	;;mov	byte [ALLOWED],18h
 20260                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20261 000030C0 5A                      	POP	DX		; Entry sector
 20262                                  	; MSDOS 6.0
 20263 000030C1 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20264                                  
 20265                                  	;XOR	AL,AL ; *	; Pre read
 20266                                  	;call	GETBUFFR
 20267                                  	; 22/09/2023
 20268 000030C5 E86C27                  	call	GETBUFFER ; *	; Pre read
 20269 000030C8 725B                    	JC	short NODEEXISTSP
 20270 000030CA 8B16[C205]              	MOV	DX,[DIRSTART]
 20271 000030CE C53E[E205]              	LDS	DI,[CURBUF]
 20272                                  	;or	byte [di+5],4
 20273 000030D2 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20274 000030D6 5E                      	POP	SI		; dir_first pointer
 20275 000030D7 01FE                    	ADD	SI,DI
 20276 000030D9 8914                    	MOV	[SI],DX
 20277 000030DB 31D2                    	XOR	DX,DX
 20278 000030DD 895402                  	MOV	[SI+2],DX	; Zero size
 20279 000030E0 895404                  	MOV	[SI+4],DX
 20280                                  DIRUP:
 20281                                  	; MSDOS 6.0
 20282 000030E3 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20283                                  	;			 ;LB. if already dirty 		   ;AN000;
 20284 000030E7 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20285 000030E9 E85129                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20286                                  	
 20287                                  	; MSDOS 3.3 & MSDOS 6.0
 20288                                  	;or	byte [di+5],40h
 20289 000030EC 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20290                                  yesdirty6:
 20291 000030F0 16                      	push	ss
 20292 000030F1 1F                      	pop	ds
 20293 000030F2 268A4600                	mov	al,[es:bp]
 20294                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20295 000030F6 E83F28                  	call	FLUSHBUF
 20296                                  	;mov	ax,5
 20297 000030F9 B80500                  	MOV	AX,error_access_denied
 20298                                  	;call	LCritDisk
 20299                                  	;retn
 20300                                  	; 18/12/2022
 20301 000030FC E90FE2                  	jmp	LCritDisk
 20302                                  
 20303                                  NODEEXISTSPOPDEL:
 20304 000030FF 5A                      	POP	DX		; Parent
 20305 00003100 5A                      	POP	DX		; Entry sector
 20306                                  	; MSDOS 6.0 
 20307 00003101 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20308 00003105 C42E[8A05]              	LES	BP,[THISDPB]
 20309                                  	; 22/09/2023
 20310                                  	;;mov	byte [ALLOWED],18h
 20311                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20312                                  	;XOR	AL,AL ; *	; Pre read
 20313                                  	;call	GETBUFFR
 20314                                  	; 22/09/2023
 20315 00003109 E82827                  	call	GETBUFFER ; *	; Pre read
 20316 0000310C 7217                    	JC	short NODEEXISTSP
 20317 0000310E C53E[E205]              	LDS	DI,[CURBUF]
 20318                                  	;or	byte [di+5],4
 20319 00003112 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20320 00003116 5E                      	POP	SI		; dir_first pointer
 20321 00003117 01FE                    	ADD	SI,DI
 20322                                  	;sub	si,1Ah ; 26
 20323 00003119 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20324 0000311C C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20325 0000311F E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20326                                  NODEEXISTS:
 20327 00003122 E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20328                                  
 20329                                  NODEEXISTSP:
 20330 00003125 5E                      	POP	SI		; Clean stack
 20331 00003126 EBFA                    	JMP	short NODEEXISTS
 20332                                  
 20333                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20334                                  
 20335                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20336                                  ;----------------------------------------------------------------------------
 20337                                  ;
 20338                                  ; Procedure Name : DOS_ChDir
 20339                                  ;
 20340                                  ; Inputs:
 20341                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20342                                  ;		terminated)
 20343                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20344                                  ;		( = -1 if current dir not involved, else
 20345                                  ;		 Points to first char after last "/" of current dir part)
 20346                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20347                                  ; Function:
 20348                                  ;	Validate the path for potential new current directory
 20349                                  ; Returns:
 20350                                  ;	NOTE:
 20351                                  ;	    [SATTRIB] is modified by this call
 20352                                  ;	Carry Clear
 20353                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20354                                  ;		Caller must NOT set ID fields on a NET CDS.
 20355                                  ;	Carry Set
 20356                                  ;	    AX is error code
 20357                                  ;		error_path_not_found
 20358                                  ;			Bad path
 20359                                  ;		error_access_denied
 20360                                  ;			device or file name
 20361                                  ; DS preserved, Others destroyed
 20362                                  ;----------------------------------------------------------------------------
 20363                                  
 20364                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20365                                  
 20366                                  ; 18/05/2019 - Retro DOS v4.0
 20367                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20368                                  
 20369                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20370                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20371                                  
 20372                                  DOS_CHDIR:
 20373 00003128 E806E1                  	call	TestNet
 20374 0000312B 7306                    	JNC	short LOCAL_CHDIR
 20375                                  
 20376                                  ;IF NOT Installed
 20377                                  ;	transfer NET_CHDIR
 20378                                  ;ELSE
 20379                                  	;mov	ax,1105h
 20380 0000312D B80511                  	MOV	AX,(MultNET<<8)|5
 20381 00003130 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20382                                  			; SS = DOS CS
 20383                                  			; SDA first filename pointer -> fully-qualified directory name
 20384                                  			; SDA CDS pointer -> current directory
 20385                                  			; Return: CF set on error, AX = DOS error code
 20386                                  			; CF clear if successful
 20387 00003132 C3                      	retn
 20388                                  ;ENDIF
 20389                                  
 20390                                  LOCAL_CHDIR:
 20391 00003133 E8BDE1                  	call	ECritDisk
 20392                                  	; MSDOS 6.0
 20393                                  	;;test	word [es:di+43h],2000h
 20394                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20395                                  	; 17/12/2022
 20396                                  	;test	byte [es:di+44h],20h
 20397 00003136 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20398 0000313B 7406                    	JZ	short nojoin		   ;PTM.
 20399                                  	;mov	word [es:di+49h], 0FFFFh
 20400 0000313D 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20401                                  nojoin:
 20402                                  	; MSDOS 3.3 & MSDOS 6.0
 20403 00003143 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20404                                  	;mov	byte [SATTRIB],16h
 20405 00003148 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20406                                  				; Dir calls can find these
 20407                                  ; DOS 3.3  6/24/86 FastOpen
 20408 0000314D 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20409 00003152 E8E20C                  	call	GETPATH
 20410                                  
 20411                                  	; 04/02/2024
 20412                                  	;PUSHF						;AN000;
 20413 00003155 9F                      	lahf						
 20414 00003156 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20415                                  	;POPF						;AN000;
 20416 0000315B 9E                      	sahf
 20417                                  
 20418                                  ; DOS 3.3  6/24/86 FastOpen
 20419                                  
 20420                                  	; MSDOS 3.3
 20421                                  	;mov	byte [FastOpenFlg],0
 20422                                  	
 20423                                  	;mov	ax,3
 20424 0000315C B80300                  	MOV	AX,error_path_not_found
 20425 0000315F 7207                    	JC	short ChDirDone
 20426 00003161 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20427 00003163 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20428 00003167 F8                      	CLC
 20429                                  ChDirDone:
 20430                                  	;call	LCritDisk
 20431                                  	;retn
 20432                                  	; 18/12/2022
 20433 00003168 E9A3E1                  	jmp	LCritDisk
 20434                                  
 20435                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20436                                  ;----------------------------------------------------------------------------
 20437                                  ;
 20438                                  ; Procedure Name : DOS_RmDir
 20439                                  ;
 20440                                  ; Inputs:
 20441                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20442                                  ;		terminated)
 20443                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20444                                  ;		( = -1 if current dir not involved, else
 20445                                  ;		 Points to first char after last "/" of current dir part)
 20446                                  ;	[THISCDS] Points to CDS being used
 20447                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20448                                  ; Function:
 20449                                  ;	Remove a directory
 20450                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20451                                  ; Returns:
 20452                                  ;	NOTE:
 20453                                  ;	    [SATTRIB] is modified by this call
 20454                                  ;	Carry Clear
 20455                                  ;		No error
 20456                                  ;	Carry Set
 20457                                  ;	    AX is error code
 20458                                  ;		error_path_not_found
 20459                                  ;			Bad path (not in curr dir part if present)
 20460                                  ;		error_bad_curr_dir
 20461                                  ;			Bad path in current directory part of path
 20462                                  ;		error_access_denied
 20463                                  ;			device or file name, root directory
 20464                                  ;			Bad directory ('.' '..' messed up)
 20465                                  ; DS preserved, Others destroyed
 20466                                  ;----------------------------------------------------------------------------
 20467                                  
 20468                                  ;hkn; called from path.asm. DS already set up.
 20469                                  
 20470                                  ; 18/05/2019 - Retro DOS v4.0
 20471                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20472                                  
 20473                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20474                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20475                                  
 20476                                  DOS_RMDIR:
 20477 0000316B E8C3E0                  	call	TestNet
 20478 0000316E 7306                    	JNC	short LOCAL_RMDIR
 20479                                  
 20480                                  ;IF NOT Installed
 20481                                  ;	transfer NET_RMDIR
 20482                                  ;ELSE
 20483                                  	;mov	ax,1101h
 20484 00003170 B80111                  	MOV	AX,(MultNET<<8)|1
 20485 00003173 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20486                                  			; SS = DOS CS
 20487                                  			; SDA first filename pointer -> fully-qualified directory name
 20488                                  			; SDA CDS pointer -> current directory
 20489                                  			; Return: CF set on error, AX = DOS error code
 20490                                  			; CF clear if successful
 20491 00003175 C3                      	retn
 20492                                  ;ENDIF
 20493                                  
 20494                                  LOCAL_RMDIR:
 20495 00003176 E87AE1                  	call	ECritDisk
 20496 00003179 C606[4C03]00            	MOV	byte [NoSetDir],0
 20497                                  	;mov	byte [SATTRIB],16h
 20498 0000317E C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20499                                  					; Dir calls can find these
 20500 00003183 E8B10C                  	call	GETPATH
 20501 00003186 720C                    	JC	short NOPATH		; Path not found
 20502 00003188 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20503 0000318A 8B3E[C205]              	MOV	DI,[DIRSTART]
 20504 0000318E 09FF                    	OR	DI,DI			; Root ?
 20505 00003190 750E                    	JNZ	short rmdir_get_buf	; No
 20506 00003192 EB09                    	JMP	SHORT NOTDIRPATH
 20507                                  
 20508                                  NOPATH:
 20509                                  	;mov	ax,3
 20510 00003194 B80300                  	MOV	AX,error_path_not_found
 20511 00003197 E9AFFE                  	JMP	_BadRet
 20512                                  
 20513                                  NOTDIRPATHPOP:
 20514 0000319A 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20515 0000319B 58                      	POP	AX
 20516                                  NOTDIRPATHPOP2:
 20517 0000319C 58                      	POP	AX
 20518                                  NOTDIRPATH:
 20519 0000319D E9A6FE                  	JMP	NODEACCERRJ
 20520                                  
 20521                                  rmdir_get_buf:
 20522 000031A0 C53E[E205]              	LDS	DI,[CURBUF]
 20523 000031A4 29FB                    	SUB	BX,DI		; Compute true offset
 20524 000031A6 53                      	PUSH	BX		; Save entry pointer
 20525                                  	
 20526                                  	; MSDOS 6.0
 20527                                  	;push	word [di+8]
 20528 000031A7 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20529                                  	
 20530                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20531                                  	;push	word [di+6]
 20532 000031AA FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20533                                  
 20534                                  ;hkn; SS is DOSDATA
 20535                                  	;context DS
 20536 000031AD 16                      	push	ss
 20537 000031AE 1F                      	pop	ds
 20538                                  	;context ES
 20539 000031AF 16                      	push	ss
 20540 000031B0 07                      	pop	es
 20541                                  
 20542                                  ;hkn; NAME1 is in DOSDATA
 20543 000031B1 BF[4B05]                	MOV	DI,NAME1
 20544 000031B4 B03F                    	MOV	AL,'?'
 20545 000031B6 B90B00                  	MOV	CX,11
 20546 000031B9 F3AA                    	REP	STOSB
 20547 000031BB 30C0                    	XOR	AL,AL
 20548 000031BD AA                      	STOSB				; Nul terminate it
 20549 000031BE E8F80E                  	call	STARTSRCH		; Set search
 20550 000031C1 E8E60B                  	call	GETENTRY		; Get start of directory
 20551 000031C4 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20552 000031C6 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20553 000031CA 89DE                    	MOV	SI,BX
 20554 000031CC AD                      	LODSW
 20555                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20556 000031CD 3D2E20                  	cmp	ax,202Eh ; ". "
 20557 000031D0 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20558                                  	;add	si,30
 20559 000031D2 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20560 000031D5 AD                      	LODSW
 20561                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20562                                  	;cmp	ax, '..'
 20563 000031D6 3D2E2E                  	cmp	ax,2E2Eh
 20564 000031D9 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20565                                  
 20566                                  ;hkn; SS is DOSDATA
 20567                                  	;context DS
 20568 000031DB 16                      	push	ss
 20569 000031DC 1F                      	pop	ds
 20570 000031DD C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20571 000031E3 E8C40B                  	call	GETENTRY		; Get next entry
 20572 000031E6 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20573                                  	;mov	byte [ATTRIB],16h
 20574 000031E8 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20575 000031ED E8C40A                  	call	SRCH			; Do a search
 20576 000031F0 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20577 000031F2 803E[4A03]00            	CMP	byte [FAILERR],0
 20578 000031F7 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20579 000031F9 C42E[8A05]              	LES	BP,[THISDPB]
 20580 000031FD 8B1E[C205]              	MOV	BX,[DIRSTART]
 20581 00003201 E8B31B                  	call	RELEASE 		; Release data in sub dir
 20582 00003204 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20583 00003206 5A                      	POP	DX			; Sector # of entry
 20584 00003207 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20585                                  	; 22/09/2023
 20586                                  	;;mov	byte [ALLOWED],18h
 20587                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20588                                  	;XOR	AL,AL ; *		; Pre read
 20589                                  	;call	GETBUFFR		; Get sector back
 20590 0000320B E82626                  	call	GETBUFFER ; *		; Pre Read
 20591 0000320E 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20592 00003210 C53E[E205]              	LDS	DI,[CURBUF]
 20593                                  	;or	byte [di+5],4
 20594 00003214 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20595 00003218 5B                      	POP	BX			; Pointer to start of entry
 20596 00003219 01FB                    	ADD	BX,DI			; Corrected
 20597 0000321B C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20598                                  
 20599                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20600 0000321E 1E                      	PUSH	DS
 20601                                  
 20602                                  ;hkn; SS is DOSDATA
 20603                                  	;context DS
 20604 0000321F 16                      	push	ss
 20605 00003220 1F                      	pop	ds
 20606                                  
 20607                                  	; MSDOS 6.0
 20608 00003221 E837F4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20609                                  
 20610                                  ;	; MSDOS 3.3
 20611                                  ;_FastOpen_Delete:
 20612                                  ;	push	ax
 20613                                  ;	mov	si,[WFP_START]
 20614                                  ;	mov	bx,FastTable
 20615                                  ;	;mov	al,3  ; FONC_delete
 20616                                  ;	mov	al,FONC_delete
 20617                                  ;	call	far [BX+2]  ; FastTable+2
 20618                                  ;	pop	ax
 20619                                  
 20620 00003224 1F                      	POP	DS
 20621                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20622                                  
 20623 00003225 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20624                                  
 20625                                  ;============================================================================
 20626                                  ; DISK.ASM, MSDOS 6.0, 1991
 20627                                  ;============================================================================
 20628                                  ; 23/07/2018 - Retro DOS v3.0 
 20629                                  ; 04/05/2019 - Retro DOS v4.0
 20630                                  
 20631                                  ;	TITLE	DISK - Disk utility routines
 20632                                  ;	NAME	Disk
 20633                                  
 20634                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20635                                  ;
 20636                                  ;	SWAPCON
 20637                                  ;	SWAPBACK
 20638                                  ;	DOS_READ
 20639                                  ;	DOS_WRITE
 20640                                  ;	get_io_sft
 20641                                  ;	DirRead
 20642                                  ;	FIRSTCLUSTER
 20643                                  ;	SET_BUF_AS_DIR
 20644                                  ;	FATSecRd
 20645                                  ;	DREAD
 20646                                  ;	CHECK_WRITE_LOCK
 20647                                  ;	CHECK_READ_LOCK
 20648                                  ;
 20649                                  ;	Revision history:
 20650                                  ;
 20651                                  ;		A000   version 4.00  Jan. 1988
 20652                                  ;
 20653                                  ;----------------------------------------------------------------------------
 20654                                  ;
 20655                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20656                                  ;		error happens, DOS retries the entire block assuming that
 20657                                  ;		zero characters were transferred. Modified the code to take
 20658                                  ;		into account the number of characters transfered before
 20659                                  ;		retrying the operation.
 20660                                  ;
 20661                                  ;----------------------------------------------------------------------------
 20662                                  ;
 20663                                  
 20664                                  ;Installed = TRUE
 20665                                  
 20666                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20667                                  
 20668                                  ; **** Drivers for file input from devices ****
 20669                                  ;----------------------------------------------------------------------------
 20670                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20671                                  ;   of handles 0 and 1
 20672                                  ;
 20673                                  ;   Inputs:	DS is DOSDATA
 20674                                  ;   Outputs:	CONSWAP is set to false.
 20675                                  ;   Registers modified: none
 20676                                  ;----------------------------------------------------------------------------
 20677                                  
 20678                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20679                                  
 20680                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20681                                  ; 04/05/2019 - Retro DOS v4.0
 20682                                  
 20683                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20684                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20685                                  
 20686                                  SWAPBACK:
 20687 00003228 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20688 0000322D C3                      	retn
 20689                                  
 20690                                  ;----------------------------------------------------------------------------
 20691                                  ;
 20692                                  ; Procedure Name : SWAPCON
 20693                                  ;
 20694                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20695                                  ;
 20696                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20697                                  ;		DS is DOSDATA
 20698                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20699                                  ;   Registers modified: none
 20700                                  ;--------------------------------------------------------------------------
 20701                                  
 20702                                  SWAPCON:
 20703                                  	; MSDOS 3.3
 20704                                  	;push	es
 20705                                  	;push	di
 20706                                  	;mov	byte [CONSWAP],1
 20707                                  	;les	di,[THISSFT]
 20708                                  	;mov	word [CONSFT],di
 20709                                  	;mov	word [CONSFT+2],es
 20710                                  	;pop	di
 20711                                  	;pop	es
 20712                                  	;retn
 20713                                  
 20714                                  	; MSDOS 6.0
 20715 0000322E C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20716 00003233 50                      	push	ax
 20717 00003234 A1[9E05]                	mov	ax,[THISSFT]
 20718 00003237 A3[E605]                	mov	[CONSFT],ax
 20719 0000323A A1[A005]                	mov	ax,[THISSFT+2]
 20720 0000323D A3[E805]                	mov	[CONSFT+2],ax
 20721 00003240 58                      	pop	ax
 20722 00003241 C3                      	retn
 20723                                  
 20724                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20725                                  ; 04/05/2019 - Retro DOS v4.0
 20726                                  
 20727                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20728                                  ;-----------------------------------------------------------------------------
 20729                                  ;
 20730                                  ; Inputs:
 20731                                  ;	ThisSFT set to the SFT for the file being used
 20732                                  ;	[DMAADD] contains transfer address
 20733                                  ;	CX = No. of bytes to read
 20734                                  ;	DS = DOSDATA
 20735                                  ; Function:
 20736                                  ;	Perform read operation
 20737                                  ; Outputs:
 20738                                  ;    Carry clear
 20739                                  ;	SFT Position and cluster pointers updated
 20740                                  ;	CX = No. of bytes read
 20741                                  ;	ES:DI point to SFT
 20742                                  ;    Carry set
 20743                                  ;	AX is error code
 20744                                  ;	CX = 0
 20745                                  ;	ES:DI point to SFT
 20746                                  ; DS preserved, all other registers destroyed
 20747                                  ;
 20748                                  ;-----------------------------------------------------------------------------
 20749                                  
 20750                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20751                                  
 20752                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20753                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20754                                  
 20755                                  DOS_READ:
 20756 00003242 C43E[9E05]              	LES	DI,[THISSFT]
 20757                                  
 20758                                  ; Verify that the sft has been opened in a mode that allows reading.
 20759                                  
 20760                                  	;mov	al,[es:di+2]
 20761 00003246 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20762                                  	;and	al,0Fh
 20763 0000324A 240F                    	AND	AL,access_mask
 20764                                  	;cmp	al,1
 20765 0000324C 3C01                    	CMP	AL,open_for_write
 20766 0000324E 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20767 00003250 E9CD05                  	jmp	SET_ACC_ERR
 20768                                  
 20769                                  READ_NO_MODE:
 20770 00003253 E8B204                  	call	SETUP
 20771 00003256 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20772 00003258 E8EFDF                  	call	IsSFTNet
 20773 0000325B 7408                    	JZ	short LOCAL_READ
 20774                                  
 20775                                  ;IF NOT Installed
 20776                                  ;	transfer NET_READ
 20777                                  ;ELSE
 20778                                  	;mov	ax,1108h
 20779 0000325D B80811                  	MOV	AX,(MultNET<<8)|8
 20780 00003260 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20781                                  			; ES:DI -> SFT
 20782                                  			; SFT DPB field -> DPB of drive containing file
 20783                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20784                                  			; Return: CF set on error, CX = bytes read
 20785 00003262 C3                      	retn
 20786                                  ;ENDIF
 20787                                  
 20788                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20789                                  ; except return immediately.
 20790                                  
 20791                                  NoIORet:
 20792 00003263 F8                      	CLC
 20793 00003264 C3                      	retn
 20794                                  
 20795                                  LOCAL_READ:
 20796                                  	;test	word [es:di+5],80h
 20797                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20798 00003265 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20799 0000326A 750E                    	JNZ	short READDEV
 20800                                  
 20801                                  	;mov	byte [EXTERR_LOCUS],2
 20802 0000326C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20803 00003271 E87FE0                  	call	ECritDisk
 20804 00003274 E86C05                  	call	DISKREAD
 20805                                  
 20806                                  critexit:
 20807                                  	;call	LCritDisk
 20808                                  	;retn
 20809                                  	; 16/12/2022
 20810 00003277 E994E0                  	jmp	LCritDisk
 20811                                  
 20812                                  ; We are reading from a device. Examine the status of the device to see if we
 20813                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20814                                  ; null device, we can safely indicate no transfer.
 20815                                  
 20816                                  READDEV:
 20817                                  	;mov	byte [EXTERR_LOCUS],4
 20818 0000327A C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20819                                  	;mov	bl,[es:di+5]
 20820 0000327F 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20821 00003283 C43E[2C03]              	LES	DI,[DMAADD]
 20822                                  	;test	bl,40h
 20823 00003287 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20824 0000328A 7407                    	JZ	short ENDRDDEVJ3
 20825                                  	;test	bl,4
 20826 0000328C F6C304                  	test	BL,devid_device_null	; NUL device?
 20827 0000328F 7405                    	JZ	short TESTRAW 		; NO
 20828 00003291 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20829                                  ENDRDDEVJ3:
 20830                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20831                                  	;JMP	short ENDRDDEVJ2
 20832                                  	; 16/12/2022
 20833 00003293 E93E01                  	jmp	ENDRDDEV ; 04/05/2019
 20834                                  
 20835                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20836                                  ; bizarre std_con_string_input.
 20837                                  
 20838                                  TESTRAW:
 20839                                  	;test	bl,20h
 20840 00003296 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20841 00003299 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20842                                  	;test	bl,1
 20843 0000329B F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20844 0000329E 7457                    	JZ	short NOTRDCON
 20845 000032A0 E96601                  	JMP	READCON
 20846                                  
 20847                                  DVRDRAW:
 20848 000032A3 06                      	PUSH	ES
 20849 000032A4 1F                      	POP	DS			; Xaddr to DS:DI
 20850                                  
 20851                                  	; 04/05/2019 - Retro DOS v4.0
 20852                                  
 20853                                  	; MSDOS 6.0
 20854                                  ;SR;
 20855                                  ;Check for win386 presence -- if present, do polled read of characters
 20856                                  
 20857 000032A5 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20858 000032AB 7408                    	jz	short ReadRawRetry	;not present
 20859 000032AD F6C301                  	test	bl,devid_device_con_in	;is it console device
 20860 000032B0 7403                    	jz	short ReadRawRetry	;no, do normal read
 20861 000032B2 E9A700                  	jmp	do_polling		;yes, do win386 polling loop
 20862                                  
 20863                                  ReadRawRetry:
 20864                                  
 20865                                  ; 07/02/2024
 20866                                  %if 0
 20867                                  	MOV	BX,DI			; DS:BX transfer addr
 20868                                  	; 06/02/2024 ; *
 20869                                  	;XOR	AX,AX			; Media Byte, unit = 0
 20870                                  	;;MOV	DX,AX			; Start at 0
 20871                                  	;; 06/02/2024
 20872                                  	;cwd
 20873                                  	;call	SETREAD
 20874                                  	; 06/02/2024 ; *
 20875                                  	call	SETREAD_X
 20876                                  %else
 20877 000032B5 E82513                  	call	SETREAD_XJ
 20878                                  %endif
 20879                                  
 20880                                  ;hkn; SS override
 20881 000032B8 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20882 000032BD E8A712                  	call	DEVIOCALL
 20883 000032C0 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20884 000032C2 B486                    	MOV	AH,86H			; Read error
 20885                                  
 20886                                  ;hkn; SS override
 20887 000032C4 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20888                                  	; MSDOS 3.3
 20889                                  	;test	di,8000h
 20890                                  	;jz	short CRDROK
 20891                                  	; MSDOS 6.0
 20892 000032C9 09FF                    	or	di,di
 20893 000032CB 7920                    	jns	short CRDROK		; no errors
 20894                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20895 000032CD E8F01E                  	call	CHARHARD
 20896                                  
 20897                                  ; 06/02/2024 - Retrro DOS v5.0
 20898                                  %if 0
 20899                                  	MOV	DI,DX			; DS:DI is Xaddr
 20900                                  	; 04/05/2019
 20901                                  	; MSDOS 6.0
 20902                                  	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20903                                  	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20904                                  %else
 20905 000032D0 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 20906 000032D5 29F9                    	sub	cx,di			; update transfer count
 20907 000032D7 01D7                    	add	di,dx			; update pointer
 20908                                  %endif
 20909                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20910 000032D9 08C0                    	OR	AL,AL
 20911 000032DB 7410                    	JZ	short CRDROK		; Ignore
 20912 000032DD 3C03                    	CMP	AL,3
 20913 000032DF 7403                    	JZ	short CRDFERR 		; fail.
 20914 000032E1 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20915 000032E2 EBD1                    	JMP	short ReadRawRetry	; Retry
 20916                                  
 20917                                  ; We have encountered a device-driver error. We have informed the user of it
 20918                                  ; and he has said for us to fail the system call.
 20919                                  
 20920                                  CRDFERR:
 20921 000032E4 5F                      	POP	DI			; Clean stack
 20922                                  DEVIOFERR:
 20923                                  
 20924                                  ;hkn; SS override
 20925 000032E5 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20926 000032EA E93105                  	jmp	SET_ACC_ERR_DS
 20927                                  
 20928                                  CRDROK:
 20929 000032ED 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20930 000032EE 89D7                    	MOV	DI,DX
 20931                                  
 20932                                  ;hkn; SS override
 20933 000032F0 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20934                                  	;JMP	SHORT ENDRDDEVJ3
 20935                                  	; 16/12/2022
 20936 000032F5 EB63                    	jmp	short ENDRDDEVJ2
 20937                                  
 20938                                  ; We are going to do a cooked read on some character device. There is a
 20939                                  ; problem here, what does the data look like? Is it a terminal device, line
 20940                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20941                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20942                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20943                                  ; included in data). this "simulates" the way con works in cooked mode
 20944                                  ; reading one line at a time. With file data, however, the lines will look
 20945                                  ; like, LF line CR. This is a little weird.
 20946                                  
 20947                                  NOTRDCON:
 20948                                  	;MOV	AX,ES
 20949                                  	;MOV	DS,AX
 20950                                  	; 07/02/2024
 20951 000032F7 06                      	push	es
 20952 000032F8 1F                      	pop	ds
 20953                                  
 20954                                  ; 07/02/2024
 20955                                  %if 0
 20956                                  	MOV	BX,DI
 20957                                  	; 06/02/2024 ; *
 20958                                  	;;XOR	DX,DX
 20959                                  	;;MOV	AX,DX
 20960                                  	;; 06/02/2024
 20961                                  	;xor	ax,ax
 20962                                  	;cwd
 20963                                  	PUSH	CX
 20964                                  	MOV	CX,1
 20965                                  	;call	SETREAD
 20966                                  	; 06/02/2024 ; *
 20967                                  	call	SETREAD_X
 20968                                  	POP	CX
 20969                                  %else
 20970 000032F9 51                      	push	cx
 20971 000032FA B90100                  	mov	cx,1
 20972 000032FD E8DD12                  	call	SETREAD_XJ
 20973 00003300 59                      	pop	cx
 20974                                  %endif
 20975                                  
 20976                                  ;hkn; SS override
 20977 00003301 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20978                                  	;lds	si,[si+7]
 20979 00003306 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20980                                  DVRDLP:
 20981 00003309 E8991C                  	call	DSKSTATCHK
 20982 0000330C E85B12                  	call	DEVIOCALL2
 20983 0000330F 57                      	PUSH	DI			; Save "count" done
 20984 00003310 B486                    	MOV	AH,86H
 20985                                  
 20986                                  ;hkn; SS override
 20987 00003312 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20988                                  	
 20989                                  	; MSDOS 3.3
 20990                                  	;test	di,8000h
 20991                                  	;jz	short CRDOK
 20992                                  	; MSDOS 6.0
 20993 00003317 09FF                    	or	di,di
 20994 00003319 7917                    	jns	short CRDOK
 20995                                  	
 20996 0000331B E8A21E                  	call	CHARHARD
 20997 0000331E 5F                      	POP	DI
 20998                                  
 20999                                  ;hkn; SS override
 21000 0000331F 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21001 00003326 3C01                    	CMP	AL,1
 21002 00003328 74DF                    	JZ	short DVRDLP		; Retry
 21003 0000332A 3C03                    	CMP	AL,3
 21004 0000332C 74B7                    	JZ	short DEVIOFERR		; FAIL
 21005 0000332E 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 21006 00003330 EB12                    	JMP	SHORT DVRDIGN
 21007                                  
 21008                                  CRDOK:
 21009 00003332 5F                      	POP	DI
 21010                                  
 21011                                  ;hkn; SS override
 21012 00003333 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 21013                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21014 00003339 751F                    	JNZ	short ENDRDDEVJ2
 21015                                  	; 16/12/2022
 21016                                  	;jnz	short ENDRDDEV ; 24/07/2019
 21017                                  
 21018 0000333B 1E                      	PUSH	DS
 21019                                  
 21020                                  ;hkn; SS override
 21021 0000333C 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21022 00003341 8A05                    	MOV	AL,[DI]			; Get the character we just read
 21023 00003343 1F                      	POP	DS
 21024                                  DVRDIGN:
 21025                                  
 21026                                  ;hkn; SS override
 21027 00003344 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 21028 00003349 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21029 00003350 47                      	INC	DI			; Next character
 21030 00003351 3C1A                    	CMP	AL,1Ah			; ^Z?
 21031                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21032 00003353 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 21033                                  	; 16/12/2022
 21034                                  	;jz	short ENDRDDEV ; 24/07/2019	
 21035 00003355 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 21036 00003357 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 21037 00003359 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 21038                                  					;  AX=FFFF which is not likely
 21039                                  ENDRDDEVJ2:
 21040                                  	; 16/12/2022
 21041                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 21042                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21043 0000335A EB78                    	jmp	ENDRDDEV
 21044                                  
 21045                                  	; 04/05/2019
 21046                                  
 21047                                  	; MSDOS 6.0
 21048                                  ;SR;
 21049                                  ;Polling code for raw read on CON when WIN386 is present
 21050                                  ;
 21051                                  ;At this point -- ds:di is transfer address
 21052                                  ;		  cx is count
 21053                                  
 21054                                  do_polling:
 21055                                  
 21056                                  ; 07/02/2024
 21057                                  %if 0
 21058                                  	mov	bx,di			;ds:bx is Xfer address
 21059                                  	; 06/02/2024 ; *
 21060                                  	;xor	ax,ax
 21061                                  	;;mov	dx,ax
 21062                                  	;; 06/02/2024
 21063                                  	;cwd
 21064                                  	;call	SETREAD			;prepare device packet
 21065                                  	; 06/02/2024 ; *
 21066                                  	call	SETREAD_X
 21067                                  %else
 21068 0000335C E87E12                  	call	SETREAD_XJ
 21069                                  %endif
 21070                                  
 21071                                  do_io:
 21072                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21073                                  
 21074 0000335F 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21075 00003364 1E                      	push	ds
 21076 00003365 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21077 0000336A E8FA11                  	call	DEVIOCALL		;call device driver
 21078 0000336D 1F                      	pop	ds
 21079                                  	
 21080                                  	;test	word [es:bx+3],8000h
 21081                                  	; 16/12/2022
 21082                                  	;test	byte [es:bx+4],80h
 21083 0000336E 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21084                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21085 00003373 7413                    	jz	short check_busy	;no
 21086                                  
 21087 00003375 1E                      	push	ds
 21088 00003376 89FA                    	mov	dx,di
 21089                                  
 21090                                  invoke_charhard:	; 07/02/2024
 21091                                  	;invoke charhard		;invoke int 24h handler
 21092 00003378 E8451E                  	call	CHARHARD
 21093 0000337B 89D7                    	mov	di,dx
 21094 0000337D 08C0                    	or	al,al
 21095 0000337F 744D                    	jz	short pop_done_read	;ignore by user, assume read done
 21096 00003381 3C03                    	cmp	al,3
 21097 00003383 7438                    	jz	short devrderr		;user asked to fail
 21098 00003385 1F                      	pop	ds
 21099 00003386 EBD7                    	jmp	short do_io		;user asked to retry
 21100                                  
 21101                                  check_busy:
 21102                                  	;test	word [es:bx+3],200h
 21103                                  	; 16/12/2022
 21104 00003388 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21105                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21106 0000338D 7537                    	jnz	short no_char		;yes, no character available
 21107                                  
 21108                                  ;Character is available. Read in 1 character at a time until all characters
 21109                                  ;are read in or no character is available
 21110                                  
 21111 0000338F 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21112 00003394 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21113 0000339A 1E                      	push	ds
 21114 0000339B 36C536[9E05]            	lds	si,[ss:THISSFT]
 21115 000033A0 E8C411                  	call	DEVIOCALL
 21116                                  
 21117 000033A3 89FA                    	mov	dx,di
 21118 000033A5 B486                    	mov	ah,86h
 21119                                  	;mov	di,[es:bx+3]
 21120 000033A7 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21121 000033AB F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21122                                  	;jz	short next_char		;no,read next character
 21123                                  	; 07/02/2024
 21124 000033AF 75C7                    	jnz	short invoke_charhard
 21125                                  
 21126                                  ; 07/02/2024
 21127                                  %if 0
 21128                                  	;invoke	charhard		;invoke int 24h handler
 21129                                  	call	CHARHARD
 21130                                  	mov	di,dx			;restore di
 21131                                  	or	al,al			;
 21132                                  	jz	short pop_done_read	;ignore by user,assume read is done
 21133                                  	cmp	al,3
 21134                                  	jz	short devrderr		;user issued a 'fail',indicate error
 21135                                  	pop	ds
 21136                                  	jmp	short do_io		;user issued a retry
 21137                                  %endif
 21138                                  
 21139                                  next_char:
 21140 000033B1 1F                      	pop	ds
 21141 000033B2 89D7                    	mov	di,dx
 21142 000033B4 49                      	dec	cx			;decrement count
 21143                                  	;jcxz	done_read		;all characters read in
 21144                                  	; 07/02/2024
 21145 000033B5 7418                    	jz	short done_read
 21146 000033B7 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21147 000033BB EBA2                    	jmp	short do_io		;read next character in
 21148                                  
 21149                                  devrderr:
 21150 000033BD 5F                      	pop	di			;discard segment address
 21151 000033BE 36C43E[9E05]            	les	di,[ss:THISSFT]
 21152                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21153 000033C3 E95804                  	jmp     SET_ACC_ERR_DS
 21154                                  
 21155                                  no_char:
 21156                                  ;Since no character is available, we let win386 switch the VM out
 21157                                  
 21158 000033C6 50                      	push	ax
 21159 000033C7 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21160 000033C9 CD2A                    	int	2Ah			;indicate idle to WIN386
 21161                                  
 21162                                  ;When control returns from WIN386, we continue the raw read
 21163                                  
 21164 000033CB 58                      	pop	ax
 21165 000033CC EB91                    	jmp	do_io
 21166                                  
 21167                                  pop_done_read:
 21168 000033CE 1F                      	pop	ds
 21169                                  done_read:
 21170 000033CF 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21171                                  
 21172                                  	; 16/12/2022
 21173                                  
 21174                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21175                                  	;jmp	ENDRDDEV ; 04/05/2019
 21176                                  
 21177                                  	; 04/05/2019 - Retro DOS v4.0
 21178                                  ENDRDDEV:
 21179 000033D4 16                      	push	ss
 21180 000033D5 1F                      	pop	ds
 21181 000033D6 EB1F                    	jmp	short endrddev1
 21182                                  
 21183                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21184                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21185                                  
 21186                                  TRANBUF:
 21187 000033D8 AC                      	LODSB
 21188 000033D9 AA                      	STOSB
 21189 000033DA 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21190 000033DC 7503                    	JNZ	short NORMCH
 21191 000033DE C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21192                                  NORMCH:
 21193 000033E1 3C0A                    	CMP	AL,c_LF ; 0Ah
 21194 000033E3 E0F3                    	LOOPNZ	TRANBUF
 21195 000033E5 7507                    	JNZ	short ENDRDCON
 21196 000033E7 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21197 000033E9 E85BE2                  	call	OUTT		; Transmit linefeed
 21198 000033EC 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21199                                  ENDRDCON:
 21200                                  ;hkn; SS is DOSDATA
 21201 000033EE 16                      	push	ss
 21202 000033EF 1F                      	pop	ds
 21203 000033F0 E835FE                  	CALL	SWAPBACK
 21204 000033F3 8936[2200]              	MOV	[CONTPOS],SI
 21205                                  
 21206                                  	; 16/12/2022
 21207                                  ;ENDRDDEV:
 21208                                  ;;hkn; SS is DOSDATA
 21209                                  ;	push	ss
 21210                                  ;	pop	ds
 21211                                  endrddev1:	; 04/05/2019
 21212 000033F7 893E[B805]              	MOV	[NEXTADD],DI
 21213 000033FB 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21214 000033FD C43E[9E05]              	LES	DI,[THISSFT]
 21215                                  	;and	byte [es:di+5],0BFh
 21216 00003401 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21217                                  				; Mark as no more data available
 21218                                  SETSFTC:
 21219                                  	; 31/07/2019
 21220                                  	;call	SETSFT
 21221                                  	;retn
 21222 00003406 E9A904                  	jmp	SETSFT
 21223                                  
 21224                                  ; 16/12/2022
 21225                                  %if 0
 21226                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21227                                  ENDRDDEV:
 21228                                  ;hkn; SS is DOSDATA
 21229                                  	push	ss
 21230                                  	pop	ds
 21231                                  	MOV	[NEXTADD],DI
 21232                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21233                                  	LES	DI,[THISSFT]
 21234                                  	;and	byte [es:di+5],0BFh
 21235                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21236                                  				; Mark as no more data available
 21237                                  SETSFTC:
 21238                                  	;call	SETSFT
 21239                                  	;retn
 21240                                  	jmp	SETSFT	
 21241                                  %endif
 21242                                  
 21243                                  READCON:
 21244 00003409 E822FE                  	CALL	SWAPCON
 21245 0000340C 8B36[2200]              	MOV	SI,[CONTPOS]
 21246 00003410 09F6                    	OR	SI,SI
 21247 00003412 75C4                    	JNZ	short TRANBUF
 21248 00003414 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21249 00003419 7406                    	JZ	short GETBUF
 21250 0000341B C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21251                                  GETBUF:
 21252 00003421 51                      	PUSH	CX
 21253 00003422 06                      	PUSH	ES
 21254 00003423 57                      	PUSH	DI
 21255                                  
 21256                                  ;hkn; CONBUF is in DOSDATA
 21257 00003424 BA[7B02]                	MOV	DX,CONBUF
 21258                                  
 21259 00003427 E898DF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21260 0000342A 5F                      	POP	DI
 21261 0000342B 07                      	POP	ES
 21262 0000342C 59                      	POP	CX
 21263                                  
 21264                                  ;hkn; CONBUF is in DOSDATA
 21265 0000342D BE[7D02]                	MOV	SI,CONBUF+2
 21266                                  
 21267 00003430 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21268 00003433 75A3                    	JNZ	short TRANBUF
 21269 00003435 B01A                    	MOV	AL,1AH
 21270 00003437 AA                      	STOSB
 21271 00003438 4F                      	DEC	DI
 21272 00003439 B00A                    	MOV	AL,c_LF
 21273 0000343B E809E2                  	call	OUTT		; Send linefeed
 21274 0000343E 31F6                    	XOR	SI,SI
 21275 00003440 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21276                                  
 21277                                  ; 24/07/2018 - Retro DOS v3.0
 21278                                  
 21279                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21280                                  ;---------------------------------------------------------------------------
 21281                                  ;
 21282                                  ; Procedure Name : DOS_WRITE
 21283                                  ;
 21284                                  ; Inputs:
 21285                                  ;	ThisSFT set to the SFT for the file being used
 21286                                  ;	[DMAADD] contains transfer address
 21287                                  ;	CX = No. of bytes to write
 21288                                  ; Function:
 21289                                  ;	Perform write operation
 21290                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21291                                  ;		to current sf_position
 21292                                  ; Outputs:
 21293                                  ;    Carry clear
 21294                                  ;	SFT Position and cluster pointers updated
 21295                                  ;	CX = No. of bytes written
 21296                                  ;	ES:DI point to SFT
 21297                                  ;    Carry set
 21298                                  ;	AX is error code
 21299                                  ;	CX = 0
 21300                                  ;	ES:DI point to SFT
 21301                                  ; DS preserved, all other registers destroyed
 21302                                  ;---------------------------------------------------------------------------
 21303                                  
 21304                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21305                                  ;hkn; point to DOSDATA.
 21306                                  
 21307                                  ; 04/05/2019 - Retro DOS v4.0
 21308                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21309                                  
 21310                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21311                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21312                                  
 21313                                  DOS_WRITE:
 21314 00003442 C43E[9E05]              	LES	DI,[THISSFT]
 21315                                  	;mov	al,[ES:DI+2]
 21316 00003446 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21317                                  	;and	al,0Fh
 21318 0000344A 240F                    	AND	AL,access_mask
 21319                                  	;cmp	al,0
 21320 0000344C 3C00                    	CMP	AL,open_for_read
 21321 0000344E 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21322                                  BadMode:
 21323 00003450 E9CD03                  	jmp	SET_ACC_ERR
 21324                                  
 21325                                  ; NOTE: The following check for writting to a Read Only File is performed
 21326                                  ;	    ONLY on FCBs!!!!
 21327                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21328                                  ;	    of a read only file which can then be written to.
 21329                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21330                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21331                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21332                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21333                                  ;	    to a read-only file.
 21334                                  
 21335                                  Check_FCB_RO:
 21336                                  	;;test	word [es:di+2],8000h
 21337                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21338                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21339                                  	
 21340                                  	;test	byte [es:di+3],80h
 21341 00003453 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21342 00003458 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21343                                  
 21344                                  	;test	byte [es:di+4],1
 21345 0000345A 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21346 0000345F 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21347                                  WRITE_NO_MODE:
 21348 00003461 E8A402                  	call	SETUP
 21349 00003464 E8E3DD                  	call	IsSFTNet
 21350 00003467 7406                    	JZ	short LOCAL_WRITE
 21351                                  
 21352                                  ;IF NOT Installed
 21353                                  ;	transfer NET_WRITE
 21354                                  ;ELSE
 21355                                  	;mov	ax,1109h
 21356 00003469 B80911                  	MOV	AX,(MultNET<<8)|9
 21357 0000346C CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21358                                  			; ES:DI -> SFT
 21359                                  			; SFT DPB field -> DPB of drive containing file
 21360                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21361                                  			; Return: CF set on error, CX = bytes written
 21362 0000346E C3                      	retn
 21363                                  ;ENDIF
 21364                                  
 21365                                  LOCAL_WRITE:
 21366                                  	;;test	word [es:di+5],80h
 21367                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21368                                  	;jnz	short WRTDEV
 21369                                  
 21370                                  	;test	byte [es:di+5],80h
 21371 0000346F 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21372 00003474 756D                    	jnz	short WRTDEV
 21373                                  
 21374                                  	;mov	byte [EXTERR_LOCUS],2
 21375 00003476 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21376 0000347B E875DE                  	call	ECritDisk
 21377                                  
 21378 0000347E E8E104                  	call	DISKWRITE
 21379                                  
 21380                                  	; 04/05/2019 - Retro DOS v4.0
 21381                                  
 21382                                  	; MSDOS 6.0
 21383                                  ; Extended Open
 21384 00003481 7210                    	JC	short nocommit
 21385                                  	
 21386 00003483 C43E[9E05]              	LES	DI,[THISSFT]
 21387                                  	
 21388                                  	;;test	word [ES:DI+2],4000h
 21389                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21390                                  	;JZ	short nocommit
 21391                                  	
 21392                                  	;test	byte [ES:DI+3],40h
 21393 00003487 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21394 0000348C 7405                    	JZ	short nocommit
 21395                                  	
 21396 0000348E 51                      	PUSH	CX
 21397 0000348F E85EFB                  	call	DOS_COMMIT
 21398 00003492 59                      	POP	CX
 21399                                  nocommit:
 21400                                  ; Extended Open
 21401                                  	;call	LCritDisk
 21402                                  	;retn
 21403                                  	; 18/12/2022
 21404 00003493 E978DE                  	jmp	LCritDisk
 21405                                  
 21406                                  DVWRTRAW:
 21407 00003496 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21408 00003498 E88311                  	call	SETWRITE
 21409 0000349B 1E                      	PUSH	DS			; Save seg of transfer
 21410                                  
 21411                                  ;hkn; SS override
 21412 0000349C 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21413 000034A1 E8C310                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21414                                  
 21415 000034A4 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21416 000034A6 B487                    	MOV	AH,87H
 21417                                  
 21418                                  ;hkn; SS override
 21419 000034A8 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21420                                  
 21421                                  	; MSDOS 3.3
 21422                                  	;test	di,8000h
 21423                                  	;jz	short CWRTROK
 21424                                  
 21425                                  	; MSDOS 6.0
 21426 000034AD 09FF                    	or	di,di
 21427 000034AF 791F                    	jns	short CWRTROK
 21428                                  	
 21429                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21430 000034B1 E80C1D                  	call	CHARHARD
 21431                                  
 21432                                  	; 04/05/2019  - Retro DOS v4.0
 21433                                  
 21434                                  	; MSDOS 6.0
 21435                                  	;sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21436                                  	; 08/02/2024
 21437 000034B4 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 21438 000034B9 29F9                    	sub	cx,di
 21439 000034BB 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21440                                  	;add	bx,[ss:CALLSCNT]	;				M065
 21441 000034BD 01FB                    	add	bx,di
 21442 000034BF 89DF                    	mov	di,bx			;				M065
 21443                                  	
 21444                                  	; MSDOS 3.3
 21445                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21446                                  
 21447                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21448 000034C1 08C0                    	OR	AL,AL
 21449 000034C3 740B                    	JZ	short CWRTROK 		; Ignore
 21450 000034C5 3C03                    	CMP	AL,3
 21451 000034C7 7403                    	JZ	short CWRFERR
 21452 000034C9 1F                      	POP	DS			; Recover saved seg of transfer
 21453 000034CA EBCA                    	JMP	short DVWRTRAW		; Try again
 21454                                  CWRFERR:
 21455 000034CC 58                      	POP	AX			; Chuck saved seg of transfer
 21456 000034CD E914FE                  	JMP	CRDFERR 		; Will pop one more stack element
 21457                                  CWRTROK:
 21458 000034D0 58                      	POP	AX			; Chuck saved seg of transfer
 21459 000034D1 1F                      	POP	DS
 21460 000034D2 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21461                                  ENDWRDEV:
 21462 000034D5 C43E[9E05]              	LES	DI,[THISSFT]
 21463 000034D9 89C1                    	MOV	CX,AX
 21464                                  	;call	ADDREC
 21465                                  	;retn
 21466                                  	; 16/12/2022
 21467                                  	; 10/06/2019
 21468 000034DB E9F503                  	jmp	ADDREC
 21469                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21470                                  	;call	ADDREC
 21471                                  	;retn
 21472                                  	
 21473                                  WRTNUL:
 21474 000034DE 89CA                    	MOV	DX,CX			; Entire transfer done
 21475                                  WRTCOOKJ:
 21476 000034E0 E98D00                  	JMP	WRTCOOKDONE
 21477                                  WRTDEV:
 21478                                  	;mov	byte [EXTERR_LOCUS],4
 21479 000034E3 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21480                                  	;or	byte [es:di+5],40h
 21481 000034E8 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21482                                  					; Reset EOF for input
 21483                                  	;mov	bl,[es:di+5]
 21484 000034ED 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21485 000034F1 31C0                    	XOR	AX,AX
 21486 000034F3 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21487 000034F5 1E                      	PUSH	DS
 21488 000034F6 88D8                    	MOV	AL,BL
 21489 000034F8 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21490 000034FC 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21491 000034FE 31D2                    	XOR	DX,DX			; Set starting point
 21492                                  	;test	al,20h
 21493 00003500 A820                    	test	AL,devid_device_raw	; Raw?
 21494                                  	;JZ	short TEST_DEV_CON
 21495                                  	;JMP	DVWRTRAW
 21496                                  	; 16/12/2022
 21497 00003502 7592                    	jnz	short DVWRTRAW
 21498                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21499                                  	;JZ	short TEST_DEV_CON
 21500                                  	;JMP	short DVWRTRAW
 21501                                  
 21502                                  TEST_DEV_CON:
 21503                                  	;test	al,2
 21504 00003504 A802                    	test	AL,devid_device_con_out ; Console output device?
 21505 00003506 756E                    	jnz	short WRITECON
 21506                                  	;test	al,4
 21507 00003508 A804                    	test	AL,devid_device_null
 21508 0000350A 75D2                    	JNZ	short WRTNUL
 21509 0000350C 89D0                    	MOV	AX,DX
 21510 0000350E 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21511 00003511 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21512 00003513 51                      	PUSH	CX
 21513 00003514 B90100                  	MOV	CX,1
 21514 00003517 E80411                  	call	SETWRITE
 21515 0000351A 59                      	POP	CX
 21516                                  
 21517                                  ;hkn; SS override
 21518 0000351B 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21519                                  ;
 21520                                  ;SR; Removed X25 support from here
 21521                                  ;
 21522                                  	;lds	si,[si+7]
 21523 00003520 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21524                                  DVWRTLP:
 21525 00003523 E87F1A                  	call	DSKSTATCHK
 21526 00003526 E84110                  	call	DEVIOCALL2
 21527 00003529 57                      	PUSH	DI
 21528 0000352A B487                    	MOV	AH,87H
 21529                                  
 21530                                  ;hkn; SS override
 21531 0000352C 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21532                                  	
 21533                                  	; MSDOS 3.3
 21534                                  	;test	di,8000h
 21535                                  	;jz	short CWROK
 21536                                  
 21537                                  	; MSDOS 6.0
 21538 00003531 09FF                    	or	di,di
 21539 00003533 7916                    	jns	short CWROK
 21540                                  	
 21541                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21542 00003535 E8881C                  	call	CHARHARD
 21543 00003538 5F                      	POP	DI
 21544                                  
 21545                                  ;hkn; SS override
 21546 00003539 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21547 00003540 3C01                    	CMP	AL,1
 21548 00003542 74DF                    	JZ	short DVWRTLP 	; Retry
 21549 00003544 08C0                    	OR	AL,AL
 21550 00003546 740C                    	JZ	short DVWRTIGN	; Ignore
 21551                                  	; 10/08/2018
 21552 00003548 E999FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21553                                  CWROK:
 21554 0000354B 5F                      	POP	DI
 21555                                  
 21556                                  ;hkn; SS override
 21557 0000354C 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21558 00003552 741C                    	JZ	short WRTCOOKDONE
 21559                                  DVWRTIGN:
 21560 00003554 42                      	INC	DX
 21561                                  
 21562                                  ;hkn; SS override for CALLXAD
 21563 00003555 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21564 0000355A 47                      	INC	DI
 21565 0000355B 1E                      	PUSH	DS
 21566 0000355C 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21567 00003561 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21568 00003564 1F                      	POP	DS
 21569 00003565 7409                    	JZ	short WRTCOOKDONE
 21570                                  
 21571                                  ;hkn; SS override
 21572 00003567 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21573 0000356E E2B3                    	LOOP	DVWRTLP
 21574                                  WRTCOOKDONE:
 21575 00003570 89D0                    	MOV	AX,DX
 21576 00003572 1F                      	POP	DS
 21577 00003573 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21578                                  
 21579                                  WRITECON:
 21580 00003576 1E                      	PUSH	DS
 21581                                  
 21582                                  ;hkn; SS is DOSDATA
 21583 00003577 16                      	push	ss
 21584 00003578 1F                      	pop	ds
 21585 00003579 E8B2FC                  	CALL	SWAPCON
 21586 0000357C 1F                      	POP	DS
 21587 0000357D 89DE                    	MOV	SI,BX
 21588 0000357F 51                      	PUSH	CX
 21589                                  WRCONLP:
 21590 00003580 AC                      	LODSB
 21591 00003581 3C1A                    	CMP	AL,1Ah		; ^Z?
 21592 00003583 7405                    	JZ	short CONEOF
 21593 00003585 E8BFE0                  	call	OUTT
 21594 00003588 E2F6                    	LOOP	WRCONLP
 21595                                  CONEOF:
 21596 0000358A 58                      	POP	AX			; Count
 21597 0000358B 29C8                    	SUB	AX,CX			; Amount actually written
 21598 0000358D 1F                      	POP	DS
 21599 0000358E E897FC                  	CALL	SWAPBACK
 21600 00003591 E941FF                  	JMP	ENDWRDEV
 21601                                  
 21602                                  ;---------------------------------------------------------------------------
 21603                                  ;
 21604                                  ; Procedure Name : get_io_sft
 21605                                  ;
 21606                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21607                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21608                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21609                                  ;
 21610                                  ;---------------------------------------------------------------------------
 21611                                  
 21612                                  ; 04/05/2019 - Retro DOS v4.0
 21613                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21614                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21615                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21616                                  
 21617                                  GET_IO_SFT:
 21618                                  	;test	byte [SS:CONSWAP],0FFh
 21619 00003594 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21620 0000359A 7512                    	JNZ	short GetRedir
 21621                                  GetNormal:
 21622 0000359C 16                      	push	ss
 21623 0000359D 1F                      	pop	ds
 21624 0000359E 06                      	PUSH	ES
 21625 0000359F 57                      	PUSH	DI
 21626 000035A0 E8BB2F                  	call	SFFromHandle
 21627 000035A3 7206                    	JC	short RET44P
 21628 000035A5 8CC6                    	MOV	SI,ES
 21629 000035A7 8EDE                    	MOV	DS,SI
 21630 000035A9 89FE                    	MOV	SI,DI
 21631                                  RET44P:
 21632 000035AB 5F                      	POP	DI
 21633 000035AC 07                      	POP	ES
 21634 000035AD C3                      	retn
 21635                                  GetRedir:
 21636 000035AE 83FB01                  	CMP	BX,1
 21637 000035B1 77E9                    	JA	short GetNormal
 21638 000035B3 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21639 000035B8 F8                      	CLC
 21640                                  get_io_sft_retn:
 21641 000035B9 C3                      	retn
 21642                                  
 21643                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21644                                  ;---------------------------------------------------------------------------
 21645                                  ;
 21646                                  ; Procedure Name : DIRREAD
 21647                                  ;
 21648                                  ; Inputs:
 21649                                  ;	AX = Directory block number (relative to first block of directory)
 21650                                  ;	ES:BP = Base of drive parameters
 21651                                  ;	[DIRSEC] = First sector of first cluster of directory
 21652                                  ;	[CLUSNUM] = Next cluster
 21653                                  ;	[CLUSFAC] = Sectors/Cluster
 21654                                  ; Function:
 21655                                  ;	Read the directory block into [CURBUF].
 21656                                  ; Outputs:
 21657                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21658                                  ;	[SECCLUSPOS] Set
 21659                                  ;	ES:BP unchanged
 21660                                  ;	[CURBUF] Points to Buffer with dir sector
 21661                                  ;	Carry set if error (user said FAIL to I 24)
 21662                                  ; DS preserved, all other registers destroyed.
 21663                                  ;---------------------------------------------------------------------------
 21664                                  
 21665                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21666                                  
 21667                                  DIRREAD:
 21668                                  
 21669                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21670                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21671                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21672                                  ; by DIRStart = 0.
 21673                                  
 21674 000035BA 31D2                    	XOR	DX,DX
 21675                                  	;CMP	word [DIRSTART],0
 21676                                  	; 21/09/2023
 21677 000035BC 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21678 000035C0 7503                    	jnz	short SubDir
 21679 000035C2 92                      	XCHG	AX,DX
 21680 000035C3 EB0C                    	JMP	short DoRead
 21681                                  
 21682                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21683                                  
 21684                                  SubDir:
 21685 000035C5 88C2                    	MOV	DL,AL
 21686                                  	;and	dl,[es:bp+4]
 21687 000035C7 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21688                                  
 21689                                  ;	(DX) = sector-in-cluster
 21690                                  
 21691                                  	;mov	cl,[es:bp+5]
 21692 000035CB 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21693 000035CF D3E8                    	SHR	AX,CL
 21694                                  
 21695                                  ;	(DX) = position in cluster
 21696                                  ;	(AX) = number of clusters to skip
 21697                                  
 21698                                  DoRead:
 21699 000035D1 8816[7305]              	MOV	[SECCLUSPOS],DL
 21700 000035D5 89C1                    	MOV	CX,AX
 21701 000035D7 88D4                    	MOV	AH,DL
 21702                                  
 21703                                  ;	(CX) = number of clusters to skip.
 21704                                  ;	(AH) = remainder
 21705                                  
 21706                                  	; 04/05/2019 - Retro DOS v4.0
 21707                                  	 
 21708                                  	; MSDOS 6.0
 21709                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21710                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21711                                  	;MOV	DX,[DIRSEC]
 21712                                  	;ADD	DL,AH
 21713                                  	;ADC	DH,0
 21714                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21715                                  	; 21/09/2023
 21716 000035D9 31DB                    	xor	bx,bx ; 0
 21717 000035DB 8B16[BE05]              	mov	dx,[DIRSEC]
 21718 000035DF 00E2                    	add	dl,ah
 21719 000035E1 10DE                    	adc	dh,bl ; 0
 21720 000035E3 131E[C005]              	adc	bx,[DIRSEC+2]
 21721 000035E7 891E[0706]              	mov	[HIGH_SECTOR],bx
 21722                                  
 21723 000035EB 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21724 000035EF 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21725 000035F3 E319                    	JCXZ	FIRSTCLUSTER
 21726                                  SKPCLLP:
 21727 000035F5 E8311E                  	call	UNPACK
 21728 000035F8 72BF                    	jc	short get_io_sft_retn
 21729 000035FA 87DF                    	XCHG	BX,DI
 21730 000035FC E8131E                  	call	IsEOF			; test for eof based on fat size
 21731 000035FF 7302                    	JAE	short HAVESKIPPED
 21732 00003601 E2F2                    	LOOP	SKPCLLP
 21733                                  HAVESKIPPED:
 21734 00003603 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21735 00003607 89FA                    	MOV	DX,DI
 21736 00003609 88E3                    	MOV	BL,AH
 21737 0000360B E8D916                  	call	FIGREC
 21738                                  
 21739                                  	;entry	FIRSTCLUSTER
 21740                                  
 21741                                  FIRSTCLUSTER:
 21742                                  	; 22/09/2023
 21743                                  	;;mov	byte [ALLOWED],18h
 21744                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21745                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21746                                  	;call	GETBUFFR
 21747 0000360E E82322                  	call	GETBUFFER ; *	; pre-read
 21748 00003611 72A6                    	jc	short get_io_sft_retn
 21749                                  
 21750                                  	;entry	SET_BUF_AS_DIR
 21751                                  
 21752                                  SET_BUF_AS_DIR:
 21753                                  
 21754                                  ;	Set the type of CURBUF to be a directory sector.
 21755                                  ;	Only flags are modified.
 21756                                  
 21757 00003613 1E                      	PUSH	DS
 21758 00003614 56                      	PUSH	SI
 21759 00003615 C536[E205]              	LDS	SI,[CURBUF]
 21760                                  	;or	byte [si+5],4
 21761 00003619 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21762 0000361D 5E                      	POP	SI
 21763 0000361E 1F                      	POP	DS
 21764                                  dirread_retn:
 21765 0000361F C3                      	retn
 21766                                  
 21767                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21768                                  ;----------------------------------------------------------------------------
 21769                                  ;
 21770                                  ; Procedure Name : FATSECRD
 21771                                  ; Inputs:
 21772                                  ;	Same as DREAD
 21773                                  ;	DS:BX = Transfer address
 21774                                  ;	CX = Number of sectors
 21775                                  ;	DX = Absolute record number
 21776                                  ;	ES:BP = Base of drive parameters
 21777                                  ; Function:
 21778                                  ;	Calls BIOS to perform FAT read.
 21779                                  ; Outputs:
 21780                                  ;	Same as DREAD
 21781                                  ;---------------------------------------------------------------------------
 21782                                  
 21783                                  	; 04/05/2019 - Retro DOS v4.0
 21784                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21785                                  
 21786                                  FATSECRD:
 21787                                  ;hkn; SS override
 21788                                  	;mov	byte [ss:ALLOWED],18h
 21789 00003620 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21790 00003626 89CF                    	MOV	DI,CX
 21791                                  	;mov	cl,[es:bp+8]
 21792 00003628 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21793                                  	; MSDOS 3.3
 21794                                  	;;mov	al,[es:bp+0Fh]
 21795                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE]
 21796                                  	;XOR	AH,AH
 21797                                  	; MSDOS 6.0
 21798                                  	;mov	ax,[es:bp+0Fh]
 21799 0000362C 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21800 00003630 30ED                    	XOR	CH,CH
 21801 00003632 52                      	PUSH	DX
 21802                                  NXTFAT:
 21803                                  	; MSDOS 6.0
 21804                                  ;hkn; SS override
 21805 00003633 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21806 0000363A 51                      	PUSH	CX			;32mb
 21807 0000363B 50                      	PUSH	AX
 21808 0000363C 89F9                    	MOV	CX,DI
 21809 0000363E E85B00                  	call	DSKREAD
 21810 00003641 58                      	POP	AX
 21811 00003642 59                      	POP	CX
 21812 00003643 7420                    	JZ	short RET41P		; Carry clear
 21813 00003645 01C2                    	ADD	DX,AX
 21814 00003647 E2EA                    	LOOP	NXTFAT
 21815 00003649 5A                      	POP	DX
 21816 0000364A 89F9                    	MOV	CX,DI
 21817                                  
 21818                                  ; NOTE FALL THROUGH
 21819                                  
 21820                                  ;Break	<DREAD -- DO A DISK READ>
 21821                                  ;---------------------------------------------------------------------------
 21822                                  ;
 21823                                  ; Procedure Name : DREAD
 21824                                  ;
 21825                                  ; Inputs:
 21826                                  ;	DS:BX = Transfer address
 21827                                  ;	CX = Number of sectors
 21828                                  ;	DX = Absolute record number	      (LOW)
 21829                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21830                                  ;	ES:BP = Base of drive parameters
 21831                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21832                                  ; Function:
 21833                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21834                                  ;	errors, will call HARDERRRW for further action.
 21835                                  ; Outputs:
 21836                                  ;	Carry set if error (currently user FAILED to INT 24)
 21837                                  ; DS,ES:BP preserved. All other registers destroyed.
 21838                                  ;---------------------------------------------------------------------------
 21839                                  
 21840                                  	;entry	DREAD
 21841                                  DREAD:
 21842 0000364C E84D00                  	call	DSKREAD
 21843 0000364F 74CE                    	jz	short dirread_retn	; Carry clear
 21844                                  ;hkn; SS override
 21845 00003651 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21846 00003657 E89500                  	call	HARDERRRW
 21847 0000365A 3C01                    	CMP	AL,1			; Check for retry
 21848 0000365C 74EE                    	JZ	short DREAD
 21849                                  
 21850                                  fail_ignore:	; 09/02/2024
 21851 0000365E 3C03                    	CMP	AL,3			; Check for FAIL
 21852 00003660 F8                      	CLC
 21853 00003661 7501                    	JNZ	short NO_CAR		; Ignore
 21854 00003663 F9                      	STC
 21855                                  NO_CAR:
 21856 00003664 C3                      	retn
 21857                                  RET41P: 
 21858 00003665 5A                      	POP	DX
 21859 00003666 C3                      	retn
 21860                                  
 21861                                  ; 24/07/2018 - Retro DOS v3.0
 21862                                  
 21863                                  ;Break	<CHECK_WRITE_LOCK>
 21864                                  ;---------------------------------------------------------------------------
 21865                                  ;
 21866                                  ; Procedure Name : CHECK_WRITE_LOCK
 21867                                  ;
 21868                                  ; Inputs:
 21869                                  ;	output of SETUP
 21870                                  ;	ES:DI -> SFT
 21871                                  ; Function:
 21872                                  ;	check write lock
 21873                                  ; Outputs:
 21874                                  ;	Carry set if error
 21875                                  ;	Carry clear if ok
 21876                                  ;
 21877                                  ;----------------------------------------------------------------------------
 21878                                  
 21879                                  	; 04/05/2019 - Retro DOS v4.0
 21880                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21881                                  
 21882                                  CHECK_WRITE_LOCK:
 21883                                  	; MSDOS 6.0
 21884                                  	;test	byte [es:di+4],8
 21885 00003667 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21886                                  	;JZ	short write_cont			     ;no
 21887                                  	;;call	SET_ACC_ERR_DS
 21888                                  	;;retn
 21889                                  	;;jnz	SET_ACC_ERR_DS
 21890                                  	; 19/08/2018
 21891                                  	;jz	short write_cont
 21892                                  	;jmp	SET_ACC_ERR_DS
 21893                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21894 0000366C 7403                    	JZ	short write_cont
 21895                                  	;call	SET_ACC_ERR_DS
 21896                                  	;retn
 21897                                  	; 16/12/2022
 21898 0000366E E9AD01                  	jmp	SET_ACC_ERR_DS
 21899                                  
 21900                                  write_cont:				;
 21901 00003671 51                      	PUSH	CX			;save reg
 21902 00003672 09C9                    	OR	CX,CX			;
 21903 00003674 7501                    	JNZ	short Not_Truncate	;
 21904 00003676 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21905                                  Not_Truncate:				;
 21906 00003677 B080                    	MOV	AL,80H			;check write access
 21907 00003679 E86B3B                  	call	LOCK_CHECK		;check lock
 21908 0000367C 59                      	POP	CX			;restore reg
 21909 0000367D 7305                    	JNC	short WRITE_OK		;lock ok
 21910 0000367F E85A01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21911 00003682 73ED                    	JNC	short write_cont	;retry
 21912                                  WRITE_OK:				;
 21913 00003684 C3                      	retn				;
 21914                                  
 21915                                  ;Break	<CHECK_READ_LOCK>
 21916                                  ;---------------------------------------------------------------------------
 21917                                  ;
 21918                                  ; Procedure Name : CHECK_READ_LOC
 21919                                  ;
 21920                                  ; Inputs:
 21921                                  ;	ES:DI -> SFT
 21922                                  ;	output of SETUP
 21923                                  ; Function:
 21924                                  ;	check read lock
 21925                                  ; Outputs:
 21926                                  ;	Carry set if error
 21927                                  ;	Carry clear if ok
 21928                                  ;----------------------------------------------------------------------------
 21929                                  
 21930                                  CHECK_READ_LOCK:
 21931                                  	; MSDOS 6.0
 21932                                  	;test	byte [es:di+4],8
 21933 00003685 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21934                                  	;JZ	short do_retry			   	     ; no
 21935                                  	;;call	SET_ACC_ERR
 21936                                  	;;retn
 21937                                  	;;jnz	SET_ACC_ERR
 21938                                  	; 16/12/2022
 21939                                  	; 28/07/2019
 21940 0000368A 7403                    	jz	short do_retry
 21941 0000368C E99101                  	jmp	SET_ACC_ERR
 21942                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21943                                  	;JZ	short do_retry
 21944                                  	;call	SET_ACC_ERR
 21945                                  	;retn
 21946                                  do_retry:				;
 21947 0000368F 30C0                    	xor	al,al			;check read access
 21948 00003691 E8533B                  	call	LOCK_CHECK		;check lock
 21949 00003694 7305                    	JNC	short READLOCK_OK 	;lock ok
 21950 00003696 E82301                  	call	READ_LOCK_VIOLATION	;issue I24
 21951 00003699 73F4                    	JNC	short do_retry		;retry
 21952                                  READLOCK_OK:				;
 21953                                  dw_ret_label:	; 09/02/2024
 21954 0000369B C3                      	retn				;
 21955                                  
 21956                                  ;============================================================================
 21957                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21958                                  ;============================================================================
 21959                                  ; 24/07/2018 - Retro DOS v3.0
 21960                                  ; 04/05/2019 - Retro DOS v4.0
 21961                                  
 21962                                  ;	TITLE	DISK2 - Disk utility routines
 21963                                  ;	NAME	Disk2
 21964                                  
 21965                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21966                                  ;
 21967                                  ;	DskRead
 21968                                  ;	DWRITE
 21969                                  ;	DSKWRITE
 21970                                  ;	HarderrRW
 21971                                  ;	SETUP
 21972                                  ;	BREAKDOWN
 21973                                  ;	READ_LOCK_VIOLATION
 21974                                  ;	WRITE_LOCK_VIOLATION
 21975                                  ;	DISKREAD
 21976                                  ;	SET_ACC_ERR_DS
 21977                                  ;	SET_ACC_ERR
 21978                                  ;	SETSFT
 21979                                  ;	SETCLUS
 21980                                  ;	AddRec
 21981                                  ;
 21982                                  ;	Revision history:
 21983                                  ;
 21984                                  ;		AN000 version 4.00 Jan. 1988
 21985                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21986                                  
 21987                                  ; 04/05/2019 - Retro DOS v4.0
 21988                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21989                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21990                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21991                                  
 21992                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21993                                  ;---------------------------------------------------------------------------
 21994                                  ;
 21995                                  ; Procedure Name : DSKREAD
 21996                                  ;
 21997                                  ; Inputs:
 21998                                  ;	DS:BX = Transfer addr
 21999                                  ;	CX = Number of sectors
 22000                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22001                                  ;	DX = Absolute record number	       (LOW)
 22002                                  ;	ES:BP = Base of drive parameters
 22003                                  ; Function:
 22004                                  ;	Call BIOS to perform disk read
 22005                                  ; Outputs:
 22006                                  ;	DI = CX on entry
 22007                                  ;	CX = Number of sectors unsuccessfully transfered
 22008                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22009                                  ;	Zero set if OK (from BIOS) (carry clear)
 22010                                  ;	Zero clear if error (carry clear)
 22011                                  ; SI Destroyed, others preserved
 22012                                  ;---------------------------------------------------------------------------
 22013                                  
 22014                                  DSKREAD:
 22015 0000369C 51                      	PUSH	CX
 22016                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22017 0000369D 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22018                                  	;mov	al,[es:bp+1]
 22019 000036A1 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22020 000036A5 53                      	PUSH	BX
 22021 000036A6 06                      	PUSH	ES
 22022 000036A7 E8410F                  	call	SETREAD
 22023 000036AA EB22                    	JMP	short DODSKOP
 22024                                  
 22025                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 22026                                  ;--------------------------------------------------------------------------
 22027                                  ;
 22028                                  ; Procedure Name : DWRITE
 22029                                  ;
 22030                                  ; Inputs:
 22031                                  ;	DS:BX = Transfer address
 22032                                  ;	CX = Number of sectors
 22033                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22034                                  ;	DX = Absolute record number	       (LOW)
 22035                                  ;	ES:BP = Base of drive parameters
 22036                                  ;	[ALLOWED] must be set in case HARDERR called
 22037                                  ; Function:
 22038                                  ;	Calls BIOS to perform disk write. If BIOS reports
 22039                                  ;	errors, will call HARDERRRW for further action.
 22040                                  ; Output:
 22041                                  ;	Carry set if error (currently, user FAILed to I 24)
 22042                                  ; BP preserved. All other registers destroyed.
 22043                                  ;----------------------------------------------------------------------------
 22044                                  
 22045                                  	;entry	DWRITE
 22046                                  DWRITE:
 22047 000036AC E81100                  	CALL	DSKWRITE
 22048 000036AF 74EA                    	jz	short dw_ret_label	; Carry clear (retz)
 22049                                  
 22050                                  ;hkn; SS override
 22051 000036B1 36C606[7505]01          	MOV	BYTE [SS:READOP],1	; Write
 22052 000036B7 E83500                  	call	HARDERRRW
 22053 000036BA 3C01                    	CMP	AL,1			; Check for retry
 22054 000036BC 74EE                    	JZ	short DWRITE
 22055                                  
 22056                                  ; 09/02/2024
 22057                                  %if 0
 22058                                  	CMP	AL,3			; Check for FAIL
 22059                                  	CLC
 22060                                  	JNZ	short NO_CAR2 		; Ignore
 22061                                  	STC
 22062                                  NO_CAR2:
 22063                                  dw_ret_label:
 22064                                  	retn
 22065                                  %else
 22066                                  	; 09/02/2024 - Retro DOS v4.1
 22067 000036BE EB9E                    	jmp	short fail_ignore
 22068                                  %endif
 22069                                  
 22070                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 22071                                  ;---------------------------------------------------------------------------
 22072                                  ;
 22073                                  ; Procedure Name : DSKWRITE
 22074                                  ;
 22075                                  ; Inputs:
 22076                                  ;	DS:BX = Transfer addr
 22077                                  ;	CX = Number of sectors
 22078                                  ;	DX = Absolute record number	       (LOW)
 22079                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22080                                  ;	ES:BP = Base of drive parameters
 22081                                  ; Function:
 22082                                  ;	Call BIOS to perform disk read
 22083                                  ; Outputs:
 22084                                  ;	DI = CX on entry
 22085                                  ;	CX = Number of sectors unsuccessfully transfered
 22086                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22087                                  ;	Zero set if OK (from BIOS) (carry clear)
 22088                                  ;	Zero clear if error (carry clear)
 22089                                  ; SI Destroyed, others preserved
 22090                                  ;
 22091                                  ;----------------------------------------------------------------------------
 22092                                  
 22093                                  	;entry	DSKWRITE
 22094                                  DSKWRITE:
 22095 000036C0 51                      	PUSH	CX
 22096                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22097 000036C1 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22098                                  	;mov	al,[es:bp+1]
 22099 000036C5 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22100 000036C9 53                      	PUSH	BX
 22101 000036CA 06                      	PUSH	ES
 22102 000036CB E8500F                  	call	SETWRITE
 22103                                  DODSKOP:
 22104 000036CE 8CD9                    	MOV	CX,DS		; Save DS
 22105 000036D0 1F                      	POP	DS		; DS:BP points to DPB
 22106 000036D1 1E                      	PUSH	DS
 22107                                  
 22108                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22109 000036D2 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22110 000036D6 E8910E                  	call	DEVIOCALL2
 22111                                  
 22112 000036D9 8ED9                    	MOV	DS,CX		; Restore DS
 22113 000036DB 07                      	POP	ES		; Restore ES
 22114 000036DC 5B                      	POP	BX
 22115                                  
 22116                                  ;hkn; SS override
 22117 000036DD 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22118 000036E2 5F                      	POP	DI
 22119 000036E3 29F9                    	SUB	CX,DI
 22120 000036E5 F7D9                    	NEG	CX		; Number of sectors not transferred
 22121                                  
 22122                                  ;hkn; SS override
 22123 000036E7 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22124                                  	;test	ax,8000h
 22125                                  	; 17/12/2022
 22126                                  	;test	ah,80h
 22127 000036EB F6C480                  	test	ah,(STERR>>8)
 22128                                  	;test	AX,STERR
 22129 000036EE C3                      	retn
 22130                                  
 22131                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22132                                  ;---------------------------------------------------------------------------
 22133                                  ;
 22134                                  ; Procedure Name : HardErrRW
 22135                                  ;
 22136                                  ; Inputs:
 22137                                  ;	AX is error code from read or write
 22138                                  ;	Other registers set as per HARDERR
 22139                                  ; Function:
 22140                                  ;	Checks the error code for special extended
 22141                                  ;	errors and maps them if needed. Then invokes
 22142                                  ;	Harderr
 22143                                  ; Outputs:
 22144                                  ;	Of HARDERR
 22145                                  ; AX may be modified prior to call to HARDERR.
 22146                                  ; No other registers altered.
 22147                                  ;
 22148                                  ;---------------------------------------------------------------------------
 22149                                  
 22150                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22151                                  HARDERRRW:
 22152                                  	;cmp	al,0Fh
 22153 000036EF 3C0F                    	CMP	AL,error_I24_wrong_disk
 22154 000036F1 7512                    	JNZ	short DO_ERR				; Nothing to do
 22155                                  
 22156                                  	; MSDOS 3.3
 22157                                  	;push	ds
 22158                                  	;push	si
 22159                                  	;lds	si,[ss:CALLVIDRW]
 22160                                  	;mov	[ss:EXTERRPT+2], ds
 22161                                  	;mov	[ss:EXTERRPT], si
 22162                                  	;pop	si
 22163                                  	;pop	ds
 22164                                  
 22165                                  	; MSDOS 6.0
 22166 000036F3 50                      	push	ax
 22167 000036F4 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22168 000036F8 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22169 000036FC 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22170 00003700 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22171 00003704 58                      	pop	ax
 22172                                  DO_ERR:
 22173                                  	;;call	HARDERR
 22174                                  	;;retn
 22175                                  	; 16/12/2022
 22176                                  	; 10/06/2019
 22177 00003705 E9E91A                  	jmp	HARDERR	
 22178                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22179                                  	;call	HARDERR
 22180                                  	;retn
 22181                                  
 22182                                  ; 24/07/2018 - Retro DOS v3.0
 22183                                  
 22184                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22185                                  ;----------------------------------------------------------------------------
 22186                                  ;
 22187                                  ; Procedure Name : SETUP
 22188                                  ;
 22189                                  ; Inputs:
 22190                                  ;	ES:DI point to SFT (value also in THISSFT)
 22191                                  ;	DMAAdd contains transfer address
 22192                                  ;	CX = Byte count
 22193                                  ;	DS = DOSDATA
 22194                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22195                                  ;		2nd of caller of caller.
 22196                                  ; Outputs:
 22197                                  ;	    CX = byte count
 22198                                  ;	    [THISDPB] = Base of drive parameters if file
 22199                                  ;		      = Pointer to device header if device or NET
 22200                                  ;	    ES:DI Points to SFT
 22201                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22202                                  ;	    [TRANS] = 0 (No transfers yet)
 22203                                  ;	    BytPos = Byte position in file
 22204                                  ;
 22205                                  ;	The following fields are relevant to local files (not devices) only:
 22206                                  ;
 22207                                  ;	    SecPos = Position of first sector (local files only)
 22208                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22209                                  ;	    [CLUSNUM] = First cluster (local files only)
 22210                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22211                                  ;	    [THISDRV] = Physical unit number (local files only)
 22212                                  ;
 22213                                  ;      RETURNS ONE LEVEL UP WITH:
 22214                                  ;	   CX = 0
 22215                                  ;	   CARRY = Clear
 22216                                  ;	IF AN ERROR IS DETECTED
 22217                                  ; All other registers destroyed
 22218                                  ;----------------------------------------------------------------------------
 22219                                  
 22220                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22221                                  
 22222                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22223                                  
 22224                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22225                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22226                                  
 22227                                  SETUP:
 22228                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22229                                  
 22230                                  	;lds 	si,[es:di+7]
 22231 00003708 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22232                                  
 22233                                  ;hkn; SS override
 22234 0000370C 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22235                                  
 22236                                  ;hkn; SS is DOSDATA
 22237 00003711 16                      	push	ss
 22238 00003712 1F                      	pop	ds
 22239                                  
 22240 00003713 8936[8A05]              	MOV	[THISDPB],SI
 22241                                  
 22242 00003717 8B1E[2C03]              	MOV	BX,[DMAADD]
 22243 0000371B 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22244 0000371F C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22245                                  	;mov	ax,[es:di+15h]
 22246 00003724 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22247                                  	;mov	dx,[es:di+17h]
 22248 00003728 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22249 0000372C 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22250 00003730 A3[CE05]                	MOV	[BYTPOS],AX
 22251                                  	;test	word [es:di+5],8080h
 22252 00003733 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22253 00003739 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22254 0000373B 06                      	PUSH	ES
 22255 0000373C C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22256                                  
 22257                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22258                                  	;;mov	bl,[es:bp+0]
 22259                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22260                                  	; 05/12/2022
 22261 00003740 268A5E00                	mov	bl,[es:bp]
 22262                                  	
 22263 00003744 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22264                                  	;mov	bx,[es:bp+2]
 22265 00003748 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22266                                  
 22267                                  	;; MSDOS 3.3
 22268                                  	;cmp	dx,bx
 22269                                  	;jnb	short EOFERR
 22270                                  	;div	bx
 22271                                  	;mov	[SECPOS],ax
 22272                                  	;mov	[BYTSECPOS],dx
 22273                                  	;mov	dx,ax
 22274                                  	;;and	al,[es:bp+4]
 22275                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22276                                  	;mov	[SECCLUSPOS],al
 22277                                  	;mov	ax,cx
 22278                                  	;;mov	cl,[es:bp+5]
 22279                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22280                                  	;shr	dx,cl
 22281                                  	;mov	[CLUSNUM],dx
 22282                                  	;pop	es
 22283                                  	;mov	cx,ax
 22284                                  
 22285                                  	; 04/05/2019 - Retro DOS v4.0
 22286                                  
 22287                                  	; MSDOS 6.0
 22288                                  ;M039: Optimized this section.
 22289 0000374C 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22290 0000374D E81A05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22291 00003750 8916[CC05]              	MOV	[BYTSECPOS],DX
 22292 00003754 A3[C405]                	MOV	[SECPOS],AX
 22293 00003757 890E[C605]              	MOV	[SECPOS+2],CX
 22294 0000375B 89CA                    	MOV	DX,CX
 22295                                  
 22296 0000375D 89C3                    	MOV	BX,AX
 22297                                  	;and	bl,[es:bp+4]
 22298 0000375F 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22299 00003763 881E[7305]              	MOV	[SECCLUSPOS],BL
 22300                                  
 22301 00003767 E82705                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22302 0000376A 59                      	POP	CX			;CX = byte count.
 22303 0000376B 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22304                                  	;cmp	ax,[es:bp+0Dh]
 22305 0000376D 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22306 00003771 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22307                                  
 22308 00003773 A3[BC05]                	MOV	[CLUSNUM],AX
 22309 00003776 07                      	POP	ES			; ES:DI point to SFT
 22310                                  ;M039
 22311                                  
 22312                                  NOSETSTUFF:
 22313 00003777 89C8                    	MOV	AX,CX		; AX = Byte count.
 22314 00003779 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22315 0000377D 730C                    	JNC	short setup_OK	; Must be less than 64
 22316 0000377F A1[2C03]                	MOV	AX,[DMAADD]
 22317 00003782 F7D8                    	NEG	AX		; Amount of room left in segment (know
 22318                                  				;    less than 64K since max value of CX
 22319                                  				;    is FFFF).
 22320 00003784 7501                    	JNZ	short NoDec
 22321 00003786 48                      	DEC	AX
 22322                                  NoDec:
 22323 00003787 89C1                    	MOV	CX,AX		; Can do this much
 22324 00003789 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22325                                  setup_OK:
 22326 0000378B C3                      	retn
 22327                                  
 22328                                  EOFERR:
 22329 0000378C 07                      	POP	ES		; ES:DI point to SFT
 22330 0000378D 31C9                    	XOR	CX,CX		; No bytes read
 22331                                  ;;;;;;;;;;; 7/18/86
 22332                                  	; MSDOS 3.3
 22333                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22334                                  ;;;;;;;;;;;
 22335                                  NOROOM:
 22336 0000378F 5B                      	POP	BX		; Kill return address
 22337 00003790 F8                      	CLC
 22338 00003791 C3                      	retn			; RETURN TO CALLER OF CALLER
 22339                                  
 22340                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22341                                  ;---------------------------------------------------------------------------
 22342                                  ;
 22343                                  ; Procedure Name : BREAKDOWN
 22344                                  ;
 22345                                  ; Inputs:
 22346                                  ;	CX = Length of disk transfer in bytes
 22347                                  ;	ES:BP = Base of drive parameters
 22348                                  ;	[BYTSECPOS] = Byte position within first sector
 22349                                  ;	DS = DOSDATA
 22350                                  ; Outputs:
 22351                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22352                                  ;	[SECCNT] = No. of whole sectors to transfer
 22353                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22354                                  ; AX, BX, DX destroyed. No other registers affected.
 22355                                  ;---------------------------------------------------------------------------
 22356                                  
 22357                                  BREAKDOWN:
 22358 00003792 A1[CC05]                	MOV	AX,[BYTSECPOS]
 22359 00003795 89CB                    	MOV	BX,CX
 22360 00003797 09C0                    	OR	AX,AX
 22361 00003799 740E                    	JZ	short SAVFIR	; Partial first sector?
 22362                                  	;sub	ax,[es:bp+2]
 22363 0000379B 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22364 0000379F F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22365 000037A1 29C3                    	SUB	BX,AX		; Subtract from total length
 22366 000037A3 7304                    	JAE	short SAVFIR
 22367 000037A5 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22368 000037A7 31DB                    	XOR	BX,BX		; And no bytes are left
 22369                                  SAVFIR:
 22370 000037A9 A3[D205]                	MOV	[BYTCNT1],AX
 22371 000037AC 89D8                    	MOV	AX,BX
 22372 000037AE 31D2                    	XOR	DX,DX
 22373                                  	;div	word [ES:BP+2]
 22374 000037B0 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22375 000037B4 A3[D605]                	MOV	[SECCNT],AX
 22376 000037B7 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22377                                  	; MSDOS 3.3
 22378                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22379                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22380                                  	;CMP	AX,1
 22381                                  	;retnz
 22382                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22383                                  	;MOV	[BYTCNT2],AX
 22384                                  	;MOV	[SECCNT],DX	; DX = 0
 22385                                  _RET45:
 22386 000037BB C3                      	retn
 22387                                  
 22388                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22389                                  
 22390                                  ;----------------------------------------------------------------------------
 22391                                  ;
 22392                                  ; Procedure Name : READ_LOCK_VIOLATION
 22393                                  ;
 22394                                  ; ES:DI points to SFT. This entry used by NET_READ
 22395                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22396                                  ; Else do retrys.
 22397                                  ; ES:DI,DS,CX preserved
 22398                                  ;
 22399                                  ;----------------------------------------------------------------------------
 22400                                  
 22401                                  READ_LOCK_VIOLATION:
 22402 000037BC C606[7505]00            	MOV	byte [READOP],0
 22403                                  ERR_ON_CHECK:
 22404                                  	;;test	word [es:di+2],8000h
 22405                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22406                                  	;JNZ	short HARD_ERR
 22407                                  
 22408                                  	; 04/05/2019
 22409                                  	;test	byte [es:di+3],80h
 22410 000037C1 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22411 000037C6 7508                    	JNZ	short HARD_ERR
 22412                                  
 22413                                  	;PUSH	CX
 22414                                  	;;mov	cl,[es:di+2]
 22415                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22416                                  	;;and	cl,0F0h
 22417                                  	;AND	CL,SHARING_MASK
 22418                                  	;;cmp	cl,0
 22419                                  	;CMP	CL,SHARING_COMPAT
 22420                                  	;POP	CX
 22421                                  	;JNE	short NO_HARD_ERR
 22422                                  	; 21/09/2023
 22423 000037C8 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22424 000037CC 24F0                    	and	al,SHARING_MASK
 22425                                  	;cmp	al,SHARING_COMPAT
 22426                                  	;jne	short NO_HARD_ERR
 22427 000037CE 7505                    	jnz	short NO_HARD_ERR
 22428                                  HARD_ERR:
 22429 000037D0 E82A3A                  	call	LOCK_VIOLATION
 22430 000037D3 73E6                    	jnc	short _RET45		; User wants Retrys
 22431                                  NO_HARD_ERR:
 22432 000037D5 31C9                    	XOR	CX,CX			;No bytes transferred
 22433                                  	;mov	ax,21h
 22434 000037D7 B82100                  	MOV	AX,error_lock_violation
 22435 000037DA F9                      	STC
 22436                                  RET3:		; 06/02/2024
 22437 000037DB C3                      	retn
 22438                                  
 22439                                  ;----------------------------------------------------------------------------
 22440                                  ;
 22441                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22442                                  ;
 22443                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22444                                  ; This entry used by NET_WRITE
 22445                                  ;
 22446                                  ;----------------------------------------------------------------------------
 22447                                  
 22448                                  WRITE_LOCK_VIOLATION:
 22449 000037DC C606[7505]01            	MOV	byte [READOP],1
 22450 000037E1 EBDE                    	JMP	short ERR_ON_CHECK
 22451                                  
 22452                                  ; 04/05/2019 - Retro DOS v4.0
 22453                                  
 22454                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22455                                  
 22456                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22457                                  ;----------------------------------------------------------------------------
 22458                                  ;
 22459                                  ; Procedure Name : DISKREAD
 22460                                  ;
 22461                                  ; Inputs:
 22462                                  ;	Outputs of SETUP
 22463                                  ; Function:
 22464                                  ;	Perform disk read
 22465                                  ; Outputs:
 22466                                  ;    Carry clear
 22467                                  ;	CX = No. of bytes read
 22468                                  ;	ES:DI point to SFT
 22469                                  ;	SFT offset and cluster pointers updated
 22470                                  ;    Carry set
 22471                                  ;	CX = 0
 22472                                  ;	ES:DI point to SFT
 22473                                  ;	AX has error code
 22474                                  ;----------------------------------------------------------------------------
 22475                                  
 22476                                  ;hkn; called from disk.asm. DS already set up.
 22477                                  
 22478                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22479                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22480                                  
 22481                                  DISKREAD:
 22482                                  	;mov	ax,[es:di+11h]
 22483 000037E3 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22484                                  	;mov	bx,[es:di+13h]
 22485 000037E7 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22486 000037EB 2B06[CE05]              	SUB	AX,[BYTPOS]
 22487 000037EF 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22488 000037F3 721F                    	JB	short RDERR		;Read starts past EOF
 22489 000037F5 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22490 000037F7 09C0                    	OR	AX,AX
 22491 000037F9 7419                    	JZ	short RDERR		;Read starts at EOF
 22492 000037FB 39C8                    	CMP	AX,CX
 22493 000037FD 7302                    	JAE	short ENUF		;I/O fits
 22494 000037FF 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22495                                  ENUF:
 22496                                  	; MSDOS 3.3
 22497                                  	;test	byte [es:di+4],8
 22498                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22499                                  	;jnz	short SET_ACC_ERR
 22500                                  	;call	LOCK_CHECK
 22501                                  	;jnb	short _READ_OK
 22502                                  	;call	READ_LOCK_VIOLATION
 22503                                  	;jnb	short ENUF
 22504                                  	;retn
 22505                                  
 22506                                  	; MSDOS 6.0
 22507 00003801 E881FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22508                                  	;JNC	short _READ_OK 		; There are no locks
 22509                                  	;retn
 22510                                  	; 06/02/2024
 22511 00003804 72D5                    	jc	short RET3
 22512                                  
 22513                                  _READ_OK:
 22514 00003806 C42E[8A05]              	LES	BP,[THISDPB]
 22515 0000380A E885FF                  	CALL	BREAKDOWN
 22516                                  
 22517                                  ; 10/02/2024
 22518                                  %if 0
 22519                                  	MOV	CX,[CLUSNUM] ; *
 22520                                  	call	FNDCLUS
 22521                                       	; MSDOS 6.0			;M022 conditional removed here
 22522                                  	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22523                                  					; migrated from 330a - HKN
 22524                                  %else
 22525                                  	; 10/02/2024 - Retro DOS v4.2
 22526 0000380D E83A13                  	call	FNDCLUS_X ; *
 22527 00003810 720E                    	jc	short SET_ACC_ERR ; ds=ss
 22528                                  %endif
 22529                                  	;OR	CX,CX
 22530                                  	;JZ	short SKIPERR
 22531                                  	; 06/02/2024
 22532 00003812 E313                    	jcxz	SKIPERR
 22533                                  
 22534                                  RDERR:
 22535 00003814 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22536 00003816 E91802                  	jmp	WRTERR22
 22537                                  
 22538                                  ;RDLASTJ: 
 22539                                  	;JMP	RDLAST                  ;M039
 22540                                  
 22541                                  SETSFTJ2: 
 22542 00003819 E99600                  	JMP	SETSFT
 22543                                  
 22544                                  CANOT_READ:
 22545                                  	; MSDOS 3.3
 22546                                  	;POP	CX		;M039.
 22547                                  	; MSDOS 3.3 & MSDOS 6.0
 22548 0000381C 59                      	POP	CX              ;Clean stack.
 22549 0000381D 5B                      	POP	BX
 22550                                  
 22551                                  	;entry	SET_ACC_ERR_DS
 22552                                  SET_ACC_ERR_DS:
 22553                                  
 22554                                  ;hkn; SS is DOSDATA
 22555                                  	;Context DS
 22556 0000381E 16                      	push	ss
 22557 0000381F 1F                      	pop	ds
 22558                                  
 22559                                  	;entry	SET_ACC_ERR
 22560                                  SET_ACC_ERR:
 22561 00003820 31C9                    	XOR	CX,CX
 22562                                  	;mov	ax,5
 22563 00003822 B80500                  	MOV	AX,error_access_denied
 22564 00003825 F9                      	STC
 22565 00003826 C3                      	retn
 22566                                  
 22567                                  SKIPERR:
 22568 00003827 8916[BA05]              	MOV	[LASTPOS],DX
 22569 0000382B 891E[BC05]              	MOV	[CLUSNUM],BX
 22570 0000382F 833E[D205]00            	CMP	word [BYTCNT1],0
 22571 00003834 7405                    	JZ	short RDMID
 22572                                  
 22573 00003836 E88B13                  	call	BUFRD
 22574                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22575                                  	; 10/02/2024
 22576                                  	; ds=ss
 22577 00003839 72E5                    	jc	short SET_ACC_ERR
 22578                                  
 22579                                  RDMID:
 22580 0000383B 833E[D605]00            	CMP	word [SECCNT],0
 22581                                  	;JZ	RDLAST ; 10/08/2018
 22582 00003840 7453                    	jz	short RDLAST
 22583                                  
 22584 00003842 E81314                  	call	NEXTSEC
 22585 00003845 72D2                    	JC	short SETSFTJ2
 22586                                  
 22587 00003847 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22588                                  ONSEC:
 22589 0000384C 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22590 00003850 8B0E[D605]              	MOV	CX,[SECCNT]
 22591 00003854 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22592                                  RDLP:
 22593 00003858 E82E14                  	call	OPTIMIZE
 22594                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22595                                  	; 10/02/2024
 22596                                  	; ds=ss
 22597 0000385B 72C3                    	jc	short SET_ACC_ERR
 22598                                  
 22599 0000385D 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22600 0000385E 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22601 0000385F 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22602                                  	;mov	byte [ALLOWED],38h
 22603 00003860 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22604 00003865 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22605                                  
 22606 00003869 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22607 0000386A 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22608                                  
 22609                                  	; 04/05/2019 - Retro DOS v4.0
 22610                                  
 22611                                  	; MSDOS 6.0
 22612 0000386B E8BC21                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22613                                  
 22614                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22615 0000386E E8DBFD                  	call	DREAD
 22616                                  
 22617                                  	; 10/02/2024
 22618                                  	; ds<>ss
 22619                                  
 22620                                  	; MSDOS 3.3 
 22621                                  	;pop	bx
 22622                                  	;pop	dx
 22623                                  	;jc	short CANOT_READ
 22624                                  	;add	bx,dx	; (bx = Extent end)
 22625                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22626                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22627                                  	;call	SETVISIT
 22628                                  	; ->***
 22629                                  ;M039
 22630                                  	; MSDOS 6.0 
 22631 00003871 59                      	pop	cx
 22632 00003872 5A                      	pop	dx
 22633 00003873 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22634 00003878 72A2                    	jc	short CANOT_READ
 22635                                  
 22636 0000387A 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22637                                  
 22638                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22639                                  ;            sectors, also termed an "Extent".)
 22640                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22641                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22642                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22643                                  ;
 22644                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22645                                  ;	buffers must be "read" into the transfer memory block, so that the
 22646                                  ;       transfer memory reflects the most recent data.
 22647                                  
 22648 0000387F E85E00                  	call	DskRdBufScan
 22649                                  
 22650                                  	;Context DS
 22651 00003882 16                      	push	ss
 22652 00003883 1F                      	pop	ds
 22653                                          
 22654 00003884 59                      	pop	cx
 22655 00003885 5B                              pop	bx
 22656                                  
 22657                                  ;       CX = # of sector remaining.
 22658                                  ;       BX = Next physical cluster.
 22659                                  
 22660                                  ;M039
 22661                                  
 22662                                  ;;;;;;;;
 22663                                  ;	; 25/07/2018 - Retro DOS v3.0
 22664                                  ;	; ***->
 22665                                  ;	; MSDOS 3.3
 22666                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22667                                  ;bufq:
 22668                                  ;;	DX = Extent start.
 22669                                  ;;	BX = Extent end.
 22670                                  ;;	 AL = Drive #.
 22671                                  ;;     DS:DI-> 1st buffer in queue.
 22672                                  ;
 22673                                  ;	;or	byte [di+5],20h
 22674                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22675                                  ;	;cmp	al,[di+4]	
 22676                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22677                                  ;	jnz	short bufq3
 22678                                  ;	;cmp	[di+6],dx
 22679                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22680                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22681                                  ;	;cmp	[di+6],bx
 22682                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22683                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22684                                  ;	
 22685                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22686                                  ;
 22687                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22688                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22689                                  ;;      as MRU (Most Recently Used).
 22690                                  ;
 22691                                  ;	;test	byte [di+5],40h
 22692                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22693                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22694                                  ;	pop	ax ; transfer address
 22695                                  ;	push	ax
 22696                                  ;	push	di
 22697                                  ;	push	dx
 22698                                  ;	;sub	dx,[di+6]
 22699                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22700                                  ;	neg	dx
 22701                                  ;
 22702                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22703                                  ;;           block.
 22704                                  ;
 22705                                  ;	mov	si,di
 22706                                  ;	mov	di,ax
 22707                                  ;	mov	ax,dx
 22708                                  ;	;mov	cx,[es:bp+6]	
 22709                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22710                                  ;	mul	cx
 22711                                  ;	add	di,ax
 22712                                  ;
 22713                                  ;	lea	si,[si+16]
 22714                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22715                                  ;	shr	cx,1
 22716                                  ;	push	es
 22717                                  ;	mov	es,[SS:DMAADD+2]
 22718                                  ;
 22719                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22720                                  ;;      DS:SI-> Buffer sector data.
 22721                                  ;;      ES:DI-> Destination within Transfer memory block.
 22722                                  ;
 22723                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22724                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22725                                  ;	;rep	movsb                   ;Copy last byte.
 22726                                  ;	jnc	short bufq1
 22727                                  ;	movsb
 22728                                  ;bufq1:
 22729                                  ;	pop	es
 22730                                  ;	pop	dx
 22731                                  ;	pop	di
 22732                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22733                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22734                                  ;bufq2:
 22735                                  ;	call	SCANPLACE
 22736                                  ;bufq3:
 22737                                  ;	call	SKIPVISIT
 22738                                  ;	jnz	short bufq
 22739                                  ;	
 22740                                  ;	push	ss
 22741                                  ;	pop	ds
 22742                                  ;	pop	cx
 22743                                  ;	pop	cx
 22744                                  ;	pop	bx	
 22745                                  ;bufq4:
 22746                                  ;;;;;;;
 22747 00003886 E30D                    	JCXZ	RDLAST
 22748                                  
 22749 00003888 E8871B                  	call	IsEOF			; test for eof on fat size
 22750 0000388B 7325                    	JAE	short SETSFT
 22751                                  
 22752 0000388D B200                    	MOV	DL,0
 22753 0000388F FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22754 00003893 EBC3                    	JMP	short RDLP ; 19/05/2019
 22755                                  
 22756                                  RDLAST:
 22757 00003895 A1[D405]                	MOV	AX,[BYTCNT2]
 22758 00003898 09C0                    	OR	AX,AX
 22759 0000389A 7416                    	JZ	short SETSFT
 22760 0000389C A3[D205]                	MOV	[BYTCNT1],AX
 22761                                  
 22762 0000389F E8B613                  	call	NEXTSEC
 22763 000038A2 720E                    	JC	short SETSFT
 22764                                  
 22765 000038A4 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22766 000038AA E81713                  	call	BUFRD
 22767                                  	; 10/08/2018
 22768 000038AD 7303                    	JNC	short SETSFT
 22769                                  	;JMP	SET_ACC_ERR_DS
 22770                                  	; 10/02/2024
 22771                                  	; ds=ss
 22772 000038AF E96EFF                  	jmp	SET_ACC_ERR
 22773                                  
 22774                                  ;------------------------------------------------------------------------------
 22775                                  ;
 22776                                  ; Procedure Name : SETSFT
 22777                                  ; Inputs:
 22778                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22779                                  ;		and set cluster fields
 22780                                  ; Function:
 22781                                  ;	Update [THISSFT] based on the transfer
 22782                                  ; Outputs:
 22783                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22784                                  ;	ES:DI points to [THISSFT]
 22785                                  ;	CX No. of bytes transferred
 22786                                  ;	Carry clear
 22787                                  ;
 22788                                  ;----------------------------------------------------------------------------
 22789                                  
 22790                                  	;entry	SETSFT
 22791                                  
 22792                                  ; 26/07/2018 - Retro DOS v3.0
 22793                                  SETSFT:
 22794 000038B2 C43E[9E05]              	LES	DI,[THISSFT]
 22795                                  
 22796                                  ; Same as SETSFT except ES:DI already points to SFT
 22797                                  	;entry	SETCLUS
 22798                                  SETCLUS:	
 22799 000038B6 8B0E[B805]              	MOV	CX,[NEXTADD]
 22800 000038BA 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22801                                  	;;test	word [es:di+5],80h
 22802                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22803                                  	;JNZ	short ADDREC		; don't set clusters if device
 22804                                  
 22805                                  	; 04/05/2019 - Retro DOS v4.0
 22806                                  	;test	byte [es:di+5],80h
 22807 000038BE 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22808 000038C3 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22809                                  
 22810 000038C5 A1[BC05]                	MOV	AX,[CLUSNUM]
 22811                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22812                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22813 000038C8 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22814 000038CC A1[BA05]                	MOV	AX,[LASTPOS]
 22815                                  	;mov	[es:di+19h],ax
 22816 000038CF 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22817                                  
 22818                                  ;----------------------------------------------------------------------------
 22819                                  ;
 22820                                  ; Procedure : AddRec
 22821                                  ; Inputs:
 22822                                  ;	ES:DI points to SFT
 22823                                  ;	CX is No. Bytes transferred
 22824                                  ; Function:
 22825                                  ;	Update the SFT offset based on the transfer
 22826                                  ; Outputs:
 22827                                  ;	sf_position updated to point to first byte after transfer
 22828                                  ;	ES:DI points to SFT
 22829                                  ;	CX No. of bytes transferred
 22830                                  ;	Carry clear
 22831                                  ;----------------------------------------------------------------------------
 22832                                  
 22833                                  	;entry	AddRec
 22834                                  ADDREC:
 22835 000038D3 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22836                                  	;add	[es:di+15h],cx
 22837 000038D5 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22838                                  	;adc	word [es:di+17h], 0
 22839 000038D9 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22840                                  RET28:	
 22841 000038DE F8                      	CLC
 22842 000038DF C3                      	retn
 22843                                  
 22844                                  ; 25/07/2018
 22845                                  ; MSDOS 6.0
 22846                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22847                                  ;----------------------------------------------------------------------------
 22848                                  ;
 22849                                  ; Procedure Name : DskRdBufScan
 22850                                  ;
 22851                                  ; Inputs:
 22852                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22853                                  ;            sectors, also termed an "Extent".)
 22854                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22855                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22856                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22857                                  ;
 22858                                  ; Function:
 22859                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22860                                  ;	"read" into the transfer memory block, so that the transfer memory
 22861                                  ;	reflects the most recent data.
 22862                                  ;
 22863                                  ; Outputs:
 22864                                  ;       Transfer memory updated as required.
 22865                                  ;
 22866                                  ; Uses:
 22867                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22868                                  ;       SS override for all global variables.
 22869                                  ;
 22870                                  ; Notes:
 22871                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22872                                  ;	than the FIRST.
 22873                                  ;----------------------------------------------------------------------------
 22874                                  ;M039: Created
 22875                                  
 22876                                  ; 04/05/2019 - Retro DOS v4.0
 22877                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22878                                  
 22879                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22880                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22881                                  
 22882                                  ;procedure DskRdBufScan,NEAR
 22883                                  ;
 22884                                  ;ASSUME  DS:NOTHING
 22885                                  
 22886                                  DskRdBufScan:
 22887 000038E0 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22888 000038E6 743C                    	je	short bufx		     ; -no, skip all work.
 22889                                  
 22890 000038E8 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22891 000038ED 89DE                    	mov     si,bx
 22892 000038EF 01D1                    	add     cx,dx
 22893 000038F1 83D600                  	adc     si,0
 22894                                  
 22895 000038F4 E8CB1E                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22896                                  	;mov	ax,[di+2]
 22897 000038F7 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22898 000038FA 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22899                                  		
 22900                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22901                                  	;;mov	al,[es:bp+0]
 22902                                  	;mov	al,[es:bp+DPB.DRIVE]
 22903                                  	; 15/12/2022
 22904 000038FE 268A4600                	mov	al,[es:bp]
 22905                                  
 22906                                  ;       BX:DX = Extent start.
 22907                                  ;       SI:CX = Extent end + 1.
 22908                                  ;          AL = Drive #.
 22909                                  ;       DS:DI-> 1st buffer in queue.
 22910                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22911                                  
 22912                                  bufq:	
 22913                                  	;cmp	al,[di+4]
 22914 00003902 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22915 00003905 7514                    	jne	short bufq1        	;  -no, jump.
 22916                                  
 22917                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22918                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22919                                  
 22920                                  	;cmp	bx,[di+8]
 22921 00003907 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22922 0000390A 7503                    	jne	short bufq01
 22923                                  	;cmp	dx,[di+6]
 22924 0000390C 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22925                                  bufq01:
 22926 0000390F 770A                    	ja	short bufq1
 22927                                  
 22928                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22929                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22930                                  
 22931                                  	;cmp	si,[di+8]
 22932 00003911 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22933 00003914 7503                    	jne	short bufq02
 22934                                  	;cmp	cx,[di+6]
 22935 00003916 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22936                                  bufq02:
 22937 00003919 770A                    	ja	short bufq2
 22938                                  bufq1:	
 22939 0000391B 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22940 00003920 8B3D                    	mov	di,[di]
 22941                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22942 00003922 75DE                    	jne	short bufq		; -no, do next buffer
 22943                                  bufx:
 22944 00003924 C3                      	retn				;Exit.
 22945                                  
 22946                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22947                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22948                                  ;       as MRU (Most Recently Used).
 22949                                  
 22950                                  bufq2:	
 22951 00003925 50                      	push	ax
 22952                                  	;test	byte [di+5],40h
 22953 00003926 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22954 0000392A 7428                    	jz	short bufq3                    ; -no, jump.
 22955                                  
 22956                                  ;       SaveReg <cx,dx,si,di,es>
 22957 0000392C 51                      	push	cx
 22958 0000392D 52                      	push	dx
 22959 0000392E 56                      	push	si
 22960 0000392F 57                      	push	di
 22961 00003930 06                      	push	es
 22962                                  
 22963 00003931 89D0                    	mov     ax,dx
 22964                                  	;sub	ax,[di+6]
 22965 00003933 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22966 00003936 F7D8                    	neg	ax
 22967                                  
 22968                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22969                                  ;            block. (Note: the upper word of the sector # may be ignored
 22970                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22971                                  ;            is imposed by the input parameters of the disk read operation.)
 22972                                  
 22973                                  	;lea	si,[di+20]
 22974 00003938 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22975                                  	;mov	cx,[es:bp+2]
 22976 0000393B 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22977 0000393F F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22978                                  	;mov	di,[ss:TEMP_VAR]
 22979                                  	; 09/02/2024
 22980 00003941 36C43E[0C06]            	les	di,[ss:TEMP_VAR]
 22981 00003946 01C7                    	add	di,ax
 22982                                  	;mov	es,[ss:TEMP_VAR2]
 22983 00003948 D1E9                    	shr	cx,1
 22984                                  
 22985                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22986                                  ;       DS:SI-> Buffer sector data.
 22987                                  ;       ES:DI-> Destination within Transfer memory block.
 22988                                  
 22989 0000394A F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22990                                  	;; 04/05/2019
 22991                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22992                                  	;;rep	movsb                   ;Copy last byte.
 22993                                  	;jnc	short bufq03	
 22994                                  	;movsb
 22995                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22996                                  	;adc	cx,0
 22997                                  	;rep	movsb
 22998                                  	; 22/09/2023
 22999 0000394C 7301                    	jnc	short bufq03
 23000 0000394E A4                      	movsb
 23001                                  bufq03:
 23002                                  	;RestoreReg <es,di,si,dx,cx>
 23003 0000394F 07                      	pop	es
 23004 00003950 5F                      	pop	di
 23005 00003951 5E                      	pop	si
 23006 00003952 5A                      	pop	dx
 23007 00003953 59                      	pop	cx
 23008                                  
 23009                                  ;       DS:DI -> current buffer.
 23010                                  bufq3:	
 23011 00003954 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 23012                                          ;invoke SCANPLACE
 23013 00003956 E87B1E                  	call	SCANPLACE
 23014 00003959 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 23015 0000395E 58                      	pop	ax
 23016                                  	;jne	short bufq		; -no, jump.
 23017                                  	;;jmp	short bufx		; -yes, exit.
 23018                                  	;; 12/06/2019
 23019                                  	;retn
 23020                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 23021 0000395F 75A1                    	jne	short bufq
 23022                                  	;jmp	short bufx
 23023                                  	; 09/02/2024
 23024 00003961 C3                      	retn	; Exit
 23025                                  
 23026                                  ;EndProc DskRdBufScan
 23027                                  
 23028                                  ;============================================================================
 23029                                  ; DISK3.ASM, MSDOS 6.0, 1991
 23030                                  ;============================================================================
 23031                                  ; 04/05/2019 - Retro DOS v4.0
 23032                                  ; 24/07/2018 - Retro DOS v3.0
 23033                                  
 23034                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 23035                                  ;----------------------------------------------------------------------------
 23036                                  ;
 23037                                  ; Procedure Name : DISKWRITE
 23038                                  ;
 23039                                  ; Inputs:
 23040                                  ;       Outputs of SETUP
 23041                                  ; Function:
 23042                                  ;       Perform disk write
 23043                                  ; Outputs:
 23044                                  ;    Carry clear
 23045                                  ;       CX = No. of bytes written
 23046                                  ;       ES:DI point to SFT
 23047                                  ;       SFT offset and cluster pointers updated
 23048                                  ;    Carry set
 23049                                  ;       CX = 0
 23050                                  ;       ES:DI point to SFT
 23051                                  ;       AX has error code
 23052                                  ;----------------------------------------------------------------------------
 23053                                  
 23054                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 23055                                  
 23056                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 23057                                  
 23058                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23059                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 23060                                  
 23061                                  DISKWRITE:
 23062                                  	; MSDOS 3.3
 23063                                  	; IBMDOS.COM - Offset 436Dh
 23064                                  	;;test	byte [es:di+4],8
 23065                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 23066                                  	;jz	short write_cont
 23067                                  	;jmp	SET_ACC_ERR_DS
 23068                                  ;write_cont:
 23069                                  	;push	cx
 23070                                  	;or	cx,cx
 23071                                  	;jnz	short Not_Truncate
 23072                                  	;;mov	cx,-1
 23073                                  	;dec	cx
 23074                                  ;Not_Truncate:
 23075                                  	;call	LOCK_CHECK
 23076                                  	;pop	cx
 23077                                  	;jnb	short _WRITE_OK
 23078                                  	;call	WRITE_LOCK_VIOLATION
 23079                                  	;jnb	short DISKWRITE
 23080                                  	;retn
 23081                                  
 23082                                  	; MSDOS 6.0
 23083 00003962 E802FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 23084                                  	; 19/08/2018
 23085 00003965 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 23086 00003967 C3                      	retn
 23087                                  
 23088                                  WRTEOFJ:
 23089 00003968 E9D101                  	JMP     WRTEOF
 23090                                  
 23091                                  _WRITE_OK:
 23092                                   	; 27/07/2018
 23093                                  	; IBMDOS.COM - Offset 438Eh
 23094                                  	
 23095                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23096                                  	;and	word [es:di+5],0BFBFh
 23097 0000396B 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 23098                                  				; Mark file as dirty, clear no date on close
 23099                                  ; 10/02/2024
 23100                                  %if 0
 23101                                  	; 04/05/2019 - Retro DOS v4.0
 23102                                  
 23103                                  	; MSDOS 6.0
 23104                                  	;mov 	ax,[es:di+11h]
 23105                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 23106                                          MOV	[TEMP_VAR],AX                           ;M039
 23107                                  	;mov	ax,[es:di+13h]
 23108                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 23109                                          MOV	[TEMP_VAR2],AX                          ;M039
 23110                                  %else
 23111                                  	; 10/02/2024 (PCDOS 7.1 IBMDOS COM)
 23112                                  	;les	ax,[es:di+11h]
 23113 00003971 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 23114 00003975 8C06[0E06]              	mov	[TEMP_VAR2],es
 23115 00003979 A3[0C06]                	mov	[TEMP_VAR],ax
 23116                                  %endif
 23117                                  
 23118                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 23119                                  
 23120                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23121 0000397C C42E[8A05]              	LES     BP,[THISDPB]
 23122                                  
 23123 00003980 E80FFE                  	call	BREAKDOWN
 23124                                  
 23125 00003983 A1[CE05]                	MOV     AX,[BYTPOS]
 23126 00003986 8B16[D005]              	MOV     DX,[BYTPOS+2]
 23127 0000398A E3DC                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 23128 0000398C 01C8                    	ADD     AX,CX
 23129 0000398E 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 23130                                  
 23131                                  	;mov	bx,[es:bp+2]
 23132 00003991 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23133                                  
 23134                                  	; MSDOS 3.3
 23135                                  	;cmp	dx,bx
 23136                                  	;jnb	short WRTERR33
 23137                                  	;div	bx
 23138                                  	;mov	bx,ax
 23139                                  	;OR	DX,DX
 23140                                  	;JNZ	short CALCLUS
 23141                                  	;dec	ax
 23142                                  ;CALCLUS:
 23143                                  	; MSDOS 3.3
 23144                                  	;mov	cl,[es:bp+5]
 23145                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23146                                  	;shr	ax,cl
 23147                                  	;push	ax
 23148                                  	;push	dx
 23149                                  	;push	es
 23150                                  	;les	di,[THISSFT]
 23151                                  	;;mov	ax,[es:di+11h]
 23152                                  	;;mov	dx,[es:di+13h]
 23153                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23154                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23155                                  	;pop	es
 23156                                  	;;DX:AX = current file size (in bytes).
 23157                                  	;;div	word [es:bp+2]
 23158                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23159                                  	;mov	cx,ax
 23160                                  	;or	dx,dx
 23161                                  	;jz	short NORND
 23162                                  	;inc	ax
 23163                                  ;NORND:
 23164                                  	; MSDOS 6.0
 23165 00003995 E8D202                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23166 00003998 89C6                    	MOV	SI,AX
 23167 0000399A 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23168                                  
 23169                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23170                                  
 23171 0000399E 09D2                    	OR	DX,DX
 23172 000039A0 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23173 000039A1 89CA                    	MOV	DX,CX			;M039
 23174 000039A3 7506                    	JNZ	short CALCLUS
 23175 000039A5 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23176 000039A8 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23177                                  
 23178                                  CALCLUS:
 23179                                  	; MSDOS 6.0
 23180 000039AB E8E302                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23181 000039AE 5A                      	POP	DX
 23182                                  
 23183                                  ;       AX = Last cluster to write.
 23184                                  ;       DX = # of bytes in last sector to write (the "tail").
 23185                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23186                                  
 23187 000039AF 50                      	PUSH	AX
 23188 000039B0 52                      	PUSH	DX
 23189                                  ;M039
 23190 000039B1 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23191 000039B5 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23192 000039B8 E8AF02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23193 000039BB 890E[0E06]              	mov	[TEMP_VAR2],cx
 23194 000039BF 890E[CA05]              	mov	[VALSEC+2],cx
 23195 000039C3 89C1                    	mov	cx,ax
 23196 000039C5 89F3                    	mov	bx,si
 23197                                  
 23198                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23199                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23200                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23201                                  ;                     DX = # of bytes in last sector of current file.
 23202                                  ;M039
 23203 000039C7 09D2                    	OR	DX,DX
 23204 000039C9 7407                    	JZ	short NORND
 23205                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23206                                  	;ADC	word [VALSEC+2],0
 23207                                  	; 22/09/2023
 23208 000039CB 40                      	inc	ax  ; 0FFFFh -> 0
 23209 000039CC 7504                    	jnz	short NORND
 23210 000039CE FF06[CA05]              	inc	word [VALSEC+2]
 23211                                  NORND:	
 23212                                  	; MSDOS 3.3 & MSDOS 6.0
 23213 000039D2 A3[C805]                	MOV     [VALSEC],AX
 23214                                  
 23215                                  ;       [VALSEC] = Last sector of current file.
 23216                                  
 23217 000039D5 31C0                    	XOR     AX,AX
 23218 000039D7 A3[DE05]                	MOV     [GROWCNT],AX
 23219 000039DA A3[E005]                	MOV     [GROWCNT+2],AX
 23220 000039DD 58                      	POP     AX
 23221                                  
 23222                                  	; MSDOS 6.0
 23223 000039DE 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23224 000039E2 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23225 000039E6 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23226 000039E8 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23227 000039EA 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23228 000039EC 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23229 000039F0 EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23230                                  lowsec:
 23231                                  	;MOV	DI,0			;F.C. >32mb
 23232                                  	; 22/09/2023
 23233 000039F2 31FF                    	xor	di,di
 23234                                  	; MSDOS 3.3 & MSDOS 6.0
 23235 000039F4 29CB                    	SUB	BX,CX			; Number of full sectors
 23236 000039F6 7253                    	JB	short NOGROW
 23237 000039F8 7444                    	JZ	short TESTTAIL
 23238                                  yesgrow:
 23239                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23240 000039FA 89D1                    	MOV     CX,DX
 23241 000039FC 93                      	XCHG    AX,BX
 23242                                  	;mul	word [es:bp+2]
 23243 000039FD 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23244                                  	
 23245                                  	; MSDOS 6.0
 23246 00003A01 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb save dx		;AN000;
 23247 00003A05 A3[0E06]                	MOV	[TEMP_VAR2],AX		;M039; F.C. >32mb save ax	;AN000;
 23248 00003A08 89F8                    	MOV	AX,DI			;F.C. >32mb			;AN000;
 23249                                  	;mul	word [es:bp+2]
 23250 00003A0A 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23251                                  	
 23252 00003A0E 0306[0706]              	ADD	AX,[HIGH_SECTOR]	;F.C. >32mb add lower value	;AN000;
 23253 00003A12 89C2                    	MOV	DX,AX			;F.C. >32mb DX:AX is the result of ;AN000;
 23254 00003A14 A1[0E06]                	MOV	AX,[TEMP_VAR2]		;M039; F.C. >32mb a 32 bit multiply ;AN000;
 23255                                  
 23256                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23257 00003A17 29C8                    	SUB     AX,CX			; Take off current "tail"
 23258 00003A19 83DA00                  	SBB     DX,0			; 32-bit extension
 23259 00003A1C 01D8                    	ADD     AX,BX			; Add on new "tail"
 23260 00003A1E 83D200                  	ADC     DX,0			; ripple tim's head off
 23261 00003A21 EB21                    	JMP     SHORT SETGRW
 23262                                  
 23263                                  HAVSTART:
 23264                                  	;int 3
 23265 00003A23 89C1                    	MOV     CX,AX
 23266 00003A25 E84611                  	call	SKPCLP
 23267                                  	;JCXZ	DOWRTJ
 23268                                  	; 16/12/2022
 23269 00003A28 E353                    	jcxz	DOWRT
 23270                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23271                                  	;jcxz	DOWRTJ
 23272                                  
 23273 00003A2A E8DE12                  	call	ALLOCATE
 23274                                  	;JNC	short DOWRTJ
 23275                                  	; 16/12/2022
 23276 00003A2D 734E                    	jnc	short DOWRT
 23277                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23278                                  	;jnc	short DOWRTJ
 23279                                  
 23280                                  	;entry   WRTERR
 23281                                  WRTERR:
 23282 00003A2F B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort	;AN000;
 23283                                  
 23284                                  	;entry WRTERR22
 23285                                  WRTERR22:
 23286 00003A31 A0[7605]                	MOV     AL,[THISDRV]		;MS.				;AN000;
 23287                                  
 23288                                  	; 27/07/2018
 23289                                  WRTERR33:
 23290                                  	;MOV	CX,0			;No bytes transferred
 23291 00003A34 31C9                    	XOR     CX,CX
 23292                                  
 23293 00003A36 C43E[9E05]              	LES     DI,[THISSFT]
 23294                                  	;CLC ; 19/05/2019
 23295                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23296                                  	; 16/12/2022
 23297                                  	;clc
 23298 00003A3A C3                      	retn
 23299                                  
 23300                                  	; 16/12/2022
 23301                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23302                                  ;DOWRTJ:
 23303                                  	;JMP	short DOWRT
 23304                                  
 23305                                  ACC_ERRWJ:
 23306                                  	; 10/08/2018
 23307                                  	;JMP	SET_ACC_ERRW
 23308                                  	; 16/12/2022
 23309                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23310                                  	; 10/02/2024
 23311                                  	; ds=ss
 23312 00003A3B E9E2FD                  	jmp	SET_ACC_ERR
 23313                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23314                                  	;;jmp	SET_ACC_ERRW	
 23315                                  
 23316                                  TESTTAIL:
 23317 00003A3E 29D0                    	SUB     AX,DX
 23318 00003A40 7609                    	JBE	short NOGROW
 23319 00003A42 31D2                    	XOR     DX,DX
 23320                                  SETGRW:
 23321 00003A44 A3[DE05]                	MOV	[GROWCNT],AX
 23322 00003A47 8916[E005]              	MOV	[GROWCNT+2],DX
 23323                                  NOGROW:
 23324 00003A4B 58                      	POP     AX
 23325                                  
 23326                                  ; 10/02/2024
 23327                                  %if 0
 23328                                  	MOV     CX,[CLUSNUM] ; *+ ; First cluster accessed
 23329                                  	call	FNDCLUS
 23330                                  %else
 23331                                  	; 10/02/2024 - Retro DOS v4.2
 23332 00003A4C E8FB10                  	call	FNDCLUS_X ; *+
 23333                                  %endif
 23334 00003A4F 72EA                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23335                                  
 23336 00003A51 891E[BC05]              	MOV     [CLUSNUM],BX
 23337 00003A55 8916[BA05]              	MOV     [LASTPOS],DX
 23338                                  
 23339 00003A59 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23340 00003A5B 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23341 00003A5D E3C4                    	JCXZ    HAVSTART        ; See if no more data
 23342 00003A5F 51                      	PUSH    CX              ; No. of clusters short of first
 23343 00003A60 89C1                    	MOV     CX,AX
 23344 00003A62 E8A612                  	call	ALLOCATE
 23345 00003A65 59                      	POP     CX
 23346 00003A66 72C7                    	JC	short WRTERR
 23347 00003A68 8B16[BA05]              	MOV     DX,[LASTPOS]
 23348 00003A6C 42                      	INC     DX
 23349 00003A6D 49                      	DEC     CX
 23350 00003A6E 7405                    	JZ	short NOSKIP
 23351 00003A70 E8FB10                  	call	SKPCLP
 23352 00003A73 72C6                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23353                                  NOSKIP:
 23354 00003A75 891E[BC05]              	MOV     [CLUSNUM],BX
 23355 00003A79 8916[BA05]              	MOV     [LASTPOS],DX
 23356                                  DOWRT:
 23357 00003A7D 833E[D205]00            	CMP     word [BYTCNT1],0
 23358 00003A82 7405                    	JZ	short WRTMID
 23359                                  	; 09/02/2024
 23360                                  	;MOV	BX,[CLUSNUM]	 ; (not used in 'BUFWRT') ; 09/02/2024
 23361 00003A84 E87611                  	call	BUFWRT
 23362 00003A87 72B2                    	JC	short ACC_ERRWJ
 23363                                  WRTMID:
 23364 00003A89 A1[D605]                	MOV     AX,[SECCNT]
 23365 00003A8C 09C0                    	OR      AX,AX
 23366                                  	; 20/11/2022
 23367 00003A8E 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23368 00003A90 0106[C405]              	ADD     [SECPOS],AX
 23369                                  	; 19/05/2019
 23370                                  	; MSDOS 6.0
 23371 00003A94 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23372 00003A99 E8BC11                  	call	NEXTSEC
 23373                                  	; 16/12/2022
 23374 00003A9C 729D                    	JC	short ACC_ERRWJ
 23375                                  	;JC	short SET_ACC_ERRW	;M039
 23376 00003A9E C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23377 00003AA3 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23378 00003AA7 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23379 00003AAB 8B0E[D605]              	MOV     CX,[SECCNT]
 23380                                  WRTLP:
 23381 00003AAF E8D711                  	call	OPTIMIZE
 23382 00003AB2 7248                    	JC	short SET_ACC_ERRW
 23383                                  	; 16/12/2022
 23384                                  	;JC	short ACC_ERRWJ
 23385                                  
 23386                                  ;M039
 23387                                  ;       DI = Next physical cluster.
 23388                                  ;       AX = # sectors remaining.
 23389                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23390                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23391                                  ;	     sectors, also termed an "Extent".)
 23392                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23393                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23394                                  ;
 23395                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23396                                  ;	are in Extent; they are being over-written.
 23397                                  
 23398 00003AB4 57                      	push    di
 23399 00003AB5 50                      	push    ax
 23400                                  
 23401                                  	; MSDOS 3.3
 23402                                  	; IBMDOS.COM (1987) - Offset 4497h
 23403                                  	;push	dx
 23404                                  	;push	bx
 23405                                  	;mov	al,[es:bp]
 23406                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23407                                  	;mov	bx,cx
 23408                                  	;add	bx,dx	; (bx = Extent end)
 23409                                  
 23410                                  ;	DX = Extent start.
 23411                                  ;	BX = Extent end.
 23412                                  ;	AL = Drive #.
 23413                                  
 23414                                  	;call	SETVISIT
 23415                                  
 23416                                  ;wbufq1:
 23417                                  	;;or	byte [di+5],20h
 23418                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23419                                  	;;cmp	al,[di+4]
 23420                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23421                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23422                                  	;;cmp	[di+6],dx
 23423                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23424                                  	;jb	short wbufq2
 23425                                  	;;cmp	[di+6],bx
 23426                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23427                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23428                                  
 23429                                  	;; Buffer sector is in the Extent
 23430                                  
 23431                                  	;;mov	word [di+4],20FFh
 23432                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23433                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23434                                  	;				; .buf_flags, AH = 0, reset/clear
 23435                                  	;call	SCANPLACE
 23436                                  ;wbufq2:
 23437                                  	;call	SKIPVISIT
 23438                                  	;jnz	short wbufq1
 23439                                  	;pop	bx
 23440                                  	;pop	dx
 23441                                  
 23442                                          ; MSDOS 6.0
 23443 00003AB6 E82B01                  	call	DskWrtBufPurge		;DS trashed.
 23444                                  
 23445                                  ;ASSUME DS:NOTHING
 23446                                  ;M039
 23447                                  	; MSDOS 3.3 & MSDOS 6.0
 23448                                  ;hkn; SS override for DMAADD and ALLOWED
 23449 00003AB9 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23450                                  	;mov	byte [ss:ALLOWED],38h
 23451 00003ABE 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23452                                  
 23453                                  ;	put logic from DWRITE in-line here so we can modify it
 23454                                  ;	for DISK FULL conditions.
 23455                                  
 23456                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23457                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23458                                  
 23459                                  	; 16/12/2022
 23460                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23461                                  	;call	DWRITE
 23462                                  
 23463                                  ;DWRITE_OKAY:
 23464                                  
 23465                                  	; 16/12/2022
 23466                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23467                                  	;pop	cx
 23468                                  	;pop	bx
 23469                                  	;push	ss
 23470                                  	;pop	ds
 23471                                  	;jc	short SET_ACC_ERRW
 23472                                  	;jcxz	WRTLAST
 23473                                  	;mov	dl,0
 23474                                  	;inc	word [LASTPOS]
 23475                                  	;jmp	short WRTLP
 23476                                  
 23477                                  	; 16/12/2022
 23478                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23479                                  DWRITE_LUP:
 23480                                  	; 23/07/2019 - Retro DOS v3.2
 23481                                  
 23482                                  	; MSDOS 6.0
 23483 00003AC4 E8F9FB                  	call	DSKWRITE
 23484 00003AC7 7417                    	jz	short DWRITE_OKAY
 23485                                  
 23486                                  ;;	int	3
 23487                                  
 23488 00003AC9 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23489 00003ACB 7423                    	jz	short DWRITE_DISK_FULL
 23490                                  
 23491                                  	; 16/12/2022
 23492                                  
 23493                                  ;;hkn; SS override
 23494 00003ACD 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23495 00003AD3 E819FC                  	call	HARDERRRW
 23496 00003AD6 3C01                    	CMP	AL,1		; Check for retry
 23497 00003AD8 74EA                    	JZ	short DWRITE_LUP
 23498                                  
 23499                                  	; 16/12/2022
 23500                                  	; 23/07/2019
 23501                                  	;POP	CX ; *4*
 23502                                  	;POP	BX ; *5*
 23503                                  	;
 23504                                  	;push	ss
 23505                                  	;pop	ds
 23506                                  	;
 23507                                  
 23508                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23509                                  
 23510                                  	; 16/12/2022
 23511 00003ADA 3C03                    	CMP	AL,3		; Check for FAIL
 23512 00003ADC F8                      	CLC
 23513 00003ADD 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23514 00003ADF F9                      	STC
 23515                                  
 23516                                  DWRITE_OKAY:
 23517                                  	; 16/12/2022
 23518                                  	; 23/07/2019
 23519                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23520 00003AE0 59                      	POP	CX ; *4*
 23521 00003AE1 5B                      	POP	BX ; *5*
 23522                                  
 23523                                  ;       CX = # sectors remaining.
 23524                                  ;       BX = Next physical cluster.
 23525                                  
 23526                                  ;hkn; SS override
 23527                                          ;Context DS
 23528                                  	; 16/12/2022
 23529                                  	;push	ss
 23530                                  	;pop	ds
 23531                                  
 23532                                  	; 10/02/2024
 23533                                  	; 16/12/2022
 23534                                  	;jc	short SET_ACC_ERRW
 23535                                  
 23536                                  	; 16/12/2022
 23537 00003AE2 16                      	push	ss
 23538 00003AE3 1F                      	pop	ds
 23539                                  
 23540                                  	; 10/02/2024
 23541 00003AE4 7216                    	jc	short SET_ACC_ERRW
 23542                                  
 23543 00003AE6 E317                    	JCXZ    WRTLAST
 23544                                  
 23545                                  	; 10/02/2024
 23546 00003AE8 B200                    	MOV	DL,0
 23547                                  	;xor	dl,dl ; 23/07/2019
 23548 00003AEA FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23549 00003AEE EBBF                    	JMP     short WRTLP
 23550                                  
 23551                                  	; 23/07/2019 - Retro DOS v3.2
 23552                                  	; 09/08/2018
 23553                                  	; MSDOS 6.0
 23554                                  DWRITE_DISK_FULL:
 23555                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23556                                  	; 16/12/2022
 23557 00003AF0 16                      	push	ss
 23558 00003AF1 1F                      	pop	ds
 23559 00003AF2 59                      	pop	cx		; unjunk stack
 23560 00003AF3 5B                      	pop	bx
 23561 00003AF4 C606[0B06]01            	mov	byte [DISK_FULL],1
 23562                                  	;stc
 23563 00003AF9 E933FF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23564                                  
 23565                                  SET_ACC_ERRW:
 23566                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23567                                  	; 10/02/2024
 23568                                  	; ds=ss
 23569 00003AFC E921FD                  	jmp	SET_ACC_ERR
 23570                                  
 23571                                  WRTLAST:
 23572 00003AFF A1[D405]                	MOV     AX,[BYTCNT2]
 23573 00003B02 09C0                    	OR      AX,AX
 23574 00003B04 7413                    	JZ	short FINWRT
 23575 00003B06 A3[D205]                	MOV     [BYTCNT1],AX
 23576 00003B09 E84C11                  	call	NEXTSEC
 23577 00003B0C 72EE                    	JC	short SET_ACC_ERRW
 23578 00003B0E C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23579 00003B14 E8E610                  	call	BUFWRT
 23580 00003B17 72E3                    	JC	short SET_ACC_ERRW
 23581                                  FINWRT:
 23582 00003B19 C43E[9E05]              	LES     DI,[THISSFT]
 23583 00003B1D A1[DE05]                	MOV     AX,[GROWCNT]
 23584 00003B20 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23585 00003B24 09C0                    	OR      AX,AX
 23586 00003B26 7502                    	JNZ	short UPDATE_size
 23587 00003B28 E30F                    	JCXZ    SAMSIZ
 23588                                  UPDATE_size:
 23589                                  	;add	[es:di+11h],ax
 23590 00003B2A 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23591                                  	;adc	[es:di+13h],cx
 23592 00003B2E 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23593                                  
 23594                                  ; Make sure that all other SFT's see this growth also.
 23595                                  
 23596 00003B32 B80100                  	MOV     AX,1
 23597                                  ;if installed
 23598                                  	;Call	JShare + 14 * 4
 23599 00003B35 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23600                                  ;else
 23601                                  ;	Call    ShSU
 23602                                  ;endif
 23603                                  
 23604                                  SAMSIZ:
 23605 00003B39 E97AFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23606                                  
 23607                                  	; 16/12/2022
 23608                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23609                                  ;SET_ACC_ERRW:
 23610                                  	;jmp	SET_ACC_ERR_DS
 23611                                  
 23612                                  WRTEOF:
 23613 00003B3C 89C1                    	MOV     CX,AX
 23614 00003B3E 09D1                    	OR      CX,DX
 23615 00003B40 746A                    	JZ	short KILLFIL
 23616 00003B42 83E801                  	SUB     AX,1
 23617 00003B45 83DA00                  	SBB     DX,0
 23618                                  
 23619                                  	; MSDOS 3.3
 23620                                  	;;div	word [es:bp+2]
 23621                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23622                                  	;;mov	cl,[es:bp+5]
 23623                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 23624                                  	;shr	ax,cl
 23625                                  
 23626                                  	; MSDOS 6.0
 23627 00003B48 53                      	PUSH	BX
 23628                                  	;mov	bx,[es:bp+2]
 23629 00003B49 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23630 00003B4D E81A01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23631 00003B50 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23632 00003B51 89CA                    	MOV	DX,CX			      ;M039
 23633 00003B53 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23634 00003B57 E83701                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23635                                  
 23636 00003B5A 89C1                    	MOV     CX,AX
 23637 00003B5C E8EF0F                  	call	FNDCLUS
 23638                                  SET_ACC_ERRWJ2:
 23639 00003B5F 729B                    	JC	short SET_ACC_ERRW
 23640                                  
 23641 00003B61 E324                    	JCXZ    RELFILE
 23642 00003B63 E8A511                  	call	ALLOCATE
 23643                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23644                                  	; 16/12/2022
 23645 00003B66 7303                    	jnc	short UPDATE
 23646 00003B68 E9C4FE                  	JMP	WRTERR
 23647                                  UPDATE:
 23648 00003B6B C43E[9E05]              	LES	DI,[THISSFT]
 23649 00003B6F A1[CE05]                	MOV	AX,[BYTPOS]
 23650                                  	;mov	[es:di+11h],ax
 23651 00003B72 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23652 00003B76 A1[D005]                	MOV	AX,[BYTPOS+2]
 23653                                  	;mov	[es:di+13h],ax
 23654 00003B79 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23655                                  ;
 23656                                  ; Make sure that all other SFT's see this growth also.
 23657                                  ;
 23658 00003B7D B80200                  	MOV     AX,2
 23659                                  ;if installed
 23660                                  	;Call	JShare + 14 * 4
 23661 00003B80 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23662                                  ;else
 23663                                  ;	Call    ShSU
 23664                                  ;endif
 23665 00003B84 31C9                    	XOR     CX,CX ; 0
 23666                                  	;jmp	ADDREC
 23667                                  	; 08/02/2024
 23668 00003B86 C3                      	retn
 23669                                  
 23670                                  	; 16/12/2022
 23671                                  ;WRTERRJ: 
 23672                                  	;JMP	WRTERR
 23673                                  
 23674                                  ;;;;;;;;;;;;;;;; 7/18/86
 23675                                  ;;;;;;;;;;;;;;;;
 23676                                  
 23677                                  RELFILE:
 23678                                  	; MSDOS 6.0
 23679 00003B87 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23680 00003B88 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23681                                  	;cmp	dx,[es:di+19h]
 23682 00003B8C 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23683 00003B90 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23684                                  	;mov	[es:di+19h],0
 23685 00003B92 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23686                                  	;mov	dx,[es:di+0Bh]
 23687 00003B98 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23688                                  	;mov	[es:di+35h],dx
 23689 00003B9C 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23690                                  SKIPRESET:                            		;AN002; BL
 23691 00003BA0 07                      	POP     ES                    		;AN002; BL
 23692                                  ;
 23693 00003BA1 BAFFFF                  	MOV     DX,0FFFFH
 23694 00003BA4 E81212                  	call	RELBLKS
 23695                                  	; 16/12/2022
 23696                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23697 00003BA7 73C2                    	jnc	short UPDATE
 23698                                  SET_ACC_ERRWJ:
 23699                                  	;JC	short SET_ACC_ERRWJ2
 23700                                  	;JMP	SHORT UPDATE
 23701                                  	; 16/12/2022
 23702                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss
 23703                                  	; 10/02/2024
 23704                                  	; ds=ss
 23705 00003BA9 E974FC                  	jmp	SET_ACC_ERR
 23706                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23707                                  	;JC	short SET_ACC_ERRWJ2
 23708                                  	;JMP	SHORT UPDATE
 23709                                  
 23710                                  KILLFIL:
 23711 00003BAC 31DB                    	XOR     BX,BX
 23712 00003BAE 06                      	PUSH    ES
 23713 00003BAF C43E[9E05]              	LES     DI,[THISSFT]
 23714                                  	;mov	[es:di+19h],bx
 23715 00003BB3 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23716                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23717 00003BB7 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23718                                  	;xchg	bx,[es:di+0Bh]
 23719 00003BBB 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23720 00003BBF 07                      	POP	ES
 23721                                  
 23722 00003BC0 09DB                    	OR	BX,BX
 23723                                  	;JZ	short UPDATEJ
 23724                                  	; 16/12/2022
 23725 00003BC2 74A7                    	jz	short UPDATE
 23726                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23727                                  	;jz	short UPDATEJ
 23728                                  
 23729                                  ;; 10/23/86 FastOpen update
 23730 00003BC4 06                      	PUSH	ES              ; since first cluster # is 0
 23731 00003BC5 55                      	PUSH	BP              ; we must delete the old cache entry
 23732 00003BC6 50                      	PUSH	AX
 23733 00003BC7 51                      	PUSH	CX
 23734 00003BC8 52                      	PUSH	DX
 23735 00003BC9 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23736                                  	; 15/12/2022
 23737 00003BCD 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23738                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23739                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23740 00003BD1 89D9                    	MOV	CX,BX                    ; first cluster #
 23741 00003BD3 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23742 00003BD5 E8ABEA                  	call	FastOpen_Update          ; call fastopen
 23743 00003BD8 5A                      	POP	DX
 23744 00003BD9 59                      	POP	CX
 23745 00003BDA 58                      	POP	AX
 23746 00003BDB 5D                      	POP	BP
 23747 00003BDC 07                      	POP	ES
 23748                                  ;; 10/23/86 FastOpen update
 23749                                  
 23750 00003BDD E8D711                  	call	RELEASE
 23751 00003BE0 72C7                    	JC	short SET_ACC_ERRWJ
 23752                                  UPDATEJ:
 23753                                  	; 20/11/2022
 23754 00003BE2 EB87                    	JMP	short UPDATE ; 10/08/2018
 23755                                  
 23756                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23757                                  ;----------------------------------------------------------------------------
 23758                                  ;
 23759                                  ; Procedure Name : DskWrtBufPurge
 23760                                  ;
 23761                                  ; Inputs:
 23762                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23763                                  ;	     sectors, also termed an "Extent".)
 23764                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23765                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23766                                  ;
 23767                                  ; Function:
 23768                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23769                                  ;	are in Extent; they are being over-written.
 23770                                  ;
 23771                                  ; Outputs:
 23772                                  ;       (Same as Input.)
 23773                                  ; Uses:
 23774                                  ;       All registers except DS,AX,SI,DI preserved.
 23775                                  ;       SS override for all global variables.
 23776                                  ;----------------------------------------------------------------------------
 23777                                  ;M039: Created
 23778                                  
 23779                                  ;procedure   DskWrtBufPurge,NEAR
 23780                                  ;
 23781                                  ;ASSUME  DS:NOTHING
 23782                                  
 23783                                  ; 04/05/2019 - Retro DOS v4.0
 23784                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23785                                  
 23786                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23787                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23788                                  
 23789                                  DskWrtBufPurge:
 23790                                  	;SaveReg <bx,cx>
 23791 00003BE4 53                      	push	bx
 23792 00003BE5 51                      	push	cx
 23793                                  
 23794 00003BE6 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23795 00003BEB 89DE                    	mov	si,bx
 23796 00003BED 01D1                    	add	cx,dx
 23797 00003BEF 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23798                                  
 23799                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23800                                  	;;mov	al,[es:bp+0]
 23801                                  	;mov	al,[es:bp+DPB.DRIVE]
 23802                                  	; 15/12/2022
 23803 00003BF2 268A4600                	mov	al,[es:bp]
 23804                                  
 23805                                  ;	BX:DX = Extent start.
 23806                                  ;	SI:CX = Extent end + 1.
 23807                                  ;	AL = Drive #
 23808                                  
 23809 00003BF6 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23810 00003BFC 7431                    	je	short nosc		; -no, jump.
 23811                                  
 23812                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23813                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23814                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23815                                  
 23816 00003BFE 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23817 00003C03 752A                    	jne	short nosc		; -no, jump.
 23818                                  
 23819 00003C05 50                      	push    ax
 23820 00003C06 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23821 00003C0A 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23822                                  
 23823                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23824                                  	;jbe	short sc5		; -yes, jump.
 23825                                  
 23826 00003C0F 39FE                    	cmp	si,di
 23827 00003C11 7502                    	jne	short sc01
 23828 00003C13 39C1                    	cmp	cx,ax
 23829                                  sc01: 
 23830 00003C15 7617                    	jbe	short sc5
 23831                                  
 23832 00003C17 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23833 00003C1C 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23834                                  	
 23835                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23836                                  	;jae	short sc5		; -yes, jump.
 23837                                  
 23838 00003C1F 39FB                    	cmp	bx,di
 23839 00003C21 7502                    	jne	short sc02
 23840 00003C23 39C2                    	cmp	dx,ax
 23841                                  sc02:
 23842 00003C25 7307                    	jnb	short sc5
 23843                                  
 23844 00003C27 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23845                                  sc5:	
 23846 00003C2E 58                      	pop     ax
 23847                                  
 23848                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23849                                  ;	written.
 23850                                  
 23851                                  nosc:	
 23852 00003C2F E8901B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23853                                  
 23854                                  _bufq:	
 23855                                  	;cmpo	al,[di+4]
 23856 00003C32 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23857 00003C35 7527                    	jne	short bufq5		; -no, jump.
 23858                                  
 23859                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23860                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23861                                  
 23862                                  	;cmp	bx,[di+8]
 23863 00003C37 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23864 00003C3A 7503                    	jne	short bufq04
 23865                                  	;cmp	dx,[di+6]
 23866 00003C3C 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23867                                  bufq04:
 23868 00003C3F 771D                    	ja	short bufq5
 23869                                  
 23870                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23871                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23872                                  
 23873                                  	;cmp	si,[di+8]
 23874 00003C41 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23875 00003C44 7503                    	jne	short bufq05
 23876                                  	;cmp	cx,[di+6]
 23877 00003C46 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23878                                  bufq05:
 23879 00003C49 7613                    	jbe	short bufq5
 23880                                  
 23881                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23882                                  
 23883                                  	;test	byte [di+5],40h
 23884 00003C4B F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23885 00003C4F 7403                    	jz	short bufq4		; -no, jump.
 23886 00003C51 E8EF1D                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23887                                  bufq4:
 23888                                  	;mov	word [di+4],20FFh
 23889 00003C54 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23890                                  
 23891 00003C59 E8781B                  	call	SCANPLACE
 23892 00003C5C EB02                    	jmp     short bufq6
 23893                                  bufq5: 
 23894 00003C5E 8B3D                    	mov     di,[di]
 23895                                  	;mov	di,[di+BUFFINFO.buf_next]
 23896                                  bufq6: 
 23897 00003C60 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23898 00003C65 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23899                                  	
 23900                                  	;RestoreReg <cx,bx>
 23901 00003C67 59                      	pop	cx
 23902 00003C68 5B                      	pop	bx
 23903 00003C69 C3                      	retn
 23904                                  
 23905                                  ;EndProc DskWrtBufPurge
 23906                                  
 23907                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23908                                  ;----------------------------------------------------------------------------
 23909                                  ;
 23910                                  ; Procedure Name : DIV32
 23911                                  ;
 23912                                  ; Inputs:
 23913                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23914                                  ; Function:
 23915                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23916                                  ; Outputs:
 23917                                  ;       CX:AX = quotient , DX= remainder
 23918                                  ; Uses:
 23919                                  ;       All registers except AX,CX,DX preserved.
 23920                                  ;----------------------------------------------------------------------------
 23921                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23922                                  
 23923                                  ; 04/05/2019 - Retro DOS v4.0
 23924                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23925                                  
 23926                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23927                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23928                                  
 23929                                  DIV32:
 23930 00003C6A 81FB0002                	cmp	bx,512
 23931 00003C6E 7515                    	jne	short div5
 23932                                  
 23933 00003C70 89D1                    	mov	cx,dx
 23934 00003C72 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23935 00003C74 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23936 00003C78 88E0                    	mov	al,ah
 23937 00003C7A 88CC                    	mov	ah,cl
 23938 00003C7C 88E9                    	mov	cl,ch
 23939 00003C7E 30ED                    	xor	ch,ch
 23940 00003C80 D1E9                    	shr	cx,1
 23941 00003C82 D1D8                    	rcr	ax,1
 23942 00003C84 C3                      	retn
 23943                                  div5:	
 23944 00003C85 89C1                    	mov	cx,ax
 23945 00003C87 89D0                    	mov	ax,dx
 23946 00003C89 31D2                    	xor	dx,dx
 23947 00003C8B F7F3                    	div	bx              ; 0:AX/BX
 23948 00003C8D 91                      	xchg	cx,ax
 23949 00003C8E F7F3                    	div	bx              ; DX:AX/BX
 23950 00003C90 C3                      	retn
 23951                                  
 23952                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23953                                  ;----------------------------------------------------------------------------
 23954                                  ;
 23955                                  ; Procedure Name : SHR32
 23956                                  ;
 23957                                  ; Inputs:
 23958                                  ;	DX:AX = 32 bit sector number
 23959                                  ; Function:
 23960                                  ;       Perform 32 bit shift right
 23961                                  ; Outputs:
 23962                                  ;	AX = cluster number
 23963                                  ;	ZF = 1 if no error
 23964                                  ;	   = 0 if error (cluster number > 64k)
 23965                                  ; Uses:
 23966                                  ;       DX,CX
 23967                                  ;---------------------------------------------------------------------------
 23968                                  ; M017	- SHR32 rewritten for better performance
 23969                                  ; M039	- Additional optimization
 23970                                  
 23971                                  ; 04/05/2019 - Retro DOS v4.0
 23972                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23973                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23974                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23975                                  
 23976                                  SHR32:
 23977                                  	;mov	cl,[es:bp+5]
 23978 00003C91 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23979 00003C95 30ED                    	xor	ch,ch	    ;ZF=1
 23980 00003C97 E306                    	jcxz	norota
 23981                                  
 23982                                  rotashft2:
 23983 00003C99 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23984 00003C9B D1D8                    	rcr	ax,1	    ;ZF not affected.
 23985 00003C9D E2FA                    	loop	rotashft2
 23986                                  norota:
 23987 00003C9F C3                      	retn
 23988                                  
 23989                                  ;============================================================================
 23990                                  ; DIR.ASM, MSDOS 6.0, 1991
 23991                                  ;============================================================================
 23992                                  ; 27/07/2018 - Retro DOS v3.0
 23993                                  ; 19/05/2019 - Retro DOS v4.0
 23994                                  
 23995                                  ;	TITLE	DIR - Directory and path cracking
 23996                                  ;	NAME	Dir
 23997                                  
 23998                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23999                                  ;---------------------------------------------------------------------------
 24000                                  ;
 24001                                  ; Procedure Name : FINDENTRY,SEARCH
 24002                                  ;
 24003                                  ; Inputs:
 24004                                  ;	[THISDPB] set
 24005                                  ;	[SECCLUSPOS] = 0
 24006                                  ;	[DIRSEC] = Starting directory sector number
 24007                                  ;	[CLUSNUM] = Next cluster of directory
 24008                                  ;	[CLUSFAC] = Sectors/Cluster
 24009                                  ;	[NAME1] = Name to look for
 24010                                  ; Function:
 24011                                  ;	Find file name in disk directory.
 24012                                  ;	"?" matches any character.
 24013                                  ; Outputs:
 24014                                  ;	Carry set if name not found
 24015                                  ;	ELSE
 24016                                  ;	Zero set if attributes match (always except when creating)
 24017                                  ;	AH = Device ID (bit 7 set if not disk)
 24018                                  ;	[THISDPB] = Base of drive parameters
 24019                                  ;	DS = DOSGROUP
 24020                                  ;	ES = DOSGROUP
 24021                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 24022                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 24023                                  ;	[CURBUF] has directory record with match
 24024                                  ;	[NAME1] has file name
 24025                                  ;	[LASTENT] is entry number of the entry
 24026                                  ; All other registers destroyed.
 24027                                  ;----------------------------------------------------------------------------
 24028                                  
 24029                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 24030                                  ;hkn; this point.
 24031                                  
 24032                                  SEARCH:
 24033                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24034                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 24035                                  
 24036                                  	; 19/05/2019 - Retro DOS v4.0
 24037                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 24038                                  
 24039                                  	; 27/07/2018 - Retro DOS v3.0
 24040                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 24041                                  	; 15/03/2018 - Retro DOS v2.0
 24042                                  
 24043                                  	; 24/01/2024
 24044                                  
 24045                                  	;entry	FindEntry
 24046                                  FINDENTRY:
 24047 00003CA0 E81604                  	call	STARTSRCH
 24048 00003CA3 A0[6B05]                	MOV	AL,[ATTRIB]
 24049                                  	;and	al,9Eh
 24050 00003CA6 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 24051                                  	;cmp	al,8
 24052 00003CA8 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 24053 00003CAA 7503                    	JNZ	short NOTVOLSRCH	; No
 24054 00003CAC E86601                  	CALL	SETROOTSRCH		; Yes force search of root
 24055                                  NOTVOLSRCH:
 24056 00003CAF E8F800                  	CALL	GETENTRY
 24057                                  	;JNC	short SRCH
 24058                                  	;JMP	SETESRET
 24059                                  	; 24/01/2024
 24060 00003CB2 723F                    	jc	short SETESRET
 24061                                  
 24062                                  	;entry	Srch
 24063                                  SRCH:
 24064 00003CB4 1E                      	PUSH	DS
 24065 00003CB5 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24066                                  
 24067                                  ;	(DS:BX) = directory entry address
 24068                                  
 24069 00003CB9 8A27                    	mov	ah,[BX]
 24070                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 24071 00003CBB 08E4                    	OR	AH,AH			; End of directory?
 24072 00003CBD 7437                    	JZ	short FREE
 24073                                  
 24074                                  ;hkn; SS override
 24075 00003CBF 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 24076 00003CC4 7430                    	JZ	short FREE
 24077                                  	;test	byte [bx+0Bh],8
 24078 00003CC6 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 24079                                  					; Volume ID file?
 24080 00003CCA 7405                    	JZ	short CHKFNAM 		; NO
 24081                                  
 24082                                  ;hkn; SS override
 24083 00003CCC 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 24084                                  CHKFNAM:
 24085                                  ;	Context ES
 24086 00003CD1 8CD6                    	MOV	SI,SS
 24087 00003CD3 8EC6                    	MOV	ES,SI
 24088 00003CD5 89DE                    	MOV	SI,BX
 24089                                  
 24090                                  ;hkn; NAME1 is in DOSDATA
 24091 00003CD7 BF[4B05]                	MOV	DI,NAME1
 24092                                  ;;;;; 7/29/86
 24093                                  
 24094                                  ;hkn; SS override for NAME1
 24095                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 24096                                  	;JNZ	short NO_E5
 24097                                  	;MOV	BYTE [SS:NAME1],05H
 24098                                  	; 22/09/2023
 24099 00003CDA 26803DE5                	cmp	byte [es:di],0E5h
 24100 00003CDE 7504                    	jnz	short NO_E5
 24101 00003CE0 26C60505                	mov	byte [es:di],05h
 24102                                  NO_E5:
 24103                                  ;;;;; 7/29/86
 24104 00003CE4 E86100                  	CALL	MetaCompare
 24105 00003CE7 7429                    	JZ	short FOUND
 24106 00003CE9 1F                      	POP	DS
 24107                                  
 24108                                  	;entry	NEXTENT
 24109                                  NEXTENT:
 24110 00003CEA C42E[8A05]              	LES	BP,[THISDPB]
 24111 00003CEE E86600                  	CALL	NEXTENTRY
 24112 00003CF1 73C1                    	JNC	short SRCH
 24113                                  	;JMP	SHORT SETESRET
 24114                                  	; 24/01/2024
 24115                                  SETESRET:
 24116 00003CF3 16                      	PUSH	SS
 24117 00003CF4 07                      	POP	ES
 24118 00003CF5 C3                      	retn
 24119                                  FREE:
 24120 00003CF6 1F                      	POP	DS
 24121 00003CF7 8B0E[4803]              	MOV	CX,[LASTENT]
 24122 00003CFB 3B0E[D805]              	CMP	CX,[ENTFREE]
 24123 00003CFF 7304                    	JAE	short TSTALL
 24124 00003D01 890E[D805]              	MOV	[ENTFREE],CX
 24125                                  TSTALL:
 24126 00003D05 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 24127                                  NEXTENTJ:
 24128 00003D09 74DF                    	je	short NEXTENT 		; No - continue search
 24129 00003D0B 890E[DA05]              	MOV	[ENTLAST],CX
 24130 00003D0F F9                      	STC
 24131 00003D10 EBE1                    	JMP	SHORT SETESRET
 24132                                  
 24133                                  FOUND:
 24134                                  ; We have a file with a matching name. We must now consider the attributes:
 24135                                  ; ATTRIB	Action
 24136                                  ; ------	------
 24137                                  ; Volume_ID	Is Volume_ID in test?
 24138                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 24139                                  ;		If create then Is ATTRIB equal to test?
 24140                                  
 24141 00003D12 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 24142 00003D14 1F                      	POP	DS
 24143 00003D15 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 24144                                  	;and	ah,9Eh
 24145 00003D19 80E4DE                  	AND	AH,~attr_ignore
 24146                                  	;lea	si,[si+15]
 24147 00003D1C 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 24148                                  					; point to first cluster field
 24149                                  	;test	ch,8
 24150 00003D1F F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 24151 00003D22 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 24152                                  	;test	ah,8
 24153 00003D24 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 24154                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 24155                                  	; 16/12/2022
 24156 00003D27 74C1                    	jz	short NEXTENT ; 19/05/2019
 24157                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24158                                  	;JZ	short NEXTENTJ
 24159 00003D29 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24160 00003D2B EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24161                                  check_one_volume_id:
 24162                                  	;CMP	ah,8
 24163 00003D2D 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24164                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24165                                  	; 16/12/2022
 24166 00003D30 74B8                    	je	short NEXTENT ; 19/05/2019
 24167                                  	;JZ	short NEXTENTJ
 24168 00003D32 E89803                  	CALL	MatchAttributes
 24169 00003D35 7407                    	JZ	SHORT RETFF
 24170 00003D37 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24171                                  	; 16/12/2022
 24172                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24173 00003D3C 74AC                    	jz	short NEXTENT ; 19/05/2019
 24174                                  RETFF:
 24175 00003D3E C42E[8A05]              	LES	BP,[THISDPB]
 24176                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24177                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24178                                  	; 15/12/2022
 24179 00003D42 268A6600                	MOV	AH,[ES:BP]
 24180                                  ;SETESRET:
 24181                                  	;PUSH	SS
 24182                                  	;POP	ES
 24183                                  	;retn
 24184                                  	; 24/01/2024
 24185 00003D46 EBAB                    	jmp	short SETESRET
 24186                                  
 24187                                  ;----------------------------------------------------------------------------
 24188                                  ;
 24189                                  ; Procedure Name : MetaCompare
 24190                                  ;
 24191                                  ; Inputs:
 24192                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24193                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24194                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24195                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24196                                  ; Function:
 24197                                  ;	Compare FCB style names allowing for ? match to any char
 24198                                  ; Outputs:
 24199                                  ;	Zero if match else NZ
 24200                                  ; Destroys CX,SI,DI all others preserved
 24201                                  ;----------------------------------------------------------------------------
 24202                                  
 24203                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24204                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24205                                  
 24206                                  MetaCompare:
 24207 00003D48 B90B00                  	MOV	CX,11
 24208                                  WILDCRD:
 24209 00003D4B F3A6                    	REPE	CMPSB
 24210 00003D4D 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24211                                  CHECK_META:
 24212 00003D4F 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24213 00003D54 74F5                    	JZ	short WILDCRD
 24214                                  MetaRet:
 24215 00003D56 C3                       	retn				; Zero set, Match
 24216                                  
 24217                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24218                                  ;----------------------------------------------------------------------------
 24219                                  ;
 24220                                  ; Procedure Name : NEXTENTRY
 24221                                  ;
 24222                                  ; Inputs:
 24223                                  ;	Same as outputs of GETENTRY, above
 24224                                  ; Function:
 24225                                  ;	Update BX, and [LASTENT] for next directory entry.
 24226                                  ;	Carry set if no more.
 24227                                  ;----------------------------------------------------------------------------
 24228                                  
 24229                                  NEXTENTRY:
 24230                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24231                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24232                                  
 24233                                  	; 19/05/2019 - Retro DOS v4.0
 24234                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24235                                  
 24236                                  	; 27/07/2018 - Retro DOS v3.0
 24237                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24238                                  	; 15/03/2018 - Retro DOS v2.0
 24239                                  
 24240 00003D57 A1[4803]                	MOV	AX,[LASTENT]
 24241 00003D5A 3B06[DA05]              	CMP	AX,[ENTLAST]
 24242 00003D5E 7422                    	JZ	short NONE
 24243 00003D60 40                      	INC	AX
 24244                                  	;ADD	BX,32
 24245 00003D61 8D5F20                  	LEA	BX,[BX+32]
 24246 00003D64 39D3                    	CMP	BX,DX
 24247                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24248                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24249                                  	; 16/12/2022
 24250 00003D66 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24251 00003D68 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24252 00003D6C FEC3                    	INC	BL
 24253 00003D6E 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24254 00003D72 7215                    	JB	short SAMECLUS
 24255 00003D74 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24256 00003D78 E89716                  	call	IsEOF
 24257 00003D7B 7305                    	JAE	short NONE
 24258                                  	; 23/07/2019
 24259 00003D7D 83FB02                  	CMP	BX,2
 24260                                  	;JB	short NONE
 24261                                  	;JMP	short GETENT
 24262                                  	; 16/12/2022
 24263 00003D80 732B                    	jnb	short GETENT
 24264                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24265                                  	;JB	short NONE
 24266                                  	;JMP	short GETENT
 24267                                  NONE:
 24268 00003D82 F9                      	STC
 24269 00003D83 C3                      	retn
 24270                                  HAVIT:
 24271 00003D84 A3[4803]                	MOV	[LASTENT],AX
 24272 00003D87 F8                      	CLC
 24273                                  nextentry_retn:
 24274 00003D88 C3                      	retn
 24275                                  
 24276                                  SAMECLUS:
 24277 00003D89 881E[7305]              	MOV	[SECCLUSPOS],BL
 24278 00003D8D A3[4803]                	MOV	[LASTENT],AX
 24279 00003D90 1E                      	PUSH	DS
 24280 00003D91 C53E[E205]              	LDS	DI,[CURBUF]
 24281                                  	; 19/05/2019
 24282                                  	; MSDOS 6.0
 24283                                  	;;mov	dx,[di+8]
 24284                                  	; 23/09/2023
 24285                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24286                                  ;hkn; SS override
 24287                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24288                                  
 24289                                  ; 14/02/2024
 24290                                  %if 0
 24291                                  	; 23/09/2023
 24292                                  	mov	si,[di+BUFFINFO.buf_sector+2]
 24293                                  	
 24294                                  	;mov	dx,[di+6]
 24295                                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24296                                  
 24297                                  	;inc	dx ; MSDOS 3.3
 24298                                  	; MSDOS 6.0
 24299                                  	;ADD	DX,1				;AN000; >32mb
 24300                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24301                                  	; 23/09/2023
 24302                                  	inc	dx
 24303                                  	jnz	short nextexntry_fc
 24304                                  	inc	si
 24305                                  	;inc	word [SS:HIGH_SECTOR]
 24306                                  nextexntry_fc:
 24307                                  	; 23/09/2023
 24308                                  	mov	[SS:HIGH_SECTOR],si
 24309                                  	; MSDOS 3.3 & MSDOS 6.0
 24310                                  	POP	DS
 24311                                  %else
 24312                                  	; 14/02/2024 - Retro DOS v4.2
 24313 00003D95 C55506                  	lds	dx,[di+BUFFINFO.buf_sector]
 24314 00003D98 8CDE                    	mov	si,ds
 24315 00003D9A 1F                      	pop	ds
 24316 00003D9B 42                      	inc	dx
 24317 00003D9C 7501                    	jnz	short nextexntry_fc
 24318 00003D9E 46                      	inc	si
 24319                                  nextexntry_fc:
 24320 00003D9F 8936[0706]              	mov	[HIGH_SECTOR],si
 24321                                  %endif
 24322                                  
 24323 00003DA3 E868F8                  	call	FIRSTCLUSTER
 24324 00003DA6 31DB                    	XOR	BX,BX
 24325 00003DA8 EB21                    	JMP	short SETENTRY
 24326                                  
 24327                                  ;----------------------------------------------------------------------------
 24328                                  ;
 24329                                  ; Procedure Name : GETENTRY
 24330                                  ;
 24331                                  ; Inputs:
 24332                                  ;	[LASTENT] has directory entry
 24333                                  ;	ES:BP points to drive parameters
 24334                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24335                                  ; Function:
 24336                                  ;	Locates directory entry in preparation for search
 24337                                  ;	GETENT provides entry for passing desired entry in AX
 24338                                  ; Outputs:
 24339                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24340                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24341                                  ;	[LASTENT] = New directory entry number
 24342                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24343                                  ;	Carry set if error (currently user FAILed to I 24)
 24344                                  ;----------------------------------------------------------------------------
 24345                                  
 24346                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24347                                  GETENTRY:
 24348                                  	; 27/07/2018 - Retro DOS v3.0
 24349 00003DAA A1[4803]                	MOV	AX,[LASTENT]
 24350                                  
 24351                                  	;entry	GETENT
 24352                                  GETENT:
 24353 00003DAD A3[4803]                	MOV	[LASTENT],AX
 24354                                  ;
 24355                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24356                                  ; directory.
 24357                                  ;
 24358 00003DB0 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24359 00003DB2 D3C0                    	rol	ax,cl			; keep hight order bits
 24360 00003DB4 89C2                    	mov	dx,ax
 24361                                  	; 19/05/2019 - Retro DOS v4.0
 24362                                  	;and	ax,0FFE0h
 24363                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24364                                  	;and	ax,~(32-1)		; mask off high order bits
 24365                                  	; 16/12/2022
 24366 00003DB6 24E0                    	and	al,0E0h ; ~31
 24367 00003DB8 83E21F                  	and	dx,1Fh
 24368                                  	;and	dx,32-1			; mask off low order bits
 24369                                  ;
 24370                                  ; DX:AX contain the byte offset of the required directory entry from the
 24371                                  ; beginning of the directory. Convert this to a sector number. Round the
 24372                                  ; sector size down to a multiple of 32.
 24373                                  ;
 24374                                  	;mov	bx,[es:bp+2]
 24375 00003DBB 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24376 00003DBF 80E3E0                  	and	bl,0E0h
 24377                                  	;AND	BL,255-31		; Must be multiple of 32
 24378 00003DC2 F7F3                    	DIV	BX
 24379                                  	; 14/02/2024
 24380                                  	;MOV	BX,DX			; Position within sector
 24381                                  				; NOTE: This BX value is not used in DIRREAD
 24382                                  				; Erdogan Tan - 14/02/2024
 24383                                  	;PUSH	BX
 24384 00003DC4 52                      	push	dx
 24385                                  	;
 24386 00003DC5 E8F2F7                  	call	DIRREAD
 24387 00003DC8 5B                      	POP	BX
 24388                                  	;retc
 24389 00003DC9 72BD                    	jc	short nextentry_retn
 24390                                  SETENTRY:
 24391 00003DCB 8B16[E205]              	MOV	DX,[CURBUF]
 24392                                  	;add	dx,16 ; MSDOS 3.3
 24393                                  	;add	dx,20 ; MSDOS 6.0 
 24394 00003DCF 83C214                  	ADD	DX,BUFINSIZ
 24395 00003DD2 01D3                    	ADD	BX,DX
 24396                                  	;add	dx,[es:bp+2]
 24397 00003DD4 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24398                                  	; 29/12/2022
 24399                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24400 00003DD8 F8                      	clc
 24401 00003DD9 C3                      	retn
 24402                                  
 24403                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24404                                  ;----------------------------------------------------------------------------
 24405                                  ;
 24406                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24407                                  ;
 24408                                  ; Inputs:
 24409                                  ;	BX cluster number of start of directory
 24410                                  ;	ES:BP Points to DPB
 24411                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24412                                  ; Function:
 24413                                  ;	Set up a directory search
 24414                                  ; Outputs:
 24415                                  ;	[DIRSTART] = BX
 24416                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24417                                  ;	Carry set if error (currently user FAILed to I 24)
 24418                                  ; destroys AX,DX,BX
 24419                                  ;----------------------------------------------------------------------------
 24420                                  
 24421                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24422                                  SETDIRSRCH:
 24423 00003DDA 09DB                    	OR	BX,BX
 24424 00003DDC 7437                    	JZ	short SETROOTSRCH
 24425 00003DDE 891E[C205]              	MOV	[DIRSTART],BX
 24426                                  	;mov	al,[es:bp+4]
 24427 00003DE2 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24428 00003DE6 FEC0                    	INC	AL
 24429 00003DE8 A2[7705]                	MOV	[CLUSFAC],AL
 24430                                  
 24431                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24432                                  	;SAVE	<SI>
 24433 00003DEB 56                      	push	si
 24434                                  	;test	byte [FastOpenFlg],2
 24435 00003DEC F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24436 00003DF1 7507                    	JNZ	short UNP_OK
 24437                                  
 24438                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24439                                  	;invoke	UNPACK
 24440 00003DF3 E83316                  	call	UNPACK
 24441 00003DF6 7302                    	JNC	short UNP_OK
 24442                                  	;RESTORE <SI>
 24443 00003DF8 5E                      	pop	si
 24444                                  	;return
 24445 00003DF9 C3                      	retn
 24446                                  
 24447                                  UNP_OK:
 24448 00003DFA 893E[BC05]              	MOV	[CLUSNUM],DI
 24449 00003DFE 89DA                    	MOV	DX,BX
 24450 00003E00 30DB                    	XOR	BL,BL
 24451 00003E02 881E[7305]              	MOV	[SECCLUSPOS],BL
 24452                                  	;invoke	FIGREC
 24453 00003E06 E8DE0E                  	call	FIGREC
 24454                                  	;RESTORE <SI>
 24455 00003E09 5E                      	pop	si
 24456                                  	
 24457                                  	; 19/05/2019 - Retro DOS v4.0
 24458                                  
 24459                                  	; MSDOS 6.0
 24460                                  	;PUSH	DX			   ;AN000; >32mb
 24461                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24462                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24463                                  	;POP	DX			   ;AN000; >32mb
 24464                                  
 24465                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24466                                  	;push	dx
 24467                                  	;mov	dx,[HIGH_SECTOR]
 24468                                  	;mov	[DIRSEC+2],dx
 24469                                  	;pop	dx
 24470                                  	;MOV	[DIRSEC],dx
 24471                                  	; 16/12/2022
 24472 00003E0A A1[0706]                	mov	ax,[HIGH_SECTOR]
 24473 00003E0D A3[C005]                	mov	[DIRSEC+2],AX
 24474 00003E10 8916[BE05]              	MOV	[DIRSEC],DX
 24475                                  
 24476                                  	; 16/12/2022
 24477                                  	; cf=0 (at the return of FIGREC)
 24478                                  	;CLC
 24479 00003E14 C3                      	retn
 24480                                  
 24481                                  	;entry	SETROOTSRCH
 24482                                  SETROOTSRCH:
 24483 00003E15 31C0                    	XOR	AX,AX
 24484 00003E17 A3[C205]                	MOV	[DIRSTART],AX
 24485                                  	; 22/09/2023
 24486 00003E1A A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24487 00003E1D A2[7305]                	MOV	[SECCLUSPOS],AL
 24488 00003E20 48                      	DEC	AX
 24489 00003E21 A3[BC05]                	MOV	[CLUSNUM],AX
 24490                                  	;mov	ax,[es:bp+0Bh]
 24491 00003E24 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24492                                  	; 19/05/2019
 24493                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24494                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24495 00003E28 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24496 00003E2C 29D0                    	SUB	AX,DX
 24497 00003E2E A2[7705]                	MOV	[CLUSFAC],AL
 24498 00003E31 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24499                                  	; 22/09/2023
 24500                                  	; MSDOS 6.0
 24501                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24502 00003E35 F8                      	CLC
 24503 00003E36 C3                      	retn
 24504                                  
 24505                                  ;============================================================================
 24506                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24507                                  ;============================================================================
 24508                                  ; 27/07/2018 - Retro DOS v3.0
 24509                                  ; 19/05/2019 - Retro DOS v4.0 
 24510                                  
 24511                                  ;	TITLE	DIR2 - Directory and path cracking
 24512                                  ;	NAME	Dir2
 24513                                  
 24514                                  ;Break	<GETPATH -- PARSE A WFP>
 24515                                  ;----------------------------------------------------------------------------
 24516                                  ;
 24517                                  ; Procedure Name : GETPATH
 24518                                  ;
 24519                                  ; Inputs:
 24520                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24521                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24522                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24523                                  ;		( = -1 if current dir not involved, else
 24524                                  ;		 Points to first char after last "/" of current dir part)
 24525                                  ;	[THISCDS] Points to CDS being used
 24526                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24527                                  ;	[NoSetDir] set
 24528                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24529                                  ; Function:
 24530                                  ;	Crack the path
 24531                                  ; Outputs:
 24532                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24533                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24534                                  ;	ID1 field of [THISCDS] updated appropriately
 24535                                  ;	[ATTRIB] = [SATTRIB]
 24536                                  ;	ES:BP Points to DPB
 24537                                  ;	Carry set if bad path
 24538                                  ;	   SI Points to path element causing failure
 24539                                  ;	   Zero set
 24540                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24541                                  ;	      start a search on the last directory
 24542                                  ;	      CL is zero if there is a bad name in the path
 24543                                  ;	      CL is non-zero if the name was simply not found
 24544                                  ;		 [ENTFREE] may have free spot in directory
 24545                                  ;		 [NAME1] is the name.
 24546                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24547                                  ;	   Zero reset
 24548                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24549                                  ;		or path too long or malformed path
 24550                                  ;	ELSE
 24551                                  ;	   [CurBuf] = -1 if root directory
 24552                                  ;	   [CURBUF] contains directory record with match
 24553                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24554                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24555                                  ;	   AH = device ID
 24556                                  ;	      bit 7 of AH set if device SI and BX
 24557                                  ;	      will point DOSGROUP relative The firclus
 24558                                  ;	      field of the device entry contains the device pointer
 24559                                  ;	   [NAME1] Has name looked for
 24560                                  ;	   If last element is a directory zero is set and:
 24561                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24562                                  ;	      are set up to start a search on it.
 24563                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24564                                  ;	      like that for a file (except for zero flag)
 24565                                  ;	   If last element is a file zero is reset
 24566                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24567                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24568                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24569                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24570                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24571                                  ; DS preserved, Others destroyed
 24572                                  ;---------------------------------------------------------------------------
 24573                                  
 24574                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24575                                  ;hkn; DS already set up at this point.
 24576                                  
 24577                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24578                                  GETPATH:
 24579                                  	;mov	word [CREATING],0E500h
 24580 00003E37 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24581                                  
 24582                                  ; Same as GetPath only CREATING and DELALL already set
 24583                                  
 24584                                  	;entry	GetPathNoSet
 24585                                  GetPathNoSet:
 24586                                  	;mov	byte [EXTERR_LOCUS],2	
 24587 00003E3D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24588 00003E42 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24589                                  
 24590                                  ; See if the input indicates a device that has already been detected. If so,
 24591                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24592                                  
 24593 00003E48 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24594                                  	;cmp	word [DI+1],5C3Ah
 24595                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24596 00003E4C 817D013A5C              	cmp	word [DI+1],':\'
 24597 00003E51 7437                    	JZ	short CrackIt
 24598                                  
 24599                                  ; Let ChkDev find it in the device list
 24600                                  
 24601 00003E53 83C703                  	ADD	DI,3
 24602                                  	; 18/08/2018
 24603                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24604                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24605                                  	; 16/12/2022
 24606                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24607 00003E56 E89E00                  	CALL	CHKDEV
 24608 00003E59 722D                    	JC	short InternalError
 24609                                  
 24610                                  Build_devJ:
 24611 00003E5B A0[6D05]                	MOV	AL,[SATTRIB]
 24612 00003E5E A2[6B05]                	MOV	[ATTRIB],AL
 24613                                  	;mov	byte [EXTERR_LOCUS],1
 24614 00003E61 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24615                                  					; "finding" a char device
 24616                                  					; set LOCUS to Unknown. This makes
 24617                                  					; certain idiotic problems reported
 24618                                  					; by a certain 3 letter OEM go away.
 24619                                  
 24620                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24621                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24622                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24623                                  ; wfp into the share set.
 24624                                  ;
 24625                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24626                                  ; non-space seen +1.  This position is kept in DX.
 24627                                  
 24628                                  ;hkn; SS is DOSDATA
 24629 00003E66 16                      	push	ss
 24630 00003E67 07                      	pop	es
 24631                                  
 24632                                  ;hkn; NAME1 is in DOSDATA
 24633 00003E68 BE[4B05]                	mov	si,NAME1
 24634 00003E6B 8B3E[B205]              	mov	di,[WFP_START]
 24635 00003E6F 89FA                    	mov	dx,di
 24636 00003E71 B90800                  	mov	cx,8			; 8 chars in device name
 24637                                  MoveLoop:
 24638 00003E74 AC                      	lodsb
 24639 00003E75 AA                      	stosb
 24640 00003E76 3C20                    	cmp	al," "
 24641 00003E78 7402                    	jz	short NoSave
 24642                                  
 24643 00003E7A 89FA                    	mov	dx,di
 24644                                  NoSave:
 24645 00003E7C E2F6                    	loop	MoveLoop
 24646                                  
 24647                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24648                                  ; at this point.
 24649                                  
 24650 00003E7E 89D7                    	mov	di,dx
 24651                                  	;mov	byte [di],0		; end of string
 24652                                  	; 15/02/2024
 24653 00003E80 880D                    	mov	[di],cl ; 0
 24654 00003E82 E8B402                  	call	Build_device_ent	; Clears carry sets zero
 24655 00003E85 FEC0                    	INC	AL			; reset zero
 24656 00003E87 C3                      	retn
 24657                                  
 24658                                  InternalError:
 24659                                  InternalError_loop:
 24660 00003E88 EBFE                    	JMP	short InternalError_loop ; freeze
 24661                                  
 24662                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24663                                  
 24664                                  CrackIt:
 24665                                  ; 15/02/2024
 24666                                  %if 0
 24667                                  	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24668                                  	CMP	SI,-1			; valid?
 24669                                  	JNZ	short LOOK_SING		; Yes, use it.
 24670                                  	LEA	SI,[DI+3]		; skip D:\.
 24671                                  LOOK_SING:
 24672                                  %endif
 24673                                  	;mov	byte [ATTRIB],16h
 24674 00003E8A C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24675                                  					; Attributes to search through Dirs
 24676 00003E8F C43E[A205]              	LES	DI,[THISCDS]
 24677 00003E93 B8FFFF                  	MOV	AX,-1
 24678                                  	;mov	bx,[es:di+73]
 24679 00003E96 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24680 00003E9A 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24681                                  
 24682                                  ; AX = -1
 24683                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24684                                  ;      has been uncertainly changed.
 24685                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24686                                  ;      may be -1 if no current directory part has been used.
 24687                                  
 24688 00003E9E 39C6                    	CMP	SI,AX			; if Current directory is not part
 24689 00003EA0 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24690 00003EA2 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24691                                  
 24692                                  ; DOS 3.3  6/25/86
 24693 00003EA4 7437                    	JZ	short NO_CURR_D		; no, crack from the root
 24694                                  	;test	byte [FastOpenFlg],1
 24695 00003EA6 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24696 00003EAB 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24697 00003EAD 06                      	PUSH	ES			; save registers
 24698 00003EAE 57                      	PUSH	DI
 24699 00003EAF 51                      	PUSH	CX
 24700 00003EB0 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24701 00003EB3 56                      	PUSH	SI
 24702 00003EB4 53                      	PUSH	BX
 24703                                  
 24704 00003EB5 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24705 00003EB9 8B36[B205]              	MOV	SI,[WFP_START]
 24706                                  
 24707                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24708 00003EBD BB[300D]                	MOV	BX,FastOpenTable
 24709 00003EC0 BF[460D]                	MOV	DI,Dir_Info_Buff
 24710 00003EC3 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24711                                  	;mov	al,1
 24712 00003EC6 B001                    	MOV	AL,FONC_Look_up
 24713 00003EC8 1E                      	PUSH	DS
 24714 00003EC9 07                      	POP	ES
 24715                                  	;call	far [BX+2]
 24716 00003ECA FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24717 00003ECD 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24718                                  					; Go to Got_Srch_cluster
 24719                                  	; 29/12/2022
 24720                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24721                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24722                                  	;stc
 24723                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24724                                  
 24725 00003ECF 803C01                  	cmp	byte [si],1
 24726                                  GO_Chk_end1:	; 29/12/2022
 24727 00003ED2 F5                      	cmc 
 24728                                  	; [si] = 0 -> cf = 0
 24729                                  	; [si] > 0 -> cf = 1
 24730                                  
 24731                                  ;GO_Chk_end1:
 24732                                  	; 29/12/2022
 24733                                  	;clc
 24734                                  
 24735                                  GO_Chk_end:				; restore registers
 24736 00003ED3 5B                      	POP	BX
 24737 00003ED4 5E                      	POP	SI
 24738 00003ED5 8F44FF                  	POP	word [SI-1]
 24739 00003ED8 59                      	POP	CX
 24740 00003ED9 5F                      	POP	DI
 24741 00003EDA 07                      	POP	ES
 24742 00003EDB 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24743                                  
 24744                                  ; DOS 3.3  6/25/86
 24745                                  ;
 24746                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24747                                  ; of path and go crack from root.
 24748                                  
 24749                                  NO_CURR_D:
 24750 00003EDD 8B36[B205]              	MOV	SI,[WFP_START]
 24751                                  	;LEA	SI,[SI+3]		; Skip "d:/"
 24752                                  	; 15/02/2024
 24753 00003EE1 83C603                  	add	si,3
 24754 00003EE4 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24755 00003EE8 EB3B                    	JMP	short ROOTPATH
 24756                                  
 24757                                  ; We are able to crack from the current directory part. Go set up for search
 24758                                  ; of specified cluster.
 24759                                  
 24760                                  GOT_SEARCH_CLUSTER:
 24761 00003EEA C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24762 00003EEE E8E9FE                  	call	SETDIRSRCH
 24763                                  	;JC	short SETFERR
 24764                                  	;JMP	short FINDPATH
 24765                                  	; 16/12/2022
 24766 00003EF1 7342                    	jnc	short FINDPATH ; 17/08/2018
 24767                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24768                                  	;JC	short SETFERR
 24769                                  	;JMP	short FINDPATH
 24770                                  SETFERR:
 24771 00003EF3 30C9                    	XOR	CL,CL			; set zero
 24772 00003EF5 F9                      	STC
 24773 00003EF6 C3                      	retn
 24774                                  
 24775                                  ;---------------------------------------------------------------------------
 24776                                  ;
 24777                                  ; Procedure Name : ChkDev
 24778                                  ;
 24779                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24780                                  ;   device.
 24781                                  ; Blasts CX,SI,DI,AX,BX
 24782                                  ;---------------------------------------------------------------------------
 24783                                  
 24784                                  CHKDEV:
 24785 00003EF7 89FE                    	MOV	SI,DI
 24786 00003EF9 8CD7                    	MOV	DI,SS
 24787 00003EFB 8EC7                    	MOV	ES,DI
 24788                                  
 24789 00003EFD BF[4B05]                	MOV	DI,NAME1
 24790 00003F00 B90900                  	MOV	CX,9
 24791                                  TESTLOOP:
 24792 00003F03 E83010                  	call	GETLET
 24793                                  
 24794 00003F06 3C2E                    	CMP	AL,'.'
 24795 00003F08 740E                    	JZ	short TESTDEVICE
 24796 00003F0A E87F10                  	call	PATHCHRCMP
 24797 00003F0D 7407                    	JZ	short NOTDEV
 24798 00003F0F 08C0                    	OR	AL,AL
 24799 00003F11 7405                    	JZ	short TESTDEVICE
 24800                                  
 24801 00003F13 AA                      	STOSB
 24802 00003F14 E2ED                    	LOOP	TESTLOOP
 24803                                  NOTDEV:
 24804 00003F16 F9                      	STC
 24805 00003F17 C3                      	retn
 24806                                  
 24807                                  TESTDEVICE:
 24808                                  	;ADD	CX,2
 24809                                  	; 24/09/2023
 24810 00003F18 41                      	inc	cx
 24811 00003F19 41                      	inc	cx
 24812 00003F1A B020                    	MOV	AL,' '
 24813 00003F1C F3AA                    	REP	STOSB
 24814 00003F1E 8CD0                    	MOV	AX,SS
 24815 00003F20 8ED8                    	MOV	DS,AX
 24816                                  	;call	DEVNAME
 24817                                  	;retn
 24818                                  	; 18/12/2022
 24819 00003F22 E9B501                  	jmp	DEVNAME
 24820                                  
 24821                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24822                                  ;----------------------------------------------------------------------------
 24823                                  ;
 24824                                  ; Procedure Name : ROOTPATH,FINDPATH
 24825                                  ;
 24826                                  ; Inputs:
 24827                                  ;	Same as FINDPATH but,
 24828                                  ;	SI Points to asciz string of path which is assumed to start at
 24829                                  ;		the root (no leading '/').
 24830                                  ; Function:
 24831                                  ;	Search from root for path
 24832                                  ; Outputs:
 24833                                  ;	Same as FINDPATH but:
 24834                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24835                                  ;	[NoSetDir] is ignored.
 24836                                  ;----------------------------------------------------------------------------
 24837                                  
 24838                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24839                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24840                                  
 24841                                  ROOTPATH:
 24842 00003F25 E8EDFE                  	call	SETROOTSRCH
 24843                                  	; 24/09/2023
 24844 00003F28 30E4                    	xor	ah,ah
 24845                                  	;CMP	BYTE [SI],0
 24846 00003F2A 3824                    	cmp	[si],ah ; 0
 24847 00003F2C 7507                    	JNZ	short FINDPATH
 24848                                  
 24849                                  ; Root dir specified
 24850 00003F2E A0[6D05]                	MOV	AL,[SATTRIB]
 24851 00003F31 A2[6B05]                	MOV	[ATTRIB],AL
 24852                                  	; 24/09/2023
 24853                                  	;XOR	AH,AH			; Sets "device ID" byte, sets zero
 24854                                  					; (dir), clears carry.
 24855 00003F34 C3                      	retn
 24856                                  
 24857                                  ; Inputs:
 24858                                  ;	[ATTRIB] Set to get through directories
 24859                                  ;	[SATTRIB] Set to find last element
 24860                                  ;	ES:BP Points to DPB
 24861                                  ;	SI Points to asciz string of path (no leading '/').
 24862                                  ;	[SECCLUSPOS] = 0
 24863                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24864                                  ;	[CLUSNUM] = Cluster # of next cluster
 24865                                  ;	[CLUSFAC] = Sectors per cluster
 24866                                  ;	[NoSetDir] set
 24867                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24868                                  ;		( = -1 if current dir not involved, else
 24869                                  ;		 Points to first char after last "/" of current dir part)
 24870                                  ;	[THISCDS] Points to CDS being used
 24871                                  ;	[CREATING] and [DELALL] set
 24872                                  ; Function:
 24873                                  ;	Parse path name
 24874                                  ; Outputs:
 24875                                  ;	ID1 field of [THISCDS] updated appropriately
 24876                                  ;	[ATTRIB] = [SATTRIB]
 24877                                  ;	ES:BP Points to DPB
 24878                                  ;	[THISDPB] = ES:BP
 24879                                  ;	Carry set if bad path
 24880                                  ;	   SI Points to path element causing failure
 24881                                  ;	   Zero set
 24882                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24883                                  ;	      start a search on the last directory
 24884                                  ;	      CL is zero if there is a bad name in the path
 24885                                  ;	      CL is non-zero if the name was simply not found
 24886                                  ;		 [ENTFREE] may have free spot in directory
 24887                                  ;		 [NAME1] is the name.
 24888                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24889                                  ;	   Zero reset
 24890                                  ;	      File in middle of path or bad name in path
 24891                                  ;		or path too long or malformed path
 24892                                  ;	ELSE
 24893                                  ;	   [CURBUF] contains directory record with match
 24894                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24895                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24896                                  ;	   [NAME1] Has name looked for
 24897                                  ;	   AH = device ID
 24898                                  ;	      bit 7 of AH set if device SI and BX
 24899                                  ;	      will point DOSGROUP relative The firclus
 24900                                  ;	      field of the device entry contains the device pointer
 24901                                  ;	   If last element is a directory zero is set and:
 24902                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24903                                  ;	      are set up to start a search on it,
 24904                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24905                                  ;	      like that for a file (except for zero flag)
 24906                                  ;	   If last element is a file zero is reset
 24907                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24908                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24909                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24910                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24911                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24912                                  ; Destroys all other registers
 24913                                  
 24914                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24915                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24916                                  
 24917                                  	; 15/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 24918                                  	; DOSCODE:7F93h (MSDOS 6.22, MSDOS.SYS)
 24919                                  
 24920                                      	;entry	FINDPATH
 24921                                  FINDPATH:
 24922 00003F35 06                      	PUSH	ES			; Save ES:BP
 24923 00003F36 56                      	PUSH	SI
 24924 00003F37 89F7                    	MOV	DI,SI
 24925 00003F39 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24926 00003F3D 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24927 00003F42 740E                    	JZ	short NOIDS		; No current dir part
 24928 00003F44 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24929 00003F48 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24930 00003F4A C43E[A205]              	LES	DI,[THISCDS]
 24931                                  	;mov	[es:di+73],cx
 24932 00003F4E 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory cluster
 24933                                  NOIDS:
 24934                                  
 24935                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24936                                  ; character in the string. CX,DI may be destroyed.
 24937                                  ;
 24938                                  ;	invoke	NAMETRANS
 24939                                  ;	MOV	CL,AL
 24940                                  ;
 24941                                  ; The above is the slow method. The name has *already* been munged by
 24942                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24943                                  ; the name until ., \ or 0 is hit.
 24944                                  
 24945                                  	;MOV	AX,SS
 24946                                  	;MOV	ES,AX
 24947                                  	; 15/02/2024 - Retro DOS v4.2
 24948 00003F52 16                      	push	ss
 24949 00003F53 07                      	pop	es
 24950                                  
 24951                                  ;hkn; Name1 is in DOSDATA
 24952 00003F54 BF[4B05]                	MOV	DI,NAME1
 24953 00003F57 B82020                  	MOV	AX,'  ' ; 2020h
 24954 00003F5A AA                      	STOSB
 24955 00003F5B AB                      	STOSW
 24956 00003F5C AB                      	STOSW
 24957 00003F5D AB                      	STOSW
 24958 00003F5E AB                      	STOSW
 24959 00003F5F AB                      	STOSW
 24960                                  
 24961                                  ;hkn; Name1 is in DOSDATA
 24962 00003F60 BF[4B05]                	MOV	DI,NAME1
 24963 00003F63 30E4                    	XOR	AH,AH			; bits for CL
 24964                                  GetNam:
 24965                                  	; 19/05/2019 - Retro DOS v4.0
 24966                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24967                                  
 24968                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24969                                  	; 16/12/2022
 24970                                  	;inc	cl ; not required !	
 24971                                  	
 24972 00003F65 AC                      	LODSB
 24973 00003F66 3C2E                    	CMP	AL,'.'	; 2Eh
 24974 00003F68 7412                    	JZ	short _SetExt
 24975 00003F6A 08C0                    	OR	AL,AL
 24976 00003F6C 7424                    	JZ	short _GetDone
 24977 00003F6E 3C5C                    	CMP	AL,'\'	; 5Ch
 24978 00003F70 7420                    	JZ	short _GetDone
 24979 00003F72 3C3F                    	CMP	AL,'?'	; 3Fh
 24980 00003F74 7503                    	JNZ	short StoNam
 24981 00003F76 80CC01                  	OR	AH,1
 24982                                  StoNam: 
 24983 00003F79 AA                      	STOSB
 24984 00003F7A EBE9                    	JMP	short GetNam
 24985                                  _SetExt:
 24986 00003F7C BF[5305]                	MOV	DI,NAME1+8
 24987                                  GetExt:
 24988 00003F7F AC                      	LODSB
 24989 00003F80 08C0                    	OR	AL,AL
 24990 00003F82 740E                    	JZ	short _GetDone
 24991 00003F84 3C5C                    	CMP	AL,'\'
 24992 00003F86 740A                    	JZ	short _GetDone
 24993 00003F88 3C3F                    	CMP	AL,'?'
 24994 00003F8A 7503                    	JNZ	short StoExt
 24995 00003F8C 80CC01                  	OR	AH,1
 24996                                  StoExt: 
 24997 00003F8F AA                      	STOSB
 24998 00003F90 EBED                    	JMP	short GetExt
 24999                                  _GetDone:
 25000 00003F92 4E                      	DEC	SI
 25001 00003F93 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 25002 00003F95 80C980                  	OR	CL,80H
 25003 00003F98 5F                      	POP	DI			; Start of this element
 25004 00003F99 07                      	POP	ES			; Restore ES:BP
 25005 00003F9A 39FE                    	CMP	SI,DI
 25006 00003F9C 7503                    	JNZ	short check_device
 25007 00003F9E E9E000                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 25008                                  check_device:
 25009 00003FA1 56                      	PUSH	SI			; Start of next element
 25010                                  	;MOV	AL,[SI]
 25011                                  	; 15/02/2024
 25012 00003FA2 08C0                    	OR	AL,AL
 25013                                  	; 23/09/2023
 25014                                  	;cmp	byte [si],0
 25015 00003FA4 7508                    	JNZ	short NOT_LAST
 25016                                  
 25017                                  ; for last element of the path switch to the correct search attributes
 25018                                  
 25019 00003FA6 8A3E[6D05]              	MOV	BH,[SATTRIB]
 25020 00003FAA 883E[6B05]              	MOV	[ATTRIB],BH
 25021                                  
 25022                                  NOT_LAST:
 25023                                  
 25024                                  ; check name1 to see if we have a device...
 25025                                  
 25026 00003FAE 06                      	PUSH	ES			; Save ES:BP
 25027                                  
 25028                                  ;hkn; SS is DOSDATA
 25029                                  	;context ES
 25030 00003FAF 16                      	push	ss
 25031 00003FB0 07                      	pop	es
 25032 00003FB1 E82601                  	call	DEVNAME 		; blast BX
 25033 00003FB4 07                      	POP	ES			; Restore ES:BP
 25034 00003FB5 720B                    	JC	short FindFile		; Not a device
 25035 00003FB7 08C0                    	OR	AL,AL			; Test next char again
 25036 00003FB9 7403                    	JZ	short GO_BDEV
 25037 00003FBB E9C700                  	JMP	FILEINPATH		; Device name in middle of path
 25038                                  
 25039                                  GO_BDEV:
 25040 00003FBE 5E                      	POP	SI			; Points to NUL at end of path
 25041 00003FBF E999FE                  	JMP	Build_devJ
 25042                                  
 25043                                  FindFile:
 25044                                  ;;;; 7/28/86
 25045 00003FC2 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 25046 00003FC7 7505                    	JNZ	short NOE5		; no
 25047 00003FC9 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 25048                                  NOE5:
 25049                                  ;;;; 7/28/86
 25050 00003FCE 57                      	PUSH	DI			; Start of this element
 25051 00003FCF 06                      	PUSH	ES			; Save ES:BP
 25052 00003FD0 51                      	PUSH	CX			; CL return from NameTrans
 25053                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25054                                  
 25055 00003FD1 E88F02                  	CALL	LookupPath		; call fastopen to get dir entry
 25056 00003FD4 7303                    	JNC	short DIR_FOUND		; found dir entry
 25057                                  
 25058                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25059 00003FD6 E8C7FC                  	call	FINDENTRY
 25060                                  DIR_FOUND:
 25061 00003FD9 59                      	POP	CX
 25062 00003FDA 07                      	POP	ES
 25063 00003FDB 5F                      	POP	DI
 25064 00003FDC 7303                    	JNC	short LOAD_BUF
 25065 00003FDE E9C900                  	JMP	BADPATHPOP
 25066                                  
 25067                                  LOAD_BUF:
 25068 00003FE1 C53E[E205]              	LDS	DI,[CURBUF]
 25069                                  	;test	byte [bx+0Bh],10h
 25070 00003FE5 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 25071 00003FE9 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 25072 00003FEB E99700                  	JMP	FILEINPATH		; Error or end of path
 25073                                  
 25074                                  ; if we are not setting the directory, then check for end of string
 25075                                  
 25076                                  GO_NEXT:
 25077                                  ;hkn; SS override
 25078 00003FEE 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 25079 00003FF4 7423                    	JZ	short SetDir
 25080 00003FF6 89FA                    	MOV	DX,DI			; Save pointer to entry
 25081 00003FF8 8CD9                    	MOV	CX,DS
 25082                                  
 25083                                  ;hkn; SS is DOSDATA
 25084                                  	;context DS
 25085 00003FFA 16                      	push	ss
 25086 00003FFB 1F                      	pop	ds
 25087 00003FFC 5F                      	POP	DI			; Start of next element
 25088                                  	; 19/05/2019 - Retro DOS v4.0
 25089                                  	; MSDOS 6.0
 25090 00003FFD F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25091 00004002 740B                    	JZ	short _nofast			; the FastOpen
 25092 00004004 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 25093 00004009 7404                    	JZ	short _nofast			; no
 25094 0000400B 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 25095                                  _nofast:
 25096 0000400F 803D00                  	CMP	BYTE [DI],0
 25097                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 25098                                  	;;JMP	_SETRET  ; retn		; Got it
 25099                                  	;retn	; 05/09/2018
 25100                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25101                                  	;jmp	_SETRET
 25102                                  	; 16/12/2022
 25103 00004012 7421                    	jz	short _SETRET
 25104                                  
 25105                                  NEXT_ONE:
 25106 00004014 57                      	PUSH	DI			; Put start of next element back on stack
 25107 00004015 89D7                    	MOV	DI,DX
 25108 00004017 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 25109                                  SetDir:
 25110 00004019 8B14                    	MOV	DX,[SI] 		; Dir_first
 25111                                  
 25112                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25113 0000401B 1E                      	PUSH	DS		      ; save [curbuf+2]
 25114                                  ;hkn; SS is DOSDATA
 25115 0000401C 16                      	push	ss
 25116 0000401D 1F                      	pop	ds		      ; set DS Dosgroup
 25117                                  	;test	byte [FastOpenFlg],2
 25118 0000401E F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25119 00004023 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 25120 00004025 89D3                    	MOV	BX,DX		      ; not found
 25121 00004027 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 25122 0000402B 50                      	PUSH	AX		      ; save device id (AH)
 25123 0000402C E8ABFD                  	call	SETDIRSRCH
 25124 0000402F 58                      	POP	AX		      ; restore device id (AH)
 25125 00004030 83C402                  	ADD	SP,2		      ; pop ds in stack
 25126 00004033 EB36                    	JMP	short FAST_OPEN_SKIP
 25127                                  
 25128                                  	; 16/12/2022
 25129                                  _SETRET:
 25130 00004035 C3                      	retn
 25131                                  
 25132                                  DO_NORMAL:
 25133 00004036 1F                      	POP	DS			; DS = [curbuf + 2]
 25134                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25135                                  
 25136 00004037 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 25137 00004039 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 25138 0000403B 53                      	PUSH	BX
 25139 0000403C 50                      	PUSH	AX
 25140 0000403D 56                      	PUSH	SI
 25141 0000403E 51                      	PUSH	CX
 25142                                  
 25143                                  ; 16/02/2024
 25144                                  %if 0
 25145                                  	;push	word [di+6]
 25146                                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 25147                                  	; 19/05/2019
 25148                                  	; MSDOS 6.0
 25149                                  	;push	word [di+8]
 25150                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 25151                                  %else	
 25152                                  	; 16/02/2024
 25153                                  	;lds	bx,[di+6]
 25154 0000403F C55D06                  	lds	bx,[di+BUFFINFO.buf_sector]
 25155 00004042 53                      	push	bx
 25156 00004043 1E                      	push	ds
 25157                                  %endif
 25158                                  
 25159 00004044 89D3                    	MOV	BX,DX
 25160                                  
 25161                                  ;hkn; SS is DOSDATA
 25162                                  	;context DS
 25163 00004046 16                      	push	ss
 25164 00004047 1F                      	pop	ds
 25165                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 25166 00004048 E88FFD                  	call	SETDIRSRCH		; the entry sector buffer
 25167                                  	; 19/05/2019
 25168                                  	; MSDOS 6.0
 25169 0000404B 8F06[0706]              	POP	word [HIGH_SECTOR]
 25170 0000404F 5A                      	POP	DX
 25171 00004050 7203                    	JC	short SKIP_GETB
 25172                                  	; 22/09/2023
 25173                                  	;;mov	byte [ALLOWED],18h
 25174                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 25175                                  	;XOR	AL,AL ; *
 25176                                  	;;invoke GETBUFFR		; Get the entry buffer back
 25177                                  	;call	GETBUFFR
 25178 00004052 E8DF17                  	call	GETBUFFER ; * ; pre-read
 25179                                  SKIP_GETB:
 25180 00004055 59                      	POP	CX
 25181 00004056 5E                      	POP	SI
 25182 00004057 58                      	POP	AX
 25183 00004058 5B                      	POP	BX
 25184 00004059 7305                    	JNC	short SET_THE_BUF
 25185 0000405B 5F                      	POP	DI			; Start of next element
 25186 0000405C 89FE                    	MOV	SI,DI			; Point with SI
 25187 0000405E EB21                    	JMP	SHORT _BADPATH
 25188                                  
 25189                                  SET_THE_BUF:
 25190 00004060 E8B0F5                  	call	SET_BUF_AS_DIR
 25191 00004063 8B3E[E205]              	MOV	DI,[CURBUF]
 25192 00004067 01FE                    	ADD	SI,DI			; Get the offsets back
 25193 00004069 01FB                    	ADD	BX,DI
 25194                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25195                                  FAST_OPEN_SKIP:
 25196 0000406B 5F                      	POP	DI			; Start of next element
 25197 0000406C E89802                  	CALL	InsertPath		; insert dir entry info
 25198                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25199 0000406F 8A05                    	MOV	AL,[DI]
 25200 00004071 08C0                    	OR	AL,AL
 25201 00004073 74C0                    	JZ	short _SETRET		; At end
 25202 00004075 47                      	INC	DI			; Skip over "/"
 25203 00004076 89FE                    	MOV	SI,DI			; Point with SI
 25204 00004078 E8110F                  	call	PATHCHRCMP
 25205 0000407B 7503                    	JNZ	short find_bad_name	; oops
 25206 0000407D E9B5FE                  	JMP	FINDPATH		; Next element
 25207                                  
 25208                                  find_bad_name:
 25209 00004080 4E                      	DEC	SI			; Undo above INC to get failure point
 25210                                  _BADPATH:
 25211 00004081 30C9                    	XOR	CL,CL			; Set zero
 25212 00004083 EB2C                    	JMP	SHORT BADPRET
 25213                                  
 25214                                  FILEINPATH:
 25215 00004085 5F                      	POP	DI			; Start of next element
 25216                                  
 25217                                  ;hkn; SS is DOSDATA
 25218                                  	;context DS			; Got to from one place with DS gone
 25219 00004086 16                      	push	ss
 25220 00004087 1F                      	pop	ds
 25221                                  
 25222                                  ; DOS 3.3 FastOpen
 25223                                  	;test	byte [FastOpenFlg],1
 25224 00004088 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25225 0000408D 740B                    	JZ	short NO_FAST		; device info to fastopen
 25226                                  	;test	byte [FastOpenFlg],2
 25227 0000408F F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25228 00004094 7404                    	JZ	short NO_FAST
 25229 00004096 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25230                                  					 ; success
 25231                                  NO_FAST:
 25232                                  ; DOS 3.3 FastOpen
 25233 0000409A 8A05                    	MOV	AL,[DI]
 25234 0000409C 08C0                    	OR	AL,AL
 25235 0000409E 7404                    	JZ	short INCRET
 25236 000040A0 89FE                    	MOV	SI,DI			; Path too long
 25237 000040A2 EB0D                    	JMP	SHORT BADPRET
 25238                                  
 25239                                  INCRET:
 25240                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25241                                  
 25242 000040A4 E86002                  	CALL   InsertPath		; insert dir entry info
 25243                                  
 25244                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25245 000040A7 FEC0                    	INC	AL			; Reset zero
 25246                                  	; 16/12/2022	
 25247                                  ;_SETRET:
 25248 000040A9 C3                      	retn
 25249                                  
 25250                                  BADPATHPOP:
 25251 000040AA 5E                      	POP	SI			; Start of next element
 25252 000040AB 8A04                    	MOV	AL,[SI]
 25253 000040AD 89FE                    	MOV	SI,DI			; Start of bad element
 25254 000040AF 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25255                                  BADPRET:
 25256 000040B1 A0[6D05]                	MOV	AL,[SATTRIB]
 25257 000040B4 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25258 000040B7 F9                      	STC
 25259 000040B8 C3                      	retn
 25260                                  
 25261                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25262                                  ;---------------------------------------------------------------------------
 25263                                  ;
 25264                                  ; Procedure Name : STARTSRCH
 25265                                  ;
 25266                                  ; Inputs:
 25267                                  ;	[THISDPB] Set
 25268                                  ; Function:
 25269                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25270                                  ; Outputs:
 25271                                  ;	ES:BP = Drive parameters
 25272                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25273                                  ; Destroys ES,BP,AX
 25274                                  ;--------------------------------------------------------------------------
 25275                                  
 25276                                  STARTSRCH:
 25277 000040B9 C42E[8A05]              	LES	BP,[THISDPB]
 25278 000040BD 31C0                    	XOR	AX,AX
 25279 000040BF A3[4803]                	MOV	[LASTENT],AX
 25280 000040C2 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25281 000040C5 48                      	DEC	AX
 25282 000040C6 A3[D805]                	MOV	[ENTFREE],AX
 25283 000040C9 A3[DA05]                	MOV	[ENTLAST],AX
 25284 000040CC C3                      	retn
 25285                                  
 25286                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25287                                  ;----------------------------------------------------------------------------
 25288                                  ; Procedure Name : MatchAttributes
 25289                                  ;
 25290                                  ; Input:    [Attrib] = attribute to search for
 25291                                  ;	    CH = found attribute
 25292                                  ; Output:   JZ <match>
 25293                                  ;	    JNZ <nomatch>
 25294                                  ; Registers modified: noneski
 25295                                  ;----------------------------------------------------------------------------
 25296                                  
 25297                                  MatchAttributes:
 25298 000040CD 50                      	PUSH	AX
 25299                                  
 25300                                  ;hkn; SS override
 25301 000040CE 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25302 000040D2 F6D0                    	NOT	AL			; AL <- SearchSet'
 25303 000040D4 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25304                                  	;and	al,16h
 25305 000040D6 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25306                                  ;
 25307                                  ; the result is non-zero if an attribute is not in the search set
 25308                                  ; and in the found set and in the important set. This means that we do not
 25309                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25310                                  ;
 25311 000040D8 58                      	POP	AX
 25312 000040D9 C3                      	retn
 25313                                  
 25314                                  ; 19/05/2019 - Retro DOS v4.0
 25315                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25316                                  
 25317                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25318                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25319                                  
 25320                                  ;Break <DevName - Look for name of device>
 25321                                  ;---------------------------------------------------------------------------
 25322                                  ;
 25323                                  ; Procedure Name : DevName
 25324                                  ;
 25325                                  ; Inputs:
 25326                                  ;	DS,ES:DOSDATA
 25327                                  ;	Filename in NAME1
 25328                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25329                                  ; Function:
 25330                                  ;	Determine if file is in list of I/O drivers
 25331                                  ; Outputs:
 25332                                  ;	Carry set if not a device
 25333                                  ;	ELSE
 25334                                  ;	Zero flag set
 25335                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25336                                  ;	     bits 0-4 set from low byte of attribute word
 25337                                  ;	DEVPT = DWORD pointer to Device header of device
 25338                                  ; BX destroyed, others preserved
 25339                                  ;---------------------------------------------------------------------------
 25340                                  
 25341                                  DEVNAME:
 25342                                  	; 28/07/2018 - Retro DOS v3.0
 25343                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25344                                  
 25345 000040DA 56                      	PUSH	SI
 25346 000040DB 57                      	PUSH	DI
 25347 000040DC 51                      	PUSH	CX
 25348 000040DD 50                      	PUSH	AX
 25349                                  
 25350                                  ; E5 special code
 25351 000040DE FF36[4B05]              	PUSH	WORD [NAME1]
 25352 000040E2 803E[4B05]05            	CMP	byte [NAME1],5
 25353 000040E7 7505                    	JNZ	short NOKTR
 25354 000040E9 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25355                                  NOKTR:
 25356                                  	;test	byte [ATTRIB],8
 25357 000040EE F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25358                                  					; If looking for VOL id don't find devs
 25359 000040F3 7521                    	JNZ	short RET31
 25360                                  
 25361                                  ;hkn; NULDEV is in DOSDATA
 25362 000040F5 BE[4800]                	MOV	SI,NULDEV
 25363                                  LOOKIO:
 25364                                  	; 21/11/2022
 25365                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25366                                  	; 17/12/2022
 25367                                  	;test	byte [si+5],80h
 25368 000040F8 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25369                                  	;;test	word [si+4],8000h
 25370                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25371 000040FC 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25372 000040FE 89F0                    	MOV	AX,SI
 25373                                  	;add	si,10
 25374 00004100 83C60A                  	ADD	SI,SYSDEV.NAME
 25375                                  
 25376                                  ;hkn; NAME1 is in DOSDATA
 25377 00004103 BF[4B05]                	MOV	DI,NAME1
 25378 00004106 B90400                  	MOV	CX,4			; All devices are 8 letters
 25379 00004109 F3A7                    	REPE	CMPSW			; Check for name in list
 25380 0000410B 89C6                    	MOV	SI,AX
 25381 0000410D 7415                    	JZ	short IOCHK		; Found it?
 25382                                  SKIPDEV:
 25383 0000410F C534                    	LDS	SI,[SI]			; Get address of next device
 25384 00004111 83FEFF                  	CMP	SI,-1			; At end of list?
 25385 00004114 75E2                    	JNZ	short LOOKIO
 25386                                  RET31:	
 25387 00004116 F9                      	STC				; Not found
 25388                                  RETNV:	
 25389 00004117 8CD1                    	MOV	CX,SS
 25390 00004119 8ED9                    	MOV	DS,CX
 25391                                  
 25392 0000411B 8F06[4B05]              	POP	WORD [NAME1]
 25393 0000411F 58                      	POP	AX
 25394 00004120 59                      	POP	CX
 25395 00004121 5F                      	POP	DI
 25396 00004122 5E                      	POP	SI
 25397 00004123 C3                      	RETN
 25398                                  
 25399                                  IOCHK:
 25400                                  ;hkn; SS override for DEVPT
 25401 00004124 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25402                                  	;mov	bh,[si+4]
 25403 00004129 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25404 0000412C 80CFC0                  	OR	BH,0C0h
 25405 0000412F 80E7DF                  	and	bh,0DFh
 25406                                  	;AND	BH,~(020h)		; Clears Carry
 25407 00004132 368936[9A05]            	MOV	[SS:DEVPT],SI
 25408 00004137 EBDE                    	JMP	short RETNV
 25409                                  
 25410                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25411                                  ;---------------------------------------------------------------------------
 25412                                  ; Procedure Name : Build_device_ent
 25413                                  ;
 25414                                  ; Inputs:
 25415                                  ;	[NAME1] has name
 25416                                  ;	BH is attribute field (supplied by DEVNAME)
 25417                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25418                                  ; Function:
 25419                                  ;	Build a directory entry for a device at DEVFCB
 25420                                  ; Outputs:
 25421                                  ;	BX points to DEVFCB
 25422                                  ;	SI points to dir_first field
 25423                                  ;	AH = input BH
 25424                                  ;	AL = 0
 25425                                  ;	dir_first = DEVPT
 25426                                  ;	Zero Set, Carry Clear
 25427                                  ; DS,ES,BP preserved, others destroyed
 25428                                  ;--------------------------------------------------------------------------
 25429                                  
 25430                                  Build_device_ent:
 25431 00004139 B82020                  	MOV	AX,"  " ; 2020h
 25432                                  
 25433                                  ;hkn; DEVFCB is in DOSDATA
 25434 0000413C BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25435                                  
 25436                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25437                                  
 25438 0000413F AB                      	STOSW
 25439 00004140 AA                      	STOSB				; Blank out extent field
 25440                                  	;mov	al,40h
 25441 00004141 B040                    	MOV	AL,attr_device
 25442                                  
 25443                                  ;	Fill Dir_attr
 25444                                  
 25445 00004143 AA                      	STOSB				; Set attribute field
 25446 00004144 31C0                    	XOR	AX,AX
 25447 00004146 B90A00                  	MOV	CX,10
 25448                                  
 25449                                  ; Fill dir_pad
 25450                                  
 25451 00004149 F3AB                    	REP	STOSW			; Fill rest with zeros
 25452 0000414B E898C9                  	call	DATE16
 25453                                  
 25454                                  ;hkn; DEVFCB is in DOSDATA
 25455 0000414E BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25456 00004151 92                      	XCHG	AX,DX
 25457                                  
 25458                                  ; Fill dir_time
 25459                                  
 25460 00004152 AB                      	STOSW
 25461 00004153 92                      	XCHG	AX,DX
 25462                                  
 25463                                  ; Fill dir_date
 25464                                  
 25465 00004154 AB                      	STOSW
 25466 00004155 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25467 00004157 A1[9A05]                	MOV	AX,[DEVPT]
 25468                                  
 25469                                  ; Fill dir_first
 25470                                  
 25471 0000415A AB                      	STOSW				; Dir_first points to device
 25472 0000415B A1[9C05]                	MOV	AX,[DEVPT+2]
 25473                                  ;
 25474                                  ; Fill dir_size_l
 25475                                  ;
 25476 0000415E AB                      	STOSW
 25477 0000415F 88FC                    	MOV	AH,BH			; Put device atts in AH
 25478                                  
 25479                                  ;hkn; DEVFCB is in DOSDATA
 25480 00004161 BB[4B05]                	MOV	BX,DEVFCB
 25481 00004164 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25482 00004166 C3                      	retn
 25483                                  
 25484                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25485                                  ;----------------------------------------------------------------------------
 25486                                  ;
 25487                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25488                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25489                                  ;   If invalid, reset original CDS to root.
 25490                                  ;
 25491                                  ;   Inputs:	ThisCDS points to CDS of interest
 25492                                  ;		SS:DI points to temp buffer
 25493                                  ;   Outputs:	The current directory string is validated on the appropriate
 25494                                  ;		    drive
 25495                                  ;		ThisDPB changed
 25496                                  ;		ES:DI point to CDS
 25497                                  ;		Carry set if error (currently user FAILed to I 24)
 25498                                  ;   Registers modified: all
 25499                                  ;----------------------------------------------------------------------------
 25500                                  
 25501                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25502                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25503                                  
 25504                                  ValidateCDS:
 25505                                  	; 19/05/2019 - Retro DOS v4.0
 25506                                  	; 28/07/2018 - Retro DOS v3.0
 25507                                  
 25508                                     %define  Temp	[bp-2]	; word
 25509                                     %define  SaveCDS	[bp-6]	; dword
 25510                                     %define  SaveCDSL	[bp-6]	; word
 25511                                     %define  SaveCDSH	[bp-4]	; word
 25512                                  
 25513                                  	;Enter
 25514 00004167 55                      	push	bp
 25515 00004168 89E5                    	mov	bp,sp
 25516 0000416A 83EC06                  	sub	sp,6
 25517                                  
 25518 0000416D 897EFE                  	MOV	Temp,DI
 25519                                  
 25520                                  ;hkn; SS override
 25521 00004170 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25522 00004175 8976FA                  	MOV	SaveCDSL,SI
 25523 00004178 8C5EFC                  	MOV	SaveCDSH,DS
 25524                                  	;EnterCrit critDisk
 25525 0000417B E875D1                  	call	ECritDisk
 25526                                  	; 21/11/2022
 25527                                  	;test	byte [SI+curdir.flags+1],80h
 25528                                  	;test	word [si+67],8000h
 25529                                  	; 17/12/2022
 25530                                  	;test	byte [SI+68],80h
 25531 0000417E F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25532                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25533 00004182 7403                    	JZ	short _DoSplice
 25534 00004184 E98D00                  	JMP	FatFail
 25535                                  _DoSplice:
 25536 00004187 30D2                    	XOR	DL,DL
 25537 00004189 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25538                                  
 25539                                  ;hkn; SS is DOSDATA
 25540                                  	;Context ES
 25541 0000418E 16                      	push	ss
 25542 0000418F 07                      	pop	es
 25543                                  	;Invoke	FStrcpy
 25544 00004190 E835D0                  	call	FStrCpy
 25545 00004193 8B76FE                  	MOV	SI,Temp
 25546                                  
 25547                                  ;hkn; SS is DOSDATA
 25548                                  	;Context DS
 25549 00004196 16                      	push	ss
 25550 00004197 1F                      	pop	ds	
 25551                                  	;Invoke	Splice
 25552 00004198 E8422B                  	call	Splice
 25553                                  
 25554                                   ;hkn; SS is DOSDATA
 25555                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25556 0000419B 16                      	push	ss
 25557 0000419C 1F                      	pop	ds
 25558 0000419D 8816[4C03]              	MOV	[NoSetDir],DL
 25559 000041A1 C43E[A205]              	LES	DI,[THISCDS]
 25560                                  	;SAVE	<BP>
 25561 000041A5 55                      	push	bp
 25562                                  	;Invoke	FATREAD_CDS
 25563 000041A6 E81614                  	call	FATREAD_CDS	
 25564                                  	;RESTORE <BP>
 25565 000041A9 5D                      	pop	bp
 25566 000041AA 7268                    	JC	short FatFail
 25567                                  
 25568 000041AC C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25569                                  	;cmp	word [si+73],-1
 25570 000041B0 837C49FF                	CMP	word [SI+curdir.ID],-1
 25571 000041B4 7550                    	JNZ	short RestoreCDS
 25572                                  
 25573                                  ;hkn; SS is DOSDATA
 25574                                  	;Context ES
 25575 000041B6 16                      	push	ss
 25576 000041B7 07                      	pop	es
 25577                                  
 25578                                  ;hkn; SS override
 25579                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25580 000041B8 36FF36[B205]            	push	word [SS:WFP_START]
 25581                                  	;cmp	si,[bp-6]
 25582 000041BD 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25583 000041C0 750B                    	JNZ	short DoChdir
 25584                                  	;mov	di,[bp-2]
 25585 000041C2 8B7EFE                  	MOV	DI,Temp
 25586                                  
 25587                                  ;hkn; SS override
 25588 000041C5 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25589                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25590 000041CA E8FBCF                  	call	FStrCpy
 25591                                  DoChdir:
 25592                                  ;hkn; SS is DOSDATA
 25593                                  	;Context DS
 25594 000041CD 16                      	push	ss
 25595 000041CE 1F                      	pop	ds
 25596                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25597 000041CF FF36[6D05]              	push	word [SATTRIB]
 25598 000041D3 55                      	push	bp
 25599                                  	;Invoke	DOS_ChDir
 25600 000041D4 E851EF                  	call	DOS_CHDIR
 25601                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25602 000041D7 5D                      	pop	bp
 25603 000041D8 5B                      	pop	bx
 25604 000041D9 8F06[B205]              	pop	word [WFP_START]
 25605 000041DD 881E[6D05]              	MOV	[SATTRIB],BL
 25606 000041E1 C576FA                  	LDS	SI,SaveCDS
 25607 000041E4 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25608                                  
 25609                                  ;hkn; SS override for THISCDS
 25610 000041E6 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25611 000041EB 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25612 000041F0 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25613 000041F2 884C03                  	MOV	[SI+3],CL		;	    }
 25614                                  SetCluster:
 25615                                  	; 16/02/2024
 25616                                  	;;mov	word [si+73],0FFFFh
 25617                                  	;MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25618                                  	;
 25619 000041F5 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25620                                  	; 21/11/2022
 25621                                  	;test	byte [si+curdir.flags+1],20h
 25622                                  	; 19/05/2019
 25623                                  	; MSDOS 6.0
 25624                                  	; 17/12/2022
 25625                                  	;test	byte [si+68],20h
 25626 000041FA F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25627                                  	;;test	word [si+67],2000h
 25628                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25629 000041FE 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25630 00004200 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25631                                  _setdirclus:
 25632                                  	;mov	[si+73],cx
 25633 00004203 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25634                                  RestoreCDS:
 25635 00004206 C47EFA                  	LES	DI,SaveCDS
 25636 00004209 36893E[A205]            	MOV	[SS:THISCDS],DI
 25637 0000420E 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25638 00004213 F8                      	CLC
 25639                                  FatFail:
 25640                                  	;LeaveCrit critDisk
 25641 00004214 E8F7D0                  	call	LCritDisk
 25642                                  
 25643                                  	;les	di,[bp-6]
 25644 00004217 C47EFA                  	LES	DI,SaveCDS
 25645                                  	;Leave
 25646 0000421A 89EC                    	mov	sp,bp
 25647 0000421C 5D                      	pop	bp
 25648 0000421D C3                      	retn
 25649                                  
 25650                                  ; 28/07/2018 - Retro DOS v3.0
 25651                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25652                                  
 25653                                  ;Break	<CheckThisDevice - Check for being a device>
 25654                                  ;---------------------------------------------------------------------------
 25655                                  ;
 25656                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25657                                  ;   device specified. We will return carry if there is a device present. 
 25658                                  ;   The forms of devices we will recognize are:
 25659                                  ;
 25660                                  ;	[path]device
 25661                                  ;
 25662                                  ;   Note that the drive letter has *already* been removed. All other forms
 25663                                  ;   are not considered to be devices. If such a device is found we change
 25664                                  ;   the source pointer to point to the device component.
 25665                                  ;
 25666                                  ;   Inputs:	ES is DOSDATA
 25667                                  ;		DS:SI contains name
 25668                                  ;   Outputs:	ES is DOSDATA
 25669                                  ;		DS:SI point to name or device
 25670                                  ;		Carry flag set if device was found
 25671                                  ;		Carry flag reset otherwise
 25672                                  ;   Registers Modified: all except ES:DI, DS
 25673                                  ;----------------------------------------------------------------------------
 25674                                  
 25675                                  CheckThisDevice:
 25676 0000421E 57                      	push	di
 25677 0000421F 56                      	push	si
 25678 00004220 89F7                    	MOV	DI,SI
 25679                                  
 25680                                  ; Check for presence of \dev\ (Dam multiplan!)
 25681                                  
 25682 00004222 8A04                    	MOV	AL,[SI]
 25683 00004224 E8650D                  	call	PATHCHRCMP		; is it a path char?
 25684 00004227 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25685 00004229 46                      	INC	SI			; simulate LODSB
 25686                                  
 25687                                  ; We have the leading path separator. Look for DEV part.
 25688                                  
 25689 0000422A AD                      	LODSW
 25690 0000422B 0D2020                  	OR	AX,2020h
 25691 0000422E 3D6465                  	cmp	ax,"de"
 25692                                  	;CMP	AX,"e"<< 8 + "d"
 25693 00004231 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25694 00004233 AC                      	LODSB
 25695 00004234 0C20                    	OR	AL,20h
 25696 00004236 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25697 00004238 7526                    	JNZ	short NotDevice
 25698 0000423A AC                      	LODSB
 25699 0000423B E84E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25700 0000423E 7520                    	JNZ	short NotDevice		; no. go for it.
 25701                                  
 25702                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25703                                  ; SI and DevName may destroy DS.
 25704                                  
 25705                                  ParseDev:
 25706 00004240 1E                      	push	ds
 25707 00004241 56                      	push	si			; preserve the source pointer
 25708 00004242 E8890C                  	call	NameTrans		; advance DS:SI
 25709 00004245 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25710 00004248 F9                      	STC				; simulate a Carry return from DevName
 25711 00004249 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25712                                  
 25713                                  ;hkn; SS is DOSDATA
 25714 0000424B 16                      	push	ss
 25715 0000424C 1F                      	pop	ds
 25716                                  
 25717                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25718                                  ;
 25719                                  ; SR;
 25720                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25721                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25722                                  ; old call set the volume attribute bit.
 25723                                  
 25724 0000424D A0[6D05]                	mov	al,[SATTRIB]
 25725 00004250 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25726                                  
 25727                                  ; M026 - end
 25728                                  
 25729 00004253 E884FE                  	call	DEVNAME
 25730                                  
 25731                                  SkipSearch:
 25732 00004256 5E                      	pop	si
 25733 00004257 1F                      	pop	ds
 25734                                  
 25735                                  ; SI points to the beginning of the potential device. If we have a device
 25736                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25737                                  ; original value. At this point Carry set indicates FILE.
 25738                                  
 25739                                  CheckReturn:
 25740 00004258 5F                      	pop	di			; get original SI
 25741 00004259 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25742 0000425B 89FE                    	MOV	SI,DI
 25743                                  Check_Done:
 25744 0000425D 5F                      	pop	di
 25745 0000425E F5                      	CMC				; invert carry. Carry => device
 25746 0000425F C3                      	retn
 25747                                  NotDevice:
 25748 00004260 F9                      	STC
 25749 00004261 EBF5                    	JMP	short CheckReturn
 25750                                  
 25751                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25752                                  ;-----------------------------------------------------------------------------
 25753                                  ;
 25754                                  ; Procedure Name : LookupPath
 25755                                  ;
 25756                                  ; Output  DS:SI -> path name,
 25757                                  ;	  ES:DI -> dir entry info buffer
 25758                                  ;	  ES:CX -> extended dir info buffer
 25759                                  ;
 25760                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25761                                  ;			     FastOpen, DS:SI points to char just one after
 25762                                  ;			     the last char of path name which is fully or
 25763                                  ;			     partially found in FastOPen
 25764                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25765                                  ;
 25766                                  ;----------------------------------------------------------------------------
 25767                                  
 25768                                  LookupPath:
 25769                                  ;	PUSH	AX
 25770                                  
 25771                                  ;hkn; SS override
 25772                                  	;test	byte [ss:FastOpenFlg],1
 25773 00004263 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25774 00004269 7503                    	JNZ	short FASTINST			    ; and this routine is
 25775                                  NOLOOK:
 25776 0000426B E99700                  	JMP	NOLOOKUP			    ; executed once
 25777                                  
 25778                                  FASTINST:
 25779                                  ;hkn; SS override
 25780                                  	;test	byte [ss:FastOpenFlg],8
 25781 0000426E 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25782 00004274 75F5                    	JNZ	short NOLOOK			    ; yes
 25783                                  
 25784 00004276 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25785                                  
 25786                                  ;hkn; SS override
 25787 00004279 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25788 0000427E BF[460D]                	MOV	DI,Dir_Info_Buff
 25789 00004281 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25790 00004284 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25791 00004286 1E                      	PUSH	DS
 25792 00004287 07                      	POP	ES
 25793                                  
 25794                                  ;hkn; SS override
 25795                                  	;call	far [bx+2]
 25796 00004288 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25797 0000428B 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25798                                  
 25799 0000428D 8D5CFE                  	LEA	BX,[SI-2]
 25800                                  
 25801                                  ;hkn; SS override
 25802 00004290 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25803 00004295 745D                    	JZ	short NOTFOUND			    ; no
 25804                                  
 25805                                  	; 19/05/2019 - Retro DOS v4.0
 25806                                  
 25807                                  	; MSDOS 6.0				    ; fully or partially found
 25808 00004297 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25809 0000429A 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25810 0000429C 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25811                                  
 25812                                  ;hkn; SS override for attrib/sattrib
 25813 0000429D 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25814 000042A2 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25815 000042A7 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25816                                  	;mov	ch,[es:di+0Bh]
 25817 000042AC 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25818 000042B0 E81AFE                  	call	MatchAttributes 		    ;AN000;FO.;
 25819                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25820 000042B3 59                      	POP	CX				    ;AN000;FO.;
 25821 000042B4 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25822                                  parfnd:
 25823                                  
 25824                                  ;hkn; SS override
 25825 000042B6 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25826 000042BB 89CB                    	MOV	BX,CX
 25827                                  	; MSDOS 6.0
 25828                                  	;mov	ax,[bx+7]
 25829 000042BD 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25830                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25831 000042C0 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25832 000042C4 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25833 000042C7 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25834                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25835                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25836                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25837 000042CB 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25838 000042CE 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25839                                  
 25840 000042D2 06                      	PUSH	ES				    ; save ES
 25841                                  ;hkn; SS override
 25842 000042D3 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25843 000042D8 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25844                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25845 000042DB 07                      	POP	ES				    ; pop ES
 25846                                  ;SR;
 25847                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25848                                  ;indicate it is not a root dir
 25849                                  
 25850 000042DC 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25851 000042E3 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25852 000042E8 89FB                    	MOV	BX,DI				    ; start of entry
 25853                                  	;lea	si,[di+1Ah]
 25854 000042EA 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25855                                  						    ; dir_first field in the
 25856                                  						    ; dir entry
 25857                                  ;hkn; SS override for FastOpenFlg
 25858                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25859 000042ED 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25860                                  ;	POP	AX
 25861 000042F3 C3                      	RETN
 25862                                  NOTFOUND:
 25863 000042F4 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25864 000042F7 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25865 000042F9 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25866                                  Partial_Success:
 25867                                  	;and	byte [SS:FastOpenFlg],0FBh
 25868 000042FF 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25869                                  NOLOOKUP:
 25870                                  ;	POP	AX
 25871 00004305 F9                      	STC
 25872 00004306 C3                      	RETN
 25873                                  
 25874                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25875                                  ;-----------------------------------------------------------------------------
 25876                                  ;
 25877                                  ; Procedure Name : InsertPath
 25878                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25879                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25880                                  ;	  DS = DOSDATA
 25881                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25882                                  ;
 25883                                  ;-----------------------------------------------------------------------------
 25884                                  
 25885                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25886                                  
 25887                                  InsertPath:
 25888 00004307 9C                      	PUSHF
 25889                                  ;hkn; SS override for FastOpenFlag
 25890                                  	;test	byte [SS:FastOpenFlg], 1
 25891 00004308 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25892 0000430E 7477                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25893                                  	;test	byte [ss:FastOpenFlg],2
 25894 00004310 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25895 00004316 740D                    	JZ	short INSERT_DIR_INFO		; no
 25896                                  	;and	byte [ss:FastOpenFlg],0FDh
 25897 00004318 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25898 0000431E 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25899 00004323 EB5C                    	JMP	short GET_NEXT2
 25900                                  
 25901                                  INSERT_DIR_INFO:				; save registers
 25902 00004325 1E                      	PUSH	DS
 25903 00004326 06                      	PUSH	ES
 25904 00004327 53                      	PUSH	BX
 25905 00004328 56                      	PUSH	SI
 25906 00004329 57                      	PUSH	DI
 25907 0000432A 51                      	PUSH	CX
 25908 0000432B 50                      	PUSH	AX
 25909                                  
 25910                                  ;hkn; SS override
 25911 0000432C 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25912 00004331 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25913                                  
 25914                                  ; 21/02/2024
 25915                                  %if 0
 25916                                  	;mov	ax,[di+6]
 25917                                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25918                                  	; MSDOS 6.0
 25919                                  	;mov	[ss:si+1],ax
 25920                                  	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25921                                  	; 19/05/2019 - Retro DOS v4.0
 25922                                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25923                                  
 25924                                  ;hkn; SS is DOSDATA
 25925                                  	push	ss
 25926                                  	pop	ds
 25927                                  	; MSDOS 3.3
 25928                                  	;;mov	[si+1],ax
 25929                                  	;MOV	[SI+FEI.dirsec],AX
 25930                                  	; MSDOS 6.0
 25931                                  	;mov	[si+3],ax
 25932                                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25933                                  %else
 25934                                  	;lds	ax,[di+6]
 25935 00004334 C54506                  	lds	ax,[di+BUFFINFO.buf_sector]	; get directory sector
 25936                                  	;mov	[ss:si+1],ax
 25937 00004337 36894401                	mov	[ss:si+FEI.dirsec],ax
 25938                                  	;mov	[ss:si+3],ax
 25939 0000433B 368C5C03                	mov	[ss:si+FEI.dirsec+2],ds
 25940 0000433F 16                      	push	ss
 25941 00004340 1F                      	pop	ds
 25942                                  %endif
 25943                                  
 25944                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25945 00004341 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25946                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25947                                  	;mov	[si+3],ax ; MSDOS 3.3
 25948 00004344 894405                  	MOV	[SI+FEI.clusnum],AX
 25949                                  	; MSDOS 6.0
 25950 00004347 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25951                                  	;mov	[si+7],ax
 25952 0000434A 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25953 0000434D A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25954                                  	;mov	[si+9],ax
 25955 00004350 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25956                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25957 00004353 89D8                    	MOV	AX,BX
 25958                                  	;;add	di,16  ; MSDOS 3.3
 25959                                  	;add	di,20  ; MSDOS 6.0
 25960 00004355 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25961 00004358 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25962                                  	;mov	cl,32
 25963 0000435A B120                    	MOV	CL,dir_entry.size
 25964 0000435C F6F1                    	DIV	CL
 25965                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25966 0000435E 8804                    	mov	[si],al
 25967                                  
 25968 00004360 1E                      	PUSH	DS
 25969 00004361 07                      	POP	ES
 25970                                  
 25971 00004362 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25972 00004366 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25973                                  	;cmp	word [di+1Ah],0
 25974 00004368 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25975                                  					; never insert info when file is empty
 25976 0000436C 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25977                                  
 25978 0000436E 56                      	PUSH	SI			; ES:BX -> extended info
 25979 0000436F 5B                      	POP	BX
 25980                                  
 25981                                  	;mov	al,2
 25982 00004370 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25983 00004372 BE[300D]                	MOV	SI,FastOpenTable
 25984                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25985                                  	; 07/12/2022
 25986 00004375 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25987                                  
 25988 00004379 F8                      	CLC
 25989                                  SKIP_INSERT:
 25990 0000437A 58                      	POP	AX
 25991 0000437B 59                      	POP	CX			; restore registers
 25992 0000437C 5F                      	POP	DI
 25993 0000437D 5E                      	POP	SI
 25994 0000437E 5B                      	POP	BX
 25995 0000437F 07                      	POP	ES
 25996 00004380 1F                      	POP	DS
 25997                                  GET_NEXT2:
 25998                                  	;or	[ss:FastOpenFlg],8
 25999 00004381 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 26000                                  					; we got dir info from fastopen so
 26001                                  GET_NEXT_ELEMENT:
 26002 00004387 9D                      	POPF
 26003 00004388 C3                      	RETN
 26004                                  
 26005                                  ;============================================================================
 26006                                  ; DEV.ASM (MSDOS 6.0, 1991)
 26007                                  ;============================================================================
 26008                                  ; 17/07/2018 - Retro DOS v3.0
 26009                                  ; 30/04/2019 - Retro DOS v4.0
 26010                                  
 26011                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 26012                                  
 26013                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 26014                                  
 26015                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 26016                                  
 26017                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 26018                                  ;DEV001s:
 26019                                  ;		length of packets
 26020 00004389 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 26021                                  ;LenTab: db	22,14,22,13,15,14
 26022                                  
 26023                                  ;	Error Function
 26024                                  
 26025                                  CmdTab:
 26026 0000438F 8604                    	DB	86h, DEVRD	; 0 input
 26027 00004391 8605                    	DB	86h, DEVRDND	; 1 input status
 26028 00004393 8708                    	DB	87h, DEVWRT	; 2 output
 26029 00004395 870A                    	DB	87h, DEVOST	; 3 output status
 26030 00004397 8607                    	DB	86h, DEVIFL	; 4 input flush
 26031 00004399 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 26032                                  
 26033                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 26034                                  
 26035                                  ;CmdTab:
 26036                                  ;	db	86h, 4
 26037                                  ;	db	86h, 5
 26038                                  ;	db	87h, 8
 26039                                  ;	db	87h, 10
 26040                                  ;	db	86h, 7
 26041                                  ;	db	86h, 5
 26042                                  
 26043                                  ;DEV001E:
 26044                                  
 26045                                  ; 30/04/2019 - Retro DOS v4.0
 26046                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 26047                                  
 26048                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 26049                                  ;----------------------------------------------------------------------------
 26050                                  ;
 26051                                  ; Procedure Name : IOFUNC
 26052                                  ;
 26053                                  ; Inputs:
 26054                                  ;	DS:SI Points to SFT
 26055                                  ;	AH is function code
 26056                                  ;		= 0 Input
 26057                                  ;		= 1 Input Status
 26058                                  ;		= 2 Output
 26059                                  ;		= 3 Output Status
 26060                                  ;		= 4 Flush
 26061                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 26062                                  ;				   present.
 26063                                  ;	AL = character if output
 26064                                  ; Function:
 26065                                  ;	Perform indicated I/O to device or file
 26066                                  ; Outputs:
 26067                                  ;	AL is character if input
 26068                                  ;	If a status call
 26069                                  ;		zero set if not ready
 26070                                  ;		zero reset if ready (character in AL for input status)
 26071                                  ; For regular files:
 26072                                  ;	Input Status
 26073                                  ;		Gets character but restores position
 26074                                  ;		Zero set on EOF
 26075                                  ;	Input
 26076                                  ;		Gets character advances position
 26077                                  ;		Returns ^Z on EOF
 26078                                  ;	Output Status
 26079                                  ;		Always ready
 26080                                  ; AX altered, all other registers preserved
 26081                                  ;----------------------------------------------------------------------------
 26082                                  
 26083                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26084                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 26085                                  
 26086                                  IOFUNC:
 26087 0000439B 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 26088                                  					; DEVIOBUF
 26089 000043A0 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 26090 000043A7 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 26091 000043AE 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 26092                                  	;test	byte [si+6],80h
 26093                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 26094 000043B2 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26095 000043B6 7403                    	JZ	short IOTO22		;AN000;
 26096 000043B8 E9A500                  	JMP	IOTOFILE		;AN000;
 26097                                  IOTO22:
 26098                                  	;test	word [si+5],80h
 26099                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 26100 000043BB F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 26101 000043BF 7503                    	JNZ	short IOTO33		;AN000;
 26102 000043C1 E99C00                  	JMP	IOTOFILE		;AN000;
 26103                                  IOTO33:
 26104 000043C4 06                      	push	es ; * (MSDOS 6.21)
 26105 000043C5 E89AC0                  	call	save_world
 26106 000043C8 8CDA                    	MOV	DX,DS
 26107 000043CA 8CD3                    	MOV	BX,SS
 26108 000043CC 8EDB                    	MOV	DS,BX
 26109 000043CE 8EC3                    	MOV	ES,BX
 26110 000043D0 31DB                    	XOR	BX,BX
 26111 000043D2 80FC05                  	cmp	ah,5		    ; system wait enabled?
 26112 000043D5 7503                    	jnz	short _no_sys_wait
 26113                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26114                                  	; 16/12/2022
 26115 000043D7 80CF04                  	or	bh,04h
 26116                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 26117                                  				    ; It is up to device driver to carry out
 26118                                  				    ; appropriate action.
 26119                                  _no_sys_wait:
 26120 000043DA 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 26121 000043DE 31DB                    	XOR	BX,BX
 26122 000043E0 881E[8903]              	MOV	[IOMED],BL
 26123                                  
 26124 000043E4 88E3                    	MOV	BL,AH		 	; get function
 26125 000043E6 2E8AA7[8943]            	MOV	AH,[cs:BX+LenTab]
 26126 000043EB D1E3                    	SHL	BX,1
 26127 000043ED 2E8B8F[8F43]            	MOV	CX,[cs:BX+CmdTab]
 26128 000043F2 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 26129 000043F5 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 26130 000043F9 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 26131                                  
 26132 000043FD 8EDA                    	MOV	DS,DX
 26133 000043FF E86501                  	CALL	DEVIOCALL
 26134 00004402 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 26135 00004407 21FF                    	and	di,di
 26136 00004409 7834                    	js	short DevErr
 26137                                  OKDevIO:
 26138 0000440B 8CD0                    	MOV	AX,SS
 26139 0000440D 8ED8                    	MOV	DS,AX
 26140                                  
 26141                                  	;cmp	ch,5
 26142 0000440F 80FD05                  	CMP	CH,DEVRDND
 26143 00004412 7506                    	JNZ	short DNODRD
 26144 00004414 A0[8903]                	MOV	AL,[IORCHR]
 26145 00004417 A2[BC03]                	MOV	[DEVIOBUF],AL
 26146                                  
 26147                                  DNODRD: 
 26148 0000441A 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 26149 0000441E F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 26150                                  	;and	ah,2
 26151 00004420 80E402                  	AND	AH,STBUI>>8
 26152                                  
 26153                                  QuickReturn:				;AN000; 2/13/KK
 26154 00004423 E825C0                  	call	restore_world
 26155 00004426 07                      	pop	es ; * (MSDOS 6.21)
 26156                                  
 26157                                  	; SR;
 26158                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 26159                                  	; IoStatFail = -1 (set after return from the I24)
 26160                                  
 26161                                  	; MSDOS 6.0
 26162 00004427 9C                      	pushf
 26163 00004428 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 26164 0000442C 98                      	cbw				;sign extend to word
 26165 0000442D 83F8FF                  	cmp	ax,-1
 26166 00004430 7507                    	jne	short not_fail_ret
 26167 00004432 36FE06[8300]            	inc	byte [ss:IoStatFail]
 26168 00004437 9D                      	popf
 26169 00004438 C3                      	retn
 26170                                  
 26171                                  not_fail_ret:
 26172 00004439 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 26173 0000443D 9D                      	popf
 26174 0000443E C3                      	retn
 26175                                  
 26176                                  DevErr:
 26177 0000443F 88CC                    	MOV	AH,CL
 26178 00004441 E87C0D                  	call	CHARHARD
 26179 00004444 3C01                    	CMP	AL,1
 26180 00004446 7507                    	JNZ	short NO_RETRY
 26181 00004448 E800C0                  	call	restore_world
 26182                                  	; 12/05/2019
 26183 0000444B 07                      	pop	es ; * (MSDOS 6.21)		
 26184 0000444C E94CFF                  	JMP	IOFUNC	; 10/08/2018
 26185                                  
 26186                                  NO_RETRY:
 26187                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 26188                                  	; ready so that DOS doesn't get caught in a status loop when user 
 26189                                  	; simply wants to ignore the error.
 26190                                  	;
 26191                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 26192                                  	; should be checked by the caller on return
 26193                                  
 26194                                  					; SS override
 26195 0000444F 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 26196                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 26197                                  
 26198                                  	; SR;
 26199                                  	; Check if user failed
 26200                                  
 26201                                  	; MSDOS 6.0
 26202 00004455 3C03                    	cmp	al,3
 26203 00004457 7505                    	jnz	short not_fail
 26204 00004459 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 26205                                  not_fail:
 26206 0000445E EBAB                    	JMP	short OKDevIO
 26207                                  
 26208                                  IOTOFILE:
 26209 00004460 08E4                    	OR	AH,AH
 26210 00004462 7421                    	JZ	short IOIN
 26211 00004464 FECC                    	DEC	AH
 26212 00004466 7405                    	JZ	short IOIST
 26213 00004468 FECC                    	DEC	AH
 26214 0000446A 7411                    	JZ	short IOUT
 26215                                  IOUT_retn:	; 18/12/2022
 26216 0000446C C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 26217                                  IOIST:
 26218                                  	;push	word [si+15h]
 26219 0000446D FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26220                                  	;push	word [si+17h]
 26221 00004470 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26222 00004473 E80F00                  	CALL	IOIN
 26223                                  	;pop	word [si+17h]
 26224 00004476 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26225                                  	;pop	word [si+15h]
 26226 00004479 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26227 0000447C C3                      	retn
 26228                                  IOUT:
 26229 0000447D E82500                  	CALL	SETXADDR
 26230 00004480 E8BFEF                  	call	DOS_WRITE
 26231                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26232                                  	; 18/12/2022
 26233 00004483 EB4F                    	jmp	RESTXADDR
 26234                                  ;IOUT_retn:
 26235                                  	;retn			; come crying to me when things don't
 26236                                  				; work ARR
 26237                                  IOIN:
 26238 00004485 E81D00                  	CALL	SETXADDR
 26239                                  					; SS override for DOS34_FLAG
 26240                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26241                                  	;or	word [ss:DOS34_FLAG],40h
 26242                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26243                                  	; 16/12/2022
 26244 00004488 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26245 0000448E E8B1ED                  	CALL	DOS_READ
 26246                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26247                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26248                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26249                                  	; 16/12/2022
 26250 00004491 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26251 00004497 09C9                    	OR	CX,CX			; Check EOF
 26252 00004499 E83800                  	CALL	RESTXADDR
 26253                                  					; SS override
 26254 0000449C 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26255 000044A0 75CA                    	jnz	short IOUT_retn	
 26256 000044A2 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26257 000044A4 C3                      	retn
 26258                                  
 26259                                  SETXADDR:
 26260                                  					; SS override
 26261 000044A5 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26262                                  
 26263 000044AA 06                      	push	es ; * (MSDOS 6.21)
 26264                                  
 26265 000044AB E8B4BF                  	call	save_world
 26266                                  					; SS override for DMAADD and THISSFT
 26267                                  	; 24/09/2023
 26268                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26269                                  	;PUSH	WORD [SS:DMAADD+2]
 26270 000044AE 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26271                                  
 26272                                  ; 22/02/2024
 26273                                  %if 0
 26274                                  	push	ss
 26275                                  	pop	ds
 26276                                  
 26277                                  	; 24/09/2023
 26278                                  	push	word [DMAADD]
 26279                                  	push	word [DMAADD+2]
 26280                                  
 26281                                  	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26282                                  	MOV	CX,[IOXAD+2]
 26283                                  	MOV	[DMAADD+2],CX
 26284                                  	MOV	CX,[IOXAD]
 26285                                  	MOV	[DMAADD],CX		; Set byte trans addr
 26286                                  %else
 26287                                  	; 22/02/2024 - Retro DOS v4.2
 26288                                  	; PCDOS 7.1 IBMDOS.COM
 26289                                  	
 26290 000044B3 36C50E[2C03]            	lds	cx,[ss:DMAADD]		; Save Disk transfer address
 26291 000044B8 51                      	push	cx
 26292 000044B9 1E                      	push	ds
 26293 000044BA 36C50E[8A03]            	lds	cx,[ss:IOXAD]		; Set byte trans address
 26294 000044BF 368C1E[2E03]            	mov	[ss:DMAADD+2],ds
 26295 000044C4 16                      	push	ss
 26296 000044C5 1F                      	pop	ds
 26297 000044C6 890E[2C03]              	mov	[DMAADD],cx
 26298 000044CA 8936[9E05]              	mov	[THISSFT],si
 26299                                  %endif
 26300 000044CE 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26301 000044D2 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26302                                  
 26303                                  RESTXADDR:
 26304 000044D4 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26305 000044D8 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26306 000044DC 8F06[2C03]              	POP	WORD [DMAADD]
 26307                                  
 26308 000044E0 E868BF                  	call	restore_world
 26309                                  
 26310 000044E3 07                      	pop	es ; * (MSDOS 6.21)
 26311                                  					; SS override
 26312                                  RESTRET:
 26313 000044E4 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26314                                  
 26315                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26316                                  ; 21/11/2022
 26317                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26318                                  
 26319                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26320                                  
 26321                                  ;----------------------------------------------------------------------------
 26322                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26323                                  ;
 26324                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26325                                  ;	the SFT.
 26326                                  ;
 26327                                  ;	ENTRY	(ES:DI) = SFT
 26328                                  ;	EXIT	none
 26329                                  ;	USES	all
 26330                                  ;----------------------------------------------------------------------------
 26331                                  
 26332                                  DEV_OPEN_SFT:
 26333 000044E9 06                      	push	es ; * (MSDOS 6.21)
 26334 000044EA E875BF                  	call	save_world
 26335                                  	;mov	al,0Dh	
 26336 000044ED B00D                    	MOV	AL,DEVOPN
 26337 000044EF EB06                    	JMP	SHORT DO_OPCLS
 26338                                  
 26339                                  ;----------------------------------------------------------------------------
 26340                                  ; Procedure Name : DEV_CLOSE_SFT
 26341                                  ;
 26342                                  ; Inputs:
 26343                                  ;	ES:DI Points to SFT
 26344                                  ; Function:
 26345                                  ;	Issue a CLOSE call to the correct device
 26346                                  ; Outputs:
 26347                                  ;	None
 26348                                  ; ALL preserved
 26349                                  ;----------------------------------------------------------------------------
 26350                                  
 26351                                  DEV_CLOSE_SFT:
 26352 000044F1 06                      	push	es ; * (MSDOS 6.21)
 26353 000044F2 E86DBF                  	call	save_world
 26354                                  	;mov	al,0Eh	
 26355 000044F5 B00E                    	MOV	AL,DEVCLS
 26356                                  
 26357                                  	; Main entry for device open and close. AL contains the function 
 26358                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26359                                  	; open/close to block devices. This allows networks to function but 
 26360                                  	; does NOT hang up with bogus change-line code.
 26361                                  
 26362                                  	;entry	DO_OPCLS
 26363                                  DO_OPCLS:
 26364                                  	; Is the SFT for the net? If so, no action necessary.
 26365                                  
 26366                                  	; MSDOS 6.0
 26367                                  	;test	word [es:di+5],8000h
 26368                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26369 000044F7 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26370 000044FC 7564                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26371 000044FE 30E4                    	XOR	AH,AH			; Unit
 26372                                  	;test	byte [es:di+5],80h
 26373 00004500 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26374                                  	;les	di,[es:di+7]
 26375 00004505 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26376 00004509 7511                    	JNZ	short GOT_DEV_ADDR
 26377                                  
 26378                                  	; We are about to call device open/close on a block driver. If no 
 26379                                  	; sharing then just short circuit to done.
 26380                                  	
 26381                                  	; MSDOS 6.0
 26382                                  					; SS override
 26383 0000450B 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26384 00004511 764F                    	JBE	short OPCLS_DONE	;AN010; yes
 26385                                  
 26386                                  ; 22/02/2024
 26387                                  %if 0
 26388                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26389                                  	;mov	ah,[es:di+1]
 26390                                  	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26391                                  	mov	cl,[es:di]
 26392                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26393                                  %else
 26394                                  	; 22/02/2024 - Retro DOS v4.2
 26395                                  	; (PCDOS 7.1 IBMDOS.COM)
 26396                                  	;mov	cx,[es:di+DPB.DRIVE]
 26397 00004513 268B0D                  	mov	cx,[es:di]
 26398 00004516 88EC                    	mov	ah,ch			; AH = unit
 26399                                  					; CL = drive
 26400                                  %endif
 26401                                  
 26402                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26403                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26404 00004518 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26405                                  GOT_DEV_ADDR:				; ES:DI -> device
 26406                                  	;test	word [es:di+4],800h
 26407                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26408 0000451C 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26409 00004521 743F                    	JZ	short OPCLS_DONE	; Device can't
 26410 00004523 06                      	PUSH	ES
 26411 00004524 1F                      	POP	DS
 26412 00004525 89FE                    	MOV	SI,DI			; DS:SI -> device
 26413                                  
 26414                                  OPCLS_RETRY:
 26415                                  	;Context ES
 26416 00004527 16                      	push	ss
 26417 00004528 07                      	pop	es
 26418                                  					; DEVCALL is in DOSDATA
 26419 00004529 BF[5A03]                	MOV	DI,DEVCALL
 26420                                  
 26421 0000452C 89FB                    	MOV	BX,DI
 26422 0000452E 50                      	PUSH	AX
 26423                                  	;mov	al,13
 26424 0000452F B00D                    	MOV	AL,DOPCLHL
 26425 00004531 AA                      	STOSB				; Length
 26426 00004532 58                      	POP	AX
 26427                                  
 26428 00004533 86E0                    	XCHG	AH,AL
 26429                                  	;STOSB				; Unit
 26430                                  	; 22/02/2024 (PCDOS 7.1 IBMDOS.COM)
 26431 00004535 AB                      	stosw				; Unit, Command
 26432 00004536 86E0                    	XCHG	AH,AL
 26433                                  	;STOSB				; Command
 26434                                  
 26435 00004538 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26436 0000453D 50                      	PUSH	AX			; Save Unit,Command
 26437                                  	;invoke	DEVIOCALL2
 26438 0000453E E82900                  	call	DEVIOCALL2
 26439                                  
 26440                                  	;mov	di,[es:bx+3]
 26441 00004541 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26442                                  	;test	di,8000h
 26443                                  	;jz	short OPCLS_DONEP	
 26444 00004545 21FF                    	and	di,di
 26445 00004547 7918                    	jns	short OPCLS_DONEP	; No error
 26446                                  	; 21/11/2022
 26447                                  	;test	word [si+4],8000h
 26448                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26449                                  	;test	word [si+5],80h
 26450 00004549 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26451 0000454D 7404                    	JZ	short BLKDEV
 26452 0000454F B486                    	MOV	AH,86H			; Read error in data, Char dev
 26453 00004551 EB04                    	JMP	SHORT HRDERR
 26454                                  BLKDEV:
 26455 00004553 88C8                    	MOV	AL,CL			; Drive # in AL
 26456 00004555 B406                    	MOV	AH,6			; Read error in data, Blk dev
 26457                                  HRDERR:
 26458                                  	;invoke	CHARHARD
 26459 00004557 E8660C                  	call	CHARHARD
 26460 0000455A 3C01                    	cmp	al,1
 26461 0000455C 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26462                                  					;  Note that FAIL is essentually IGNORED
 26463 0000455E 58                      	POP	AX			; Get back Unit, Command
 26464 0000455F EBC6                    	JMP	short OPCLS_RETRY
 26465                                  OPCLS_DONEP:
 26466 00004561 58                      	POP	AX			; Clean stack
 26467                                  OPCLS_DONE:
 26468 00004562 E8E6BE                  	call	restore_world
 26469 00004565 07                      	pop	es ; * (MSDOS 6.21)
 26470 00004566 C3                      	retn
 26471                                  
 26472                                  ; 30/04/2019 - Retro DOS v4.0
 26473                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26474                                  
 26475                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26476                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26477                                  
 26478                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26479                                  ;----------------------------------------------------------------------------
 26480                                  ;**	DevIoCall  - Call Device
 26481                                  ;
 26482                                  ;	ENTRY	DS:SI Points to device SFT
 26483                                  ;		ES:BX Points to request data
 26484                                  ;	EXIT	DS:SI -> Device driver
 26485                                  ;	USES	DS:SI,AX
 26486                                  ;----------------------------------------------------------------------------
 26487                                  ;**	DevIoCall2 - Call Device
 26488                                  ;
 26489                                  ;	ENTRY	DS:SI Points to DPB
 26490                                  ;		ES:BX Points to request data
 26491                                  ;	EXIT	DS:SI -> Device driver
 26492                                  ;	USES	DS:SI,AX
 26493                                  ;----------------------------------------------------------------------------
 26494                                  
 26495                                  DEVIOCALL:
 26496                                  					; SS override for CALLSSEC, 
 26497                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26498 00004567 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26499                                  
 26500                                  	;entry	DEVIOCALL2
 26501                                  DEVIOCALL2:
 26502                                  	;EnterCrit critDevice
 26503 0000456A E8BBCD                  	call	ECritDevice
 26504                                  
 26505                                  	; MSDOS 6.0
 26506                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26507                                  	;test	byte [si+5],80h
 26508 0000456D F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26509 00004571 7545                    	jnz	short chardev2		;AN000; >32mb no
 26510                                  
 26511                                  	; 16/12/2022
 26512                                  	; 22/11/2022
 26513 00004573 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26514 00004577 3C04                    	cmp	al,DEVRD	; 4
 26515 00004579 7408                    	je	short chkext	
 26516 0000457B 3C08                    	cmp	al,DEVWRT	; 8
 26517 0000457D 7404                    	je	short chkext
 26518 0000457F 3C09                    	cmp	al,DEVWRTV	; 9
 26519 00004581 7535                    	jne	short chardev2
 26520                                  
 26521                                  	; 16/12/2022
 26522                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26523                                  	;;cmp	byte [es:bx+2],4
 26524                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26525                                  	;JZ	short chkext		;AN000; >32mb   yes
 26526                                  	;;cmp	byte [es:bx+2],8
 26527                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26528                                  	;JZ	short chkext		;AN000; >32mb   yes
 26529                                  	;;cmp	byte [es:bx+2],9
 26530                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26531                                  	;				;AN000; >32mb write/verify ?
 26532                                  	;JNZ	short chardev2		;AN000; >32mb no
 26533                                  chkext:
 26534 00004583 E8A400                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26535 00004586 7252                    	JC	short dev_exit		;AN000;LB. done
 26536                                  
 26537                                  	;test	byte [si+4],2
 26538 00004588 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26539 0000458C 741A                    	JZ	short chksector		;AN000;>32mb   no
 26540 0000458E 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26541                                  
 26542                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26543                                  	;MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26544                                  	; 22/02/2024
 26545 00004592 B8FFFF                  	mov	ax,-1 ; 0FFFFh
 26546 00004595 368706[6E03]            	xchg    ax,[ss:CALLSSEC]
 26547                                  
 26548 0000459A 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26549 0000459E 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26550 000045A2 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26551 000045A6 EB10                    	JMP	short chardev2		;AN000; >32mb
 26552                                  chksector:				;AN000; >32mb
 26553 000045A8 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26554 000045AE 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26555                                  	;mov	word [es:bx+3],8107h
 26556 000045B0 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26557                                  					;AN000; >32mb
 26558 000045B6 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26559                                  
 26560                                  chardev2:				;AN000;
 26561                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26562                                  	; preserved
 26563                                  
 26564                                  	;mov	ax,[si+6]
 26565 000045B8 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26566 000045BB 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26567 000045BF 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26568 000045C4 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26569                                  
 26570                                  	;mov	ax,[si+8]
 26571 000045C9 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26572 000045CC 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26573 000045D0 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26574                                  
 26575                                  	; MSDOS 6.0
 26576 000045D5 E84801                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26577 000045D8 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26578                                  
 26579                                  dev_exit:
 26580                                  	;LeaveCrit critDevice
 26581                                  	;call	LCritDevice
 26582                                  	;retn
 26583                                  	; 18/12/2022
 26584 000045DA E966CD                  	jmp	LCritDevice
 26585                                  
 26586                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26587                                  ; 22/11/2022
 26588                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26589                                  
 26590                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26591                                  ;---------------------------------------------------------------------------
 26592                                  ;
 26593                                  ; Procedure Name : SETREAD, SETWRITE
 26594                                  ;
 26595                                  ; Inputs:
 26596                                  ;	DS:BX = Transfer Address
 26597                                  ;	CX = Record Count
 26598                                  ;	DX = Starting Record
 26599                                  ;	AH = Media Byte
 26600                                  ;	AL = Unit Code
 26601                                  ; Function:
 26602                                  ;	Set up the device call header at DEVCALL
 26603                                  ; Output:
 26604                                  ;	ES:BX Points to DEVCALL
 26605                                  ; No other registers effected
 26606                                  ;
 26607                                  ;---------------------------------------------------------------------------
 26608                                  
 26609                                  SETREAD_XJ:
 26610                                  	;;;
 26611                                  	; 07/02/2024 - Retro DOS v4.2
 26612 000045DD 89FB                    	mov	bx,di
 26613 000045DF EB07                    	jmp	short SETREAD_X
 26614                                  	;;;
 26615                                  
 26616                                  SETREAD_XT:
 26617                                  	;;;
 26618                                  	; 07/02/2024 - Retro DOS v4.2
 26619 000045E1 BB[B603]                	mov	bx,TIMEBUF
 26620 000045E4 53                      	push	bx
 26621                                  SETREAD_XTC:
 26622 000045E5 B90600                  	mov	cx,6
 26623                                  	;;;
 26624                                  SETREAD_X:
 26625                                  	;;;
 26626                                  	; 06/02/2024 - Retro DOS v4.2
 26627 000045E8 31C0                    	xor	ax,ax
 26628                                  	;mov	dx,ax ; 0
 26629 000045EA 99                      	cwd
 26630                                  	;;;
 26631                                  
 26632                                  ; ------------------------------------
 26633                                  
 26634                                  SETREAD:
 26635 000045EB 57                      	PUSH	DI
 26636 000045EC 51                      	PUSH	CX
 26637 000045ED 50                      	PUSH	AX
 26638 000045EE B104                    	MOV	CL,DEVRD ; mov cl,4
 26639                                  SETCALLHEAD:
 26640 000045F0 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26641 000045F2 16                      	PUSH	SS
 26642 000045F3 07                      	POP	ES
 26643                                  					; DEVCALL is in DOSDATA
 26644 000045F4 BF[5A03]                	MOV	DI,DEVCALL
 26645                                  
 26646 000045F7 AA                      	STOSB				; length
 26647 000045F8 58                      	POP	AX			; 
 26648 000045F9 AA                      	STOSB				; Unit
 26649 000045FA 50                      	PUSH	AX
 26650 000045FB 88C8                    	MOV	AL,CL
 26651 000045FD AA                      	STOSB				; Command code
 26652 000045FE 31C0                    	XOR	AX,AX
 26653 00004600 AB                      	STOSW				; Status
 26654 00004601 83C708                  	ADD	DI,8			; Skip link fields
 26655 00004604 58                      	POP	AX
 26656 00004605 86E0                    	XCHG	AH,AL
 26657 00004607 AA                      	STOSB				; Media byte
 26658 00004608 86C4                    	XCHG	AL,AH
 26659 0000460A 50                      	PUSH	AX
 26660 0000460B 89D8                    	MOV	AX,BX
 26661 0000460D AB                      	STOSW
 26662                                  
 26663 0000460E 8CD8                    	MOV	AX,DS
 26664 00004610 AB                      	STOSW				; Transfer addr
 26665                                  
 26666 00004611 59                      	POP	CX			; Real AX
 26667 00004612 58                      	POP	AX			; Real CX
 26668 00004613 AB                      	STOSW				; Count
 26669                                  
 26670 00004614 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26671 00004615 AB                      	STOSW				; Start
 26672 00004616 91                      	XCHG	AX,CX
 26673 00004617 87D1                    	XCHG	DX,CX
 26674 00004619 5F                      	POP	DI
 26675                                  					; DEVCALL is in DOSDATA
 26676 0000461A BB[5A03]                	MOV	BX,DEVCALL
 26677 0000461D C3                      	retn
 26678                                  
 26679                                  	;entry	SETWRITE
 26680                                  SETWRITE:
 26681                                  
 26682                                  ; Inputs:
 26683                                  ;	DS:BX = Transfer Address
 26684                                  ;	CX = Record Count
 26685                                  ;	DX = Starting Record
 26686                                  ;	AH = Media Byte
 26687                                  ;	AL = Unit Code
 26688                                  ; Function:
 26689                                  ;	Set up the device call header at DEVCALL
 26690                                  ; Output:
 26691                                  ;	ES:BX Points to DEVCALL
 26692                                  ; No other registers effected
 26693                                  
 26694 0000461E 57                      	PUSH	DI
 26695 0000461F 51                      	PUSH	CX
 26696 00004620 50                      	PUSH	AX
 26697 00004621 B108                    	MOV	CL,DEVWRT ; mov cl,8
 26698 00004623 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26699 00004628 EBC6                    	JMP	SHORT SETCALLHEAD
 26700                                  
 26701                                  ; 30/04/2019 - Retro DOS v4.0
 26702                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26703                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26704                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26705                                  
 26706                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26707                                  ;---------------------------------------------------------------------------
 26708                                  ;
 26709                                  ; Procedure Name : RW_SC
 26710                                  ;
 26711                                  ; Inputs:
 26712                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26713                                  ;	 [SC_STATUS]= SC validity status
 26714                                  ;	 [SEQ_SECTOR]= last sector read
 26715                                  ; Function:
 26716                                  ;	Read from or write through secondary cache
 26717                                  ; Output:
 26718                                  ;	ES:BX Points to DEVCALL
 26719                                  ;	carry clear, I/O is not done
 26720                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26721                                  ;	carry set, I/O is done
 26722                                  ;
 26723                                  ;----------------------------------------------------------------------------
 26724                                  
 26725                                  RW_SC:
 26726                                  	; SS override for all variables used.
 26727                                  	
 26728 0000462A 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26729 00004630 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26730 00004632 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26731 00004638 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26732 0000463A 51                      	PUSH	CX			    ;AN000;LB.
 26733 0000463B 52                      	PUSH	DX			    ;AN000;LB. yes
 26734 0000463C 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26735 0000463D 56                      	PUSH	SI			    ;AN000;LB.
 26736 0000463E 06                      	PUSH	ES			    ;AN000;LB.
 26737 0000463F 57                      	PUSH	DI			    ;AN000;LB.
 26738                                  
 26739 00004640 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26740 00004645 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26741 0000464B 7408                    	JZ	short doread		    ;AN000;LB. yes
 26742 0000464D E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26743 00004650 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26744                                  scexit4:				    ;AN000;
 26745 00004653 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26746 00004654 C3                      	retn				    ;AN000;LB.
 26747                                  doread: 				    ;AN000;
 26748 00004655 E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26749 00004658 720A                    	JC	short readSC		    ;AN000;LB.
 26750 0000465A 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26751 00004661 F9                      	STC				    ;AN000;LB. set carry
 26752 00004662 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26753                                  readSC: 				    ;AN000;
 26754 00004664 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26755 00004668 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26756 0000466D 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26757 00004672 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26758                                  	; 24/09/2023
 26759                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26760 00004677 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26761                                  chklow: 						
 26762 00004679 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26763 0000467C 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26764 0000467E 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26765 00004685 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26766 00004689 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26767                                  readsr:
 26768 0000468D 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26769 00004691 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26770 00004695 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26771 00004699 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26772                                  
 26773 0000469D 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26774 000046A1 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26775 000046A5 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26776 000046A9 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26777 000046AD 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26778 000046B3 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26779 000046B7 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26780 000046BB 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26781 000046BF 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26782 000046C3 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26783 000046C7 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26784                                  saveseq2:				    ;AN000;
 26785 000046CB F8                      	CLC				    ;AN000;LB. clear carry
 26786                                  saveseq:				    ;AN000;	
 26787 000046CC 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26788 000046D0 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26789 000046D4 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26790 000046D8 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26791 000046DC EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26792                                  scexit2:				    ;AN000;LB.
 26793 000046DE F8                      	CLC				    ;AN000;LB.	clear carry
 26794                                  scexit: 				    ;AN000;		
 26795 000046DF 5F                      	POP	DI			    ;AN000;LB.
 26796 000046E0 07                      	POP	ES			    ;AN000;LB. restore registers
 26797 000046E1 5E                      	POP	SI			    ;AN000;LB.
 26798 000046E2 1F                      	POP	DS			    ;AN000;LB.
 26799 000046E3 5A                      	POP	DX			    ;AN000;LB.
 26800 000046E4 59                      	POP	CX			    ;AN000;LB.
 26801 000046E5 C3                      	retn				    ;AN000;LB.
 26802                                  
 26803                                  ;Break	<IN_SC -- check if in secondary cache>
 26804                                  ;--------------------------------------------------------------------------
 26805                                  ;
 26806                                  ; Procedure Name : IN_SC
 26807                                  ;
 26808                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26809                                  ;	   [CURSC_DRIVE]= current SC drive
 26810                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26811                                  ;	   [SC_CACHE_COUNT]= SC count
 26812                                  ;	   [HIGH_SECTOR]:DX= sector number
 26813                                  ; Function:
 26814                                  ;	Check if the sector is in secondary cache
 26815                                  ; Output:
 26816                                  ;	carry clear, in SC
 26817                                  ;	   CX= the index in the secondary cache
 26818                                  ;	carry set, not in SC
 26819                                  ;
 26820                                  ;---------------------------------------------------------------------------
 26821                                  
 26822                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26823                                  IN_SC:
 26824                                  	; SS override for all variables used
 26825 000046E6 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26826 000046EA 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26827 000046EF 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26828 000046F1 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26829 000046F5 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26830 000046F7 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26831 000046FC 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26832                                  	; 24/09/2023
 26833                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26834 00004701 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26835 00004703 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26836 00004708 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26837 0000470A F8                      	CLC				    ;AN000;;LB. clear carry
 26838                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26839                                  	; 16/12/2022
 26840 0000470B C3                      	retn	; 30/04/2019
 26841                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26842                                  	;jmp	short inexit
 26843                                  
 26844                                  outrange2:				    ;AN000;;LB. set carry
 26845 0000470C F9                      	STC				    ;AN000;;LB.
 26846                                  inexit: 				    ;AN000;;LB.
 26847 0000470D C3                      	retn				    ;AN000;;LB.
 26848                                  
 26849                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26850                                  ;---------------------------------------------------------------------------
 26851                                  ;
 26852                                  ; Procedure Name : Invalidate_Sc
 26853                                  ;
 26854                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26855                                  ;	   [CURSC_DRIVE]= current SC drive
 26856                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26857                                  ;	   [SC_CACHE_COUNT]= SC count
 26858                                  ;	   [SC_STATUS]= SC status word
 26859                                  ;	   [HIGH_SECTOR]:DX= sector number
 26860                                  ;
 26861                                  ; Function:
 26862                                  ;	invalidate secondary cache if in there
 26863                                  ; Output:
 26864                                  ;	[SC_STATUS] is updated
 26865                                  ;---------------------------------------------------------------------------
 26866                                  
 26867                                  INVALIDATE_SC:
 26868                                  	; SS override for all variables used
 26869                                  
 26870 0000470E E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26871 00004711 720C                    	JC	short outrange		    ;AN000;;LB. no
 26872 00004713 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26873 00004716 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26874 00004718 F7D0                    	NOT	AX			    ;AN000;;LB.
 26875 0000471A 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26876                                  outrange:				    ;AN000;;LB.
 26877 0000471F C3                      	retn				    ;AN000;;LB.
 26878                                  
 26879                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26880                                  ; 22/11/2022
 26881                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26882                                  
 26883                                  ;Break	<VIRREAD- virtually read data into buffer>
 26884                                  ;--------------------------------------------------------------------------
 26885                                  ;
 26886                                  ; Procedure Name : SC_FLAG
 26887                                  ;
 26888                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26889                                  ;		     1, continuous sectors were read into SC
 26890                                  ; Function:
 26891                                  ;	   Move data from SC to buffer
 26892                                  ; Output:
 26893                                  ;	 carry clear, data is moved to buffer
 26894                                  ;	 carry set, bad sector or exceeds maximum sector
 26895                                  ;	   SC_FLAG =0
 26896                                  ;	   CALLSCNT=1
 26897                                  ;	   SC_STATUS= -1 if succeeded
 26898                                  ;     
 26899                                  ;		       0 if failed
 26900                                  ;--------------------------------------------------------------------------
 26901                                  
 26902                                  VIRREAD:
 26903                                  	; SS override for all variables used
 26904                                  
 26905 00004720 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26906 00004726 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26907 00004728 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26908 0000472C 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26909 00004730 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26910 00004734 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26911 00004738 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26912 0000473E 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26913                                  
 26914                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26915 00004745 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26916 0000474B 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26917 0000474D 1E                      	PUSH	DS			    ;AN000;;LB.
 26918 0000474E 56                      	PUSH	SI			    ;AN000;;LB.
 26919 0000474F 06                      	PUSH	ES			    ;AN000;;LB.
 26920 00004750 57                      	PUSH	DI			    ;AN000;;LB.
 26921 00004751 52                      	PUSH	DX			    ;AN000;;LB.
 26922 00004752 51                      	PUSH	CX			    ;AN000;;LB.
 26923 00004753 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26924 00004755 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26925 00004758 59                      	POP	CX
 26926 00004759 5A                      	POP	DX			    ;AN000;;LB.
 26927 0000475A 5F                      	POP	DI			    ;AN000;;LB.
 26928 0000475B 07                      	POP	ES			    ;AN000;;LB.
 26929 0000475C 5E                      	POP	SI			    ;AN000;;LB.
 26930 0000475D 1F                      	POP	DS			    ;AN000;;LB.
 26931 0000475E EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26932                                  scerror:				    ;AN000;
 26933 00004760 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26934 00004767 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26935 0000476E 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26936 00004774 F9                      	STC				    ;AN000;;LB. carry set
 26937 00004775 C3                      	retn				    ;AN000;;LB.
 26938                                  sc2end: 				    ;AN000;
 26939 00004776 F8                      	CLC				    ;AN000;;LB. carry clear
 26940 00004777 C3                      	retn				    ;AN000;;LB.
 26941                                  
 26942                                  ; 30/04/2019 - Retro  DOS v4.0
 26943                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26944                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26945                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26946                                  
 26947                                  ;Break	<SC2BUF- move data from SC to buffer>
 26948                                  ;----------------------------------------------------------------------------
 26949                                  ;
 26950                                  ; Procedure Name : SC2BUF
 26951                                  ;
 26952                                  ; Inputs:  [SC_STATUS] = SC validity status
 26953                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26954                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26955                                  ; Function:
 26956                                  ;	   Move data from SC to buffer
 26957                                  ; Output:
 26958                                  ;	   carry clear, in SC  and data is moved
 26959                                  ;	   carry set, not in SC and data is not moved
 26960                                  ;---------------------------------------------------------------------------
 26961                                  
 26962                                  SC2BUF:
 26963                                  	; SS override for all variables used
 26964 00004778 E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26965                                  	;JC	short noSC		    ;AN000;LB. no
 26966                                  	; 24/09/2023
 26967 0000477B 723D                    	jc	short sexit
 26968 0000477D B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26969 00004780 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26970 00004782 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26971 00004787 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26972                                  ;entry SC2BUF2
 26973                                  SC2BUF2:				    ;AN000;
 26974                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26975                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26976                                  	; 24/09/2023
 26977 00004789 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26978 0000478D 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26979 0000478E F7E1                    	mul	cx
 26980 00004790 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26981 00004795 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26982 0000479A 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26983 0000479C 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26984 0000479E 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26985 000047A3 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26986                                  	; 24/09/2023
 26987                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26988 000047A8 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26989                                  ;entry MOVWORDS
 26990                                  MOVWORDS:				    ;AN000;
 26991 000047AA 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26992 000047B0 7403                    	JZ	short nodd		    ;AN000;LB. no
 26993 000047B2 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26994 000047B4 66                      	DB	66H			    ;AN000;LB. use double word move
 26995                                  nodd:
 26996 000047B5 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26997 000047B7 F8                      	CLC				    ;AN000;LB. clear carry
 26998 000047B8 C3                      	retn				    ;AN000;LB. exit
 26999                                  noSC:					    ;AN000;
 27000 000047B9 F9                      	STC				    ;AN000;LB. set carry
 27001                                  sexit:					    ;AN000;
 27002 000047BA C3                      	retn				    ;AN000;LB.
 27003                                  
 27004                                  ;============================================================================
 27005                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 27006                                  ;============================================================================
 27007                                  ; 29/07/2018 - Retro DOS v3.0
 27008                                  ; 19/05/2019 - Retro DOS v4.0
 27009                                  
 27010                                  ;	TITLE	MKNODE - Node maker
 27011                                  ;	NAME	MKNODE
 27012                                  
 27013                                  ;**	MKNODE.ASM
 27014                                  ;----------------------------------------------------------------------------
 27015                                  ;	Low level routines for making a new local file system node
 27016                                  ;	and filling in an SFT from a directory entry
 27017                                  ;
 27018                                  ;	BUILDDIR
 27019                                  ;	SETDOTENT
 27020                                  ;	MakeNode
 27021                                  ;	NEWENTRY
 27022                                  ;	FREEENT
 27023                                  ;	NEWDIR
 27024                                  ;	DOOPEN
 27025                                  ;	RENAME_MAKE
 27026                                  ;	CHECK_VIRT_OPEN
 27027                                  ;
 27028                                  ;	Revision history:
 27029                                  ;
 27030                                  ;	 AN000	version 4.0  Jan. 1988
 27031                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 27032                                  
 27033                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 27034                                  ;----------------------------------------------------------------------------
 27035                                  ;
 27036                                  ; Procedure Name : BUILDDIR,NEWDIR
 27037                                  ;
 27038                                  ; Inputs:
 27039                                  ;       ES:BP Points to DPB
 27040                                  ;       [THISSFT] Set if using NEWDIR entry point
 27041                                  ;               (used by ALLOCATE)
 27042                                  ;       [LASTENT] current last valid entry number in directory if no free
 27043                                  ;               entries
 27044                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 27045                                  ; Function:
 27046                                  ;       Grow directory if no free entries and not root
 27047                                  ; Outputs:
 27048                                  ;       CARRY SET IF FAILURE
 27049                                  ;       ELSE
 27050                                  ;          AX entry number of new entry
 27051                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 27052                                  ;               AX = first entry of new dir
 27053                                  ;       GETENT should be called to set [LASTENT]
 27054                                  ;
 27055                                  ;----------------------------------------------------------------------------
 27056                                  
 27057                                  ; 19/05/2019 - Retro DOS v4.0
 27058                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 27059                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27060                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 27061                                  
 27062                                  ; 24/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 MSDOS.SYS)
 27063                                  ; DOSCODE:8845h (MSDOS 6.22, MSDOS.SYS)
 27064                                  
 27065                                  BUILDDIR:
 27066                                  	; 29/07/2018 - Retro DOS v3.0
 27067                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 27068                                  
 27069 000047BB A1[D805]                        MOV     AX,[ENTFREE]
 27070 000047BE 83F8FF                          CMP     AX,-1 ; 0FFFFh
 27071                                  	;JZ	short CHECK_IF_ROOT
 27072                                          ;CLC
 27073                                          ;retn
 27074                                  	; 24/09/2023
 27075 000047C1 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 27076                                  
 27077                                  CHECK_IF_ROOT:
 27078 000047C3 833E[C205]00                    CMP     word [DIRSTART],0
 27079 000047C8 7502                            JNZ	short NEWDIR
 27080                                          ;STC
 27081                                  	; 24/09/2023
 27082                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 27083                                  builddir_cmc_retn:
 27084                                  	; 24/09/2023
 27085 000047CA F5                      	cmc	; cf=1 <-> cf=0
 27086                                  builddir_retn:
 27087 000047CB C3                              retn				; Can't grow root
 27088                                  
 27089                                  	;entry   NEWDIR
 27090                                  NEWDIR: 
 27091 000047CC 8B1E[C205]              	MOV     BX,[DIRSTART]
 27092 000047D0 09DB                            OR      BX,BX
 27093 000047D2 7405                            JZ	short NULLDIR
 27094 000047D4 E81B06                  	call	GETEOF
 27095 000047D7 72F2                            jc	short builddir_retn	; Screw up
 27096                                  NULLDIR:
 27097 000047D9 B90100                          MOV     CX,1
 27098 000047DC E82C05                  	call	ALLOCATE
 27099 000047DF 72EA                            jc	short builddir_retn
 27100 000047E1 8B16[C205]                      MOV     DX,[DIRSTART]
 27101 000047E5 09D2                            OR      DX,DX
 27102 000047E7 750D                            JNZ	short ADDINGDIR
 27103 000047E9 E8EEF5                  	call	SETDIRSRCH
 27104 000047EC 72DD                            jc	short builddir_retn
 27105 000047EE C706[4803]FFFF                  MOV     word [LASTENT],-1
 27106 000047F4 EB29                            JMP     SHORT GOTDIRREC
 27107                                  ADDINGDIR:
 27108 000047F6 53                              PUSH    BX
 27109 000047F7 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27110 000047FB E8140C                          call	IsEOF
 27111 000047FE 5B                              POP     BX
 27112 000047FF 7217                            JB	short NOTFIRSTGROW
 27113                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27114 00004801 891E[BC05]                      MOV     [CLUSNUM],BX
 27115                                  	; 24/09/2023
 27116                                  	;PUSH	CX ; (not necessary)
 27117 00004805 50                      	PUSH	AX
 27118 00004806 55                      	PUSH	BP
 27119 00004807 B401                            MOV     AH,1			; CLUSNUM update
 27120                                  	; 15/12/2022
 27121 00004809 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 27122                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27123                                  	;;mov	dl,[es:bp+0]
 27124                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 27125 0000480D 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 27126 00004811 89DD                            MOV     BP,BX 			; CLUSNUM
 27127 00004813 E86DDE                  	call	FastOpen_Update
 27128 00004816 5D                              POP     BP
 27129 00004817 58                              POP     AX
 27130                                  	; 24/09/2023
 27131                                          ;POP	CX
 27132                                  
 27133                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27134                                  NOTFIRSTGROW:
 27135 00004818 89DA                            MOV     DX,BX
 27136 0000481A 30DB                            XOR     BL,BL
 27137 0000481C E8C804                  	call	FIGREC
 27138                                  GOTDIRREC:
 27139                                  	;mov	cl,[es:bp+4]
 27140 0000481F 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 27141 00004823 FEC1                            INC     CL
 27142 00004825 30ED                            XOR     CH,CH
 27143                                  ZERODIR:
 27144 00004827 51                              PUSH    CX
 27145                                  	; 22/09/2023
 27146                                  	;;mov	byte [ALLOWED],18h
 27147                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 27148 00004828 B0FF                            MOV     AL,0FFH
 27149                                          ;call	GETBUFFR
 27150 0000482A E80910                          call	GETBUFFRD ; *
 27151 0000482D 7302                    	JNC	short GET_SSIZE
 27152 0000482F 59                              POP     CX
 27153 00004830 C3                              retn
 27154                                  
 27155                                  GET_SSIZE:
 27156                                  	;mov	cx,[es:bp+2]
 27157 00004831 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 27158 00004835 06                              PUSH    ES
 27159 00004836 C43E[E205]                      LES     DI,[CURBUF]
 27160                                  	;or	byte [es:di+5],4
 27161 0000483A 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 27162 0000483F 57                              PUSH    DI
 27163                                  	;;add	di,16	; MSDOS 3.3
 27164                                  	;add	di,20	; MSDOS 6.0	
 27165 00004840 83C714                          ADD     DI,BUFINSIZ
 27166 00004843 31C0                            XOR     AX,AX
 27167 00004845 D1E9                            SHR     CX,1
 27168 00004847 F3AB                            REP     STOSW
 27169 00004849 7301                            JNC	short EVENZ
 27170 0000484B AA                              STOSB
 27171                                  EVENZ:
 27172 0000484C 5F                              POP     DI
 27173                                  
 27174                                  	; MSDOS 6.0
 27175 0000484D 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27176                                  					;LB. if already dirty		  ;AN000;
 27177 00004852 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27178 00004854 E8E611                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 27179                                          
 27180                                  	;or	byte [es:di+5],40h
 27181 00004857 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27182                                  yesdirty7:
 27183 0000485C 07                              POP	ES
 27184 0000485D 59                              POP	CX
 27185                                  
 27186                                  	; 19/05/2019 - Retro DOS v4.0
 27187                                  
 27188                                  	; MSDOS 3.3
 27189                                  	;INC	DX
 27190                                  
 27191                                  	; MSDOS 6.0
 27192                                  	; 24/09/2023
 27193                                  	;add	dx,1
 27194                                  	;;adc	word [HIGH_SECTOR],0
 27195                                  	;; 24/09/2023
 27196                                  	;; ax=0
 27197                                  	;adc	[HIGH_SECTOR],ax ; 0
 27198                                  	; 24/09/2023
 27199 0000485E 42                      	inc	dx
 27200 0000485F 7504                    	jnz	short loop_zerodir
 27201 00004861 FF06[0706]              	inc	word [HIGH_SECTOR]
 27202                                  loop_zerodir:
 27203 00004865 E2C0                            LOOP    ZERODIR
 27204                                  
 27205 00004867 A1[4803]                        MOV     AX,[LASTENT]
 27206 0000486A 40                              INC     AX
 27207                                  	; 24/09/2023
 27208                                  	; cf=0
 27209                                  	;CLC
 27210 0000486B C3                              retn
 27211                                  
 27212                                  ;--------------------------------------------------------------------------
 27213                                  ;
 27214                                  ; Procedure Name : SETDOTENT
 27215                                  ;
 27216                                  ; set up a . or .. directory entry for a directory.
 27217                                  ;
 27218                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 27219                                  ;               AX contains ". " or ".."
 27220                                  ;               DX contains first cluster of entry
 27221                                  ;
 27222                                  ;----------------------------------------------------------------------------
 27223                                  
 27224                                  SETDOTENT:
 27225                                  ;	Fill in name field
 27226 0000486C AB                      	STOSW
 27227 0000486D B90400                  	MOV	CX,4
 27228 00004870 B82020                  	MOV	AX,"  " ; 2020h
 27229 00004873 F3AB                    	REP	STOSW
 27230 00004875 AA                      	STOSB
 27231                                  
 27232                                  ;	Set up attribute
 27233                                  	;mov	al, 10h
 27234 00004876 B010                    	MOV	AL,attr_directory
 27235 00004878 AA                      	STOSB
 27236                                  
 27237                                  ;	Initialize time and date of creation
 27238 00004879 83C70A                  	ADD	DI,10
 27239 0000487C 8B36[9E05]              	MOV	SI,[THISSFT]
 27240                                  	;mov	ax,[si+0Dh]
 27241 00004880 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 27242 00004883 AB                      	STOSW
 27243                                  	;mov	ax,[si+0Fh]
 27244 00004884 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 27245 00004887 AB                      	STOSW
 27246                                  
 27247                                  ;	Set up first cluster field
 27248 00004888 89D0                    	MOV	AX,DX
 27249 0000488A AB                      	STOSW
 27250                                  
 27251                                  ;	0 file size
 27252                                  	;XOR	AX,AX
 27253 0000488B 91                      	xchg	ax,cx ; 23/02/2024
 27254 0000488C AB                      	STOSW
 27255 0000488D AB                      	STOSW
 27256 0000488E C3                      	retn
 27257                                  
 27258                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 27259                                  ;---------------------------------------------------------------------------
 27260                                  ;
 27261                                  ; Procedure Name : MakeNode
 27262                                  ;
 27263                                  ; Inputs:
 27264                                  ;       AL - attribute to create
 27265                                  ;       AH = 0 if it is ok to truncate a file already by this name
 27266                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 27267                                  ;               (AH ignored on dirs and devices)
 27268                                  ;
 27269                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 27270                                  ;               a name already existant is ALWAYS an error in these cases.
 27271                                  ;
 27272                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 27273                                  ;               terminated)
 27274                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 27275                                  ;               ( = -1 if current dir not involved, else
 27276                                  ;                Points to first char after last "/" of current dir part)
 27277                                  ;       [THISCDS] Points to CDS being used
 27278                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 27279                                  ; Function:
 27280                                  ;       Make a new node
 27281                                  ; Outputs:
 27282                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27283                                  ;       CARRY SET IF ERROR
 27284                                  ;          AX = 1 A node by this name exists and is a directory
 27285                                  ;          AX = 2 A new node could not be created
 27286                                  ;          AX = 3 A node by this name exists and is a disk file
 27287                                  ;               (AH was NZ on input)
 27288                                  ;          AX = 4 Bad Path
 27289                                  ;               SI return from GetPath maintained
 27290                                  ;          AX = 5 Attribute mismatch
 27291                                  ;          AX = 6 Sharing Violation
 27292                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27293                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27294                                  ;       ELSE
 27295                                  ;          AX = 0 Disk Node
 27296                                  ;          AX = 3 Device Node (error in some cases)
 27297                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27298                                  ;               containing new node.
 27299                                  ;          [CURBUF+2]:BX Points to entry
 27300                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27301                                  ;          [THISSFT] is filled in
 27302                                  ;               sf_mode = unchanged.
 27303                                  ;          Attribute byte in entry is input AL
 27304                                  ; DS preserved, others destroyed
 27305                                  ;
 27306                                  ;-------------------------------------------------------------------------
 27307                                  
 27308                                  ; 19/05/2019 - Retro DOS v4.0
 27309                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27310                                  
 27311                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27312                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27313                                  
 27314                                  ; 23/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 27315                                  ; DOSCODE:8925h (MSDOS 6.22, MSDOS.SYS)
 27316                                  ; DOSCODE:951Ah (PCDOS 7.1, IBMDOS.COM)
 27317                                  
 27318                                  MakeNode:
 27319                                  	;mov	word [CREATING],0E5FFh
 27320 0000488F C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27321 00004895 50                      	PUSH	AX 		; Save AH value
 27322 00004896 C606[4C03]00            	MOV	byte [NoSetDir],0
 27323 0000489B A2[6D05]                	MOV	[SATTRIB],AL
 27324 0000489E E89CF5                  	call	GetPathNoSet
 27325 000048A1 88CA                    	MOV	DL,CL		; Save CL info
 27326                                  	;MOV	CX,AX		; Device ID to CH
 27327                                  	; 23/02/2024
 27328 000048A3 91                      	xchg	ax,cx
 27329 000048A4 58                      	POP	AX		; Get back AH
 27330 000048A5 732D                    	JNC	short make_exists ; File existed
 27331 000048A7 7505                    	JNZ	short make_err_4 ; Path bad
 27332 000048A9 80FA80                  	CMP	DL,80h		; Check "CL" return from GETPATH
 27333 000048AC 7405                    	JZ	short make_type	; Name simply not found, and no metas
 27334                                  make_err_4:
 27335 000048AE B004                    	MOV	AL,4		; case 1 bad path
 27336                                  make_err_ret:
 27337                                  	;XOR	AH,AH
 27338                                  	; 23/02/2024
 27339 000048B0 98                      	cbw
 27340 000048B1 F9                      	STC
 27341                                  ;make_retn:	; 22/11/2022
 27342 000048B2 C3                      	retn
 27343                                  
 27344                                  	;entry	RENAME_MAKE	; Used by DOS_RENAME to "copy" a node
 27345                                  RENAME_MAKE:
 27346                                  make_type:
 27347                                  ;Extended Open hooks
 27348                                  	; MSDOS 6.0
 27349                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27350 000048B3 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27351 000048B8 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27352 000048BA 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27353                                  					;FT. set for extended open ;AN000;
 27354                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27355 000048BF F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27356 000048C4 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27357 000048C6 F9                      	STC				;FT. set carry			;AN000;
 27358 000048C7 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27359                                  	; 22/11/2022
 27360                                  make_retn:
 27361                                  	;return
 27362 000048CA C3                      	retn				;FT.				;AN000;
 27363                                  
 27364                                  ;	Extended Open hooks
 27365                                  
 27366                                  make_type2:
 27367 000048CB C43E[9E05]              	LES	DI,[THISSFT]
 27368 000048CF 31C0                    	XOR	AX,AX		; nothing exists Disk Node
 27369 000048D1 F9                      	STC			; Not found
 27370 000048D2 EB59                    	JMP	short make_new
 27371                                  
 27372                                  ; The node exists. It may be either a device, directory or file:
 27373                                  ;   Zero set => directory
 27374                                  ;   High bit of CH on => device
 27375                                  ;   else => file
 27376                                  
 27377                                  make_exists:
 27378 000048D4 7447                    	JZ	short make_exists_dir
 27379 000048D6 B003                    	MOV	AL,3		; file exists type 3  (error or device node)
 27380                                  	;test	byte [ATTRIB],18h
 27381 000048D8 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27382 000048DD 753A                    	JNZ	short make_err_ret_5
 27383                                  				; Cannot already exist as Disk or Device Node
 27384                                  				;  if making DIR or Volume ID
 27385 000048DF 08ED                    	OR	CH,CH
 27386 000048E1 781A                    	JS	short make_share ; No further checks on attributes if device
 27387 000048E3 08E4                    	OR	AH,AH
 27388 000048E5 75C9                    	JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27389 000048E7 51                      	PUSH	CX		; Save device ID
 27390 000048E8 8E06[E405]              	MOV	ES,[CURBUF+2]
 27391                                  	;mov	ch,[es:bx+0Bh]
 27392 000048EC 268A6F0B                	MOV	CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27393                                  	;test	ch,1
 27394 000048F0 F6C501                  	test	CH,attr_read_only
 27395 000048F3 7523                    	JNZ	short make_err_ret_5P ; Cannot create on read only files
 27396 000048F5 E8D5F7                  	call	MatchAttributes
 27397 000048F8 59                      	POP	CX		; Devid back in CH
 27398 000048F9 751E                    	JNZ	short make_err_ret_5 ; Attributes not ok
 27399 000048FB 30C0                    	XOR	AL,AL		; AL = 0, Disk Node
 27400                                  
 27401                                  make_share:
 27402                                  	;XOR	AH,AH
 27403                                  	; 23/02/2024
 27404 000048FD 98                      	cbw
 27405 000048FE 50                      	PUSH	AX		; Save Disk or Device node
 27406 000048FF 51                      	PUSH	CX		; Save Device ID
 27407 00004900 88EC                    	MOV	AH,CH		; Device ID to AH
 27408 00004902 E84501                  	CALL	DOOPEN		; Fill in SFT for share check
 27409 00004905 C43E[9E05]              	LES	DI,[THISSFT]
 27410 00004909 56                      	push	si
 27411 0000490A 53                      	push	bx		; Save CURBUF pointers
 27412 0000490B E85229                  	call	ShareEnter
 27413 0000490E 735A                    	jnc	short MakeEndShare
 27414                                  
 27415                                  ; User failed request.
 27416 00004910 5B                      	pop	bx
 27417 00004911 5E                      	pop	si
 27418 00004912 59                      	pop	cx
 27419 00004913 58                      	pop	ax
 27420                                  
 27421                                  Make_Share_ret:
 27422 00004914 B006                    	MOV	AL,6
 27423 00004916 EB98                    	JMP	short make_err_ret
 27424                                  
 27425                                  make_err_ret_5P:
 27426 00004918 59                      	POP	CX		; Get back device ID
 27427                                  make_err_ret_5:
 27428 00004919 B005                    	MOV     AL,5		; Attribute mismatch
 27429                                          ; 22/11/2022
 27430 0000491B EB93                    	JMP	short make_err_ret
 27431                                  
 27432                                  make_exists_dir:
 27433 0000491D B001                    	MOV	AL,1		; exists as directory, always an error
 27434                                  	; 22/11/2022
 27435 0000491F EB8F                    	JMP	short make_err_ret
 27436                                  
 27437                                  make_save:
 27438 00004921 50                      	PUSH	AX		; Save whether Disk or File
 27439 00004922 89C8                    	MOV	AX,CX		; Device ID to AH
 27440 00004924 E87400                  	CALL	NEWENTRY
 27441 00004927 58                      	POP	AX		; 0 if Disk, 3 if File
 27442 00004928 73A0                    	jnc	short make_retn
 27443 0000492A B002                    	MOV	AL,2		; create failed case 2
 27444                                  make_save_retn:
 27445 0000492C C3                      	retn
 27446                                  
 27447                                  make_new:
 27448 0000492D E8F1FF                  	call	make_save
 27449 00004930 72FA                    	jc	short make_save_retn	; case 2 fail
 27450                                  	;test	byte [ATTRIB],10h
 27451 00004932 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27452 00004937 75F3                    	jnz	short make_save_retn	; Don't "open" directories,
 27453                                  					; so don't tell the sharer about them
 27454 00004939 50                      	push	ax
 27455 0000493A 53                      	push	bx
 27456 0000493B 56                      	push	si
 27457 0000493C E82129                  	call	ShareEnter
 27458 0000493F 5E                      	pop	si
 27459 00004940 5B                      	pop	bx
 27460 00004941 58                      	pop	ax
 27461 00004942 73E8                    	jnc	short make_save_retn
 27462                                  
 27463                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27464                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27465                                  ; possible: delete the newly created directory entry and return share_error.
 27466                                  
 27467 00004944 50                      	PUSH	AX
 27468 00004945 C43E[E205]              	LES	DI,[CURBUF]
 27469                                  	;mov	byte [es:bx],0E5h
 27470 00004949 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27471                                  	
 27472                                  	; MSDOS 6.0
 27473                                  	;test	byte [es:di+5],40h
 27474 0000494D 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27475                                  					;LB. if already dirty		  ;AN000;
 27476 00004952 7508                    	JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27477                                  	; 22/11/2022
 27478 00004954 E8E610                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27479                                  	;or	byte [es:di+5],40h
 27480 00004957 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27481                                  yesdirty8:
 27482 0000495C C42E[8A05]              	LES	BP,[THISDPB]
 27483                                  	; 15/12/2022
 27484 00004960 268A4600                	mov	al,[ES:BP]
 27485                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27486                                  	;;mov	al,[es:bp+0]
 27487                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27488 00004964 E8D10F                  	call	FLUSHBUF		; write out buffer.
 27489 00004967 58                      	POP	AX
 27490 00004968 EBAA                    	jmp	short Make_Share_ret
 27491                                  
 27492                                  ; We have found an existing file. We have also entered it into the share set.
 27493                                  ; At this point we need to call newentry to correctly address the problem of
 27494                                  ; getting rid of old data (create an existing file) or creating a new
 27495                                  ; directory entry (create a new file). Unfortunately, this operation may
 27496                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27497                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27498                                  ; the share set now, do the operation and then reassert the share access.
 27499                                  ;
 27500                                  ; We are allowed to do this! There is no window! After all, we are in
 27501                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27502                                  
 27503                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27504                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27505                                  
 27506                                  MakeEndShare:
 27507 0000496A C43E[9E05]              	LES	DI,[THISSFT]		; grab SFT
 27508 0000496E 31C0                    	XOR	AX,AX
 27509 00004970 E880C9                  	call	ECritSFT
 27510 00004973 268705                  	xchg	AX,[ES:DI]
 27511                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27512 00004976 50                      	push	ax
 27513 00004977 57                      	push	di
 27514 00004978 06                      	push	es
 27515 00004979 9C                      	PUSHF
 27516 0000497A E8DE28                  	call	ShareEnd		; remove sharing
 27517 0000497D 9D                      	POPF
 27518 0000497E 07                      	pop	es
 27519 0000497F 5F                      	pop	di
 27520 00004980 268F05                  	pop	word [ES:DI]
 27521                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27522 00004983 E888C9                  	call	LCritSFT
 27523                                  	; 22/11/2022
 27524                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27525 00004986 5B                      	pop	bx
 27526 00004987 5E                      	pop	si
 27527 00004988 59                      	pop	cx
 27528 00004989 58                      	pop	ax
 27529 0000498A E894FF                  	CALL	make_save
 27530                                  
 27531                                  ; If the user failed, we do not reenter into the sharing set.
 27532                                  
 27533 0000498D 729D                    	jc	short make_save_retn	; bye if error
 27534 0000498F 50                      	push	ax
 27535 00004990 53                      	push	bx
 27536 00004991 56                      	push	si
 27537 00004992 9C                      	PUSHF
 27538 00004993 E8CA28                  	call	ShareEnter
 27539 00004996 9D                      	POPF
 27540 00004997 5E                      	pop	si
 27541 00004998 5B                      	pop	bx
 27542 00004999 58                      	pop	ax
 27543                                  
 27544                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27545                                  
 27546                                  makeendshare_retn:
 27547 0000499A C3                      	retn
 27548                                  
 27549                                  ;---------------------------------------------------------------------------
 27550                                  ;
 27551                                  ; Procedure Name : NEWENTRY
 27552                                  ;
 27553                                  ; Inputs:
 27554                                  ;	  [THISSFT] set
 27555                                  ;	  [THISDPB] set
 27556                                  ;	  [LASTENT] current last valid entry number in directory if no free
 27557                                  ;		  entries
 27558                                  ;	  [VOLID] set if a volume ID was found during search
 27559                                  ;	Attrib Contains attributes for new file
 27560                                  ;	  [DIRSTART] Points to first cluster of dir (0 means root)
 27561                                  ;	  CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27562                                  ;		  NC means file existed (device)
 27563                                  ;		  C  means file did not exist
 27564                                  ;	  AH = Device ID byte
 27565                                  ;	  If FILE
 27566                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27567                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27568                                  ;	  If device
 27569                                  ;	  DS:BX points to start of "fake" directory entry
 27570                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27571                                  ;		  (has DWORD pointer to device header)
 27572                                  ; Function:
 27573                                  ;	  Make a new directory entry
 27574                                  ;	  If an old one existed it is truncated first
 27575                                  ; Outputs:
 27576                                  ;	  Carry set if error
 27577                                  ;		  Can't grow dir, atts didn't match, attempt to make 2nd
 27578                                  ;		  vol ID, user FAILed to I 24
 27579                                  ;	  else
 27580                                  ;		  outputs of DOOPEN
 27581                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27582                                  ;
 27583                                  ;----------------------------------------------------------------------------
 27584                                  
 27585                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27586                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27587                                  
 27588                                  NEWENTRY:
 27589 0000499B C42E[8A05]              	LES	BP,[THISDPB]
 27590 0000499F 7315                    	JNC	short EXISTENT
 27591 000049A1 803E[4A03]00            	CMP	byte [FAILERR],0
 27592                                  	;STC
 27593                                  	;jnz	short makeendshare_retn	; User FAILed, node might exist
 27594                                  	; 24/09/2023
 27595 000049A6 750C                    	jnz	short ERRRET3
 27596 000049A8 E810FE                  	CALL	BUILDDIR	; Try to build dir
 27597 000049AB 72ED                    	jc	short makeendshare_retn	; Failed
 27598 000049AD E8FDF3                  	call	GETENT		; Point at that free entry
 27599 000049B0 72E8                    	jc	short makeendshare_retn	; Failed
 27600 000049B2 EB0E                    	JMP	SHORT FREESPOT
 27601                                  
 27602                                  ERRRET3:
 27603 000049B4 F9                      	STC
 27604                                  newentry_retn:
 27605 000049B5 C3                      	retn
 27606                                  
 27607                                  EXISTENT:
 27608 000049B6 08E4                    	OR	AH,AH		; Check if file is I/O device
 27609 000049B8 7903                    	JNS	short NOT_DEV1
 27610 000049BA E98D00                  	JMP	DOOPEN		; If so, proceed with open
 27611                                  
 27612                                  NOT_DEV1:
 27613 000049BD E82801                  	call	FREEENT	; Free cluster chain
 27614 000049C0 72F3                    	jc	short newentry_retn ; Failed
 27615                                  FREESPOT:
 27616                                  	;test	byte [ATTRIB],8
 27617 000049C2 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27618 000049C7 7407                    	JZ	short NOTVOLID
 27619 000049C9 803E[7B05]00            	CMP	BYTE [VOLID],0
 27620 000049CE 75E4                    	JNZ	short ERRRET3	; Can't create a second volume ID
 27621                                  NOTVOLID:
 27622 000049D0 8E06[E405]              	MOV	ES,[CURBUF+2]
 27623 000049D4 89DF                    	MOV	DI,BX
 27624                                  
 27625 000049D6 BE[4B05]                	MOV	SI,NAME1
 27626                                  
 27627 000049D9 B90500                  	MOV	CX,5
 27628 000049DC F3A5                    	REP	MOVSW
 27629 000049DE A4                      	MOVSB			; Move name into dir entry
 27630 000049DF A0[6B05]                	MOV	AL,[ATTRIB]
 27631 000049E2 AA                      	STOSB			; Attributes
 27632                                  
 27633                                  ;; File Tagging for Create DOS 4.00
 27634 000049E3 B105                    	MOV	CL,5		;FT. assume normal FBUGBUG	;AN000;
 27635                                  ;; File Tagging for Create DOS 4.00
 27636                                  
 27637 000049E5 31C0                    	XOR	AX,AX
 27638 000049E7 F3AB                    	REP	STOSW		; Zero pad
 27639 000049E9 E8FAC0                  	call	DATE16
 27640 000049EC 92                      	XCHG	AX,DX
 27641 000049ED AB                      	STOSW			; dir_time
 27642 000049EE 92                      	XCHG	AX,DX
 27643 000049EF AB                      	STOSW			; dir_date
 27644 000049F0 31C0                    	XOR	AX,AX
 27645 000049F2 57                      	PUSH	DI		; Correct SI input value
 27646                                  				; (recomputed for new buffer)
 27647 000049F3 AB                      	STOSW			; Zero dir_first and size
 27648 000049F4 AB                      	STOSW
 27649 000049F5 AB                      	STOSW
 27650                                  updnxt:
 27651 000049F6 8B36[E205]              	MOV	SI,[CURBUF]
 27652                                  
 27653                                  	; 19/05/2019 - Retro DOS v4.0
 27654                                  
 27655                                  	; MSDOS 6.0
 27656 000049FA 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27657                                  				;LB. if already dirty		  ;AN000;
 27658 000049FF 7508                    	JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27659 00004A01 E83910                  	call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27660                                  	
 27661                                  	;or	byte [es:si+5],40h
 27662 00004A04 26804C0540              	OR	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27663                                  yesdirty9:
 27664 00004A09 C42E[8A05]              	LES	BP,[THISDPB]
 27665                                  	; 15/12/2022
 27666 00004A0D 268A4600                	MOV	AL,[ES:BP]
 27667                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27668                                  	;;mov	al,[es:bp+0]
 27669                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27670 00004A11 50                      	PUSH	AX
 27671 00004A12 53                      	PUSH	BX
 27672                                  
 27673                                  ; If we have a file, we need to increment the open ref. count so that
 27674                                  ; we have some protection against invalid media changes if an Int 24
 27675                                  ; error occurs.
 27676                                  ; Do nothing for a device.
 27677                                  
 27678 00004A13 06                      	push	es
 27679 00004A14 57                      	push	di
 27680 00004A15 C43E[9E05]              	LES	DI,[THISSFT]
 27681                                  	;test	word [es:di+5],80h
 27682                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27683 00004A19 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27684 00004A1E 751A                    	jnz	short GotADevice
 27685 00004A20 1E                      	push	ds
 27686 00004A21 53                      	push	bx
 27687 00004A22 C51E[8A05]              	LDS	BX,[THISDPB]
 27688                                  	;mov	[es:di+7],bx
 27689 00004A26 26895D07                	MOV	[ES:DI+SF_ENTRY.sf_devptr],BX
 27690 00004A2A 8CDB                    	MOV	BX,DS
 27691                                  	;mov	[es:di+9],bx
 27692 00004A2C 26895D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],BX
 27693 00004A30 5B                      	pop	bx
 27694 00004A31 1F                      	pop	ds ; need to use DS for segment later on
 27695                                  
 27696 00004A32 E8B4FA                  	call	DEV_OPEN_SFT	; increment ref. count
 27697 00004A35 C606[A20A]01            	mov	byte [VIRTUAL_OPEN],1; set flag
 27698                                  
 27699                                  GotADevice:
 27700 00004A3A 5F                      	pop	di
 27701 00004A3B 07                      	pop	es
 27702                                  
 27703 00004A3C E8F90E                  	call	FLUSHBUF
 27704                                  
 27705 00004A3F E8EC00                  	Call	CHECK_VIRT_OPEN	; decrement ref. count	;AN000;
 27706                                  
 27707 00004A42 5B                      	POP	BX
 27708 00004A43 58                      	POP	AX
 27709 00004A44 5E                      	POP	SI		; Get SI input back
 27710 00004A45 88C4                    	MOV	AH,AL		; Get I/O driver number back
 27711 00004A47 7301                    	jnc	short DOOPEN	
 27712 00004A49 C3                      	retn			; Failed
 27713                                  	
 27714                                  ;NOTE FALL THROUGH
 27715                                  
 27716                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27717                                  
 27718                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27719                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27720                                  
 27721                                  ; DOOPEN
 27722                                  ;----------------------------------------------------------------------------
 27723                                  ;
 27724                                  ; Inputs:
 27725                                  ;	  [THISDPB] points to DPB if file
 27726                                  ;	  [THISSFT] points to SFT being used
 27727                                  ;	  AH = Device ID byte
 27728                                  ;	  If FILE
 27729                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27730                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27731                                  ;	  If device
 27732                                  ;	  DS:BX points to start of "fake" directory entry
 27733                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27734                                  ;		  (has DWORD pointer to device header)
 27735                                  ; Function:
 27736                                  ;	  Fill in SFT from dir entry
 27737                                  ; Outputs:
 27738                                  ;	  CARRY CLEAR
 27739                                  ;	  sf_ref_count and sf_mode fields not altered
 27740                                  ;	  sf_flags high byte = 0
 27741                                  ;	  sf_flags low byte = AH except
 27742                                  ;	  sf_flags Bit 6 set (not dirty or not EOF)
 27743                                  ;	  sf_attr sf_date sf_time sf_name set from entry
 27744                                  ;	  sf_position = 0
 27745                                  ;	  If device
 27746                                  ;	  sf_devptr = dword at dir_first (pointer to device header)
 27747                                  ;	  sf_size = 0
 27748                                  ;	  If file
 27749                                  ;	  sf_firclus sf_size set from entry
 27750                                  ;	  sf_devptr = [THISDPB]
 27751                                  ;	  sf_cluspos = 0
 27752                                  ;	  sf_lstclus = sf_firclus
 27753                                  ;	  sf_dirsec sf_dirpos set
 27754                                  ; DS,SI,BX preserved, others destroyed
 27755                                  ;
 27756                                  ;----------------------------------------------------------------------------
 27757                                  
 27758                                  	;entry	DOOPEN
 27759                                  DOOPEN:
 27760                                  ;	Generate and store attribute
 27761                                  
 27762 00004A4A 88E6                    	MOV	DH,AH	  	; AH to different place
 27763 00004A4C C43E[9E05]              	LES	DI,[THISSFT]
 27764                                  	;add	di,4
 27765 00004A50 83C704                  	ADD	DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27766                                  	; 24/09/2023
 27767 00004A53 31C0                    	xor	ax,ax
 27768                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27769                                  				;  attribute of 0 (for R/O testing etc).
 27770 00004A55 08F6                    	OR	DH,DH		; See if our assumption good.
 27771 00004A57 7807                    	JS	short DEV_SFT1	; If device DS=DOSGROUP
 27772 00004A59 8E1E[E405]              	MOV	DS,[CURBUF+2]
 27773                                  	;mov	al,[BX+0Bh]
 27774 00004A5D 8A470B                  	MOV	AL,[BX+dir_entry.dir_attr]
 27775                                  				; If file, get attrib from dir entry
 27776                                  DEV_SFT1:
 27777 00004A60 AA                      	STOSB			; sf_attr, ES:DI -> sf_flags
 27778                                  
 27779                                  ;	Generate and store flags word
 27780                                  
 27781                                  	; 24/09/2023
 27782                                  	;XOR	AX,AX
 27783                                  	; ah=0
 27784 00004A61 88F0                    	MOV	AL,DH
 27785                                  	;or	al,40h
 27786 00004A63 0C40                    	OR	AL,devid_file_clean
 27787 00004A65 AB                      	STOSW			; sf_flags, ES:DI -> sf_devptr
 27788                                  
 27789                                  ;	Generate and store device pointer
 27790                                  
 27791 00004A66 1E                      	PUSH	DS
 27792                                  	;lds	ax,[bx+1Ah]
 27793 00004A67 C5471A                  	LDS	AX,[BX+dir_entry.dir_first] ; Assume device
 27794 00004A6A 08F6                    	OR	DH,DH
 27795 00004A6C 7805                    	JS	short DEV_SFT2
 27796                                  
 27797                                  ;hkn; SS override
 27798 00004A6E 36C506[8A05]            	LDS	AX,[SS:THISDPB]	; Was file
 27799                                  DEV_SFT2:
 27800 00004A73 AB                      	STOSW			; store offset
 27801 00004A74 8CD8                    	MOV	AX,DS
 27802 00004A76 1F                      	POP	DS
 27803 00004A77 AB                      	STOSW			; store segment
 27804                                  				; ES:DI -> sf_firclus
 27805                                  
 27806                                  ;	Generate pointer to, generate and store first cluster
 27807                                  ;	(irrelevant for devices)
 27808                                  
 27809 00004A78 56                      	PUSH	SI		; Save pointer to dir_first
 27810 00004A79 A5                      	MOVSW			; dir_first -> sf_firclus
 27811                                  				; DS:SI -> dir_size_l, ES:DI -> sf_time
 27812                                  
 27813                                  ;	Copy time/date of last modification
 27814                                  
 27815                                  	;sub	si,6
 27816 00004A7A 83EE06                  	SUB	SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27817                                  				; DS:SI->dir_time
 27818 00004A7D A5                      	MOVSW			; dir_time -> sf_time
 27819                                  				; DS:SI -> dir_date, ES:DI -> sf_date
 27820 00004A7E A5                      	MOVSW			; dir_date -> sf_date
 27821                                  				; DS:SI -> dir_first, ES:DI -> sf_size
 27822                                  
 27823                                  ;	Generate and store file size (0 for devices)
 27824                                  
 27825 00004A7F AD                      	LODSW			; skip dir_first, DS:SI -> dir_size_l
 27826 00004A80 AD                      	LODSW			; dir_size_l in AX, DS:SI -> dir_size_h
 27827                                  	;MOV	CX,AX		; dir_size_l in CX
 27828                                  	; 23/02/2024
 27829 00004A81 91                      	xchg	ax,cx
 27830 00004A82 AD                      	LODSW			; dir_size_h (size AX:CX), DS:SI -> ????
 27831 00004A83 08F6                    	OR	DH,DH
 27832 00004A85 7904                    	JNS	short FILE_SFT1
 27833 00004A87 31C0                    	XOR	AX,AX
 27834 00004A89 89C1                    	MOV	CX,AX		; Devices are open ended
 27835                                  FILE_SFT1:
 27836 00004A8B 91                      	XCHG	AX,CX
 27837 00004A8C AB                      	STOSW			; Low word of sf_size
 27838 00004A8D 91                      	XCHG	AX,CX
 27839 00004A8E AB                      	STOSW			; High word of sf_size
 27840                                  				; ES:DI -> sf_position
 27841                                  ; Initialize position to 0
 27842                                  
 27843 00004A8F 31C0                    	XOR	AX,AX
 27844 00004A91 AB                      	STOSW
 27845 00004A92 AB                      	STOSW			; sf_position
 27846                                  				; ES:DI -> sf_cluspos
 27847                                  
 27848                                  ; Generate cluster optimizations for files
 27849                                  
 27850 00004A93 08F6                    	OR	DH,DH
 27851 00004A95 7843                    	JS	short DEV_SFT3
 27852 00004A97 AB                      	STOSW			; sf_cluspos ; 19h
 27853                                  	;mov	ax,[bx+1Ah]
 27854 00004A98 8B471A                  	MOV	AX,[BX+dir_entry.dir_first]
 27855                                  	; 19/05/2019
 27856                                  	; MSDOS 3.3
 27857                                  	;STOSW			; sf_lstclus ; 1Bh
 27858                                  	; MSDOS 6.0
 27859 00004A9B 57                      	PUSH	DI		;AN004; save dirsec offset
 27860                                  	;sub	di,1Bh
 27861 00004A9C 83EF1B                  	SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27862                                  	;mov	[es:di+35h],ax
 27863 00004A9F 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27864 00004AA3 5F                      	POP	DI		;AN004; restore dirsec offset
 27865                                  
 27866                                  ; DOS 3.3  FastOpen  6/13/86
 27867                                  
 27868 00004AA4 1E                      	PUSH	DS
 27869                                  
 27870                                  ;hkn; SS is DOSDATA
 27871 00004AA5 16                      	push	ss
 27872 00004AA6 1F                      	pop	ds
 27873                                  	;test	byte [FastOpenFlg],4
 27874 00004AA7 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27875 00004AAC 7411                    	JZ	short Not_FastOpen
 27876                                  
 27877                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27878 00004AAE BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 27879                                  
 27880                                  	;mov	ax,[si+1]
 27881 00004AB1 8B4401                  	MOV	AX,[SI+FEI.dirsec]
 27882 00004AB4 AB                      	STOSW		  	; sf_dirsec
 27883                                  	; MSDOS 6.0
 27884                                  	;mov	ax,[si+3]
 27885 00004AB5 8B4403                  	MOV	AX,[SI+FEI.dirsec+2]
 27886                                  		;;; changed for >32mb
 27887 00004AB8 AB                      	STOSW		  	; sf_dirsec
 27888                                  	; 19/08//2018
 27889 00004AB9 8A04                    	mov	al,[SI]
 27890                                  	;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27891 00004ABB AA                      	STOSB		  	; sf_dirpos
 27892 00004ABC 1F                      	POP	DS
 27893                                  	;JMP	short Next_Name
 27894                                  	; 24/09/2023
 27895 00004ABD EB1E                    	jmp	short FILE_SFT2	; cf=0 (after 'test' instruction)
 27896                                  
 27897                                  ; DOS 3.3  FastOpen  6/13/86
 27898                                  
 27899                                  Not_FastOpen:
 27900                                  	;POP	DS		; normal path
 27901                                  
 27902                                  ;hkn; SS override
 27903                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27904                                  	; 16/12/2022
 27905                                  	; 28/07/2019
 27906 00004ABF 8B36[E205]              	mov	si,[CURBUF]
 27907 00004AC3 1F                      	pop	ds
 27908                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27909                                  	;pop	ds
 27910                                  	;mov	si,[ss:CURBUF]
 27911                                  	
 27912                                  	;mov	ax,[si+6]
 27913 00004AC4 8B4406                  	MOV	AX,[SI+BUFFINFO.buf_sector]	;F.C. >32mb ;AN000;
 27914 00004AC7 AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 27915                                  	; 19/05/2019	
 27916                                  	; MSDOS 6.0
 27917                                  	;mov	ax,[si+8]
 27918 00004AC8 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27919 00004ACB AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 27920                                  	
 27921 00004ACC 89D8                    	MOV	AX,BX
 27922                                  	;;add	si,16	; MSDOS 3.3
 27923                                  	;add	si,20	; MSDOS 6.0
 27924 00004ACE 83C614                  	ADD	SI,BUFINSIZ	; DS:SI-> start of data in buffer
 27925 00004AD1 29F0                    	SUB	AX,SI		; AX = BX relative to start of sector
 27926                                  	;mov	cl,32
 27927 00004AD3 B120                    	MOV	CL,dir_entry.size
 27928 00004AD5 F6F1                    	DIV	CL
 27929 00004AD7 AA                      	STOSB		  	; sf_dirpos
 27930                                  Next_Name:
 27931 00004AD8 EB03                    	JMP	SHORT FILE_SFT2
 27932                                  
 27933                                  	; 24/09/2023
 27934                                  	; cf=0 (after 'or' instruction)
 27935                                  DEV_SFT3:
 27936                                  	;add	di,7
 27937 00004ADA 83C707                  	ADD	DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27938                                  FILE_SFT2:
 27939                                  
 27940                                  ; Copy in the object's name
 27941                                  
 27942 00004ADD 89DE                    	MOV	SI,BX		; DS:SI points to dir_name
 27943 00004ADF B90B00                  	MOV	CX,11
 27944 00004AE2 F3A4                    	REP	MOVSB		; sf_name
 27945 00004AE4 5E                      	POP	SI		; recover DS:SI -> dir_first
 27946                                  
 27947                                  ;hkn; SS is DOSDATA
 27948 00004AE5 16                      	push	ss
 27949 00004AE6 1F                      	pop	ds
 27950                                  	; 24/09/2023
 27951                                  	; cf=0
 27952                                  	;CLC
 27953 00004AE7 C3                      	retn
 27954                                  
 27955                                  ;---------------------------------------------------------------------------
 27956                                  ;
 27957                                  ; Procedure Name : FREEENT
 27958                                  ;
 27959                                  ; Inputs:
 27960                                  ;	  ES:BP -> DPB
 27961                                  ;	  [CURBUF] Set
 27962                                  ;	  [CURBUF+2]:BX points to directory entry
 27963                                  ;	  [CURBUF+2]:SI points to above dir_first
 27964                                  ; Function:
 27965                                  ;	  Free the cluster chain for the entry if present
 27966                                  ; Outputs:
 27967                                  ;	  Carry set if error (currently user FAILed to I 24)
 27968                                  ;	  (NOTE dir_firclus and dir_size_l/h are wrong)
 27969                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27970                                  ;---------------------------------------------------------------------------
 27971                                  
 27972                                  	; 24/02/2024 - Retro DOS v4.2
 27973                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27974                                  FREEENT:
 27975 00004AE8 1E                      	PUSH	DS
 27976 00004AE9 C53E[E205]              	LDS	DI,[CURBUF]
 27977 00004AED 8B0C                    	MOV	CX,[SI]		; Get pointer to clusters
 27978                                  	; 19/05/2019 - Retro DOS v4.0
 27979                                  	; MSDOS 6.0
 27980 00004AEF 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb  ;AN000;
 27981                                  ;hkn; SS override
 27982 00004AF2 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	      ;F.C. >32mb  ;AN000;
 27983 00004AF7 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]
 27984 00004AFA 1F                      	POP	DS
 27985 00004AFB 83F902                  	CMP	CX,2
 27986 00004AFE 722C                    	JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27987                                  	;cmp	cx,[es:bp+0Dh]
 27988 00004B00 263B4E0D                	CMP	CX,[ES:BP+DPB.MAX_CLUSTER]
 27989                                  	;JA	short RET1	; Treat like zero length file (firclus mucked)
 27990 00004B04 7715                    	ja	short freeent_retn ; 24/02/2024
 27991 00004B06 29FB                    	SUB	BX,DI
 27992 00004B08 53                      	PUSH	BX		; Save offset
 27993 00004B09 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27994 00004B0D 52                      	PUSH	DX		; Save sector number
 27995 00004B0E 89CB                    	MOV	BX,CX
 27996 00004B10 E8A402                  	call	RELEASE		; Free any data allocated
 27997 00004B13 5A                      	POP	DX
 27998 00004B14 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27999 00004B18 7302                    	JNC	short GET_BUF_BACK
 28000 00004B1A 5B                      	POP	BX
 28001                                  freeent_retn:
 28002 00004B1B C3                      	retn			; Screw up
 28003                                  
 28004                                  GET_BUF_BACK:
 28005                                  	; 22/09/2023
 28006                                  	;;mov	byte [ALLOWED],18h
 28007                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 28008                                  	;XOR	AL,AL ; *
 28009                                  	;call	GETBUFFR	; Get sector back
 28010 00004B1C E8150D                  	call	GETBUFFER ; *	; pre read
 28011                                  
 28012 00004B1F 5B                      	POP	BX		; Get offset back
 28013 00004B20 72F9                    	jc	short freeent_retn
 28014 00004B22 E8EEEA                  	call	SET_BUF_AS_DIR
 28015 00004B25 031E[E205]              	ADD	BX,[CURBUF]	; Correct it for new buffer
 28016                                  
 28017                                  	;MOV	SI,BX
 28018                                  	;;add	si,1Ah
 28019                                  	;ADD	SI,dir_entry.dir_first	; Get corrected SI
 28020                                  	; 24/02/2024
 28021                                  	;lea	si,[bx+1Ah]
 28022 00004B29 8D771A                  	lea	si,[bx+dir_entry.dir_first]
 28023                                  RET1:
 28024 00004B2C F8                      	CLC
 28025 00004B2D C3                      	retn
 28026                                  
 28027                                  ;---------------------------------------------------------------------------
 28028                                  ;
 28029                                  ; Procedure Name : CHECK_VIRT_OPEN
 28030                                  ;
 28031                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 28032                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 28033                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 28034                                  ; flag [VIRTUAL_OPEN].
 28035                                  ; No registers affected (including flags).
 28036                                  ; On input, [THISSFT] points to current SFT.
 28037                                  ;
 28038                                  ;---------------------------------------------------------------------------
 28039                                  
 28040                                  CHECK_VIRT_OPEN:
 28041 00004B2E 50                      	PUSH	AX
 28042 00004B2F 9F                      	lahf			; preserve flags
 28043 00004B30 803E[A20A]00            	CMP	byte [VIRTUAL_OPEN],0
 28044 00004B35 7410                    	JZ	short ALL_CLOSED
 28045 00004B37 C606[A20A]00            	mov	byte [VIRTUAL_OPEN],0 ; reset flag
 28046 00004B3C 06                      	push	es
 28047 00004B3D 57                      	push	di
 28048 00004B3E C43E[9E05]              	LES	DI,[THISSFT]
 28049 00004B42 E8ACF9                  	call	DEV_CLOSE_SFT
 28050 00004B45 5F                      	pop	di
 28051 00004B46 07                      	pop	es
 28052                                  
 28053                                  ALL_CLOSED:
 28054 00004B47 9E                      	sahf			; restore flags
 28055 00004B48 58                      	POP	AX
 28056 00004B49 C3                      	retn
 28057                                  
 28058                                  ;============================================================================
 28059                                  ; ROM.ASM, MSDOS 6.0, 1991
 28060                                  ;============================================================================
 28061                                  ; 29/07/2018 - Retro DOS v3.0
 28062                                  ; 20/05/2019 - Retro DOS v4.0
 28063                                  
 28064                                  ;	TITLE	ROM - Miscellaneous routines
 28065                                  ;	NAME	ROM
 28066                                  
 28067                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 28068                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 28069                                  ;
 28070                                  ;	SKPCLP
 28071                                  ;	FNDCLUS
 28072                                  ;	BUFSEC
 28073                                  ;	BUFRD
 28074                                  ;	BUFWRT
 28075                                  ;	NEXTSEC
 28076                                  ;	OPTIMIZE
 28077                                  ;	FIGREC
 28078                                  ;	ALLOCATE
 28079                                  ;	RESTFATBYT
 28080                                  ;	RELEASE
 28081                                  ;	RELBLKS
 28082                                  ;	GETEOF
 28083                                  ;
 28084                                  ;	Modification history:
 28085                                  ;
 28086                                  ;		Created: ARR 30 March 1983
 28087                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 28088                                  
 28089                                  ;Break   <FNDCLUS -- Skip over allocation units>
 28090                                  ;--------------------------------------------------------------------------
 28091                                  ;
 28092                                  ; Procedure Name : FNDCLUS
 28093                                  ;
 28094                                  ; Inputs:
 28095                                  ;       CX = No. of clusters to skip
 28096                                  ;       ES:BP = Base of drive parameters
 28097                                  ;       [THISSFT] point to SFT
 28098                                  ; Outputs:
 28099                                  ;       BX = Last cluster skipped to
 28100                                  ;       CX = No. of clusters remaining (0 unless EOF)
 28101                                  ;       DX = Position of last cluster
 28102                                  ;       Carry set if error (currently user FAILed to I 24)
 28103                                  ; DI destroyed. No other registers affected.
 28104                                  ;--------------------------------------------------------------------------
 28105                                  
 28106                                  	; 10/02/2024 - Retro DOS v4.2
 28107                                  FNDCLUS_X:
 28108 00004B4A 8B0E[BC05]              	mov	cx,[CLUSNUM]
 28109                                  
 28110                                  ; 20/05/2019 - Retro DOS v4.0
 28111                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 28112                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28113                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 28114                                  
 28115                                  FNDCLUS:
 28116 00004B4E 06                      	PUSH	ES
 28117 00004B4F C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 28118                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 28119                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 28120 00004B53 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 28121                                  	;mov	dx,[es:di+19h]
 28122 00004B57 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 28123 00004B5B 09DB                    	OR	BX,BX
 28124 00004B5D 7424                    	JZ	short NOCLUS
 28125                                  
 28126 00004B5F 29D1                            SUB     CX,DX
 28127 00004B61 7308                            JNB	short FINDIT
 28128                                  
 28129 00004B63 01D1                            ADD     CX,DX
 28130 00004B65 31D2                            XOR     DX,DX
 28131                                  	;mov	bx,[es:di+0Bh]
 28132 00004B67 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 28133                                  FINDIT:
 28134 00004B6B 07                              POP	ES
 28135 00004B6C E313                    	JCXZ	RET9
 28136                                  
 28137                                  	;entry	SKPCLP
 28138                                  SKPCLP:
 28139 00004B6E E8B808                  	call	UNPACK
 28140 00004B71 7214                            jc	short fndclus_retn	; retc
 28141                                  
 28142                                  	; 09/09/2018
 28143                                  
 28144                                  	; MSDOS 3.3
 28145                                  	;push	bx
 28146                                  	;mov	bx,di
 28147                                  	;call	IsEOF
 28148                                  	;pop	bx	
 28149                                  	;jae	short RET9
 28150                                  
 28151                                  	; 20/05/2019 - Retro DOS v4.0
 28152                                  
 28153                                  	; MSDOS 6.0
 28154 00004B73 87DF                    	xchg	bx,di
 28155 00004B75 E89A08                  	call	IsEOF
 28156 00004B78 87DF                    	xchg	bx,di
 28157 00004B7A 7305                    	jae	short RET9
 28158                                  
 28159 00004B7C 87DF                            XCHG    BX,DI
 28160 00004B7E 42                              INC     DX
 28161                                  
 28162 00004B7F E2ED                    	LOOP	SKPCLP			; RMFS
 28163                                  RET9:	
 28164 00004B81 F8                      	CLC
 28165 00004B82 C3                              retn
 28166                                  NOCLUS:
 28167 00004B83 07                              POP	ES
 28168 00004B84 41                              INC	CX
 28169 00004B85 4A                              DEC	DX
 28170 00004B86 F8                              CLC
 28171                                  
 28172                                  fndclus_retn:
 28173 00004B87 C3                              retn
 28174                                  
 28175                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 28176                                  ;--------------------------------------------------------------------------
 28177                                  ;
 28178                                  ; Procedure Name : BUFSEC
 28179                                  ;
 28180                                  ; Inputs:
 28181                                  ;       AH = priority of buffer
 28182                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 28183                                  ;       ES:BP = Base of drive parameters
 28184                                  ;       [CLUSNUM] = Physical cluster number
 28185                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 28186                                  ;       [BYTCNT1] = Size of transfer
 28187                                  ; Function:
 28188                                  ;       Insure specified sector is in buffer, flushing buffer before
 28189                                  ;       read if necessary.
 28190                                  ; Outputs:
 28191                                  ;       ES:DI = Pointer to buffer
 28192                                  ;       SI = Pointer to transfer address
 28193                                  ;       CX = Number of bytes
 28194                                  ;       [NEXTADD] updated
 28195                                  ;       [TRANS] set to indicate a transfer will occur
 28196                                  ;       Carry set if error (user FAILed to I 24)
 28197                                  ;--------------------------------------------------------------------------
 28198                                  
 28199                                  BUFSEC:
 28200 00004B88 8B16[BC05]              	MOV	DX,[CLUSNUM]
 28201 00004B8C 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 28202                                  	;mov	byte [ALLOWED],38h
 28203 00004B90 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 28204 00004B95 E84F01                  	CALL	FIGREC
 28205 00004B98 E8A00C                  	call	GETBUFFR
 28206 00004B9B 72EA                    	jc	short fndclus_retn
 28207                                  
 28208 00004B9D C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 28209 00004BA2 8B36[B805]              	MOV	SI,[NEXTADD]
 28210 00004BA6 89F7                    	MOV	DI,SI
 28211 00004BA8 8B0E[D205]              	MOV	CX,[BYTCNT1]
 28212 00004BAC 01CF                    	ADD	DI,CX
 28213 00004BAE 893E[B805]              	MOV	[NEXTADD],DI
 28214 00004BB2 C43E[E205]              	LES	DI,[CURBUF]
 28215                                  	;or	byte [es:di+5],8
 28216 00004BB6 26804D0508              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 28217                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 28218                                  	;lea	di,[di+20] ; MSDOS 6.0
 28219 00004BBB 8D7D14                  	LEA	DI,[DI+BUFINSIZ]        ; Point to buffer
 28220 00004BBE 033E[CC05]              	ADD	DI,[BYTSECPOS]
 28221 00004BC2 F8                      	CLC
 28222 00004BC3 C3                      	retn
 28223                                  
 28224                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 28225                                  
 28226                                  ;---------------------------------------------------------------------------
 28227                                  ;
 28228                                  ; Procedure Name : BUFRD
 28229                                  ;
 28230                                  ; Do a partial sector read via one of the system buffers
 28231                                  ; ES:BP Points to DPB
 28232                                  ; Carry set if error (currently user FAILed to I 24)
 28233                                  ;
 28234                                  ; DS - set to DOSDATA
 28235                                  ;
 28236                                  ;----------------------------------------------------------------------------
 28237                                  
 28238                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28239                                  	; 20/05/2019 - Retro DOS v4.0
 28240                                  BUFRD:
 28241 00004BC4 06                      	PUSH	ES
 28242 00004BC5 31C0                    	xor	ax,ax			; pre-read sector
 28243 00004BC7 E8BEFF                  	CALL	BUFSEC
 28244 00004BCA 7303                    	JNC	short BUF_OK ; ds=ss
 28245                                  
 28246                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 28247 00004BCC 07                      	POP	ES
 28248 00004BCD EB2D                    	JMP	SHORT RBUFPLACED ; ds=ss ; 25/02/2024 - Retro DOS v4.2
 28249                                  
 28250                                  BUF_OK:
 28251 00004BCF 8CC3                    	MOV	BX,ES
 28252 00004BD1 8E06[2E03]              	MOV	ES,[DMAADD+2]
 28253 00004BD5 8EDB                    	MOV	DS,BX
 28254 00004BD7 87FE                    	XCHG	DI,SI
 28255 00004BD9 D1E9                    	SHR	CX,1
 28256                                  ;M039
 28257                                  	; MSDOS 3.3
 28258                                  	;JNC	short EVENRD
 28259                                  	;MOVSB
 28260                                  ;EVENRD:
 28261                                  	;REP	MOVSW
 28262                                  
 28263                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 28264                                  ;       DS:SI-> Source within Buffer.
 28265                                  ;       ES:DI-> Destination within Transfer memory block.
 28266                                  
 28267                                  	; MSDOS 6.0
 28268 00004BDB F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 28269                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28270                                  	;rep	movsb			;Copy last byte.
 28271                                  	; 16/12/2022
 28272 00004BDD 7301                    	jnc	short EVENRD ; **** 20/05/2019
 28273 00004BDF A4                      	movsb ; ****
 28274                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28275                                  	;adc	cx,0
 28276                                  	;rep	movsb
 28277                                  ;M039
 28278                                  EVENRD: ; ****
 28279 00004BE0 07                      	POP	ES
 28280                                  ;hkn; SS override
 28281 00004BE1 36C53E[E205]            	LDS	DI,[SS:CURBUF]
 28282                                  	;;lea	bx,[di+16]
 28283                                  	;lea	bx,[di+20] ; MSDOS 6.0
 28284 00004BE6 8D5D14                  	LEA	BX,[DI+BUFINSIZ]
 28285 00004BE9 29DE                    	SUB	SI,BX			; Position in buffer
 28286 00004BEB E8ED0B                  	call	PLACEBUF
 28287                                  	;cmp	si,[es:bp+2]
 28288 00004BEE 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 28289 00004BF2 7205                    	JB	short RBUFPLACEDC ; ds<>ss ; No, leave buf where it is
 28290                                  ;M039
 28291                                  	; MSDOS 3.3
 28292                                  	;call	PLACEHEAD 		; Make it prime candidate for chucking
 28293                                  					;  even though it is MRU.
 28294                                  	; MSDOS 6.0
 28295 00004BF4 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 28296                                  ;M039					; chucking even though it is MRU.
 28297                                  
 28298                                  RBUFPLACEDC:
 28299 00004BF9 F8                      	CLC
 28300                                  ;RBUFPLACED:
 28301 00004BFA 16                      	push	ss
 28302 00004BFB 1F                      	pop	ds
 28303                                  RBUFPLACED:	; 25/02/2024 (ds=ss)
 28304 00004BFC C3                      	retn
 28305                                  
 28306                                  ;----------------------------------------------------------------------------
 28307                                  ;
 28308                                  ; Procedure : BUFWRT
 28309                                  ;
 28310                                  ; Do a partial sector write via one of the system buffers
 28311                                  ; ES:BP Points to DPB
 28312                                  ; Carry set if error (currently user FAILed to I 24)
 28313                                  ;
 28314                                  ; DS - set to DOSDATA
 28315                                  ;
 28316                                  ;----------------------------------------------------------------------------
 28317                                  
 28318                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28319                                  	; 20/05/2019 - Retro DOS v4.0
 28320                                  BUFWRT:
 28321                                  	;MOV	AX,[SECPOS]
 28322                                  	; MSDOS 6.0
 28323                                  	;ADD	AX,1			; Set for next sector
 28324                                  	;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28325                                  	;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28326                                  	; 24/09/2023
 28327 00004BFD FF06[C405]              	inc	word [SECPOS]
 28328 00004C01 7504                    	jnz	short bufw_secpos
 28329 00004C03 FF06[C605]              	inc	word [SECPOS+2]
 28330                                  bufw_secpos:
 28331 00004C07 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28332 00004C0A 3B06[CA05]              	CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28333 00004C0E B001                    	MOV	AL,1			;F.C. >32mb	;AN000;
 28334 00004C10 770F                    	JA	short NOREAD		;F.C. >32mb	;AN000;
 28335 00004C12 720B                    	JB	short _doread		;F.C. >32mb	;AN000;
 28336 00004C14 A1[C405]                	MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28337                                  
 28338                                  	; MSDOS 3.3
 28339                                  	;INC	AX
 28340                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28341                                  
 28342                                  	; 20/05/2019
 28343                                  	; MSDOS 3.3 & MSDOS 6.0
 28344 00004C17 3B06[C805]              	CMP	AX,[VALSEC]		; Has sector been written before?
 28345 00004C1B B001                    	MOV	AL,1
 28346 00004C1D 7702                    	JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28347                                  _doread:
 28348 00004C1F 30C0                    	XOR	AL,AL
 28349                                  NOREAD:
 28350 00004C21 06                      	PUSH	ES
 28351 00004C22 E863FF                  	CALL	BUFSEC
 28352 00004C25 72A5                    	JC	short BUF_IO_FAIL
 28353 00004C27 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 28354 00004C2B D1E9                    	SHR	CX,1
 28355                                  ;M039
 28356                                  	; MSDOS 3.3
 28357                                  	;JNC	short EVENWRT ; 09/09/2018
 28358                                  	;MOVSB
 28359                                  ;EVENWRT:
 28360                                  	;REP	MOVSW
 28361                                  
 28362                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28363                                  ;	DS:SI-> Source within Transfer memory block.
 28364                                  ;	ES:DI-> Destination within Buffer.
 28365                                  
 28366                                  	; MSDOS 6.0
 28367 00004C2D F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28368                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28369                                  	;rep	movsb		  	;Copy last byte.
 28370                                  	; 16/12/2022
 28371 00004C2F 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28372 00004C31 A4                      	movsb ; ****
 28373                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28374                                  	;adc	cx,0
 28375                                  	;rep	movsb
 28376                                  ;M039
 28377                                  EVENWRT: ; ****
 28378 00004C32 07                      	POP	ES
 28379                                  
 28380                                  ;hkn; SS override
 28381 00004C33 36C51E[E205]            	LDS	BX,[SS:CURBUF]
 28382                                  
 28383                                  	; MSDOS 6.0
 28384 00004C38 F6470540                	TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28385                                  					;LB. if already dirty		 ;AN000;
 28386 00004C3C 7507                    	JNZ	short yesdirty10	;LB. don't increment dirty count ;AN000;
 28387 00004C3E E8FC0D                  	call	INC_DIRTY_COUNT		;LB.				 ;AN000;
 28388                                  	
 28389                                  	;or	byte [bx+5],40h
 28390 00004C41 804F0540                	OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28391                                  yesdirty10:
 28392                                  	;;lea	si,[bx+16]
 28393                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28394 00004C45 8D7714                  	LEA	SI,[BX+BUFINSIZ]
 28395 00004C48 29F7                    	SUB	DI,SI		  	; Position in buffer
 28396                                  ;M039
 28397                                  	; MSDOS 3.3
 28398                                  	;MOV	SI,DI
 28399                                  	;MOV	DI,BX
 28400                                  	;call	PLACEBUF
 28401                                  	;;cmp	si,[es:bp+2]
 28402                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28403                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28404                                  	;call	PLACEHEAD		; Make it prime candidate for chucking
 28405                                  					;  even though it is MRU.
 28406                                  	; 10/02/2024
 28407 00004C4A 16                      	push	ss
 28408 00004C4B 1F                      	pop	ds
 28409                                  
 28410                                  	; MSDOS 6.0
 28411                                  	;cmp	di,[es:bp+2]
 28412 00004C4C 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28413 00004C50 7204                    	JB	short WBUFPLACED	; No, leave buf where it is
 28414                                  
 28415                                  	; 10/02/2024
 28416                                  	;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28417                                  					; chucking even though it is MRU.
 28418 00004C52 891E[6D00]              	mov	[BufferQueue],bx
 28419                                  ;M039
 28420                                  
 28421                                  WBUFPLACED:
 28422 00004C56 F8                      	CLC
 28423                                  	; 10/02/2024
 28424                                  	;push	ss
 28425                                  	;pop	ds
 28426 00004C57 C3                      	retn
 28427                                  
 28428                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28429                                  ;---------------------------------------------------------------------------
 28430                                  ;
 28431                                  ; Procedure Name : NEXTSEC
 28432                                  ;
 28433                                  ; Compute the next sector to read or write
 28434                                  ; ES:BP Points to DPB
 28435                                  ;
 28436                                  ;---------------------------------------------------------------------------
 28437                                  
 28438                                  NEXTSEC:
 28439 00004C58 F606[7405]FF            	test	byte [TRANS],0FFh ; -1
 28440                                  	;JZ	short CLRET
 28441                                  	; 29/02/2024
 28442 00004C5D 7427                    	jz	short CLRET2
 28443                                  
 28444 00004C5F A0[7305]                	MOV	AL,[SECCLUSPOS]
 28445 00004C62 FEC0                    	INC	AL
 28446                                  	;cmp	al,[es:bp+4]
 28447 00004C64 263A4604                	CMP	AL,[ES:BP+DPB.CLUSTER_MASK]
 28448 00004C68 7618                    	JBE	short SAVPOS
 28449                                  
 28450 00004C6A 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 28451 00004C6E E8A107                  	call	IsEOF
 28452 00004C71 7314                    	JAE	short NONEXT
 28453                                  
 28454 00004C73 E8B307                  	call	UNPACK
 28455                                  	;JC	short NONEXT
 28456                                  	; 26/02/2024
 28457 00004C76 7210                    	jc	short NONEXT2
 28458                                  clusgot:
 28459 00004C78 893E[BC05]              	MOV	[CLUSNUM],DI
 28460 00004C7C FF06[BA05]              	INC	word [LASTPOS]
 28461 00004C80 B000                    	MOV	AL,0
 28462                                  SAVPOS:
 28463 00004C82 A2[7305]                	MOV	[SECCLUSPOS],AL
 28464                                  CLRET:
 28465 00004C85 F8                              CLC
 28466                                  CLRET2:		; 29/02/2024
 28467 00004C86 C3                      	retn
 28468                                  NONEXT:
 28469 00004C87 F9                      	STC
 28470                                  NONEXT2:	; 26/02/2024
 28471 00004C88 C3                      	retn
 28472                                  
 28473                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28474                                  ;----------------------------------------------------------------------------
 28475                                  ;
 28476                                  ; Procedure Name : OPTIMIZE
 28477                                  ;
 28478                                  ; Inputs:
 28479                                  ;	  BX = Physical cluster
 28480                                  ;	  CX = No. of records
 28481                                  ;	  DL = sector within cluster
 28482                                  ;	  ES:BP = Base of drive parameters
 28483                                  ;	  [NEXTADD] = transfer address
 28484                                  ; Outputs:
 28485                                  ;	  AX = No. of records remaining
 28486                                  ;	  BX = Transfer address
 28487                                  ;	  CX = No. or records to be transferred
 28488                                  ;	  DX = Physical sector address (LOW)
 28489                                  ;	  [HIGH_SECTOR] = Physical sector address (HIGH)
 28490                                  ;	  DI = Next cluster
 28491                                  ;	  [CLUSNUM] = Last cluster accessed
 28492                                  ;	  [NEXTADD] updated
 28493                                  ;	  Carry set if error (currently user FAILed to I 24)
 28494                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28495                                  ;
 28496                                  ;---------------------------------------------------------------------------
 28497                                  
 28498                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28499                                  OPTIMIZE:
 28500 00004C89 52                      	PUSH	DX
 28501 00004C8A 53                      	PUSH	BX
 28502                                  	;mov	al,[es:bp+4]
 28503 00004C8B 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 28504 00004C8F FEC0                    	INC	AL		; Number of sectors per cluster
 28505 00004C91 88C4                    	MOV	AH,AL
 28506 00004C93 28D0                    	SUB	AL,DL		; AL = Num of sectors left in first cluster
 28507 00004C95 89CA                    	MOV	DX,CX
 28508                                  	;MOV	CX,0
 28509                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28510                                  	; 16/12/2022
 28511 00004C97 31C9                    	xor	cx,cx	; sub cx,cx
 28512                                  OPTCLUS:
 28513                                  ; AL has number of sectors available in current cluster
 28514                                  ; AH has number of sectors available in next cluster
 28515                                  ; BX has current physical cluster
 28516                                  ; CX has number of sequential sectors found so far
 28517                                  ; DX has number of sectors left to transfer
 28518                                  ; ES:BP Points to DPB
 28519                                  ; ES:SI has FAT pointer
 28520                                  
 28521                                  do_norm3:
 28522 00004C99 E88D07                  	call	UNPACK
 28523 00004C9C 7236                    	JC	short OP_ERR
 28524                                  clusgot2:
 28525 00004C9E 00C1                    	ADD	CL,AL
 28526 00004CA0 80D500                  	ADC	CH,0
 28527 00004CA3 39D1                    	CMP	CX,DX
 28528 00004CA5 7332                    	JAE	short BLKDON
 28529 00004CA7 88E0                    	MOV	AL,AH
 28530 00004CA9 43                      	INC	BX
 28531 00004CAA 39DF                    	CMP	DI,BX
 28532 00004CAC 74EB                    	JZ	short OPTCLUS
 28533 00004CAE 4B                      	DEC	BX
 28534                                  FINCLUS:
 28535 00004CAF 891E[BC05]              	MOV	[CLUSNUM],BX	; Last cluster accessed
 28536 00004CB3 29CA                    	SUB	DX,CX		; Number of sectors still needed
 28537 00004CB5 52                      	PUSH	DX
 28538 00004CB6 89C8                    	MOV	AX,CX
 28539                                  	;mul	word[ES:BP+2]
 28540 00004CB8 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28541                                  				; Number of sectors times sector size
 28542 00004CBC 8B36[B805]              	MOV	SI,[NEXTADD]
 28543 00004CC0 01F0                    	ADD	AX,SI		; Adjust by size of transfer
 28544 00004CC2 A3[B805]                	MOV	[NEXTADD],AX
 28545 00004CC5 58                      	POP	AX		; Number of sectors still needed
 28546 00004CC6 5A                      	POP	DX		; Starting cluster
 28547 00004CC7 29D3                    	SUB	BX,DX		; Number of new clusters accessed
 28548 00004CC9 011E[BA05]              	ADD	[LASTPOS],BX
 28549 00004CCD 5B                      	POP	BX		; BL = sector position within cluster
 28550 00004CCE E81600                  	call	FIGREC
 28551 00004CD1 89F3                    	MOV	BX,SI
 28552                                  	; 24/09/2023
 28553                                  	; cf=0 (at the return of FIGREC)
 28554                                  	;CLC
 28555 00004CD3 C3                      	retn
 28556                                  OP_ERR:
 28557 00004CD4 83C404                  	ADD	SP,4
 28558 00004CD7 F9                      	STC
 28559 00004CD8 C3                      	retn
 28560                                  BLKDON:
 28561 00004CD9 29D1                    	SUB	CX,DX	  	; Number of sectors in cluster we don't want
 28562 00004CDB 28CC                    	SUB	AH,CL	  	; Number of sectors in cluster we accepted
 28563 00004CDD FECC                    	DEC	AH		; Adjust to mean position within cluster
 28564 00004CDF 8826[7305]              	MOV	[SECCLUSPOS],AH
 28565 00004CE3 89D1                    	MOV	CX,DX		; Anyway, make the total equal to the request
 28566 00004CE5 EBC8                    	JMP	SHORT FINCLUS
 28567                                  
 28568                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28569                                  ;---------------------------------------------------------------------------
 28570                                  ;
 28571                                  ; Procedure Name : FIGREC
 28572                                  ;
 28573                                  ; Inputs:
 28574                                  ;	  DX = Physical cluster number
 28575                                  ;	  BL = Sector position within cluster
 28576                                  ;	  ES:BP = Base of drive parameters
 28577                                  ; Outputs:
 28578                                  ;	  DX = physical sector number (LOW)
 28579                                  ;	  [HIGH_SECTOR] Physical sector address (HIGH)
 28580                                  ; No other registers affected.
 28581                                  ;
 28582                                  ;---------------------------------------------------------------------------
 28583                                  
 28584                                  	; 10/06/2019
 28585                                  	; 20/05/2019 - Retro DOS v4.0
 28586                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28587                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28588                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)
 28589                                  
 28590                                  	; 27/02/2024 - Retro DOS v4.2
 28591                                  	; (ds=ss)
 28592                                  FIGREC:
 28593 00004CE7 51                      	PUSH	CX
 28594                                  	;
 28595                                  	; 27/02/2024
 28596 00004CE8 31C9                    	xor	cx,cx
 28597 00004CEA 890E[0706]              	mov	[HIGH_SECTOR],cx ;0
 28598                                  	;
 28599                                  	;mov	cl,[es:bp+5]
 28600 00004CEE 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28601 00004CF2 4A                      	DEC	DX
 28602 00004CF3 4A                      	DEC	DX
 28603                                  
 28604                                  	; MSDOS 3.3
 28605                                  	;SHL	DX,CL
 28606                                  
 28607                                  ;hkn; SS override HIGH_SECTOR
 28608                                  	; MSDOS 6.0
 28609                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28610                                  	; 27/02/2024
 28611                                  	;mov	word [HIGH_SECTOR],0
 28612                                  	; 24/09/2023
 28613                                  	;;xor	ch,ch				;F.C. >32mb
 28614                                  	;OR	CL,CL				;F.C. >32mb
 28615                                  	;JZ	short noshift			;F.C. >32mb
 28616                                  	; 27/02/2024
 28617 00004CF4 E309                    	jcxz	noshift
 28618                                  	; 27/02/2024
 28619                                  	;;XOR	CH,CH				;F.C. >32mb
 28620                                  rotleft:					;F.C. >32mb
 28621 00004CF6 F8                      	CLC					;F.C. >32mb
 28622 00004CF7 D1D2                    	RCL	DX,1				;F.C. >32mb
 28623                                  	; 10/06/2019
 28624                                  	;RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28625                                  	; 27/02/2024
 28626 00004CF9 D116[0706]              	rcl	word [HIGH_SECTOR],1
 28627 00004CFD E2F7                    	LOOP	rotleft				;F.C. >32mb
 28628                                  noshift:
 28629                                  	; MSDOS 3.3 & MSDOS 6.0
 28630 00004CFF 08DA                    	OR	DL,BL
 28631                                  	;add	dx,[es:bp+0Bh]
 28632 00004D01 2603560B                	ADD	DX,[ES:BP+DPB.FIRST_SECTOR]
 28633                                  	; MSDOS 6.0
 28634                                  	; 10/06/2019
 28635                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28636                                  	; 24/09/2023
 28637                                  	; cx=0
 28638                                  	;ADC	word [ss:HIGH_SECTOR],cx ; 0
 28639                                  	; 27/02/2024
 28640 00004D05 110E[0706]              	adc	word [HIGH_SECTOR],cx ; 0
 28641                                  
 28642                                  	; MSDOS 3.3 & MSDOS 6.0
 28643 00004D09 59                      	POP	CX
 28644                                  figrec_retn:
 28645 00004D0A C3                      	retn
 28646                                  
 28647                                  ; 20/05/2019 - Retro DOS v4.0
 28648                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28649                                  
 28650                                  ; 30/07/2018 - Retro DOS v3.0
 28651                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28652                                  
 28653                                  ;Break   <ALLOCATE -- Assign disk space>
 28654                                  ;---------------------------------------------------------------------------
 28655                                  ;
 28656                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28657                                  ;
 28658                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28659                                  ;   FAT-chained onto the end of the existing file.
 28660                                  ;
 28661                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28662                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28663                                  ;   numbered clusters, looking for the necessary free blocks.
 28664                                  ;
 28665                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28666                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28667                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28668                                  ;
 28669                                  ;       If we get to the end of the disk without satisfaction:
 28670                                  ;
 28671                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28672                                  ;               return (insufficient_disk_space)
 28673                                  ;           ELSE
 28674                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28675                                  ;
 28676                                  ;   Note that there is no multitasking interlock. There is no race when
 28677                                  ;   examining the entrys in an in-core FAT block since there will be no
 28678                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28679                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28680                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28681                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28682                                  ;   satisfied. We can't allow another activation to think this cluster is
 28683                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28684                                  ;   allocated.
 28685                                  ;
 28686                                  ;   Note that when we run out of space this algorithem will scan from
 28687                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28688                                  ;   redundantly scanning the later part of the disk. This only happens when
 28689                                  ;   we run out of space, so sue me.
 28690                                  ;
 28691                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28692                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28693                                  ;                                                                          ;
 28694                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28695                                  ;   explanation:
 28696                                  ;
 28697                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28698                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28699                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28700                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28701                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28702                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28703                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28704                                  ;   the
 28705                                  ;           LOOP   findfre         ; alloc more if needed
 28706                                  ;   instruction when the first cluster is allocated to the nul file. The
 28707                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28708                                  ;
 28709                                  ;   This method is obviously useless (because it is non-reentrant) for
 28710                                  ;   multitasking, and will have to be changed. Storing the required value on
 28711                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28712                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28713                                  ;   problems with INT 24 well.
 28714                                  ;
 28715                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28716                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28717                                  ;                                                                          ;
 28718                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28719                                  ;               CX = No. of clusters to allocate
 28720                                  ;               ES:BP = Base of drive parameters
 28721                                  ;               [THISSFT] = Points to SFT
 28722                                  ;
 28723                                  ;       EXIT    'C' set if insufficient space
 28724                                  ;                 [FAILERR] can be tested to see the reason for failure
 28725                                  ;                 CX = max. no. of clusters that could be added to file
 28726                                  ;               'C' clear if space allocated
 28727                                  ;                 BX = First cluster allocated
 28728                                  ;                 FAT is fully updated
 28729                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28730                                  ;
 28731                                  ;       USES    ALL but SI, BP
 28732                                  
 28733                                  ;callmagic  proc near
 28734                                  ;       push    ds                             ;push segment of routine 
 28735                                  ;       push    Offset MagicPatch              ;push offset for routine
 28736                                  ;       retf                                   ;simulate jmp far
 28737                                  ;                                              ;far return address is on
 28738                                  ;                                              ;stack, so far return from
 28739                                  ;                                              ;call will return this routine
 28740                                  ;callmagic  endp
 28741                                  
 28742                                  
 28743                                  ; 25/09/2023
 28744                                  %if 0
 28745                                  callmagic:
 28746                                  	push	ds
 28747                                  	push	MagicPatch
 28748                                  	retf	
 28749                                  %endif
 28750                                  
 28751                                  ALLOCATE:
 28752                                  	; 10/09/2018
 28753                                  ;BEGIN MAGICDRV MODIFICATIONS
 28754                                  ;
 28755                                  ;7/5/92 scottq
 28756                                  ;
 28757                                  ;This is the disk compression patch location which allows
 28758                                  ;the disk compression software to fail allocations if the
 28759                                  ;FAT would allows allocation, but the free space for compressed
 28760                                  ;data would not.
 28761                                  ;        
 28762                                  ;;;	call    far ptr MAGICPATCH
 28763                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28764                                  ;;; but we do know the segment and offset of the routine
 28765                                  ;;; so simulate a far call to dosdata:magicpatch
 28766                                  ;;; note dosassume above, so DS -> dosdata
 28767                                  
 28768                                  	; MSDOS 6.0
 28769                                          ;clc				;clear carry so we fall through
 28770                                  	;				;if no patch is present
 28771                                  	;push	cs			;push segment for far return
 28772                                          ;call	callmagic		;this is a near call
 28773                                          ;jnc	short Regular_Allocate_Path
 28774                                  	;jmp	Disk_Full_Return
 28775                                  
 28776                                  ; 25/09/2023
 28777                                  %if 0
 28778                                  	clc
 28779                                  	push	cs
 28780                                  	call	callmagic
 28781                                  	jnc	short Regular_Allocate_Path
 28782                                  	jmp	Disk_Full_Return
 28783                                  Regular_Allocate_Path:
 28784                                  %endif
 28785                                  
 28786                                  	; 20/05/2019 - Retro DOS v4.0
 28787                                  ;END MAGICDRV MODIFICATIONS
 28788                                  
 28789                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28790                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28791                                  
 28792 00004D0B 53                              PUSH    BX                      ; save (bx)
 28793 00004D0C 31DB                            XOR     BX,BX
 28794 00004D0E E81807                  	call	UNPACK
 28795 00004D11 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28796 00004D15 5B                              POP     BX
 28797 00004D16 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28798                                  
 28799 00004D18 51                              PUSH    CX
 28800 00004D19 53                              PUSH    BX
 28801                                  
 28802 00004D1A 89DA                            MOV     DX,BX
 28803                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28804                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28805 00004D1C 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28806 00004D20 83FB02                          cmp     bx,2
 28807 00004D23 7709                            ja	short FINDFRE
 28808                                  
 28809                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28810                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28811                                  
 28812                                  ads1:
 28813                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28814                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28815 00004D25 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28816 00004D2B BB0100                          mov     bx,1                    ; Counter next instruction so first
 28817                                                                          ;       cluster examined is 2
 28818                                  
 28819                                  ;   Scanning both forwards and backwards for a free cluster
 28820                                  ;
 28821                                  ;       (BX) = forwards scan pointer
 28822                                  ;       (CX) = clusters remaining to be allocated
 28823                                  ;       (DX) = current last cluster in file
 28824                                  ;       (TOS) = last cluster of file
 28825                                  
 28826                                  FINDFRE:
 28827 00004D2E 43                              INC     BX
 28828                                  	;cmp	bx,[es:bp+0Dh]
 28829 00004D2F 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28830 00004D33 7757                    	ja	short ads7	; at end of disk
 28831 00004D35 E8F106                          call	UNPACK          ; check out this cluster
 28832 00004D38 722F                            jc	short ads4	; FAT error             [INTERR?]
 28833 00004D3A 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28834                                  
 28835                                  ;   Have found a free cluster. Chain it to the file
 28836                                  ;
 28837                                  ;       (BX) = found free cluster #
 28838                                  ;       (DX) = current last cluster in file
 28839                                  
 28840                                  	;;mov	[es:bp+1Ch],bx
 28841                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28842 00004D3C 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28843 00004D40 92                              xchg    ax,dx           ; save (dx) in ax
 28844 00004D41 BA0100                          mov     dx,1            ; mark this free guy as "1"
 28845 00004D44 E83607                  	call	PACK            ; set special "temporary" mark
 28846 00004D47 7220                            jc	short ads4	; FAT error             [INTERR?]
 28847                                  	;;cmp	word [es:bp+1Eh],-1
 28848                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28849 00004D49 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28850 00004D4E 7404                            JZ	short NO_ALLOC	; No
 28851                                  	;;dec	word [es:bp+1Eh]
 28852                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28853 00004D50 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28854                                  NO_ALLOC:
 28855 00004D54 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28856 00004D55 87DA                            XCHG    BX,DX
 28857 00004D57 89D0                            MOV     AX,DX
 28858 00004D59 E82107                  	call	PACK            ; link free cluster onto file
 28859                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28860                                                                  ;    cluster 0 with FIRCLUS value.
 28861 00004D5C 720B                            jc	short ads4	; FAT error [INTERR?]
 28862 00004D5E 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28863 00004D5F 89DA                            mov     dx,bx           ; (dx) = current end of file
 28864 00004D61 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28865                                  
 28866                                  ;   We've successfully extended the file. Clean up and exit
 28867                                  ;
 28868                                  ;       (BX) = last cluster in file
 28869                                  
 28870 00004D63 BAFFFF                          MOV     DX,0FFFFH
 28871 00004D66 E81407                  	call	PACK            ; mark last cluster EOF
 28872                                  
 28873                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28874                                  ;   2 whole bytes. Hope its worth it...
 28875                                  ;
 28876                                  ;       'C' set if error
 28877                                  ;       calling (BX) and (CX) pushed on stack
 28878                                  
 28879                                  ads4:   
 28880 00004D69 5B                      	POP     BX
 28881 00004D6A 59                              POP     CX              ; Don't need this stuff since we're successful
 28882 00004D6B 729D                            jc	short figrec_retn
 28883 00004D6D E8B906                          call	UNPACK          ; Get first cluster allocated for return
 28884                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28885 00004D70 7298                            jc	short figrec_retn
 28886 00004D72 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28887 00004D75 7293                            jc	short figrec_retn
 28888 00004D77 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28889 00004D79 09FF                            OR      DI,DI           ; clear 'C'
 28890 00004D7B 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28891                                  
 28892                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28893                                  ;   info
 28894                                  dofastk:
 28895                                  	; 20/05/2019
 28896                                  	; MSDOS 6.0
 28897                                  	;push	dx ; * MSDOS 6.0
 28898                                  	;;mov	dl,[es:bp+0]
 28899                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28900                                  	;mov	dl,[es:bp]
 28901                                  
 28902                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28903                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28904                                  	
 28905                                  	; 16/12/2022
 28906                                  	;push	dx ; *
 28907                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28908                                  	; 15/12/2022
 28909                                  	;mov	dl,[es:bp]
 28910                                  	
 28911                                  	; MSDOS 3.3 & MSDOS 6.0
 28912 00004D7D 06                      	PUSH	ES
 28913 00004D7E C43E[9E05]              	LES     DI,[THISSFT]
 28914                                  	;mov	[es:di+0Bh],bx
 28915 00004D82 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28916                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28917                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28918 00004D86 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28919 00004D8A 07                      	POP	ES
 28920                                  	;retn
 28921                                  
 28922                                  	;pop	dx ; * MSDOS 6.0
 28923                                  
 28924                                  	; 16/12/2022
 28925                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28926                                  	;pop	dx ; *
 28927                                  
 28928 00004D8B C3                      	retn	
 28929                                  
 28930                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28931                                  ;   of the disk...
 28932                                  
 28933                                  ads7:   
 28934 00004D8C 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28935 00004D91 7592                    	jnz	short ads1	; start scan from front of disk
 28936                                  
 28937                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28938                                  ;   the space back to the free list and tell the caller how much he could have
 28939                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28940                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28941                                  ;
 28942                                  ;       (CX) = clusters remaining to be allocated
 28943                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28944                                  ;       (TOS+1) = # of clusters wanted to allocate
 28945                                  
 28946 00004D93 5B                              POP     BX              ; (BX) = last cluster of file
 28947 00004D94 BAFFFF                          MOV     DX,0FFFFH
 28948 00004D97 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28949 00004D9A 58                              POP     AX              ; No. of clusters requested
 28950                                                                  ; Don't "retc". We are setting Carry anyway,
 28951                                                                  ;   Alloc failed, so proceed with return CX
 28952                                                                  ;   setup.
 28953 00004D9B 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28954 00004D9D E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28955                                                                  ;   Alloc failed.
 28956                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28957                                          ; MSDOS 6.0
 28958 00004DA0 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28959 00004DA5 F9                              STC
 28960 00004DA6 C3                              retn
 28961                                  
 28962                                  ;-----------------------------------------------------------------------
 28963                                  ;
 28964                                  ; Procedure Name : RESTFATBYT
 28965                                  ;
 28966                                  ; SEE ALLOCATE CAVEAT
 28967                                  ;       Carry set if error (currently user FAILed to I 24)
 28968                                  ;-----------------------------------------------------------------------
 28969                                  
 28970                                  RESTFATBYT:
 28971 00004DA7 53                              PUSH    BX
 28972 00004DA8 52                              PUSH    DX
 28973 00004DA9 57                              PUSH    DI
 28974 00004DAA 31DB                            XOR     BX,BX
 28975 00004DAC 8B16[9605]                      MOV     DX,[FATBYT]
 28976 00004DB0 E8CA06                  	call	PACK
 28977 00004DB3 5F                              POP     DI
 28978 00004DB4 5A                              POP     DX
 28979 00004DB5 5B                              POP     BX
 28980                                  ; 16/12/2022
 28981                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28982                                  ;RELEASE_flush:
 28983 00004DB6 C3                      	retn
 28984                                  
 28985                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28986                                  ;---------------------------------------------------------------------------
 28987                                  ;
 28988                                  ; Procedure Name : RELEASE
 28989                                  ;
 28990                                  ; Inputs:
 28991                                  ;       BX = Cluster in file
 28992                                  ;       ES:BP = Base of drive parameters
 28993                                  ; Function:
 28994                                  ;       Frees cluster chain starting with [BX]
 28995                                  ;       Carry set if error (currently user FAILed to I 24)
 28996                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28997                                  ;
 28998                                  ;-----------------------------------------------------------------------------
 28999                                  
 29000                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29001                                  	; 20/05/2019 - Retro DOS v4.0
 29002                                  RELEASE:
 29003 00004DB7 31D2                            XOR     DX,DX
 29004                                  
 29005                                  	;entry	RELBLKS
 29006                                  RELBLKS:
 29007                                  
 29008                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 29009                                  ;   and free the rest in the chain.
 29010                                  
 29011 00004DB9 E86D06                  	call	UNPACK
 29012 00004DBC 7224                    	jc	short RELEASE_flush
 29013 00004DBE 7422                    	jz	short RELEASE_flush
 29014 00004DC0 89F8                            MOV     AX,DI
 29015 00004DC2 52                              PUSH    DX
 29016 00004DC3 E8B706                  	call	PACK
 29017 00004DC6 5A                              POP     DX
 29018 00004DC7 7219                    	jc	short RELEASE_flush
 29019 00004DC9 09D2                            OR      DX,DX
 29020 00004DCB 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 29021                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 29022                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 29023 00004DCD 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 29024 00004DD2 7404                            JZ	short NO_DEALLOC	; No
 29025 00004DD4 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 29026                                  NO_DEALLOC:
 29027 00004DD8 89C3                            MOV     BX,AX
 29028 00004DDA 48                              dec     ax              ; check for "1"
 29029 00004DDB 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 29030 00004DDD E83206                  	call	IsEOF
 29031 00004DE0 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 29032                                  
 29033                                  	; 16/12/2022
 29034                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29035                                  ;%if 0
 29036                                  RELEASE_flush:
 29037                                  	; MSDOS 6.0
 29038 00004DE2 268A4600                	mov	al,[es:bp]
 29039                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29040 00004DE6 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 29041 00004DE7 51                      	push	cx		;  them to be preserved.
 29042 00004DE8 06                      	push	es
 29043 00004DE9 55                      	push	bp
 29044 00004DEA E84B0B                  	call	FLUSHBUF	; commit buffers for this drive
 29045 00004DED 5D                      	pop	bp
 29046 00004DEE 07                      	pop	es
 29047 00004DEF 59                      	pop	cx
 29048 00004DF0 5E                      	pop	si
 29049                                  ;%endif
 29050                                  RET12:
 29051 00004DF1 C3                      	retn
 29052                                  
 29053                                  ;Break	<GETEOF -- Find the end of a file>
 29054                                  ;------------------------------------------------------------------------
 29055                                  ;
 29056                                  ; Procedure Name : GETEOF
 29057                                  ;
 29058                                  ; Inputs:
 29059                                  ;       ES:BP Points to DPB
 29060                                  ;       BX = Cluster in a file
 29061                                  ;       DS = CS
 29062                                  ; Outputs:
 29063                                  ;       BX = Last cluster in the file
 29064                                  ;       Carry set if error (currently user FAILed to I 24)
 29065                                  ; DI destroyed. No other registers affected.
 29066                                  ;
 29067                                  ;--------------------------------------------------------------------------
 29068                                  
 29069                                  GETEOF:
 29070 00004DF2 E83406                  	call	UNPACK
 29071 00004DF5 72FA                            jc	short RET12
 29072 00004DF7 53                              PUSH    BX
 29073 00004DF8 89FB                            MOV     BX,DI
 29074 00004DFA E81506                  	call	IsEOF
 29075 00004DFD 5B                              POP     BX
 29076 00004DFE 73F1                            JAE     short RET12
 29077 00004E00 89FB                            MOV     BX,DI
 29078 00004E02 EBEE                            JMP     short GETEOF
 29079                                  
 29080                                  ;============================================================================
 29081                                  ; FCB.ASM, MSDOS 6.0, 1991
 29082                                  ;============================================================================
 29083                                  ; 30/07/2018 - Retro DOS v3.0
 29084                                  ; 20/05/2019 - Retro DOS v4.0
 29085                                  
 29086                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 29087                                  ;	NAME	FCB
 29088                                  
 29089                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 29090                                  ;		  filename characters
 29091                                  ;
 29092                                  ;	MakeFcb
 29093                                  ;	NameTrans
 29094                                  ;	PATHCHRCMP
 29095                                  ;	GetLet
 29096                                  ;	UCase
 29097                                  ;	GetLet3
 29098                                  ;	GetCharType
 29099                                  ;	TESTKANJ
 29100                                  ;	NORMSCAN
 29101                                  ;	DELIM
 29102                                  ;
 29103                                  ;	Revision history:
 29104                                  ;
 29105                                  ;		A000  version 4.00  Jan. 1988
 29106                                  ;	
 29107                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 29108                                  
 29109                                  TableLook	EQU	-1
 29110                                  
 29111                                  SCANSEPARATOR	EQU	1
 29112                                  DRVBIT		EQU	2
 29113                                  NAMBIT		EQU	4
 29114                                  EXTBIT		EQU	8
 29115                                  
 29116                                  ;----------------------------------------------------------------------------
 29117                                  ;
 29118                                  ; Procedure : MakeFcb
 29119                                  ;
 29120                                  ;----------------------------------------------------------------------------
 29121                                  
 29122                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29123                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 29124                                  
 29125                                  	; 29/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 29126                                  	; (MSDOS 6.22 MSDOS.SYS - DOSCODE:8ED3h)
 29127                                  MAKEFCB:
 29128                                  ;hkn; SS override
 29129                                  	;MOV	BYTE [SS:SpaceFlag],0
 29130 00004E04 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 29131                                  	; 29/02/2024
 29132 00004E06 368816[4E03]            	mov	[ss:SpaceFlag],dl ; 0
 29133                                  	;test	al,2
 29134 00004E0B A802                    	test	AL,DRVBIT	; Use current drive field if default?
 29135 00004E0D 7503                    	JNZ	short DEFDRV
 29136                                  	;MOV	BYTE [ES:DI],0	; No - use default drive
 29137                                  	; 29/02/2024
 29138 00004E0F 268815                  	mov	[es:di],dl ; 0
 29139                                  DEFDRV:
 29140 00004E12 47                      	INC	DI
 29141 00004E13 B90800                  	MOV	CX,8
 29142                                  	;test	al,4
 29143 00004E16 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 29144 00004E18 93                      	XCHG	AX,BX		; Save bits in BX
 29145 00004E19 B020                    	MOV	AL," "
 29146 00004E1B 7404                    	JZ	short FILLB	; If not, go fill with blanks
 29147 00004E1D 01CF                    	ADD	DI,CX
 29148 00004E1F 31C9                    	XOR	CX,CX		; Don't fill any
 29149                                  FILLB:
 29150 00004E21 F3AA                    	REP	STOSB
 29151 00004E23 B103                    	MOV	CL,3
 29152 00004E25 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 29153 00004E28 7404                    	JZ	short FILLB2
 29154 00004E2A 01CF                    	ADD	DI,CX
 29155 00004E2C 31C9                    	XOR	CX,CX
 29156                                  FILLB2:
 29157 00004E2E F3AA                    	REP	STOSB
 29158 00004E30 91                      	XCHG	AX,CX		; Put zero in AX
 29159 00004E31 AB                      	STOSW
 29160 00004E32 AB                      	STOSW			; Initialize two words after to zero
 29161 00004E33 83EF10                  	SUB	DI,16		; Point back at start
 29162                                  	;test	bl,1
 29163 00004E36 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 29164 00004E39 7409                    	JZ	short SKPSPC
 29165 00004E3B E88800                  	CALL	SCANB		; Peel off blanks and tabs
 29166 00004E3E E81E01                  	CALL	DELIM		; Is it a one-time-only delimiter?
 29167 00004E41 7504                    	JNZ	short NOSCAN
 29168 00004E43 46                      	INC	SI		; Skip over the delimiter
 29169                                  SKPSPC:
 29170 00004E44 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 29171                                  NOSCAN:
 29172 00004E47 E8EC00                  	CALL	GETLET
 29173 00004E4A 761E                    	JBE	short NODRV	; Quit if termination character
 29174 00004E4C 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 29175 00004E4F 7519                    	JNZ	short NODRV
 29176 00004E51 46                      	INC	SI		; Skip over colon
 29177 00004E52 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 29178 00004E54 760F                    	JBE	short BADDRV	; Drive letter out of range
 29179                                  
 29180 00004E56 50                      	PUSH	AX
 29181 00004E57 E80C1B                  	call	GetVisDrv
 29182 00004E5A 58                      	POP	AX
 29183 00004E5B 730A                    	JNC	short HAVDRV
 29184                                  
 29185                                  	; 20/05/2019 - Retro DOS v4.0
 29186                                  	; MSDOS 6.0
 29187                                  ;hkn; SS override
 29188 00004E5D 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 29189                                  					; if not FAT drive ;AN000;
 29190 00004E63 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 29191                                  BADDRV:
 29192 00004E65 B2FF                    	MOV	DL,-1
 29193                                  HAVDRV:
 29194 00004E67 AA                      	STOSB			; Put drive specifier in first byte
 29195 00004E68 46                      	INC	SI
 29196 00004E69 4F                      	DEC	DI		; Counteract next two instructions
 29197                                  NODRV:
 29198 00004E6A 4E                      	DEC	SI		; Back up
 29199 00004E6B 47                      	INC	DI		; Skip drive byte
 29200                                  
 29201                                  	;entry	NORMSCAN
 29202                                  NORMSCAN:
 29203 00004E6C B90800                  	MOV	CX,8
 29204 00004E6F E82200                  	CALL	GETWORD 	; Get 8-letter file name
 29205 00004E72 803C2E                  	CMP	BYTE [SI],"."
 29206 00004E75 7510                    	JNZ	short NODOT
 29207 00004E77 46                      	INC	SI		; Skip over dot if present
 29208                                  
 29209                                  	; 24/09/2023
 29210                                  	;mov	cx,3
 29211 00004E78 B103                    	mov	cl,3	; ch=0
 29212                                  
 29213                                  	; MSDOS 6.0
 29214                                  ;hkn; SS override
 29215                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 29216                                  	; 10/06/2019
 29217 00004E7A 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 29218 00004E80 7402                    	JZ	short VOLOK				;AN000;
 29219 00004E82 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 29220                                  	; 24/09/2023
 29221                                  	;MOV	CX,2					;AN000;
 29222 00004E83 49                      	dec	cx  ; cx=2
 29223                                  	;JMP	SHORT contvol				;AN000;
 29224                                  VOLOK:
 29225                                  	;MOV	CX,3		; Get 3-letter extension
 29226                                  contvol:
 29227 00004E84 E81300                  	CALL	MUSTGETWORD
 29228                                  NODOT:
 29229 00004E87 88D0                    	MOV	AL,DL
 29230                                  
 29231                                  	; MSDOS 6.0
 29232                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 29233                                  	; 18/12/2022
 29234 00004E89 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 29235                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 29236                                  
 29237 00004E8F C3                      	retn
 29238                                  
 29239                                  NONAM:
 29240 00004E90 01CF                    	ADD	DI,CX
 29241 00004E92 4E                      	DEC	SI
 29242 00004E93 C3                      	retn
 29243                                  
 29244                                  GETWORD:
 29245 00004E94 E89F00                  	CALL	GETLET		
 29246 00004E97 76F7                    	JBE	short NONAM	; Exit if invalid character
 29247 00004E99 4E                      	DEC	SI
 29248                                  
 29249                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 29250                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 29251                                  
 29252                                  MUSTGETWORD:
 29253 00004E9A E89900                  	CALL	GETLET
 29254                                  
 29255                                  ;	If spaceFlag is set then we allow spaces in a pathname
 29256                                  
 29257                                  ;IF NOT TABLELOOK
 29258                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 29259                                  ;ENDIF
 29260 00004E9D 750C                    	JNZ	short MustCheckCX
 29261                                  
 29262                                  ;hkn; SS override
 29263 00004E9F 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 29264 00004EA5 7419                    	JZ	short FILLNAM
 29265 00004EA7 3C20                    	CMP	AL," "
 29266 00004EA9 7515                    	JNZ	short FILLNAM
 29267                                  
 29268                                  MustCheckCX:
 29269 00004EAB E3ED                    	JCXZ	MUSTGETWORD
 29270 00004EAD 49                      	DEC	CX
 29271 00004EAE 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 29272 00004EB0 7504                    	JNZ	short NOSTAR
 29273 00004EB2 B03F                    	MOV	AL,"?"
 29274 00004EB4 F3AA                    	REP	STOSB
 29275                                  NOSTAR:
 29276 00004EB6 AA                      	STOSB
 29277 00004EB7 3C3F                    	CMP	AL,"?"
 29278 00004EB9 75DF                    	JNZ	short MUSTGETWORD
 29279 00004EBB 80CA01                  	OR	DL,1		; Flag ambiguous file name
 29280 00004EBE EBDA                    	JMP	short MUSTGETWORD
 29281                                  FILLNAM:
 29282 00004EC0 B020                    	MOV	AL," "
 29283 00004EC2 F3AA                    	REP	STOSB
 29284 00004EC4 4E                      	DEC	SI
 29285 00004EC5 C3                      	retn
 29286                                  
 29287                                  SCANB:
 29288 00004EC6 AC                      	LODSB
 29289 00004EC7 E89D00                  	CALL	SPCHK
 29290 00004ECA 74FA                    	JZ	short SCANB
 29291 00004ECC 4E                      	DEC	SI
 29292                                  scanb_retn:
 29293 00004ECD C3                      	retn
 29294                                  
 29295                                  ;----------------------------------------------------------------------------
 29296                                  ;
 29297                                  ; Procedure Name : NameTrans
 29298                                  ;
 29299                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 29300                                  ; allow spaces in pathnames
 29301                                  ;
 29302                                  ;   Inputs:	DS:SI points to start of path element
 29303                                  ;   Outputs:	Name1 has unpacked name, uppercased
 29304                                  ;		ES = DOSGroup
 29305                                  ;		DS:SI advanced after name
 29306                                  ;   Registers modified: DI,AX,DX,CX
 29307                                  ;
 29308                                  ;----------------------------------------------------------------------------
 29309                                  
 29310                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29311                                  	; 20/05/2019 - Retro DOS v4.0
 29312                                  
 29313                                  	; 29/02/2024 - Retro DOS v4.1
 29314                                  
 29315                                  NameTrans:
 29316                                  ;hkn; SS override
 29317 00004ECE 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 29318 00004ED4 16                      	push	ss
 29319 00004ED5 07                      	pop	es
 29320                                  
 29321                                  ;hkn; NAME1 is in DOSDATA
 29322 00004ED6 BF[4B05]                	MOV	DI,NAME1
 29323 00004ED9 57                      	PUSH	DI
 29324                                  
 29325                                  ; 29/02/2024
 29326                                  %if 0
 29327                                  	MOV	AX,'  '	; 2020h
 29328                                  	MOV	CX,5
 29329                                  	STOSB
 29330                                  	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 29331                                  	XOR	AL,AL		; Set stuff for NORMSCAN
 29332                                  	MOV	DL,AL
 29333                                  %else
 29334                                  	; 29/02/2024
 29335                                  	; (PCDOS 7.1 IBMDOS.COM)
 29336 00004EDA B020                    	mov     al,20h ; ' '
 29337 00004EDC B90B00                  	mov     cx,11
 29338 00004EDF F3AA                    	rep stosb               ; Fill "FCB" at NAME1 with spaces
 29339 00004EE1 91                      	xchg    ax,cx
 29340 00004EE2 99                      	cwd
 29341                                  %endif
 29342                                  
 29343 00004EE3 AA                      	STOSB
 29344 00004EE4 5F                      	POP	DI
 29345                                  
 29346 00004EE5 E884FF                  	CALL	NORMSCAN
 29347                                  
 29348                                  ;hkn; SS override for NAME1
 29349 00004EE8 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 29350 00004EEE 75DD                    	jnz	short scanb_retn
 29351 00004EF0 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 29352 00004EF6 C3                      	retn
 29353                                  
 29354                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 29355                                  ;============================================================================
 29356                                  
 29357                                  ; 20/05/2019 - Retro DOS v4.0
 29358                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29359                                  
 29360                                  ;If TableLook
 29361                                  
 29362                                  ;hkn; Table	SEGMENT
 29363                                  ;	PUBLIC	CharType
 29364                                  ;----------------------------------------------------------------------------
 29365                                  
 29366                                  ; Character type table for file name scanning
 29367                                  ; Table provides a mapping of characters to validity bits.
 29368                                  ; Four bits are provided for each character. Values 7Dh and above
 29369                                  ; have all bits set, so that part of the table is chopped off, and
 29370                                  ; the translation routine is responsible for screening these values.
 29371                                  ; The bit values are defined in DOSSYM.INC
 29372                                  
 29373                                  ;	      ; ^A and NUL
 29374                                  ;CharType:
 29375                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29376                                  ;	      ; ^C and ^B
 29377                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29378                                  ;	      ; ^E and ^D
 29379                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29380                                  ;	      ; ^G and ^F
 29381                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29382                                  ;	      ; TAB and BS
 29383                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29384                                  ;	      ; ^K and ^J
 29385                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29386                                  ;	      ; ^M and ^L
 29387                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29388                                  ;	      ; ^O and ^N
 29389                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29390                                  ;	      ; ^Q and ^P
 29391                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29392                                  ;	      ; ^S and ^R
 29393                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29394                                  ;	      ; ^U and ^T
 29395                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29396                                  ;	      ; ^W and ^V
 29397                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29398                                  ;	      ; ^Y and ^X
 29399                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29400                                  ;	      ; ESC and ^Z
 29401                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29402                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29404                                  ;	      ; ^_ and ^^
 29405                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29406                                  ;	      ; ! and SPACE
 29407                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29408                                  ;	      ; # and "
 29409                                  ;	 db   LOW (NOT FFCB+FCHK)
 29410                                  ;	      ; $ - )
 29411                                  ;	 db   3 dup (0FFh)
 29412                                  ;	      ; + and *
 29413                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29414                                  ;	      ; - and '
 29415                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29416                                  ;	      ; / and .
 29417                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29418                                  ;	      ; 0 - 9
 29419                                  ;	 db   5 dup (0FFh)
 29420                                  ;	      ; ; and :
 29421                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29422                                  ;	      ; = and <
 29423                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29424                                  ;	      ; ? and >
 29425                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29426                                  ;	      ; A - Z
 29427                                  ;	 db   13 dup (0FFh)
 29428                                  ;	      ; \ and [
 29429                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29430                                  ;	      ; ^ and ]
 29431                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29432                                  ;	      ; _ - {
 29433                                  ;	 db   15 dup (0FFh)
 29434                                  ;	      ; } and |
 29435                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29436                                  
 29437                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29438                                  ;					; character in the table
 29439                                  
 29440                                  ;FCHK	equ 1		; normal name char, no chks needed
 29441                                  ;FDELIM	equ 2		; is a delimiter
 29442                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29443                                  ;FFCB	equ 8		; is valid in an FCB
 29444                                  
 29445                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29446                                  ;----------------------------------------------------------------------------
 29447                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29448                                  
 29449                                  CharType: ; 63 bytes
 29450 00004EF7 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29451 00004EFF 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29452 00004F07 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29453 00004F0F FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29454 00004F17 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29455 00004F1F FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29456 00004F27 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29457 00004F2F FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29458                                  
 29459                                  CharType_last equ ($ - CharType) * 2
 29460                                  
 29461                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29462                                  ;----------------------------------------------------------------------------
 29463                                  ;CharType:
 29464                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29465                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29466                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29467                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29468                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29469                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29470                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29471                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29472                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29473                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29474                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29475                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29476                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29477                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29478                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29479                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29480                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29481                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29482                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29483                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29484                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29485                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29486                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29487                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29488                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29489                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29490                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29491                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29492                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29493                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29494                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29495                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29496                                  
 29497                                  ;hkn; Table	ENDS
 29498                                  
 29499                                  ;ENDIF
 29500                                  
 29501                                  ; 20/05/2019 - Retro DOS v4.0
 29502                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29503                                  
 29504                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29505                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29506                                  
 29507                                  ;----------------------------------------------------------------------------
 29508                                  ;
 29509                                  ; Procedure Names : GetLet, UCase, GetLet3
 29510                                  ;
 29511                                  ; These routines take a character, convert it to upper case, and check
 29512                                  ; for delimiters.  Three different entry points:
 29513                                  ;	GetLet -  DS:[SI] = character to convert
 29514                                  ;	UCase  -  AL = character to convert
 29515                                  ;	GetLet3 - AL = character
 29516                                  ;		  [BX] = translation table to use
 29517                                  ;
 29518                                  ;	Exit (in all cases) : AL = upper case character
 29519                                  ;			      CY set if char is control char other than TAB
 29520                                  ;			      ZF set if char is a delimiter
 29521                                  ;	Uses : AX, flags
 29522                                  ;
 29523                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29524                                  ; inline version.  Return with carry set is only possible in the inline
 29525                                  ; version. The table lookup version is the one in use.
 29526                                  ;
 29527                                  ;----------------------------------------------------------------------------
 29528                                  
 29529                                  ; This entry point has character at [SI]
 29530                                  
 29531                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29532                                  GETLET:	
 29533 00004F36 AC                      	LODSB
 29534                                  
 29535                                  ; This entry point has character in AL
 29536                                  
 29537                                  	;entry	UCase
 29538                                  UCase:	
 29539                                  	; 09/08/2018
 29540                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29541                                  _UCase:
 29542 00004F37 53                      	PUSH	BX
 29543 00004F38 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29544                                  
 29545                                  ; Convert the character in AL to upper case
 29546                                  
 29547                                  gl_0:
 29548 00004F3B 3C61                    	CMP	AL,"a"
 29549 00004F3D 7214                    	JB	short gl_2	; Already upper case, go check type
 29550 00004F3F 3C7A                    	CMP	AL,"z"
 29551 00004F41 7702                    	JA	short gl_1
 29552 00004F43 2C20                    	SUB	AL,20H		; Convert to upper case
 29553                                  
 29554                                  ; Map European character to upper case
 29555                                  
 29556                                  gl_1:
 29557 00004F45 3C80                    	CMP	AL,80H
 29558 00004F47 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29559 00004F49 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29560                                  
 29561                                  	; M048 - Start 
 29562                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29563                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29564                                  	; preserve it.
 29565                                  
 29566                                  	; 09/08/2018 - Retro DOS v3.0
 29567                                  	; MSDOS 3.3
 29568                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29569                                  	;CS	XLAT
 29570                                  
 29571                                  	; 20/05/2019 - Retro DOS v4.0
 29572                                  
 29573                                  	; MSDOS 6.0
 29574 00004F4B 1E                      	push	ds
 29575                                  	;getdseg <ds>
 29576 00004F4C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29577 00004F51 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29578 00004F52 1F                      	pop	ds
 29579                                  
 29580                                  	; M048 - End
 29581                                  
 29582                                  ; Now check the type
 29583                                  
 29584                                  ;If TableLook
 29585                                  gl_2:
 29586                                  	; 20/05/2019 - Retro DOS v4.0
 29587 00004F53 50                      	PUSH	AX
 29588                                  
 29589                                  	; MSDOS 3.3
 29590                                  	;mov	bx,CharType
 29591                                  	;; 09/08/2018
 29592                                  	;;xlat	byte [cs:bx]
 29593                                  	;cs	xlat	
 29594                                  	
 29595                                  	; MSDOS 6.0
 29596 00004F54 E81800                  	CALL	GetCharType	; returns type flags in AL
 29597                                  	
 29598                                  	;test	al,1	
 29599 00004F57 A801                    	TEST	AL,FCHK 	; test for normal character
 29600 00004F59 58                      	POP	AX
 29601                                  
 29602 00004F5A 5B                      	POP	BX
 29603 00004F5B C3                      	RETN
 29604                                  
 29605                                  ; This entry has character in AL and lookup table in BX
 29606                                  
 29607                                  	; MSDOS 6.0
 29608                                  ;	;entry GetLet3
 29609                                  GETLET3: ; 10/08/2018
 29610 00004F5C 53                      	PUSH	BX
 29611 00004F5D EBDC                    	JMP	short gl_0
 29612                                  ;ELSE
 29613                                  ;
 29614                                  ;gl_2:
 29615                                  ;	POP	BX
 29616                                  ;	CMP	AL,"."
 29617                                  ;	retz
 29618                                  ;	CMP	AL,'"'
 29619                                  ;	retz
 29620                                  ;	CALL	PATHCHRCMP
 29621                                  ;	retz
 29622                                  ;	CMP	AL,"["
 29623                                  ;	retz
 29624                                  ;	CMP	AL,"]"
 29625                                  ;	retz
 29626                                  ;ENDIF
 29627                                  
 29628                                  ;---------------------------------------------------------------------
 29629                                  ;
 29630                                  ; DELIM - check if character is a delimiter
 29631                                  ;	Entry : AX = character to check
 29632                                  ;	Exit  : ZF set if character is not a delimiter
 29633                                  ;	Uses  : Flags
 29634                                  ;
 29635                                  ;--------------------------------------------------------------------
 29636                                  
 29637                                  	;entry	DELIM
 29638                                  DELIM:
 29639                                  ;IF TableLook
 29640                                  	; 20/05/2019 - Retro DOS v4.0
 29641 00004F5F 50                      	PUSH	AX
 29642                                  
 29643                                  	; MSDOS 3.3
 29644                                  	;push	bx
 29645                                  	;mov	bx,CharType
 29646                                  	;;09/08/2018
 29647                                  	;;xlat	byte [cs:bx]
 29648                                  	;cs	xlat
 29649                                  	;pop	bx
 29650                                  
 29651                                  	; MSDOS 6.0
 29652 00004F60 E80C00                  	CALL	GetCharType
 29653                                  	
 29654                                  	;test	al,2
 29655 00004F63 A802                    	TEST	AL,FDELIM
 29656 00004F65 58                      	POP	AX
 29657 00004F66 C3                      	RETN
 29658                                  ;ELSE
 29659                                  ;	CMP	AL,":"
 29660                                  ;	retz
 29661                                  ;
 29662                                  ;	CMP	AL,"<"
 29663                                  ;	retz
 29664                                  ;	CMP	AL,"|"
 29665                                  ;	retz
 29666                                  ;	CMP	AL,">"
 29667                                  ;	retz
 29668                                  ;
 29669                                  ;	CMP	AL,"+"
 29670                                  ;	retz
 29671                                  ;	CMP	AL,"="
 29672                                  ;	retz
 29673                                  ;	CMP	AL,";"
 29674                                  ;	retz
 29675                                  ;	CMP	AL,","
 29676                                  ;	retz
 29677                                  ;ENDIF
 29678                                  
 29679                                  ;-------------------------------------------------------------------------
 29680                                  ;
 29681                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29682                                  ;	Entry : AL = character to check
 29683                                  ;	Exit  : ZF set if character is a space
 29684                                  ;	Uses  : flags
 29685                                  ;
 29686                                  ;-------------------------------------------------------------------------
 29687                                  
 29688                                  	;entry SPCHK
 29689                                  SPCHK:
 29690                                  ;IF TableLook
 29691                                  	; 20/05/2019 - Retro DOS v4.0
 29692 00004F67 50                      	PUSH	AX
 29693                                  
 29694                                  	; MSDOS 3.3
 29695                                  	;push	bx
 29696                                  	;mov	bx,CharType
 29697                                  	;; 09/08/2018
 29698                                  	;;xlat	byte [cs:bx]
 29699                                  	;cs	xlat
 29700                                  	;pop	bx
 29701                                  
 29702                                  	; MSDOS 6.0
 29703 00004F68 E80400                  	CALL	GetCharType
 29704                                  	
 29705                                  	;test	al,4
 29706 00004F6B A804                    	TEST	AL,FSPCHK
 29707 00004F6D 58                      	POP	AX
 29708 00004F6E C3                      	RETN
 29709                                  ;ELSE
 29710                                  ;	CMP	AL,9		; Filter out tabs too
 29711                                  ;	retz
 29712                                  ;; WARNING! " " MUST be the last compare
 29713                                  ;	CMP	AL," "
 29714                                  ;	return
 29715                                  ;ENDIF
 29716                                  
 29717                                  ;-------------------------------------------------------------------------
 29718                                  ;
 29719                                  ;  GetCharType - return flag bits indicating character type
 29720                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29721                                  ;	defined above at label CharType.
 29722                                  ;
 29723                                  ;	Entry : AL = character to return type flags for
 29724                                  ;	Exit  : AL = type flags
 29725                                  ;	Uses  : AL, flags
 29726                                  ;
 29727                                  ;-------------------------------------------------------------------------
 29728                                  
 29729                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29730                                  
 29731                                  	; 20/05/2019 - Retro DOS v4.0
 29732                                  	; MSDOS 6.0
 29733                                  GetCharType:
 29734                                  	;cmp	al,7Eh
 29735 00004F6F 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29736 00004F71 7316                    	jae	short gct_90		; return standard value
 29737                                  
 29738 00004F73 53                      	push	bx
 29739 00004F74 BB[F74E]                	mov	bx,CharType		; load lookup table
 29740 00004F77 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29741                                  	;xlat	cs:[bx] 		; get flags
 29742 00004F79 2ED7                    	cs	xlat	
 29743 00004F7B 5B                      	pop	bx
 29744                                  
 29745                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29746                                  ; we have to shift the flags down to the low nibble
 29747                                  
 29748 00004F7C 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29749                                  
 29750 00004F7E D0E8                    	shr	al,1			; we want high nibble, shift it down
 29751 00004F80 D0E8                    	shr	al,1
 29752 00004F82 D0E8                    	shr	al,1
 29753 00004F84 D0E8                    	shr	al,1
 29754                                  gct_80:
 29755 00004F86 240F                    	and	al,0Fh			; clear the unused nibble
 29756 00004F88 C3                      	retn
 29757                                  gct_90:
 29758 00004F89 B00F                    	mov	al,0Fh			; set all flags
 29759 00004F8B C3                      	retn
 29760                                  
 29761                                  ;----------------------------------------------------------------------------
 29762                                  ;
 29763                                  ; Procedure : PATHCHRCMP
 29764                                  ;
 29765                                  ;----------------------------------------------------------------------------
 29766                                  
 29767                                  PATHCHRCMP:
 29768 00004F8C 3C2F                    	CMP	AL,'/'
 29769 00004F8E 7606                    	JBE	short PathRet
 29770 00004F90 3C5C                    	CMP	AL,'\'
 29771 00004F92 C3                      	retn
 29772                                  GotFor:
 29773 00004F93 B05C                    	MOV	AL,'\'
 29774 00004F95 C3                      	retn
 29775                                  PathRet:
 29776 00004F96 74FB                    	JZ	short GotFor
 29777 00004F98 C3                      	retn
 29778                                  
 29779                                  ;============================================================================
 29780                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29781                                  ;============================================================================
 29782                                  ; 30/07/2018 - Retro DOS v3.0
 29783                                  ; 29/04/2019 - Retro DOS v4.0
 29784                                  
 29785                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29786                                  
 29787                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29788                                  
 29789                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29790                                  ;	NAME	IBMCTRLC
 29791                                  
 29792                                  ;**	Low level routines for detecting special characters on CON input,
 29793                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29794                                  ;	process termination code, and the INT 0 divide overflow handler.
 29795                                  ;
 29796                                  ;	FATAL
 29797                                  ;	FATAL1
 29798                                  ;	reset_environment
 29799                                  ;	DSKSTATCHK
 29800                                  ;	SPOOLINT
 29801                                  ;	STATCHK
 29802                                  ;	CNTCHAND
 29803                                  ;	DIVOV
 29804                                  ;	CHARHARD
 29805                                  ;	HardErr
 29806                                  ;
 29807                                  ;	Revision history:
 29808                                  ;
 29809                                  ;	    AN000	version 4.0   Jan 1988
 29810                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29811                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29812                                  ;
 29813                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29814                                  ;	      flags register. In order to return to user normally DOS used to
 29815                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29816                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29817                                  ;
 29818                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29819                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29820                                  ;	      charhard.
 29821                                  
 29822                                  ; 29/04/2019 - Retro DOS v4.0
 29823                                  	; MSDOS 6.0
 29824                                  ;		public	LowInt23Addr		
 29825                                  LowInt23Addr: ;	LABEL	DWORD
 29826 00004F99 [CD10]0000              	DW	LowInt23, 0
 29827                                  
 29828                                  ;		public	LowInt24Addr
 29829                                  LowInt24Addr: ;	LABEL	DWORD
 29830 00004F9D [E110]0000              	DW	LowInt24, 0
 29831                                  
 29832                                  ;		public	LowInt28Addr
 29833                                  LowInt28Addr: ;	LABEL	DWORD
 29834 00004FA1 [F510]0000              	DW	LowInt28, 0
 29835                                  
 29836                                  ;Break	<Checks for ^C in CON I/O>
 29837                                  
 29838                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29839                                  ; 05/05/2019 - Retro DOS v4.0
 29840                                  
 29841                                  ;---------------------------------------------------------------------------
 29842                                  ;
 29843                                  ; Procedure Name : DSKSTATCHK
 29844                                  ;
 29845                                  ; Check for ^C if only one level in
 29846                                  ;
 29847                                  ;---------------------------------------------------------------------------
 29848                                  
 29849                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29850                                  
 29851                                  	; 29/02/2024 - Retro DOS v4.2
 29852                                  
 29853                                  DSKSTATCHK:        
 29854                                  	;CMP	BYTE [INDOS],1
 29855 00004FA5 36803E[2103]01          	CMP	BYTE [SS:INDOS],1 ; 15/03/2018
 29856                                  	;retnz			; Do NOTHING
 29857                                  	; 16/12/2022
 29858 00004FAB 7537                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018
 29859                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29860                                  	;jz	short _RET37 ; dskstatchk1
 29861                                  	;retn
 29862                                  ;_RET37:
 29863                                  ;dskstatchk1:
 29864 00004FAD 51                      	PUSH    CX
 29865 00004FAE 06                      	PUSH    ES
 29866 00004FAF 53                      	PUSH    BX
 29867 00004FB0 1E                      	PUSH    DS
 29868 00004FB1 56                      	PUSH    SI
 29869                                          
 29870                                  	;PUSH	CS
 29871                                  	;POP	ES
 29872                                  	;PUSH	CS
 29873                                  	;POP	DS
 29874                                  
 29875 00004FB2 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29876 00004FB4 8EC3                    	MOV	ES,BX		; for deviocall2
 29877 00004FB6 8EDB                    	MOV	DS,BX
 29878                                  
 29879                                  	; 16/12/2022
 29880                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29881                                  
 29882                                  	; 05/05/2019
 29883                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29884                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29885                                  	;mov	word [ss:DSKSTST],0
 29886                                  
 29887                                  	; 16/12/2022
 29888                                  	; 25/06/2019
 29889 00004FB8 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29890 00004FBD C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29891 00004FC2 C706[9503]0000          	mov	word [DSKSTST],0
 29892                                  
 29893 00004FC8 BB[9203]                        MOV     BX,DSKSTCALL
 29894                                  
 29895                                  	;LDS	SI,[ss:BCON]
 29896                                          ; 25/062019
 29897 00004FCB C536[3200]              	lds	si,[BCON]
 29898                                  
 29899                                  ; 16/12/2022
 29900                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29901                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29902                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29903                                  ;	mov	word [ss:DSKSTST],0
 29904                                  ;	mov	bx,DSKSTCALL
 29905                                  ;	lds	si,[ss:BCON]
 29906                                  
 29907 00004FCF E898F5                  	CALL	DEVIOCALL2
 29908                                  
 29909                                  	; 29/02/2024
 29910 00004FD2 1E                      	push	ds ; *
 29911 00004FD3 16                      	push	ss
 29912 00004FD4 1F                      	pop	ds
 29913                                  
 29914                                   	; 15/03/2018
 29915                                  	;;test	word [ss:DSKSTST],200h
 29916                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29917                                  	; 05/05/2019
 29918                                  	;test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29919                                  	; 29/02/2024
 29920 00004FD5 F606[9603]02            	test	byte [DSKSTST+1],(STBUI>>8) ; 2
 29921 00004FDA 7409                    	jz	short _GotCh		; No characters available
 29922                                  
 29923 00004FDC 30C0                    	XOR	AL,AL			; Set zero
 29924                                  RET36:
 29925                                  	; 29/02/2024
 29926 00004FDE 5E                      	pop	si ; *
 29927                                  	;
 29928 00004FDF 5E                      	POP	SI
 29929 00004FE0 1F                      	POP	DS
 29930 00004FE1 5B                      	POP	BX
 29931 00004FE2 07                      	POP	ES
 29932 00004FE3 59                      	POP	CX
 29933                                  	; 16/12/2022
 29934                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29935                                  _RET37:
 29936 00004FE4 C3                      	RETN
 29937                                  
 29938                                  _GotCh:
 29939                                  
 29940                                  ; 29/02/2024
 29941                                  %if 0
 29942                                  	MOV	AL,[SS:DSKCHRET]	; SS override
 29943                                  
 29944                                  	CMP	AL,"C"-"@" ; cmp al,3
 29945                                  	JNZ	SHORT RET36
 29946                                  	MOV	BYTE [SS:DSKSTCOM],DEVRD
 29947                                  	MOV	BYTE [SS:DSKSTCALL],DRDWRHL
 29948                                  	MOV	[SS:DSKCHRET],CL
 29949                                  	; 09/09/2018
 29950                                  	MOV	word [SS:DSKSTST],0
 29951                                  	MOV	word [SS:DSKSTCNT],1
 29952                                  %else
 29953                                  	; 29/02/2024
 29954 00004FE5 A0[9F03]                	mov	al,[DSKCHRET]
 29955                                  
 29956 00004FE8 3C03                    	cmp	al,"C"-"@" ; cmp al,3
 29957 00004FEA 75F2                    	jnz	short RET36
 29958                                  
 29959 00004FEC C606[9403]04            	mov	byte [DSKSTCOM],DEVRD
 29960 00004FF1 C606[9203]16            	mov	byte [DSKSTCALL],DRDWRHL
 29961 00004FF6 880E[9F03]              	mov	[DSKCHRET],cl
 29962 00004FFA C706[9503]0000          	mov	word [DSKSTST],0
 29963 00005000 C706[A403]0100          	mov	word [DSKSTCNT],1
 29964 00005006 1F                      	pop	ds ; *
 29965                                  %endif
 29966                                  	
 29967 00005007 E860F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29968                                  
 29969 0000500A 5E                              POP     SI
 29970 0000500B 1F                              POP     DS
 29971 0000500C 5B                              POP     BX                      ; Clean stack
 29972 0000500D 07                              POP     ES
 29973 0000500E 59                              POP     CX
 29974 0000500F E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29975                                  
 29976                                  	; 05/05/2019
 29977                                  NOSTOP:
 29978                                  	; MSDOS 6.0
 29979 00005012 3C10                    	CMP	AL,"P"-"@"
 29980 00005014 7509                    	JNZ	short check_next
 29981                                  				    	; SS override
 29982 00005016 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29983 0000501C 7405                    	JZ	short INCHKJ		; no
 29984                                  check_end:	; 24/09/2023
 29985 0000501E C3                      	retn
 29986                                  check_next:
 29987                                  	;IF	NOT TOGLPRN
 29988                                  	;CMP	AL,"N"-"@"
 29989                                  	;JZ	short INCHKJ
 29990                                  	;ENDIF
 29991                                  
 29992 0000501F 3C03                    	CMP	AL,"C"-"@"
 29993                                  	; 24/09/2023
 29994                                  	;JZ	short INCHKJ
 29995                                  ;check_end:
 29996                                  	;retn
 29997 00005021 75FB                    	jnz	short check_end
 29998                                  
 29999                                  	; 24/09/2023
 30000                                  	; 08/09/2018
 30001                                  INCHKJ:	; 10/08/2018
 30002 00005023 E9A500                  	jmp	INCHK
 30003                                  
 30004                                  	; MSDOS 3.3
 30005                                          ;CMP	AL,"P"-"@"  ; cmp al,16
 30006                                          ;JZ	short INCHKJ
 30007                                  
 30008                                  	; 15/04/2018
 30009                                          ;;IF	NOT TOGLPRN
 30010                                          ;CMP	AL,"N"-"@"
 30011                                          ;JZ	SHORT INCHKJ
 30012                                          ;;ENDIF
 30013                                  	
 30014                                  	;CMP	AL,"C"-"@"  ; cmp al,3
 30015                                          ;JZ	short INCHKJ
 30016                                  	;RETN
 30017                                  
 30018                                  ;	; 08/09/2018
 30019                                  ;INCHKJ:; 10/08/2018
 30020                                  ;	JMP	INCHK
 30021                                  
 30022                                  ;----------------------------------------------------------------------------
 30023                                  ;
 30024                                  ; Procedure Name : SpoolInt
 30025                                  ;
 30026                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 30027                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 30028                                  ; the middle of an INT 24.
 30029                                  ;
 30030                                  ;----------------------------------------------------------------------------
 30031                                  
 30032                                  SPOOLINT:
 30033 00005026 9C                      	PUSHF
 30034                                  	; 15/03/2018
 30035 00005027 36803E[5803]00          	CMP	BYTE [SS:IDLEINT],0	; SS override
 30036 0000502D 7423                    	JZ	SHORT POPFRET
 30037 0000502F 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0
 30038 00005035 751B                    	JNZ	SHORT POPFRET		; No spool ints in error mode
 30039                                  
 30040                                  	; 30/07/2018
 30041                                  
 30042                                  	; Note that we are going to allow an external program to issue system 
 30043                                  	; calls at this time. We MUST preserve IdleInt across this.
 30044                                  
 30045 00005037 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 30046                                  
 30047                                  	; 05/05/2019 - Retro DOS v4.0
 30048                                   
 30049                                  	; MSDOS 6.0
 30050 0000503C 36803E[F211]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30051 00005042 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 30052 00005044 CD28                    	INT	int_spooler  ; int 28h	; N: Execute user int 28 handler
 30053 00005046 EB05                    	jmp	short spool_ret_addr
 30054                                  
 30055                                  do_low_int28:
 30056                                  	;call	far [ss:LowInt28Addr]
 30057 00005048 2EFF1E[A14F]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 30058                                  
 30059                                  spool_ret_addr:
 30060                                  	;INT	int_spooler		; INT 28h
 30061                                  
 30062 0000504D 368F06[5803]            	POP	WORD [SS:IDLEINT]
 30063                                  POPFRET:
 30064 00005052 9D                      	POPF
 30065                                  _RET18:  
 30066 00005053 C3                      	RETN
 30067                                  
 30068                                  ; 05/05/2019 - Retro DOS v4.0
 30069                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 30070                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30071                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 30072                                  
 30073                                  ;----------------------------------------------------------------------------
 30074                                  ;
 30075                                  ; Procedure Name : STATCHK
 30076                                  ;
 30077                                  ;----------------------------------------------------------------------------
 30078                                  
 30079                                  STATCHK:
 30080 00005054 E84EFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 30081                                                                          ; input redirection
 30082 00005057 53                              PUSH    BX
 30083 00005058 31DB                            XOR     BX,BX
 30084 0000505A E837E5                          CALL	GET_IO_SFT
 30085 0000505D 5B                              POP     BX
 30086 0000505E 72F3                            JC      SHORT _RET18
 30087                                  
 30088 00005060 B401                            MOV     AH,1
 30089 00005062 E836F3                          CALL	IOFUNC
 30090 00005065 74BF                            JZ      SHORT SPOOLINT
 30091 00005067 3C13                            CMP     AL,'S'-'@'
 30092 00005069 75A7                            JNZ     SHORT NOSTOP
 30093                                  
 30094                                  	; 05/05/2019
 30095                                  	; MSDOS 6.0			; SS override
 30096 0000506B 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 30097 00005071 75AB                    	JNZ	short check_end		; AN000; yes
 30098                                  
 30099 00005073 30E4                            XOR     AH,AH
 30100 00005075 E823F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 30101 00005078 EB4A                            JMP     SHORT PAUSOSTRT
 30102                                  PRINTOFF:
 30103                                  PRINTON:
 30104 0000507A 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 30105                                  
 30106                                  	; 30/07/2018 - Retro DOS v3.0
 30107 0000507F 53                      	PUSH	BX
 30108 00005080 BB0400                  	MOV	BX,4
 30109 00005083 E80EE5                  	call	GET_IO_SFT
 30110 00005086 5B                      	POP	BX
 30111 00005087 72CA                    	jc	short _RET18
 30112 00005089 06                      	PUSH	ES
 30113 0000508A 57                      	PUSH	DI
 30114 0000508B 1E                      	PUSH	DS
 30115 0000508C 07                      	POP	ES
 30116 0000508D 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 30117                                  	;test	word [es:di+5],800h
 30118                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 30119                                  	; 05/05/2019
 30120 0000508F 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 30121 00005094 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 30122                                  
 30123                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 30124                                  					; See if allowed
 30125 00005096 50                      	push	ax
 30126 00005097 B82611                  	mov	ax,1126h
 30127 0000509A CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30128                                  			; Return: CF set on error, AX = error code
 30129                                  			; STACK unchanged
 30130 0000509C 58                      	pop	ax
 30131                                  
 30132 0000509D 730F                    	JNC	short NORM_PR 		; Echo is OK
 30133                                  
 30134                                  					; SS override
 30135 0000509F 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 30136                                  
 30137                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 30138                                  
 30139 000050A5 50                      	push    ax
 30140 000050A6 B82411                  	mov     ax,1124h
 30141 000050A9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30142                                  			; ES:DI -> SFT, SS = DOS CS
 30143 000050AB 58                      	pop     ax
 30144                                  
 30145 000050AC EB10                    	JMP	SHORT RETP6
 30146                                  NORM_PR:
 30147 000050AE 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 30148 000050B4 7505                    	JNZ	short PRNOPN
 30149 000050B6 E838F4                  	call	DEV_CLOSE_SFT
 30150 000050B9 EB03                    	JMP	SHORT RETP6
 30151                                  PRNOPN:
 30152 000050BB E82BF4                  	call	DEV_OPEN_SFT
 30153                                  RETP6:
 30154 000050BE 5F                      	POP	DI
 30155 000050BF 07                      	POP	ES
 30156                                  STATCHK_RETN:
 30157 000050C0 C3                              RETN
 30158                                  PAUSOLP:
 30159 000050C1 E862FF                          CALL    SPOOLINT
 30160                                  PAUSOSTRT:
 30161 000050C4 B401                            MOV     AH,1
 30162 000050C6 E8D2F2                          CALL	IOFUNC
 30163 000050C9 74F6                            JZ      SHORT PAUSOLP
 30164                                  INCHK:
 30165 000050CB 53                              PUSH    BX
 30166 000050CC 31DB                            XOR     BX,BX
 30167 000050CE E8C3E4                          CALL	GET_IO_SFT
 30168 000050D1 5B                              POP     BX
 30169 000050D2 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 30170 000050D4 30E4                            XOR     AH,AH
 30171 000050D6 E8C2F2                          CALL	IOFUNC
 30172                                  	; 30/07/2018
 30173                                  	; MSDOS 3.3
 30174                                          ;CMP	AL,'P'-'@' ;cmp al,16
 30175                                          ;JNZ	SHORT NOPRINT
 30176                                  
 30177                                  	;cmp	byte [SS:SCAN_FLAG],0
 30178                                  	;JZ	SHORT PRINTON	
 30179                                  	;mov	byte [ss:SCAN_FLAG],0
 30180                                  
 30181                                  	; 05/05/2019
 30182                                  	; MSDOS 6.0
 30183 000050D9 3C10                    	CMP	AL,"P"-"@"
 30184                                  	;;;;  7/14/86	ALT_Q key fix
 30185 000050DB 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 30186                                  ;NOPRINT:	
 30187                                  	;IF	NOT TOGLPRN
 30188                                  	;CMP	AL,"N"-"@"
 30189                                  	;JZ	short PRINTOFF
 30190                                  	;ENDIF
 30191 000050DD 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 30192                                  	;retnz
 30193 000050DF 75DF                    	jnz	short STATCHK_RETN
 30194                                  
 30195                                  	; !! NOTE: FALL THROUGH !!
 30196                                  
 30197                                  ;---------------------------------------------------------------------------
 30198                                  ;
 30199                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 30200                                  ;
 30201                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 30202                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 30203                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 30204                                  ; processing to continue; 2) the original interrupt return address to the code
 30205                                  ; that performed the function call in the first place. If the user CTRL-C
 30206                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 30207                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 30208                                  ; is simulated.
 30209                                  ;
 30210                                  ;---------------------------------------------------------------------------
 30211                                  
 30212                                  CNTCHAND:
 30213                                  	; MSDOS 6.0			; SS override
 30214                                  					; AN002; from RAWOUT
 30215                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 30216                                  	;JNZ	short around_deadlock 	; AN002;
 30217                                  
 30218                                  	; 05/05/2019 - Retro DOS v4.0
 30219                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 30220 000050E1 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 30221 000050E7 7508                    	JNZ	short around_deadlock 	; AN002;
 30222                                  
 30223 000050E9 B003                            MOV     AL,3			; Display "^C"
 30224 000050EB E8EDC5                          CALL	BUFOUT
 30225 000050EE E888C4                          CALL	CRLF
 30226                                  around_deadlock:
 30227 000050F1 16                              PUSH    SS
 30228 000050F2 1F                              POP     DS
 30229 000050F3 803E[5703]00                    CMP     BYTE [CONSWAP],0
 30230 000050F8 7403                            JZ      SHORT NOSWAP
 30231 000050FA E82BE1                          CALL	SWAPBACK
 30232                                  NOSWAP:
 30233 000050FD FA                      	CLI				; Prepare to play with stack
 30234 000050FE 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 30235 00005102 8B26[8405]              	MOV	SP,[USER_SP]
 30236 00005106 E842B3                          CALL	restore_world       ; User registers now restored
 30237                                  
 30238                                  	; 30/07/2018 - Retro DOS v3.0 
 30239                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 30240                                          ; 14/03/2018 - Retro DOS v2.0
 30241                                  	;MOV	BYTE [CS:INDOS],0	
 30242                                          ;MOV	BYTE [CS:ERRORMODE],0
 30243                                          ;MOV	[CS:ConC_Spsave],SP
 30244                                  	;clc	;30/07/2018
 30245                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 30246                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 30247                                  			; Return: return via RETF 2 with CF set
 30248                                  			; DOS will abort program with errorlevel 0
 30249                                  			; else
 30250                                  			; interrupted DOS call continues
 30251                                  
 30252                                  	; 05/05/2019 - Retro DOS v4.0
 30253                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 30254                                  
 30255                                  	; CS was used to address these variables. We have to use DOSDATA
 30256                                  	
 30257 00005109 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 30258                                  			; (pop es, after 'call restore_world')	
 30259 0000510A 1E                      	push	ds
 30260                                  	;getdseg <ds>			; ds -> dosdata
 30261 0000510B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30262 00005110 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 30263 00005115 C606[2003]00            	mov	byte [ERRORMODE],0
 30264 0000511A 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 30265                                  	; User SP has changed because of push. Adjust for it
 30266 0000511E 8306[3203]02            	add	word [ConC_Spsave],2
 30267                                  
 30268 00005123 803E[F211]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 30269 00005128 1F                       	pop	ds	; restore ds
 30270 00005129 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 30271 0000512B F8                      	CLC				
 30272 0000512C CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 30273 0000512E EB06                    	jmp	short ctrlc_ret_addr
 30274                                  
 30275                                  	; 05/05/2019
 30276                                  do_low_int23:
 30277 00005130 F8                      	clc
 30278 00005131 2EFF1E[994F]            	call	far [cs:LowInt23Addr]	
 30279                                  
 30280                                  	; 30/07/2018 
 30281                                  
 30282                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 30283                                  
 30284                                  ; The user has returned to us. The circumstances we allow are:
 30285                                  ;
 30286                                  ;   IRET	We retry the operation by redispatching the system call
 30287                                  ;   CLC/RETF	POP the stack and retry
 30288                                  ;   ... 	Exit the current process with ^C exit
 30289                                  ;
 30290                                  ; User's may RETURN to us and leave interrupts on. 
 30291                                  ; Turn 'em off just to be sure
 30292                                  
 30293                                  ctrlc_ret_addr: ; 05/05/2019
 30294                                  
 30295 00005136 FA                      	CLI
 30296                                  
 30297                                  	; MSDOS 3.3 
 30298                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 30299                                  	;PUSHF				; and the flags (maybe new call)
 30300                                  	;POP	AX
 30301                                  
 30302                                  	; 05/05/2019
 30303                                  	; MSDOS 6.0
 30304                                  
 30305                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 30306                                  
 30307 00005137 50                      	push	ax
 30308 00005138 8CD8                    	mov	ax,ds
 30309                                  	;getdseg <ds>			; ds -> dosdata
 30310 0000513A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30311 0000513F A3[0A0D]                	mov	[TEMPSEG],ax
 30312 00005142 58                      	pop	ax
 30313 00005143 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 30314 00005146 9C                      	pushf				; and the flags (maybe new call)
 30315 00005147 58                      	pop	ax
 30316                                  
 30317                                  ; See if the input stack is identical to the output stack
 30318                                  
 30319                                  	; MSDOS 3.3
 30320                                  	;CMP	SP,[CS:ConC_Spsave]
 30321                                  	;JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30322                                  
 30323                                  	; MSDOS 6.0
 30324 00005148 3B26[3203]              	CMP	SP,[ConC_Spsave]
 30325 0000514C 750A                    	JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30326                                  
 30327                                  ; Repeat the operation by redispatching the system call.
 30328                                  
 30329                                  ctrlc_repeat:
 30330                                  	; MSDOS 3.3
 30331                                  	;MOV	AX,[CS:USER_IN_AX]
 30332                                  	; 05/05/2019
 30333                                  	; MSDOS 6.0
 30334 0000514E A1[3A03]                	mov	ax,[USER_IN_AX]
 30335 00005151 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 30336                                  	; MSDOS 3.3 & MSDOS 6.0 
 30337                                  	;transfer COMMAND
 30338                                  COMMANDJ:
 30339 00005155 E9B0B1                  	JMP	COMMAND
 30340                                  
 30341                                  ; The current SP is NOT the same as the input SP. Presume that he 
 30342                                  ; RETF'd leaving some flags on the stack and examine the input
 30343                                  
 30344                                  ctrlc_try_new:
 30345                                  	; 29/02/2024
 30346                                  	;ADD	SP,2			; pop those flags
 30347                                  	;
 30348                                  	;;test	ax,1
 30349                                  	;TEST	AX,f_Carry		; did he return with carry?
 30350 00005158 A801                    	test	al,f_Carry ; test al,1
 30351                                  	;
 30352                                  	; 29/02/2024
 30353 0000515A 58                      	pop	ax  ; (PCDOS 7.1 IBMDOS.COM)
 30354                                  	;
 30355 0000515B 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 30356                                  
 30357                                  	; MSDOS 6.0
 30358 0000515D 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 30359                                  
 30360                                  	; Well...  time to abort the user.  
 30361                                  	; Signal a ^C exit and use the EXIT system call..
 30362                                  
 30363                                  ctrlc_abort:
 30364                                  	; MSDOS 3.3
 30365                                          ;;MOV	AX,(EXIT SHL 8) + 0
 30366                                          ;MOV	AX,(EXIT*256) + 0 ; 4C00h
 30367                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 30368                                          ;transfer COMMAND	    ; give up by faking $EXIT
 30369                                  	;;JMP	SHORT COMMANDJ
 30370                                  	;JMP	COMMAND
 30371                                  
 30372                                  	; 05/05/2019 - Retro DOS v4.0
 30373                                  	; MSDOS 6.0
 30374 00005161 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 30375 00005164 1E                      	push	ds
 30376                                  	;getdseg <ds>			; ds -> dosdata
 30377 00005165 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 30378 0000516A C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 30379 0000516F 1F                      	pop	ds
 30380                                  	;transfer COMMAND		; give up by faking $EXIT
 30381 00005170 EBE3                    	JMP	SHORT COMMANDJ
 30382                                  	;JMP	COMMAND
 30383                                  
 30384                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 30385                                  ;----------------------------------------------------------------------------
 30386                                  ;
 30387                                  ; Procedure Name : DIVOV
 30388                                  ;
 30389                                  ; Default handler for division overflow trap
 30390                                  ;
 30391                                  ;----------------------------------------------------------------------------
 30392                                  
 30393                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30394                                  DIVOV: 
 30395                                  	; 05/05/2019 - Retro DOS v4.0
 30396                                  	; 30/07/2018
 30397                                  	; 07/07/2018 - Retro DOS v3.0
 30398 00005172 BE[9D09]                	mov	si,DIVMES
 30399 00005175 2E8B1E[B009]            	mov	bx,[cs:DivMesLen]
 30400                                  	;mov	ax,cs
 30401                                  	;mov	ss,ax
 30402                                  	; 05/05/2019
 30403                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30404 0000517A 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30405 0000517F BC[A007]                	mov     sp,AUXSTACK
 30406                                  	;call	RealDivOv ; MSDOS 3.3
 30407 00005182 E80200                  	call	_OUTMES ; MSDOS 6.0
 30408 00005185 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30409                                  
 30410                                  ; 30/07/2018
 30411                                  
 30412                                  ; MSDOS 6.0
 30413                                  ;---------------------------------------------------------------------------
 30414                                  ;
 30415                                  ; Procedure Name : OutMes
 30416                                  ;
 30417                                  ;
 30418                                  ; OutMes: perform message output
 30419                                  ; Inputs:   SS:SI points to message
 30420                                  ;	    BX has message length
 30421                                  ; Outputs:  message to BCON
 30422                                  ;
 30423                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30424                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30425                                  ;NB. This procedure is called only from DIVOV. -SR
 30426                                  ;
 30427                                  ;---------------------------------------------------------------------------
 30428                                  
 30429                                  ;MSDOS 3.3
 30430                                  ;---------------------------------------------------------------------------
 30431                                  ; RealDivOv: perform actual divide overflow stuff.
 30432                                  ; Inputs:   none
 30433                                  ; Outputs:  message to BCON
 30434                                  ;---------------------------------------------------------------------------
 30435                                  
 30436                                  	; 05/05/2019 - Retro DOS v4.0
 30437                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30438                                  
 30439                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30440                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30441                                  
 30442                                  ;---------------------------------------------------------------------------
 30443                                  ;
 30444                                  ; Procedure Name : OutMes
 30445                                  ;
 30446                                  ; OutMes: perform message output
 30447                                  ; Inputs:   SS:SI points to message
 30448                                  ;	    BX has message length
 30449                                  ; Outputs:  message to BCON
 30450                                  ;
 30451                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30452                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30453                                  ;NB. This procedure is called only from DIVOV. -SR
 30454                                  ;
 30455                                  ;---------------------------------------------------------------------------
 30456                                  
 30457                                  	; 30/07/2018
 30458                                  	; MSDOS 6.0
 30459                                  _OUTMES:
 30460                                  	; MSDOS 3.3
 30461                                  ;RealDivOv:
 30462                                  	; 07/07/2018 - Retro DOS v3.0
 30463                                          ;Context ES
 30464 00005187 16                      	push	ss ; 05/05/2019
 30465                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30466 00005188 07                      	POP	ES
 30467                                          ;Context DS
 30468 00005189 16                      	push	ss ; 05/05/2019	
 30469                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30470 0000518A 1F                      	POP	DS
 30471 0000518B C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30472 00005190 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30473 00005195 C706[9503]0000                  MOV     WORD [DSKSTST],0
 30474                                  	; BX = [DivMesLen] = 19
 30475 0000519B 891E[A403]                      MOV     [DSKSTCNT],BX
 30476 0000519F BB[9203]                        MOV     BX,DSKSTCALL
 30477 000051A2 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30478                                  	; 08/09/2018
 30479                                  	;mov	[DEVIOBUF_PTR],si
 30480                                  	; MSDOS 6.0
 30481                                  					; CS is used for string, fill in 
 30482                                  					; segment address 
 30483                                  	;mov	[DOSSEG_INIT],cs ; 29/02/2024
 30484 000051A6 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30485                                  
 30486 000051AA C536[3200]                      LDS     SI,[BCON]
 30487 000051AE E8B9F3                          CALL	DEVIOCALL2
 30488                                  
 30489                                  	;; 14/03/2018
 30490                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30491                                  	;; 08/09/2018
 30492                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30493                                          ;MOV	WORD [CS:DSKSTCNT],1
 30494                                          
 30495                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30496                                  
 30497                                  	; ES still points to DOSDATA. ES is
 30498                                  					; not destroyed by deviocall2. So use
 30499                                  					; ES override.
 30500                                  
 30501 000051B1 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30502 000051B8 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30503                                  
 30504 000051BF C3                      	RETN
 30505                                  
 30506                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30507                                  ;---------------------------------------------------------------------------
 30508                                  ;
 30509                                  ; Procedure Name : CHARHARD
 30510                                  ;
 30511                                  ;
 30512                                  ; Character device error handler
 30513                                  ; Same function as HARDERR
 30514                                  ;
 30515                                  ;---------------------------------------------------------------------------
 30516                                  
 30517                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30518                                  CHARHARD:
 30519                                  	; 05/05/2019 - Retro DOS v4.0
 30520                                  	; 30/07/2018
 30521                                  	; 08/07/2018 - Retro DOS v3.0
 30522                                  
 30523                                  	; MSDOS 6.0
 30524                                  		   			; M024 - start
 30525 000051C0 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30526                                  	;jne	short @f		; Y: allow fail
 30527 000051C6 750B                    	jne	short chard1
 30528                                  
 30529 000051C8 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30530                                  
 30531 000051CB 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30532 000051D1 7503                    	jnz	short ctrlp		; Y: 
 30533                                  ;@@:
 30534                                  chard1:					; M024 - end
 30535                                  	; MSDOS 6.0 & MSDOS 3.3
 30536                                  
 30537                                  ; Character device error handler
 30538                                  ; Same function as HARDERR
 30539                                  
 30540                                  	;or	ah,38h
 30541 000051D3 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30542                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30543 000051D6 368826[4B03]            	mov	[SS:ALLOWED],ah
 30544                                  
 30545                                  	; 15/03/2018
 30546 000051DB 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30547 000051E0 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30548 000051E5 56                              PUSH    SI
 30549                                  	;and	di,0FFh
 30550 000051E6 81E7FF00                        AND     DI,STECODE
 30551 000051EA 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30552 000051EC E86400                          CALL    FATALC
 30553 000051EF 5E                              POP     SI
 30554                                  	;return
 30555 000051F0 C3                              RETN
 30556                                  
 30557                                  ;---------------------------------------------------------------------------
 30558                                  ;
 30559                                  ; Procedure Name : HardErr
 30560                                  ;
 30561                                  ; Hard disk error handler. Entry conditions:
 30562                                  ;	DS:BX = Original disk transfer address
 30563                                  ;	DX = Original logical sector number
 30564                                  ;	CX = Number of sectors to go (first one gave the error)
 30565                                  ;	AX = Hardware error code
 30566                                  ;	DI = Original sector transfer count	
 30567                                  ;	ES:BP = Base of drive parameters
 30568                                  ;	[READOP] = 0 for read, 1 for write
 30569                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30570                                  ; Output:
 30571                                  ;	[FAILERR] will be set if user responded FAIL
 30572                                  ;
 30573                                  ;--------------------------------------------------------------------------
 30574                                  
 30575                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30576                                  HARDERR:
 30577                                  	; 05/05/2019 - Retro DOS v4.0
 30578                                  	; 30/07/2018
 30579                                  	; 08/07/2018 - Retro DOS v3.0
 30580 000051F1 97                      	XCHG    AX,DI			; Error code in DI, count in AX
 30581                                  	;and	di,0FFh
 30582 000051F2 81E7FF00                	AND	DI,STECODE		; And off status bits
 30583                                  	;CMP	DI,WRECODE		; Write Protect Error?
 30584                                  	;cmp	di,0
 30585 000051F6 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30586 000051F9 750A                    	JNZ	short NOSETWRPERR
 30587 000051FB 50                      	PUSH    AX
 30588                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30589                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30590                                  	;;MOV	AL,[ES:BP+0]
 30591                                  	; 15/12/2022
 30592 000051FC 268A4600                	mov	al,[ES:BP]
 30593                                  		; 15/03/2018
 30594 00005200 36A2[2203]              	MOV	[SS:WPERR],AL		; Flag drive with WP error
 30595 00005204 58                      	POP	AX
 30596                                  NOSETWRPERR:
 30597 00005205 29C8                    	SUB	AX,CX		  ; Number of sectors successfully transferred
 30598 00005207 01C2                    	ADD	DX,AX		  ; First sector number to retry
 30599 00005209 52                      	PUSH    DX
 30600                                  	; 08/07/2018
 30601                                  	;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30602 0000520A 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30603 0000520E 5A                      	POP	DX
 30604 0000520F 01C3                    	ADD	BX,AX			; First address for retry
 30605 00005211 30E4                    	XOR	AH,AH			; Flag disk section in error
 30606                                  	;CMP	DX,[ES:BP+6] 		; In reserved area?
 30607 00005213 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30608 00005217 721A                    	JB	SHORT ERRINT
 30609 00005219 FEC4                    	INC	AH			; Flag for FAT
 30610                                  	;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30611                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019
 30612 0000521B 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30613 0000521F 7308                    	JAE	short TESTDIR		; No
 30614                                  		; Err in FAT must force recomp of freespace
 30615                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30616                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30617 00005221 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30618 00005227 EB0A                    	JMP	SHORT ERRINT
 30619                                  TESTDIR:
 30620 00005229 FEC4                    	INC	AH
 30621                                  	;CMP	DX,[ES:BP+0BH]		; In directory?
 30622 0000522B 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR]
 30623 0000522F 7202                    	JB	SHORT ERRINT
 30624 00005231 FEC4                    	INC	AH			; Must be in data area
 30625                                  ERRINT:
 30626 00005233 D0E4                    	SHL	AH,1			; Make room for read/write bit
 30627 00005235 360A26[7505]            	OR	AH,[SS:READOP] ; 15/03/2018
 30628                                  
 30629                                  	; 15/08/2018
 30630                                  					; SS override for allowed and EXITHOLD
 30631 0000523A 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30632                                  
 30633                                  	;entry   FATAL
 30634                                  FATAL:
 30635                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30636                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30637                                  	;;MOV	AL,[ES:BP+0]		; Get drive number
 30638                                  	; 15/12/2022
 30639 0000523F 268A4600                	MOV	AL,[ES:BP]
 30640                                  
 30641                                  	;entry   FATAL1
 30642                                  FATAL1:  
 30643                                  	; 15/03/2018	
 30644 00005243 368C06[8205]            	MOV	[SS:EXITHOLD+2],ES
 30645 00005248 36892E[8005]            	MOV	[SS:EXITHOLD],BP	; The only things we preserve
 30646                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30647                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30648 0000524D 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30649 00005251 8CC5                    	MOV	BP,ES		  ; BP:SI points to the device involved
 30650                                  
 30651                                  	; DI has the INT-24-style extended error. We now map the error code
 30652                                  	; for this into the normalized get extended error set by using the
 30653                                  	; ErrMap24 table as a translate table. Note that we translate ONLY
 30654                                  	; the device returned codes and leave all others beyond the look up
 30655                                  	; table alone.
 30656                                  
 30657                                  	; 08/07/2018 - Retro DOS v3.0
 30658                                  FATALC:
 30659 00005253 E89501                  	call	SET_I24_EXTENDED_ERROR
 30660                                  	;cmp	di,0Ch
 30661 00005256 83FF0C                  	CMP	DI,error_I24_gen_failure
 30662 00005259 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30663 0000525B BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30664                                  					;  Only come via GetExtendedError
 30665                                  ;** ----------------------------------------------------------------
 30666                                  ;
 30667                                  ; Entry point used by REDIRector on Network I 24 errors.
 30668                                  ;
 30669                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30670                                  ;
 30671                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30672                                  ;	EXITHOLD set for restore of ES:BP.
 30673                                  ; ------------------------------------------------------------------
 30674                                  	;entry	NET_I24_ENTRY
 30675                                  NET_I24_ENTRY:
 30676                                  GOT_RIGHT_CODE:
 30677 0000525E 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30678 00005264 7404                    	JZ	SHORT NoSetFail
 30679 00005266 B003                    	MOV	AL,3
 30680 00005268 EB6C                    	JMP	short FailRet
 30681                                  NoSetFail:
 30682 0000526A 368926[8805]            	MOV	[SS:CONTSTK],SP		; SS override
 30683 0000526F 16                      	PUSH	SS
 30684 00005270 07                      	POP	ES
 30685                                      
 30686                                  	; Wango!!! We may need to free some user state info... In 
 30687                                  	; particular, we may have locked down a JFN for a user and he may
 30688                                  	; NEVER return to us. Thus,we need to free it here and then
 30689                                  	; reallocate it when we come back.
 30690                                  
 30691 00005271 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30692 00005277 740C                    	JZ	short _NoFree
 30693 00005279 1E                      	push	ds
 30694 0000527A 56                      	push	si
 30695 0000527B 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30696 00005280 C604FF                  	MOV	BYTE [SI],0FFH
 30697 00005283 5E                      	pop	si
 30698 00005284 1F                      	pop	ds
 30699                                  
 30700                                  _NoFree:
 30701 00005285 FA                      	CLI
 30702                                  					; Prepare to play with stack
 30703 00005286 36FE06[2003]            	INC	BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30704 0000528B 36FE0E[2103]            	DEC	BYTE [SS:INDOS]		; INT 24 handler might not return
 30705                                  
 30706                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30707                                  
 30708                                  	;; Extended Open hooks
 30709                                  					; AN000;IFS.I24 error disabled
 30710                                  	;test	byte [ss:EXTOPEN_ON],2
 30711 00005290 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF
 30712 00005296 7404                    	JZ	short i24yes		; AN000;IFS.no
 30713                                  faili24:				; AN000;
 30714 00005298 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30715 0000529A EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30716                                  i24yes: 				; AN000;
 30717                                  	;; Extended Open hooks
 30718                                  
 30719 0000529C 368E16[8605]            	MOV	SS,[SS:USER_SS]
 30720 000052A1 268B26[8405]            	MOV	SP,[ES:USER_SP]	; User stack pointer restored
 30721                                  
 30722                                  	;;int	24h	
 30723                                  	;IN	int_fatal_abort		; Fatal error interrupt vector,
 30724                                  					; must preserve ES
 30725                                  	; 05/05/2019
 30726 000052A6 26803E[F211]00          	cmp	byte [es:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30727 000052AC 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30728 000052AE CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30729                                  					; must preserve ES
 30730 000052B0 EB05                    	jmp	short criterr_ret_addr
 30731                                  
 30732                                  do_low_int24:
 30733                                  	; 05/05/2019
 30734                                  	; MSDOS 6.0
 30735 000052B2 2EFF1E[9D4F]            	call    far [cs:LowInt24Addr]
 30736                                  criterr_ret_addr:
 30737 000052B7 268926[8405]            	MOV	[ES:USER_SP],SP	; restore our stack
 30738 000052BC 268C16[8605]            	MOV	[ES:USER_SS],SS
 30739 000052C1 8CC5                    	MOV	BP,ES
 30740 000052C3 8ED5                    	MOV	SS,BP
 30741                                  passi24:
 30742 000052C5 368B26[8805]            	MOV	SP,[SS:CONTSTK]
 30743 000052CA 36FE06[2103]            	INC	BYTE [SS:INDOS]		; Back in the DOS
 30744 000052CF 36C606[2003]00          	MOV	BYTE [SS:ERRORMODE],0	; Back from INT 24
 30745 000052D5 FB                      	STI
 30746                                  FailRet:
 30747 000052D6 36C42E[8005]            	LES	BP,[SS:EXITHOLD]
 30748                                  	
 30749                                  	; 08/07/2018
 30750                                  
 30751                                  	; Triage the user's reply.
 30752                                  
 30753 000052DB 3C01                    	CMP	AL,1
 30754 000052DD 723D                    	JB	short CheckIgnore	; 0 => ignore
 30755 000052DF 7445                    	JZ	short CheckRetry	; 1 => retry
 30756 000052E1 3C03                    	CMP	AL,3			; 3 => fail
 30757 000052E3 7549                    	JNZ	short DoAbort 		; 2, invalid => abort
 30758                                  
 30759                                  	; The reply was fail. See if we are allowed to fail.
 30760                                  
 30761                                  					; SS override for ALLOWED, EXTOPEN_ON,
 30762                                  					; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30763                                  	;test	byte [ss:ALLOWED],8
 30764 000052E5 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30765 000052EB 7441                    	jz	short DoAbort		; No, do abort
 30766                                  DoFail:
 30767 000052ED B003                    	MOV	AL,3			; just in case...
 30768                                  					; AN000;EO. I24 error disabled
 30769                                  	; 05/05/2019
 30770                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30771 000052EF 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30772 000052F5 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30773                                  	
 30774 000052F7 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30775                                  CleanUp:
 30776 000052FC 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30777 00005302 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30778                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30779                                  	;jnz	short CleanUp2
 30780                                  	;retn
 30781                                  	; 17/12/2022
 30782 00005308 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30783                                  CleanUp2:
 30784 0000530A 1E                      	push	ds
 30785 0000530B 56                      	push	si
 30786 0000530C 50                      	push	ax
 30787 0000530D 36A1[AA05]              	MOV	AX,[ss:SFN]
 30788 00005311 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30789 00005316 8804                    	MOV	[SI],AL
 30790 00005318 58                      	pop	ax
 30791 00005319 5E                      	pop	si
 30792 0000531A 1F                      	pop	ds
 30793                                  Cleanup_retn:
 30794 0000531B C3                      	retn
 30795                                  
 30796                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30797                                  
 30798                                  CheckIgnore:
 30799                                  	;test	byte [ss:ALLOWED],20h
 30800 0000531C 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30801                                  CheckRI:	; 29/02/2024
 30802 00005322 74C9                    	jz	short DoFail			; No, do fail
 30803 00005324 EBD6                    	jmp	short CleanUp
 30804                                  
 30805                                  	; The reply was RETRY. See if we are allowed to retry.
 30806                                  
 30807                                  CheckRetry:
 30808                                  	;test	byte [ss:ALLOWED],10h
 30809 00005326 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30810                                  	;jz	short DoFail			; No, do fail
 30811                                  	;JMP	short CleanUp
 30812                                  	; 29/02/2024 (PCDOS 7.1 IBMDOS.COM)
 30813 0000532C EBF4                    	jmp	short CheckRI
 30814                                  
 30815                                  	; The reply was ABORT.
 30816                                  DoAbort:
 30817 0000532E 16                      	push	ss
 30818 0000532F 1F                      	pop	ds
 30819                                  
 30820 00005330 803E[5703]00            	CMP	byte [CONSWAP],0
 30821 00005335 7403                    	JZ	short NOSWAP2
 30822 00005337 E8EEDE                  	call	SWAPBACK
 30823                                  NOSWAP2:
 30824                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30825                                  	; turn this abort into a fail.
 30826                                  
 30827                                  	;test	[fAborting],0FFh
 30828                                  	;jnz	short DoFail
 30829                                  
 30830 0000533A 803E[5903]00            	cmp	byte [fAborting],0
 30831 0000533F 75AC                    	JNZ	short DoFail
 30832                                  
 30833                                  	; Set return code
 30834                                  
 30835 00005341 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30836 00005346 30C0                    	XOR	AL,AL
 30837                                  
 30838                                  	; we are truly aborting the process. Go restore information from 
 30839                                  	; the PDB as necessary.
 30840                                  
 30841 00005348 E9850D                  	jmp	exit_inner
 30842                                  
 30843                                  ;** --------------------------------------------------------------------------
 30844                                  ;
 30845                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30846                                  ; different, then an old-style return is performed. If they are the same,
 30847                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30848                                  ; the source of the terminate addresses.
 30849                                  ;
 30850                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30851                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30852                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30853                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30854                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30855                                  ; operation. In essence, we dis-allow the abort response.
 30856                                  ;
 30857                                  ; output:   none.
 30858                                  ; ----------------------------------------------------------------------------
 30859                                  
 30860                                  	;entry	reset_environment
 30861                                  	
 30862                                  reset_environment:
 30863                                  	; 30/07/2018 - Retro DOS v3.0
 30864                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30865                                  
 30866                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30867                                  
 30868 0000534B 1E                      	PUSH	DS			; save PDB of process
 30869                                  
 30870                                  	; There are no critical sections in force. Although we may enter
 30871                                  	; here with critical sections locked down, they are no longer 
 30872                                  	; relevant. We may safely free all allocated resources.
 30873                                  
 30874 0000534C B482                    	MOV	AH,82h
 30875                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30876                                  	;int	2Ah 	
 30877 0000534E CD2A                    	INT	int_IBM
 30878                                  
 30879                                  					; SS override
 30880 00005350 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30881                                  
 30882                                  					; DOS 4.00 doesn't need it
 30883                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30884                                  					; Allow REDIR to clear some stuff
 30885                                  					; On process exit.
 30886 00005356 B82211                  	mov	ax, 1122h
 30887 00005359 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30888                                  			; SS = DOS CS
 30889                                  	;mov	al,22h	
 30890 0000535B B022                    	MOV	AL,int_terminate
 30891 0000535D E81ABB                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30892                                  
 30893 00005360 59                      	POP	CX			; get ThisPDB
 30894 00005361 06                      	push	es
 30895 00005362 53                      	push	bx			; save return address
 30896                                  
 30897 00005363 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30898 00005368 8EDB                    	MOV	DS,BX
 30899 0000536A A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30900                                  
 30901                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30902                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper
 30903                                  	; is not Exit_keep_process
 30904                                  	
 30905 0000536D 39D8                    	CMP	AX,BX
 30906 0000536F 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30907 00005371 39CB                    	CMP	BX,CX
 30908 00005373 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30909 00005375 50                      	PUSH	AX			; save parent
 30910                                  
 30911                                  					; SS override
 30912                                  	;cmp	byte [SS:EXIT_TYPE],3
 30913 00005376 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30914 0000537C 7406                    	JZ	short reset_to_parent 	; keeping this process
 30915                                  
 30916                                  	; We are truly removing a process. Free all allocation blocks
 30917                                  	; belonging to this PDB
 30918                                  
 30919                                  	;invoke	arena_free_process
 30920 0000537E E8870D                  	call	arena_free_process
 30921                                  
 30922                                  	; Kill off remainder of this process. Close file handles and signal
 30923                                  	; to relevant network folks that this process is dead. Remember that
 30924                                  	; CurrentPDB is STILL the current process!
 30925                                  
 30926                                  	;invoke	DOS_ABORT
 30927 00005381 E8BEDA                  	call	DOS_ABORT
 30928                                  
 30929                                  reset_to_parent:
 30930                                  					; SS override
 30931 00005384 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30932                                  
 30933                                  reset_return:				; come here for normal return
 30934                                  	;Context DS			; DS is used to refer to DOSDATA
 30935 00005389 16                      	push	ss
 30936 0000538A 1F                      	pop	ds	
 30937                                  
 30938 0000538B B0FF                    	MOV	AL,-1
 30939                                  
 30940                                  	; make sure that everything is clean In this case ignore any errors,
 30941                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30942                                  
 30943                                  	;EnterCrit critDisk
 30944 0000538D E863BF                  	call	ECritDisk
 30945                                  	;invoke	FLUSHBUF
 30946 00005390 E8A505                  	call	FLUSHBUF
 30947                                  	;LeaveCrit critDisk
 30948 00005393 E878BF                  	call	LCritDisk
 30949                                  
 30950                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30951                                  
 30952 00005396 E895F7                  	call	CHECK_VIRT_OPEN
 30953 00005399 FA                      	CLI
 30954 0000539A C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30955 0000539F C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30956 000053A4 C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30957 000053A9 8F06[8005]              	POP	WORD [EXITHOLD]
 30958 000053AD 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30959                                  
 30960                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30961                                  
 30962 000053B1 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30963 000053B5 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30964 000053B9 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30965                                  
 30966 000053BD E88BB0                  	call	restore_world
 30967                                  
 30968                                  	; 05/05/2019
 30969 000053C0 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30970                                  
 30971                                  	; MSDOS 6.0
 30972 000053C1 50                      	push	ax			; set up ds, but save ds in TEMPSEG
 30973 000053C2 8CD8                    	mov	ax,ds			; and not on stack.
 30974                                  	;getdseg <ds>			; ds -> dosdata
 30975 000053C4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30976 000053C9 A3[0A0D]                	mov	[TEMPSEG],ax
 30977 000053CC 58                      	pop	ax
 30978                                  					; set up ds to DOSDATA
 30979                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30980 000053CD A3[8405]                	mov	[USER_SP],ax
 30981                                  
 30982 000053D0 58                      	POP	AX			; suck off CS:IP of interrupt...
 30983 000053D1 58                      	POP	AX
 30984 000053D2 58                      	POP	AX
 30985                                  
 30986                                  ; M011 : BEGIN
 30987                                  
 30988                                  	; MSDOS 3.3
 30989                                  ;	MOV	AX,0F202h	; STI
 30990                                  
 30991                                  	; MSDOS 6.0
 30992 000053D3 9F                      	LAHF
 30993 000053D4 86E0                    	XCHG	AH,AL
 30994 000053D6 2402                    	AND	AL,2
 30995 000053D8 B4F2                    	MOV	AH,0F2h
 30996                                  
 30997                                  ; M011 : END
 30998                                  
 30999                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31000 000053DA 50                      	PUSH	AX
 31001                                   
 31002                                  	;PUSH	word [CS:EXITHOLD+2]
 31003                                  	;PUSH	word [CS:EXITHOLD]
 31004                                  	
 31005                                  	; MSDOS 6.0
 31006 000053DB FF36[8205]              	PUSH	word [EXITHOLD+2]
 31007 000053DF FF36[8005]              	PUSH	word [EXITHOLD]
 31008                                  
 31009                                  	;MOV	AX,[CS:USER_SP]
 31010                                  
 31011                                  	; MSDOS 6.0
 31012 000053E3 A1[8405]                	MOV	AX,[USER_SP]
 31013 000053E6 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 31014                                  
 31015 000053EA CF                      	IRET			; Long return back to user terminate address
 31016                                  
 31017                                  ;---------------------------------------------------------------------------
 31018                                  ;
 31019                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 31020                                  ;
 31021                                  ; This routine handles extended error codes.
 31022                                  ; Input : DI = error code from device
 31023                                  ; Output: All EXTERR fields are set
 31024                                  ;
 31025                                  ;--------------------------------------------------------------------------
 31026                                  
 31027                                  SET_I24_EXTENDED_ERROR:
 31028 000053EB 50                      	PUSH	AX
 31029                                  					; ErrMap24End is in DOSDATA
 31030 000053EC B8[BB0E]                	MOV	AX,ErrMap24End
 31031 000053EF 2D[AB0E]                	SUB	AX,ErrMap24
 31032                                  					; Change to dosdata to access
 31033                                  					; ErrMap24 and EXTERR -SR
 31034                                  	; 05/05/2019 - Retro DOS v4.0
 31035                                  	
 31036                                  	; MSDOS 6.0
 31037 000053F2 1E                      	push	ds
 31038                                  	;getdseg <ds>			; ds ->dosdata
 31039 000053F3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 31040                                  
 31041                                  	; AX is the index of the first unavailable error. Do not translate
 31042                                  	; if greater or equal to AX.
 31043                                  
 31044 000053F8 39C7                    	CMP	DI,AX
 31045 000053FA 89F8                    	MOV	AX,DI
 31046 000053FC 7306                    	JAE	short NoTrans
 31047                                  
 31048                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 31049 000053FE 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 31050 00005402 30E4                    	XOR	AH,AH
 31051                                  NoTrans:
 31052                                  	;MOV	[CS:EXTERR],AX
 31053 00005404 A3[2403]                	mov	[EXTERR],AX
 31054 00005407 1F                      	pop	ds
 31055                                  	;assume	ds:nothing
 31056 00005408 58                      	POP	AX
 31057                                  
 31058                                  	; Now Extended error is set correctly. Translate it to get correct
 31059                                  	; error locus class and recommended action.
 31060                                  
 31061 00005409 56                      	PUSH	SI
 31062                                  					; ERR_TABLE_24 is in DOSCODE 
 31063 0000540A BE[5B0E]                	MOV	SI,ERR_TABLE_24
 31064 0000540D E86AB2                  	call	CAL_LK			; Set other extended error fields
 31065 00005410 5E                      	POP	SI
 31066 00005411 C3                      	retn
 31067                                  
 31068                                  ;============================================================================
 31069                                  ; FAT.ASM, MSDOS 6.0, 1991
 31070                                  ;============================================================================
 31071                                  ; 30/07/2018 - Retro DOS v3.0
 31072                                  ; 20/05/2019 - Retro DOS v4.0
 31073                                  
 31074                                  ;	TITLE	FAT - FAT maintenance routines
 31075                                  ;	NAME	FAT
 31076                                  
 31077                                  ;**	FAT.ASM
 31078                                  ;----------------------------------------------------------------------------
 31079                                  ;	Low level local device routines for performing disk change sequence,
 31080                                  ;	setting cluster validity, and manipulating the FAT
 31081                                  ;
 31082                                  ;	IsEof
 31083                                  ;	UNPACK
 31084                                  ;	PACK
 31085                                  ;	MAPCLUSTER
 31086                                  ;	FATREAD_SFT
 31087                                  ;	FATREAD_CDS
 31088                                  ;	FAT_operation
 31089                                  ;
 31090                                  ;	Revision history:
 31091                                  ;
 31092                                  ;	  AN000  version Jan. 1988
 31093                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 31094                                  ;
 31095                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 31096                                  ;	       from CL0FATENTRY rather than disk.
 31097                                  
 31098                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 31099                                  
 31100                                  ;Break <IsEOF - check the quantity in BX for EOF>
 31101                                  ;----------------------------------------------------------------------------
 31102                                  ;
 31103                                  ; Procedure Name : IsEOF
 31104                                  ;
 31105                                  ; IsEOF - check the fat value in BX for eof.
 31106                                  ;
 31107                                  ;   Inputs:	ES:BP point to DPB
 31108                                  ;		BX has fat value
 31109                                  ;   Outputs:	JAE eof
 31110                                  ;   Registers modified: none
 31111                                  ;
 31112                                  ;---------------------------------------------------------------------------
 31113                                  
 31114                                  IsEOF:
 31115                                  	;cmp	word [es:bp+0Dh],0FF6h
 31116 00005412 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 31117 00005418 730B                    	JAE	short EOF16			; yes, check for eof there
 31118                                  
 31119                                  ;J.K. 8/27/86
 31120                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 31121                                  ;of any media that has "F0"(Other) as a MediaByte.
 31122                                  ;Hopely, this does not create any side effect for those who may use any value
 31123                                  ;other than "FF8-FFF" as an EOF for their own file.
 31124                                  
 31125 0000541A 81FBF00F                	cmp	bx,0FF0h
 31126 0000541E 7404                    	je	short IsEOF_other
 31127                                  
 31128 00005420 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 31129                                  IsEOF_other:
 31130 00005424 C3                      	retn
 31131                                  EOF16:
 31132 00005425 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 31133 00005428 C3                      	retn
 31134                                  
 31135                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 31136                                  
 31137                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 31138                                  ;---------------------------------------------------------------------------
 31139                                  ;
 31140                                  ; Procedur Name : UNPACK
 31141                                  ;
 31142                                  ; Inputs:
 31143                                  ;	BX = Cluster number (may be full 16-bit quantity)
 31144                                  ;	ES:BP = Base of drive parameters
 31145                                  ; Outputs:
 31146                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 31147                                  ;	Zero set means DI=0 (free cluster)
 31148                                  ;	Carry set means error (currently user FAILed to I 24)
 31149                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 31150                                  ;
 31151                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 31152                                  ;
 31153                                  ;----------------------------------------------------------------------------
 31154                                  	
 31155                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31156                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 31157                                  
 31158                                  	; 20/05/2019 - Retro DOS v4.0
 31159                                  UNPACK:
 31160                                  	; MSDOS 6.0			; M014 - Start
 31161 00005429 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 31162 0000542B 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 31163 0000542D 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 31164 00005431 09FF                    	or	di,di 			; return z if di=0
 31165 00005433 C3                      	retn				; done
 31166                                  up_cont:				; M014 - End
 31167                                  	; MSDOS 3.3 & MSDOS 6.0
 31168                                  	;cmp	bx,[es:bp+0Dh]
 31169 00005434 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 31170 00005438 7726                    	JA	short HURTFAT
 31171 0000543A E8D600                  	CALL	MAPCLUSTER
 31172 0000543D 721E                    	jc	short _DoContext
 31173 0000543F 8B3D                    	MOV	DI,[DI]
 31174 00005441 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 31175 00005443 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 31176 00005447 81FEF60F                	CMP	SI,4096-10
 31177 0000544B 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 31178 0000544D 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 31179 0000544F EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 31180                                  High12:
 31181 00005451 D1EF                    	SHR	DI,1
 31182 00005453 D1EF                    	SHR	DI,1
 31183 00005455 D1EF                    	SHR	DI,1
 31184 00005457 D1EF                    	SHR	DI,1
 31185                                  Unpack12:
 31186 00005459 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 31187                                  _DoContext:
 31188 0000545D 16                      	PUSH	SS
 31189 0000545E 1F                      	POP	DS
 31190 0000545F C3                      	retn
 31191                                  HURTFAT:
 31192                                  	;;mov	word [es:bp+1Eh],0FFFFh
 31193                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31194 00005460 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 31195 00005466 50                      	PUSH	AX
 31196 00005467 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 31197                                  
 31198                                  ;hkn; SS override
 31199 00005469 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 31200                                  ;
 31201                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 31202                                  ;
 31203 0000546F BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 31204 00005472 E8CAFD                  	call	FATAL
 31205 00005475 3C03                    	CMP	AL,3
 31206 00005477 F8                      	CLC
 31207 00005478 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 31208 0000547A F9                      	STC				; User said FAIL
 31209                                  OKU_RET:
 31210 0000547B 58                      	POP	AX
 31211                                  hurtfat_retn:
 31212 0000547C C3                      	retn
 31213                                  
 31214                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 31215                                  
 31216                                  ;Break	<PACK -- PACK FAT ENTRIES>
 31217                                  ;----------------------------------------------------------------------------
 31218                                  ;
 31219                                  ; Procedure Name : PACK
 31220                                  ;
 31221                                  ; Inputs:
 31222                                  ;	BX = Cluster number
 31223                                  ;	DX = Data
 31224                                  ;	ES:BP = Pointer to drive DPB
 31225                                  ; Outputs:
 31226                                  ;	The data is stored in the FAT at the given cluster.
 31227                                  ;	SI,DX,DI all destroyed
 31228                                  ;	Carry set means error (currently user FAILed to I 24)
 31229                                  ;	No other registers affected
 31230                                  ;
 31231                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 31232                                  ;
 31233                                  ;---------------------------------------------------------------------------
 31234                                  
 31235                                  	; 02/01/2024
 31236                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31237                                  	; 20/05/2019 - Retro DOS v4.0
 31238                                  PACK:
 31239                                  	; MSDOS 6.0			; M014 - start
 31240 0000547D 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 31241 0000547F 7505                    	jnz	short p_cont		; N: proceed with normal pack
 31242 00005481 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 31243 00005485 C3                      	retn				; done
 31244                                  p_cont:					; M014 - end
 31245                                  	; MSDOS 3.3 & MSDOS 6.0
 31246 00005486 E88A00                  	CALL	MAPCLUSTER
 31247 00005489 72D2                    	JC	short _DoContext
 31248 0000548B 8B35                    	MOV	SI,[DI]
 31249 0000548D 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 31250 0000548F 51                      	PUSH	CX			; move data to upper 12 bits
 31251 00005490 B104                    	MOV	CL,4
 31252 00005492 D3E2                    	SHL	DX,CL
 31253 00005494 59                      	POP	CX
 31254 00005495 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 31255 00005498 EB14                    	JMP	SHORT PACKIN
 31256                                  ALIGNED:
 31257                                  	;cmp	word [es:bp+0Dh],0FF6h
 31258 0000549A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 31259 000054A0 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 31260 000054A2 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 31261 000054A6 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 31262 000054AA EB02                    	JMP	SHORT PACKIN		; MZ go store
 31263                                  Pack16:
 31264 000054AC 31F6                    	XOR	SI,SI			; MZ no original data
 31265                                  PACKIN:
 31266 000054AE 09D6                    	OR	SI,DX
 31267 000054B0 8935                    	MOV	[DI],SI
 31268                                  
 31269                                  ;hkn; SS override
 31270 000054B2 36C536[E205]            	LDS	SI,[SS:CURBUF]
 31271                                  	; MSDOS 6.0
 31272 000054B7 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31273                                  					;LB. if already dirty		  ;AN000;
 31274 000054BB 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 31275                                  	; 10/06/2019
 31276 000054BD E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 31277                                  	
 31278                                  	;or	byte [si+5],40h
 31279 000054C0 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31280                                  yesdirty11:				;LB.				;AN000;
 31281                                  ;hkn; SS override
 31282 000054C4 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 31283                                  ;hkn; SS is DOSDATA
 31284 000054CA 16                      	push	ss
 31285 000054CB 1F                      	pop	ds
 31286 000054CC 74AE                    	jz	short hurtfat_retn	; Carry clear
 31287 000054CE 50                      	PUSH	AX
 31288 000054CF 53                      	PUSH	BX
 31289 000054D0 51                      	PUSH	CX
 31290 000054D1 A1[8E05]                	MOV	AX,[CLUSSAVE]
 31291 000054D4 8E1E[E405]              	MOV	DS,[CURBUF+2]
 31292                                  	;;add	si,16 ; MSDOS 3.3
 31293                                  	;add	si,20 ; MSDOS 6.0
 31294 000054D8 83C614                  	ADD	SI,BUFINSIZ
 31295 000054DB 8824                    	MOV	[SI],AH
 31296                                  ;hkn; SS is DOSDATA
 31297                                  	;Context DS
 31298 000054DD 16                      	push	ss
 31299 000054DE 1F                      	pop	ds
 31300                                  	
 31301 000054DF 50                      	PUSH	AX
 31302                                  	
 31303                                  	; MSDOS 6.0
 31304 000054E0 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 31305 000054E4 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 31306                                  
 31307                                  	; MSDOS 3.3 & MSDOS 6.0
 31308 000054E8 8B16[9005]              	MOV	DX,[CLUSSEC]
 31309                                  
 31310                                  	;MOV	SI,1	  ; *
 31311                                  	;XOR	AL,AL     ; *
 31312                                  	;call	GETBUFFRB ; *
 31313                                  	; 22/09/2023
 31314 000054EC E83E03                  	call	GETBUFFRA ; *
 31315                                  
 31316 000054EF 58                      	POP	AX
 31317 000054F0 721B                    	JC	short POPP_RET
 31318 000054F2 C53E[E205]              	LDS	DI,[CURBUF]
 31319                                  	
 31320                                  	; MSDOS 6.0
 31321 000054F6 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 31322                                  					;LB. if already dirty		  ;AN000;
 31323 000054FA 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 31324 000054FC E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 31325                                  	
 31326                                  	;or	byte [di+5],40h
 31327 000054FF 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 31328                                  yesdirty12:
 31329                                  	;;add	di,16
 31330                                  	;add	di,20 ; MSDOS 6.0
 31331                                  	; 02/01/2024
 31332                                  	;ADD	DI,BUFINSIZ
 31333                                  	;DEC	DI
 31334 00005503 83C713                  	add	di,BUFINSIZ-1 ; 19
 31335                                  
 31336                                  	;add	di,[es:bp+2]
 31337 00005506 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 31338 0000550A 8805                    	MOV	[DI],AL
 31339 0000550C F8                      	CLC
 31340                                  POPP_RET:
 31341 0000550D 16                      	PUSH	SS
 31342 0000550E 1F                      	POP	DS
 31343 0000550F 59                      	POP	CX
 31344 00005510 5B                      	POP	BX
 31345 00005511 58                      	POP	AX
 31346 00005512 C3                      	retn
 31347                                  
 31348                                  ; 31/07/2018 - Retro DOS v3.0
 31349                                  
 31350                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 31351                                  ;---------------------------------------------------------------------------
 31352                                  ;
 31353                                  ; Procedure Name : MAPCLUSTER
 31354                                  ;
 31355                                  ; Inputs:
 31356                                  ;	ES:BP Points to DPB
 31357                                  ;	BX Is cluster number
 31358                                  ; Function:
 31359                                  ;	Get a pointer to the cluster
 31360                                  ; Outputs:
 31361                                  ;	DS:DI Points to contents of FAT for given cluster
 31362                                  ;	DS:SI Points to start of buffer
 31363                                  ;	Zero Not set if cluster data is in high 12 bits of word
 31364                                  ;	Zero set if cluster data is in low 12 or 16 bits
 31365                                  ;	Carry set if failed.
 31366                                  ; SI is destroyed.
 31367                                  ;
 31368                                  ;---------------------------------------------------------------------------
 31369                                  
 31370                                  	; 20/05/2019 - Retro DOS v4.0
 31371                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 31372                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31373                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 31374                                  
 31375                                  MAPCLUSTER:
 31376                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 31377 00005513 C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 31378                                  	;SAVE	<AX,BX,CX,DX>
 31379 00005518 50                      	push	ax
 31380 00005519 53                      	push	bx
 31381 0000551A 51                      	push	cx
 31382 0000551B 52                      	push	dx
 31383 0000551C 89D8                    	MOV	AX,BX			; AX = BX
 31384 0000551E 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 31385 00005524 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 31386 00005526 D1E8                    	SHR	AX,1			; AX = BX/2
 31387                                  Map16:	
 31388                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 31389 00005528 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 31390                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31391 0000552A 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 31392 0000552C 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 31393 0000552E 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 31394                                  
 31395                                  ;IF FastDiv
 31396                                  ;
 31397                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 31398                                  ; case and apply a really fast algorithm to get the desired results
 31399                                  ;
 31400                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 31401                                  ; Fast method takes 39+20*4=119
 31402                                  ;
 31403                                  ; This saves a bunch.
 31404                                  
 31405 00005532 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31406 00005536 7510                    	jne	short _DoDiv		; 4  for no jump
 31407 00005538 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31408 0000553A 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31409 0000553E 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31410                                  	; MDOS 3.3
 31411                                  	;shr	al,1	
 31412                                  	; MDOS 6.0
 31413 00005540 D1EF                    	shr	di,1			; 2
 31414 00005542 D0D8                    	rcr	al,1			; 2
 31415                                  	; MDOS 3.3 (& MSDOS 6.0)
 31416 00005544 30E4                    	xor	ah,ah			; 3
 31417 00005546 EB04                    	jmp	short DivDone		; 16
 31418                                  _DoDiv:
 31419                                  ;ENDIF
 31420                                  	; MSDOS 3.3
 31421                                  	;xor	dx,dx
 31422                                  	; MSDOS 6.0
 31423 00005548 89FA                    	mov	dx,di			; 2
 31424                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31425 0000554A F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31426                                  ;IF FastDiv
 31427                                  DivDone:
 31428                                  ;ENDIF
 31429                                  	;add	ax,[es:bp+6]
 31430 0000554C 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31431 00005550 49                      	DEC	CX			; CX is sector size - 1
 31432                                  	;SAVE	<AX,DX,CX>
 31433 00005551 50                      	push	ax
 31434 00005552 52                      	push	dx
 31435 00005553 51                      	push	cx
 31436 00005554 89C2                    	MOV	DX,AX
 31437                                  
 31438                                  	; MSDOS 6.0
 31439                                  	; 22/09/2023
 31440                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31441                                  	;
 31442                                  	; MDOS 3.3 (& MSDOS 6.0)
 31443                                  	;XOR	AL,AL	   ; *
 31444                                  	;MOV	SI,1	   ; *
 31445                                  	;;invoke GETBUFFRB ; *
 31446                                  	;call	GETBUFFRB  ; *
 31447                                  	; 22/09/2023
 31448 00005556 E8CE02                  	call	GETBUFFRC  ; *!
 31449                                  
 31450                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31451 00005559 59                      	pop	cx
 31452 0000555A 58                      	pop	ax
 31453 0000555B 5A                      	pop	dx
 31454 0000555C 724C                    	JC	short MAP_POP
 31455                                  
 31456 0000555E C536[E205]              	LDS	SI,[CURBUF]
 31457                                  	;;lea	di,[si+16]
 31458                                  	;lea	di,[si+20] ; MSDOS 6.0
 31459 00005562 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31460 00005565 01C7                    	ADD	DI,AX
 31461 00005567 39C8                    	CMP	AX,CX
 31462 00005569 752C                    	JNZ	short MAPRET
 31463 0000556B 8A05                    	MOV	AL,[DI]
 31464                                  	;Context DS		 	;hkn; SS is DOSDATA
 31465 0000556D 16                      	push	ss
 31466 0000556E 1F                      	pop	ds	
 31467 0000556F FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31468 00005573 A2[8E05]                	MOV	[CLUSSAVE],AL
 31469 00005576 8916[9005]              	MOV	[CLUSSEC],DX
 31470                                  	; MSDOS 6.0
 31471 0000557A C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31472 00005580 42                      	INC	DX
 31473                                  
 31474                                  	; 22/09/2023
 31475                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31476                                  	;
 31477                                  	; MDOS 3.3 (& MSDOS 6.0)
 31478                                  	;XOR	AL,AL	   ; *
 31479                                  	;MOV	SI,1	   ; *
 31480                                  	;;invoke GETBUFFRB ; *
 31481                                  	;call	GETBUFFRB  ; *
 31482                                  	; 22/09/2023
 31483 00005581 E8A302                  	call	GETBUFFRC  ; *!
 31484 00005584 7224                    	JC	short MAP_POP
 31485                                  
 31486 00005586 C536[E205]              	LDS	SI,[CURBUF]
 31487 0000558A 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31488 0000558D 8A05                    	MOV	AL,[DI]
 31489                                  	;Context DS			;hkn; SS is DOSDATA
 31490 0000558F 16                      	push	ss
 31491 00005590 1F                      	pop	ds
 31492 00005591 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31493                                  
 31494                                  ;hkn; CLUSSAVE is in DOSDATA
 31495 00005594 BF[8E05]                	MOV	DI,CLUSSAVE
 31496                                  MAPRET:
 31497                                  	;RESTORE <DX,CX,BX>
 31498 00005597 5A                      	pop	dx
 31499 00005598 59                      	pop	cx
 31500 00005599 5B                      	pop	bx
 31501 0000559A 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31502 0000559C 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31503 000055A2 7302                    	JAE	short MapSet		; MZ no, set flags
 31504 000055A4 89D8                    	MOV	AX,BX
 31505                                  MapSet:
 31506 000055A6 A801                    	TEST	AL,1			; set zero flag if not on boundary
 31507                                  	;RESTORE <AX>
 31508 000055A8 58                      	pop	ax
 31509 000055A9 C3                      	retn
 31510                                  
 31511                                  MAP_POP:
 31512                                  	;RESTORE <DX,CX,BX,AX>
 31513 000055AA 5A                      	pop	dx
 31514 000055AB 59                      	pop	cx
 31515 000055AC 5B                      	pop	bx
 31516 000055AD 58                      	pop	ax
 31517                                  fatread_sft_retn: ; 17/12/2022
 31518 000055AE C3                      	retn
 31519                                  
 31520                                  ; 20/05/2019 - Retro DOS v4.0
 31521                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31522                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31523                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31524                                  
 31525                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31526                                  ;----------------------------------------------------------------------------
 31527                                  ;
 31528                                  ; Procedure Name : FATREAD_SFT
 31529                                  ;
 31530                                  ; Inputs:
 31531                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31532                                  ;		giving a NET SFT will produce system crashing results).
 31533                                  ;	DS DOSDATA
 31534                                  ; Function:
 31535                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31536                                  ;	if disk changed.
 31537                                  ;	In other respects, same as FATREAD_CDS.
 31538                                  ;	(note ES:DI destroyed!)
 31539                                  ; Outputs:
 31540                                  ;	Carry set if error (currently user FAILed to I 24)
 31541                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31542                                  ;	as far as invalidating curdir_ID is concerned.
 31543                                  ;	Since getting a true disk changed on this call is a screw up
 31544                                  ;	anyway, that's the way it goes.
 31545                                  ;
 31546                                  ;---------------------------------------------------------------------------
 31547                                  
 31548                                  FATREAD_SFT:
 31549 000055AF 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31550                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31551                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31552                                  	; 15/12/2022
 31553 000055B3 268A4600                	mov	AL,[ES:BP]
 31554 000055B7 A2[7605]                	MOV	[THISDRV],AL
 31555 000055BA E871B0                  	call	GOTDPB			;Set THISDPB
 31556                                  	;CALL	FAT_GOT_DPB
 31557                                  	; 17/12/2022
 31558 000055BD EB78                    	jmp	FAT_GOT_DPB
 31559                                  ;fatread_sft_retn:
 31560                                  	;retn
 31561                                  
 31562                                  ;----------------------------------------------------------------------------
 31563                                  ;
 31564                                  ; Procedure Name : FATREAD_CDS
 31565                                  ;
 31566                                  ; Inputs:
 31567                                  ;	DS:DOSDATA
 31568                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31569                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31570                                  ; Function:
 31571                                  ;	If disk may have been changed, media is determined and buffers are
 31572                                  ;	flagged invalid. If not, no action is taken.
 31573                                  ; Outputs:
 31574                                  ;	ES:BP = Drive parameter block
 31575                                  ;	THISDPB = ES:BP
 31576                                  ;	THISDRV set
 31577                                  ;	Carry set if error (currently user FAILed to I 24)
 31578                                  ; DS preserved , all other registers destroyed
 31579                                  ;
 31580                                  ;---------------------------------------------------------------------------
 31581                                  
 31582                                  	; 20/05/2019 - Retro DOS v4.0
 31583                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31584                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31585                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31586                                  
 31587                                  FATREAD_CDS:
 31588 000055BF 06                      	PUSH	ES
 31589 000055C0 57                      	PUSH	DI
 31590                                  	;les	bp,[es:di+45h]
 31591 000055C1 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31592                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31593                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31594                                  	; 15/12/2022
 31595 000055C5 268A4600                	mov	AL,[ES:BP]
 31596 000055C9 A2[7605]                	MOV	[THISDRV],AL
 31597 000055CC E85FB0                  	call	GOTDPB			;Set THISDPB
 31598 000055CF E86500                  	CALL	FAT_GOT_DPB
 31599 000055D2 5F                      	POP	DI			;Get back CDS pointer
 31600 000055D3 07                      	POP	ES
 31601 000055D4 72D8                    	jc	short fatread_sft_retn
 31602 000055D6 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31603                                  
 31604                                  ;	Media changed. We now need to find all CDS structures which use this
 31605                                  ;	DPB and invalidate their ID pointers.
 31606                                  
 31607                                  MED_CHANGE:
 31608 000055D8 31C0                    	XOR	AX,AX
 31609 000055DA 48                      	DEC	AX			; AX = -1
 31610 000055DB 1E                      	PUSH	DS
 31611 000055DC 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31612 000055E0 30ED                    	XOR	CH,CH			; CX is number of structures
 31613                                  	;lds	si,[es:di+45h]
 31614 000055E2 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31615                                  
 31616                                  ;hkn; SS override
 31617                                  
 31618                                  ;	Find all CDSs with this DevPtr
 31619                                  ;
 31620                                  ;	(ax) = -1
 31621                                  ;	(ds:si) = DevPtr
 31622                                  
 31623 000055E6 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31624                                  frcd20: 
 31625                                  	;;test	word [es:di+43h],8000h
 31626                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31627 000055EB 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31628 000055F0 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31629                                  
 31630                                  	; MSDOS 3.3
 31631                                  	;push	es
 31632                                  	;push	di
 31633                                  	;les	di,[es:di+45h]
 31634                                  	;;les	di,[ES:DI+curdir.devptr]
 31635                                  	;call	POINTCOMP
 31636                                  	;pop	di
 31637                                  	;pop	es
 31638                                  	;jnz	short frcd25
 31639                                  
 31640                                  	; MSDOS 6.0
 31641 000055F2 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31642 000055F6 7512                    	jne	short frcd25		; no match
 31643 000055F8 8CDB                    	mov	bx,ds
 31644 000055FA 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31645 000055FE 750A                    	jne	short frcd25		; CDS not for this drive
 31646                                  
 31647                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31648                                  	;test	[es:di+49h],ax
 31649 00005600 26854549                	test	[ES:DI+curdir.ID],AX
 31650 00005604 7404                    	JZ	short frcd25		; If root (0), leave root
 31651                                  	;mov	[es:di+49h],ax
 31652 00005606 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31653                                  frcd25:	
 31654                                  	;;add	di,81  ; MSDOS 3.3
 31655                                  	;add	di,88  ; MSDOS 6.0	 
 31656 0000560A 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31657 0000560D E2DC                    	LOOP	frcd20
 31658 0000560F 1F                      	POP	DS
 31659                                  NO_CHANGE:
 31660 00005610 C42E[8A05]              	LES	BP,[THISDPB]
 31661 00005614 F8                      	CLC
 31662 00005615 C3                      	retn
 31663                                  
 31664                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31665                                  ;----------------------------------------------------------------------------
 31666                                  ;
 31667                                  ; Procedure Name : FAT_operation
 31668                                  ;
 31669                                  ;----------------------------------------------------------------------------
 31670                                  
 31671                                  	; 03/01/2024
 31672                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31673                                  
 31674                                  FAT_operation:
 31675                                  	; 31/07/2018 - Retro DOS v3.0
 31676                                  FATERR:
 31677                                  	;mov	word [es:bp+1Eh],-1
 31678                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31679 00005616 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31680                                  					; Err in FAT must force recomp of freespace
 31681                                  	;and	di,0FFh
 31682 0000561C 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31683                                  	;mov	byte [ALLOWED],18h
 31684 00005620 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31685                                  	;mov	ah,1Ah
 31686 00005625 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31687 00005627 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31688 0000562A E816FC                  	call	FATAL1
 31689 0000562D C42E[8A05]              	LES	BP,[THISDPB]
 31690 00005631 3C03                    	CMP	AL,3
 31691 00005633 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31692 00005635 F9                      	STC				; User said FAIL
 31693 00005636 C3                      	retn
 31694                                  
 31695                                  FAT_GOT_DPB:
 31696                                  	;Context DS			;hkn; SS is DOSDATA
 31697 00005637 16                      	push	ss			
 31698 00005638 1F                      	pop	ds
 31699                                  	;mov	al,0Fh
 31700 00005639 B00F                    	MOV	AL,DMEDHL
 31701                                  	;mov	ah,[es:bp+1]
 31702 0000563B 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31703 0000563F A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31704 00005642 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31705 00005647 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31706                                  	;;mov	al,[es:bp+16h]
 31707                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31708 0000564D 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31709 00005651 A2[6703]                	MOV	[CALLMED],AL
 31710 00005654 06                      	PUSH	ES
 31711 00005655 1E                      	PUSH	DS
 31712                                  
 31713                                  ;hkn; DEVCALL is in DOSDATA
 31714 00005656 BB[5A03]                	MOV	BX,DEVCALL
 31715                                  	;;lds	si,[es:bp+12h]
 31716                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31717 00005659 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31718 0000565D 07                      	POP	ES			; ES:BX Points to call header
 31719 0000565E E809EF                  	call	DEVIOCALL2
 31720                                  	;Context DS		 	;hkn; SS is DOSDATA
 31721 00005661 16                      	push	ss
 31722 00005662 1F                      	pop	ds
 31723 00005663 07                      	POP	ES			; Restore ES:BP
 31724 00005664 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31725                                  	;test	di,8000h
 31726                                  	;jnz	short FATERR
 31727 00005668 09FF                    	or	di,di
 31728 0000566A 78AA                    	js	short FATERR		; have error
 31729 0000566C 30E4                    	XOR	AH,AH
 31730                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31731                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31732 0000566E 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31733 00005672 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31734                                  ; See if we had changed volume id by creating one on the diskette
 31735 00005675 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31736 00005679 7508                    	jnz	short CHECK_BYT
 31737 0000567B C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31738 00005680 E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 31739                                  					; new volume label.
 31740                                  CHECK_BYT:
 31741 00005683 0A26[6803]              	OR	AH,[CALLRBYT]
 31742                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31743                                  	;JMP	short NEWDSK
 31744                                  	; 17/12/2022
 31745 00005687 7863                    	js	short NEWDSK
 31746                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31747                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31748                                  	;JMP	short NEWDSK
 31749                                  
 31750                                  CHECK_ZR:
 31751 00005689 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31752                                  	; 24/09/2023
 31753                                  	; cf=0 (after 'or' instruction)
 31754                                  	;CLC
 31755 0000568B C3                      	retn				; If Media not changed (NZ)
 31756                                  
 31757                                  DISK_CHNG_ERR:
 31758 0000568C 06                      	PUSH	ES
 31759 0000568D 55                      	PUSH	BP
 31760                                  	;;les	bp,[es:bp+12h]
 31761                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31762 0000568E 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31763                                  	;;test	word [es:bp+4],800h
 31764                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31765 00005692 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31766 00005697 5D                      	POP	BP
 31767 00005698 07                      	POP	ES
 31768 00005699 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 31769 0000569B 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31770 0000569C 57                      	PUSH	DI
 31771 0000569D 16                      	push	ss			;hkn; SS is DOSDATA
 31772 0000569E 1F                      	pop	ds
 31773                                  	;mov	byte [ALLOWED],18h
 31774 0000569F C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31775 000056A4 06                      	PUSH	ES
 31776 000056A5 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31777 000056A9 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31778 000056AD 07                      	POP	ES
 31779 000056AE 893E[2803]              	MOV	[EXTERRPT],DI
 31780                                  	;mov	ax,0Fh
 31781 000056B2 B80F00                  	MOV	AX,error_I24_wrong_disk
 31782 000056B5 C606[7505]01            	MOV	byte [READOP],1		; Write
 31783                                  	;invoke	HARDERR
 31784 000056BA E834FB                  	call	HARDERR
 31785 000056BD 5F                      	POP	DI			; Get back buffer for ignore
 31786 000056BE 1F                      	POP	DS
 31787 000056BF 3C03                    	CMP	AL,3
 31788                                  FAIL_OPJ2:
 31789 000056C1 741C                    	JZ	short FAIL_OP
 31790 000056C3 E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31791                                  
 31792                                  CHKBUFFDIRT:
 31793                                  	; 20/05/2019 - Retro DOS v4.0
 31794                                  
 31795                                  	; MSDOS 3.3
 31796                                  	;lds	di,[BUFFHEAD]
 31797                                  
 31798                                  	; MSDOS 6.0
 31799 000056C6 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31800 000056CC 741E                    	je	short NEWDSK			; no, skip the check
 31801 000056CE E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 31802                                  nbuffer:
 31803                                  	;cmp	al,[di+4]
 31804 000056D1 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31805 000056D4 750D                    	jne	short lfnxt			; no, go for next buffer
 31806                                  	;test   byte [di+5],40h
 31807 000056D6 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31808 000056DA 7407                    	jz	short lfnxt			; no, go for next buffer
 31809                                  	;Context DS
 31810 000056DC 16                      	push	ss
 31811 000056DD 1F                      	pop	ds
 31812                                  	; 24/09/2023
 31813                                  	; cf=0 (after 'test' instruction)
 31814                                  	;clc
 31815 000056DE C3                      	retn
 31816                                  
 31817                                  FAIL_OP:					; This label & code is here
 31818                                  	;Context DS				;  for reachability
 31819 000056DF 16                      	push	ss
 31820 000056E0 1F                      	pop	ds
 31821 000056E1 F9                      	STC
 31822 000056E2 C3                      	retn
 31823                                  
 31824                                  lfnxt:
 31825                                  	; 15/08/2018 - Retro DOS v3.0
 31826                                  	; MSDOS 3.3
 31827                                  	;lds	di,[di]
 31828                                  
 31829                                  	; 20/05/2019 - Retro DOS v4.0
 31830 000056E3 8B3D                    	mov	di,[di]
 31831                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31832                                  	
 31833                                  	; MSDOS 3.3
 31834                                  	;cmp	di,-1
 31835                                  	;jne	short nbuffer
 31836                                  	
 31837                                  	; MSDOS 6.0
 31838 000056E5 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31839 000056EA 75E5                    	jne	short nbuffer			; no, check this guy also
 31840                                  
 31841                                  ; If no dirty buffers, assume Media changed
 31842                                  NEWDSK:
 31843                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31844                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31845 000056EC 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31846                                  						;  recompute
 31847                                  	; MSDOS 3.3
 31848                                  	;call	SETVISIT
 31849                                  	; MSDOS 6.0
 31850 000056F2 E8CD00                  	call	 GETCURHEAD
 31851                                  nxbuffer:
 31852                                  	; MSDOS 3.3
 31853                                  	;or 	byte [di+5],20h
 31854                                  	; MSDOS 3.3 & MSDOS 6.0
 31855                                  	;cmp	[di+4],al
 31856 000056F5 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31857 000056F8 7510                    	jne	short lfnxt2
 31858                                  	;test	byte [di+5],40h
 31859 000056FA F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31860 000056FE 758C                    	jnz	short DISK_CHNG_ERR
 31861                                  	;mov	word [di+4],20FFh
 31862 00005700 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31863 00005705 E8CC00                  	call	SCANPLACE
 31864                                  	; MSDOS 6.0
 31865 00005708 EB02                    	jmp	short skpbuff
 31866                                  lfnxt2:
 31867 0000570A 8B3D                    	mov	di,[di]
 31868                                  	;mov	di,[di+BUFFINFO.buf_next]
 31869                                  skpbuff:
 31870                                  	; MSDOS 6.0
 31871 0000570C 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31872 00005711 75E2                    	jne	short nxbuffer
 31873                                  
 31874 00005713 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31875 00005719 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31876 0000571B 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31877 00005720 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31878 00005722 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31879                                  ;lfnxt2:
 31880                                  	; MSDOS 3.3
 31881                                  	;call	SKIPVISIT
 31882                                  	;jnz	short nxbuffer
 31883                                  GOGETBPB:
 31884                                  	; MSDOS 3.3 & MSDOS 6.0
 31885                                  	;;lds	di,[es:bp+12h]
 31886                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31887 00005728 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31888                                  	; 20/05/2019
 31889                                  	;test	word [di+4],2000h
 31890                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31891 0000572C F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31892 00005730 7510                    	JNZ	short GETFREEBUF
 31893                                  	;context DS	    		;hkn; SS is DOSDATA
 31894 00005732 16                      	push	ss
 31895 00005733 1F                      	pop	ds
 31896 00005734 BB0200                  	MOV	BX,2
 31897 00005737 E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31898                                  FAIL_OPJ:
 31899 0000573A 72A3                    	JC	short FAIL_OP
 31900 0000573C C53E[E205]              	LDS	DI,[CURBUF]
 31901 00005740 EB13                    	JMP	SHORT GOTGETBUF
 31902                                  
 31903                                  GETFREEBUF:
 31904 00005742 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31905 00005743 55                      	PUSH	BP
 31906                                  	; MSDOS 3.3
 31907                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31908                                  	; MSDOS 6.0
 31909 00005744 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31910                                  ;hkn; SS override
 31911 00005746 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX ; 0	;LB.  buffer addr	  ;AN000;
 31912 0000574B E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 31913                                  	; MSDOS 3.3 & MSDOS 6.0
 31914 0000574E E84F02                  	call	BUFWRITE
 31915 00005751 5D                      	POP	BP
 31916 00005752 07                      	POP	ES
 31917                                  	;JC	short FAIL_OPJ
 31918 00005753 728A                    	jc	short FAIL_OP
 31919                                  GOTGETBUF:
 31920                                  	;;add	di,16
 31921                                  	;add	di,20 ; MSDOS 6.0
 31922 00005755 83C714                  	ADD	DI,BUFINSIZ
 31923                                  
 31924                                  ;hkn; SS override
 31925 00005758 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31926                                  	;Context DS			;hkn; SS is DOSDATA
 31927 0000575D 16                      	push	ss
 31928 0000575E 1F                      	pop	ds
 31929 0000575F 893E[6803]              	MOV	[CALLXAD],DI
 31930                                  	;mov	al,16h
 31931 00005763 B016                    	MOV	AL,DBPBHL
 31932                                  	;mov	ah,[es:bp+1]
 31933 00005765 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31934 00005769 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31935 0000576C C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31936 00005771 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31937                                  	;;mov	al,[es:bp+16h]
 31938                                  	;mov	al,[es:bp+17h]
 31939 00005777 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31940 0000577B A2[6703]                	MOV	[CALLMED],AL
 31941 0000577E 06                      	PUSH	ES ; **
 31942 0000577F 1E                      	PUSH	DS ; *
 31943                                  	;;
 31944                                  ; 03/01/2023
 31945                                  %if 0
 31946                                  	;;push	word [es:bp+14h]
 31947                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31948                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31949                                  	;;push	word [es:bp+12h]
 31950                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31951                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31952                                  
 31953                                  ;hkn; DEVCALL is in DOSDATA
 31954                                  	MOV	BX,DEVCALL
 31955                                  	POP	SI
 31956                                  	POP	DS			; DS:SI Points to device header
 31957                                  %endif
 31958                                  	; 03/01/2024
 31959 00005780 BB[5A03]                	mov	bx,DEVCALL
 31960                                  	;lds	si,[es:bp+13h]
 31961 00005783 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31962                                  					; DS:SI Points to device header
 31963                                  	;;
 31964 00005787 07                      	POP	ES ; *			; ES:BX Points to call header
 31965                                  	;invoke	DEVIOCALL2
 31966 00005788 E8DFED                  	call	DEVIOCALL2
 31967 0000578B 07                      	POP	ES ; **			; Restore ES:BP
 31968                                  	;Context DS
 31969 0000578C 16                      	push	ss		 	;hkn; SS is DOSDATA
 31970 0000578D 1F                      	pop	ds
 31971 0000578E 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31972                                  	; MSDOS 3.3
 31973                                  	;test	di,8000h
 31974                                  	;jnz	short FATERRJ
 31975                                  	; MSDOS 6.0
 31976 00005792 09FF                    	or	di,di
 31977 00005794 7829                    	js	short FATERRJ 		; have error
 31978                                  	;;mov	al,[es:bp+16h]
 31979                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31980 00005796 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31981 0000579A C536[6C03]              	LDS	SI,[CALLBPB]
 31982                                  	;;mov	word [es:bp+1Ch],0
 31983                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31984 0000579E 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31985                                  	;invoke	$SETDPB
 31986 000057A4 E80FB8                  	call	_$SETDPB
 31987                                  
 31988                                  ;hkn; SS override
 31989 000057A7 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31990                                  	;mov	al,[es:bp+8]
 31991 000057AC 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31992                                  
 31993                                  	; MSDOS 3.3
 31994                                  	;;mov	ah,[es:bp+0Fh]
 31995                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31996                                  	;;mov	[DI-8],ax
 31997                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31998                                  
 31999                                  	; MSDOS 6.0
 32000                                  	;mov	[di-0Ah],al
 32001 000057B0 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 32002                                  						;>32mb		  ;AN000;
 32003                                  	;mov	ax,[es:bp+0Fh]
 32004 000057B3 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 32005                                  	;mov	[di-9h],ax			  ;AC000;
 32006 000057B7 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 32007                                  					;>32mb Correct buffer info ;AC000;
 32008                                  	;Context DS			;hkn; SS is DOSDATA
 32009 000057BA 16                      	push	ss
 32010 000057BB 1F                      	pop	ds
 32011 000057BC 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 32012 000057BE C3                      	retn
 32013                                  
 32014                                  FATERRJ: 
 32015 000057BF E954FE                  	JMP	FATERR
 32016                                  
 32017                                  ;============================================================================
 32018                                  ; STDBUF.ASM
 32019                                  ;============================================================================
 32020                                  ; Retro DOS v2.0 - 12/03/2018
 32021                                  
 32022                                  ;
 32023                                  ; Standard buffer management for MSDOS
 32024                                  ;
 32025                                  
 32026                                  ;.xlist
 32027                                  ;.xcref
 32028                                  ;INCLUDE STDSW.ASM
 32029                                  ;.cref
 32030                                  ;.list
 32031                                  
 32032                                  ;TITLE	STDBUF - MSDOS buffer management
 32033                                  ;NAME	STDBUF
 32034                                  
 32035                                  ;INCLUDE BUF.ASM
 32036                                  
 32037                                  ;============================================================================
 32038                                  ; BUF.ASM
 32039                                  ;============================================================================
 32040                                  ; 31/07/2018 - Retro DOS v3.0
 32041                                  ; Retro DOS v2.0 - 12/03/2018
 32042                                  ;
 32043                                  ; buffer management for MSDOS
 32044                                  ;
 32045                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 32046                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 32047                                  ;
 32048                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 32049                                  ;
 32050                                  ;SETVISIT:
 32051                                  ;	; 31/07/2018 - Retro DOS v3.0
 32052                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 32053                                  ;; Inputs:
 32054                                  ;;      None
 32055                                  ;; Function:
 32056                                  ;;      Set up a scan of I/O buffers
 32057                                  ;; Outputs:
 32058                                  ;;      All visit flags = 0
 32059                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 32060                                  ;;                    may cause a scan to stop in the middle leaving some
 32061                                  ;;                    visit flags set, and some not set.
 32062                                  ;;      DS:DI Points to [BUFFHEAD]
 32063                                  ;; No other registers altered
 32064                                  ;
 32065                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32066                                  ;	PUSH    AX
 32067                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 32068                                  ;	;mov	al,0DFh
 32069                                  ;	mov	al,~buf_visit
 32070                                  ;SETLOOP:
 32071                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 32072                                  ;	;and	[DI+5],al
 32073                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 32074                                  ;       LDS     DI,[DI]
 32075                                  ;       CMP     DI,-1
 32076                                  ;       JNZ     SHORT SETLOOP
 32077                                  ;       POP     AX ; 09/09/2018
 32078                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32079                                  ;SVISIT_RETN:
 32080                                  ;       RETN
 32081                                  ;
 32082                                  ;SKIPVISIT:
 32083                                  ;	; 31/07/2018 - Retro DOS v3.0
 32084                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 32085                                  ;
 32086                                  ;; Inputs:
 32087                                  ;;      DS:DI Points to a buffer
 32088                                  ;; Function:
 32089                                  ;;      Skip visited buffers
 32090                                  ;; Outputs:
 32091                                  ;;      DS:DI Points to next unvisited buffer
 32092                                  ;;      Zero is set if skip to LAST buffer
 32093                                  ;; No other registers altered
 32094                                  ;
 32095                                  ;       CMP     DI,-1
 32096                                  ;       ;retz
 32097                                  ;       JZ	SHORT SVISIT_RETN
 32098                                  ;
 32099                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 32100                                  ;       ;;;retnz
 32101                                  ;       ;;JNZ	SHORT SVISIT_RETN
 32102                                  ;
 32103                                  ;	;test	byte [di+5],20h
 32104                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 32105                                  ;	JNZ	short SKIPLOOP
 32106                                  ;	
 32107                                  ;	push	ax
 32108                                  ;	or	al,1
 32109                                  ;	pop	ax
 32110                                  ;	retn	
 32111                                  ;
 32112                                  ;SKIPLOOP:
 32113                                  ;	LDS     DI,[DI]
 32114                                  ;       JMP     SHORT SKIPVISIT
 32115                                  
 32116                                  ;============================================================================
 32117                                  ; BUF.ASM, MSDOS 6.0, 1991
 32118                                  ;============================================================================
 32119                                  ; 31/07/2018 - Retro DOS v3.0
 32120                                  ; 04/05/2019 - Retro DOS v4.0
 32121                                  
 32122                                  ;	TITLE	BUF - MSDOS buffer management
 32123                                  ;	NAME	BUF
 32124                                  
 32125                                  ;**	BUF.ASM - Low level routines for buffer cache management
 32126                                  ;
 32127                                  ;	GETCURHEAD
 32128                                  ;	ScanPlace
 32129                                  ;	PLACEBUF
 32130                                  ;	PLACEHEAD
 32131                                  ;	PointComp
 32132                                  ;	GETBUFFR
 32133                                  ;	GETBUFFRB
 32134                                  ;	FlushBuf
 32135                                  ;	BufWrite
 32136                                  ;	SET_RQ_SC_PARMS
 32137                                  ;
 32138                                  ;	Revision history:
 32139                                  ;
 32140                                  ;		AN000  version 4.00  Jan. 1988
 32141                                  ;		A004   PTM 3765 -- Disk reset failed
 32142                                  ;		M039 DB 10/17/90 - Disk write optimization
 32143                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 32144                                  
 32145                                  ;Break	<GETCURHEAD -- Get current buffer header>
 32146                                  ;----------------------------------------------------------------------------
 32147                                  ; Procedure Name : GetCurHead
 32148                                  ; Inputs:
 32149                                  ;	 No Inputs
 32150                                  ; Function:
 32151                                  ;	Returns the pointer to the first buffer in Queue
 32152                                  ;	and updates FIRST_BUFF_ADDR
 32153                                  ;       and invalidates LASTBUFFER (recency pointer)
 32154                                  ; Outputs:
 32155                                  ;	DS:DI = pointer to the first buffer in Queue
 32156                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 32157                                  ;       LASTBUFFER = -1
 32158                                  ; No other registers altered
 32159                                  ;----------------------------------------------------------------------------
 32160                                  
 32161                                  ; 04/05/2019 - Retro DOS v4.0
 32162                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 32163                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32164                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 32165                                  
 32166                                  GETCURHEAD:
 32167 000057C2 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 32168 000057C7 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 32169 000057CE 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 32170 000057D3 C3                      	retn
 32171                                  
 32172                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 32173                                  ;----------------------------------------------------------------------------
 32174                                  ; Procedure Name : ScanPlace
 32175                                  ; Inputs:
 32176                                  ;	Same as PLACEBUF
 32177                                  ; Function:
 32178                                  ;	Save scan location and call PLACEBUF
 32179                                  ; Outputs:
 32180                                  ;	DS:DI Points to saved scan location
 32181                                  ; All registers, except DS:DI, preserved.
 32182                                  ;----------------------------------------------------------------------------
 32183                                  ;M039: Rewritten to preserve registers.
 32184                                  
 32185                                  ;SCANPLACE:
 32186                                  ;	; 31/07/2018 - Retro DOS v3.0
 32187                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32188                                  ;	push	es
 32189                                  ;	les	si,[di]
 32190                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 32191                                  ;	call	PLACEBUF
 32192                                  ;	push	es
 32193                                  ;	pop	ds
 32194                                  ;	mov	di,si
 32195                                  ;	pop	es
 32196                                  ;scanplace_retn:
 32197                                  ;	retn	
 32198                                  	
 32199                                  	; MSDOS 6.0
 32200                                  SCANPLACE:
 32201 000057D4 FF35                    	push	word [di]
 32202                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 32203 000057D6 E80200                  	call	PLACEBUF
 32204 000057D9 5F                      	pop	di
 32205 000057DA C3                      	retn
 32206                                  
 32207                                  ;----------------------------------------------------------------------------
 32208                                  ; Procedure Name : PlaceBuf
 32209                                  ; Input:
 32210                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 32211                                  ; Function:
 32212                                  ;	Remove buffer from queue and re-insert it in proper place.
 32213                                  ; NO registers altered
 32214                                  ;----------------------------------------------------------------------------
 32215                                  
 32216                                  ;procedure PLACEBUF,NEAR
 32217                                  
 32218                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32219                                  	; 20/05/2019 - Retro DOS v4.0
 32220                                  PLACEBUF:
 32221                                  	; 31/07/2018 - Retro DOS v3.0
 32222                                  
 32223                                  	; MSDOS 6.0
 32224 000057DB 50                      	push	AX			;Save only regs we modify	;AN000;
 32225 000057DC 53                      	push	BX							;AN000;
 32226                                  	; 23/09/2023
 32227                                  	;push	SI							;AN000;
 32228                                  	
 32229 000057DD 8B05                    	mov	ax,[di]
 32230                                  	;mov	ax,[di+BUFFINFO.buf_next]
 32231 000057DF 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 32232                                  	
 32233 000057E4 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 32234 000057E6 7422                    	je	short nret			;Yes, special case	;AN000;
 32235 000057E8 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 32236 000057EA 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 32237 000057EC 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 32238 000057F0 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 32239                                  not_first:
 32240                                  	; 23/09/2023
 32241 000057F2 56                      	push	si
 32242                                  	;mov	si,[di+2]
 32243 000057F3 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 32244 000057F6 8904                    	mov	[si],ax
 32245                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 32246 000057F8 96                      	xchg	si,ax
 32247                                  	;mov	[si+2],ax
 32248 000057F9 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 32249                                  	
 32250 000057FC 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 32251 000057FF 893C                    	mov	[si],di
 32252                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 32253 00005801 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 32254 00005804 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 32255 00005807 891D                    	mov	[di],bx
 32256                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 32257                                  	; 23/09/2023
 32258 00005809 5E                      	pop	si
 32259                                  nret:	
 32260                                  	; 23/09/2023							;AN000;
 32261                                  	;pop	SI							;AN000;
 32262 0000580A 5B                      	pop	BX							;AN000;
 32263 0000580B 58                      	pop	AX							;AN000;
 32264                                  									;AN000;
 32265                                  	;cmp	byte [di+4],0FFh
 32266 0000580C 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 32267 00005810 7505                            jne	short pbx			; M039: -no, jump.
 32268 00005812 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 32269                                  pbx:	
 32270 00005817 C3                      	retn								;AN000;
 32271                                  
 32272                                  	; 31/07/2018 - Retro DOS v3.0
 32273                                  
 32274                                  	; MSDOS 3.3
 32275                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32276                                  
 32277                                  ;PLACEBUF:
 32278                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32279                                  ;	
 32280                                  ;       CALL	save_world
 32281                                  ;       LES     CX,[DI]
 32282                                  ;       CMP     CX,-1           	; Buf is LAST?
 32283                                  ;       JZ      SHORT NRET		; Buffer already last
 32284                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 32285                                  ;       PUSH    DS
 32286                                  ;       POP     ES              	; Buf is ES:DI
 32287                                  ;	; 15/03/2018
 32288                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 32289                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 32290                                  ;       JNZ     SHORT BUFLOOP
 32291                                  ;       MOV     [SS:BUFFHEAD],CX
 32292                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 32293                                  ;       JMP     SHORT LOOKEND
 32294                                  ;BUFLOOP:
 32295                                  ;	; 31/07/2018
 32296                                  ;	mov	ax,ds
 32297                                  ;	mov	bx,si
 32298                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32299                                  ;       LDS     SI,[SI]
 32300                                  ;       CALL    POINTCOMP
 32301                                  ;       jnz	short BUFLOOP
 32302                                  ;	;
 32303                                  ;	mov	ds,ax
 32304                                  ;	mov	si,bx
 32305                                  ;	mov	[SI],cx
 32306                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 32307                                  ;	mov	[SI+2],bp
 32308                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 32309                                  ;LOOKEND:
 32310                                  ;	mov	ax,ds
 32311                                  ;	mov	bx,si
 32312                                  ;       LDS     SI,[SI]
 32313                                  ;       CMP     SI,-1
 32314                                  ;       jnz     short LOOKEND
 32315                                  ;GOTHEEND:
 32316                                  ;       mov	ds,ax
 32317                                  ;	mov	[BX],di
 32318                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 32319                                  ;       MOV     WORD [ES:DI],-1
 32320                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 32321                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 32322                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 32323                                  ;NRET:
 32324                                  ;       CALL	restore_world
 32325                                  ;	
 32326                                  ;	;cmp	byte [di+4],-1
 32327                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 32328                                  ;	jnz     short scanplace_retn
 32329                                  ;	call    PLACEHEAD
 32330                                  ;	retn
 32331                                  
 32332                                  ;EndProc PLACEBUF
 32333                                  
 32334                                  ;M039 - Removed PLACEHEAD.
 32335                                  ;----------------------------------------------------------------------------
 32336                                  ; places buffer at head
 32337                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 32338                                  ;	ONE IN THE LIST!!!!!!!
 32339                                  ; BUGBUG ---- this routine can be removed because it has only
 32340                                  ; BUGBUG ---- one instruction. This routine is called from
 32341                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 32342                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 32343                                  ; BUGBUG ---- But kept as it is for modularity
 32344                                  ;----------------------------------------------------------------------------
 32345                                  ;procedure   PLACEHEAD,NEAR
 32346                                  ;	mov	word ptr [BufferQueue], di
 32347                                  ;	ret
 32348                                  ;EndProc PLACEHEAD
 32349                                  ;M039
 32350                                  
 32351                                  ;----------------------------------------------------------------------------
 32352                                  ; Procedure Name : PLACEHEAD
 32353                                  ;
 32354                                  ; SAME AS PLACEBUF except places buffer at head
 32355                                  ;----------------------------------------------------------------------------
 32356                                  
 32357                                  	; MSDOS 3.3 (Retro DOS v3.0)
 32358                                  	; 05/09/2018
 32359                                  	; MSDOS 2.11 (Retro DOS v2.0)
 32360                                  ;PLACEHEAD:
 32361                                  ;	; 31/07/2018 - Retro DOS v3.0
 32362                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 32363                                  ;
 32364                                  ;       CALL	save_world
 32365                                  ;       PUSH	DS
 32366                                  ;       POP	ES
 32367                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32368                                  ;       LDS     SI,[SS:BUFFHEAD]
 32369                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 32370                                  ;	CALL    POINTCOMP
 32371                                  ;       JZ      SHORT GOTHEEND2
 32372                                  ;	MOV	[ES:DI],SI
 32373                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 32374                                  ;       MOV	[ES:DI+2],DS
 32375                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 32376                                  ;       MOV	[SS:BUFFHEAD],DI
 32377                                  ;       MOV	[SS:BUFFHEAD+2],ES
 32378                                  ;LOOKEND2:
 32379                                  ;       mov	ax,ds
 32380                                  ;	mov	bx,si
 32381                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32382                                  ;       LDS     SI,[SI]
 32383                                  ;       CALL    POINTCOMP
 32384                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 32385                                  ;       mov	ds,ax
 32386                                  ;	mov	word [bx],-1
 32387                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 32388                                  ;	mov	word [bx+2],-1
 32389                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 32390                                  ;GOTHEEND2:
 32391                                  ;      	call	restore_world
 32392                                  ;placehead_retn:
 32393                                  ;	retn
 32394                                  
 32395                                  ; 20/05/2019 - Retro DOS v4.0
 32396                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 32397                                  
 32398                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 32399                                  ;----------------------------------------------------------------------------
 32400                                  ;
 32401                                  ; Procedure Name : PointComp
 32402                                  ; Inputs:
 32403                                  ;         DS:SI & ES:DI
 32404                                  ; Function:
 32405                                  ;          Checks for ((SI==DI) && (ES==DS))
 32406                                  ;	   Assumes that pointers are normalized for the
 32407                                  ;	   same segment
 32408                                  ;
 32409                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32410                                  ; DO NOT USE FOR < or >
 32411                                  ; No Registers altered
 32412                                  ;
 32413                                  ;----------------------------------------------------------------------------
 32414                                  
 32415                                  POINTCOMP:
 32416                                  	; 31/07/2018 - Retro DOS v3.0
 32417                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32418 00005818 39FE                    	CMP	SI,DI
 32419 0000581A 750A                    	jnz	short _ret_label	; return if nz
 32420                                  	;jnz	short placehead_retn 
 32421 0000581C 51                      	PUSH	CX
 32422 0000581D 52                      	PUSH	DX
 32423 0000581E 8CD9                    	MOV	CX,DS
 32424 00005820 8CC2                    	MOV	DX,ES
 32425 00005822 39D1                    	CMP	CX,DX
 32426 00005824 5A                      	POP	DX
 32427 00005825 59                      	POP	CX
 32428                                  _ret_label:
 32429 00005826 C3                      	retn
 32430                                  
 32431                                  ; 01/08/2018 - Retro DOS v3.0
 32432                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32433                                  
 32434                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32435                                  
 32436                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32437                                  ;----------------------------------------------------------------------------
 32438                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32439                                  ;	It gets the specified local sector into one of the I/O buffers
 32440                                  ;	and shuffles the queue
 32441                                  ; 
 32442                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32443                                  ;		       ELSE no pre-read
 32444                                  ;		(DX) = Desired physical sector number	      (LOW)
 32445                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32446                                  ;		(ES:BP) = Pointer to drive parameters
 32447                                  ;		ALLOWED set in case of INT 24
 32448                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32449                                  ;		'C' clear if OK
 32450                                  ;		CURBUF Points to the Buffer for the sector
 32451                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32452                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32453                                  ;----------------------------------------------------------------------------
 32454                                  
 32455                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32456                                  ;----------------------------------------------------------------------------
 32457                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32458                                  ;	It gets the specified sector into one of the I/O buffers
 32459                                  ;	and shuffles the queue. We need a special entry point so that
 32460                                  ;	we can read the alternate FAT sector if the first read fails, also
 32461                                  ;	so we can mark the buffer as a FAT sector.
 32462                                  ; 
 32463                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32464                                  ;		       ELSE no pre-read
 32465                                  ;		(DX) = Desired physical sector number	     (LOW)
 32466                                  ;		(SI) != 0
 32467                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32468                                  ;		(ES:BP) = Pointer to drive parameters
 32469                                  ;		ALLOWED set in case of INT 24
 32470                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32471                                  ;		'C' clear if OK
 32472                                  ;		CUR ddBUF Points to the Buffer for the sector
 32473                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32474                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32475                                  ;----------------------------------------------------------------------------
 32476                                  
 32477                                  	; 22/09/2023 - RetroDOS v4.2 MSDOS.SYS (optimization)
 32478                                  GETBUFFRC:
 32479 00005827 C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32480                                  GETBUFFRA:
 32481 0000582D 30C0                    	xor	al,al
 32482 0000582F BE0100                  	mov	si,1
 32483 00005832 EB09                    	jmp	short GETBUFFRB
 32484                                  
 32485                                  	; 22/09/2023
 32486                                  GETBUFFER:
 32487 00005834 30C0                    	xor	al,al
 32488                                  GETBUFFRD:
 32489                                  	;mov	byte [ALLOWED],18h
 32490 00005836 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32491                                  
 32492                                  	; 20/05/2019 - Retro DOS v4.0
 32493                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32494                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32495                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32496                                  GETBUFFR:
 32497 0000583B 31F6                    	XOR	SI,SI
 32498                                  
 32499                                  ;	This entry point is called for FAT buffering with SI != 0
 32500                                  
 32501                                  GETBUFFRB:
 32502 0000583D A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32503                                  	; 15/12/2022
 32504 00005840 268A4600                	mov	al,[ES:BP]
 32505                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32506                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32507 00005844 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32508                                  	; MSDOS 6.0
 32509                                  ;hkn; SS override
 32510 00005848 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32511                                  
 32512                                  ;	See if this is the buffer that was most recently returned.
 32513                                  ;	A big performance win if it is.
 32514                                  
 32515 0000584D 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32516 00005850 7412                    	je	short getb5			; No
 32517                                  	;cmp	dx,[di+6]
 32518 00005852 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32519 00005855 750D                    	JNZ	short getb5			; Wrong sector
 32520                                  	
 32521                                  	; MSDOS 6.0
 32522                                  	;cmp	cx,[di+8]
 32523 00005857 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32524 0000585A 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32525                                  	
 32526                                  	;cmp	al,[di+4]
 32527 0000585C 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32528                                  	;JZ	getb35				; Just asked for same buffer
 32529 0000585F 7503                    	jnz	short getb5
 32530                                  	;jmp	getb35
 32531                                  	; 17/12/2022
 32532                                  	; 28/07/2019
 32533 00005861 E9C700                  	jmp	getb35x
 32534                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32535                                  	;jmp	getb35
 32536                                  
 32537                                  ;	It's not the buffer most recently returned. See if it's in the
 32538                                  ;	cache.
 32539                                  ;
 32540                                  ;	(cx:dx) = sector #
 32541                                  ;	(al) = drive #
 32542                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32543                                  ;	??? list may be incomplete ???
 32544                                  
 32545                                  getb5:	
 32546                                  	; MSDOS 3.3
 32547                                  	;lds	di,[SS:BUFFHEAD]
 32548                                  	; MSDOS 6.0
 32549 00005864 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32550                                  getb10:	
 32551                                  	;cmp	dx,[di+6]
 32552 00005867 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32553 0000586A 750D                    	jne	short getb12			; wrong sector lo
 32554                                  	
 32555                                  	; MSDOS 6.0
 32556                                  	;cmp	cx,[di+8]
 32557 0000586C 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32558 0000586F 7508                    	jne	short getb12			; wrong sector hi
 32559                                  	
 32560                                  	;cmp	al,[di+4]
 32561 00005871 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32562                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32563 00005874 7503                    	jne	short getb12
 32564 00005876 E98C00                  	jmp	getb25
 32565                                  getb12:	
 32566                                  	; MSDOS 3.3
 32567                                  	;;mov	di,[DI]
 32568                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32569                                  	;
 32570                                  	; 15/08/2018
 32571                                  	;lds	di,[di]
 32572                                  
 32573                                  	;cmp	di,-1 ; 0FFFFh
 32574                                  	;jne	short getb10
 32575                                  	;lds	di,[SS:BUFFHEAD]
 32576                                  
 32577                                  	; MSDOS 6.0
 32578 00005879 8B3D                    	mov	di,[di]
 32579                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32580 0000587B 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32581 00005880 75E5                    	jne	short getb10			; no, continue looking
 32582                                  
 32583                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32584                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32585                                  ;	new sector into it.
 32586                                  ;
 32587                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32588                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32589                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32590                                  ;	down a chain, but should be hashed.
 32591                                  ;
 32592                                  ;	(DS:DI) = first buffer in the queue
 32593                                  ;	(CX:DX) = sector # we want
 32594                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32595                                  
 32596                                  	; MSDOS 3.3 & MSDOS 6.0
 32597                                  ;hkn; SS override
 32598 00005882 51                      	PUSH	CX  ; MSDOS 6.0
 32599 00005883 56                      	push	si
 32600 00005884 52                      	push	dx
 32601 00005885 55                      	push	bp
 32602 00005886 06                      	push	es
 32603 00005887 E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32604 0000588A 07                      	pop	es
 32605 0000588B 5D                      	pop	bp
 32606 0000588C 5A                      	pop	dx
 32607 0000588D 5E                      	pop	si
 32608 0000588E 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32609                                  	;jc	short getbx			; if got hard error
 32610 00005893 7303                    	jnc	short getb13
 32611 00005895 E99D00                  	jmp	getbx
 32612                                  
 32613                                  getb13:
 32614                                  	; MSDOS 6.0
 32615 00005898 E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32616                                  
 32617                                  ;	We're ready to read in the buffer, if need be. If the caller
 32618                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32619                                  
 32620 0000589B 30E4                    	XOR	AH,AH				; initial flags
 32621                                  ;hkn; SS override
 32622                                  	;test	byte [ss:PREREAD],0FFh
 32623                                  	;jnz	short getb20
 32624 0000589D 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32625 000058A2 7549                    	JNZ	short getb20			; no, we're done
 32626                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32627                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32628 000058A4 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32629                                  	;MOV	CX,1
 32630                                  	; 22/09/2023
 32631 000058A7 29C9                    	sub	cx,cx ; 0
 32632 000058A9 56                      	push	si
 32633 000058AA 57                      	push	di
 32634 000058AB 52                      	push	dx
 32635                                  	; MSDOS 6.0
 32636 000058AC 06                      	push	es ; ***
 32637                                  
 32638                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32639                                  ;	this point. -mrw 10/88
 32640                                  	
 32641                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32642                                  	; 22/09/2023
 32643 000058AD 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32644 000058B2 7407                    	jz	short getb14
 32645 000058B4 1E                      	push	ds ; **
 32646 000058B5 53                      	push	bx ; *
 32647 000058B6 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32648                                  getb14:
 32649                                  ;M039: Eliminated redundant HMA code.
 32650                                  
 32651                                  	; 22/09/2023
 32652 000058BB 41                      	inc	cx ; cx = 1
 32653                                  
 32654                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32655 000058BC 09F6                    	OR	SI,SI			; FAT sector ?
 32656 000058BE 7407                    	JZ	short getb15		
 32657                                  
 32658 000058C0 E85DDD                  	call	FATSECRD
 32659                                  	;mov	ah,2
 32660 000058C3 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32661                                  
 32662 000058C5 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32663                                  
 32664                                  getb15:
 32665 000058C7 E882DD                  	call	DREAD			; Buffer is marked free if read barfs
 32666 000058CA B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32667                                  getb17:
 32668                                  	; 17/12/2022	
 32669                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32670                                  ;%if 0
 32671                                  	; MSDOS 6.0							  ;I001
 32672 000058CC 9C                      	pushf								  ;I001
 32673 000058CD 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32674 000058D3 7411                    	jz	short not_in_hma	; no				  ;I001
 32675                                  	;mov	cx,[es:bp+2]
 32676 000058D5 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32677 000058D9 D1E9                    	shr	cx,1							  ;I001
 32678 000058DB 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32679 000058DC 89DE                    	mov	si,bx							  ;I001
 32680 000058DE 5F                      	pop	di ; *							  ;I001
 32681 000058DF 07                      	pop	es ; **							  ;I001
 32682 000058E0 FC                      	cld								  ;I001
 32683 000058E1 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32684 000058E2 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32685 000058E4 06                      	push	es							  ;I001
 32686 000058E5 1F                      	pop	ds							  ;I001
 32687                                  ;%endif
 32688                                  
 32689                                  ; 17/12/2022
 32690                                  %if 0
 32691                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32692                                  	; MSDOS 5.0
 32693                                  	pushf
 32694                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32695                                  	jz	short not_in_hma	; no
 32696                                  	popf
 32697                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32698                                  	shr	cx,1
 32699                                  	mov	si,bx
 32700                                  	pop	di ; *
 32701                                  	pop	es ; **
 32702                                  	cld
 32703                                  	rep	movsw
 32704                                  	push	es
 32705                                  	pop	ds
 32706                                  	jmp	short getb19 ; 27/11/2022
 32707                                  %endif
 32708                                  
 32709                                  not_in_hma:								  ;I001
 32710 000058E6 9D                      	popf							 	  ;I001
 32711                                  getb19:
 32712 000058E7 07                      	pop	es ; ***
 32713 000058E8 5A                      	pop	dx
 32714 000058E9 5F                      	pop	di
 32715 000058EA 5E                      	pop	si
 32716 000058EB 7248                    	JC	short getbx
 32717                                  
 32718                                  ;	The buffer has the data setup in it (if we were to read)
 32719                                  ;	Setup the various buffer fields
 32720                                  ;
 32721                                  ;	(ds:di) = buffer address
 32722                                  ;	(es:bp) = DPB address
 32723                                  ;	(HIGH_SECTOR:DX) = sector #
 32724                                  ;	(ah) = BUF_FLAGS value
 32725                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32726                                  
 32727                                  ;hkn; SS override
 32728                                  getb20:	; MSDOS 6.0
 32729 000058ED 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32730                                  	;mov	[di+8],cx
 32731 000058F2 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32732                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32733                                   	;mov	[di+6],dx
 32734 000058F5 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32735                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32736                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32737 000058F8 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32738                                  	;;mov	[di+0Ch],es
 32739                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32740 000058FB 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32741                                  	; 15/12/2022
 32742 000058FE 268A4600                	mov	al,[es:bp]
 32743                                  	;mov	al,[es:bp+0]
 32744                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32745                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32746                                  	;mov	[di+4],ax
 32747 00005902 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32748                                  getb25:	
 32749                                  	; MSDOS 3.3
 32750                                  	;mov     ax,1
 32751                                  
 32752                                  	; MSDOS 6.0
 32753                                  	;mov	byte [di+0Ah],1
 32754 00005905 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32755 00005909 31C0                    	XOR	AX,AX
 32756                                  
 32757                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32758 0000590B 09F6                    	OR	SI,SI				; FAT sector ?
 32759 0000590D 740B                    	JZ	short getb30
 32760                                  
 32761                                  	;mov	al,[es:bp+8]
 32762 0000590F 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32763                                  	
 32764                                  	; MSDOS 6.0
 32765 00005913 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32766                                  	;mov	ax,[es:bp+0Fh]
 32767 00005916 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32768                                  						;  sectors
 32769                                  	; MSDOS 3.3
 32770                                  	;;mov	ah,[es:bp+0Fh]
 32771                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32772                                  
 32773                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32774                                  ;		is set
 32775                                  
 32776                                  getb30:	
 32777                                  	; MSDOS 6.0
 32778                                  	;mov	[di+0Bh],ax
 32779 0000591A 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32780                                  
 32781                                  	; MSDOS 3.3
 32782                                  	;;mov	[di+8],ax ; 15/08/2018	
 32783                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32784                                  
 32785 0000591D E8BBFE                  	CALL	PLACEBUF
 32786                                  
 32787                                  ;hkn; SS override for next 4
 32788                                  getb35: 
 32789                                  	; 17/12/2022
 32790                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32791                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32792                                  	;MOV	[SS:CURBUF+2],DS
 32793                                  	;MOV	[SS:LastBuffer+2],DS
 32794                                  	;MOV	[SS:CURBUF],DI
 32795                                  	;MOV	[SS:LastBuffer],DI
 32796                                  	;CLC
 32797                                  
 32798                                  	; 17/12/2022
 32799                                  	; 07/12/2022
 32800                                  	; Retro DOS v4.0
 32801 00005920 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32802 00005925 36893E[1E00]            	mov	[ss:LastBuffer],di
 32803 0000592A F8                      	clc
 32804                                  getb35x: ; 28/07/2019
 32805 0000592B 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32806 00005930 36893E[E205]            	MOV	[ss:CURBUF],di
 32807                                  
 32808                                  ;	Return with 'C' set appropriately
 32809                                  ;	(dx) = caller's original value
 32810                                  
 32811                                  getbx:	
 32812 00005935 16                      	push	ss
 32813 00005936 1F                      	pop	ds
 32814                                  	;retn
 32815                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32816                                  getbuffrb_retn:
 32817                                  ;flushbuf_retn:	; 17/12/2022
 32818 00005937 C3                      	retn
 32819                                  
 32820                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32821                                  ;----------------------------------------------------------------------------
 32822                                  ; Input:
 32823                                  ;	DS = DOSGROUP
 32824                                  ;	AL = Physical unit number local buffers only
 32825                                  ;	   = -1 for all units and all remote buffers
 32826                                  ; Function:
 32827                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32828                                  ;	Carry set if error (user FAILed to I 24)
 32829                                  ;	    Flush operation completed.
 32830                                  ; DS Preserved, all others destroyed (ES too)
 32831                                  ;----------------------------------------------------------------------------
 32832                                  
 32833                                  	; 20/05/2019 - Retro DOS v4.0
 32834                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32835                                  
 32836                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32837                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32838                                  FLUSHBUF:
 32839                                  	; MSDOS 3.3
 32840                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32841                                  	;lds	di,[BUFFHEAD]
 32842                                  
 32843                                  	; MSDOS 6.0
 32844 00005938 E887FE                  	call	GETCURHEAD
 32845                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32846 0000593B 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32847 00005941 7508                    	jnz	short scan_buf_queue
 32848 00005943 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32849 00005949 7423                    	je	short end_scan
 32850                                  	
 32851                                  scan_buf_queue:
 32852 0000594B E82900                  	call	CHECKFLUSH
 32853                                  	;push	ax  ; MSDOS 3.3
 32854                                  	; MSDOS 6.0
 32855                                  	;mov	ah,[di+4]
 32856 0000594E 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32857 00005951 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32858 00005956 7408                    	je	short free_the_buf
 32859                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32860 00005958 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32861 0000595E 7405                    	jz	short dont_free_the_buf
 32862                                  	; MSDOS 3.3
 32863                                  	;;mov	al,[di+4]
 32864                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32865                                  	;cmp	[SS:WPERR],al					;hkn;
 32866                                  	; 15/08/2018
 32867                                  	;jne	short dont_free_the_buf	
 32868                                  free_the_buf:
 32869                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32870 00005960 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32871                                  dont_free_the_buf:
 32872                                  	;pop	ax  ; MSDOS 3.3 	   	
 32873                                  
 32874                                  	; MSDOS 3.3
 32875                                  	;mov	di,[DI]
 32876                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32877                                  	;
 32878                                  	; 15/08/2018
 32879                                  	;lds	di,[di]
 32880                                  	;
 32881                                  	;cmp	di,-1 ; 0FFFFh
 32882                                  	;jnz	short scan_buf_queue 
 32883                                  	
 32884                                  	; MSDOS 6.0
 32885 00005965 8B3D                    	mov	di,[di]
 32886                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32887 00005967 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32888 0000596C 75DD                    	jne	short scan_buf_queue
 32889                                  
 32890                                  end_scan:
 32891 0000596E 16                      	push	ss
 32892 0000596F 1F                      	pop	ds
 32893                                  	; 01/08/2018 - Retro DOS v3.0
 32894                                  	;cmp	byte [FAILERR],0
 32895                                  	;jne	short bad_flush
 32896                                  	;retn
 32897                                  ;bad_flush:
 32898                                  	;stc
 32899                                  	;retn
 32900                                  
 32901                                  	; 17/12/2022
 32902                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32903                                  	; 01/08/2018 - Retro DOS v3.0
 32904 00005970 803E[4A03]01            	cmp	byte [FAILERR],1
 32905 00005975 F5                      	cmc
 32906                                  flushbuf_retn:
 32907 00005976 C3                      	retn
 32908                                  	
 32909                                  	; 17/12/2022
 32910                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32911                                  	;cmp	byte [FAILERR],0
 32912                                  	;jne	short bad_flush
 32913                                  	;retn
 32914                                  ;bad_flush:
 32915                                  	;stc
 32916                                  	;retn
 32917                                  
 32918                                  ;----------------------------------------------------------------------------
 32919                                  ;
 32920                                  ; Procedure Name : CHECKFLUSH
 32921                                  ;
 32922                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32923                                  ;	   DS:DI - pointer to buffer
 32924                                  ;
 32925                                  ; Function : Write out a buffer if it is dirty
 32926                                  ;
 32927                                  ; Carry set if problem (currently user FAILed to I 24)
 32928                                  ;
 32929                                  ;----------------------------------------------------------------------------
 32930                                  
 32931                                  CHECKFLUSH:
 32932                                  	; MSDOS 6.0
 32933 00005977 B4FF                    	mov	ah,-1	; 01/08/2018 Retro DOS v3.0
 32934                                  	;cmp	[di+4],ah
 32935 00005979 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32936 0000597C 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32937 0000597E 38C4                    	CMP	AH,AL			; 
 32938 00005980 7406                    	JZ	short DOBUFFER		; do this buffer
 32939                                  	;cmp	al,[di+4]
 32940 00005982 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32941 00005985 F8                      	CLC
 32942 00005986 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32943                                  DOBUFFER:
 32944                                  	;test	byte [di+5],40h
 32945 00005988 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32946 0000598C 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32947 0000598E 50                      	PUSH	AX
 32948                                  	;push	word [di+4]
 32949 0000598F FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32950 00005992 E80B00                  	CALL	BUFWRITE
 32951 00005995 58                      	POP	AX
 32952 00005996 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32953                                  	;and	ah,0BFh
 32954 00005998 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32955                                  	;mov	[di+4],ax
 32956 0000599B 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32957                                  LEAVE_BUF:
 32958 0000599E 58                      	POP	AX			; Search info
 32959                                  checkflush_retn:
 32960 0000599F C3                      	retn
 32961                                  
 32962                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32963                                  ;----------------------------------------------------------------------------
 32964                                  ;
 32965                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32966                                  ;
 32967                                  ;	ENTRY	DS:DI Points to the buffer
 32968                                  ;
 32969                                  ;	EXIT	Buffer marked free
 32970                                  ;		Carry set if error (currently user FAILed to I 24)
 32971                                  ;
 32972                                  ;	USES	All buf DS:DI
 32973                                  ;		HIGH_SECTOR
 32974                                  ;----------------------------------------------------------------------------
 32975                                  
 32976                                  	; 20/05/2019 - Retro DOS v4.0
 32977                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32978                                  
 32979                                  
 32980                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32981                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32982                                  
 32983                                  BUFWRITE:
 32984                                  	; 10/09/2018
 32985                                  	; 01/08/2018 - Retro DOS v3.0
 32986                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32987 000059A0 B8FF00                  	MOV	AX,00FFH
 32988                                  	;xchg	ax,[di+4]
 32989 000059A3 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32990 000059A6 3CFF                    	CMP	AL,0FFH
 32991 000059A8 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32992                                  	;test	ah,40h
 32993 000059AA F6C440                  	test	AH,buf_dirty
 32994 000059AD 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32995                                  	; MSDOS 6.0
 32996 000059AF E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32997                                  
 32998                                  ;hkn; SS override
 32999 000059B2 363A06[2203]            	CMP	AL,[SS:WPERR]
 33000 000059B7 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 33001                                  
 33002                                  ;hkn; SS override
 33003                                  	; MSDOS 6.0
 33004 000059B9 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 33005                                  	
 33006                                  	;;les	bp,[di+10] ; MSDOS 3.3
 33007                                  	;les	bp,[di+13] ; MSDOS 6.0
 33008 000059BD C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 33009                                  	;;lea	bx,[di+16]
 33010                                  	;lea	bx,[di+20] ; MSDOS 6.0
 33011 000059C0 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 33012                                  	;mov	dx,[di+6]
 33013 000059C3 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 33014                                  	
 33015                                  	; MSDOS 6.0
 33016                                  	;mov	cx,[di+8]
 33017 000059C6 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 33018                                  
 33019                                  ;hkn; SS override
 33020 000059C9 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 33021 000059CE 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 33022                                  	; MSDOS 3.3
 33023                                  	;; mov	cx,[DI+8]
 33024                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 33025                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 33026 000059D1 30ED                    	XOR	CH,CH
 33027                                  	;;mov	ah,ch ; MSDOS 3.3
 33028                                  
 33029                                  ;hkn; SS override for ALLOWED
 33030                                  	;mov	byte [SS:ALLOWED],18h
 33031 000059D3 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 33032                                  	;test	byte [di+5],8
 33033                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 33034                                  	;test	ah,8
 33035 000059D9 F6C408                  	test	AH,buf_isDATA
 33036 000059DC 7406                    	JZ	short NO_IGNORE
 33037                                  	;or	byte [SS:ALLOWED],20h
 33038 000059DE 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 33039                                  NO_IGNORE:
 33040                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 33041                                  	; MSDOS 6.0
 33042                                  	;mov	ax,[di+11]
 33043 000059E4 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 33044                                  
 33045 000059E7 57                      	PUSH	DI		; Save buffer pointer
 33046 000059E8 31FF                    	XOR	DI,DI		; Indicate failure
 33047                                  
 33048 000059EA 1E                      	push	ds ; *
 33049 000059EB 53                      	push	bx ; **
 33050                                  WRTAGAIN:
 33051 000059EC 57                      	push	di ; ***
 33052 000059ED 51                      	push	cx ; ****
 33053 000059EE 50                      	push	ax ; *****
 33054                                  	;MOV	CX,1
 33055                                  	; 17/12/2022
 33056                                  	; ch = 0
 33057 000059EF B101                    	mov	cl,1 ; 24/07/2019
 33058                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33059                                  	;mov	cx,1
 33060 000059F1 53                      	push	bx ; ******
 33061 000059F2 52                      	push	dx ; *******
 33062 000059F3 1E                      	push	ds ; ********
 33063                                  
 33064                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 33065                                  
 33066                                  	; MSDOS 6.0
 33067                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 33068                                  	; 22/09/2023
 33069 000059F4 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 33070 000059F9 7418                    	jz	short NBUFFINHMA
 33071 000059FB 51                      	push	cx
 33072 000059FC 06                      	push	es
 33073 000059FD 89DE                    	mov	si,bx
 33074 000059FF 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 33075 00005A03 D1E9                    	shr	cx,1
 33076 00005A05 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 33077 00005A0A 89FB                    	mov	bx,di
 33078 00005A0C FC                      	cld
 33079 00005A0D F3A5                    	rep	movsw
 33080 00005A0F 06                      	push	es
 33081 00005A10 1F                      	pop	ds
 33082 00005A11 07                      	pop	es
 33083 00005A12 59                      	pop	cx
 33084                                  NBUFFINHMA:
 33085 00005A13 E896DC                  	call	DWRITE		; Write out the dirty buffer
 33086 00005A16 1F                      	pop	ds ; ********
 33087 00005A17 5A                      	pop	dx ; *******
 33088 00005A18 5B                      	pop	bx ; ******
 33089 00005A19 58                      	pop	ax ; *****
 33090 00005A1A 59                      	pop	cx ; ****
 33091 00005A1B 5F                      	pop	di ; ***
 33092 00005A1C 7201                    	JC	short NOSET
 33093 00005A1E 47                      	INC	DI		; If at least ONE write succeedes, the operation
 33094                                  NOSET:				;	succeedes.
 33095 00005A1F 01C2                    	ADD	DX,AX
 33096 00005A21 E2C9                    	LOOP	WRTAGAIN
 33097 00005A23 5B                      	pop	bx ; **
 33098 00005A24 1F                      	pop	ds ; *
 33099                                  	;OR	DI,DI		; Clears carry
 33100                                  	;JNZ	short BWROK	; At least one write worked
 33101                                  	;STC			; DI never got INCed, all writes failed.
 33102                                  	; 22/09/2023
 33103 00005A25 83FF01                  	cmp	di,1
 33104                                  BWROK:	
 33105 00005A28 5F                      	POP	DI
 33106 00005A29 C3                      	retn
 33107                                  
 33108                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 33109                                  ;----------------------------------------------------------------------------
 33110                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 33111                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 33112                                  ;	SC_DRIVE even if SC is disabled to save the testing
 33113                                  ;	code and time
 33114                                  ;
 33115                                  ;	ENTRY	ES:BP = drive parameter block
 33116                                  ;
 33117                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 33118                                  ;		[SC_DRIVE]= drive #
 33119                                  ;
 33120                                  ;	USES	Flags
 33121                                  ;----------------------------------------------------------------------------
 33122                                  
 33123                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33124                                  ; 04/05/2019 - Retro DOS v4.0
 33125                                  
 33126                                  SET_RQ_SC_PARMS:
 33127                                  ;hkn; SS override for all variables used in this procedure.
 33128 00005A2A 50                      	push	ax
 33129                                  	;mov	ax,[es:bp+2]
 33130 00005A2B 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 33131 00005A2F 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 33132                                  	;;mov	al,[es:bp+0]
 33133                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33134                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 33135                                  	; 15/12/2022
 33136 00005A33 268A4600                	mov	al,[ES:BP]
 33137 00005A37 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 33138 00005A3B 58                      	pop	ax
 33139                                  srspx:	
 33140 00005A3C C3                      	retn					;LB. return
 33141                                  
 33142                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 33143                                  ;----------------------------------------------------------------------------
 33144                                  ; Input:
 33145                                  ;	none
 33146                                  ; Function:
 33147                                  ;	increment dirty buffers count
 33148                                  ; Output:
 33149                                  ;	dirty buffers count is incremented
 33150                                  ;
 33151                                  ; All registers preserved
 33152                                  ;----------------------------------------------------------------------------
 33153                                  
 33154                                  INC_DIRTY_COUNT:
 33155                                  ;; BUGBUG  ---- remove this routine
 33156                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 33157 00005A3D 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 33158 00005A42 C3                      	retn
 33159                                  
 33160                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 33161                                  ;----------------------------------------------------------------------------
 33162                                  ; Input:
 33163                                  ;	none
 33164                                  ; Function:
 33165                                  ;	decrement dirty buffers count
 33166                                  ; Output:
 33167                                  ;	dirty buffers count is decremented
 33168                                  ;
 33169                                  ; All registers preserved
 33170                                  ;----------------------------------------------------------------------------
 33171                                  
 33172                                  DEC_DIRTY_COUNT:
 33173 00005A43 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 33174 00005A49 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 33175 00005A4B 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 33176                                  					; error condition to underflow here? ;hkn;
 33177                                  ddcx:	
 33178 00005A50 C3                      	retn
 33179                                  
 33180                                  ;============================================================================
 33181                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 33182                                  ;============================================================================
 33183                                  ; 02/08/2018 - Retro DOS v3.0
 33184                                  ; 29/04/2019 - Retro DOS v4.0
 33185                                  
 33186                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 33187                                  
 33188                                  ; Pseudo EXEC system call for DOS
 33189                                  
 33190                                  ;	TITLE	MSPROC - process maintenance
 33191                                  ;	NAME	MSPROC
 33192                                  
 33193                                  ; =========================================================================
 33194                                  ;**	Process related system calls and low level routines for DOS 2.X.
 33195                                  ;	I/O specs are defined in DISPATCH.
 33196                                  ;
 33197                                  ;	$WAIT
 33198                                  ;	$EXEC
 33199                                  ;	$Keep_process
 33200                                  ;	Stay_resident
 33201                                  ;	$EXIT
 33202                                  ;	$ABORT
 33203                                  ;	abort_inner
 33204                                  ;
 33205                                  ;	Modification history:
 33206                                  ;
 33207                                  ;		Created: ARR 30 March 1983
 33208                                  ;		AN000	version 4.0 jan. 1988
 33209                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 33210                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 33211                                  ;
 33212                                  ;		M000	added support for loading programs into UMBs 7/9/90
 33213                                  ;
 33214                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 33215                                  ;		       dossym.inc. 7/30/90
 33216                                  ;		M005 - Support for EXE programs with out STACK segment and 
 33217                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 33218                                  ;		       stack is provided at the end of the program. Note that
 33219                                  ;		       only SP is changed.
 33220                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 33221                                  ;
 33222                                  ;		M028 - 4b04 implementation
 33223                                  ;
 33224                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 33225                                  ;			in memory block >= 64K, sp = 0. If memory block
 33226                                  ;			obtained is <64K, point sp at the end of the memory
 33227                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 33228                                  ;			added for a stack segment which may be needed if it
 33229                                  ;			is loaded in low memory situations.
 33230                                  ;
 33231                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 33232                                  ;
 33233                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 33234                                  ;			a bad environment if it reached 32767 bytes. Changed
 33235                                  ;			to allow 32768 bytes of environment.
 33236                                  ;
 33237                                  ;		M047 - Release the allocated UMB when we failed to load a 
 33238                                  ;		       COM file high. Also ensure that if the biggest block
 33239                                  ;		       into which we load the com file is less than 64K then
 33240                                  ;		       we provide atleast 256 bytes of stack to the user.
 33241                                  ;
 33242                                  ;		M050 - Made Lie table search CASE insensitive
 33243                                  ;
 33244                                  ;		M060 - Removed special version table from the kernal and
 33245                                  ;                      put it in a device drive which puts the address
 33246                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 33247                                  ;		       as a DWORD.
 33248                                  ;
 33249                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 33250                                  ;		       entry do not try to load low if there is no space in
 33251                                  ;		       UMBs.
 33252                                  ;
 33253                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 33254                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 33255                                  ;		       change return address to LeaveDos if AL=5.
 33256                                  ;
 33257                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 33258                                  ;                      controls building a version of MSDOS.SYS that only
 33259                                  ;                      runs programs from a fixed list (defined in the
 33260                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 33261                                  ;                      for details.  This feature is used to build a
 33262                                  ;                      "special" version of DOS that can be handed out to
 33263                                  ;                      OEM/ISV customers as part of a "service" disk.
 33264                                  ;
 33265                                  ; =========================================================================
 33266                                  
 33267                                  ;SAVEXIT  EQU  10
 33268                                  
 33269                                  ;BREAK	<$WAIT - return previous process error code>
 33270                                  ; =========================================================================
 33271                                  ;	$WAIT - Return previous process error code.
 33272                                  ;
 33273                                  ;	Assembler usage:
 33274                                  ;
 33275                                  ;	    MOV     AH, WaitProcess
 33276                                  ;	    INT     int_command
 33277                                  ;
 33278                                  ;	ENTRY	none
 33279                                  ;	EXIT	(ax) = exit code
 33280                                  ;	USES	all
 33281                                  ; =========================================================================
 33282                                  
 33283                                  	; 20/05/2019 - Retro DOS v4.0
 33284                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 33285                                  
 33286                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33287                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 33288                                  _$WAIT:
 33289                                  	; 02/08/2018 - Retro DOS v3.0
 33290                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 33291                                  
 33292 00005A51 31C0                    	xor	AX,AX
 33293 00005A53 368706[3403]            	xchg	AX,[ss:exit_code]
 33294 00005A58 E9DCAB                  	jmp	SYS_RET_OK
 33295                                  
 33296                                  ; =========================================================================
 33297                                  ;BREAK <$exec - load/go a program>
 33298                                  ;	EXEC.ASM - EXEC System Call
 33299                                  ;
 33300                                  ;
 33301                                  ; Assembler usage:
 33302                                  ;	    lds     DX, Name
 33303                                  ;	    les     BX, Blk
 33304                                  ;	    mov     AH, Exec
 33305                                  ;	    mov     AL, FUNC
 33306                                  ;	    int     INT_COMMAND
 33307                                  ;
 33308                                  ;	AL  Function
 33309                                  ;	--  --------
 33310                                  ;	 0  Load and execute the program.
 33311                                  ;	 1  Load, create the program header but do not
 33312                                  ;	    begin execution.
 33313                                  ;	 3  Load overlay. No header created.
 33314                                  ;
 33315                                  ;	    AL = 0 -> load/execute program
 33316                                  ;
 33317                                  ;	    +---------------------------+
 33318                                  ;	    | WORD segment address of	|
 33319                                  ;	    | environment.		|
 33320                                  ;	    +---------------------------+
 33321                                  ;	    | DWORD pointer to ASCIZ	|
 33322                                  ;	    | command line at 80h	|
 33323                                  ;	    +---------------------------+
 33324                                  ;	    | DWORD pointer to default	|
 33325                                  ;	    | FCB to be passed at 5Ch	|
 33326                                  ;	    +---------------------------+
 33327                                  ;	    | DWORD pointer to default	|
 33328                                  ;	    | FCB to be passed at 6Ch	|
 33329                                  ;	    +---------------------------+
 33330                                  ;
 33331                                  ;	    AL = 1 -> load program
 33332                                  ;
 33333                                  ;	    +---------------------------+
 33334                                  ;	    | WORD segment address of	|
 33335                                  ;	    | environment.		|
 33336                                  ;	    +---------------------------+
 33337                                  ;	    | DWORD pointer to ASCIZ	|
 33338                                  ;	    | command line at 80h	|
 33339                                  ;	    +---------------------------+
 33340                                  ;	    | DWORD pointer to default	|
 33341                                  ;	    | FCB to be passed at 5Ch	|
 33342                                  ;	    +---------------------------+
 33343                                  ;	    | DWORD pointer to default	|
 33344                                  ;	    | FCB to be passed at 6Ch	|
 33345                                  ;	    +---------------------------+
 33346                                  ;	    | DWORD returned value of	|
 33347                                  ;	    | CS:IP			|
 33348                                  ;	    +---------------------------+
 33349                                  ;	    | DWORD returned value of	|
 33350                                  ;	    | SS:IP			|
 33351                                  ;	    +---------------------------+
 33352                                  ;
 33353                                  ;	    AL = 3 -> load overlay
 33354                                  ;
 33355                                  ;	    +---------------------------+
 33356                                  ;	    | WORD segment address where|
 33357                                  ;	    | file will be loaded.	|
 33358                                  ;	    +---------------------------+
 33359                                  ;	    | WORD relocation factor to |
 33360                                  ;	    | be applied to the image.	|
 33361                                  ;	    +---------------------------+
 33362                                  ;
 33363                                  ; Returns:
 33364                                  ;	    AX = error_invalid_function
 33365                                  ;	       = error_bad_format
 33366                                  ;	       = error_bad_environment
 33367                                  ;	       = error_not_enough_memory
 33368                                  ;	       = error_file_not_found
 33369                                  ; =========================================================================
 33370                                  ;
 33371                                  ;   Revision history:
 33372                                  ;
 33373                                  ;	 A000	version 4.00  Jan. 1988
 33374                                  ;
 33375                                  ; =========================================================================
 33376                                  
 33377                                  Exec_Internal_Buffer		EQU	OPENBUF
 33378                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 33379                                  
 33380                                  ; =========================================================================
 33381                                  
 33382                                  ;IF1		; warning message on buffers
 33383                                  ;%out	Please make sure that the following are contiguous and of the
 33384                                  ;%out	following sizes:
 33385                                  ;%out
 33386                                  ;%out	OpenBuf     128
 33387                                  ;%out	RenBuf	    128
 33388                                  ;%out	SearchBuf    53
 33389                                  ;%out	DummyCDS    curdirLen
 33390                                  ;ENDIF
 33391                                  
 33392                                  ; =========================================================================
 33393                                  
 33394                                  ; =========================================================================
 33395                                  ;
 33396                                  ; =========================================================================
 33397                                  
 33398                                  	; 20/05/2019 - Retro DOS v4.0
 33399                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 33400                                  
 33401                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33402                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 33403                                  	
 33404                                  _$EXEC:
 33405                                  	; 02/08/2018 - Retro DOS v3.0
 33406                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33407                                  
 33408                                  EXEC001S:
 33409                                  	;LocalVar    Exec_Blk		,DWORD
 33410                                  	;LocalVar    Exec_Func		,BYTE
 33411                                  	;LocalVar    Exec_Load_High	,BYTE
 33412                                  	;LocalVar    Exec_FH		,WORD
 33413                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33414                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33415                                  	;LocalVar    Exec_Environ	,WORD
 33416                                  	;LocalVar    Exec_Size		,WORD
 33417                                  	;LocalVar    Exec_Load_Block	,WORD
 33418                                  	;LocalVar    Exec_DMA		,WORD
 33419                                  	;LocalVar    ExecNameLen 	,WORD
 33420                                  	;LocalVar    ExecName		,DWORD
 33421                                  	;
 33422                                  	;LocalVar    Exec_DMA_Save	,WORD
 33423                                  	;LocalVar    Exec_NoStack	,BYTE
 33424                                  
 33425                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33426                                  	;%define	Exec_Blk	dword [bp-4]
 33427                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33428                                  	%define		Exec_BlkL	word [bp-4]	
 33429                                  	%define		Exec_BlkH	word [bp-2]
 33430                                  	%define		Exec_Func	byte [bp-5]
 33431                                  	%define		Exec_Load_High	byte [bp-6]
 33432                                  	%define		Exec_FH		word [bp-8]
 33433                                  	%define		Exec_Rel_Fac	word [bp-10]
 33434                                  	%define		Exec_Res_Len_Para word [bp-12]
 33435                                  	%define		Exec_Environ	word [bp-14]
 33436                                  	%define		Exec_Size	word [bp-16]
 33437                                  	%define		Exec_Load_Block	word [bp-18]
 33438                                  	%define		Exec_DMA	word [bp-20]
 33439                                  	%define		ExecNameLen	word [bp-22]
 33440                                  	;%define	ExecName	dword [bp-26]
 33441                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33442                                  	%define		ExecNameL	word [bp-26]	
 33443                                  	%define		ExecNameH	word [bp-24]
 33444                                  	; MSDOS 6.0
 33445                                  	%define		Exec_DMA_Save	word [bp-28]
 33446                                  	%define		Exec_NoStack	byte [bp-29]
 33447                                  	
 33448                                  	; ==================================================================
 33449                                  	; validate function
 33450                                  	; ==================================================================
 33451                                  		      	
 33452                                  	; M068 - Start
 33453                                  	;
 33454                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33455                                  	; possibility that the count may not be decremented all the way to
 33456                                  	; 0. A typical case is if the program for which we intended to keep 
 33457                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 33458                                  	; calls), exits pre-maturely due to error conditions.
 33459                                  
 33460                                  	; MSDOS 6.0
 33461 00005A5B 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33462                                  
 33463                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33464                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33465                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 33466                                  
 33467 00005A61 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33468                                  	;jne	short @f
 33469 00005A63 7505                    	jne	short Exec_@f		; N: continue
 33470                                  					; Y: change ret addr. to LeaveDos.
 33471 00005A65 59                      	pop	cx			; Note CX is not input to ExecReady
 33472 00005A66 B9[0404]                	mov	cx,LeaveDOS
 33473 00005A69 51                      	push	cx
 33474                                  ;@@:
 33475                                  Exec_@f:
 33476                                  	; M068 - End
 33477                                  	
 33478                                  	;Enter
 33479                                  
 33480 00005A6A 55                      	push	bp
 33481 00005A6B 89E5                    	mov	bp,sp
 33482                                  	;;sub	sp,26	; MSDOS 3.3
 33483                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33484                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33485                                  	; 17/12/2022
 33486                                  	; 20/05/2019
 33487 00005A6D 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33488                                  
 33489                                  	; MSDOS 6.0
 33490 00005A70 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33491                                  					; M030
 33492 00005A72 7614                    	jna	short Exec_Check_2
 33493                                  
 33494                                  	; MSDOS 3.3
 33495                                  	;cmp	AL,3
 33496                                  	;jna	short Exec_Check_2
 33497                                  
 33498                                  Exec_Bad_Fun:
 33499 00005A74 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33500                                  					; Extended Error Locus	;smr;SS Override
 33501                                  	;mov	al,1
 33502 00005A7A B001                    	mov	al,error_invalid_function
 33503                                  
 33504                                  Exec_Ret_Err:
 33505                                  	;Leave
 33506 00005A7C 89EC                    	mov	sp,bp
 33507 00005A7E 5D                      	pop	bp
 33508                                  	;transfer SYS_RET_ERR
 33509 00005A7F E9BEAB                  	jmp	SYS_RET_ERR
 33510                                  
 33511                                  	; MSDOS 6.0
 33512                                  ExecReadyJ:
 33513 00005A82 E8FD17                  	call	ExecReady		; M028
 33514 00005A85 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33515                                  
 33516                                  Exec_Check_2:
 33517 00005A88 3C02                    	cmp	AL,2			
 33518 00005A8A 74E8                    	je	short Exec_Bad_Fun
 33519                                  
 33520                                  	; MSDOS 6.0
 33521 00005A8C 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33522 00005A8E 74E4                    	je	short Exec_Bad_Fun
 33523                                  	
 33524 00005A90 3C05                    	cmp	al,5			; M028 ; M030
 33525 00005A92 74EE                    	je	short ExecReadyJ	; M028
 33526                                  
 33527                                  	;mov	[bp-4],bx
 33528 00005A94 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33529                                  	;mov	[bp-2],es
 33530 00005A97 8C46FE                  	mov	Exec_BlkH,ES
 33531                                  	;mov	[bp-5],al
 33532 00005A9A 8846FB                  	mov	Exec_Func,AL
 33533                                  	;mov	byte [bp-6],0
 33534 00005A9D C646FA00                	mov	Exec_Load_High,0
 33535                                  
 33536                                  	;mov	[bp-26],dx
 33537 00005AA1 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33538                                  	;mov	[bp-24],ds
 33539 00005AA4 8C5EE8                  	mov	ExecNameH,DS
 33540 00005AA7 89D6                    	mov	SI,DX			; move pointer to convenient place
 33541                                  	;invoke	DStrLen
 33542 00005AA9 E833B7                  	call	DStrLen
 33543                                  	;mov	[bp-22],cx
 33544 00005AAC 894EEA                  	mov	ExecNameLen,CX		; save length
 33545                                  
 33546                                  	; MSDOS 6.0
 33547 00005AAF 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33548 00005AB3 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33549                                  
 33550 00005AB7 30C0                    	xor	AL,AL			; open for reading
 33551 00005AB9 55                      	push	BP
 33552                                  
 33553                                  	; MSDOS 6.0
 33554                                  	;or	byte [ss:DOS_FLAG],1
 33555 00005ABA 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33556                                  					; the redir that this open call is
 33557                                  					; due to an exec.
 33558                                  
 33559                                  	;invoke	$OPEN			; is the file there?
 33560 00005AC0 E80513                  	call	_$OPEN
 33561                                  
 33562                                  	; MSDOS 6.0
 33563 00005AC3 9C                      	pushf
 33564                                  	; 02/06/2019
 33565                                  	;and	byte [ss:DOS_FLAG],0FEh
 33566 00005AC4 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33567 00005ACA 9D                      	popf
 33568                                  
 33569 00005ACB 5D                      	pop	BP
 33570                                  
 33571                                  	; MSDOS 3.3 & MSDOS 6.0
 33572 00005ACC 72AE                    	jc	short Exec_Ret_Err
 33573                                  
 33574                                  	;mov	[bp-8],ax
 33575 00005ACE 8946F8                  	mov	Exec_FH,AX
 33576 00005AD1 89C3                    	mov	BX,AX
 33577 00005AD3 30C0                    	xor	AL,AL
 33578                                  	;invoke	$Ioctl
 33579 00005AD5 E849C7                  	call	_$IOCTL
 33580 00005AD8 7207                    	jc	short Exec_BombJ
 33581                                  
 33582                                  	;test	dl,80h
 33583 00005ADA F6C280                  	test	DL,devid_ISDEV
 33584 00005ADD 740A                    	jz	short Exec_Check_Environ
 33585                                  
 33586                                  	;mov	al,2
 33587 00005ADF B002                    	mov	AL,error_file_not_found
 33588                                  Exec_BombJ:
 33589 00005AE1 E9CA00                  	jmp	Exec_Bomb
 33590                                  
 33591                                  BadEnv:
 33592                                  	;mov	al,0Ah
 33593 00005AE4 B00A                    	mov	AL,error_bad_environment
 33594 00005AE6 E9C500                  	jmp	Exec_Bomb
 33595                                  
 33596                                  Exec_Check_Environ:
 33597                                  	;mov	word [bp-18],0
 33598 00005AE9 C746EE0000              	mov	Exec_Load_Block,0
 33599                                  	;mov	word [bp-14],0
 33600 00005AEE C746F20000              	mov	Exec_Environ,0
 33601                                  					; overlays... no environment
 33602                                  	;test	byte [bp-5],2
 33603 00005AF3 F646FB02                	test	Exec_Func,exec_func_overlay
 33604 00005AF7 7552                    	jnz	short Exec_Read_Header
 33605                                  
 33606                                  	;lds	si,[bp-4]
 33607 00005AF9 C576FC                  	lds	SI,Exec_Blk		; get block
 33608 00005AFC 8B04                    	mov	ax,[SI]
 33609                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33610 00005AFE 09C0                    	or	AX,AX
 33611 00005B00 750C                    	jnz	short Exec_Scan_Env
 33612                                  
 33613 00005B02 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33614                                  	;mov	ax,[44]
 33615 00005B07 A12C00                  	mov	AX,[PDB.ENVIRON]
 33616                                  
 33617                                  ; MSDOS 6.0
 33618                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33619                                  ;
 33620                                  ; Exec_environ is being correctly initialized after the environment has been
 33621                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33622                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33623                                  ; parent's environment.
 33624                                  ;	mov	Exec_Environ,AX
 33625                                  ;
 33626                                  ;----------------------------------------------------------------------------
 33627                                  
 33628                                  	;mov	[bp-14],ax
 33629                                  	;mov	Exec_Environ,ax
 33630                                  
 33631 00005B0A 09C0                    	or	AX,AX
 33632 00005B0C 743D                    	jz	short Exec_Read_Header
 33633                                  
 33634                                  Exec_Scan_Env:
 33635 00005B0E 8EC0                    	mov	ES,AX
 33636 00005B10 31FF                    	xor	DI,DI
 33637                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33638 00005B12 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33639 00005B15 30C0                    	xor	AL,AL
 33640                                  
 33641                                  Exec_Get_Environ_Len:
 33642 00005B17 F2AE                    	repnz	scasb			; find that nul byte
 33643 00005B19 75C9                    	jnz	short BadEnv
 33644                                  
 33645 00005B1B 49                      	dec	CX			; Dec CX for the next nul byte test
 33646 00005B1C 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33647                                  
 33648 00005B1E AE                      	scasb				; is there another nul byte?
 33649 00005B1F 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33650                                  
 33651 00005B21 57                      	push	DI
 33652                                  	;lea	bx,[DI+11h]
 33653 00005B22 8D5D11                  	lea	BX,[DI+0Fh+2]
 33654                                  	;add	bx,[bp-22]
 33655 00005B25 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33656                                  					; remember argv[0] length
 33657                                  					; round up and remember argc
 33658 00005B28 B104                    	mov	CL,4
 33659 00005B2A D3EB                    	shr	BX,CL			; number of paragraphs needed
 33660 00005B2C 06                      	push	ES
 33661                                  	;invoke	$Alloc			; can we get the space?
 33662 00005B2D E84406                  	call	_$ALLOC
 33663 00005B30 1F                      	pop	DS
 33664 00005B31 59                      	pop	CX
 33665                                  
 33666                                  	;jnc	short Exec_Save_Environ
 33667                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33668                                  	; 17/12/2022
 33669 00005B32 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 33670                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33671                                  	;jnc	short Exec_Save_Environ
 33672                                  	;jmp	SHORT Exec_No_Mem
 33673                                  
 33674                                  Exec_Save_Environ:
 33675 00005B34 8EC0                    	mov	ES,AX
 33676                                  	;mov	[bp-14],ax
 33677 00005B36 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33678 00005B39 31F6                    	xor	SI,SI
 33679 00005B3B 89F7                    	mov	DI,SI
 33680 00005B3D F3A4                    	rep	movsb			; copy the environment
 33681 00005B3F B80100                  	mov	AX,1
 33682 00005B42 AB                      	stosw
 33683                                  	;lds	si,[bp-26]
 33684 00005B43 C576E6                  	lds	SI,ExecName
 33685                                  	;mov	cx,[bp-22]
 33686 00005B46 8B4EEA                  	mov	CX,ExecNameLen
 33687 00005B49 F3A4                    	rep	movsb
 33688                                  
 33689                                  Exec_Read_Header:
 33690                                  	; We read in the program header into the above data area and
 33691                                  	; determine where in this memory the image will be located.
 33692                                  
 33693                                  	;Context DS
 33694 00005B4B 16                      	push	ss
 33695 00005B4C 1F                      	pop	ds
 33696                                  	;mov	cx,26
 33697 00005B4D B91A00                  	mov	CX,exec_header_len	; header size
 33698 00005B50 BA[C80F]                	mov	DX,exec_signature
 33699 00005B53 06                      	push	ES
 33700 00005B54 1E                      	push	DS
 33701 00005B55 E88304                  	call	ExecRead
 33702 00005B58 1F                      	pop	DS
 33703 00005B59 07                      	pop	ES
 33704 00005B5A 7250                    	jc	short Exec_Bad_File
 33705                                  
 33706 00005B5C 09C0                    	or	AX,AX
 33707 00005B5E 744C                    	jz	short Exec_Bad_File
 33708                                  	;cmp	ax,26
 33709 00005B60 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33710 00005B63 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33711                                  
 33712 00005B65 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33713 00005B6B 7504                    	jnz	short Exec_Check_Sig
 33714                                  
 33715                                  	;mov	byte [bp-6],0FFh
 33716 00005B6D C646FAFF                	mov	Exec_Load_High,-1
 33717                                  
 33718                                  Exec_Check_Sig:
 33719 00005B71 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33720                                  	;cmp	ax,5A4Dh ; 'MZ'
 33721 00005B74 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33722 00005B77 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33723                                  
 33724                                  	;cmp	ax,4D5Ah ; 'ZM'
 33725 00005B79 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33726 00005B7C 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33727                                  
 33728                                  Exec_Com_Filej:
 33729 00005B7E E9E901                  	jmp	Exec_Com_File
 33730                                  
 33731                                  	; We have the program header... determine memory requirements
 33732                                  
 33733                                  Exec_Save_Start:
 33734 00005B81 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33735 00005B84 B105                    	mov	CL,5			; convert to paragraphs
 33736 00005B86 D3E0                    	shl	AX,CL
 33737 00005B88 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33738                                  	;mov	[bp-12],ax
 33739 00005B8C 8946F4                  	mov	Exec_Res_Len_Para,AX
 33740                                  
 33741                                  		; Do we need to allocate memory?
 33742                                  		; Yes if function is not load-overlay
 33743                                  
 33744                                  	;test	byte [bp-5],2
 33745 00005B8F F646FB02                	test	Exec_Func,exec_func_overlay
 33746 00005B93 7445                    	jz	short Exec_Allocate	; allocation of space
 33747                                  
 33748                                  		; get load address from block
 33749                                  
 33750                                  	;les	di,[bp-4]
 33751 00005B95 C47EFC                  	les	DI,Exec_Blk
 33752 00005B98 268B05                  	mov	ax,[es:di]
 33753                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33754                                  	;mov	[bp-20],ax
 33755 00005B9B 8946EC                  	mov	Exec_DMA,AX
 33756                                  
 33757                                  	; 17/12/2022
 33758                                  	;;mov	ax,[es:di+2]
 33759                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33760                                  	;;mov	[bp-10],ax
 33761                                  	;mov	Exec_Rel_Fac,AX
 33762                                  
 33763                                  	; 17/12/2022
 33764                                  	; 30/11/2022 (!most proper code!)
 33765                                  	;mov	dx,[es:di+2]
 33766 00005B9E 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33767                                  	;mov	[bp-10],dx
 33768 00005BA2 8956F6                  	mov	Exec_Rel_Fac,dx
 33769                                  	; ax = Exec_DMA
 33770 00005BA5 E9DE00                  	jmp	Exec_Find_Res
 33771                                  
 33772                                  ; 17/12/2022
 33773                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33774                                  ; 27/09/2023
 33775                                  %if 0
 33776                                  	; 02/06/2019 - Retro DOS v4.0
 33777                                  	;mov	ax,[bp-20]  ; *+*
 33778                                  	mov	AX,Exec_DMA ; *+*
 33779                                  	; 10/08/2018
 33780                                  	jmp	Exec_Find_Res		; M000
 33781                                  %endif
 33782                                  
 33783                                  Exec_No_Mem:
 33784                                  	;mov	al,8
 33785 00005BA8 B008                    	mov	AL,error_not_enough_memory
 33786 00005BAA EB02                    	jmp	short Exec_Bomb
 33787                                  
 33788                                  Exec_Bad_File:
 33789                                  	;mov	al,0Bh
 33790 00005BAC B00B                    	mov	AL,error_bad_format
 33791                                  
 33792                                  Exec_Bomb:
 33793                                  	;mov	bx,[bp-8]
 33794 00005BAE 8B5EF8                  	mov	BX,Exec_FH
 33795 00005BB1 E84004                  	call	Exec_Dealloc
 33796                                  	;LeaveCrit CritMem
 33797 00005BB4 E857B7                  	call	LCritMEM
 33798                                  	;save	<AX,BP>
 33799 00005BB7 50                      	push	ax
 33800 00005BB8 55                      	push	bp
 33801                                  	;invoke	$CLOSE
 33802 00005BB9 E83D0A                  	call	_$CLOSE
 33803                                  	;restore <BP,AX>
 33804 00005BBC 5D                      	pop	bp
 33805 00005BBD 58                      	pop	ax
 33806 00005BBE E9BBFE                  	jmp	Exec_Ret_Err
 33807                                  
 33808                                  Exec_Chk_Mem: 
 33809                                  
 33810                                  	; 24/09/2023
 33811                                  	; ds = DOSDATA
 33812                                  ; 17/12/2022
 33813                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33814                                  ;%if 0
 33815                                  	; MSDOS 6.0    			; M063 - Start
 33816                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33817                                  	; 10/06/2019
 33818 00005BC1 A0[0203]                	mov	al,[AllocMethod]
 33819                                  	;mov	bl,[ss:ALLOCMSAVE]
 33820 00005BC4 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33821                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33822 00005BC8 881E[0203]              	mov	[AllocMethod],bl
 33823                                  	
 33824 00005BCC F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33825 00005BCF 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33826                                  	;				; N: continue
 33827                                  	;
 33828 00005BD1 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33829 00005BD3 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 33830                                  	; 02/06/2019
 33831                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33832 00005BD5 A1[8A00]                	mov	ax,[SAVE_AX]
 33833                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33834                                  					; M063 - End
 33835 00005BD8 EB2B                    	jmp	short Exec_Norm_Alloc1
 33836                                  ;%endif
 33837                                  
 33838                                  ; 17/12/2022
 33839                                  %if 0
 33840                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33841                                  	; MSDOS 6.0    			; M063 - Start
 33842                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33843                                  	mov	bl,[ss:ALLOCMSAVE]
 33844                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33845                                  
 33846                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33847                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33848                                  	;				; N: continue
 33849                                  	;
 33850                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33851                                  	jz	short Exec_No_Mem	; N: no memory 
 33852                                  
 33853                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33854                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33855                                  					; M063 - End
 33856                                  %endif
 33857                                  
 33858                                  Exec_Allocate:
 33859                                  	; 09/09/2018
 33860                                  
 33861                                  	; M005 - START
 33862                                  	; If there is no STACK segment for this exe file and if this
 33863                                  	; not an overlay and the resident size is less than 64K - 
 33864                                  	; 256 bytes we shall add 256 bytes to the programs 
 33865                                  	; resident memory requirement and set Exec_SP to this value.
 33866                                  	
 33867                                  	; 17/12/2022
 33868 00005BDA 29DB                    	sub	bx,bx ; 0	
 33869                                  
 33870                                  	; MSDOS 6.0
 33871                                  	;;mov	byte [bp-29],0
 33872                                  	;mov	Exec_NoStack,0
 33873                                  	; 17/12/2022
 33874 00005BDC 885EE3                  	mov	Exec_NoStack,bl ; 0
 33875 00005BDF 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33876                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33877 00005BE3 7511                    	jne	short ea1		; Y: continue normal processing
 33878 00005BE5 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33879                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33880 00005BE9 750B                    	jne	short ea1		; Y: continue normal processing
 33881                                  
 33882                                  	;inc	byte [bp-29]
 33883 00005BEB FE46E3                  	inc	Exec_NoStack
 33884 00005BEE 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33885 00005BF1 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33886                                  
 33887 00005BF3 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33888                                  ea1:
 33889                                  	; M005 - END
 33890                                  
 33891                                  	; MSDOS 6.0			; M000 - start
 33892                                  	; 20/05/2019
 33893                                  	; (ds = ss = DOSDATA)
 33894 00005BF6 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33895                                  					; Q: is the alloc strat high_first
 33896 00005BFB 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33897                                  					; Y: set high_only bit
 33898 00005BFD 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33899                                  					; M000 - end
 33900                                  Exec_Norm_Alloc:
 33901 00005C02 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 33902                                  Exec_Norm_Alloc1:	; 02/06/2019
 33903                                  					; M000: attempt at allocating memory
 33904                                  	; MSDOS 3.3
 33905                                  	;push	ax			; M000
 33906                                  
 33907 00005C05 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33908 00005C08 1E                      	push	DS
 33909                                  	;invoke	$Alloc			; should have carry set and BX has max
 33910 00005C09 E86805                  	call	_$ALLOC
 33911 00005C0C 1F                      	pop	DS
 33912                                  
 33913                                  	; MSDOS 6.0
 33914 00005C0D A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33915                                  	; MSDOS 3.3
 33916                                  	;pop	ax			; M000
 33917                                  
 33918 00005C10 83C010                  	add	AX,10h			; room for header
 33919 00005C13 83FB11                  	cmp	BX,11h			; enough room for a header
 33920                                  	; MSDOS 6.0
 33921 00005C16 72A9                    	jb	short Exec_Chk_Mem	; M000
 33922                                  	; MSDOS 3.3	
 33923                                  	;jb	short Exec_No_Mem
 33924                                  
 33925 00005C18 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33926                                  	; MSDOS 6.0
 33927 00005C1A 77A5                    	ja	short Exec_Chk_Mem	; M000
 33928                                  	; MSDOS 3.3
 33929                                  	;ja	short Exec_No_Mem
 33930                                  
 33931                                  	;test	byte [bp-6],0FFh
 33932 00005C1C F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33933 00005C20 7518                    	jnz	short Exec_BX_Max	; use max
 33934                                  
 33935                                  	; 09/09/2018
 33936                                  
 33937 00005C22 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33938                                  	; MSDOS 6.0
 33939 00005C26 7299                    	jc	short Exec_Chk_Mem		; M000
 33940                                  	; MSDOS 3.3
 33941                                  	;jc	short Exec_No_Mem
 33942                                  
 33943 00005C28 39D8                    	cmp	AX,BX			; enough space?
 33944                                  	; MSDOS 6.0
 33945 00005C2A 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 33946                                  	; MSDOS 3.3
 33947                                  	;ja	short Exec_No_Mem
 33948                                  
 33949 00005C2C 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33950 00005C30 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33951 00005C34 7204                    	jc	short Exec_BX_Max
 33952                                  
 33953 00005C36 39D8                    	cmp	AX,BX
 33954 00005C38 7602                    	jbe	short Exec_Got_Block
 33955                                  
 33956                                  Exec_BX_Max:
 33957 00005C3A 89D8                    	mov	AX,BX
 33958                                  
 33959                                  Exec_Got_Block:
 33960                                  	; 03/08/2018 - Retro DOS v3.0
 33961                                  
 33962 00005C3C 1E                      	push	DS
 33963 00005C3D 89C3                    	mov	BX,AX
 33964                                  	;mov	[bp-16],bx
 33965 00005C3F 895EF0                  	mov	Exec_Size,BX
 33966                                  	;invoke	$Alloc			; get the space
 33967 00005C42 E82F05                  	call	_$ALLOC
 33968 00005C45 1F                      	pop	DS
 33969                                  	; MSDOS 6.0
 33970                                  	;jc	short Exec_Chk_Mem	; M000
 33971                                  	; MSDOS 3.3
 33972                                  	;;jc	short Exec_No_Mem
 33973                                  	; 20/05/2019
 33974 00005C46 7303                    	jnc	short ea0
 33975 00005C48 E976FF                  	jmp	Exec_Chk_Mem
 33976                                  ea0:
 33977                                  	; MSDOS 6.0
 33978 00005C4B 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33979 00005C4F 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33980                                  
 33981                                  ;M029; Begin changes
 33982                                  ; This code does special handling for programs with no stack segment. If so,
 33983                                  ;check if the current block is larger than 64K. If so, we do not modify
 33984                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33985                                  ;case Exec_SS is not changed.
 33986                                  
 33987                                  	; MSDOS 6.0
 33988                                  	;cmp	byte [bp-29],0
 33989 00005C53 807EE300                	cmp	Exec_NoStack,0
 33990                                  	;je	@f
 33991 00005C57 7412                    	je	short ea2
 33992                                  
 33993 00005C59 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33994                                  	;jae	@f			; Y: Exec_SP = 0
 33995 00005C5D 730C                    	jae	short ea2
 33996                                  
 33997                                  ;Make Exec_SP point at the top of the memory block
 33998                                  
 33999 00005C5F B104                    	mov	cl,4
 34000 00005C61 D3E3                    	shl	bx,cl			; get byte offset
 34001 00005C63 81EB0001                	sub	bx,100h			; take care of PSP
 34002 00005C67 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 34003                                  ea2:
 34004                                  ;@@:
 34005                                  ;M029; end changes
 34006                                  
 34007                                  	;mov	[bp-18],ax
 34008 00005C6B 8946EE                  	mov	Exec_Load_Block,AX
 34009 00005C6E 83C010                  	add	AX,10h
 34010                                  	;test	byte [bp-6],0FFh
 34011 00005C71 F646FAFF                	test	Exec_Load_High,-1
 34012 00005C75 7409                    	jz	short Exec_Use_AX	; use ax for load info
 34013                                  
 34014                                  	;add	ax,[bp-16]
 34015 00005C77 0346F0                  	add	AX,Exec_Size		; go to end
 34016                                  	;sub	ax,[bp-12]
 34017 00005C7A 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 34018 00005C7D 83E810                  	sub	AX,10h			; drop off pdb
 34019                                  
 34020                                  Exec_Use_AX:
 34021                                  	;mov	[bp-10],ax
 34022 00005C80 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 34023                                  	;mov	[bp-20],ax
 34024 00005C83 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 34025                                  
 34026                                  	; Determine the location in the file of the beginning of
 34027                                  	; the resident
 34028                                  
 34029                                  ; 17/12/2022
 34030                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34031                                  ;%if 0
 34032                                  
 34033                                  Exec_Find_Res:
 34034                                  	; MSDOS 6.0
 34035                                  	;;mov	dx,[bp-20]
 34036                                  	;mov	DX,Exec_DMA ; *+*
 34037                                  	;;mov	[bp-28],dx
 34038                                  	;mov	Exec_DMA_Save,DX
 34039                                  
 34040                                  	; 17/12/2022
 34041                                  	; AX = Exec_DMA
 34042                                  
 34043                                  	; 02/06/2019 - Retro DOS v4.0
 34044                                  	;mov	[bp-28],ax ; *+*
 34045 00005C86 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 34046                                  
 34047                                  ;%endif
 34048                                  
 34049                                  ; 17/12/2022
 34050                                  %if 0
 34051                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34052                                  Exec_Find_Res:
 34053                                  	;mov	dx,[bp-20]
 34054                                  	mov	DX,Exec_DMA ; *+*
 34055                                  	;mov	[bp-28],dx
 34056                                  	mov	Exec_DMA_Save,DX
 34057                                  %endif
 34058                                  
 34059                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34060 00005C89 8B16[D00F]              	mov	DX,[exec_par_dir]
 34061 00005C8D 52                      	push	DX
 34062 00005C8E B104                    	mov	CL,4
 34063 00005C90 D3E2                    	shl	DX,CL			; low word of location
 34064 00005C92 58                      	pop	AX
 34065 00005C93 B10C                    	mov	CL,12
 34066 00005C95 D3E8                    	shr	AX,CL			; high word of location
 34067 00005C97 89C1                    	mov	CX,AX			; CX <- high
 34068                                  
 34069                                  		; Read in the resident image (first, seek to it)
 34070                                  	;mov	bx,[bp-8]
 34071 00005C99 8B5EF8                  	mov	BX,Exec_FH
 34072 00005C9C 1E                      	push	DS
 34073 00005C9D 30C0                    	xor	AL,AL
 34074                                  	;invoke	$Lseek			; Seek to resident
 34075 00005C9F E8D30A                  	call	_$LSEEK
 34076 00005CA2 1F                      	pop	DS
 34077 00005CA3 7303                    	jnc	short Exec_Big_Read
 34078                                  
 34079 00005CA5 E906FF                  	jmp	Exec_Bomb
 34080                                  
 34081                                  Exec_Big_Read:				; Read resident into memory
 34082                                  	;mov	bx,[bp-12]
 34083 00005CA8 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 34084 00005CAB 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 34085 00005CAF 7203                    	jb	short Exec_Read_OK
 34086                                  
 34087 00005CB1 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 34088                                  
 34089                                  Exec_Read_OK:
 34090                                  	;sub	[bp-12],bx
 34091 00005CB4 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 34092 00005CB7 53                      	push	BX
 34093 00005CB8 B104                    	mov	CL,4
 34094 00005CBA D3E3                    	shl	BX,CL			; Get count in bytes from paras
 34095 00005CBC 89D9                    	mov	CX,BX			; Count in correct register
 34096 00005CBE 1E                      	push	DS
 34097                                  	;mov	ds,[bp-20]
 34098 00005CBF 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 34099                                  
 34100 00005CC2 31D2                    	xor	DX,DX
 34101 00005CC4 51                      	push	CX			; Save our count
 34102 00005CC5 E81303                  	call	ExecRead
 34103 00005CC8 59                      	pop	CX			; Get old count to verify
 34104 00005CC9 1F                      	pop	DS
 34105 00005CCA 7248                    	jc	short Exec_Bad_FileJ
 34106                                  
 34107 00005CCC 39C1                    	cmp	CX,AX			; Did we read enough?
 34108 00005CCE 5B                      	pop	BX			; Get paragraph count back
 34109 00005CCF 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 34110                                  
 34111                                  	; The read did not match the request. If we are off by 512
 34112                                  	; bytes or more then the header lied and we have an error.
 34113                                  
 34114 00005CD1 29C1                    	sub	CX,AX
 34115 00005CD3 81F90002                	cmp	CX,512
 34116 00005CD7 733B                    	jae	short Exec_Bad_FileJ
 34117                                  
 34118                                  	; We've read in CX bytes... bump DTA location
 34119                                  
 34120                                  ExecCheckEnd:
 34121                                  	;add	[bp-20],bx
 34122 00005CD9 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 34123                                  	;test	word [bp-12],0FFFFh
 34124 00005CDC F746F4FFFF              	test	Exec_Res_Len_Para,-1
 34125 00005CE1 75C5                    	jnz	short Exec_Big_Read
 34126                                  
 34127                                  	; The image has now been read in. We must perform relocation
 34128                                  	; to the current location.
 34129                                  
 34130                                  exec_do_reloc:
 34131                                  	;mov	cx,[bp-10]
 34132 00005CE3 8B4EF6                  	mov	CX,Exec_Rel_Fac
 34133 00005CE6 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 34134 00005CE9 01C8                    	add	AX,CX			; and relocate him
 34135 00005CEB A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 34136                                  
 34137 00005CEE A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 34138 00005CF1 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 34139                                  
 34140 00005CF4 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 34141 00005CF8 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 34142 00005CFB 8CC0                    	mov	AX,ES			; rms;NSS
 34143 00005CFD 01C8                    	add	AX,CX			; relocated...
 34144 00005CFF A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 34145                                  
 34146 00005D02 31C9                    	xor	CX,CX
 34147 00005D04 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 34148                                  	;mov	bx,[bp-8]
 34149 00005D08 8B5EF8                  	mov	BX,Exec_FH
 34150 00005D0B 1E                      	push	DS
 34151 00005D0C 31C0                    	xor	AX,AX
 34152                                  	;invoke	$Lseek
 34153 00005D0E E8640A                  	call	_$LSEEK
 34154 00005D11 1F                      	pop	DS
 34155 00005D12 7303                    	jnc	short exec_get_entries
 34156                                  
 34157                                  Exec_Bad_FileJ:
 34158 00005D14 E995FE                  	jmp	Exec_Bad_File
 34159                                  
 34160                                  exec_get_entries:
 34161 00005D17 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 34162                                  
 34163                                  exec_read_reloc:
 34164 00005D1B 52                      	push	DX
 34165                                  	;mov	dx,OPENBUF
 34166 00005D1C BA[BE03]                	mov	DX,Exec_Internal_Buffer
 34167                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 34168                                  	;mov	cx,396 ; MSDOS 6.0
 34169 00005D1F B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 34170 00005D22 1E                      	push	DS
 34171 00005D23 E8B502                  	call	ExecRead
 34172 00005D26 07                      	pop	ES
 34173 00005D27 5A                      	pop	DX
 34174 00005D28 72EA                    	jc	short Exec_Bad_FileJ
 34175                                  
 34176                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 34177                                  	;mov	cx,99 ;  MSDOS 6.0
 34178 00005D2A B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 34179                                  					; Pointer to byte location in header
 34180                                  	;mov	di,OPENBUF
 34181 00005D2D BF[BE03]                	mov	DI,Exec_Internal_Buffer
 34182                                  	;mov	si,[bp-10]
 34183 00005D30 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 34184                                  
 34185                                  exec_reloc_one:
 34186 00005D33 09D2                    	or	DX,DX			; Any more entries?
 34187 00005D35 7416                    	jz	short Exec_Set_PDBJ
 34188                                  
 34189                                  exec_get_addr:
 34190 00005D37 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 34191 00005D3A 8CD8                    	mov	AX,DS			; Relocate address of item
 34192                                  
 34193                                  	; MSDOS 6.0
 34194                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 34195                                  	;add	ax,[bp-28]
 34196 00005D3C 0346E4                  	add	AX,Exec_DMA_Save
 34197                                  
 34198 00005D3F 8ED8                    	mov	DS,AX
 34199 00005D41 0137                    	add	[BX],SI
 34200 00005D43 83C704                  	add	DI,4
 34201 00005D46 4A                      	dec	DX
 34202 00005D47 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 34203                                  
 34204                                  	; We've exhausted a single buffer's worth. Read in the next
 34205                                  	; piece of the relocation table.
 34206                                  
 34207 00005D49 06                      	push	ES
 34208 00005D4A 1F                      	pop	DS
 34209 00005D4B EBCE                    	jmp	short exec_read_reloc
 34210                                  
 34211                                  Exec_Set_PDBJ:
 34212                                  	; MSDOS 6.0
 34213                                  	
 34214                                  	; We now determine if this is a buggy exe packed file and if 
 34215                                  	; so we patch in the right code. Note that fixexepatch will
 34216                                  	; point to a ret if dos loads low. The load segment as 
 34217                                  	; determined above will be in exec_dma_save
 34218                                  	
 34219 00005D4D 06                      	push	es
 34220 00005D4E 50                      	push	ax			; M030
 34221 00005D4F 51                      	push	cx			; M030
 34222                                  	;mov	es,[bp-28]
 34223 00005D50 8E46E4                  	mov	es,Exec_DMA_Save
 34224 00005D53 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 34225 00005D57 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 34226 00005D5C 36FF16[F311]            	call	word [ss:FixExePatch]
 34227                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34228                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 34229                                  	;call	word [ss:Rational386PatchPtr]
 34230 00005D61 59                      	pop	cx			; M030
 34231 00005D62 58                      	pop	ax			; M030
 34232 00005D63 07                      	pop	es
 34233                                  
 34234 00005D64 E9DE00                  	jmp	Exec_Set_PDB
 34235                                  
 34236                                  Exec_No_Memj:
 34237 00005D67 E93EFE                  	jmp	Exec_No_Mem
 34238                                  
 34239                                  	; we have a .COM file. First, determine if we are merely
 34240                                  	; loading an overlay.
 34241                                  
 34242                                  Exec_Com_File:
 34243                                  	;test	byte [bp-5],2
 34244 00005D6A F646FB02                	test	Exec_Func,exec_func_overlay
 34245 00005D6E 742D                    	jz	short Exec_Alloc_Com_File
 34246                                  	;lds	si,[bp-4]
 34247 00005D70 C576FC                  	lds	SI,Exec_Blk		; get arg block
 34248 00005D73 AD                      	lodsw				; get load address
 34249                                  	;mov	[bp-20],ax
 34250 00005D74 8946EC                  	mov	Exec_DMA,AX
 34251 00005D77 B8FFFF                  	mov	AX,0FFFFh
 34252 00005D7A EB63                    	jmp	short Exec_Read_Block	; read it all!
 34253                                  
 34254                                  Exec_Chk_Com_Mem:			
 34255                                  	; MSDOS 6.0	     		; M063 - Start
 34256 00005D7C 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 34257 00005D80 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 34258 00005D85 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 34259 00005D8A F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 34260 00005D8D 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 34261                                  					; N: continue
 34262                                  	
 34263 00005D8F A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 34264 00005D91 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 34265                                  	
 34266                                  	;mov	ax,[bp-18]
 34267 00005D93 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 34268 00005D96 31DB                    	xor	bx,bx			; M047: bx => free arena
 34269 00005D98 E87502                  	call	ChangeOwner		; M047: free this block
 34270                                  	
 34271 00005D9B EB0E                    	jmp	short Exec_Norm_Com_Alloc
 34272                                  					; M063 - End
 34273                                  	
 34274                                  	; We must allocate the max possible size block (ick!)
 34275                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 34276                                  	; size of block.
 34277                                  
 34278                                  Exec_Alloc_Com_File:
 34279                                  	; MSDOS 6.0			; M000 -start
 34280 00005D9D 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 34281                                  					; Q: is the alloc strat high_first
 34282 00005DA3 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 34283                                  					; Y: set high_only bit
 34284 00005DA5 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 34285                                  					; M000 - end
 34286                                  Exec_Norm_Com_Alloc:			; M000
 34287                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34288 00005DAB BBFFFF                  	mov	BX,0FFFFh
 34289                                  	;invoke	$Alloc			; largest piece available as error
 34290 00005DAE E8C303                  	call	_$ALLOC
 34291 00005DB1 09DB                    	or	BX,BX
 34292                                  	; MSDOS 6.0
 34293 00005DB3 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 34294                                  	; MSDOS 3.3
 34295                                  	;jz	short Exec_No_Memj
 34296                                  
 34297                                  	;mov	[bp-16],bx
 34298 00005DB5 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 34299 00005DB8 53                      	push	BX
 34300                                  	;invoke	$ALLOC			; largest piece available
 34301 00005DB9 E8B803                  	call	_$ALLOC
 34302 00005DBC 5B                      	pop	BX			; get size of block...
 34303                                  	;mov	[bp-18],ax
 34304 00005DBD 8946EE                  	mov	Exec_Load_Block,AX
 34305                                  
 34306 00005DC0 83C010                  	add	AX,10h			; increment for header
 34307                                  	;mov	[bp-20],ax
 34308 00005DC3 8946EC                  	mov	Exec_DMA,AX
 34309                                  
 34310 00005DC6 31C0                    	xor	AX,AX			; presume 64K read...
 34311 00005DC8 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 34312 00005DCC 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 34313                                  
 34314 00005DCE 89D8                    	mov	AX,BX			; convert size to bytes
 34315 00005DD0 B104                    	mov	CL,4
 34316 00005DD2 D3E0                    	shl	AX,CL
 34317                                  	; 17/12/2022
 34318                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34319                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 34320                                  	; MSDOS 5.0
 34321                                  	;cmp	AX,100h   
 34322                                  	; 02/06/2019 - Retro DOS v4.0
 34323                                  	; MSDOS 6.0
 34324                                          ; 17/12/2022
 34325 00005DD4 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 34326 00005DD7 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34327                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 34328                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 34329                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34330                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 34331                                  
 34332                                  					; M047: size of the block is < 64K
 34333 00005DD9 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 34334                                  
 34335                                  Exec_Read_Com:
 34336                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34337 00005DDC 2D0001                  	sub	AX,100h 		; remember size of psp
 34338                                  Exec_Read_Block:
 34339 00005DDF 50                      	push	AX			; save number to read
 34340                                  	;mov	bx,[bp-8]
 34341 00005DE0 8B5EF8                  	mov	BX,Exec_FH		; of com file
 34342 00005DE3 31C9                    	xor	CX,CX			; but seek to 0:0
 34343 00005DE5 89CA                    	mov	DX,CX
 34344 00005DE7 31C0                    	xor	AX,AX			; seek relative to beginning
 34345                                  	;invoke	$Lseek			; back to beginning of file
 34346 00005DE9 E88909                  	call	_$LSEEK
 34347 00005DEC 59                      	pop	CX			; number to read
 34348                                  	;mov	ds,[bp-20]
 34349 00005DED 8E5EEC                  	mov	DS,Exec_DMA
 34350 00005DF0 31D2                    	xor	DX,DX
 34351 00005DF2 51                      	push	CX
 34352 00005DF3 E8E501                  	call	ExecRead
 34353 00005DF6 5E                      	pop	SI			; get number of bytes to read
 34354 00005DF7 7303                    	jnc	short OkRead
 34355 00005DF9 E9B0FD                  	jmp	Exec_Bad_File
 34356                                  
 34357                                  	; 10/09/2018
 34358                                  OkRead:
 34359 00005DFC 39F0                    	cmp	AX,SI			; did we read them all?
 34360                                  	; MSDOS 6.0
 34361                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 34362                                  	; MSDOS 3.3
 34363                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 34364 00005DFE 7503                    	jne	short OkRead2
 34365 00005E00 E979FF                  	jmp	Exec_Chk_Com_Mem
 34366                                  OkRead2:
 34367                                  	; MSDOS 6.0
 34368 00005E03 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 34369 00005E08 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 34370                                  
 34371                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34372                                  	;test	byte [bp-5],2
 34373 00005E0D F646FB02                	test	Exec_Func,exec_func_overlay
 34374 00005E11 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 34375                                  
 34376                                  	;mov	ax,[bp-20]
 34377 00005E13 8B46EC                  	mov	AX,Exec_DMA
 34378 00005E16 83E810                  	sub	AX,10h
 34379 00005E19 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 34380 00005E1D 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 34381                                  
 34382                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 34383                                  	; of 0 on stack.
 34384                                  
 34385 00005E24 81C6FE00                	add	SI,0FEh 		; make room for stack
 34386                                  
 34387                                  	; MSDOS 6.0
 34388 00005E28 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 34389 00005E2B 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 34390 00005E2D 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 34391                                  
 34392                                  Exec_St_Ok:
 34393                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34394 00005E31 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 34395 00005E36 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 34396 00005E3A 8ED8                    	mov	DS,AX
 34397 00005E3C C7040000                	mov	WORD [SI],0		; 0 for return
 34398                                  
 34399                                  	; MSDOS 6.0
 34400                                  
 34401                                  	; M068
 34402                                  	;
 34403                                  	; We now determine if this is a Copy Protected App. If so the 
 34404                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 34405                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34406                                  
 34407 00005E40 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 34408                                  
 34409                                  Exec_Set_PDB:
 34410                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34411                                  	;mov	bx,[bp-8]
 34412 00005E45 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34413 00005E48 E8A901                  	call	Exec_Dealloc
 34414 00005E4B 55                      	push	BP
 34415                                  	;invoke	$Close			; release the jfn
 34416 00005E4C E8AA07                  	call	_$CLOSE
 34417 00005E4F 5D                      	pop	BP
 34418 00005E50 E89301                  	call	Exec_Alloc
 34419                                  	;test	byte [bp-5],2
 34420 00005E53 F646FB02                	test	Exec_Func,exec_func_overlay
 34421 00005E57 743A                    	jz	short Exec_Build_Header
 34422                                  
 34423                                  	; MSDOS 6.0
 34424 00005E59 E8C201                  	call	Scan_Execname
 34425 00005E5C E8D601                  	call	Scan_Special_Entries
 34426                                  ;SR;
 34427                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34428                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34429                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34430                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34431                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 34432                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34433                                  ;issues the version check, it gets the lie version until the next overlay
 34434                                  ;call is issued.
 34435                                  
 34436 00005E5F 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34437 00005E65 7426                    	je	short norm_ovl		;yes, no special handling
 34438 00005E67 56                      	push	si
 34439 00005E68 06                      	push	es
 34440 00005E69 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34441                                  	 
 34442                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 34443 00005E6E 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34444 00005E72 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34445                                  	
 34446 00005E74 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34447 00005E79 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34448 00005E7E 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34449                                  		;;; PDB.VERSION
 34450 00005E83 EB06                    	jmp	short setver_done
 34451                                  sysinit_done:
 34452 00005E85 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34453                                  setver_done:
 34454 00005E8B 07                      	pop	es
 34455 00005E8C 5E                      	pop	si
 34456                                  norm_ovl:
 34457                                  	;leave
 34458 00005E8D 89EC                    	mov	sp,bp		
 34459 00005E8F 5D                      	pop	bp
 34460                                  
 34461                                  	;transfer SYS_RET_OK		; overlay load -> done
 34462 00005E90 E9A4A7                  	jmp	SYS_RET_OK
 34463                                  
 34464                                  Exec_Build_Header:
 34465                                  	;mov	dx,[bp-18]
 34466 00005E93 8B56EE                  	mov	DX,Exec_Load_Block
 34467                                  					; assign the space to the process
 34468                                  	;mov	si,1
 34469 00005E96 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34470                                  	;mov	ax,[bp-14]
 34471 00005E99 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34472 00005E9C 09C0                    	or	AX,AX
 34473 00005E9E 7405                    	jz	short No_Owner		; no environment
 34474                                  
 34475 00005EA0 48                      	dec	AX			; point to header
 34476 00005EA1 8ED8                    	mov	DS,AX
 34477 00005EA3 8914                    	mov	[SI],DX 		; assign ownership
 34478                                  No_Owner:
 34479                                  	;mov	ax,[bp-18]
 34480                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34481                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34482                                  	; 17/12/2022
 34483 00005EA5 89D0                    	mov	ax,dx ; 06/06/2019
 34484                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34485                                  	
 34486 00005EA7 48                      	dec	AX
 34487 00005EA8 8ED8                    	mov	DS,AX			; point to header
 34488 00005EAA 8914                    	mov	[SI],DX 		; assign ownership
 34489                                  
 34490                                  	; MSDOS 6.0
 34491 00005EAC 1E                      	push	DS			;AN000;MS. make ES=DS
 34492 00005EAD 07                      	pop	ES			;AN000;MS.
 34493                                  	;mov	di,8
 34494 00005EAE BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34495 00005EB1 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 34496                                  					;	   ds:si->name, cx=name length
 34497 00005EB4 51                      	push	CX			;AN007;;MS. save for fake version
 34498 00005EB5 56                      	push	SI			;AN007;;MS. save for fake version
 34499                                  
 34500                                  MoveName:				;AN000;
 34501 00005EB6 AC                      	lodsb				;AN000;;MS. get char
 34502 00005EB7 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 34503 00005EB9 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34504                                  					;AN000;
 34505 00005EBB AA                      	stosb				;AN000;;MS. move char
 34506                                  					; MSKK bug fix - limit length copied
 34507 00005EBC 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34508 00005EBF 7302                    	jae	short Mem_Done		; jump if so
 34509                                  	;
 34510 00005EC1 E2F3                    	loop	MoveName		;AN000;;MS. continue
 34511                                  Mem_Done:				;AN000;
 34512 00005EC3 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34513                                  	;cmp	di,16
 34514 00005EC5 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34515 00005EC8 7301                    	jae	short Fill8		;AN000;MS.
 34516                                  	
 34517 00005ECA AA                      	stosb				;AN000;MS.
 34518                                  	
 34519                                  Fill8:					;AN000;
 34520 00005ECB 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34521 00005ECC 59                      	pop	CX			;AN007;MS.
 34522                                  	
 34523 00005ECD E86501                  	call	Scan_Special_Entries	;AN007;MS.
 34524                                  
 34525                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34526 00005ED0 52                      	push	DX
 34527                                  	;mov	si,[bp-16]
 34528 00005ED1 8B76F0                  	mov	SI,Exec_Size
 34529 00005ED4 01D6                    	add	SI,DX
 34530                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34531 00005ED6 E8A4B1                  	call	_$DUP_PDB
 34532 00005ED9 5A                      	pop	DX
 34533                                  
 34534                                  	;push	word [bp-14]
 34535 00005EDA FF76F2                  	push	Exec_Environ
 34536                                  	;pop	WORD [ES:2Ch]
 34537 00005EDD 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34538                                  
 34539                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34540                                  					; version number in PSP
 34541 00005EE2 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34542 00005EE7 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34543                                  		; PDB.VERSION
 34544                                  
 34545                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34546                                  	;lds	si,[bp-4]
 34547 00005EEC C576FC                  	lds	SI,Exec_Blk		; get the block
 34548 00005EEF 1E                      	push	DS			; save its location
 34549 00005EF0 56                      	push	SI
 34550                                  	;lds	si,[si+6]
 34551 00005EF1 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34552                                  
 34553                                  	; DS points to user space 5C FCB
 34554                                  
 34555 00005EF4 B90C00                  	mov	CX,12			; copy drive, name and ext
 34556 00005EF7 51                      	push	CX
 34557 00005EF8 BF5C00                  	mov	DI,5Ch
 34558 00005EFB 8A1C                    	mov	BL,[SI]
 34559 00005EFD F3A4                    	rep	movsb
 34560                                  
 34561                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34562                                  
 34563 00005EFF 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 34564 00005F01 AB                      	stosw
 34565 00005F02 AB                      	stosw
 34566                                  
 34567                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34568                                  
 34569 00005F03 59                      	pop	CX
 34570 00005F04 5E                      	pop	SI			; get block
 34571 00005F05 1F                      	pop	DS
 34572 00005F06 1E                      	push	DS			; save (again)
 34573 00005F07 56                      	push	SI
 34574                                  	;lds	si,[si+0Ah]
 34575 00005F08 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34576                                  
 34577                                  	; DS points to user space 6C FCB
 34578                                  
 34579 00005F0B 8A3C                    	mov	BH,[SI] 		; do same as above
 34580 00005F0D F3A4                    	rep	movsb
 34581 00005F0F AB                      	stosw
 34582 00005F10 AB                      	stosw
 34583 00005F11 5E                      	pop	SI			; get block (last time)
 34584 00005F12 1F                      	pop	DS
 34585                                  	;ld	si,[si+2]
 34586 00005F13 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34587                                  
 34588                                  	; DS points to user space 80 command line
 34589                                  
 34590 00005F16 80C980                  	or	CL,80h
 34591 00005F19 89CF                    	mov	DI,CX
 34592 00005F1B F3A4                    	rep	movsb			; Wham!
 34593                                  
 34594                                  	; Process BX into default AX (validity of drive specs on args).
 34595                                  	; We no longer care about DS:SI.
 34596                                  
 34597 00005F1D FEC9                    	dec	CL			; get 0FFh in CL
 34598 00005F1F 88F8                    	mov	AL,BH
 34599 00005F21 30FF                    	xor	BH,BH
 34600                                  	;invoke	GetVisDrv
 34601 00005F23 E8400A                  	call	GetVisDrv
 34602 00005F26 7302                    	jnc	short Exec_BL
 34603                                  
 34604 00005F28 88CF                    	mov	BH,CL
 34605                                  
 34606                                  Exec_BL:
 34607 00005F2A 88D8                    	mov	AL,BL
 34608 00005F2C 30DB                    	xor	BL,BL
 34609                                  	;invoke	GetVisDrv
 34610 00005F2E E8350A                  	call	GetVisDrv
 34611 00005F31 7302                    	jnc	short Exec_Set_Return
 34612                                  
 34613 00005F33 88CB                    	mov	BL,CL
 34614                                  
 34615                                  Exec_Set_Return:
 34616                                  	;invoke	Get_User_Stack			; get his return address
 34617 00005F35 E849A5                  	call	Get_User_Stack
 34618                                  
 34619                                  	;push	word [si+14h]
 34620 00005F38 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34621                                  	;push	word [si+12h]
 34622 00005F3B FF7412                  	push	word [SI+user_env.user_IP]
 34623                                  	;push	word [si+14h]
 34624 00005F3E FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34625                                  	;push	word [si+12h]
 34626 00005F41 FF7412                  	push	word [SI+user_env.user_IP]
 34627                                  	;pop	word [ES:0Ah]
 34628 00005F44 268F060A00              	pop	WORD [ES:PDB.EXIT]
 34629                                  	;pop	word [ES:0Ch]
 34630 00005F49 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 34631                                  
 34632 00005F4E 31C0                    	xor	AX,AX
 34633 00005F50 8ED8                    	mov	DS,AX
 34634                                  					; save them where we can get them
 34635                                  					; later when the child exits.
 34636                                  	;pop	word [88h]
 34637 00005F52 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34638                                  	;pop	word [90h]
 34639 00005F56 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34640                                  
 34641 00005F5A 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34642 00005F61 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34643 00005F66 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34644                                  
 34645                                  	;test	byte [bp-5],1
 34646 00005F6B F646FB01                	test	Exec_Func,exec_func_no_execute
 34647 00005F6F 7427                    	jz	short exec_go
 34648                                  
 34649 00005F71 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34650                                  	;les	di,[bp-4]
 34651 00005F76 C47EFC                  	les	DI,Exec_Blk		; and block for return
 34652                                  	;mov	[es:di+10h],ds
 34653 00005F79 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34654                                  
 34655 00005F7D 4E                      	dec	SI			; 'push' default AX
 34656 00005F7E 4E                      	dec	SI
 34657 00005F7F 891C                    	mov	[SI],BX 		; save default AX reg
 34658                                  	;mov	[es:di+0Eh], si
 34659 00005F81 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34660                                  
 34661 00005F85 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34662                                  	;mov	[es:di+14h],ds
 34663 00005F8A 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34664                                  	;mov	[es:di+12h],ax
 34665 00005F8E 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34666                                  	
 34667                                  	;leave
 34668 00005F92 89EC                    	mov	sp,bp
 34669 00005F94 5D                      	pop	bp	
 34670                                  
 34671                                  	;transfer SYS_RET_OK
 34672 00005F95 E99FA6                  	jmp	SYS_RET_OK
 34673                                  
 34674                                  exec_go:
 34675 00005F98 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34676 00005F9D 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34677 00005FA2 8CC0                    	mov	AX,ES
 34678                                  
 34679                                  	; MSDOS 6.0
 34680 00005FA4 36803E[F211]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34681 00005FAA 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34682                                  
 34683 00005FAC 1E                      	push	ds			; Y: control must go to low mem stub
 34684                                  		
 34685 00005FAD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34686                                  					;    control to user 
 34687 00005FB2 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34688                                  					; M004: Set bit to signal int 21
 34689                                  					; ah = 25 & ah= 49. See dossym.inc 
 34690                                  					; under TAG M003 & M009 for 
 34691                                  					; explanation
 34692 00005FB7 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34693                                  					; M068: going to be turned OFF.
 34694                                  	
 34695 00005FBB 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34696 00005FBD 1F                      	pop	ds
 34697                                  	
 34698 00005FBE 50                      	push	ax			; ret far into the low mem stub
 34699 00005FBF B8[FB10]                	mov	ax,disa20_xfer
 34700 00005FC2 50                      	push	ax
 34701 00005FC3 8CC0                    	mov	AX,ES			; restore ax
 34702 00005FC5 CB                      	retf
 34703                                  
 34704                                  Xfer_To_User:
 34705                                  	; DS:SI points to entry point
 34706                                  	; AX:DI points to initial stack
 34707                                  	; DX has PDB pointer
 34708                                  	; BX has initial AX value
 34709                                  
 34710 00005FC6 FA                      	cli
 34711                                  	; 15/08/2018
 34712 00005FC7 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34713                                  
 34714 00005FCD 8ED0                    	mov	SS,AX			; set up user's stack
 34715 00005FCF 89FC                    	mov	SP,DI			; and SP
 34716 00005FD1 FB                      	sti
 34717                                  
 34718 00005FD2 1E                      	push	DS			; fake long call to entry
 34719 00005FD3 56                      	push	SI
 34720 00005FD4 8EC2                    	mov	ES,DX			; set up proper seg registers
 34721 00005FD6 8EDA                    	mov	DS,DX
 34722 00005FD8 89D8                    	mov	AX,BX			; set up proper AX
 34723                                  
 34724 00005FDA CB                      	retf
 34725                                  
 34726                                  ; 04/08/2018 - Retro DOS v3.0
 34727                                  
 34728                                  ;----------------------------------------------------------------------------
 34729                                  ;
 34730                                  ;----------------------------------------------------------------------------
 34731                                  
 34732                                  ExecRead:
 34733 00005FDB E81600                  	CALL	Exec_Dealloc
 34734                                  	;mov	bx,[bp-8]
 34735 00005FDE 8B5EF8                  	MOV	bx,Exec_FH
 34736                                  
 34737 00005FE1 55                      	PUSH	BP
 34738 00005FE2 E82507                  	call	_$READ
 34739 00005FE5 5D                      	POP	BP
 34740                                  
 34741                                  	;CALL	Exec_Alloc
 34742                                  	;retn
 34743                                  	; 18/12/2022
 34744                                  	;jmp	short Exec_Alloc
 34745                                  
 34746                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34747                                  
 34748                                  ;----------------------------------------------------------------------------
 34749                                  ;
 34750                                  ;----------------------------------------------------------------------------
 34751                                  
 34752                                  Exec_Alloc:
 34753 00005FE6 53                      	push	BX
 34754                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34755                                  	; 20/05/2019 - Retro DOS v4.0
 34756                                  	; MSDOS 6.0
 34757 00005FE7 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34758 00005FEC E81000                  	call	ChangeOwners
 34759 00005FEF E81CB3                  	call	LCritMEM
 34760 00005FF2 5B                      	pop	BX
 34761 00005FF3 C3                      	retn
 34762                                  
 34763                                  ;----------------------------------------------------------------------------
 34764                                  ;
 34765                                  ;----------------------------------------------------------------------------
 34766                                  
 34767                                  Exec_Dealloc:
 34768 00005FF4 53                      	push	BX
 34769                                  	;mov	bx,0
 34770 00005FF5 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34771 00005FF7 E8F9B2                  	call	ECritMEM
 34772 00005FFA E80200                  	call	ChangeOwners
 34773 00005FFD 5B                      	pop	BX
 34774 00005FFE C3                      	retn
 34775                                  
 34776                                  ; 18/12/2022
 34777                                  %if 0
 34778                                  ;----------------------------------------------------------------------------
 34779                                  ;
 34780                                  ;----------------------------------------------------------------------------
 34781                                  
 34782                                  Exec_Alloc:
 34783                                  	push	BX
 34784                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34785                                  	; 20/05/2019 - Retro DOS v4.0
 34786                                  	; MSDOS 6.0
 34787                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34788                                  	call	ChangeOwners
 34789                                  	call	LCritMEM
 34790                                  	pop	BX
 34791                                  	retn
 34792                                  
 34793                                  %endif
 34794                                  
 34795                                  ;----------------------------------------------------------------------------
 34796                                  ;
 34797                                  ;----------------------------------------------------------------------------
 34798                                  
 34799                                  ChangeOwners:
 34800 00005FFF 9C                      	pushf
 34801 00006000 50                      	push	AX
 34802                                  	;mov	ax,[bp-14]
 34803 00006001 8B46F2                  	mov	AX,Exec_Environ
 34804 00006004 E80900                  	call	ChangeOwner
 34805                                  	;mov	ax,[bp-18]
 34806 00006007 8B46EE                  	mov	AX,Exec_Load_Block
 34807 0000600A E80300                  	call	ChangeOwner
 34808 0000600D 58                      	pop	AX
 34809 0000600E 9D                      	popf
 34810                                  chgown_retn:
 34811 0000600F C3                      	retn
 34812                                  
 34813                                  ;----------------------------------------------------------------------------
 34814                                  ;
 34815                                  ;----------------------------------------------------------------------------
 34816                                  
 34817                                  ChangeOwner:
 34818 00006010 09C0                    	or	AX,AX			; is area allocated?
 34819 00006012 74FB                    	jz	short chgown_retn	; no, do nothing
 34820 00006014 48                      	dec	AX
 34821 00006015 1E                      	push	DS
 34822 00006016 8ED8                    	mov	DS,AX
 34823 00006018 891E0100                	mov	[ARENA.OWNER],BX
 34824 0000601C 1F                      	pop	DS
 34825 0000601D C3                      	retn
 34826                                  
 34827                                  ;----------------------------------------------------------------------------
 34828                                  ;
 34829                                  ;----------------------------------------------------------------------------
 34830                                  
 34831                                  ; 20/05/2019 - Retro DOS v4.0
 34832                                  
 34833                                  	; MSDOS 6.0
 34834                                  Scan_Execname:
 34835 0000601E C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34836                                  Scan_Execname1:				; M028
 34837                                  Save_Begin:				;
 34838 00006021 89F1                    	mov	CX,SI			; CX= starting addr
 34839                                  Scan0:					;
 34840 00006023 AC                      	lodsb				; get char
 34841                                  
 34842 00006024 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34843 00006026 74F9                    	jz	short Save_Begin	; yes, save si
 34844 00006028 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34845 0000602A 74F5                    	jz	short Save_Begin	; yes, save si
 34846 0000602C 3C00                    	cmp	AL,0			; is end of name
 34847 0000602E 75F3                    	jnz	short Scan0		; no, continue scanning
 34848 00006030 29CE                    	sub	SI,CX			; get name's length
 34849 00006032 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34850                                  
 34851 00006034 C3                      	retn
 34852                                  
 34853                                  ;----------------------------------------------------------------------------
 34854                                  ;
 34855                                  ;----------------------------------------------------------------------------
 34856                                  
 34857                                  ; 20/05/2019 - Retro DOS v4.0
 34858                                  
 34859                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34860                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34861                                  
 34862                                  	; MSDOS 6.0
 34863                                  
 34864                                  Scan_Special_Entries:
 34865                                  
 34866 00006035 49                      	dec	CX			; cx= name length
 34867                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34868                                  					;reset to current version
 34869                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34870                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34871                                  	;mov	word [ss:SPECIAL_VERSION],5
 34872                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34873                                  
 34874                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34875 00006036 36C706[BD0E]0616        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34876                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34877                                  				; 24/09/2023
 34878                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34879                                  ;***	call	Reset_Version
 34880                                  
 34881                                  ;M060	push	SS
 34882                                  ;M060	pop	ES
 34883                                  
 34884 0000603D 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34885 00006042 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34886 00006044 09F8                    	or	AX,DI			;M060; be sure the table exists
 34887 00006046 7427                    	jz	short End_List		;M060; If ZR then no table
 34888                                  
 34889                                  GetEntries:
 34890 00006048 268A05                  	mov	AL,[ES:DI]		; end of list
 34891 0000604B 08C0                    	or	AL,AL
 34892 0000604D 7420                    	jz	short End_List		; yes
 34893                                  
 34894 0000604F 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34895 00006054 38C8                    	cmp	AL,CL			; same length ?
 34896 00006056 751B                    	jnz	short SkipOne 		; no
 34897                                  
 34898 00006058 47                      	inc	DI			; es:di -> special name
 34899 00006059 51                      	push	CX			; save length and name addr
 34900 0000605A 56                      	push	SI
 34901                                  
 34902                                  ; M050 - BEGIN
 34903                                  
 34904 0000605B 50                      	push	ax			; save len
 34905                                  sse_next_char:
 34906 0000605C AC                      	lodsb
 34907 0000605D E8D7EE                  	call	UCase
 34908 00006060 AE                      	scasb
 34909 00006061 750D                    	jne	short Not_Matched
 34910 00006063 E2F7                    	loop	sse_next_char
 34911                                  	
 34912                                  ;	repz	cmpsb			; same name ?
 34913                                  ;	jnz	short Not_Matched	; no
 34914                                  
 34915 00006065 58                      	pop	ax			; take len off the stack
 34916                                  
 34917                                  ; M050 - END
 34918                                  
 34919 00006066 268B05                  	mov	AX,[ES:DI]		; get special version
 34920 00006069 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34921                                  
 34922                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34923                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34924                                  
 34925 0000606D 5E                      	pop	SI
 34926 0000606E 59                      	pop	CX
 34927                                  	; 18/12/2022
 34928                                  	;jmp	SHORT End_List
 34929                                  
 34930                                  	; 18/12/2022
 34931                                  End_List:
 34932 0000606F C3                      	retn
 34933                                  
 34934                                  Not_Matched:
 34935 00006070 58                      	pop	ax			; get len from stack ; M050
 34936 00006071 5E                      	pop	SI			; restore si,cx
 34937 00006072 59                      	pop	CX
 34938                                  
 34939                                  SkipOne:
 34940 00006073 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34941 00006078 30E4                    	xor	AH,AH			; position to next entry
 34942 0000607A 01C7                    	add	DI,AX
 34943                                  
 34944 0000607C 83C703                  	add	DI,3			; DI -> next entry length
 34945                                  ;***	add	DI,4			; DI -> next entry length
 34946                                  
 34947 0000607F EBC7                    	jmp	short GetEntries
 34948                                  
 34949                                  	; 18/12/2022
 34950                                  ;End_List:
 34951                                  	;retn
 34952                                  
 34953                                  ; 04/08/2018 - Retro DOS v3.0
 34954                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34955                                  
 34956                                  ;----------------------------------------------------------------------------
 34957                                  ;SUBTTL Terminate and stay resident handler
 34958                                  ;
 34959                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34960                                  ;	    truncate the current block.
 34961                                  ;
 34962                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34963                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34964                                  ;	    and restoring the vectors.
 34965                                  ;
 34966                                  ;----------------------------------------------------------------------------
 34967                                  
 34968                                  	; 20/05/2019 - Retro DOS v4.0
 34969                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34970                                  
 34971                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34972                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34973                                  
 34974                                  _$KEEP_PROCESS:
 34975 00006081 50                      	push	AX			; keep exit code around
 34976                                  	;mov	byte [SS:EXIT_TYPE],3
 34977 00006082 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34978 00006088 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34979 0000608D 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34980 00006090 7303                    	jae	short Keep_Shrink	; info
 34981                                  
 34982 00006092 BA0600                  	mov	DX,6h
 34983                                  
 34984                                  Keep_Shrink:
 34985 00006095 89D3                    	mov	BX,DX
 34986 00006097 53                      	push	BX
 34987 00006098 06                      	push	ES
 34988 00006099 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34989 0000609C 1F                      	pop	DS
 34990 0000609D 5B                      	pop	BX
 34991 0000609E 7207                    	jc	short Keep_Done		; failed on modification
 34992                                  
 34993 000060A0 8CD8                    	mov	AX,DS
 34994 000060A2 01D8                    	add	AX,BX
 34995                                  	;mov	[2],ax
 34996 000060A4 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34997                                  
 34998                                  Keep_Done:
 34999 000060A7 58                      	pop	AX
 35000 000060A8 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 35001                                  
 35002                                  ;----------------------------------------------------------------------------
 35003                                  ;
 35004                                  ;----------------------------------------------------------------------------
 35005                                  
 35006                                  STAY_RESIDENT:
 35007                                  	;mov	ax,3100h
 35008 000060AA B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 35009 000060AD 83C20F                  	add	DX,15
 35010 000060B0 D1DA                    	rcr	DX,1
 35011 000060B2 B103                    	mov	CL,3
 35012 000060B4 D3EA                    	shr	DX,CL
 35013                                  
 35014 000060B6 E94FA2                  	jmp	COMMAND
 35015                                  
 35016                                  ;----------------------------------------------------------------------------
 35017                                  ;SUBTTL $EXIT - return to parent process
 35018                                  ;   Assembler usage:
 35019                                  ;	    MOV     AL, code
 35020                                  ;	    MOV     AH, Exit
 35021                                  ;	    INT     int_command
 35022                                  ;   Error return:
 35023                                  ;	    None.
 35024                                  ;
 35025                                  ;----------------------------------------------------------------------------
 35026                                  
 35027                                  	; 20/05/2019 - Retro DOS v4.0
 35028                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 35029                                  
 35030                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35031                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 35032                                  _$EXIT:
 35033                                  	; 04/08/2018 - Retro DOS v3.0
 35034                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 35035 000060B9 30E4                    	xor	AH,AH
 35036 000060BB 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 35037 000060C0 08E4                    	or	AH,AH
 35038                                  	;mov	BYTE [SS:EXIT_TYPE],0
 35039 000060C2 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 35040 000060C8 7406                    	jz	short exit_inner
 35041                                  	;mov	BYTE [SS:EXIT_TYPE],1
 35042 000060CA 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 35043                                  
 35044                                  	;entry	Exit_inner
 35045                                  exit_inner:
 35046 000060D0 E8AEA3                  	call	Get_User_Stack		;PBUGBUG
 35047                                  
 35048 000060D3 36FF36[3003]            	push	word [ss:CurrentPDB]
 35049                                  	;pop	word [si+14h]
 35050 000060D8 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 35051 000060DB EB08                    	jmp	short abort_inner
 35052                                  
 35053                                  ;BREAK <$ABORT -- Terminate a process>
 35054                                  ;----------------------------------------------------------------------------
 35055                                  ; Inputs:
 35056                                  ;	user_CS:00 must point to valid program header block
 35057                                  ; Function:
 35058                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 35059                                  ;	to the terminate address
 35060                                  ; Returns:
 35061                                  ;	TO THE TERMINATE ADDRESS
 35062                                  ;----------------------------------------------------------------------------
 35063                                  
 35064                                  _$ABORT:
 35065 000060DD 30C0                    	xor	AL,AL
 35066                                  	;mov	byte [SS:EXIT_TYPE],0
 35067                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 35068 000060DF 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 35069                                  
 35070                                  	; abort_inner must have AL set as the exit code! The exit type
 35071                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 35072                                  	; to be correct as the one that is terminating.
 35073                                  
 35074                                  abort_inner:
 35075 000060E5 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 35076 000060EA 36A3[3403]              	mov	[SS:exit_code],AX
 35077 000060EE E890A3                  	call	Get_User_Stack
 35078                                  
 35079                                  	;mov	ds,[si+14h]
 35080 000060F1 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 35081 000060F4 31C0                    	xor	AX,AX
 35082 000060F6 8EC0                    	mov	ES,AX
 35083                                  	;mov	si,10
 35084 000060F8 BE0A00                  	mov	SI,SAVEXIT
 35085                                  	;mov	di,88h
 35086 000060FB BF8800                  	mov	DI,addr_int_terminate
 35087 000060FE A5                      	movsw
 35088 000060FF A5                      	movsw
 35089 00006100 A5                      	movsw
 35090 00006101 A5                      	movsw
 35091 00006102 A5                      	movsw
 35092 00006103 A5                      	movsw
 35093 00006104 E944F2                  	jmp	reset_environment
 35094                                  
 35095                                  ;----------------------------------------------------------------------------
 35096                                  ;
 35097                                  ; fixexepatch will point to this is DOS loads low. 
 35098                                  ;
 35099                                  ;----------------------------------------------------------------------------
 35100                                  ; MSDOS 6.0
 35101                                  
 35102                                  ; 29/04/2019 - Retro DOS v4.0
 35103                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 35104                                  
 35105                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35106                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 35107                                  
 35108                                  RetExePatch: ; proc near
 35109                                  	
 35110 00006107 C3                      	retn
 35111                                  
 35112                                  ;============================================================================
 35113                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 35114                                  ;============================================================================
 35115                                  ; 04/08/2018 - Retro DOS v3.0
 35116                                  ; 14/05/2019 - Retro DOS v4.0
 35117                                  
 35118                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 35119                                  
 35120                                  ;**
 35121                                  ;	Microsoft Confidential
 35122                                  ;	Copyright (C) Microsoft Corporation 1991
 35123                                  ;	All Rights Reserved.
 35124                                  ;
 35125                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 35126                                  ;	I/O specs are defined in DISPATCH.
 35127                                  ;
 35128                                  ;	$ALLOC
 35129                                  ;	$SETBLOCK
 35130                                  ;	$DEALLOC
 35131                                  ;	$AllocOper
 35132                                  ;	arena_free_process
 35133                                  ;	arena_next
 35134                                  ;	check_signature
 35135                                  ;	Coalesce
 35136                                  ;
 35137                                  ;	Modification history:
 35138                                  ;
 35139                                  ;	    Created: ARR 30 March 1983
 35140                                  ;
 35141                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 35142                                  ;		      M003 - added support for link/unlink UMBs from
 35143                                  ;			     DOS arena chain. 7/18/90
 35144                                  ;		      M009 - Added error returns invalid function and 
 35145                                  ;			     arena trashed in set link state call.
 35146                                  ;		      M010 - Release UMB arenas allocated to current PDB
 35147                                  ;			     if UMB_HEAD is initialized.
 35148                                  ;
 35149                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 35150                                  ;			     support. Please see under M009 in 
 35151                                  ;			     ..\inc\dossym.inc. 8/31/90.
 35152                                  ;
 35153                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 35154                                  ;			     sure that umb_head arena is valid and also make
 35155                                  ;			     sure that the previous arena is pointing to 
 35156                                  ;			     umb_head.
 35157                                  ;
 35158                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 35159                                  ;			     set allloc strategy.
 35160                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 35161                                  ;			     bx in AllocSetStrat.
 35162                                  ;
 35163                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 35164                                  ;			     a bit to indicate to dos dispatcher to turn
 35165                                  ;			     a20 off before iret. See M016.
 35166                                  ;
 35167                                  
 35168                                  ;	BREAK	<memory allocation utility routines>
 35169                                  
 35170                                  
 35171                                  ; 15/04/2018 - Retro DOS v2.0
 35172                                  ;----------------------------------------------------------------------------
 35173                                  ; xenix memory calls for MSDOS
 35174                                  ;
 35175                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 35176                                  ; arena_owner_system are all equal to zero and are contained in DI.
 35177                                  ;
 35178                                  ;INCLUDE DOSSEG.ASM
 35179                                  
 35180                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 35181                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 35182                                  
 35183                                  ;.xlist
 35184                                  ;.xcref
 35185                                  ;INCLUDE DOSSYM.ASM
 35186                                  ;INCLUDE DEVSYM.ASM
 35187                                  ;.cref
 35188                                  ;.list
 35189                                  
 35190                                  ;TITLE ALLOC.ASM - memory arena manager
 35191                                  ;NAME Alloc
 35192                                  
 35193                                  ;SUBTTL memory allocation utility routines
 35194                                  ;PAGE
 35195                                  ;
 35196                                  ; arena data
 35197                                  ;
 35198                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 35199                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 35200                                  ;       i_need  FirstArena,WORD         ; first free block found
 35201                                  ;       i_need  BestArena,WORD          ; best free block found
 35202                                  ;       i_need  LastArena,WORD          ; last free block found
 35203                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 35204                                  
 35205                                  ;**	Arena_Free_Process
 35206                                  ;----------------------------------------------------------------------------
 35207                                  ;	Free all arena blocks allocated to a prOcess
 35208                                  ;
 35209                                  ;	ENTRY	(bx) = PID of process
 35210                                  ;	EXIT	none
 35211                                  ;	USES	????? BUGBUG
 35212                                  ;----------------------------------------------------------------------------
 35213                                  
 35214                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35215                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 35216                                  
 35217                                  arena_free_process:
 35218                                  	; 14/05/2019 - Retro DOS v4.0
 35219                                  	; 04/08/2018 - Retro DOS v3.0
 35220 00006108 36A1[2400]                      MOV	AX,[SS:arena_head]
 35221                                  arena_free_process_start:
 35222 0000610C BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 35223                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 35224 0000610F E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 35225                                  
 35226                                  arena_free_process_loop:
 35227                                          ;retc
 35228 00006112 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 35229 00006114 06                      	PUSH    ES
 35230 00006115 1F                              POP     DS
 35231                                  	;cmp	[1],bx 
 35232 00006116 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 35233 0000611A 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 35234                                  	;mov	[1],di
 35235 0000611C 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 35236                                  
 35237                                  arena_free_next:
 35238                                  	;cmp	byte [di],5Ah ;'Z'
 35239 00006120 803D5A                          CMP     BYTE [DI],arena_signature_end
 35240                                                                          ; end of road, Jack?
 35241                                          ;retz				; never come back no more
 35242                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 35243                                  	; 14/05/2019
 35244                                  	; MSDOS 6.0
 35245 00006123 7405                    	jz	short arena_chk_umbs
 35246                                          
 35247 00006125 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 35248 00006128 EBE8                            JMP     SHORT arena_free_process_loop
 35249                                  
 35250                                  	; MSDOS 6.0
 35251                                  arena_chk_umbs:				; M010 - Start
 35252                                  	; 20/05/2019
 35253 0000612A 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 35254 0000612E 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 35255 00006131 741E                    	je	short ret_label		; N: we're done
 35256                                  	
 35257 00006133 8CDF                    	mov	di,ds			; di = last arena
 35258 00006135 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 35259 00006137 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 35260 00006139 EBD1                    	jmp	short arena_free_process_start
 35261                                  					; M010 - End
 35262                                  ;AFP_RETN:
 35263                                  ;	RETN
 35264                                  
 35265                                  ;	BREAK	<Arena Helper Routines>
 35266                                  
 35267                                  ;**	Arena_Next - Find Next item in Arena
 35268                                  ;----------------------------------------------------------------------------
 35269                                  ;	ENTRY	DS - pointer to block head
 35270                                  ;		(di) = 0
 35271                                  ;	EXIT	AX,ES - pointers to next head
 35272                                  ;		'C' set iff arena damaged
 35273                                  ;----------------------------------------------------------------------------
 35274                                  
 35275                                  arena_next:
 35276 0000613B 8CD8                            MOV     AX,DS                   ; AX <- current block
 35277 0000613D 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 35278 00006141 40                              INC     AX                      ; remember that header!
 35279                                  
 35280                                  ;       fall into check_signature and return
 35281                                  ;
 35282                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 35283                                  ;       RETN
 35284                                  
 35285                                  ;**	Check_Signature - Check Memory Block Signature
 35286                                  ;----------------------------------------------------------------------------
 35287                                  ;	ENTRY	(AX) = address of block header
 35288                                  ;		(di) = 0
 35289                                  ;	EXIT	 ES = AX
 35290                                  ;		'C' clear if signature good
 35291                                  ;		'C' set if signature bad
 35292                                  ;	USES	ES, Flags
 35293                                  ;----------------------------------------------------------------------------
 35294                                  
 35295                                  check_signature:        
 35296                                  
 35297 00006142 8EC0                    	MOV     ES,AX                   ; ES <- AX
 35298                                  	;cmp	byte [es:di],4Dh ; 'M'
 35299 00006144 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 35300                                                                          ; IF next signature = not_end THEN
 35301 00006148 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 35302                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 35303 0000614A 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 35304                                                                          ; IF next signature = end then
 35305 0000614E 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 35306 00006150 F9                              STC                             ; set error
 35307                                  ret_label: ; MSDOS 6.0
 35308                                  AFP_RETN:
 35309                                   	; Retro DOS v2.0 - 05/03/2018
 35310                                  check_signature_ok:
 35311                                  COALESCE_RETN:
 35312 00006151 C3                      	RETN
 35313                                  
 35314                                  ;**	Coalesce - Combine free blocks ahead with current block
 35315                                  ;----------------------------------------------------------------------------
 35316                                  ;	Coalesce adds the block following the argument to the argument block,
 35317                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 35318                                  ;	some callers (such as $setblock) use it to join a free block to it's
 35319                                  ;	preceeding allocated block.
 35320                                  ;
 35321                                  ;	ENTRY	(ds) = pointer to the head of a free block
 35322                                  ;		(di) = 0
 35323                                  ;	EXIT	'C' clear if OK
 35324                                  ;		  (ds) unchanged, this block updated
 35325                                  ;		  (ax) = address of next block, IFF not at end
 35326                                  ;		'C' set if arena trashed
 35327                                  ;	USES	(cx)
 35328                                  ;----------------------------------------------------------------------------
 35329                                          
 35330                                  Coalesce:
 35331                                  	;cmp	byte [di],5Ah ; 'Z'
 35332 00006152 803D5A                  	CMP     BYTE [DI],arena_signature_end
 35333                                                                          ; IF current signature = END THEN
 35334                                          ;retz				;   GOTO ok
 35335 00006155 74FA                            jz	short COALESCE_RETN
 35336 00006157 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 35337                                          ;retc				; IF no error THEN GOTO check
 35338 0000615A 72F5                    	jc	short COALESCE_RETN
 35339                                  
 35340                                  coalesce_check:
 35341                                  	;cmp	[es:1],di
 35342 0000615C 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 35343                                          ;retnz				; IF next block isnt free THEN return
 35344 00006161 75EE                            JNZ	SHORT COALESCE_RETN
 35345                                  	;mov	cx,[ES:3]
 35346 00006163 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 35347 00006168 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 35348                                          ;ADD	[3],CX
 35349 00006169 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 35350 0000616D 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 35351 00006170 880D                            MOV     [DI],CL
 35352 00006172 EBDE                            JMP     SHORT Coalesce		; try again
 35353                                  
 35354                                  ; 04/08/2018 - Retro DOS v3.0
 35355                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 35356                                  
 35357                                  ;	BREAK  <$Alloc - allocate space in memory>
 35358                                  
 35359                                  ; MSDOS 6.0
 35360                                  ;----------------------------------------------------------------------------
 35361                                  ;**	$Alloc - Allocate Memory Space
 35362                                  ;
 35363                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 35364                                  ;	Alloc returns a pointer to a free block of memory that
 35365                                  ;	has the requested size in paragraphs.
 35366                                  ;
 35367                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 35368                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 35369                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 35370                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 35371                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 35372                                  ;
 35373                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 35374                                  ;	starts from arena_head.
 35375                                  ;
 35376                                  ;	Assembler usage:
 35377                                  ;           MOV     BX,size
 35378                                  ;           MOV     AH,Alloc
 35379                                  ;           INT     21h
 35380                                  ;
 35381                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 35382                                  ;	so that we start searching the arena at it's first non-trivial free
 35383                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 35384                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 35385                                  ;	doesn't have too many memory objects in it beyond the first free one.
 35386                                  ;	verify that this is true; if so, this can stay as is
 35387                                  ;
 35388                                  ;	ENTRY	(bx) = requested size, in bytes
 35389                                  ;		(DS) = (ES) = DOSGROUP
 35390                                  ;	EXIT	'C' clear if memory allocated
 35391                                  ;		  (ax:0) = address of requested memory
 35392                                  ;		'C' set if request failed
 35393                                  ;		  (AX) = error_not_enough_memory
 35394                                  ;		    (bx) = max size we could have allocated
 35395                                  ;		  (ax) = error_arena_trashed
 35396                                  ;	USES	All
 35397                                  ;----------------------------------------------------------------------------
 35398                                  
 35399                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35400                                  ;----------------------------------------------------------------------------
 35401                                  ;SUBTTL $Alloc - allocate space in memory
 35402                                  ;
 35403                                  ;   Assembler usage:
 35404                                  ;           MOV     BX,size
 35405                                  ;           MOV     AH,Alloc
 35406                                  ;           INT     21h
 35407                                  ;         AX:0 is pointer to allocated memory
 35408                                  ;         BX is max size if not enough memory
 35409                                  ;
 35410                                  ;   Description:
 35411                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35412                                  ;       memory that has the requested  size  in  paragraphs.
 35413                                  ;
 35414                                  ;   Error return:
 35415                                  ;           AX = error_not_enough_memory
 35416                                  ;              = error_arena_trashed
 35417                                  ;----------------------------------------------------------------------------
 35418                                  
 35419                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35420                                  
 35421                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35422                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35423                                  
 35424                                  _$ALLOC:
 35425                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35426                                  	; 14/05/2019 - Retro DOS v4.0
 35427                                  	; 04/08/2018 - Retro DOS v3.0
 35428                                  	;EnterCrit critMem
 35429 00006174 E87CB1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35430                                  
 35431                                  ; 17/12/2022
 35432                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35433                                  ;%if 0
 35434                                  	; 14/05/2019
 35435 00006177 16                      	push	ss
 35436 00006178 1F                      	pop	ds
 35437                                  
 35438                                  	; MSDOS 6.0
 35439                                  	;mov	ax,[ss:arena_head]
 35440                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35441                                  
 35442 00006179 A1[2400]                	mov	ax,[arena_head]
 35443 0000617C A3[8E00]                	mov	[START_ARENA],ax			
 35444                                  	
 35445                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35446 0000617F F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35447                                  					; Q: should we start scanning from 
 35448                                  					;    UMB's
 35449 00006184 740D                    	jz	short norm_alloc	; N: scan from arena_head
 35450                                  		
 35451                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35452                                  	;cmp	word [UMB_HEAD],-1
 35453                                  	;je	short norm_alloc	; N: scan from arena_head
 35454                                  
 35455                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35456 00006186 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 35457 0000618B 7406                    	jz	short norm_alloc	; N: scan from arena_head
 35458                                  	
 35459                                  	;mov	ax,[ss:UMB_HEAD]
 35460                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35461 0000618D A1[8C00]                	mov	ax,[UMB_HEAD]
 35462 00006190 A3[8E00]                	mov	[START_ARENA],ax
 35463                                  					; M000 - end
 35464                                  norm_alloc:
 35465 00006193 31C0                            XOR     AX,AX
 35466 00006195 89C7                            MOV     DI,AX
 35467                                  	; 15/03/2018
 35468                                          ;MOV	[SS:FirstArena],AX	; init the options
 35469                                          ;MOV	[SS:BestArena],AX
 35470                                          ;MOV	[SS:LastArena],AX
 35471                                  	; 14/05/2019
 35472 00006197 A3[4003]                	MOV	[FirstArena],AX		; init the options
 35473 0000619A A3[4203]                        MOV	[BestArena],AX
 35474 0000619D A3[4403]                        MOV	[LastArena],AX
 35475 000061A0 50                              PUSH    AX                      ; alloc_max <- 0
 35476                                  	; 04/08/2018
 35477                                  start_scan:
 35478                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35479                                  	;MOV	AX,[arena_head]
 35480                                  
 35481                                  	; 14/05/2019	
 35482                                  	; MSDOS 6.0
 35483                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35484 000061A1 A1[8E00]                	mov	ax,[START_ARENA]
 35485                                  
 35486                                  	; 27/09/2023 (BugFix) (*) 
 35487                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35488                                  start_scan_x:
 35489                                  
 35490 000061A4 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35491 000061A7 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35492                                  
 35493                                  ;%endif
 35494                                  
 35495                                  ; 17/12/2022
 35496                                  %if 0
 35497                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35498                                  
 35499                                  	; MSDOS 6.0
 35500                                  	mov	ax,[ss:arena_head]
 35501                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35502                                  
 35503                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35504                                  					; Q: should we start scanning from 
 35505                                  					;    UMB's
 35506                                  	jz	short norm_alloc	; N: scan from arena_head
 35507                                  		
 35508                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35509                                  	;je	short norm_alloc	; N: scan from arena_head
 35510                                  
 35511                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35512                                  	jz	short norm_alloc	; N: scan from arena_head
 35513                                  	
 35514                                  	mov	ax,[ss:UMB_HEAD]
 35515                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35516                                  					; M000 - end
 35517                                  norm_alloc:
 35518                                          XOR     AX,AX
 35519                                          MOV     DI,AX
 35520                                  	; 15/03/2018
 35521                                  	MOV	[SS:FirstArena],AX	; init the options
 35522                                  	MOV	[SS:BestArena],AX
 35523                                  	MOV	[SS:LastArena],AX
 35524                                          PUSH    AX                      ; alloc_max <- 0
 35525                                  	; 04/08/2018
 35526                                  start_scan:
 35527                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35528                                  	; 14/05/2019	
 35529                                  	; MSDOS 6.0
 35530                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35531                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35532                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35533                                  %endif
 35534                                  
 35535                                  alloc_scan:
 35536 000061A9 06                              PUSH    ES
 35537 000061AA 1F                              POP     DS                      ; DS <- ES
 35538 000061AB 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35539 000061AF 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35540                                  
 35541                                  alloc_next:
 35542                                  	; MSDOS 6.0			; M000 - start 
 35543 000061B1 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35544 000061B7 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35545                                  	
 35546 000061B9 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35547                                  					; Q: is alloc strategy high_first
 35548 000061BF 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35549 000061C1 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35550 000061C5 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35551                                  					;    arena_head
 35552 000061CA 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35553 000061CC 8CD8                    	mov	ax,ds			; ax = current block
 35554 000061CE 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35555 000061D3 EB03                    	jmp	short alloc_chk_end
 35556                                  
 35557                                  norm_strat:
 35558                                  	;cmp	byte [di],5Ah ; 'Z'
 35559 000061D5 803D5A                          CMP     BYTE [DI],arena_signature_end
 35560                                                                          ; IF current block is last THEN
 35561                                  alloc_chk_end:
 35562 000061D8 740E                            JZ      SHORT alloc_end		;   GOTO end
 35563 000061DA E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35564 000061DD 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35565                                  
 35566                                  alloc_err:
 35567 000061DF 58                              POP     AX
 35568                                  
 35569                                  alloc_trashed:
 35570                                  	;LeaveCrit critMem
 35571 000061E0 E82BB1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 35572                                          ;error	error_arena_trashed
 35573                                  	;mov	al,7
 35574 000061E3 B007                    	MOV	AL,error_arena_trashed
 35575                                  alloc_errj:
 35576 000061E5 E958A4                  	JMP	SYS_RET_ERR
 35577                                  
 35578                                  alloc_end:
 35579                                  	; 18/05/2019
 35580 000061E8 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35581 000061EE 7403                    	jz	short alloc_chk 
 35582 000061F0 E98400                  	jmp	alloc_do_split
 35583                                  
 35584                                  alloc_chk:
 35585                                  	; MSDOS 6.0
 35586 000061F3 36A1[2400]              	mov	ax,[ss:arena_head]
 35587 000061F7 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35588 000061FC 740E                    	je	short alloc_fail	; Y: not enough memory
 35589                                  					; N:
 35590                                  					; Q: is the alloc strat HIGH_ONLY
 35591 000061FE 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35592 00006204 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35593                                  	
 35594 00006206 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35595                                  	; 27/09/2023 (*)
 35596 0000620A EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35597                                  	;jmp	short start_scan
 35598                                  					; M000 - end
 35599                                  
 35600                                  alloc_fail:
 35601                                          ;invoke Get_User_Stack
 35602 0000620C E872A2                          CALL	Get_User_Stack
 35603 0000620F 5B                      	POP     BX
 35604                                          ;MOV	[SI].user_BX,BX
 35605                                  	;MOV	[SI+2],BX
 35606 00006210 895C02                  	mov	[SI+user_env.user_BX],bx
 35607                                  	;LeaveCrit critMem
 35608 00006213 E8F8B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35609                                  	;error	error_not_enough_memory
 35610                                  	;mov	al,8
 35611 00006216 B008                    	MOV	AL,error_not_enough_memory
 35612                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35613 00006218 EBCB                    	jmp	short alloc_errj
 35614                                  	;JMP	SYS_RET_ERR
 35615                                  
 35616                                  alloc_free:
 35617 0000621A E835FF                          CALL    Coalesce		; add following free block to current
 35618 0000621D 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35619 0000621F 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35620 00006223 5A                              POP     DX                      ; check for max found size
 35621 00006224 39D1                            CMP     CX,DX
 35622 00006226 7602                            JNA     SHORT alloc_test
 35623 00006228 89CA                            MOV     DX,CX
 35624                                  
 35625                                  alloc_test:
 35626 0000622A 52                              PUSH    DX
 35627 0000622B 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35628 0000622D 7782                    	JA      SHORT alloc_next	;   GOTO next
 35629                                  
 35630                                  	; 15/03/2018
 35631 0000622F 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35632 00006235 7505                    	JNZ	SHORT alloc_best
 35633 00006237 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 35634                                  alloc_best:
 35635 0000623C 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35636 00006242 740E                            JZ      SHORT alloc_make_best	; initial best
 35637 00006244 06                              PUSH	ES
 35638 00006245 368E06[4203]                    MOV     ES,[SS:BestArena]
 35639 0000624A 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35640 0000624F 07                              POP	ES
 35641 00006250 7605                            JBE     SHORT alloc_last
 35642                                  alloc_make_best:
 35643 00006252 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35644                                  alloc_last:
 35645 00006257 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35646 0000625C E952FF                          JMP     alloc_next
 35647                                  ;
 35648                                  ; split the block high
 35649                                  ;
 35650                                  alloc_do_split_high:
 35651 0000625F 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35652 00006264 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35653 00006268 29D9                            SUB     CX,BX
 35654 0000626A 8CDA                            MOV     DX,DS
 35655 0000626C 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35656 0000626E 01CA                            ADD     DX,CX                   ; point to next block
 35657 00006270 8EC2                            MOV     ES,DX                   ; no decrement!
 35658 00006272 49                              DEC     CX
 35659 00006273 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35660 00006275 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35661                                  ;
 35662                                  ; we have scanned memory and have found all appropriate blocks
 35663                                  ; check for the type of allocation desired; first and best are identical
 35664                                  ; last must be split high
 35665                                  ;
 35666                                  alloc_do_split:
 35667                                  
 35668                                  ; 17/12/2022
 35669                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35670                                  ;%if 0
 35671                                  	; 14/05/2019
 35672                                  	; MSDOS 6.0			; M000 - start
 35673                                  	;xor	cx,cx
 35674 00006277 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35675                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35676 0000627C 80E13F                  	and	cl,3Fh
 35677                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35678 0000627F 80F901                  	cmp	cl,BEST_FIT
 35679 00006282 77DB                    	ja	short alloc_do_split_high
 35680                                  ;%endif
 35681                                  
 35682                                  	; 17/12/2022
 35683                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35684                                  	; MSDOS 6.0 & MSDOS 5.0
 35685                                  	;xor	cx,cx
 35686                                  	;mov	cl,[ss:AllocMethod]
 35687                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35688                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35689                                  	;ja	short alloc_do_split_high
 35690                                  
 35691                                  	; 15/03/2018
 35692                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35693                                  	; 04/08/2018
 35694                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35695                                          ;JA	SHORT alloc_do_split_high
 35696                                          
 35697 00006284 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 35698 00006289 7205                    	JB      SHORT alloc_get_size
 35699 0000628B 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35700                                  
 35701                                  alloc_get_size:
 35702 00006290 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35703 00006294 29D9                            SUB     CX,BX                   ; get room left over
 35704 00006296 8CD8                            MOV     AX,DS
 35705 00006298 89C2                            MOV     DX,AX                   ; save for owner setting
 35706 0000629A 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35707 0000629C 01D8                            ADD     AX,BX
 35708 0000629E 40                              INC     AX                      ; remember the header
 35709 0000629F 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35710 000062A1 49                              DEC     CX                      ; CX <- size of split block
 35711                                  alloc_set_sizes:
 35712 000062A2 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35713 000062A6 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35714                                  	;mov	bl,4Dh ; 'M'
 35715 000062AB B34D                            MOV     BL,arena_signature_normal
 35716 000062AD 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35717 000062AF 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35718 000062B2 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35719                                  
 35720                                  alloc_set_owner:
 35721 000062B7 8EDA                            MOV     DS,DX
 35722 000062B9 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35723 000062BD A30100                          MOV     [ARENA.OWNER],AX
 35724 000062C0 8CD8                            MOV     AX,DS
 35725 000062C2 40                              INC     AX
 35726 000062C3 5B                              POP     BX
 35727                                  	;LeaveCrit critMem
 35728 000062C4 E847B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35729                                  	
 35730                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35731                                  alloc_ok:
 35732                                          ;transfer SYS_RET_OK
 35733 000062C7 E96DA3                  	JMP	SYS_RET_OK
 35734                                  
 35735                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35736                                  
 35737                                  ; MSDOS 6.0
 35738                                  ;----------------------------------------------------------------------------
 35739                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35740                                  ;
 35741                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35742                                  ;	any following free space onto this block; then we try to trim the
 35743                                  ;	block down to the size requested.
 35744                                  ;
 35745                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35746                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35747                                  ;	Thus the maximum-size-possible value that we return has already
 35748                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35749                                  ;
 35750                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35751                                  ;		finish it's work. For this reason we build the allocsf
 35752                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35753                                  ;		code.
 35754                                  ;
 35755                                  ;	ENTRY	(es) = segment of old block
 35756                                  ;		(bx) = newsize
 35757                                  ;		(ah) = SETBLOCK
 35758                                  ;
 35759                                  ;	EXIT	'C' clear if OK
 35760                                  ;		'C' set if error
 35761                                  ;		  (ax) = error_invalid_block
 35762                                  ;		       = error_arena_trashed
 35763                                  ;		       = error_not_enough_memory
 35764                                  ;		       = error_invalid_function
 35765                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35766                                  ;	USES	???? BUGBUG
 35767                                  ;----------------------------------------------------------------------------
 35768                                  
 35769                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35770                                  ;----------------------------------------------------------------------------
 35771                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35772                                  ;
 35773                                  ;   Assembler usage:
 35774                                  ;           MOV     ES,block
 35775                                  ;           MOV     BX,newsize
 35776                                  ;           MOV     AH,setblock
 35777                                  ;           INT     21h
 35778                                  ;         if setblock fails for growing, BX will have the maximum
 35779                                  ;         size possible
 35780                                  ;   Error return:
 35781                                  ;           AX = error_invalid_block
 35782                                  ;              = error_arena_trashed
 35783                                  ;              = error_not_enough_memory
 35784                                  ;              = error_invalid_function
 35785                                  ;----------------------------------------------------------------------------
 35786                                  
 35787                                  _$SETBLOCK:        
 35788                                  	; 04/08/2018 - Retro DOS v3.0
 35789                                  	;EnterCrit   critMem
 35790 000062CA E826B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35791                                  
 35792 000062CD BF0000                  	MOV     DI,ARENA.SIGNATURE
 35793 000062D0 8CC0                            MOV     AX,ES
 35794 000062D2 48                              DEC     AX
 35795 000062D3 E86CFE                          CALL    check_signature
 35796 000062D6 7303                            JNC     SHORT setblock_grab
 35797                                  
 35798                                  setblock_bad:
 35799 000062D8 E905FF                          JMP     alloc_trashed
 35800                                  
 35801                                  setblock_grab:
 35802 000062DB 8ED8                            MOV     DS,AX
 35803 000062DD E872FE                          CALL    Coalesce
 35804 000062E0 72F6                            JC      SHORT setblock_bad
 35805 000062E2 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35806 000062E6 51                              PUSH    CX
 35807 000062E7 39CB                            CMP     BX,CX
 35808 000062E9 76A5                            JBE     SHORT alloc_get_size
 35809 000062EB E91EFF                          JMP     alloc_fail
 35810                                  
 35811                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35812                                  
 35813                                  ; MSDOS 6.0
 35814                                  ;----------------------------------------------------------------------------
 35815                                  ;**	$DEALLOC - Free Heap Memory
 35816                                  ;
 35817                                  ;	ENTRY	(es) = address of item
 35818                                  ;
 35819                                  ;	EXIT	'C' clear of OK
 35820                                  ;		'C' set if error
 35821                                  ;		  (AX) = error_invalid_block
 35822                                  ;	USES	???? BUGBUG
 35823                                  
 35824                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35825                                  ;----------------------------------------------------------------------------
 35826                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35827                                  ;
 35828                                  ;   Assembler usage:
 35829                                  ;           MOV     ES,block
 35830                                  ;           MOV     AH,dealloc
 35831                                  ;           INT     21h
 35832                                  ;
 35833                                  ;   Error return:
 35834                                  ;           AX = error_invalid_block
 35835                                  ;              = error_arena_trashed
 35836                                  ;---------------------------------------------------------------------------- 
 35837                                  
 35838                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35839                                  _$DEALLOC:
 35840                                  	; 14/05/2019 - Retro DOS v4.0    
 35841                                  	; 04/08/2018 - Retro DOS v3.0
 35842                                  	;EnterCrit   critMem
 35843 000062EE E802B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35844                                  
 35845                                  	; MSDOS 6.0			; M016, M068 - Start
 35846 000062F1 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35847                                  					; Q: was the previous call an int 21
 35848                                  					;    exec call
 35849 000062F7 740D                    	jz	short deallocate	; N: continue
 35850 000062F9 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35851 000062FF 7505                    	jne	short deallocate	; N: continue
 35852                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35853                                  	; 25/09/2023
 35854 00006301 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35855                                  deallocate:				; M016, M068 - End
 35856 00006306 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35857 00006309 8CC0                            MOV     AX,ES
 35858 0000630B 48                              DEC     AX
 35859 0000630C E833FE                          CALL    check_signature
 35860 0000630F 720A                            JC      SHORT dealloc_err
 35861 00006311 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35862                                  	;LeaveCrit critMem
 35863 00006316 E8F5AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35864                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35865                                          ;transfer SYS_RET_OK
 35866                                  dealloc_ok:
 35867 00006319 EBAC                    	jmp	short alloc_ok
 35868                                  	;JMP	SYS_RET_OK
 35869                                  
 35870                                  dealloc_err:
 35871                                  	;LeaveCrit critMem
 35872 0000631B E8F0AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35873                                          ;error	error_invalid_block
 35874                                  	;mov	al,9
 35875 0000631E B009                    	MOV	AL,error_invalid_block
 35876                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35877                                  dealloc_errj:
 35878                                  AllocOperErrj:	; 17/12/2022
 35879 00006320 E91DA3                  	JMP	SYS_RET_ERR
 35880                                  
 35881                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35882                                  
 35883                                  ; MSDOS 6.0
 35884                                  ;----------------------------------------------------------------------------
 35885                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35886                                  ;
 35887                                  ;	Assembler usage:
 35888                                  ;           MOV     AH,AllocOper
 35889                                  ;           MOV     BX,method
 35890                                  ;           MOV     AL,func
 35891                                  ;           INT     21h
 35892                                  ;
 35893                                  ;	ENTRY	
 35894                                  ;		(al) = 0
 35895                                  ;		  Get allocation Strategy in (ax)
 35896                                  ;
 35897                                  ;		(al) = 1, (bx) = method = zw0000xy
 35898                                  ;		  Set allocation strategy.
 35899                                  ;		   w  = 1  => HIGH_ONLY
 35900                                  ;		   z  = 1  => HIGH_FIRST
 35901                                  ;		   xy = 00 => FIRST_FIT
 35902                                  ;		      = 01 => BEST_FIT
 35903                                  ;		      = 10 => LAST_FIT
 35904                                  ;
 35905                                  ;		(al) = 2
 35906                                  ;		  Get UMB link state in (al)
 35907                                  ;
 35908                                  ;		(al) = 3
 35909                                  ;		  Set UMB link state
 35910                                  ;		   (bx) = 0 => Unlink UMBs
 35911                                  ;		   (bx) = 1 => Link UMBs
 35912                                  ;
 35913                                  ;
 35914                                  ;	EXIT	'C' clear if OK
 35915                                  ;
 35916                                  ;		 if (al) = 0
 35917                                  ;		  (ax) = existing method
 35918                                  ;		 if (al) = 1
 35919                                  ;		  Sets allocation strategy
 35920                                  ;		 if (al) = 2
 35921                                  ;		  (al) = 0 => UMBs not linked
 35922                                  ;		  (al) = 1 => UMBs linked in
 35923                                  ;		 if (al) = 3
 35924                                  ;		  Links/Unlinks the UMBs into DOS chain
 35925                                  ;
 35926                                  ;		'C' set if error
 35927                                  ;		  AX = error_invalid_function
 35928                                  ;
 35929                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35930                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35931                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35932                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35933                                  ;		    arena' if an arena sig is damaged.
 35934                                  ;----------------------------------------------------------------------------
 35935                                  
 35936                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35937                                  ;----------------------------------------------------------------------------
 35938                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35939                                  ;
 35940                                  ;   Assembler usage:
 35941                                  ;           MOV     AH,AllocOper
 35942                                  ;           MOV     BX,method
 35943                                  ;           MOV     AL,func
 35944                                  ;           INT     21h
 35945                                  ;
 35946                                  ;   Error return:
 35947                                  ;           AX = error_invalid_function
 35948                                  ;----------------------------------------------------------------------------
 35949                                  
 35950                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35951                                  _$ALLOCOPER:
 35952                                  	; 14/05/2019 - Retro DOS v4.0
 35953                                  	; MSDOS 6.0
 35954 00006323 08C0                    	or	al,al ; 0
 35955 00006325 741E                    	jz	short AllocGetStrat
 35956                                  	; 17/12/2022
 35957                                  	;cmp	al,1
 35958                                  	;jz	short AllocSetStrat
 35959                                  
 35960                                  	; 01/12/2022
 35961                                  	;cmp	al, 2
 35962                                  	;jb	short AllocSetStrat
 35963                                  	;ja	short AllocSetLink
 35964                                  	;;jmp	short AllocGetLink
 35965                                  ;AllocGetLink:
 35966                                  	; MSDOS 6.0
 35967                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35968                                  	;and 	al,LINKSTATE		
 35969                                  	;;transfer SYS_RET_OK
 35970                                  	;jmp	SYS_RET_OK
 35971                                  
 35972 00006327 3C02                    	cmp	al,2
 35973                                  	; 17/12/2022
 35974 00006329 7223                    	jb	short AllocSetStrat ; al = 1
 35975 0000632B 7432                    	je	short AllocGetLink
 35976                                  
 35977                                  	;cmp	al,2
 35978                                  	;jz	short AllocGetLink
 35979 0000632D 3C03                    	cmp	al,3
 35980 0000632F 7436                    	jz	short AllocSetLink
 35981                                  
 35982                                  	; 15/04/2018
 35983                                  	;CMP	AL,1
 35984                                          ;JB	SHORT AllocOperGet
 35985                                          ;JZ	SHORT AllocOperSet
 35986                                  
 35987                                  AllocOperError:
 35988                                  	; 04/08/2018 - Retro DOS v3.0
 35989                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35990                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35991 00006331 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35992                                  	;error	error_invalid_function
 35993                                  	;mov	al,1
 35994 00006337 B001                    	MOV	AL,error_invalid_function
 35995                                  	; 17/12/2022
 35996                                  ;AllocOperErrj:
 35997                                  	;JMP	SYS_RET_ERR
 35998                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35999                                  	;jmp	short dealloc_errj
 36000                                  	; 17/12/2022
 36001 00006339 EBE5                    	jmp	short AllocOperErrj
 36002                                  
 36003                                  AllocArenaError:
 36004                                  	; MSDOS 6.0
 36005 0000633B 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 36006                                  					; M009: Extended Error Locus
 36007                                  	;error	error_arena_trashed	; M009:
 36008                                  	;mov	al,7
 36009 00006341 B007                    	MOV	AL,error_arena_trashed
 36010                                  	;JMP	SYS_RET_ERR
 36011 00006343 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 36012                                  
 36013                                  AllocGetStrat: 
 36014                                  	; MSDOS 6.0
 36015                                  AllocOperGet:
 36016 00006345 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 36017 00006349 30E4                            XOR     AH,AH
 36018                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36019                                  	;transfer SYS_RET_OK
 36020                                  AllocOperOk:
 36021                                  	; 17/12/2022
 36022                                  	;jmp	short dealloc_ok
 36023 0000634B E9E9A2                  	JMP	SYS_RET_OK
 36024                                  
 36025                                  AllocSetStrat: 
 36026                                  	; 14/05/2019
 36027                                  	; MSDOS 6.0
 36028 0000634E 53                      	push	bx			; M000 - start
 36029                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36030                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 36031                                  	; 17/12/2022
 36032 0000634F 80E33F                  	and	bl,3Fh
 36033 00006352 83FB02                  	cmp	bx,2			; BX must be 0-2
 36034                                  	;cmp	bl,2
 36035 00006355 5B                      	pop	bx			; M000 - end
 36036 00006356 77D9                    	ja	short AllocOperError
 36037                                  
 36038                                  AllocOperSet:
 36039 00006358 36881E[0203]                    MOV     [SS:AllocMethod],BL
 36040                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36041                                  	;transfer SYS_RET_OK
 36042                                  AllocOperOkj:
 36043 0000635D EBEC                    	jmp	short AllocOperOk
 36044                                  	;JMP	SYS_RET_OK
 36045                                  
 36046                                  AllocGetLink:
 36047                                  	; MSDOS 6.0
 36048 0000635F 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 36049                                  	;and	al,1
 36050 00006363 2401                    	and 	al,LINKSTATE		
 36051                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36052                                  	;transfer SYS_RET_OK
 36053                                  AllocOperOkj2:
 36054                                  	; 17/12/2022
 36055 00006365 EBE4                    	jmp	short AllocOperOk
 36056                                  	;jmp	short AllocOperOkj
 36057                                  	;;JMP	SYS_RET_OK
 36058                                  
 36059                                  AllocSetLink:
 36060                                  	; MSDOS 6.0			; M009 - start
 36061 00006367 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 36062 0000636C 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 36063 0000636F 74C0                    	je	short AllocOperError	; N: error
 36064                                  					; Y: continue
 36065                                  					; M009 - end
 36066 00006371 83FB01                  	cmp	bx,1			
 36067 00006374 7204                    	jb	short UnlinkUmbs
 36068 00006376 741C                    	jz	short LinkUmbs
 36069                                  	
 36070 00006378 EBB7                    	jmp	short AllocOperError
 36071                                  	
 36072                                  UnlinkUmbs:
 36073                                  	;test	byte [ss:UMBFLAG],1
 36074 0000637A 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 36075 00006380 7410                    	jz	short unlinked		; Y: return 
 36076                                  	
 36077 00006382 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 36078 00006385 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 36079                                  	
 36080                                  					; make it last
 36081 00006387 C60600005A              	mov	byte [0],arena_signature_end
 36082                                  	
 36083                                  	;and	byte [ss:UMBFLAG],0FEh
 36084 0000638C 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 36085                                  	
 36086                                  unlinked:
 36087                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36088                                  	;transfer SYS_RET_OK
 36089                                  	; 17/12/2022
 36090 00006392 EBB7                    	jmp	short AllocOperOk
 36091                                  	;jmp	short AllocOperOkj2
 36092                                  	;;JMP	SYS_RET_OK
 36093                                  
 36094                                  LinkUmbs:
 36095 00006394 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 36096 0000639A 7510                    	jnz	short linked		; Y: return
 36097                                  	
 36098 0000639C E80F00                  	call	GetLastArena		; get arena before umb_head
 36099 0000639F 729A                    	jc	short AllocArenaError	; M009: arena trashed
 36100                                  	
 36101                                  					; make it normal. M061: ds points to
 36102                                  					; arena before umb_head
 36103 000063A1 C60600004D              	mov	byte [0],arena_signature_normal
 36104                                  	
 36105 000063A6 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 36106                                  linked:
 36107                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36108                                  	;transfer SYS_RET_OK
 36109                                  	; 17/12/2022
 36110 000063AC EB9D                    	jmp	short AllocOperOk
 36111                                  	;jmp	short unlinked
 36112                                  	;;JMP	SYS_RET_OK
 36113                                  
 36114                                  ; MSDOS 6.0
 36115                                  ;--------------------------------------------------------------------------
 36116                                  ; Procedure Name : GetLastArena		-  M003
 36117                                  ;
 36118                                  ; Inputs	 : cx = umb_head
 36119                                  ;
 36120                                  ;
 36121                                  ; Outputs	 : If UMBs are linked
 36122                                  ;			ES = umb_head
 36123                                  ;			DS = arena before umb_head
 36124                                  ;		   else
 36125                                  ;			DS = last arena
 36126                                  ;			ES = next arena. will be umb_head if NC.
 36127                                  ;
 36128                                  ;		   CY if error
 36129                                  ;
 36130                                  ; Uses		 : DS, ES, DI, BX
 36131                                  ;--------------------------------------------------------------------------
 36132                                  
 36133                                  ; 14/05/2019 - Retro DOS v4.0
 36134                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 36135                                  
 36136                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36137                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 36138                                  	
 36139                                  GetLastArena:
 36140 000063AE 50                      	push	ax			; save ax
 36141                                  
 36142 000063AF 36A1[2400]              	mov	ax,[ss:arena_head]
 36143 000063B3 8EC0                    	mov	es,ax			; es = arena_head
 36144 000063B5 31FF                    	xor	di,di
 36145                                  
 36146 000063B7 26803D5A                	cmp     byte [es:di],arena_signature_end
 36147                                  					; Q: is this the last arena
 36148 000063BB 7419                    	je	short GLA_done		; Y: return last arena in ES		
 36149                                  					
 36150                                  GLA_next:
 36151 000063BD 8ED8                    	mov	ds,ax
 36152 000063BF E879FD                  	call	arena_next		; ax, es -> next arena
 36153                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36154                                  	;jc	short GLA_err
 36155                                  	; 17/12/2022
 36156 000063C2 7228                    	jc	short GLA_err2
 36157                                  
 36158 000063C4 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36159 000063CA 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 36160                                  					;    umb_head
 36161                                  					; N: terminating condition is 05Ah
 36162                                  
 36163 000063CC 26803D5A                	cmp     byte [es:di],arena_signature_end
 36164                                  					; Q: is this the last arena
 36165 000063D0 EB02                    	jmp	short GLA_@f
 36166                                  GLA_chkumb:
 36167 000063D2 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36168                                  GLA_@f:
 36169 000063D4 75E7                    	jne	short GLA_next		; N: get next arena
 36170                                  
 36171                                  GLA_done:
 36172                                  					; M061 - Start
 36173 000063D6 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36174 000063DC 750B                    	jnz	short GLA_ret		; Y: we're done
 36175                                  					; N: let us confirm that the next 
 36176                                  					;    arena is umb_head
 36177 000063DE 8ED8                    	mov	ds,ax
 36178 000063E0 E858FD                  	call	arena_next		; ax, es -> next arena
 36179                                  	;jc	short GLA_err
 36180 000063E3 7207                    	jc	short GLA_err2
 36181 000063E5 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36182 000063E7 7502                    	jne	short GLA_err		; N: error
 36183                                  					; M061 - End
 36184                                  GLA_ret:
 36185                                  	; 17/12/2022				
 36186                                  	;clc
 36187                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36188                                  	;clc
 36189 000063E9 58                      	pop	ax			; M061
 36190 000063EA C3                      	retn				; M061
 36191                                  
 36192                                  GLA_err:
 36193 000063EB F9                      	stc				; M061
 36194                                  GLA_err2:
 36195 000063EC 58                      	pop	ax
 36196 000063ED C3                      	retn
 36197                                  
 36198                                  ;============================================================================
 36199                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 36200                                  ;============================================================================
 36201                                  ; 04/08/2018 - Retro DOS v3.0
 36202                                  
 36203                                  ;	TITLE SRVCALL - Server DOS call
 36204                                  ;	NAME  SRVCALL
 36205                                  
 36206                                  ;**	SRVCALL.ASM - Server DOS call functions
 36207                                  ;
 36208                                  ;
 36209                                  ;	$ServerCall
 36210                                  ;
 36211                                  ;	Modification history:
 36212                                  ;
 36213                                  ;	    Created: ARR 08 August 1983
 36214                                  
 36215                                  ;AsmVars <Installed>
 36216                                  
 36217                                  ;include dpl.asm
 36218                                  
 36219                                  ;Installed = TRUE
 36220                                  
 36221                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 36222                                  ; ---------------------------------------------------------------------------
 36223                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36224                                  
 36225                                  ;BREAK <ServerCall -- Server DOS call>
 36226                                  
 36227                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 36228                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 36229                                  
 36230                                  ;hkn; TABLE	SEGMENT
 36231                                  ;Public SRVC001S,SRVC001E
 36232                                  ;SRVC001S label byte
 36233                                  
 36234                                  SRVC001S:
 36235                                  
 36236 000063EE [F263]                  SERVERTAB:	dw	SERVER_DISP
 36237 000063F0 [4464]                  SERVERLEAVE:	dw	SERVERRETURN
 36238 000063F2 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 36239 000063F3 [AC64]                  		dw	SRV_CALL	; 0
 36240 000063F5 [4564]                  		dw	COMMIT_ALL	; 1
 36241 000063F7 [7B64]                  		dw	CLOSE_NAME	; 2
 36242 000063F9 [8664]                  		dw	CLOSE_UID	; 3
 36243 000063FB [8D64]                  		dw	CLOSE_UID_PID	; 4
 36244 000063FD [9464]                  		dw	GET_LIST	; 5
 36245 000063FF [ED64]                  		dw	GET_DOS_DATA	; 6
 36246 00006401 [1165]                  		dw	SPOOL_OPER	; 7
 36247 00006403 [1165]                  		dw	SPOOL_OPER	; 8
 36248 00006405 [1165]                  		dw	SPOOL_OPER	; 9
 36249 00006407 [1D65]                  		dw	_$SetExtendedError  ; 10
 36250                                  
 36251                                  SERVER_DISP_END:  ;  LABEL BYTE
 36252                                  
 36253                                  ;SRVC001E label byte
 36254                                  
 36255                                  SRVC001E:
 36256                                  
 36257                                  ;hkn; TABLE	ENDS
 36258                                  
 36259                                  ;----------------------------------------------------------------------------
 36260                                  ;
 36261                                  ; Procedure Name : $ServerCall
 36262                                  ;
 36263                                  ; Inputs:
 36264                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 36265                                  ; Function:
 36266                                  ;	AL=0	Server DOS call
 36267                                  ;	AL=1	Commit All files
 36268                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 36269                                  ;	AL=3	Close all files for DPL_UID
 36270                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 36271                                  ;	AL=5	Get open file list entry
 36272                                  ;		    IN: BX File Index
 36273                                  ;			CX User Index
 36274                                  ;		    OUT:ES:DI -> Name
 36275                                  ;			BX = UID
 36276                                  ;		    CX = # locked blocks held by this UID
 36277                                  ;	AL=6	Get DOS data area
 36278                                  ;		    OUT: DS:SI -> Start
 36279                                  ;			CX size in bytes of swap if indos
 36280                                  ;			DX size in bytes of swap always
 36281                                  ;	AL=7	Get truncate flag
 36282                                  ;	AL=8	Set truncate flag
 36283                                  ;	AL=9	Close all spool files
 36284                                  ;	AL=10	SetExtendedError
 36285                                  ;
 36286                                  ;----------------------------------------------------------------------------
 36287                                  
 36288                                  _$ServerCall:
 36289                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36290                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 36291                                  	; 10/06/2019
 36292                                  	; 29/04/2019 - Retro DOS v4.0
 36293                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 36294                                  
 36295                                  	; 05/08/2018 - Retro DOS v3.0
 36296                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 36297 00006409 3C07                    	CMP	AL,7
 36298 0000640B 7204                    	JB	short SET_STUFF
 36299 0000640D 3C09                    	CMP	AL,9
 36300 0000640F 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 36301                                  SET_STUFF:
 36302 00006411 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 36303                                  	;mov	bx,[si+12h]
 36304 00006413 8B5C12                  	MOV	BX,[SI+DPL.UID]
 36305                                  
 36306                                  	; MSDOS 6.0
 36307                                  ;SR;
 36308                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 36309                                  ; of USER_ID
 36310                                  
 36311 00006416 36F606[3010]01          	test	byte [SS:IsWin386],1
 36312 0000641C 7505                    	jnz	short skip_win386
 36313                                  
 36314                                  ;hkn; SS override for user_id and proc_id
 36315                                  	; 15/08/2018
 36316 0000641E 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 36317                                  
 36318                                  skip_win386:
 36319 00006423 8B5C14                  	MOV	BX,[SI+DPL.PID]
 36320 00006426 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 36321                                  NO_SET_ID:
 36322                                  	; 10/06/2019 - Retro DOS v4.0
 36323 0000642B 2EFF36[F063]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 36324 00006430 2EFF36[EE63]            	PUSH	word [cS:SERVERTAB]	; push table address
 36325 00006435 50                      	PUSH	AX
 36326 00006436 E8CDAD                  	call	TableDispatch
 36327                                  
 36328                                  ;hkn; SS override
 36329                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 36330 00006439 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36331                                  	;error	error_invalid_function
 36332                                  	;mov	al,1
 36333 0000643F B001                    	MOV	AL,error_invalid_function
 36334                                  servercall_error:
 36335 00006441 E9FCA1                  	JMP	SYS_RET_ERR
 36336                                  
 36337                                  SERVERRETURN:
 36338 00006444 C3                      	retn
 36339                                  
 36340                                  ; Commit - iterate through the open file list and make sure that the
 36341                                  ; directory entries are correctly updated.
 36342                                  
 36343                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36344                                  COMMIT_ALL:
 36345 00006445 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 36346 00006447 16                      	push	ss
 36347 00006448 1F                      	pop	ds
 36348 00006449 E8A7AE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 36349                                  CommitLoop:
 36350 0000644C 53                      	push	bx
 36351 0000644D E82401                  	call	SFFromSFN
 36352 00006450 7222                    	JC	short CommitDone
 36353 00006452 26833D00                	cmp	word [es:di],0
 36354                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 36355                                  					; if (ThisSFT->refcount != 0)
 36356 00006456 7418                    	JZ	short CommitNext
 36357                                  	;cmp	word [es:di],0FFFFh ; -1
 36358 00006458 26833DFF                	cmp	word [ES:DI],sf_busy
 36359                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 36360                                  					; BUSY SFTs have god knows what
 36361 0000645C 7412                    	JZ	short CommitNext	;   in them.
 36362                                  	; 17/12/2022
 36363 0000645E 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 36364                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 36365 00006463 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 36366                                  					;	doesn't deadlock
 36367 00006465 893E[9E05]              	MOV	[THISSFT],DI
 36368 00006469 8C06[A005]              	MOV	[THISSFT+2],ES
 36369 0000646D E880CB                  	call	DOS_COMMIT		;	DOSCommit ();
 36370                                  CommitNext:
 36371 00006470 5B                      	pop	bx
 36372 00006471 43                      	INC	BX
 36373 00006472 EBD8                    	JMP	short CommitLoop
 36374                                  CommitDone:
 36375 00006474 E897AE                  	call	LCritSFT
 36376 00006477 5B                      	pop	bx
 36377                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36378                                  Commit_Ok:
 36379 00006478 E9BCA1                  	jmp	SYS_RET_OK
 36380                                  	
 36381                                  
 36382                                  CLOSE_NAME:
 36383                                  
 36384                                  ;if installed
 36385                                  
 36386                                  ;hkn; SS override
 36387                                  	;call	far [ss:MFTcloN]
 36388 0000647B 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 36389                                  ;else
 36390                                  ;	Call	MFTcloN
 36391                                  ;endif
 36392                                  
 36393                                  CheckReturns:
 36394 00006480 7202                    	JC	short func_err
 36395                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36396                                  	;transfer SYS_RET_OK
 36397                                  Commit_Okj:
 36398 00006482 EBF4                    	jmp	short Commit_Ok
 36399                                  	;jmp	SYS_RET_OK
 36400                                  
 36401                                  func_err:
 36402                                  	;transfer SYS_RET_ERR
 36403                                  	;jmp	SYS_RET_ERR
 36404 00006484 EBBB                    	jmp	short servercall_error
 36405                                  
 36406                                  CLOSE_UID:
 36407                                  
 36408                                  ;if installed
 36409                                  ;hkn; SS override
 36410                                  	;call	far [ss:MFTclU]
 36411 00006486 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36412                                  ;else
 36413                                  ;	Call	MFTclU
 36414                                  ;endif
 36415 0000648B EBF3                    	JMP	short CheckReturns
 36416                                  
 36417                                  CLOSE_UID_PID:
 36418                                  
 36419                                  ;if installed
 36420                                  ;hkn; SS override
 36421                                  	;call	far [ss:MFTCloseP]
 36422 0000648D 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 36423                                  ;else
 36424                                  ;	Call	MFTCloseP
 36425                                  ;endif
 36426 00006492 EBEC                    	JMP	short CheckReturns
 36427                                  
 36428                                  GET_LIST:
 36429                                  
 36430                                  ;if installed
 36431                                  ;hkn; SS override
 36432                                  	;call	far [ss:MFT_get]
 36433 00006494 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36434                                  ;else
 36435                                  ;	Call	MFT_get
 36436                                  ;endif
 36437 00006499 72E9                    	JC	short func_err
 36438 0000649B E8E39F                  	call	Get_User_Stack
 36439                                  	;mov	[si+2],bx
 36440 0000649E 895C02                  	MOV	[SI+user_env.user_BX],BX
 36441                                  	;mov	[si+10],di
 36442 000064A1 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36443                                  	;mov	[si+16],es
 36444 000064A4 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36445                                  SetCXOK:
 36446                                  	;mov	[si+4],cx
 36447 000064A7 894C04                  	MOV	[SI+user_env.user_CX],CX
 36448                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36449                                  	;transfer SYS_RET_OK
 36450                                  Commit_Okj2:
 36451                                  	; 17/12/2022
 36452 000064AA EBCC                    	jmp	short Commit_Ok
 36453                                  	;jmp	short Commit_Okj
 36454                                  	;;jmp	SYS_RET_OK
 36455                                  
 36456                                  SRV_CALL:
 36457 000064AC 58                      	POP	AX			; get rid of call to $srvcall
 36458 000064AD 1E                      	push	ds
 36459 000064AE 56                      	push	si
 36460 000064AF E8CF9F                  	call	Get_User_Stack
 36461 000064B2 5F                      	pop	di
 36462 000064B3 07                      	pop	es
 36463                                  
 36464                                  ; DS:SI point to stack
 36465                                  ; ES:DI point to DPL
 36466                                  
 36467 000064B4 E82EAD                  	call	XCHGP
 36468                                  
 36469                                  ; DS:SI point to DPL
 36470                                  ; ES:DI point to stack
 36471                                  ;
 36472                                  ; We now copy the registers from DPL to save stack
 36473                                  
 36474 000064B7 56                      	push	si
 36475 000064B8 B90600                  	MOV	CX,6
 36476 000064BB F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36477 000064BD 47                      	INC	DI
 36478 000064BE 47                      	INC	DI			; Skip user_BP
 36479 000064BF A5                      	MOVSW				; DS
 36480 000064C0 A5                      	MOVSW				; ES
 36481 000064C1 5E                      	pop	si			; DS:SI -> DPL
 36482 000064C2 8B04                    	mov	ax,[SI]
 36483                                  	;MOV	AX,[SI+DPL.AX]
 36484                                  	;mov	bx,[si+2]
 36485 000064C4 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36486                                  	;mov	cx,[si+4]
 36487 000064C7 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36488                                  	;mov	dx,[si+6]
 36489 000064CA 8B5406                  	MOV	DX,[SI+DPL.DX]
 36490                                  	;mov	di,[si+10]
 36491 000064CD 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36492                                  	;mov	es,[si+14]
 36493 000064D0 8E440E                  	MOV	ES,[SI+DPL.ES]
 36494                                  	;push	word [si+8]
 36495 000064D3 FF7408                  	PUSH	word [SI+DPL.SI]
 36496                                  	;mov	ds,[si+12]
 36497 000064D6 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36498 000064D9 5E                      	POP	SI
 36499                                  
 36500                                  ;hkn; SS override for next 3
 36501 000064DA 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36502 000064DF 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36503 000064E4 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36504 000064EA E99B9E                  	jmp	REDISP
 36505                                  
 36506                                  GET_DOS_DATA:
 36507 000064ED 16                      	push	ss
 36508 000064EE 07                      	pop	es
 36509 000064EF BF[2003]                	MOV     DI,SWAP_START
 36510 000064F2 B9[AC0A]                	MOV     CX,SWAP_END
 36511 000064F5 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36512 000064F8 29F9                    	SUB     CX,DI
 36513 000064FA 29FA                    	SUB     DX,DI
 36514 000064FC D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36515 000064FE 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36516 00006501 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36517 00006503 E87B9F                  	call	Get_User_Stack
 36518                                  	;mov	[si+14],es
 36519 00006506 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36520                                  	;mov	[si+8],di
 36521 00006509 897C08                  	MOV     [SI+user_env.user_SI],DI
 36522                                  	;mov	[si+6],dx
 36523 0000650C 895406                  	MOV     [SI+user_env.user_DX],DX
 36524 0000650F EB96                    	JMP	short SetCXOK
 36525                                  
 36526                                  SPOOL_OPER:
 36527                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36528                                  
 36529 00006511 50                      	push    ax
 36530 00006512 B82511                  	mov     ax,1125h
 36531 00006515 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36532                                  			; STACK: WORD subfunction
 36533                                  			; Return: CF set on error, AX = error code
 36534                                  			; STACK unchanged
 36535 00006517 5B                      	pop	bx
 36536                                  	; 17/12/2022
 36537                                  	;JC	short func_err2
 36538 00006518 7390                    	jnc	short Commit_Okj2
 36539                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36540                                  	;;jmp	SYS_RET_OK
 36541                                  	;jmp	short Commit_Okj2
 36542                                  	
 36543                                  func_err2:
 36544 0000651A E923A1                  	jmp	SYS_RET_ERR
 36545                                  
 36546                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36547                                  ;--------------------------------------------------------------------------
 36548                                  ;
 36549                                  ; Procedure Name : $SetExtendedError
 36550                                  ;
 36551                                  ; $SetExtendedError takes extended error information and loads it up for the
 36552                                  ; next extended error call. This is used by interrupt-level proccessors to
 36553                                  ; mask their actions.
 36554                                  ;
 36555                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36556                                  ;   Outputs: none
 36557                                  ;
 36558                                  ;---------------------------------------------------------------------------
 36559                                  
 36560                                  _$SetExtendedError:
 36561                                  
 36562                                  ;hkn; SS override for all variables used
 36563                                  
 36564 0000651D 8B04                    	mov	ax,[si]
 36565                                  	;MOV	AX,[SI+DPL.AX]
 36566 0000651F 36A3[2403]              	MOV	[SS:EXTERR],AX
 36567                                  	;mov	ax,[si+10]
 36568 00006523 8B440A                  	MOV	AX,[SI+DPL.DI]
 36569 00006526 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36570                                  	;mov	ax,[si+14]
 36571 0000652A 8B440E                  	MOV	AX,[SI+DPL.ES]
 36572 0000652D 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36573                                  	;mov	ax,[si+2]
 36574 00006531 8B4402                  	MOV	AX,[SI+DPL.BX]
 36575 00006534 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36576                                  	;mov	ax,[si+4]
 36577 00006538 8B4404                  	MOV	AX,[SI+DPL.CX]
 36578 0000653B 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36579 00006540 C3                      	retn
 36580                                  
 36581                                  ;============================================================================
 36582                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36583                                  ;============================================================================
 36584                                  ; 05/08/2018 - Retro DOS v3.0
 36585                                  ; 05/05/2019 - Retro DOS v4.0
 36586                                  
 36587                                  ;**	Handle related utilities for MSDOS 2.X.
 36588                                  ;----------------------------------------------------------------------------
 36589                                  ;	pJFNFromHandle	written
 36590                                  ;	SFFromHandle	written
 36591                                  ;	SFFromSFN	written
 36592                                  ;	JFNFree 	written
 36593                                  ;	SFNFree 	written
 36594                                  ;
 36595                                  ;	Modification history:
 36596                                  ;
 36597                                  ;	    Created: MZ 1 April 1983
 36598                                  ;----------------------------------------------------------------------------
 36599                                  
 36600                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36601                                  
 36602                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36603                                  ;----------------------------------------------------------------------------
 36604                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36605                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36606                                  ;
 36607                                  ;	NOTE:
 36608                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36609                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36610                                  ;
 36611                                  ;	ENTRY	(bx) = handle
 36612                                  ;	EXIT	'C' clear if ok
 36613                                  ;		  (es:di) = address of JFN value
 36614                                  ;		'C' set if error
 36615                                  ;		  (ax) = error code
 36616                                  ;	USES	AX, DI, ES, Flags
 36617                                  ;----------------------------------------------------------------------------
 36618                                  
 36619                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36620                                  
 36621                                  pJFNFromHandle:
 36622                                  	; 05/05/2019 - Retro DOS v4.0
 36623                                  	;getdseg <es>			; es -> dosdata
 36624 00006541 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36625                                  	
 36626                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36627 00006546 268E06[3003]            	mov	es,[es:CurrentPDB]
 36628                                  
 36629                                  	;cmp	bx,[ES:32h]
 36630 0000654B 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36631 00006550 7204                    	JB	short pjfn10		; no, get offset
 36632                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36633                                  	;mov	al,6
 36634 00006552 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36635                                  ReturnCarry:
 36636 00006554 F9                      	STC                             ; signal error
 36637 00006555 C3                      	retn				; go back
 36638                                  pjfn10: 
 36639                                  	;les	di,[es:34h]
 36640 00006556 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36641 0000655B 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36642                                  	;clc
 36643                                  pJFNFromHandle_error:
 36644 0000655D C3                      	retn
 36645                                  
 36646                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36647                                  ;----------------------------------------------------------------------------
 36648                                  ;
 36649                                  ; Procedure Name : SFFromHandle
 36650                                  ;
 36651                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36652                                  ;
 36653                                  ;   Input:      BX has handle
 36654                                  ;   Output:     Carry Set
 36655                                  ;                   AX has error code
 36656                                  ;               Carry Reset
 36657                                  ;                   ES:DI has pointer to SF entry
 36658                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36659                                  ; NOTE:
 36660                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36661                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36662                                  ;
 36663                                  ;----------------------------------------------------------------------------
 36664                                  
 36665                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36666                                  
 36667                                  SFFromHandle:
 36668 0000655E E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36669                                  	;retc				; return if error
 36670 00006561 72FA                    	jc	short pJFNFromHandle_error
 36671 00006563 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36672                                  	;JNZ	short GetSF		; nope, suck out SF
 36673                                  	;;mov	al,6
 36674                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36675                                  	;jmp	short ReturnCarry	; signal it
 36676                                  	; 17/12/2022
 36677                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36678 00006567 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36679                                  	;JNZ	short GetSF		; nope, suck out SF
 36680                                  	;;mov	al,6
 36681                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36682                                  	;jmp	short ReturnCarry	; signal it
 36683                                  GetSF:
 36684 00006569 53                      	push	bx			; save handle
 36685 0000656A 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36686 0000656D 30FF                    	XOR     BH,BH                   ; ignore upper half
 36687 0000656F E80200                  	CALL    SFFromSFN               ; get real sf spot
 36688 00006572 5B                      	pop	bx			; restore
 36689 00006573 C3                      	retn                        	; say goodbye
 36690                                  
 36691                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36692                                  
 36693                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36694                                  ;----------------------------------------------------------------------------
 36695                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36696                                  ;	is more than just a simple index instruction because the SF table
 36697                                  ;	can be made up of multiple pieces chained together. We follow the
 36698                                  ;	chain to the right piece and then do the index operation.
 36699                                  ;
 36700                                  ;   NOTE:
 36701                                  ;	This routine is called from SFFromHandle which is called
 36702                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36703                                  ;
 36704                                  ;	ENTRY	BX has SF index
 36705                                  ;	EXIT	'C' clear if OK
 36706                                  ;		  ES:DI points to SF entry
 36707                                  ;		'C' set if index too large
 36708                                  ;	USES	BX, DI, ES
 36709                                  ;----------------------------------------------------------------------------
 36710                                  
 36711                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36712                                  
 36713                                  SFFromSFN:
 36714                                  	; 05/05/2019 - Retro DOS v4.0
 36715                                  	;getdseg <es>			; es -> dosdata
 36716 00006574 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36717                                  
 36718                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36719 00006579 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36720                                  sfsfn5:	
 36721                                  	;cmp	bx,[es:di+4]
 36722 0000657E 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36723 00006582 720E                    	JB	short sfsfn7		; yes, go grab it
 36724                                  	;sub	bx,[es:di+4]
 36725 00006584 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36726 00006588 26C43D                  	les	di,[es:di] ; 14/08/2018
 36727                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36728 0000658B 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36729 0000658E 75EE                    	JNZ	short sfsfn5		; no, try again
 36730 00006590 F9                      	STC
 36731 00006591 C3                      	retn				; return with error, not found
 36732                                  sfsfn7:
 36733 00006592 50                      	push	ax
 36734                                  	;mov	ax,53 ; MSDOS 3.3
 36735                                  	;mov	ax,59 ; MSDOS 6.0
 36736                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36737                                  	
 36738                                  	; 17/12/2022
 36739 00006593 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36740                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36741                                  	;mov	ax,SF_ENTRY.size ; 59
 36742                                  	
 36743 00006595 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36744 00006597 01C7                    	ADD	DI,AX			; add base of SF block
 36745 00006599 58                      	pop	ax
 36746                                  	;add	di,6
 36747 0000659A 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36748 0000659D C3                      	retn				; return with 'C' clear
 36749                                  
 36750                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36751                                  
 36752                                  ;**	JFNFree - Find a Free JFN Slot
 36753                                  ;----------------------------------------------------------------------------
 36754                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36755                                  ;
 36756                                  ;	ENTRY	(ss) = DOSDATA
 36757                                  ;	EXIT	'C' clear if OK
 36758                                  ;		  (bx) = new handle
 36759                                  ;		  (es:di) = pointer to JFN slot
 36760                                  ;		'C' set if error
 36761                                  ;		  (al) = error code
 36762                                  ;	USES	bx, di, es, flags
 36763                                  ;----------------------------------------------------------------------------
 36764                                  
 36765                                  JFNFree:
 36766 0000659E 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36767                                  jfnf1:	
 36768 000065A0 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36769 000065A3 7209                    	JC	short jfnf5		; no more handles
 36770 000065A5 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36771 000065A9 7405                    	je	short jfnfx		; yes, carry is clear
 36772 000065AB 43                      	INC     BX                      ; no, next handle
 36773 000065AC EBF2                    	JMP	short jfnf1		; and try again
 36774                                  
 36775                                  	; Error. 'C' set
 36776                                  jfnf5:	
 36777                                  	;mov	al,4
 36778 000065AE B004                    	MOV	AL,error_too_many_open_files
 36779                                  jfnfx:	
 36780 000065B0 C3                      	retn				; bye
 36781                                  
 36782                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36783                                  
 36784                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36785                                  ;----------------------------------------------------------------------------
 36786                                  ;	SFNFree scans through the sf table looking for a free entry
 36787                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36788                                  ;
 36789                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36790                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36791                                  ;	we can't just mark it busy because we may get blown out of our open
 36792                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36793                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36794                                  ;	an SFT with this value we look to see if it belongs to this user
 36795                                  ;	and process.  If it does belong to us then it must be an orphan
 36796                                  ;	and we reclaim it.
 36797                                  ;
 36798                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36799                                  ;		over and over, but we could at least set a high water mark...
 36800                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36801                                  ;		even though this is not a frequently called routine - jgl
 36802                                  ;
 36803                                  ;	ENTRY	(ss) = DOSDATA
 36804                                  ;	EXIT	'C' clear if no error
 36805                                  ;		  (bx) = SFN
 36806                                  ;		  (es:di) = pointer to SFT
 36807                                  ;		  es:[di].SFT_REF_COUNT = -1
 36808                                  ;		'C' set if error
 36809                                  ;		  (al) = error code
 36810                                  ;	USES	bx, di, es, Flags
 36811                                  ;----------------------------------------------------------------------------
 36812                                  
 36813                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36814                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36815                                  
 36816                                  SFNFree:
 36817                                  	; 12/08/2018
 36818                                  	; 05/08/2018 - Retro DOS v3.0
 36819                                  	;
 36820                                  	; MSDOS 6.0
 36821 000065B1 50                      	push	ax
 36822 000065B2 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36823                                  sfnf5:	
 36824 000065B4 53                      	push	bx
 36825 000065B5 E8BCFF                  	call	SFFromSFN		; get the potential handle
 36826 000065B8 5B                      	pop	bx
 36827 000065B9 723A                    	jc	short sfnf95		; no more free SFNs
 36828 000065BB 26833D00                	cmp	word [ES:DI],0
 36829                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36830 000065BF 741D                    	je	short sfnf20			; yep, got one
 36831                                  	
 36832                                  	;cmp	word [es:di],0FFFFh ; -1
 36833 000065C1 26833DFF                	cmp	word [ES:DI],sf_busy
 36834                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36835 000065C5 7403                    	je	short sfnf10		; special busy mark
 36836                                  sfnf7:	
 36837 000065C7 43                      	inc	bx			; try the next one
 36838 000065C8 EBEA                    	jmp	short sfnf5
 36839                                  
 36840                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36841                                  ;	it was abandoned during a earlier call and we can use it.
 36842                                  ;
 36843                                  ;	(bx)	= SFN
 36844                                  ;	(es:di) = pointer to SFT
 36845                                  ;	(TOS)	= caller's (ax)
 36846                                  
 36847                                  sfnf10:	
 36848 000065CA 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36849                                  	;cmp	[es:di+2Fh],ax
 36850 000065CE 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36851 000065D2 75F3                    	jnz	short sfnf7		; not ours
 36852 000065D4 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36853                                  	;cmp	[es:di+31h],ax
 36854 000065D8 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36855 000065DC 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36856                                  
 36857                                  ;	We have an SFT to allocate
 36858                                  ;
 36859                                  ;	(bx)	= SFN
 36860                                  ;	(es:di) = pointer to SFT
 36861                                  ;	(TOS)	= caller's (ax)
 36862                                  
 36863                                  sfnf20:
 36864                                  	; cf = 0 ;; Retro DOS v3.0
 36865                                  
 36866                                  	;mov	word [es:di],0FFFFh
 36867 000065DE 26C705FFFF              	mov	word [ES:DI],sf_busy
 36868                                  					; make sure that this is allocated
 36869                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36870                                  
 36871 000065E3 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36872                                  	;mov	[es:di+2Fh],ax
 36873 000065E7 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36874 000065EB 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36875                                  	;mov	[es:di+31h],ax
 36876 000065EF 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36877                                  sfnf21: ;; Retro DOS v3.0
 36878                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36879                                  	;pop	ax
 36880                                  	;;clc
 36881                                  	;retn				; return with no error
 36882                                  	; 17/12/2022
 36883 000065F3 58                      	pop	ax
 36884                                  	;clc
 36885 000065F4 C3                      	retn
 36886                                  
 36887                                  ;**	Error - no more free SFNs
 36888                                  ;
 36889                                  ;	'C' set
 36890                                  ;	(TOS) = saved ax
 36891                                  
 36892                                  sfnf95: 
 36893 000065F5 58                      	pop	ax
 36894                                  	;mov	al,4
 36895 000065F6 B004                    	mov	al,error_too_many_open_files
 36896 000065F8 C3                      	retn				; return with 'C' and error
 36897                                  
 36898                                  ;============================================================================
 36899                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36900                                  ;============================================================================
 36901                                  ; 13/07/2018 - Retro DOS v3.0
 36902                                  ; 20/05/2019 - Retro DOS v4.0
 36903                                  
 36904                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36905                                  
 36906                                  ;	BREAK <$Close - return a handle to the system>
 36907                                  ;----------------------------------------------------------------------------
 36908                                  ;
 36909                                  ;**	$Close - Close a file Handle
 36910                                  ;
 36911                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36912                                  ;		path
 36913                                  ;
 36914                                  ;	Assembler usage:
 36915                                  ;	    MOV     BX, handle
 36916                                  ;	    MOV     AH, Close
 36917                                  ;	    INT     int_command
 36918                                  ;
 36919                                  ;	ENTRY	(bx) = handle
 36920                                  ;	EXIT	<normal INT21 return convention>
 36921                                  ;	USES	all
 36922                                  ;
 36923                                  ;----------------------------------------------------------------------------
 36924                                  
 36925                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36926                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36927                                  
 36928                                  _$CLOSE:
 36929                                  ;	Grab the SFT pointer from the JFN.
 36930                                  
 36931 000065F9 E85A02                  	call	CheckOwner		; get system file entry
 36932 000065FC 722B                    	jc	short CloseError	; error return
 36933 000065FE 16                      	push	ss
 36934 000065FF 1F                      	pop	ds			; For DOS_CLOSE
 36935 00006600 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36936 00006604 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36937                                  
 36938                                  ; DS:SI point to JFN table entry.
 36939                                  ; ES:DI point to SFT
 36940                                  ;
 36941                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36942                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 36943                                  ; If the file was not a net FCB, we free the JFN too.
 36944                                  
 36945                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36946 00006608 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36947 0000660C 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36948                                  	;mov	al,[ES:DI+2]
 36949 0000660E 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36950                                  	;and	al,0F0h
 36951 00006612 24F0                    	AND	AL,SHARING_MASK
 36952                                  	;cmp	al,70h
 36953 00006614 3C70                    	CMP	AL,SHARING_NET_FCB
 36954 00006616 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36955                                  
 36956                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36957                                  ; -1.
 36958                                  
 36959                                  FreeJFN:
 36960 00006618 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36961 0000661B 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36962                                  PostFree:
 36963                                  
 36964                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36965                                  
 36966 0000661F E88CC8                  	call	DOS_CLOSE
 36967                                  
 36968                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36969                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36970                                  
 36971 00006622 7205                    	JC	short CloseError
 36972                                  	;mov	ah,3Eh
 36973 00006624 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36974                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36975                                  CloseOk:
 36976 00006626 E90EA0                  	jmp	SYS_RET_OK
 36977                                  CloseError:
 36978 00006629 E914A0                  	jmp	SYS_RET_ERR
 36979                                  
 36980                                  ;	BREAK <$Commit - commit the file>
 36981                                  ;----------------------------------------------------------------------------
 36982                                  ;
 36983                                  ;**	$Commit - Commit a File
 36984                                  ;
 36985                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36986                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36987                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36988                                  ;	and fix this!! jgl
 36989                                  ;
 36990                                  ;	Assembler usage:
 36991                                  ;	    MOV     BX, handle
 36992                                  ;	    MOV     AH, Commit
 36993                                  ;	    INT     int_command
 36994                                  ;
 36995                                  ;	ENTRY	(bx) = handle
 36996                                  ;	EXIT	none
 36997                                  ;	USES	all
 36998                                  ;;----------------------------------------------------------------------------
 36999                                  
 37000                                  _$COMMIT:
 37001                                  ;	Grab the SFT pointer from the JFN.
 37002                                  
 37003 0000662C E82702                  	call	CheckOwner		; get system file entry
 37004 0000662F 7213                    	JC	short CommitError	; error return
 37005 00006631 16                      	push	ss
 37006 00006632 1F                      	pop	ds			; For DOS_COMMIT
 37007 00006633 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 37008 00006637 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 37009                                  
 37010                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 37011                                  ;
 37012                                  ;	ES:DI point to SFT
 37013                                  
 37014 0000663B E8B2C9                  	call	DOS_COMMIT
 37015 0000663E 7204                    	JC	short CommitError
 37016                                  	; 07/12/2022
 37017                                  	;jc	short CloseError
 37018                                  	;mov	ah,68h
 37019 00006640 B468                    	MOV	AH,COMMIT
 37020                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37021                                  	;jmp	SYS_RET_OK
 37022                                  CommitOk:
 37023 00006642 EBE2                    	jmp	short CloseOk	
 37024                                  
 37025                                  CommitError:
 37026                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37027                                  	;jmp	SYS_RET_ERR
 37028 00006644 EBE3                    	jmp	short CloseError
 37029                                  
 37030                                  ;	BREAK <$ExtHandle - extend handle count>
 37031                                  
 37032                                  ;**	$ExtHandle - Extend Handle Count
 37033                                  ;----------------------------------------------------------------------------
 37034                                  ;	Assembler usage:
 37035                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 37036                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 37037                                  ;	    INT     int_command 		 busy )
 37038                                  ;
 37039                                  ;	ENTRY	(bx) = new number of handles
 37040                                  ;	EXIT	'C' clear if OK
 37041                                  ;		'C' set iff err
 37042                                  ;		  (ax) = error code
 37043                                  ;			 AX = error_not_enough_memory
 37044                                  ;			      error_too_many_open_files
 37045                                  ;	USES	all
 37046                                  ;----------------------------------------------------------------------------
 37047                                  
 37048                                  _$ExtHandle:
 37049 00006646 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 37050                                  	;cmp	bx,20
 37051 00006648 83FB14                  	CMP	BX,FILPERPROC
 37052 0000664B 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 37053 0000664D BB1400                  	MOV	BX,FILPERPROC
 37054                                  exth2:	
 37055 00006650 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 37056                                  	;mov	cx,[ES:32h]
 37057 00006655 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 37058 0000665A 39CB                    	CMP	BX,CX			; the requested == current
 37059 0000665C 7455                    	JE	short ok_done 		; yes and exit
 37060 0000665E 7722                    	JA	short larger		; go allocate new table
 37061                                  
 37062                                  ;	We're going to shrink the # of handles available
 37063                                  
 37064 00006660 BD0100                  	MOV	BP,1			; shrink
 37065                                  	;mov	ds,[ES:36h]
 37066 00006663 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 37067 00006668 89DE                    	MOV	SI,BX			;
 37068 0000666A 29D9                    	SUB	CX,BX			; get difference
 37069                                  
 37070                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 37071                                  chck_handles:
 37072 0000666C 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 37073 0000666F 753D                    	JNZ	short too_many_files	; status
 37074 00006671 46                      	INC	SI
 37075 00006672 E2F8                    	LOOP	chck_handles
 37076 00006674 83FB14                  	CMP	BX,FILPERPROC		; = 20
 37077 00006677 7709                    	JA	short larger		; no
 37078                                  
 37079 00006679 BD0200                  	MOV	BP,2			; psp
 37080                                  	;mov	di,24
 37081 0000667C BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 37082 0000667F 53                      	PUSH	BX
 37083 00006680 EB1D                    	JMP	short movhandl
 37084                                  
 37085                                  larger:
 37086 00006682 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 37087 00006685 747F                    	JZ	short invalid_func	; 10/08/2018
 37088 00006687 F8                      	CLC
 37089 00006688 53                      	PUSH	BX			; save requested number
 37090 00006689 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 37091 0000668C B104                    	MOV	CL,4
 37092                                  	;ror	bx,cl			; MSDOS 3.3
 37093 0000668E D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 37094 00006690 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 37095                                  
 37096 00006694 55                      	PUSH	BP
 37097 00006695 E8DCFA                  	call	_$ALLOC			; allocate memory
 37098 00006698 5D                      	POP	BP
 37099 00006699 7266                    	JC	short no_memory		; not enough meory
 37100                                  
 37101 0000669B 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 37102 0000669D 31FF                    	XOR	DI,DI
 37103                                  movhandl:
 37104 0000669F 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 37105                                  
 37106 000066A4 F7C50300                	test	BP,3			; enlarge ?
 37107 000066A8 740C                    	JZ	short enlarge 		; yes
 37108 000066AA 59                      	POP	CX			; cx = the amount you shrink
 37109 000066AB 51                      	PUSH	CX
 37110 000066AC EB0C                    	JMP	short copy_hand
 37111                                  
 37112                                  ;	Done.  'C' clear
 37113                                  
 37114                                  ; 17/12/2022
 37115                                  ;ok_done:
 37116                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37117                                  ;	;jmp	short CommitOk
 37118                                  ;	; 17/12/2022
 37119                                  ;	jmp	SYS_RET_OK
 37120                                  
 37121                                  too_many_files:
 37122                                  	;mov	al,4
 37123 000066AE B004                    	MOV	AL,error_too_many_open_files
 37124                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37125                                  	;jmp	SYS_RET_ERR
 37126                                  CommitErrorj:
 37127                                  	;jmp	short CommitError
 37128                                  	; 17/12/2022
 37129 000066B0 E98D9F                  	jmp	SYS_RET_ERR
 37130                                  
 37131                                  ; 17/12/2022 
 37132                                  ok_done:
 37133                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37134                                  	;jmp	short CommitOk
 37135                                  	; 17/12/2022
 37136 000066B3 E9819F                  	jmp	SYS_RET_OK
 37137                                  
 37138                                  enlarge:
 37139                                  	;mov	cx,[32h]
 37140 000066B6 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 37141                                  copy_hand:
 37142 000066BA 89CA                    	MOV	DX,CX
 37143                                  	;lds	si,[34h]
 37144 000066BC C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 37145 000066C0 F3A4                    	REP	MOVSB			; copy infomation to new table
 37146 000066C2 59                      	POP	CX			; get new number of handles
 37147 000066C3 51                      	PUSH	CX			; save it again
 37148 000066C4 29D1                    	SUB	CX,DX			; get the difference
 37149 000066C6 B0FF                    	MOV	AL,-1			; set availability to handles
 37150 000066C8 F3AA                    	REP	STOSB
 37151 000066CA 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 37152                                  	;cmp	word [34h],0
 37153 000066CF 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 37154 000066D4 750D                    	JNZ	short update_info	; yes, go update PDB entries
 37155 000066D6 55                      	PUSH	BP
 37156 000066D7 1E                      	PUSH	DS			; save old table segment
 37157 000066D8 06                      	PUSH	ES			; save new table segment
 37158 000066D9 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 37159 000066DD E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 37160 000066E0 07                      	POP	ES			; restore new table segment
 37161 000066E1 1F                      	POP	DS			; restore old table segment
 37162 000066E2 5D                      	POP	BP
 37163                                  
 37164                                  update_info:
 37165 000066E3 F7C50200                	test	BP,2			; psp?
 37166 000066E7 7408                    	JZ	short non_psp 		; no
 37167                                  	;mov	word [34h],18h ; 24
 37168 000066E9 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 37169 000066EF EB06                    	JMP	short final
 37170                                  non_psp:
 37171                                  	;mov	word [34h],0
 37172 000066F1 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 37173                                  final:
 37174                                  	;mov	[36h],es	
 37175 000066F7 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 37176                                  	;pop	word [32h]
 37177 000066FB 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 37178                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37179                                  	;jmp	SYS_RET_OK
 37180                                  ok_done_j:
 37181 000066FF EBB2                    	jmp	short ok_done
 37182                                  
 37183                                  no_memory:
 37184 00006701 5B                      	POP	BX			; clean stack
 37185                                  	;mov	al,8
 37186 00006702 B008                    	MOV	AL,error_not_enough_memory
 37187                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37188                                  	;jmp	SYS_RET_ERR
 37189                                  CommitErrorj2:
 37190 00006704 EBAA                    	jmp	short CommitErrorj
 37191                                  
 37192                                  invalid_func:
 37193                                  	;mov	al,1
 37194 00006706 B001                    	MOV	AL,error_invalid_function
 37195                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37196                                  	;jmp	SYS_RET_ERR
 37197                                  CommitErrorj3:
 37198                                  	;jmp	short CommitErrorj2
 37199                                  	; 17/12/2022
 37200 00006708 EBA6                    	jmp	short CommitErrorj
 37201                                  
 37202                                  ; 20/05/2019 - Retro DOS v4.0
 37203                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 37204                                  
 37205                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37206                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 37207                                  
 37208                                  ;	BREAK <$READ - Read from a file handle>
 37209                                  ;----------------------------------------------------------------------------
 37210                                  ;
 37211                                  ;**	$Read - Read from a File Handle
 37212                                  ;
 37213                                  ;   Assembler usage:
 37214                                  ;
 37215                                  ;	LDS	DX, buf
 37216                                  ;	MOV	CX, count
 37217                                  ;	MOV	BX, handle
 37218                                  ;	MOV	AH, Read
 37219                                  ;	INT	int_command
 37220                                  ;	  AX has number of bytes read
 37221                                  ;
 37222                                  ;	ENTRY	(bx) = file handle
 37223                                  ;		(cx) = byte count
 37224                                  ;		(ds:dx) = buffer address
 37225                                  ;	EXIT	Through system call return so that to user:
 37226                                  ;		  'C' clear if OK
 37227                                  ;		    (ax) = bytes read
 37228                                  ;		  'C' set if error
 37229                                  ;		    (ax) = error code
 37230                                  ;
 37231                                  ;----------------------------------------------------------------------------
 37232                                  
 37233                                  _$READ:
 37234 0000670A BE[4232]                	MOV	SI,DOS_READ
 37235                                  ReadDo:
 37236 0000670D E831FE                  	call	pJFNFromHandle
 37237 00006710 7208                    	JC	short ReadError
 37238                                  
 37239 00006712 268A05                  	MOV	AL,[ES:DI]
 37240 00006715 E83E01                  	call	CheckOwner		; get the handle
 37241 00006718 7303                    	JNC	short ReadSetup		; no errors do the operation
 37242                                  
 37243                                  ;	Have an error. 'C' set
 37244                                  
 37245                                  ReadError:
 37246                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37247                                  	;;jmp	SYS_RET_ERR		; go to error traps
 37248                                  	;jmp	short CommitErrorj3
 37249                                  	; 17/12/2022
 37250 0000671A E9239F                  	jmp	SYS_RET_ERR
 37251                                  
 37252                                  ReadSetup:
 37253 0000671D 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 37254 00006722 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 37255                                  	; 20/05/2019 - Retro DOS v4.0
 37256                                  	; MSDOS 6.0 
 37257                                  ;; Extended Open
 37258                                  	;test	byte [es:di+3],20h
 37259 00006727 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 37260                                  						 ;AN000;;EO. need i24
 37261 0000672C 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 37262 0000672E 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 37263                                  					;AN000;;EO. set it off;smr;SS Override
 37264                                  needi24:				;AN000;
 37265                                  ;; Extended Open
 37266 00006734 36FF36[2C03]            	push	word [SS:DMAADD]
 37267 00006739 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 37268                                  
 37269                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37270                                  
 37271                                  	; 26/07/2019
 37272                                  
 37273                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37274                                  	;
 37275                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 37276                                  	; there is not another caller; it is better to put the code in this proc
 37277                                   	; here instead of calling it as a subroutine; but I have modified code
 37278                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 37279                                  
 37280                                  	; MSDOS 6.0
 37281 0000673E E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 37282                                  	
 37283                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37284                                  	; MSDOS 3.3
 37285                                  	;MOV	BX,DX			; copy offset
 37286                                  	;push	cx			; don't stomp on count
 37287                                  	;MOV	CL,4			; bits to shift bytes->para
 37288                                  	;SHR	BX,CL			; get number of paragraphs
 37289                                  	;pop	cx			; get count back
 37290                                  	;MOV	AX,DS			; get original segment
 37291                                  	;ADD	AX,BX			; get new segment
 37292                                  	;MOV	DS,AX			; in seg register
 37293                                  	;AND	DX,0Fh			; normalize offset
 37294                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37295                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37296                                  						;smr;SS Override
 37297                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37298                                  	
 37299 00006741 16                      	push	ss			; go for DOS addressability
 37300 00006742 1F                      	pop	ds
 37301                                  
 37302 00006743 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 37303                                  
 37304 00006745 8F06[2E03]              	pop	word [DMAADD+2]
 37305 00006749 8F06[2C03]              	pop	word [DMAADD]
 37306                                  	;JNC	short READ_OK		;AN002;
 37307                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 37308                                  	; 17/12/2022
 37309 0000674D 72CB                    	jc	short ReadError
 37310                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37311                                  	;jnc	short READ_OK		;AN002;
 37312                                  	;jmp	short ReadError
 37313                                  
 37314                                  READ_OK:
 37315 0000674F 89C8                    	MOV	AX,CX			; get correct return in correct reg
 37316                                  Read_Okj:
 37317                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37318                                  	;;jmp	SYS_RET_OK		; successful return
 37319                                  	;jmp	short ok_done_j
 37320                                  	; 17/12/2022
 37321 00006751 E9E39E                  	jmp	SYS_RET_OK
 37322                                  
 37323                                  ; 13/07/2018 - Retro DOS v3.0
 37324                                  
 37325                                  ;----------------------------------------------------------------------------
 37326                                  
 37327                                  ;   Input: DS:DX points to user's buffer addr
 37328                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 37329                                  ;   Output: [DMAADD] set
 37330                                  
 37331                                  ; 20/05/2019 - Retro DOS v4.0
 37332                                  ; 26/07/2019
 37333                                  ;	; MSDOS 6.0
 37334                                  ;Align_Buffer:
 37335                                  ;	MOV	BX,DX			; copy offset
 37336                                  ;	push	cx			; don't stomp on count
 37337                                  ;	MOV	CL,4			; bits to shift bytes->para
 37338                                  ;	SHR	BX,CL			; get number of paragraphs
 37339                                  ;	pop	cx			; get count back
 37340                                  ;	MOV	AX,DS			; get original segment
 37341                                  ;	ADD	AX,BX			; get new segment
 37342                                  ;	MOV	DS,AX			; in seg register
 37343                                  ;	AND	DX,0Fh			; normalize offset
 37344                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37345                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37346                                  ;						;smr;SS Override
 37347                                  ;	retn
 37348                                  
 37349                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37350                                  Align_Buffer:
 37351 00006754 89D3                    	MOV	BX,DX			; copy offset
 37352 00006756 51                      	push	cx			; don't stomp on count
 37353 00006757 B104                    	MOV	CL,4			; bits to shift bytes->para
 37354 00006759 D3EB                    	SHR	BX,CL			; get number of paragraphs
 37355 0000675B 59                      	pop	cx			; get count back
 37356 0000675C 8CD8                    	MOV	AX,DS			; get original segment
 37357 0000675E 01D8                    	ADD	AX,BX			; get new segment
 37358 00006760 8ED8                    	MOV	DS,AX			; in seg register
 37359 00006762 83E20F                  	AND	DX,0Fh			; normalize offset
 37360 00006765 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37361 0000676A 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37362                                  						;smr;SS Override
 37363 0000676F C3                      	retn
 37364                                  
 37365                                  ; 20/05/2019 - Retro DOS v4.0
 37366                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 37367                                  
 37368                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37369                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 37370                                  
 37371                                  ;BREAK <$WRITE - write to a file handle>
 37372                                  ;----------------------------------------------------------------------------
 37373                                  ;
 37374                                  ;   Assembler usage:
 37375                                  ;	    LDS     DX, buf
 37376                                  ;	    MOV     CX, count
 37377                                  ;	    MOV     BX, handle
 37378                                  ;	    MOV     AH, Write
 37379                                  ;	    INT     int_command
 37380                                  ;	  AX has number of bytes written
 37381                                  ;   Errors:
 37382                                  ;	    AX = write_invalid_handle
 37383                                  ;	       = write_access_denied
 37384                                  ;
 37385                                  ;   Returns in register AX
 37386                                  ;
 37387                                  ;----------------------------------------------------------------------------
 37388                                  
 37389                                  _$WRITE:
 37390 00006770 BE[4234]                	MOV	SI,DOS_WRITE
 37391 00006773 EB98                    	JMP	short ReadDo
 37392                                  
 37393                                  ;BREAK <$LSEEK - move r/w pointer>
 37394                                  ;----------------------------------------------------------------------------
 37395                                  ;
 37396                                  ;   Assembler usage:
 37397                                  ;	    MOV     DX, offsetlow
 37398                                  ;	    MOV     CX, offsethigh
 37399                                  ;	    MOV     BX, handle
 37400                                  ;	    MOV     AL, method
 37401                                  ;	    MOV     AH, LSeek
 37402                                  ;	    INT     int_command
 37403                                  ;	  DX:AX has the new location of the pointer
 37404                                  ;   Error returns:
 37405                                  ;	    AX = error_invalid_handle
 37406                                  ;	       = error_invalid_function
 37407                                  ;   Returns in registers DX:AX
 37408                                  ;
 37409                                  ;----------------------------------------------------------------------------
 37410                                  
 37411                                  ; 21/05/2019 - Retro DOS v4.0
 37412                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37413                                  
 37414                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37415                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37416                                  
 37417                                  _$LSEEK:
 37418 00006775 E8DE00                  	call	CheckOwner		; get system file entry
 37419                                  
 37420                                  	; 17/12/2022
 37421                                  ;LSeekError:
 37422                                  	;JNC	short CHKOWN_OK		;AN002;
 37423                                  	;JMP	short ReadError		;AN002; error return
 37424                                  	; 17/12/2022
 37425                                  	; 02/06/2019
 37426 00006778 72A0                    	jc	short ReadError
 37427                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37428                                  	;JNC	short CHKOWN_OK		;AN002;
 37429                                  	;JMP	short ReadError		;AN002; error return
 37430                                  
 37431                                  CHKOWN_OK:
 37432                                  					;AN002;
 37433 0000677A 3C02                    	CMP	AL,2			; is the seek value correct?
 37434 0000677C 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37435                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37436 0000677E 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37437                                  					;smr;SS Override
 37438                                  	;mov	al,1
 37439 00006784 B001                    	mov	al,error_invalid_function ; invalid method
 37440                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37441                                  LSeekError2:
 37442 00006786 EB92                    	jmp	short ReadError
 37443                                  
 37444                                  LSeekDisp:
 37445 00006788 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37446 0000678A 720A                    	JB	short LSeekStore	; just store CX:DX
 37447 0000678C 771B                    	JA	short LSeekEOF		; seek from end of file
 37448                                  	;add	dx,[es:di+21]
 37449 0000678E 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37450                                  	;adc	cx,[es:di+23]
 37451 00006792 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37452                                  LSeekStore:
 37453 00006796 89C8                    	MOV	AX,CX			; AX:DX
 37454 00006798 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37455                                  LSeekSetpos:
 37456                                  	;mov	[es:di+21],ax
 37457 00006799 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37458                                  	;mov	[es:di+23],dx
 37459 0000679D 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37460 000067A1 E8DD9C                  	call	Get_User_Stack
 37461                                  	;mov	[si+6],dx
 37462 000067A4 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37463                                  	;jmp	SYS_RET_OK		; successful return
 37464                                  	; 25/06/2019
 37465                                  	;jmp	SYS_RET_OK_clc
 37466                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37467                                  	;jmp	SYS_RET_OK_clc
 37468                                  LSeekOk:
 37469 000067A7 EBA8                    	jmp     short Read_Okj
 37470                                  
 37471                                  LSeekEOF:
 37472                                  	;;test	word [es:di+5],8000h
 37473                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37474                                  	; 21/05/2019 - Retro DOS v4.0
 37475 000067A9 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37476 000067AE 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37477                                  LOCAL_LSeek:
 37478                                  	;add	dx,[es:di+17]
 37479 000067B0 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37480                                  	;adc	cx,[es:di+19]
 37481 000067B4 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37482 000067B8 EBDC                    	JMP	short LSeekStore	; go and set the position
 37483                                  
 37484                                  Check_LSeek_Mode:
 37485                                  	;;test	word [es:di+2],8000h
 37486                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37487                                  	; 21/05/2019
 37488 000067BA 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37489 000067BF 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37490                                  	;mov	ax,[es:di+2]
 37491 000067C1 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37492                                  	;and	ax, 0F0h
 37493 000067C5 25F000                  	AND	AX,SHARING_MASK
 37494                                  	;cmp	ax,40h
 37495 000067C8 83F840                  	CMP	AX,SHARING_DENY_NONE
 37496 000067CB 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37497                                  	;cmp	ax,30h
 37498 000067CD 83F830                  	CMP	AX,SHARING_DENY_READ
 37499 000067D0 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37500                                  NET_LSEEK:
 37501                                  ;	JMP	short LOCAL_LSeek
 37502                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37503                                  	;CallInstall Net_Lseek,MultNET,33
 37504                                  	;JNC	short LSeekSetPos
 37505                                  
 37506 000067D2 B82111                  	mov     ax,1121h
 37507 000067D5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37508                                  			; CX:DX = offset (in bytes) from end
 37509                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37510                                  			; SS = DOS CS
 37511                                  			; Return: CF set on error
 37512                                  			; CF clear if successful, DX:AX = new file position
 37513 000067D7 73C0                    	jnb     short LSeekSetpos
 37514                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37515                                  	;jmp	SYS_RET_ERR
 37516                                  ;LSeekError3:
 37517                                  	; 17/12/2022
 37518                                  LSeekError:
 37519                                  	;jmp	short LSeekError2
 37520                                  DupErr:	; 17/12/2022
 37521 000067D9 E9649E                  	jmp	SYS_RET_ERR
 37522                                  
 37523                                  ;BREAK <FileTimes - modify write times on a handle>
 37524                                  ;----------------------------------------------------------------------------
 37525                                  ;
 37526                                  ;   Assembler usage:
 37527                                  ;	    MOV AH, FileTimes (57H)
 37528                                  ;	    MOV AL, func
 37529                                  ;	    MOV BX, handle
 37530                                  ;	; if AL = 1 then then next two are mandatory
 37531                                  ;	    MOV CX, time
 37532                                  ;	    MOV DX, date
 37533                                  ;	    INT 21h
 37534                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37535                                  ;	; for the handle.
 37536                                  ;
 37537                                  ;	AL=02		 get extended attributes
 37538                                  ;	   BX=handle
 37539                                  ;	   CX=size of buffer (0, return max size )
 37540                                  ;	   DS:SI query list (si=-1, selects all EA)
 37541                                  ;	   ES:DI buffer to hold EA list
 37542                                  ;
 37543                                  ;	AL=03		 get EA name list
 37544                                  ;	   BX=handle
 37545                                  ;	   CX=size of buffer (0, return max size )
 37546                                  ;	   ES:DI buffer to hold name list
 37547                                  ;
 37548                                  ;	AL=04		 set extended attributes
 37549                                  ;	   BX=handle
 37550                                  ;	   ES:DI buffer of EA list
 37551                                  ;
 37552                                  ;
 37553                                  ;   Error returns:
 37554                                  ;	    AX = error_invalid_function
 37555                                  ;	       = error_invalid_handle
 37556                                  ;
 37557                                  ;----------------------------------------------------------------------------
 37558                                  
 37559                                  ; 21/05/2019 - Retro DOS v4.0
 37560                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37561                                  
 37562                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37563                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37564                                  
 37565                                  _$FILE_TIMES:
 37566                                  	; 13/07/2018 - Retro DOS v3.0
 37567                                  
 37568                                  	; MSDOS 3.3
 37569                                  	;cmp	al,2			; correct subfunction ?
 37570                                  	;jb	short ft1
 37571                                  
 37572                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37573                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37574                                  						;SS Overr
 37575                                  	;;mov	al,1
 37576                                  	;mov	al,error_invalid_function ; give bad return
 37577                                  	;jmp	SYS_RET_ERR
 37578                                  
 37579                                  	; MSDOS 6.0
 37580 000067DC 3C02                    	cmp	al,2			; correct subfunction ?
 37581 000067DE 7340                    	jae	short inval_func
 37582                                  ;ft1:
 37583 000067E0 E87300                  	call	CheckOwner		; get sft
 37584                                  	; 17/12/2022
 37585 000067E3 72F4                    	jc	short LSeekError	; bad handle
 37586                                  
 37587 000067E5 08C0                    	or	al,al			; get time/date ?
 37588 000067E7 7515                    	jnz	short ft_set_time
 37589                                  
 37590                                  ;------ here we get the time & date from the sft for the user
 37591                                  
 37592 000067E9 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37593                                  	;mov	cx,[es:di+13]
 37594 000067EA 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37595                                  	;mov	dx,[es:di+15]
 37596 000067EE 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37597 000067F2 FB                      	sti
 37598 000067F3 E88B9C                  	call	Get_User_Stack
 37599                                  	;mov	[si+4],cx
 37600 000067F6 894C04                  	mov	[si+user_env.user_CX],cx
 37601                                  	;mov	[si+6],dx
 37602 000067F9 895406                  	mov	[si+user_env.user_DX],dx
 37603 000067FC EB1F                    	jmp	short ok_ret
 37604                                  
 37605                                  ;------ here we set the time in sft
 37606                                  
 37607                                  ft_set_time:
 37608 000067FE E8F2AA                  	call    ECritSFT
 37609                                  	;mov	[es:di+13],cx
 37610 00006801 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37611                                  	;mov	[es:di+15],dx
 37612 00006805 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37613                                  
 37614 00006809 31C0                    	xor	ax, ax
 37615 0000680B 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37616                                  
 37617                                  ;------ set the flags in SFT entry
 37618                                  	;and	word [es:di+5],0FFBFh
 37619                                  	; 18/12/2022
 37620                                  	;and	byte [es:di+5],0BFh
 37621 00006810 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37622                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37623                                  							; mark file as dirty
 37624                                  	;or	word [es:di+5],4000h
 37625                                  	; 17/12/2022
 37626                                  	;or	byte [es:di+6],40h
 37627 00006815 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37628                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37629                                  							; ask close not to
 37630                                  							;   bother about date
 37631                                  							;   and time
 37632 0000681A E8F1AA                  	call	LCritSFT
 37633                                  ok_ret:
 37634                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37635                                  	; 17/12/2022
 37636 0000681D E9179E                  	jmp	SYS_RET_OK
 37637                                  	;jmp	short LSeekOk
 37638                                  
 37639                                  inval_func:
 37640                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37641 00006820 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37642                                  						;SS Overr
 37643                                  	;mov	al,1
 37644 00006826 B001                    	mov	al,error_invalid_function ; give bad return
 37645                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37646                                  ft_error:
 37647                                  	;;jmp	SYS_RET_ERR
 37648                                  	;jmp	short LSeekError3
 37649                                  	; 17/12/2022
 37650 00006828 EBAF                    	jmp	short LSeekError
 37651                                  
 37652                                  ; 21/05/2019 - Retro DOS v4.0
 37653                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37654                                  
 37655                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37656                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37657                                  
 37658                                  ;BREAK <$DUP - duplicate a jfn>
 37659                                  ;----------------------------------------------------------------------------
 37660                                  ;
 37661                                  ;   Assembler usage:
 37662                                  ;	    MOV     BX, fh
 37663                                  ;	    MOV     AH, Dup
 37664                                  ;	    INT     int_command
 37665                                  ;	  AX has the returned handle
 37666                                  ;   Errors:
 37667                                  ;	    AX = dup_invalid_handle
 37668                                  ;	       = dup_too_many_open_files
 37669                                  ;
 37670                                  ;----------------------------------------------------------------------------
 37671                                  
 37672                                  _$DUP:
 37673 0000682A 89D8                    	MOV	AX,BX			; save away old handle in AX
 37674 0000682C E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37675                                  DupErrorCheck:
 37676 0000682F 72A8                    	JC	short DupErr		; nope, bye
 37677 00006831 06                      	push	es
 37678 00006832 57                      	push	di			; save away SFT
 37679 00006833 5E                      	pop	si			; into convenient place DS:SI
 37680 00006834 1F                      	pop	ds
 37681 00006835 93                      	XCHG	AX,BX			; get back old handle
 37682 00006836 E81D00                  	call	CheckOwner		; get sft in ES:DI
 37683 00006839 729E                    	JC	short DupErr		; errors go home
 37684 0000683B E888C1                  	call	DOS_Dup_Direct
 37685 0000683E E800FD                  	call	pJFNFromHandle		; get pointer
 37686 00006841 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37687 00006844 881C                    	MOV	[SI],BL			; stuff in new SFT
 37688                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37689                                  	;jmp	SYS_RET_OK		; and go home
 37690 00006846 EBD5                    	jmp	short ok_ret
 37691                                  
 37692                                  	; 17/12/2022
 37693                                  ;DupErr:
 37694                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37695                                  	;;jmp	SYS_RET_ERR
 37696                                  	;jmp	short ft_error
 37697                                  
 37698                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37699                                  ;----------------------------------------------------------------------------
 37700                                  ;
 37701                                  ;   Assembler usage:
 37702                                  ;	    MOV     BX, fh
 37703                                  ;	    MOV     CX, newfh
 37704                                  ;	    MOV     AH, Dup2
 37705                                  ;	    INT     int_command
 37706                                  ;   Error returns:
 37707                                  ;	    AX = error_invalid_handle
 37708                                  ;
 37709                                  ;----------------------------------------------------------------------------
 37710                                  
 37711                                  _$DUP2:
 37712 00006848 53                      	push	bx
 37713 00006849 51                      	push	cx			; save source
 37714 0000684A 89CB                    	MOV	BX,CX			; get one to close
 37715 0000684C E8AAFD                  	call	_$CLOSE			; close destination handle
 37716 0000684F 5B                      	pop	bx
 37717 00006850 58                      	pop	ax			; old in AX, new in BX
 37718 00006851 E8EDFC                  	call	pJFNFromHandle		; get pointer
 37719 00006854 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37720                                  
 37721                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37722                                  ;----------------------------------------------------------------------------
 37723                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37724                                  ;   process without the process knowing it (delete/rename of open files, for
 37725                                  ;   example), it is possible for the redirector to issue a call to a handle
 37726                                  ;   that it soes not rightfully own. We check here to make sure that the
 37727                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37728                                  ;   SFFromHandle to really make sure that the SFT is good.
 37729                                  ;
 37730                                  ;	ENTRY	BX has the handle
 37731                                  ;		User_ID is the current user
 37732                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37733                                  ;		Carry Set => AX has error code
 37734                                  ;	USES	none
 37735                                  ;----------------------------------------------------------------------------
 37736                                  
 37737                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37738                                  	; 21/05/2019 - Retro DOS v4.0
 37739                                  CheckOwner:
 37740                                  	; 13/07/2018 - Retro DOS v3.0
 37741                                  
 37742 00006856 E805FD                  	call	SFFromHandle
 37743 00006859 721B                    	jc	short co_ret_label	; retc
 37744                                  
 37745 0000685B 50                      	push	ax
 37746                                  
 37747                                  	; MSDOS 6.0
 37748                                  
 37749                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 37750                                  ;SR; are shared across multiple VMs in win386.
 37751                                  
 37752 0000685C 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37753 00006862 7404                    	jz	short no_win386		;win386 is not present
 37754 00006864 31C0                    	xor	ax,ax			;set the zero flag
 37755 00006866 EB08                    	jmp	short _skip_win386	
 37756                                  
 37757                                  no_win386:
 37758 00006868 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37759                                  	;cmp	ax,[es:di+47]
 37760 0000686C 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37761                                  
 37762                                  _skip_win386:
 37763 00006870 58                      	pop	ax
 37764                                  	
 37765                                  	; 17/12/2022
 37766 00006871 7403                    	jz	short co_ret_label
 37767                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37768                                  	;jnz	short CheckOwner_err
 37769                                  	;retn
 37770                                  	
 37771                                  CheckOwner_err:
 37772                                  	;mov	al,6
 37773 00006873 B006                    	mov	al,error_invalid_handle
 37774 00006875 F9                      	stc
 37775                                  
 37776                                  co_ret_label:
 37777 00006876 C3                      	retn
 37778                                  
 37779                                  ;============================================================================
 37780                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37781                                  ;============================================================================
 37782                                  ; Retro	DOS v3.0 - 11/07/2018
 37783                                  ; 21/05/2019 - Retro DOS v4.0
 37784                                  
 37785                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37786                                  ;	NAME	MACRO
 37787                                  
 37788                                  ;	Microsoft Confidential
 37789                                  ;	Copyright (C) Microsoft Corporation 1991
 37790                                  ;	All Rights Reserved.
 37791                                  
 37792                                  ;**	MACRO.ASM
 37793                                  ;
 37794                                  ;	$AssignOper
 37795                                  ;	FIND_DPB
 37796                                  ;	InitCDS
 37797                                  ;	$UserOper
 37798                                  ;	GetVisDrv
 37799                                  ;	GetThisDrv
 37800                                  ;	GetCDSFromDrv
 37801                                  ;
 37802                                  ;   Revision history:
 37803                                  ;
 37804                                  ;	Created: MZ 4 April 1983
 37805                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37806                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37807                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37808                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37809                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37810                                  ;				    aliasing.
 37811                                  ;
 37812                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37813                                  ;   each valid drive letter the text of the current directory on that drive.
 37814                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37815                                  ;   be at the root. A current directory is either the raw local directory
 37816                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37817                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37818                                  ;
 37819                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37820                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37821                                  ;   this and all * are expanded into ?'s.
 37822                                  ;
 37823                                  ;   The second part of name translation involves subtree aliasing. A list of
 37824                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37825                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37826                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37827                                  ;   replaced with the other subtree in the pair.
 37828                                  ;
 37829                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37830                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37831                                  ;   The output of the previous translation is examined to see if any of the
 37832                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37833                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37834                                  ;   'mount' one device under another.
 37835                                  ;
 37836                                  ;   The final form of name translation involves the mapping of a user's
 37837                                  ;   logical drive number into the internal physical drive. This is
 37838                                  ;   accomplished by converting the drive number into letter:CON, performing
 37839                                  ;   the above translation and then converting the character back into a drive
 37840                                  ;   number.
 37841                                  ;
 37842                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37843                                  ;   take a path and form the real text of the pathname with all . and ..
 37844                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 37845                                  ;   TransPath.
 37846                                  ;
 37847                                  ;	A000	version 4.00  Jan. 1988
 37848                                  
 37849                                  ;Installed = TRUE
 37850                                  
 37851                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 37852                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 37853                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 37854                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 37855                                  ;					; current drive)
 37856                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 37857                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 37858                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 37859                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 37860                                  ;	I_need	MYNAME,16		; machine name
 37861                                  ;	I_need	MYNUM,WORD		; machine number
 37862                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 37863                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 37864                                  ;	I_need	DrvErr,BYTE		; drive error
 37865                                  
 37866                                  ;BREAK <$AssignOper -- Set up a Macro>
 37867                                  ;----------------------------------------------------------------------------
 37868                                  ; Inputs:
 37869                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37870                                  ;	AL = 01 set assign mode 		    (SetMode)
 37871                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37872                                  ;	AL = 03 Define Macro (attch start)
 37873                                  ;	    BL = Macro type
 37874                                  ;	       = 0 alias
 37875                                  ;	       = 1 file/device
 37876                                  ;	       = 2 drive
 37877                                  ;	       = 3 Char device -> network
 37878                                  ;	       = 4 File device -> network
 37879                                  ;	    DS:SI -> ASCIZ source name
 37880                                  ;	    ES:DI -> ASCIZ destination name
 37881                                  ;	AL = 04 Cancel Macro
 37882                                  ;	    DS:SI -> ASCIZ source name
 37883                                  ;	AL = 05 Modified get attach list entry
 37884                                  ;	AL = 06 Get ifsfunc item
 37885                                  ;	AL = 07 set in_use of a drive's CDS
 37886                                  ;	     DL = drive number, 0=default  0=A,,
 37887                                  ;	AL = 08 reset in_use of a drive's CDS
 37888                                  ;	     DL = drive number, 0=A, 1=B,,,
 37889                                  ; Function:
 37890                                  ;	Do macro stuff
 37891                                  ; Returns:
 37892                                  ;	Std Xenix style error return
 37893                                  ;----------------------------------------------------------------------------
 37894                                  
 37895                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37896                                  	; 21/05/2019 - Retro DOS v4.0
 37897                                  _$AssignOper:
 37898                                  	; MSDOS 6.0
 37899 00006877 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37900 00006879 7525                    	JNZ	short chk08		      ; no			;AN000;
 37901                                  srinuse:								;AN000;
 37902 0000687B 50                      	PUSH	AX			      ; save al 		;AN000;
 37903 0000687C 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37904 0000687E E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37905 00006881 58                      	POP	AX			      ; 			;AN000;
 37906 00006882 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37907                                  	;cmp	word [si+45h],0
 37908 00006884 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37909 00006888 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37910 0000688A 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37911 0000688C 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37912                                  	;or	word [si+43h],4000h
 37913                                  	; 17/12/2022
 37914                                  	;or	byte [si+44h],40h
 37915 0000688E 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37916                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37917 00006892 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37918                                  resetdrv:
 37919                                  	;and	word [si+43h],0BFFFh									;AN000;
 37920                                  	; 18/12/2022
 37921 00006894 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37922                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37923 00006898 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37924                                  
 37925                                  	; 17/12/2022
 37926                                  baddrv: 								;AN000;
 37927 0000689A B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 37928                                  
 37929                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37930                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 37931                                  	; 17/12/2022
 37932                                  	; 21/05/2019
 37933                                  ASS_ERR:
 37934 0000689D E9A09D                  	jmp	SYS_RET_ERR
 37935                                  
 37936                                  chk08:									;AN000;
 37937 000068A0 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 37938 000068A2 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 37939                                  
 37940                                    ;IF	NOT INSTALLED
 37941                                  	;transfer NET_ASSOPER
 37942                                    ;ELSE
 37943                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37944 000068A4 50                      	PUSH	AX
 37945                                  	;mov	ax,111Eh
 37946                                  	;MOV	AX,(MultNET SHL 8) OR 30
 37947 000068A5 B81E11                  	mov	ax,(MultNET*256)+30
 37948 000068A8 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 37949                                  			; SS = DOS CS
 37950                                  			; STACK: WORD function to execute
 37951                                  			; Return: CF set on error, AX = error code
 37952                                  			; STACK unchanged
 37953 000068AA 5B                      	POP	BX			; Don't zap error code in AX
 37954 000068AB 72F0                    	JC	short ASS_ERR
 37955                                  okdone:
 37956 000068AD E9879D                  	jmp	SYS_RET_OK
 37957                                  
 37958                                  	; 17/12/2022
 37959                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37960                                  ;ASS_ERR:
 37961                                  	;jmp	SYS_RET_ERR
 37962                                  
 37963                                    ;ENDIF
 37964                                  
 37965                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37966                                  ;----------------------------------------------------------------------------
 37967                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37968                                  ;
 37969                                  ;	ENTRY	AL has drive number A = 0
 37970                                  ;	EXIT	'C' set
 37971                                  ;		    No DPB for this drive number
 37972                                  ;		'C' clear
 37973                                  ;		    DS:SI points to DPB for drive
 37974                                  ;	USES	SI, DS, Flags
 37975                                  ;----------------------------------------------------------------------------
 37976                                  
 37977                                  	; 21/05/2019 - Retro DOS v4.0
 37978                                  FIND_DPB:
 37979 000068B0 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37980                                  fdpb5:	
 37981 000068B5 83FEFF                  	CMP	SI,-1
 37982 000068B8 7409                    	JZ	short fdpb10
 37983 000068BA 3A04                    	cmp	al,[si]
 37984                                  	;CMP	AL,[SI+DPB.DRIVE]
 37985 000068BC 7406                    	jz	short ret_label15	; Carry clear (retz)
 37986                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37987                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37988 000068BE C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37989 000068C1 EBF2                    	JMP	short fdpb5
 37990                                  fdpb10:	
 37991 000068C3 F9                      	STC
 37992                                  ret_label15:
 37993 000068C4 C3                      	retn
 37994                                  
 37995                                  ;	Break <InitCDS - set up an empty CDS>
 37996                                  ;----------------------------------------------------------------------------
 37997                                  ;**	InitCDS - Setup an Empty CDS
 37998                                  ;
 37999                                  ;	ENTRY	ThisCDS points to CDS
 38000                                  ;		AL has uppercase drive letter
 38001                                  ;	EXIT	ThisCDS is now empty
 38002                                  ;		(ES:DI) = CDS
 38003                                  ;		'C' set if no DPB associated with drive
 38004                                  ;	USES	AH,ES,DI, Flags
 38005                                  ;----------------------------------------------------------------------------
 38006                                  
 38007                                  ; 21/05/2019 - Retro DOS v4.0
 38008                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 38009                                  
 38010                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38011                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 38012                                  
 38013                                  InitCDS:
 38014                                  	; 19/08/2018
 38015                                  	; 05/08/2018 - Retro DOS v3.0
 38016                                  	; MSDOS 6.0
 38017 000068C5 50                      	push	ax			; save (AL) for caller
 38018 000068C6 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 38019                                  	;mov	word [es:di+67],0
 38020 000068CB 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 38021 000068D1 2C40                    	SUB	AL,"A"-1                ; A = 1
 38022 000068D3 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 38023 000068D8 7236                    	JC	short icdsx		; Drive does not map a physical drive
 38024 000068DA 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 38025 000068DB 50                      	PUSH	AX			; save drive number for later
 38026 000068DC 0441                    	add	al,"A"
 38027 000068DE B43A                    	MOV	AH,':'
 38028 000068E0 268905                  	mov	[ES:DI],ax
 38029                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 38030                                  	;mov	ax,"\"
 38031                                  	;mov	[es:di+2],ax
 38032                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 38033 000068E3 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 38034                                  	;or	word [es:di+67],4000h
 38035                                  	;or	byte [es:di+68],40h
 38036 000068E9 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38037 000068EE 29C0                    	sub	ax,ax
 38038                                  	;MOV	[es:di+73],ax ; 0
 38039 000068F0 26894549                	MOV	[ES:DI+curdir.ID],ax
 38040                                  	;mov	[es:di+75],ax ; 0
 38041 000068F4 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 38042 000068F8 B002                    	mov	al,2
 38043                                  	;mov	[es:di+79],aX ; 2
 38044 000068FA 2689454F                	MOV	[ES:DI+curdir.end],ax
 38045 000068FE 58                      	POP	AX			; (al) = drive number
 38046 000068FF 1E                      	push	ds
 38047 00006900 56                      	push	si
 38048 00006901 E8ACFF                  	call	FIND_DPB
 38049 00006904 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 38050                                  	;mov	[es:di+69],si
 38051 00006906 26897545                	MOV	[ES:DI+curdir.devptr],SI
 38052                                  	;mov	[es:di+71],ds
 38053 0000690A 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 38054                                  icds5:	
 38055 0000690E 5E                      	pop	si
 38056 0000690F 1F                      	pop	ds
 38057                                  icdsx:	
 38058 00006910 58                      	pop	ax
 38059                                  RET45:
 38060 00006911 C3                      	retn
 38061                                  
 38062                                  ;Break <$UserOper - get/set current user ID (for net)>
 38063                                  ;----------------------------------------------------------------------------
 38064                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 38065                                  ;	maintain this string and do no verifications.
 38066                                  ;
 38067                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 38068                                  ;				      4-printer-set-flags,5-printer-get-flags)
 38069                                  ;		DS:DX is user string pointer (calls 1,2)
 38070                                  ;		ES:DI is user buffer (call 3)
 38071                                  ;		BX is assign index (calls 2,3,4,5)
 38072                                  ;		CX is user number (call 1)
 38073                                  ;		DX is flag word (call 4)
 38074                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 38075                                  ;			and user CX is set to the user number
 38076                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 38077                                  ;		If AL = 5 then DX is flag word
 38078                                  ;----------------------------------------------------------------------------
 38079                                  
 38080                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38081                                  	; 21/05/2019 - Retro DOS v4.0
 38082                                  _$UserOper:
 38083                                  	; 05/08/2018 - Retro DOS v3.0
 38084                                  	; MSDOS 6.0 (& MSDOS 3.3)
 38085 00006912 50                      	PUSH	AX
 38086 00006913 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 38087 00006915 58                      	POP	AX
 38088 00006916 7211                    	JB	short UserGet 		; return to user the string
 38089 00006918 742E                    	JZ	short UserSet 		; set the current user
 38090 0000691A 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 38091 0000691C 763D                    	JBE	short UserPrint		; yep
 38092                                  	;mov	byte [ss:EXTERR_LOCUS],1
 38093 0000691E 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 38094                                  					; Extended Error Locus
 38095                                  	;error	error_invalid_function	; not 0,1,2,3
 38096                                  	;mov	al,1
 38097 00006924 B001                    	MOV	AL,error_invalid_function
 38098                                  useroper_error:
 38099                                  	; 17/12/2022
 38100                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38101 00006926 E9179D                  	JMP	SYS_RET_ERR
 38102                                  	;jmp	short ASS_ERR
 38103                                  
 38104                                  UserGet:
 38105                                  ; Transfer MYNAME to DS:DX
 38106                                  ; Set Return CX to MYNUM
 38107 00006929 1E                      	PUSH	DS			; switch registers
 38108 0000692A 07                      	POP	ES
 38109 0000692B 89D7                    	MOV	DI,DX			; destination
 38110 0000692D 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 38111 00006932 E84C9B                  	call	Get_User_Stack
 38112                                  	;mov	[si+4],cx
 38113 00006935 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 38114 00006938 16                      	push	ss			; point to DOSDATA
 38115 00006939 1F                      	pop	ds
 38116 0000693A BE[0503]                	MOV	SI,MYNAME		; point source to user string
 38117                                  UserMove:
 38118 0000693D B90F00                  	MOV	CX,15
 38119 00006940 F3A4                    	REP	MOVSB			; blam.
 38120 00006942 31C0                    	XOR	AX,AX			; 16th byte is 0
 38121 00006944 AA                      	STOSB
 38122                                  UserBye:
 38123 00006945 E9EF9C                  	jmp	SYS_RET_OK		; no errors here
 38124                                  
 38125                                  UserSet:
 38126                                  ; Transfer DS:DX to MYNAME
 38127                                  ; CX to MYNUM
 38128 00006948 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 38129 0000694D 89D6                    	MOV	SI,DX			; user space has source
 38130 0000694F 16                      	push	ss
 38131 00006950 07                      	pop	es
 38132 00006951 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 38133 00006954 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 38134 00006959 EBE2                    	JMP	short UserMove
 38135                                  
 38136                                  UserPrint:
 38137                                  
 38138                                    ;IF NOT Installed
 38139                                    ;	transfer PRINTER_GETSET_STRING
 38140                                    ;ELSE
 38141 0000695B 50                      	PUSH	AX
 38142                                  	;mov	ax,111Fh
 38143                                  	;MOV	AX,(MultNET SHL 8) OR 31
 38144 0000695C B81F11                  	mov	ax,(MultNET<<8)|31
 38145 0000695F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 38146                                  			; STACK: WORD function
 38147                                  			; Return: CF set on error, AX = error code
 38148                                  			; STACK unchanged
 38149 00006961 5A                      	POP	DX			; Clean stack
 38150                                  	;JNC	short OKPA
 38151 00006962 73E1                    	jnc	short UserBye ; 21/05/2019
 38152                                  	; 17/12/2022
 38153 00006964 EBC0                    	jmp	short useroper_error
 38154                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38155                                  	;jnb     short OKPA
 38156                                  	;jmp     short useroper_error
 38157                                  
 38158                                  	; 17/12/2022
 38159                                  ;OKPA:
 38160                                  ;	jmp	short UserBye
 38161                                  
 38162                                    ;ENDIF
 38163                                  
 38164                                  
 38165                                  ;Break	<GetVisDrv - return visible drive>
 38166                                  ;----------------------------------------------------------------------------
 38167                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 38168                                  ;
 38169                                  ;   Inputs:	AL has drive identifier (0=default)
 38170                                  ;   Outputs:	Carry Set - invalid drive/macro
 38171                                  ;		Carry Clear - AL has physical drive (0=A)
 38172                                  ;		    ThisCDS points to CDS
 38173                                  ;   Registers modified: AL
 38174                                  ;----------------------------------------------------------------------------
 38175                                  
 38176                                  	; 21/05/2019 - Retro DOS v4.0
 38177                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 38178                                  
 38179                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38180                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 38181                                  GetVisDrv:
 38182                                  	; 05/08/2018 - Retro DOS v3.0
 38183                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 38184 00006966 E81900                  	CALL	GETTHISDRV		; get inuse drive
 38185 00006969 72A6                    	jc	short RET45
 38186 0000696B 1E                      	push	ds
 38187 0000696C 56                      	push	si
 38188 0000696D 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 38189                                  	;test	word [si+67],2000h
 38190                                  	; 17/12/2022
 38191                                  	;test	byte [si+68],20h
 38192 00006972 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 38193                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38194 00006976 5E                      	pop	si
 38195 00006977 1F                      	pop	ds
 38196 00006978 7497                    	jz	short RET45		; if not spliced, return OK
 38197                                  	; MSDOS 6.0
 38198                                  	;mov	byte [ss:DrvErr],0Fh
 38199 0000697A 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 38200 00006980 F9                      	STC				; signal error
 38201 00006981 C3                      	retn
 38202                                  
 38203                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 38204                                  ;----------------------------------------------------------------------------
 38205                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 38206                                  ;	macro pointer
 38207                                  ;
 38208                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 38209                                  ;   Outputs:
 38210                                  ;		Carry Set - invalid drive/macro
 38211                                  ;		Carry Clear - AL has physical drive (0=A)
 38212                                  ;		   ThisCDS points to macro
 38213                                  ;   Registers modified: AL
 38214                                  ;----------------------------------------------------------------------------
 38215                                  
 38216                                  	; 21/05/2019 - Retro DOS v4.0
 38217                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 38218                                  
 38219                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38220                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 38221                                  GETTHISDRV:
 38222                                  	; 05/08/2018
 38223                                  	; 12/07/2018 - Retro DOS v3.0
 38224                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 38225                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38226 00006982 08C0                    	OR	AL,AL			; are we using default drive?
 38227 00006984 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 38228 00006986 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 38229                                  	;INC	ax			; Counteract next instruction
 38230                                  	; 04/09/2018
 38231                                  	;inc	al
 38232                                  	; 07/12/2022
 38233 0000698A 40                      	inc	ax
 38234                                  GTD10:	
 38235                                  	;DEC	AX
 38236                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38237 0000698B 48                      	dec	ax			; 0 = A
 38238                                  	;dec	al
 38239 0000698C 1E                      	PUSH	DS			; save world
 38240 0000698D 56                      	PUSH	SI
 38241                                  	;mov	byte [ss:EXTERR_LOCUS],2
 38242 0000698E 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 38243 00006994 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 38244 0000699A 7420                    	JZ	SHORT GTD20		; Logical
 38245 0000699C 50                      	PUSH	AX
 38246 0000699D 06                      	PUSH	ES
 38247 0000699E 57                      	PUSH	DI
 38248 0000699F 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 38249                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 38250 000069A6 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 38251 000069AB 0441                    	ADD	AL,'A'
 38252 000069AD E815FF                  	CALL	InitCDS			; InitCDS(c);
 38253                                  	;test	word [es:di+67],4000h
 38254                                  	; 17/12/2022
 38255                                  	;test	byte [es:di+68],40h
 38256 000069B0 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38257                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 38258 000069B5 5F                      	POP	DI
 38259 000069B6 07                      	POP	ES
 38260 000069B7 58                      	POP	AX
 38261 000069B8 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 38262 000069BA EB18                    	JMP	SHORT GTDX		; carry clear
 38263                                  GTD20:
 38264 000069BC E81800                  	CALL	GetCDSFromDrv
 38265 000069BF 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 38266                                  	;test	word [si+43h],4000h
 38267                                  	; 17/12/2022
 38268                                  	;test	byte [si+44h],40h
 38269 000069C1 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38270                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 38271 000069C5 750D                    	JNZ	SHORT GTDX		; carry clear
 38272                                  GTD30:	
 38273                                  	; 21/05/2019
 38274                                  	; MSDOS 6.0
 38275 000069C7 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 38276 000069C9 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 38277                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 38278 000069CD 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 38279 000069D3 F9                      	STC
 38280                                  GTDX:	
 38281 000069D4 5E                      	POP	SI			; restore world
 38282 000069D5 1F                      	POP	DS
 38283 000069D6 C3                      	RETN
 38284                                   
 38285                                  
 38286                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 38287                                  ;----------------------------------------------------------------------------
 38288                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 38289                                  ;	pointer, returning an error if the drive number is greater than the
 38290                                  ;	number of CDS's
 38291                                  ;
 38292                                  ;   Inputs:	AL is physical unit # A=0...
 38293                                  ;   Outputs:	Carry Set if Bad Drive
 38294                                  ;		Carry Clear
 38295                                  ;		    DS:SI -> CDS
 38296                                  ;		    [THISCDS] = DS:SI
 38297                                  ;   Registers modified: DS,SI
 38298                                  ;----------------------------------------------------------------------------
 38299                                  
 38300                                  	; 21/05/2019 - Retro DOS v4.0
 38301                                  GetCDSFromDrv:
 38302 000069D7 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 38303                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 38304                                  	;STC				; signal error
 38305                                  	;RETN				; bye
 38306                                  	; 23/09/2023
 38307 000069DC F5                      	cmc	; cf=1 <-> cf=0
 38308 000069DD 7217                    	jc	short GetCDS_retn
 38309                                  GetCDS:
 38310                                  	; 23/09/2023
 38311                                  	;PUSH	BX
 38312 000069DF 50                      	PUSH	AX
 38313 000069E0 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 38314                                  	;mov	bl,81 ; MSDOS 3.3
 38315                                  	;mov	bl,88 ; MSDOS 6.0 
 38316                                  	; 23/09/2023
 38317                                  	;MOV	BL,curdir.size		; size in convenient spot
 38318                                  	;MUL	BL			; get net offset
 38319 000069E5 B458                    	mov	ah,curdir.size
 38320 000069E7 F6E4                    	mul	ah
 38321 000069E9 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 38322 000069EB 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 38323 000069F0 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 38324 000069F5 58                      	POP	AX
 38325                                  	; 23/09/2023
 38326                                  	;POP	BX
 38327                                  	; (cf must be 0 here) ; *
 38328                                  	;CLC				; no error
 38329                                  GetCDS_retn:
 38330 000069F6 C3                      	RETN				; bye!
 38331                                  
 38332                                  ;============================================================================
 38333                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 38334                                  ;============================================================================
 38335                                  ; Retro	DOS v3.0 - 12/07/2018
 38336                                  ; 22/05/2019 - Retro DOS v4.0
 38337                                  
 38338                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 38339                                  ;----------------------------------------------------------------------------
 38340                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 38341                                  ;       gritty substitution.
 38342                                  ;
 38343                                  ;   Inputs:     DS:DX - pointer to FCB
 38344                                  ;               ES:DI - point to destination
 38345                                  ;   Outputs:    Carry Set - invalid path in final map
 38346                                  ;               Carry Clear - FCB has been mapped into ES:DI
 38347                                  ;                   Sattrib is set from possibly extended FCB
 38348                                  ;                   ExtFCB set if extended FCB found
 38349                                  ;   Registers modified: most
 38350                                  ;----------------------------------------------------------------------------
 38351                                  
 38352                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38353                                  TransFCB:
 38354                                  	; 22/05/2019 - Retro DOS v4.0
 38355                                  	; 12/07/2018 - Retro DOS v3.0
 38356                                  	;LocalVar FCBTmp,16
 38357                                  	;ENTER
 38358 000069F7 55                      	push	bp
 38359 000069F8 89E5                    	mov	bp,sp
 38360                                  	;sub	sp,15	; MSDOS 3.3
 38361 000069FA 83EC10                  	sub	sp,16	; MSDOS 6.0
 38362 000069FD 16                      	push	ss
 38363 000069FE 07                      	pop	es
 38364 000069FF 06                      	push	es
 38365 00006A00 57                      	push	di
 38366                                  	;lea	di,[bp-15] ; MSDOS 3.3
 38367                                  	;LEA	DI,FCBTmp 
 38368 00006A01 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 38369 00006A04 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 38370 00006A0A 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 38371 00006A10 E827B2                  	call	GetExtended             ; get FCB, extended or not
 38372                                  	; 06/12/2022
 38373 00006A13 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 38374 00006A15 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 38375 00006A18 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 38376 00006A1C 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 38377                                  GetDrive:
 38378 00006A22 AC                      	lodsb				; get drive byte
 38379 00006A23 E85CFF                  	call	GETTHISDRV
 38380 00006A26 722A                    	jc	short BadPack
 38381 00006A28 E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 38382                                  
 38383                                  ; Scan the source to see if there are any illegal chars
 38384                                  
 38385                                  	;mov	bx,CharType		; load lookup table
 38386 00006A2B B90B00                  	mov	cx,11
 38387 00006A2E 56                      	push	si			; back over name, ext
 38388                                  FCBScan:
 38389 00006A2F AC                      	lodsb				; get a byte
 38390                                  	
 38391                                  	; 09/08/2018
 38392                                  	;;xlat	byte [es:bx]
 38393                                  	;es	xlat
 38394                                  
 38395                                  	; 22/05/2019 - Retro DOS v4.0	
 38396 00006A30 E83CE5                  	call	GetCharType		; get flags
 38397                                  
 38398                                  	;test	al,8	
 38399 00006A33 A808                    	test	al,FFCB
 38400 00006A35 741B                    	jz	short BadPack
 38401                                  NextCh: 
 38402 00006A37 E2F6                    	loop	FCBScan
 38403 00006A39 5E                      	pop	si
 38404 00006A3A 89FB                    	mov	bx,di
 38405 00006A3C E837B6                  	call	PackName                ; crunch the path
 38406 00006A3F 5F                      	pop	di			; get original destination
 38407 00006A40 07                      	pop	es
 38408 00006A41 16                      	push	ss			; get DS addressability
 38409 00006A42 1F                      	pop	ds
 38410                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38411                                  	;LEA	SI,FCBTmp		; point at new pathname
 38412 00006A43 8D76F0                  	lea	si,[bp-16]
 38413 00006A46 803F00                  	cmp	byte [bx],0
 38414 00006A49 7407                    	jz	short BadPack
 38415 00006A4B 55                      	push	bp
 38416 00006A4C E80E00                  	call	TransPathSet            ; convert the path
 38417 00006A4F 5D                      	pop	bp
 38418 00006A50 7303                    	jnc	short FCBRet		; bye with transPath error code
 38419                                  BadPack:
 38420 00006A52 F9                      	STC
 38421                                  	;mov	al,3
 38422 00006A53 B003                    	MOV     AL,error_path_not_found
 38423                                  FCBRet: 
 38424                                  	;LEAVE
 38425 00006A55 89EC                    	mov	sp,bp
 38426 00006A57 5D                      	pop	bp
 38427                                  TransPath_retn:
 38428 00006A58 C3                      	retn
 38429                                  
 38430                                  ; 12/07/2018 - Retro DOS v3.0
 38431                                  
 38432                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38433                                  ;----------------------------------------------------------------------------
 38434                                  ;
 38435                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38436                                  ;       substitution, insertion of current directory and fixing . and ..
 38437                                  ;       entries. Perform splicing. Allow input string to match splice
 38438                                  ;       exactly.
 38439                                  ;
 38440                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38441                                  ;       matches splice.
 38442                                  ;
 38443                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38444                                  ;
 38445                                  ;   The following anomalous behaviour is required:
 38446                                  ;
 38447                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38448                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38449                                  ;       Raw net I/O sets ThisCDS => NULL.
 38450                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38451                                  ;
 38452                                  ;   Other behaviour:
 38453                                  ;
 38454                                  ;       ThisCDS set up.
 38455                                  ;       FatRead done on local CDS.
 38456                                  ;       ValidateCDS done on local CDS.
 38457                                  ;
 38458                                  ;   Brief flowchart:
 38459                                  ;
 38460                                  ;       if fSharing then
 38461                                  ;           set up DummyCDS (ThisCDS)
 38462                                  ;           canonicalize (sets cMeta)
 38463                                  ;           splice
 38464                                  ;           fatRead
 38465                                  ;           return
 38466                                  ;       if \\ or d:\\ lead then
 38467                                  ;           set up null CDS (ThisCDS)
 38468                                  ;           canonicalize (sets cMeta)
 38469                                  ;           return
 38470                                  ;       if device then
 38471                                  ;           set up dummyCDS (ThisCDS)
 38472                                  ;           canonicalize (sets cMeta)
 38473                                  ;           return
 38474                                  ;       if file then
 38475                                  ;           getCDS (sets (ThisCDS) from name)
 38476                                  ;           validateCDS (may reset current dir)
 38477                                  ;           Copy current dir
 38478                                  ;           canonicalize (set cMeta)
 38479                                  ;           splice
 38480                                  ;           generate correct CDS (ThisCDS)
 38481                                  ;           if local then
 38482                                  ;               fatread
 38483                                  ;           return
 38484                                  ;
 38485                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38486                                  ;               DI - point to buffer in DOSDATA
 38487                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38488                                  ;                   syntax, etc. or user FAILed to I 24.
 38489                                  ;               WFP_Start - points to beginning of buffer
 38490                                  ;               Curr_Dir_End - points to end of current dir in path
 38491                                  ;               DS - DOSDATA
 38492                                  ;   Registers modified: most
 38493                                  ;
 38494                                  ;----------------------------------------------------------------------------
 38495                                  
 38496                                  ; 22/05/2019
 38497                                  ; 13/05/2019 - Retro DOS v4.0
 38498                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38499                                  
 38500                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38501                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38502                                  
 38503                                  TransPath:
 38504 00006A59 30C0                    	XOR     AL,AL
 38505 00006A5B EB02                    	JMP     SHORT SetSplice
 38506                                  TransPathSet:
 38507 00006A5D B0FF                    	MOV     AL,-1
 38508                                  SetSplice:
 38509 00006A5F 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 38510 00006A63 B0FF                    	MOV     AL,-1
 38511                                  TransPathNoSet:
 38512 00006A65 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 38513 00006A69 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38514 00006A6F 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38515 00006A74 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38516 00006A7B 16                      	push	ss
 38517 00006A7C 07                      	pop	es
 38518                                  	;lea	bp,[di+134]
 38519 00006A7D 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38520                                  ;
 38521                                  ; if this is through the server dos call, fsharing is set. We set up a
 38522                                  ; dummy cds and let the operation go.
 38523                                  ;
 38524 00006A81 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38525 00006A87 7435                    	JZ	short CheckUNC		; skip to UNC check
 38526                                  ;
 38527                                  ; ES:DI point to buffer
 38528                                  ;
 38529 00006A89 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38530 00006A8C E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38531 00006A8F 722A                    	jc	short NoPath
 38532 00006A91 E80A03                  	CALL	TextFromDrive		; drop in new
 38533 00006A94 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38534 00006A97 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38535 00006A9A 72BC                    	jc	short TransPath_retn	; errors
 38536                                  ;
 38537                                  ; Perform splices for net guys.
 38538                                  ;
 38539 00006A9C 16                      	push	ss
 38540 00006A9D 1F                      	pop	ds
 38541 00006A9E 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38542 00006AA2 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38543 00006AA7 7403                    	JZ	short NoServerSplice
 38544 00006AA9 E83102                  	CALL    Splice
 38545                                  NoServerSplice:
 38546 00006AAC 16                      	push	ss
 38547 00006AAD 1F                      	pop	ds                      ; for FATREAD
 38548 00006AAE C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38549 00006AB2 E83EA8                  	call	ECritDisk
 38550 00006AB5 E807EB                  	call	FATREAD_CDS
 38551 00006AB8 E853A8                  	call	LCritDisk
 38552                                  NoPath:
 38553                                  	;mov	al,3
 38554 00006ABB B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38555 00006ABD C3                      	retn				; any errors are in Carry flag
 38556                                  
 38557                                  ; Let the network decide if the name is for a spooled device. It will map
 38558                                  ; the name if so.
 38559                                  
 38560                                  CheckUNC:
 38561 00006ABE 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38562                                  	;CallInstall NetSpoolCheck,MultNET,35
 38563 00006AC5 B82311                  	mov	ax,1123h
 38564 00006AC8 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38565                                  			; DS:SI -> ASCIZ filename to canonicalize
 38566                                  			; ES:DI -> 128-byte buffer for qualified name
 38567                                  			; Return: CF set if not resolved
 38568 00006ACA 7329                    	JNC	short UNCDone
 38569                                  
 38570                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38571                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38572                                  ; input, then the name has been changed to the remote spooler by the above net
 38573                                  ; call. Also, there may be a drive in front of the \\.
 38574                                  
 38575                                  NO_CHECK:
 38576 00006ACC E8B902                  	CALL    DriveFromText		; eat drive letter
 38577 00006ACF 50                      	PUSH    AX                      ; save it
 38578 00006AD0 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38579 00006AD2 E8B7E4                  	call    PATHCHRCMP              ; convert to normal form
 38580 00006AD5 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38581 00006AD7 E8B2E4                  	call    PATHCHRCMP              ; convert to normal form
 38582 00006ADA 751F                    	JNZ	short CheckDevice	; not a path char
 38583 00006ADC 38C4                    	CMP     AH,AL                   ; are they same?
 38584 00006ADE 751B                    	JNZ	short CheckDevice	; nope
 38585                                  
 38586                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38587                                  ; local machine root path
 38588                                  
 38589 00006AE0 58                      	POP     AX
 38590 00006AE1 A5                      	MOVSW                           ; get the lead \\.
 38591                                  UNCCpy:
 38592 00006AE2 AC                      	LODSB                           ; get a byte
 38593 00006AE3 E851E4                   	call	UCase                   ;AN000;; convert the char
 38594 00006AE6 08C0                    	OR      AL,AL
 38595 00006AE8 740E                    	JZ	short UNCTerm		; end of string. All done.
 38596 00006AEA E89FE4                  	call    PATHCHRCMP              ; is it a path char?
 38597 00006AED 89FB                    	MOV     BX,DI                   ; backup position
 38598 00006AEF AA                      	STOSB
 38599 00006AF0 75F0                    	JNZ	short UNCCpy		; no, go copy
 38600 00006AF2 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38601                                  UNCDone:
 38602 00006AF5 16                      	push	ss
 38603 00006AF6 1F                      	pop	ds
 38604 00006AF7 C3                       	retn				; return error code
 38605                                  UNCTerm:
 38606 00006AF8 AA                      	STOSB                           ;AN000;
 38607 00006AF9 EBFA                    	JMP	short UNCDone		;AN000;
 38608                                  
 38609                                  CheckDevice:
 38610                                  
 38611                                  ; Check DS:SI for device. First eat any path stuff
 38612                                  
 38613 00006AFB 58                      	POP     AX                      ; retrieve drive info
 38614 00006AFC 803C00                  	CMP     BYTE [SI],0		; check for null file
 38615 00006AFF 7504                    	JNZ	short CheckPath
 38616                                  	;mov	al,2 
 38617 00006B01 B002                    	MOV     AL,error_file_not_found ; bad file error
 38618 00006B03 F9                      	STC                             ; signal error on null input
 38619 00006B04 C3                      	RETN				; bye!
 38620                                  CheckPath:
 38621 00006B05 50                      	push	ax
 38622 00006B06 55                      	push	bp			; save drive number
 38623                                  
 38624                                  
 38625                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38626                                  %if 0
 38627                                  	; MSDOS 6.0
 38628                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38629                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38630                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38631                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38632                                  ;;;end up having a 5D in the opcode's displacement field. The
 38633                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38634                                  ;;;
 38635                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38636                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38637                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38638                                  ;;;
 38639                                  ;;;More info:
 38640                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38641                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38642                                  ;;;
 38643                                  	call	no5Dshere
 38644                                  start5Dhack:
 38645                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 38646                                  backfrom5Dhack:
 38647                                  
 38648                                  %endif
 38649                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38650                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38651 00006B07 E814D7                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38652                                  
 38653 00006B0A 5D                      	pop	bp
 38654 00006B0B 58                      	pop	ax			; get drive letter back
 38655 00006B0C 731C                    	JNC	short DoFile		; yes we have a file.
 38656                                  
 38657                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38658                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38659                                  ; call.
 38660                                  
 38661 00006B0E 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38662 00006B14 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38663 00006B17 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38664                                  
 38665                                  ; Now that we have noted that we have a device, we put it into a form that
 38666                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38667                                  ; string. We relax this to state that if the d:\ is present then the path
 38668                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38669                                  ; a device.
 38670                                  
 38671 00006B1D E87E02                  	CALL    TextFromDrive
 38672 00006B20 B02F                    	MOV     AL,'/'                  ; path sep.
 38673 00006B22 AA                      	STOSB
 38674 00006B23 E893A6                  	call	StrCpy			; move remainder of string
 38675                                  
 38676 00006B26 F8                      	CLC                             ; everything OK.
 38677 00006B27 16                      	push	ss
 38678 00006B28 1F                      	pop	ds                      ; remainder of OK stuff
 38679                                  DoFile_retn:
 38680 00006B29 C3                      	retn
 38681                                  
 38682                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38683                                  %if 0
 38684                                  
 38685                                  no5Dshere:
 38686                                  	; 10/08/2018
 38687                                  	jmp	CheckThisDevice		; snoop for device
 38688                                  %endif
 38689                                  
 38690                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38691                                  
 38692                                  ; We have a file. Get the raw CDS.
 38693                                  
 38694                                  DoFile:
 38695                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38696                                  
 38697 00006B2A E839FE                  	call	GetVisDrv               ; get proper CDS
 38698                                  	;mov	al,3 
 38699 00006B2D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38700 00006B2F 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38701                                  
 38702                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38703                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38704                                  ; Use the one that we are going to use (ES:DI).
 38705                                  
 38706                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38707 00006B31 1E                      	push	ds
 38708 00006B32 56                      	push	si
 38709 00006B33 06                      	push	es
 38710 00006B34 57                      	push	di
 38711 00006B35 E82FD6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38712                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38713 00006B38 5F                      	pop	di
 38714 00006B39 07                      	pop	es
 38715 00006B3A 5E                      	pop	si
 38716 00006B3B 1F                      	pop	ds
 38717                                  	;mov	al,3
 38718 00006B3C B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38719                                  	;retc				; someone failed an operation
 38720 00006B3E 72E9                    	jc	short DoFile_retn
 38721                                  
 38722                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 38723                                  ; current directory. Copy it in.
 38724                                  
 38725 00006B40 1E                      	push	ds
 38726 00006B41 56                      	push	si
 38727 00006B42 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 38728 00006B47 89FB                    	MOV     BX,DI                   ; point to destination
 38729                                  	;add	bx,[si+79] ; MSDOS 6.0
 38730 00006B49 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 38731                                  	;lea	bp,[di+134]
 38732 00006B4C 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 38733                                  					;AN000;
 38734 00006B50 E875A6                  	call	FStrCpy                 ; copy string. ES:DI point to end
 38735 00006B53 4F                      	DEC     DI                      ; point to NUL byte
 38736                                  
 38737                                  ; Make sure that there is a path char at end.
 38738                                  
 38739 00006B54 B05C                    	MOV     AL,'\'
 38740 00006B56 263845FF                	CMP     [ES:DI-1],AL
 38741 00006B5A 7401                    	JZ	short GetOrig
 38742 00006B5C AA                      	STOSB
 38743                                  
 38744                                  ; Now get original string.
 38745                                  
 38746                                  GetOrig:
 38747 00006B5D 4F                      	DEC     DI                      ; point to path char
 38748 00006B5E 5E                      	pop	si
 38749 00006B5F 1F                      	pop	ds
 38750                                  
 38751                                  ; BX points to the end of the root part of the CDS (at where a path char
 38752                                  ; should be). Now, we decide whether we use this root or extend it with the
 38753                                  ; current directory. See if the input string begins with a leading 
 38755 00006B60 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38756 00006B63 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38757 00006B65 08C0                    	OR      AL,AL                   ; end of string?
 38758 00006B67 7410                    	JZ	short DoCanon		; yes, skip.
 38759                                  ;
 38760                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38761                                  ; to this root. Make sure that there is a path char there and advance the
 38762                                  ; source string over all leading \'s.
 38763                                  ;
 38764 00006B69 89DF                    	MOV     DI,BX                   ; back up to root point.
 38765                                  SkipPath:
 38766 00006B6B AC                      	LODSB
 38767 00006B6C E81DE4                  	call    PATHCHRCMP
 38768 00006B6F 74FA                    	JZ	short SkipPath
 38769 00006B71 4E                      	DEC     SI
 38770 00006B72 08C0                    	OR      AL,AL
 38771 00006B74 7403                    	JZ	short DoCanon
 38772                                  
 38773                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38774                                  ; for yucks.
 38775                                  
 38776                                  PathAssure:
 38777 00006B76 B05C                    	MOV     AL,'\'	; 5Ch
 38778 00006B78 AA                      	STOSB
 38779                                  
 38780                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38781                                  ; BP is the max extent to advance DI
 38782                                  ; BX is the backup limit for ..
 38783                                  
 38784                                  DoCanon:
 38785 00006B79 E85200                  	CALL    Canonicalize            ; wham.
 38786                                  	;retc				; badly formatted path.
 38787 00006B7C 72AB                    	jc	short DoFile_retn
 38788                                  
 38789                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38790                                  ; to wfp_start and do string substitution. BP is still the max position in
 38791                                  ; buffer.
 38792                                  
 38793 00006B7E 16                      	push	ss
 38794 00006B7F 1F                      	pop	ds
 38795 00006B80 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38796 00006B84 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38797 00006B88 E81B02                  	CALL    PathPref                ; is there a prefix?
 38798 00006B8B 7514                    	JNZ	short DoSplice		; no, do splice
 38799                                  
 38800                                  ; We have a match. Check to see if we ended in a path char.
 38801                                  
 38802 00006B8D 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38803 00006B90 E8F9E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38804 00006B93 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38805                                  Pathline:                               ; 2/13/KK
 38806 00006B95 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38807 00006B99 7406                    	JZ	short DoSplice
 38808 00006B9B 47                      	INC     DI                      ; point to after current path char
 38809 00006B9C 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38810                                  
 38811                                  ; Splice the result.
 38812                                  
 38813                                  DoSplice:
 38814 00006BA1 16                      	push	ss
 38815 00006BA2 1F                      	pop	ds			; back to DOSDATA
 38816 00006BA3 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 38817 00006BA7 31C9                    	XOR     CX,CX
 38818 00006BA9 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38819 00006BAE 7403                    	JZ	short SkipSplice
 38820 00006BB0 E82A01                  	CALL    Splice                  ; replaces in place.
 38821                                  SkipSplice:
 38822                                  
 38823                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 38824                                  ; device.
 38825                                  
 38826 00006BB3 16                      	push	ss
 38827 00006BB4 1F                      	pop	ds
 38828 00006BB5 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 38829                                  	;test	word [es:di+67],8000h
 38830                                  	; 17/12/2022
 38831                                  	;test	byte [es:di+68],80h
 38832 00006BB9 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 38833                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 38834 00006BBE 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 38835 00006BC0 E30B                    	JCXZ    Done
 38836 00006BC2 E82EA7                  	call	ECritDisk
 38837 00006BC5 E8F7E9                  	call	FATREAD_CDS
 38838 00006BC8 E843A7                  	call	LCritDisk
 38839                                  	;mov	al, 3
 38840 00006BCB B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38841                                  Done:   
 38842 00006BCD C3                      	retn                         ; any errors in carry flag.
 38843                                  
 38844                                  ; 13/07/2018
 38845                                  
 38846                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 38847                                  ;----------------------------------------------------------------------------
 38848                                  ;   Canonicalize - copy path removing . and .. entries.
 38849                                  ;
 38850                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38851                                  ;               ES:DI - point to buffer
 38852                                  ;               BX - backup limit (offset from ES) points to slash
 38853                                  ;               BP - end of buffer
 38854                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38855                                  ;                   syntax, etc.
 38856                                  ;               Carry Clear -
 38857                                  ;                   DS:DI - advanced to end of string
 38858                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 38859                                  ;   Registers modified: AX CX DX (in addition to those above)
 38860                                  ;----------------------------------------------------------------------------
 38861                                  
 38862                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38863                                  
 38864                                  Canonicalize:
 38865                                  
 38866                                  ; We copy all leading path separators.
 38867                                  
 38868 00006BCE AC                      	LODSB                           ;   while (PathChr (*s))
 38869 00006BCF E8BAE3                  	call    PATHCHRCMP
 38870 00006BD2 7507                    	JNZ	short CanonDec
 38871 00006BD4 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38872 00006BD6 7319                    	JAE	short CanonBad		;           goto error;
 38873 00006BD8 AA                      	STOSB
 38874 00006BD9 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38875                                  CanonDec:
 38876 00006BDB 4E                      	DEC     SI
 38877                                  
 38878                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38879                                  ; component (no leading path separators) and ES:DI being the destination
 38880                                  ; buffer.
 38881                                  
 38882                                  CanonLoop:
 38883                                  
 38884                                  ; If we are at the end of the source string, then we need to check to see that
 38885                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38886                                  ; Otherwise, do nothing
 38887                                  
 38888 00006BDC 31C0                    	XOR     AX,AX
 38889 00006BDE 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38890 00006BE0 751A                    	JNZ	short DoComponent
 38891 00006BE2 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38892 00006BE7 7505                    	JNZ	short DoTerminate
 38893 00006BE9 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38894 00006BEB AA                      	STOSB
 38895 00006BEC 88E0                    	MOV     AL,AH
 38896                                  DoTerminate:
 38897 00006BEE AA                      	STOSB                           ;           *d++ = 0;
 38898 00006BEF F8                      	CLC                             ;           return (0);
 38899 00006BF0 C3                      	retn
 38900                                  
 38901                                  CanonBad:
 38902 00006BF1 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38903                                  	;mov	al,3
 38904 00006BF4 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38905 00006BF6 7402                    	JZ	short PathEnc		; path character encountered in string
 38906                                  	;mov	al,2
 38907 00006BF8 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38908                                  PathEnc:
 38909 00006BFA F9                      	STC
 38910                                  CanonBad_retn:
 38911 00006BFB C3                      	retn
 38912                                  
 38913                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38914                                  ; it to 8.3
 38915                                  
 38916                                  DoComponent:                            ;           }
 38917 00006BFC E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 38918 00006BFF 72FA                    	jc	short CanonBad_retn	;           return (-1);
 38919                                  
 38920                                  ; We special case the . and .. cases.  These will be backed up.
 38921                                  
 38922                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 38923 00006C01 26833D2E                	CMP	WORD [ES:DI],002Eh
 38924 00006C05 7408                    	JZ	short Skip1
 38925                                  	;CMP	WORD PTR ES:[DI],'..'
 38926 00006C07 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 38927 00006C0C 750A                    	JNZ	short CanonNormal
 38928 00006C0E 4F                      	DEC     DI                      ;           d--;
 38929                                  Skip1:  
 38930 00006C0F E82A00                  	CALL    SkipBack                ;           SkipBack ();
 38931                                  	;mov	al,3
 38932 00006C12 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38933 00006C14 72E5                    	jc	short CanonBad_retn
 38934 00006C16 EB02                    	JMP     short CanonPath         ;           }
 38935                                  
 38936                                  ; We have a normal path. Advance destination pointer over it.
 38937                                  
 38938                                  CanonNormal:                            ;       else
 38939 00006C18 01CF                    	ADD     DI,CX                   ;           d += ct;
 38940                                  
 38941                                  ; We have successfully copied a component. We are now pointing at a path
 38942                                  ; sep char or are pointing at a nul or are pointing at something else.
 38943                                  ; If we point at something else, then we have an error.
 38944                                  
 38945                                  CanonPath:
 38946 00006C1A E81600                  	CALL    PathSep
 38947 00006C1D 75D2                    	JNZ	short CanonBad		; something else...
 38948                                  
 38949                                  ; Copy the first path char we see.
 38950                                  
 38951 00006C1F AC                      	LODSB                           ; get the char
 38952 00006C20 E869E3                  	call    PATHCHRCMP              ; is it path char?
 38953 00006C23 75B6                    	JNZ	short CanonDec		; no, go test for nul
 38954 00006C25 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38955 00006C27 73C8                    	JAE	short CanonBad		; yep, error.
 38956 00006C29 AA                      	STOSB                           ; copy the one byte
 38957                                  
 38958                                  ; Skip all remaining path chars
 38959                                  
 38960                                  CanonPathLoop:
 38961 00006C2A AC                      	LODSB                           ; get next byte
 38962 00006C2B E85EE3                  	call    PATHCHRCMP              ; path char again?
 38963 00006C2E 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38964 00006C30 4E                      	DEC     SI                      ; back up
 38965 00006C31 EBA9                    	JMP	short  CanonLoop	; go copy component
 38966                                  
 38967                                  ;BREAK <PathSep - determine if char is a path separator>
 38968                                  ;----------------------------------------------------------------------------
 38969                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38970                                  ;   Inputs:     DS:SI - point to a char
 38971                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38972                                  ;               Zero set if AL is / \ or NUL
 38973                                  ;               Zero reset otherwise
 38974                                  ;   Registers modified: AL
 38975                                  ;----------------------------------------------------------------------------
 38976                                  
 38977                                  PathSep:
 38978 00006C33 8A04                    	MOV     AL,[SI]                 ; get the character
 38979                                  PathSepGotCh:				; already have character
 38980 00006C35 08C0                    	OR      AL,AL                   ; test for zero
 38981 00006C37 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38982                                  	;call	PATHCHRCMP              ; check for path character
 38983                                  	;retn				; and return HIS determination
 38984                                  	; 18/12/2022
 38985 00006C39 E950E3                  	jmp	PATHCHRCMP
 38986                                  
 38987                                  
 38988                                  ;BREAK <SkipBack - move backwards to a path separator>
 38989                                  ;----------------------------------------------------------------------------
 38990                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38992                                  ;               BX has current directory back up limit (point to a / \)
 38993                                  ;   Outputs:    ES:DI backed up to point to a path char
 38994                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38995                                  ;               Carry set if illegal backup
 38996                                  ;               Carry Clear if ok
 38997                                  ;   Registers modified: DI,AL
 38998                                  ;----------------------------------------------------------------------------
 38999                                  
 39000                                  SkipBack:
 39001 00006C3C 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 39002 00006C3E 720B                    	JB	short SkipBad		;       if (d < dlim)
 39003 00006C40 4F                      	DEC     DI                      ;           goto err;
 39004 00006C41 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 39005 00006C44 E845E3                  	call    PATHCHRCMP              ;           break;
 39006 00006C47 75F3                    	JNZ	short SkipBack		;       }
 39007 00006C49 F8                      	CLC                             ;   return (0);
 39008 00006C4A C3                      	retn				;
 39009                                  SkipBad:                                ;err:
 39010                                  	;mov	al,3
 39011 00006C4B B003                    	MOV     AL,error_path_not_found ; bad path error
 39012 00006C4D F9                      	STC                             ;   return (-1);
 39013 00006C4E C3                      	retn				;
 39014                                  
 39015                                  ;Break <CopyComponent - copy out a file path component>
 39016                                  ;----------------------------------------------------------------------------
 39017                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 39018                                  ;
 39019                                  ;   Inputs:     DS:SI - source path
 39020                                  ;               ES:DI - destination
 39021                                  ;               ES:BP - end of buffer
 39022                                  ;   Outputs:    Carry Set - too long
 39023                                  ;               Carry Clear - DS:SI moved past component
 39024                                  ;                   CX has length of destination
 39025                                  ;   Registers modified: AX,CX,DX
 39026                                  ;----------------------------------------------------------------------------
 39027                                  
 39028                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39029                                  
 39030                                  CopyComponent:
 39031                                  
 39032                                  %define CopyBP	 [BP]		; word
 39033                                  %define CopyD	 [BP+2]		; dword
 39034                                  %define CopyDoff [BP+2]		; word
 39035                                  %define CopyS	 [BP+6]		; dword
 39036                                  %define CopySoff [BP+6]		; word
 39037                                  %define CopyTemp [BP+10]	; byte
 39038                                  
 39039 00006C4F 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 39040 00006C52 1E                      	push	ds
 39041 00006C53 56                      	push	si
 39042 00006C54 06                      	push	es
 39043 00006C55 57                      	push	di
 39044 00006C56 55                      	push	bp
 39045 00006C57 89E5                    	MOV     BP,SP
 39046 00006C59 B42E                    	MOV     AH,'.'
 39047 00006C5B AC                      	LODSB
 39048 00006C5C AA                      	STOSB
 39049 00006C5D 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 39050 00006C5F 7518                    	JNZ	short NormalComp
 39051 00006C61 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 39052 00006C64 740B                    	JZ	short NulTerm
 39053                                  TryTwoDot:
 39054 00006C66 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 39055 00006C67 AA                      	STOSB
 39056 00006C68 38E0                    	CMP     AL,AH
 39057 00006C6A 7557                    	JNZ	short CopyBad
 39058 00006C6C E8C4FF                  	CALL    PathSep
 39059 00006C6F 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 39060                                  NulTerm:                                ;               return -1;
 39061 00006C71 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 39062 00006C73 AA                      	STOSB
 39063 00006C74 897606                  	MOV     CopySoff,SI
 39064 00006C77 EB47                    	JMP     SHORT _GoodRet		;       }
 39065                                  NormalComp:                             ;   else {
 39066 00006C79 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 39067 00006C7C E84FE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 39068 00006C7F 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 39069 00006C82 743F                    	JZ	short CopyBad		;           return (-1);
 39070 00006C84 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 39071 00006C8A 7510                    	JNZ	short DoPack
 39072 00006C8C 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 39073 00006C8F 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 39074 00006C94 7F2D                    	JG	short CopyBad		;               return (-1);
 39075 00006C96 7504                    	JNZ	short DoPack		;           else
 39076 00006C98 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 39077 00006C9A 742F                    	JZ	short CopyBadPath	;               return (-1);
 39078                                  DoPack:                                 ;           }
 39079 00006C9C 897606                  	MOV     CopySoff,SI ; [bp+6]
 39080 00006C9F 16                      	push	ss
 39081 00006CA0 1F                      	pop	ds
 39082 00006CA1 BE[4B05]                	MOV     SI,NAME1
 39083 00006CA4 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 39084 00006CA7 57                      	push	di
 39085 00006CA8 E8CBB3                  	call	PackName                ;       PackName (Name1, temp);
 39086 00006CAB 5F                      	pop	di
 39087 00006CAC E822A5                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 39088 00006CAF 49                      	DEC     CX
 39089 00006CB0 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 39090                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39091                                  	;cmp	cx,[bp+0]
 39092                                  	; 15/12/2022
 39093                                  	;cmp	cx,[bp]
 39094 00006CB3 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 39095 00006CB6 730B                    	JAE	short CopyBad		;           return (-1);
 39096 00006CB8 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 39097 00006CBA C47E02                  	LES     DI,CopyD    ; [bp+2]	
 39098 00006CBD E808A5                  	call	FStrCpy
 39099                                  _GoodRet:				;       }
 39100 00006CC0 F8                      	CLC
 39101 00006CC1 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 39102                                  CopyBad:
 39103 00006CC3 F9                      	STC
 39104 00006CC4 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 39105                                  	;mov	al,2
 39106 00006CC7 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 39107 00006CC9 7503                    	JNZ	short CopyEnd
 39108                                  CopyBadPath:
 39109 00006CCB F9                      	STC
 39110                                  	;mov	al,3
 39111 00006CCC B003                    	MOV     AL,error_path_not_found ; Set bad path error
 39112                                  CopyEnd:
 39113 00006CCE 5D                      	pop	bp
 39114 00006CCF 5F                      	pop	di
 39115 00006CD0 07                      	pop	es
 39116 00006CD1 5E                      	pop	si
 39117 00006CD2 1F                      	pop	ds
 39118 00006CD3 9F                      	LAHF
 39119 00006CD4 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 39120 00006CD7 E8F7A4                  	call	StrLen
 39121 00006CDA 49                      	DEC     CX
 39122 00006CDB 9E                      	SAHF
 39123 00006CDC C3                      	retn
 39124                                  
 39125                                  ; 14/05/2019 - Retro DOS v4.0
 39126                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 39127                                  
 39128                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39129                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 39130                                  
 39131                                  ;Break <Splice - pseudo mount by string substitution>
 39132                                  ;----------------------------------------------------------------------------
 39133                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 39134                                  ;       ThisCDS to point to physical drive CDS.
 39135                                  ;   Inputs:     DS:SI point to string
 39136                                  ;               NoSetDir = TRUE => exact matches with splice fail
 39137                                  ;   Outputs:    DS:SI points to thisCDS
 39138                                  ;               ES:DI points to DPB
 39139                                  ;               String at DS:SI may be reduced in length by removing prefix
 39140                                  ;               and substituting drive letter.
 39141                                  ;               CX = 0 If no splice done
 39142                                  ;               CX <> 0 otherwise
 39143                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 39144                                  ;                   left alone
 39145                                  ;               ThisDPB points to proper DPB
 39146                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 39147                                  ;----------------------------------------------------------------------------
 39148                                  
 39149                                  Splice:
 39150 00006CDD 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 39151 00006CE3 7469                    	JZ	short AllDone
 39152 00006CE5 36FF36[A205]            	push	word [SS:THISCDS]
 39153 00006CEA 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 39154 00006CEF 1E                      	push	ds
 39155 00006CF0 56                      	push	si
 39156 00006CF1 5F                      	pop	di
 39157 00006CF2 07                      	pop	es
 39158 00006CF3 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 39159                                  SpliceScan:
 39160 00006CF5 E8DFFC                  	call	GetCDSFromDrv
 39161 00006CF8 724A                    	JC	short SpliceDone
 39162 00006CFA FEC0                    	INC     AL
 39163                                  	; 17/12/2022
 39164                                  	;test	byte [si+68],20h
 39165 00006CFC F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 39166                                  	;;test	word [si+67],2000h
 39167                                  	;TEST	word [SI+curdir.flags],curdir_splice
 39168 00006D00 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 39169 00006D02 57                      	push	di
 39170 00006D03 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 39171 00006D06 7403                    	JZ	short SpliceFound	;
 39172                                  SpliceSkip:
 39173 00006D08 5F                      	pop	di
 39174 00006D09 EBEA                    	JMP	short SpliceScan	;               continue;
 39175                                  SpliceFound:
 39176 00006D0B 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 39177 00006D0F 7508                    	JNZ	short SpliceDo
 39178 00006D11 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 39179 00006D17 75EF                    	JNZ	short SpliceSkip
 39180                                  SpliceDo:
 39181 00006D19 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 39182 00006D1B 06                      	push	es
 39183 00006D1C 1F                      	pop	ds
 39184 00006D1D 5F                      	pop	di
 39185 00006D1E E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 39186 00006D21 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 39187 00006D25 09C0                    	OR      AX,AX
 39188 00006D27 7808                    	JS	short NoPoke
 39189 00006D29 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 39190 00006D2B 29F0                    	SUB     AX,SI
 39191 00006D2D 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 39192                                  NoPoke:
 39193 00006D31 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 39194 00006D34 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 39195 00006D36 B05C                    	MOV     AL,"\"
 39196 00006D38 AA                      	STOSB
 39197                                  SpliceCopy:                             ;               strcpy (src, p);
 39198 00006D39 E88CA4                  	call	FStrCpy
 39199 00006D3C 83C404                  	ADD     SP,4                    ; throw away saved stuff
 39200 00006D3F 80C901                  	OR      CL,1                    ; signal splice done.
 39201 00006D42 EB0C                    	JMP     SHORT DoSet             ;               return;
 39202                                  SpliceDone:                             ;               }
 39203 00006D44 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 39204 00006D49 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 39205                                  AllDone:
 39206 00006D4E 31C9                    	XOR     CX,CX
 39207                                  DoSet:
 39208 00006D50 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 39209                                  	;les	di,[si+69]
 39210 00006D55 C47C45                  	LES     DI,[SI+curdir.devptr]	
 39211 00006D58 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 39212 00006D5D 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 39213                                  Splice_retn:
 39214 00006D62 C3                      	retn
 39215                                  
 39216                                  ; 15/05/2019 - Retro DOS v4.0
 39217                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 39218                                  
 39219                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39220                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 39221                                  
 39222                                  ;Break <$NameTrans - partially process a name>
 39223                                  ;----------------------------------------------------------------------------
 39224                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 39225                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 39226                                  ;   to Transpath playing games with devices, we need to insure that the output
 39227                                  ;   has drive letter and : in it.
 39228                                  ;
 39229                                  ;   Inputs:     DS:SI - source string for translation
 39230                                  ;               ES:DI - pointer to buffer
 39231                                  ;   Outputs:
 39232                                  ;       Carry Clear
 39233                                  ;               Buffer at ES:DI is filled in with data
 39234                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 39235                                  ;       Carry Set
 39236                                  ;               AX = error_path_not_found
 39237                                  ;   Registers modified: all
 39238                                  ;----------------------------------------------------------------------------
 39239                                  
 39240                                  _$NameTrans:
 39241 00006D63 1E                      	push	ds
 39242 00006D64 56                      	push	si
 39243 00006D65 06                      	push	es
 39244 00006D66 57                      	push	di
 39245 00006D67 51                      	push	cx ; MSDOS 6.0
 39246                                  	
 39247                                  	; MSDOS 6.0	
 39248                                  ; M027 - Start
 39249                                  ;
 39250                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 39251                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 39252                                  ; device if the old call set the volume attribute bit. Note that devname in
 39253                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 39254                                  ; and restore CX.
 39255                                  
 39256                                  	;mov	ch,16h
 39257 00006D68 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 39258 00006D6A E8B902                  	call	SetAttrib
 39259                                  
 39260                                  ; M027 - End
 39261                                  
 39262                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39263 00006D6D BF[BE03]                	MOV     DI,OPENBUF
 39264 00006D70 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 39265 00006D73 59                      	pop	cx ; MSDOS 6.0
 39266 00006D74 5F                      	pop     di
 39267 00006D75 07                      	pop	es
 39268 00006D76 5E                      	pop     si
 39269 00006D77 1F                      	pop     ds
 39270 00006D78 7303                    	JNC	short TransOK
 39271 00006D7A E9C398                  	jmp	SYS_RET_ERR
 39272                                  TransOK:
 39273 00006D7D BE[BE03]                	MOV     SI,OPENBUF
 39274 00006D80 16                      	push	ss
 39275 00006D81 1F                      	pop	ds
 39276                                  ;GotText:
 39277 00006D82 E843A4                  	call	FStrCpy
 39278 00006D85 E9AF98                  	jmp	SYS_RET_OK
 39279                                  
 39280                                  ;Break   <DriveFromText - return drive number from a text string>
 39281                                  ;----------------------------------------------------------------------------
 39282                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 39283                                  ;   pointer.
 39284                                  ;
 39285                                  ;   Inputs:     DS:SI point to a text string
 39286                                  ;   Outputs:    AL has drive number
 39287                                  ;               DS:SI advanced
 39288                                  ;   Registers modified: AX,SI.
 39289                                  ;----------------------------------------------------------------------------
 39290                                  
 39291                                  DriveFromText:
 39292 00006D88 30C0                    	XOR     AL,AL                   ;       drive = 0;
 39293                                  	;CMP	BYTE [SI],0		;       if (*s &&
 39294                                  	; 23/09/2023
 39295 00006D8A 3804                    	cmp	[si],al ; 0
 39296 00006D8C 74D4                    	jz	short Splice_retn
 39297 00006D8E 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 39298 00006D92 75CE                    	jnz	short Splice_retn
 39299 00006D94 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 39300 00006D95 0C20                    	OR      AL,20h
 39301                                  	;sub	al,60h
 39302 00006D97 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 39303 00006D99 75C7                    	jnz	short Splice_retn
 39304 00006D9B B0FF                    	MOV	AL,-1                   ; nuke AL...
 39305                                  	; 23/09/2023
 39306                                  	;dec	al ; -1
 39307 00006D9D C3                      	retn				;           }
 39308                                  
 39309                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 39310                                  ;----------------------------------------------------------------------------
 39311                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 39312                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 39313                                  ;
 39314                                  ;   Inputs:     AL has 0-based drive number
 39315                                  ;   Outputs:    ES:DI advanced
 39316                                  ;   Registers modified: AX
 39317                                  ;----------------------------------------------------------------------------
 39318                                  
 39319                                  TextFromDrive:
 39320 00006D9E FEC0                    	INC     AL
 39321                                  TextFromDrive1:
 39322                                  	;add	al,40h
 39323 00006DA0 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 39324 00006DA2 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 39325 00006DA4 AB                      	STOSW
 39326                                  PathPref_retn:
 39327 00006DA5 C3                      	retn
 39328                                  
 39329                                  ;Break   <PathPref - see if one path is a prefix of another>
 39330                                  ;----------------------------------------------------------------------------
 39331                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 39332                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 39333                                  ;   prefix: A:\ and A:\FOO
 39334                                  ;
 39335                                  ;   Inputs:     DS:SI potential prefix
 39336                                  ;               ES:DI string
 39337                                  ;   Outputs:    Zero set => prefix found
 39338                                  ;                   DI/SI advanced past matching part
 39339                                  ;               Zero reset => no prefix, DS/SI garbage
 39340                                  ;   Registers modified: CX
 39341                                  ;----------------------------------------------------------------------------
 39342                                  
 39343                                  PathPref:
 39344 00006DA6 E836A4                  	call	DStrLen                 ; get length
 39345 00006DA9 49                      	DEC     CX                      ; do not include nul byte
 39346 00006DAA F3A6                    	REPZ    CMPSB                   ; compare
 39347 00006DAC 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 39348 00006DAE 50                      	push	ax			; save char register
 39349 00006DAF 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 39350 00006DB2 E8D7E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 39351 00006DB5 7406                    	JZ	short Prefix		; yes, match root (I hope)
 39352                                  NotSep:                                 ; 2/13/KK
 39353 00006DB7 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 39354 00006DBA E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 39355                                  Prefix:
 39356 00006DBD 58                      	pop	ax			; get back original
 39357 00006DBE C3                      	retn
 39358                                  
 39359                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 39360                                  ;----------------------------------------------------------------------------
 39361                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 39362                                  ;     a path separator.
 39363                                  ;
 39364                                  ;     Input:    DS:SI target string (null terminated)
 39365                                  ;     Output:   Zero set => path separator encountered in string
 39366                                  ;               Zero clear => null encountered
 39367                                  ;     Registers modified: SI
 39368                                  ;----------------------------------------------------------------------------
 39369                                  
 39370                                  ScanPathChar:
 39371 00006DBF AC                      	LODSB                           ; fetch a character
 39372 00006DC0 E872FE                  	call    PathSepGotCh
 39373 00006DC3 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 39374                                  	;call	PATHCHRCMP              ; path separator?
 39375                                  	;retn
 39376                                  	; 18/12/2022
 39377 00006DC5 E9C4E1                  	jmp	PATHCHRCMP
 39378                                  
 39379                                  ;============================================================================
 39380                                  ; FILE.ASM, MSDOS 6.0, 1991
 39381                                  ;============================================================================
 39382                                  ; 14/07/2018 - Retro DOS v3.0
 39383                                  
 39384                                  ; 13/05/2019 - Retro DOS v4.0
 39385                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 39386                                  
 39387                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39388                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 39389                                  
 39390                                  ; MSDOS 2.11
 39391                                  ;BREAK <$Open - open a file handle>
 39392                                  ;----------------------------------------------------------------------------
 39393                                  ;   Assembler usage:
 39394                                  ;           LDS     DX, Name
 39395                                  ;           MOV     AH, Open
 39396                                  ;           MOV     AL, access
 39397                                  ;           INT     int_command
 39398                                  ;
 39399                                  ;       ACCESS          Function
 39400                                  ;       ------          --------
 39401                                  ;       open_for_read   file is opened for reading
 39402                                  ;       open_for_write  file is opened for writing
 39403                                  ;       open_for_both   file is opened for both reading and writing.
 39404                                  ;
 39405                                  ;   Error returns:
 39406                                  ;           AX = error_invalid_access
 39407                                  ;              = error_file_not_found
 39408                                  ;              = error_access_denied
 39409                                  ;              = error_too_many_open_files
 39410                                  ;----------------------------------------------------------------------------
 39411                                  
 39412                                  ; MSDOS 6.0
 39413                                  ;	BREAK <$Open - open a file from a path string>
 39414                                  ;----------------------------------------------------------------------------
 39415                                  ;
 39416                                  ;**	$OPen - Open a File
 39417                                  ;
 39418                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39419                                  ;	file and and returns a handle
 39420                                  ;
 39421                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39422                                  ;		(AL) = open mode
 39423                                  ;	EXIT	'C' clear if OK
 39424                                  ;		  (ax) = file handle
 39425                                  ;		'C' set if error
 39426                                  ;		  (ax) = error code
 39427                                  ;	USES	all
 39428                                  ;
 39429                                  ;----------------------------------------------------------------------------
 39430                                  
 39431                                  ; 13/05/2019 - Retro DOS v4.0
 39432                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39433                                  
 39434                                  _$OPEN:       
 39435 00006DC8 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39436                                  _$Open2:
 39437                                  	;mov	ch,16h
 39438 00006DCA B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39439 00006DCC E85702                  	call	SetAttrib
 39440 00006DCF B9[F82A]                	mov	cx,DOS_OPEN
 39441                                  
 39442                                  	;xor	ah,ah  ; MSDOS 3.3
 39443                                  
 39444 00006DD2 50                      	push	ax
 39445                                  
 39446                                  ;*	General file open/create code. The $CREATE call and the various
 39447                                  ;	$OPEN calls all come here.
 39448                                  ;
 39449                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39450                                  ;	path names, etc., and then dispatch to our individual handlers.
 39451                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39452                                  ;
 39453                                  ;	(TOS) = create mode
 39454                                  ;	(CX) = address of routine to call to do actual function
 39455                                  ;	(DS:DX) = ASCIZ name
 39456                                  ;	SAttrib = Attribute mask
 39457                                  
 39458                                  ;	Get a free SFT and mark it "being allocated"
 39459                                  
 39460                                  AccessFile:
 39461 00006DD3 E81DA5                  	call	ECritSFT
 39462 00006DD6 E8D8F7                  	call	SFNFree			; get a free sfn
 39463 00006DD9 E832A5                  	call	LCritSFT
 39464 00006DDC 7214                    	jc	short OpenFailJ		; oops, no free sft's
 39465 00006DDE 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39466 00006DE3 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39467 00006DE8 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39468                                  
 39469                                  ;	Find a free area in the user's JFN table.
 39470                                  
 39471 00006DED E8AEF7                  	call	JFNFree			; get a free jfn
 39472 00006DF0 7303                    	jnc	short SaveJFN
 39473                                  OpenFailJ:
 39474 00006DF2 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 39475                                  
 39476                                  SaveJFN:
 39477 00006DF5 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39478 00006DFA 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39479 00006DFF 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39480                                  
 39481                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39482                                  ;	reusing the same JFN.
 39483                                  
 39484 00006E04 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39485 00006E09 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39486 00006E0C 89D6                    	MOV	SI,DX			; get name in appropriate place
 39487 00006E0E BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39488 00006E11 51                      	push	cx			; save routine to call
 39489 00006E12 E844FC                  	call	TransPath		; convert the path
 39490 00006E15 5B                      	pop	bx			; (bx) = routine to call
 39491                                  
 39492 00006E16 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39493 00006E1B 720A                    	JC	short OpenCleanJ	; no error, go and open file
 39494 00006E1D 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39495 00006E23 7404                    	JZ	short SetSearch
 39496                                  	;mov	al,2
 39497 00006E25 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39498                                  OpenCleanJ:
 39499 00006E27 EB50                    	JMP	short OpenClean
 39500                                  
 39501                                  SetSearch:
 39502 00006E29 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39503                                  
 39504                                  ;	We need to get the new inheritance bits.
 39505                                  
 39506 00006E2A 31C9                    	xor	cx,cx
 39507                                  	; MSDOS 6.0
 39508                                  	;mov	[si+2],cx ; 0
 39509 00006E2C 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39510                                  	;mov    [si+51],cx ; 0
 39511 00006E2F 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39512                                  	;
 39513 00006E32 81FB[F82A]              	CMP	BX,DOS_OPEN
 39514 00006E36 7509                    	JNZ	short _DoOper
 39515                                  	;test   al,80h
 39516 00006E38 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39517 00006E3A 7405                    	JZ	short _DoOper ; 10/08/2018
 39518 00006E3C 247F                    	AND	AL,7Fh			; mask off inherit bit
 39519                                  	;mov	cx,1000h
 39520 00006E3E B90010                  	MOV	CX,sf_no_inherit
 39521                                  _DoOper:
 39522                                  	;; MSDOS 3.3
 39523                                  	;;mov	word [si+2], 0
 39524                                  	;;mov	word [si+33h], 0
 39525                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39526                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39527                                  
 39528                                  	; MSDOS 6.0
 39529                                  ;**	Check if this is an extended open. If so you must set the
 39530                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39531                                  ;	Set_EXT_mode in creat.asm
 39532                                  
 39533                                  	; MSDOS 6.0
 39534                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39535 00006E41 57                      	push	di
 39536 00006E42 06                      	push	es
 39537 00006E43 1E                      	push	ds
 39538 00006E44 07                      	pop	es
 39539 00006E45 56                      	push	si
 39540 00006E46 5F                      	pop	di			; (es:di) = SFT address
 39541 00006E47 E89ABC                  	call	Set_EXT_mode
 39542                                  	;RESTORE <es, di>
 39543 00006E4A 07                      	pop	es
 39544 00006E4B 5F                      	pop	di
 39545                                  
 39546                                  	;Context DS
 39547 00006E4C 16                      	push	ss
 39548 00006E4D 1F                      	pop	ds	
 39549                                  
 39550 00006E4E 51                      	push	cx
 39551 00006E4F FFD3                    	CALL	BX			; blam!
 39552 00006E51 59                      	pop	cx
 39553 00006E52 C536[9E05]              	LDS	SI,[THISSFT]
 39554 00006E56 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39555                                  	;jc	short OpenE ; MSDOS 3.3
 39556                                  
 39557                                  ;	The SFT was successfully opened. Remove busy mark.
 39558                                  
 39559                                  OpenOK:
 39560                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39561 00006E58 C7040100                	mov	word [SI],1
 39562                                  	;or	[SI+5],cx
 39563 00006E5C 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39564                                  
 39565                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39566                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39567                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39568                                  ;
 39569                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39570                                  ; sharer.
 39571                                  
 39572 00006E5F 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39573 00006E63 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39574                                  
 39575 00006E68 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39576                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39577                                  OpenOkj:
 39578 00006E6F E9C597                  	jmp	SYS_RET_OK		; bye with no errors
 39579                                  
 39580                                  	; MSDOS 6.0
 39581                                  ;Extended Open hooks check
 39582                                  OpenE2:					;AN000;;EO.
 39583 00006E72 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39584 00006E75 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39585 00006E77 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39586                                  
 39587                                  ;	Extended Open hooks check
 39588                                  ;
 39589                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 39590                                  
 39591                                  OpenClean:
 39592 00006E79 5B                      	pop	bx			; clean off stack
 39593                                  OpenE:
 39594                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39595 00006E7A C7040000                	mov	word [SI],0
 39596 00006E7E 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39597 00006E83 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39598 00006E86 EB02                    	JMP	SHORT OpenCritLeave
 39599                                  
 39600                                  OpenFail:
 39601 00006E88 FB                      	STI
 39602 00006E89 59                      	pop	cx			; Clean stack
 39603                                  OpenCritLeave:
 39604 00006E8A 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39605                                  
 39606                                  	; MSDOS 6.0
 39607                                  ; File Tagging DOS 4.00
 39608 00006E91 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39609                                  					;AN000;;FT. code page mismatch
 39610 00006E97 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39611 00006E99 E9AC97                  	jmp	From_GetSet		;AN000;;FT. yes
 39612                                  NORERR: 				;AN000;
 39613                                  ; File Tagging DOS 4.00
 39614                                  
 39615 00006E9C E9A197                  	jmp	SYS_RET_ERR		; no free, return error
 39616                                  
 39617                                  ; MSDOS 2.11
 39618                                  ;BREAK <$CREAT - creat a new file and open him for input>
 39619                                  ;----------------------------------------------------------------------------
 39620                                  ;   Assembler usage:
 39621                                  ;           LDS     DX, name
 39622                                  ;           MOV     AH, Creat
 39623                                  ;           MOV     CX, access
 39624                                  ;           INT     21h
 39625                                  ;       ; AX now has the handle
 39626                                  ;
 39627                                  ;   Error returns:
 39628                                  ;           AX = error_access_denied
 39629                                  ;              = error_path_not_found
 39630                                  ;              = error_too_many_open_files
 39631                                  ;----------------------------------------------------------------------------
 39632                                  
 39633                                  ; MSDOS 6.0
 39634                                  ;	BREAK <$Creat - create a brand-new file>
 39635                                  ;----------------------------------------------------------------------------
 39636                                  ;
 39637                                  ;**	$Creat - Create a File
 39638                                  ;
 39639                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39640                                  ;	initial attributes contained in CX
 39641                                  ;
 39642                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39643                                  ;		(CX) = initial attributes
 39644                                  ;	EXIT	'C' set if error
 39645                                  ;		  (ax) = error code
 39646                                  ;		'C' clear if OK
 39647                                  ;		  (ax) = file handle
 39648                                  ;	USES	all
 39649                                  ;
 39650                                  ;----------------------------------------------------------------------------
 39651                                  
 39652                                  _$CREAT:
 39653 00006E9F 51                      	push	cx			; Save attributes on stack
 39654 00006EA0 B9[D229]                	mov	CX,DOS_CREATE		; routine to call
 39655                                  AccessSet:
 39656                                  	;mov	byte [ss:SATTRIB],6
 39657 00006EA3 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39658                                  	; 10/08/2018
 39659 00006EA9 E927FF                  	JMP	AccessFile		; use good ol' open
 39660                                  
 39661                                  ; MSDOS 6.0 (MSDOS 3.3)
 39662                                  ;	BREAK <$CHMOD - change file attributes>
 39663                                  ;----------------------------------------------------------------------------
 39664                                  ;
 39665                                  ;**	$CHMOD - Change File Attributes
 39666                                  ;
 39667                                  ;   Assembler usage:
 39668                                  ;	    LDS     DX, name
 39669                                  ;	    MOV     CX, attributes
 39670                                  ;	    MOV     AL,func (0=get, 1=set)
 39671                                  ;	    INT     21h
 39672                                  ;   Error returns:
 39673                                  ;	    AX = error_path_not_found
 39674                                  ;	    AX = error_access_denied
 39675                                  ;
 39676                                  ;----------------------------------------------------------------------------
 39677                                  
 39678                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39679                                  _$CHMOD:
 39680                                  	; 05/08/2018 - Retro DOS v3.0
 39681                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 39682 00006EAC BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39683 00006EAF 50                      	push	ax
 39684 00006EB0 51                      	push	cx			; save function and attributes
 39685 00006EB1 89D6                    	MOV	SI,DX			; get things in appropriate places
 39686 00006EB3 E8A7FB                  	call	TransPathSet		; get correct path
 39687 00006EB6 59                      	pop	cx
 39688 00006EB7 58                      	pop	ax			; and get function and attrs back
 39689 00006EB8 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39690 00006EBA 16                      	push	ss			; set up for later possible calls
 39691 00006EBB 1F                      	pop	ds
 39692 00006EBC 803E[7A05]FF            	CMP	byte [CMETA],-1
 39693 00006EC1 754E                    	JNZ	short ChModErr
 39694                                  	;mov	byte [SATTRIB],16h
 39695 00006EC3 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39696 00006EC8 2C01                    	SUB	AL,1			; fast way to discriminate
 39697 00006ECA 720B                    	JB	short ChModGet		; 0 -> go get value
 39698 00006ECC 7417                    	JZ	short ChModSet		; 1 -> go set value
 39699                                  	;mov	byte [EXTERR_LOCUS],1
 39700 00006ECE C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39701                                  	;mov	al,1
 39702 00006ED3 B001                    	mov	al,error_invalid_function ; bad value
 39703                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39704                                  chmod_errj:	
 39705                                  	;;jmp	SYS_RET_ERR
 39706                                  	;jmp	short ChModE	
 39707 00006ED5 EBC5                    	jmp	short NORERR	; 06/12/2022
 39708                                  ChModGet:
 39709 00006ED7 E8E3B9                  	call	GET_FILE_INFO		; suck out the ol' info
 39710 00006EDA 7237                    	JC	short ChModE		; error codes are already set for ret
 39711 00006EDC E8A295                  	call	Get_User_Stack		; point to user saved vaiables
 39712                                  	;mov	[SI+4],ax
 39713 00006EDF 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39714                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39715                                  OpenOkj2:
 39716                                  	; 17/12/2022
 39717                                  	;;jmp	SYS_RET_OK		; say sayonara
 39718                                  	;jmp	short OpenOkj
 39719                                  	; 25/06/2019
 39720 00006EE2 E95597                  	jmp	SYS_RET_OK_clc
 39721                                  
 39722                                  ChModSet:
 39723 00006EE5 89C8                    	MOV	AX,CX			; get attrs in position
 39724 00006EE7 E831BA                  	call	SET_FILE_ATTRIBUTE	; go set
 39725 00006EEA 7227                    	JC	short ChModE		; errors are set
 39726                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39727                                  	;jmp	SYS_RET_OK
 39728                                  OpenOkj3:
 39729                                  	;jmp	short OpenOkj2
 39730                                  	; 17/12/2022
 39731 00006EEC E94897                  	jmp	SYS_RET_OK
 39732                                  
 39733                                  ; 17/12/2022
 39734                                  %if 0
 39735                                  ChModErr:
 39736                                  NotFound:	; 17/12/2022
 39737                                  	;mov	al,3
 39738                                  	mov	al,error_path_not_found
 39739                                  ChModE:
 39740                                  UnlinkE:	; 17/12/2022
 39741                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39742                                  	;;jmp	SYS_RET_ERR
 39743                                  	;jmp	short chmod_errj
 39744                                  	; 17/12/2022
 39745                                  	jmp	short NORERR
 39746                                  %endif
 39747                                  
 39748                                  ; 22/05/2019 - Retro DOS v4.0
 39749                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 39750                                  
 39751                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39752                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39753                                  
 39754                                  ;	BREAK <$UNLINK - delete a file entry>
 39755                                  ;----------------------------------------------------------------------------
 39756                                  ;
 39757                                  ;**	$UNLINK - Delete a File
 39758                                  ;
 39759                                  ;
 39760                                  ;	Assembler usage:
 39761                                  ;	    LDS     DX, name
 39762                                  ;	    IF VIA SERVER DOS CALL
 39763                                  ;	     MOV     CX,SEARCH_ATTRIB
 39764                                  ;	    MOV     AH, Unlink
 39765                                  ;	    INT     21h
 39766                                  ;
 39767                                  ;	ENTRY	(ds:dx) = path name
 39768                                  ;		(cx) = search_attribute, if via server_dos
 39769                                  ;	EXIT	'C' clear if no error
 39770                                  ;		'C' set if error
 39771                                  ;		  (ax) = error code
 39772                                  ;			= error_file_not_found
 39773                                  ;			= error_access_denied
 39774                                  ;
 39775                                  ;----------------------------------------------------------------------------
 39776                                  
 39777                                  _$UNLINK:
 39778 00006EEF 51                      	push	cx			; Save possible CX input parm
 39779 00006EF0 89D6                    	MOV	SI,DX			; Point at input string
 39780 00006EF2 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39781 00006EF5 E865FB                  	call	TransPathSet		; go get normalized path
 39782 00006EF8 59                      	pop	cx
 39783 00006EF9 7216                    	JC	short ChModErr		; badly formed path
 39784 00006EFB 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39785 00006F01 750E                    	JNZ	short NotFound
 39786 00006F03 16                      	push	ss
 39787 00006F04 1F                      	pop	ds
 39788                                  	;mov	ch,6
 39789 00006F05 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39790 00006F07 E81C01                  	call	SetAttrib
 39791 00006F0A E8B2B5                  	call	DOS_DELETE		; remove that file
 39792                                  	;JC	short UnlinkE 		; error is there
 39793                                  	; 17/12/2022
 39794 00006F0D 728D                    	jc	short NORERR
 39795                                  
 39796                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39797                                  UnlinkOk:
 39798                                  	;jmp	SYS_RET_OK		; okey doksy
 39799 00006F0F EBDB                    	jmp	short OpenOkj3
 39800                                  
 39801                                  	; 17/12/2022
 39802                                  ChModErr:	; 17/12/2022
 39803                                  NotFound:
 39804                                  	;mov	al,3
 39805 00006F11 B003                    	MOV	AL,error_path_not_found
 39806                                  ChModE:		; 17/12/2022
 39807                                  UnlinkE:
 39808                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39809                                  	;;jmp	SYS_RET_ERR		; bye
 39810                                  	;jmp	short ChModE
 39811                                  	; 17/12/2022
 39812 00006F13 EB87                    	jmp	short NORERR
 39813                                  
 39814                                  ;BREAK <$RENAME - move directory entries around>
 39815                                  ;----------------------------------------------------------------------------
 39816                                  ;
 39817                                  ;   Assembler usage:
 39818                                  ;	    LDS     DX, source
 39819                                  ;	    LES     DI, dest
 39820                                  ;	    IF VIA SERVER DOS CALL
 39821                                  ;	      MOV   CX,SEARCH_ATTRIB
 39822                                  ;	    MOV     AH, Rename
 39823                                  ;	    INT     21h
 39824                                  ;
 39825                                  ;   Error returns:
 39826                                  ;	    AX = error_file_not_found
 39827                                  ;	       = error_not_same_device
 39828                                  ;	       = error_access_denied
 39829                                  ;
 39830                                  ;----------------------------------------------------------------------------
 39831                                  
 39832                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39833                                  _$RENAME:
 39834                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39835 00006F15 51                      	push	cx
 39836 00006F16 1E                      	push	ds
 39837 00006F17 52                      	push	dx			; save source and possible CX arg
 39838 00006F18 06                      	PUSH	ES
 39839 00006F19 1F                      	POP	DS			; move dest to source
 39840 00006F1A 89FE                    	MOV	SI,DI			; save for offsets
 39841 00006F1C BF[3E04]                	MOV	DI,RENBUF
 39842 00006F1F E83BFB                  	call	TransPathSet		; munge the paths
 39843 00006F22 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 39844 00006F27 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 39845 00006F2C 5E                      	pop	si
 39846 00006F2D 1F                      	pop	ds
 39847 00006F2E 59                      	pop	cx			; get back source and possible CX arg
 39848                                  epjc2:	
 39849 00006F2F 72E0                    	JC	short ChModErr		; get old error
 39850 00006F31 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 39851 00006F37 75D8                    	JNZ	short NotFound
 39852 00006F39 51                      	push	cx			; Save possible CX arg
 39853 00006F3A BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39854 00006F3D E81DFB                  	call	TransPathSet		; wham
 39855 00006F40 59                      	pop	cx
 39856 00006F41 72EC                    	JC	short epjc2
 39857 00006F43 16                      	push	ss
 39858 00006F44 1F                      	pop	ds
 39859 00006F45 803E[7A05]FF            	CMP	byte [CMETA],-1
 39860 00006F4A 72C5                    	JB	short NotFound
 39861                                  
 39862                                  	; MSDOS 6.0
 39863 00006F4C FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 39864 00006F50 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39865 00006F54 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39866 00006F57 16                      	PUSH	SS			   ;AN000;;MS.
 39867 00006F58 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39868 00006F59 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39869                                  rnloop: 				   ;AN000;
 39870 00006F5B E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39871 00006F5E 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39872 00006F60 E834A2                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39873 00006F63 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39874 00006F65 FEC0                    	INC	AL			   ;AN000;;MS.	next
 39875 00006F67 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39876                                  rnerr:					   ;AN000;
 39877 00006F69 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 39878                                  	;error	error_current_directory    ;AN000;;MS.
 39879 00006F6C B010                    	mov	al,error_current_directory 
 39880                                  	;jmp	SYS_RET_ERR
 39881                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39882 00006F6E EBA3                    	jmp	short UnlinkE
 39883                                  dorn:					   ;AN000;
 39884 00006F70 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39885 00006F75 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39886                                  
 39887 00006F7A 16                      	push	ss
 39888 00006F7B 1F                      	pop	ds
 39889                                  
 39890                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39891                                  	;mov	ch,16h
 39892 00006F7C B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 39893                                  					; rename appropriate files
 39894 00006F7E E8A500                  	call	SetAttrib
 39895 00006F81 E80FB7                  	call	DOS_RENAME		; do the deed
 39896 00006F84 728D                    	JC	short UnlinkE 		; errors
 39897                                  
 39898                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39899                                  	;jmp	SYS_RET_OK
 39900 00006F86 EB87                    	jmp	short UnlinkOk
 39901                                  
 39902                                  
 39903                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39904                                  
 39905                                  ; 14/07/2018 - Retro DOS v3.0
 39906                                  ; MSDOS 3.3 (& MSDOS 6.0)
 39907                                  
 39908                                  ;Break <$CreateNewFile - Create a new directory entry>
 39909                                  ;----------------------------------------------------------------------------
 39910                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 39911                                  ;	was no previous directory entry, and fail if a directory entry with
 39912                                  ;	the same name existed previously.
 39913                                  ;
 39914                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 39915                                  ;		CX contains default file attributes
 39916                                  ;   Outputs:	Carry Clear:
 39917                                  ;		    AX has file handle opened for read/write
 39918                                  ;		Carry Set:
 39919                                  ;		    AX has error code
 39920                                  ;   Registers modified: All
 39921                                  ;----------------------------------------------------------------------------
 39922                                  
 39923                                  _$CreateNewFile:
 39924 00006F88 51                      	push	cx			; Save attributes on stack
 39925 00006F89 B9[9B2A]                	MOV	CX,DOS_Create_New	; routine to call
 39926 00006F8C E914FF                  	JMP	AccessSet		; use good ol' open
 39927                                  
 39928                                  ;**	BinToAscii - convert a number to a string.
 39929                                  ;----------------------------------------------------------------------------
 39930                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 39931                                  ;	This routine is used to generate temp file names so we don't spend
 39932                                  ;	the time and code needed for a true hex number, we just use
 39933                                  ;	A thorugh O.
 39934                                  ;
 39935                                  ;	ENTRY	(ax) = value
 39936                                  ;		(es:di) = destination
 39937                                  ;	EXIT	(es:di) updated by 4
 39938                                  ;	USES	cx, di, flags
 39939                                  ;----------------------------------------------------------------------------
 39940                                  
 39941                                  ; MSDOS 3.3
 39942                                  ;BinToAscii:
 39943                                  ;	mov     cx,4
 39944                                  ;bta5:
 39945                                  ;	push    cx
 39946                                  ;	mov     cl,4
 39947                                  ;	rol     ax,cl
 39948                                  ;	push    ax
 39949                                  ;	and     al,0Fh
 39950                                  ;	add     al,'0'
 39951                                  ;	cmp     al,'9'
 39952                                  ;	jbe     short bta6
 39953                                  ;	add     al,7
 39954                                  ;bta6: 
 39955                                  ;	stosb
 39956                                  ;	pop     ax
 39957                                  ;	pop     cx
 39958                                  ;	loop    bta5
 39959                                  ;	retn
 39960                                  
 39961                                  ; MSDOS 6.0
 39962                                  BinToAscii:
 39963 00006F8F B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39964                                  bta5:	
 39965 00006F92 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39966 00006F94 50                      	push	ax			; preserve remainder of digits
 39967 00006F95 240F                    	AND	AL,0Fh			; grab low nibble
 39968 00006F97 0441                    	ADD	AL,'A'			; turn into ascii
 39969 00006F99 AA                      	STOSB				; drop in the character
 39970 00006F9A 58                      	pop	ax			; (ax) = shifted number
 39971 00006F9B FECD                    	dec	ch
 39972 00006F9D 75F3                    	jnz	short bta5		; process 4 digits
 39973 00006F9F C3                      	retn
 39974                                  
 39975                                  ;Break	<$CreateTempFile - create a unique name>
 39976                                  ;----------------------------------------------------------------------------
 39977                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39978                                  ;	Method used is to get the current time, convert to a name and attempt
 39979                                  ;	a create new. Repeat until create new succeeds.
 39980                                  ;
 39981                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39982                                  ;		CX  contains default attributes
 39983                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39984                                  ;		AX has handle
 39985                                  ;   Registers modified: all
 39986                                  ;----------------------------------------------------------------------------
 39987                                  
 39988                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39989                                  
 39990                                  _$CreateTempFile:
 39991                                  	;Enter
 39992 00006FA0 55                      	push	bp
 39993 00006FA1 89E5                    	mov	bp,sp
 39994                                  
 39995                                  	;LocalVar  EndPtr,DWORD
 39996                                  	;LocalVar  FilPtr,DWORD
 39997                                  	;LocalVar  Attr,WORD
 39998                                  
 39999 00006FA3 83EC0A                  	sub	sp,10
 40000                                  
 40001                                  	;test	cx,0FFD8h
 40002 00006FA6 F7C1D8FF                	test	CX,~attr_changeable
 40003 00006FAA 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 40004                                  
 40005                                  ; We need this "hook" here to detect these cases (like user sets one both of
 40006                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 40007                                  ; below. The code loops on error_access_denied, but if one of the non
 40008                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 40009                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 40010                                  ; need to detect these cases before getting to the loop.
 40011                                  
 40012                                  	;mov	ax, 5
 40013 00006FAC B80500                  	MOV	AX,error_access_denied
 40014 00006FAF EB69                    	JMP	SHORT SETTMPERR
 40015                                  
 40016                                  OKatts:
 40017                                  	;MOV	attr,CX 		; save attribute
 40018 00006FB1 894EF6                  	mov     [bp-10],cx
 40019                                  	;MOV	FilPtrL,DX		; pointer to file
 40020 00006FB4 8956F8                  	mov	[bp-8],dx
 40021                                  	;MOV	FilPtrH,DS
 40022 00006FB7 8C5EFA                  	mov	[bp-6],ds
 40023                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 40024 00006FBA 8C5EFE                  	mov	[bp-2],ds
 40025 00006FBD 1E                      	PUSH	DS
 40026 00006FBE 07                      	POP	ES			; destination for nul search
 40027 00006FBF 89D7                    	MOV	DI,DX
 40028 00006FC1 89F9                    	MOV	CX,DI
 40029 00006FC3 F7D9                    	NEG	CX			; number of bytes remaining in segment
 40030                                  	; MSDOS 6.0
 40031 00006FC5 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 40032 00006FC7 7501                    	JNZ	short okok		;AN000;MS. no
 40033                                  	;MOV	CX,-1			;AN000;MS.
 40034                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40035                                  	; 17/12/2022
 40036 00006FC9 49                      	dec	cx  ; mov cx,-1
 40037                                  	;mov	cx,-1 ; 0FFFh
 40038                                  okok:					;AN000;
 40039 00006FCA 31C0                    	XOR	AX,AX			;AN000;
 40040 00006FCC F2AE                    	REPNZ	SCASB			;AN000;
 40041                                  					;AN000;
 40042 00006FCE 4F                      	DEC	DI			; point back to the null
 40043 00006FCF 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 40044 00006FD3 E8B6DF                  	call	PATHCHRCMP		; Is it a path separator?
 40045 00006FD6 7403                    	JZ	short SETENDPTR		; Yes
 40046                                  STOREPTH:
 40047 00006FD8 B05C                    	MOV	AL,'\'
 40048 00006FDA AA                      	STOSB				; Add a path separator (and INC DI)
 40049                                  SETENDPTR:
 40050                                  	;MOV	EndPtrL,DI		; pointer to the tail
 40051 00006FDB 8856FC                  	mov	[bp-4],dl
 40052                                  CreateLoop:
 40053 00006FDE 16                      	push	ss			; let ReadTime see variables
 40054 00006FDF 1F                      	pop	ds
 40055 00006FE0 55                      	push	bp
 40056 00006FE1 E82C9B                  	call	READTIME		; go get time
 40057 00006FE4 5D                      	pop	bp
 40058                                  ;
 40059                                  ; Time is in CX:DX. Go drop it into the string.
 40060                                  ;
 40061                                  	;les	di,EndPtr		; point to the string
 40062 00006FE5 C47EFC                  	les	di,[BP-4]
 40063 00006FE8 89C8                    	mov	ax,cx
 40064 00006FEA E8A2FF                  	call	BinToAscii		; store upper word
 40065 00006FED 89D0                    	mov	ax,dx
 40066 00006FEF E89DFF                  	call	BinToAscii		; store lower word
 40067 00006FF2 30C0                    	xor	al,al
 40068 00006FF4 AA                      	STOSB				; nul terminate
 40069                                  	;LDS	DX,FilPtr		; get name
 40070 00006FF5 C556F8                  	lds	dx,[bp-8]
 40071                                  	;MOV	CX,Attr 		; get attr
 40072 00006FF8 8B4EF6                  	mov	cx,[bp-10]
 40073 00006FFB 55                      	push	bp
 40074 00006FFC E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 40075 00006FFF 5D                      	pop	bp
 40076 00007000 7319                    	JNC	short CreateDone	; failed, go try again
 40077                                  
 40078                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 40079                                  ; error and figure out what to do.
 40080                                  
 40081                                  	;; MSDOS 3.3			; M049 - start
 40082                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 40083                                  ;;	cmp	al,error_file_exists
 40084                                  ;;	jz	short CreateLoop	; file existed => try with new name
 40085                                  ;;	cmp	al,error_access_denied
 40086                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 40087                                  
 40088                                  	; MSDOS 6.0
 40089                                  	;cmp	al,50h
 40090 00007002 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 40091 00007004 74D8                    	JZ	short CreateLoop	; Y: try again
 40092                                  	;cmp	al,5
 40093 00007006 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 40094 00007008 7510                    	JNZ	short SETTMPERR		; N: Error out
 40095                                  					; Y: Check to see if we got this due
 40096                                  					;    to the network drive. Note that
 40097                                  					;    the redir will set the exterr
 40098                                  					;    to error_cannot_make if this is 
 40099                                  					;    so. 
 40100 0000700A 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 40101                                  					; See if it's REALLY an att mismatch
 40102 00007010 7408                    	je	short SETTMPERR		; no, network error, stop
 40103                                  ;M070
 40104                                  ; If the user failed on an I24, we do not want to try again
 40105                                  ;
 40106 00007012 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 40107                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 40108                                  
 40109                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 40110                                  	; 17/12/2022
 40111 00007018 75C4                    	jne	short CreateLoop ; 10/06/2019 
 40112                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40113                                  	;jz	short SETTMPERR
 40114                                  	;jmp	short CreateLoop
 40115                                  
 40116                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 40117                                  					; M049 - end
 40118                                  SETTMPERR:
 40119 0000701A F9                      	STC
 40120                                  CreateDone:
 40121                                  	;Leave
 40122 0000701B 89EC                    	mov	sp,bp
 40123 0000701D 5D                      	pop	bp
 40124 0000701E 7203                    	JC	short CreateFail
 40125 00007020 E91496                  	jmp	SYS_RET_OK		; success!
 40126                                  CreateFail:
 40127 00007023 E91A96                  	jmp	SYS_RET_ERR
 40128                                  
 40129                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 40130                                  ;   (CH) or to the value in CL if the current system call is through
 40131                                  ;   serverdoscall.
 40132                                  ;
 40133                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 40134                                  ;		fSharing == TRUE => set sattrib to CL
 40135                                  ;   Outputs:	none
 40136                                  ;   Registers changed:	CX
 40137                                  
 40138                                  SetAttrib:
 40139 00007026 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 40140 0000702C 7502                    	jnz	short Set
 40141 0000702E 88E9                    	mov	cl,ch
 40142                                  Set:
 40143 00007030 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 40144 00007035 C3                      	retn
 40145                                  
 40146                                  ; 14/07/2018 - Retro DOS v3.0
 40147                                  ; MSDOS 6.0
 40148                                  
 40149                                  ; 29/04/2019 - Retro DOS v4.0
 40150                                  
 40151                                  ;Break	<Extended_Open- Extended open the file>
 40152                                  ;----------------------------------------------------------------------------
 40153                                  ; Input: AL= 0 reserved  AH=6CH
 40154                                  ;	 BX= mode
 40155                                  ;	 CL= create attribute  CH=search attribute (from server)
 40156                                  ;	 DX= flag
 40157                                  ;	 DS:SI = file name
 40158                                  ;	 ES:DI = parm list
 40159                                  ;			   DD  SET EA list (-1) null
 40160                                  ;			   DW  n  parameters
 40161                                  ;			   DB  type (TTTTTTLL)
 40162                                  ;			   DW  IOMODE
 40163                                  ; Function: Extended Open
 40164                                  ; Output: carry clear
 40165                                  ;		     AX= handle
 40166                                  ;		     CX=1 file opened
 40167                                  ;			2 file created/opened
 40168                                  ;			3 file replaced/opened
 40169                                  ;	  carry set: AX has error code
 40170                                  ;----------------------------------------------------------------------------
 40171                                  
 40172                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40173                                  _$Extended_Open:			  ;AN000;
 40174                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 40175 00007036 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 40176 0000703B 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 40177                                  	; 17/12/2022
 40178 00007042 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 40179                                  	;;test	dx,0FE00h
 40180                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 40181 00007045 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 40182 00007047 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 40183 00007049 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 40184 0000704C 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 40185                                  	;and	dl,0Fh
 40186 0000704E 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 40187 00007051 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 40188 00007054 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 40189                                  	;and	ah,0F0h
 40190 00007056 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 40191 00007059 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 40192 0000705C 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 40193                                  
 40194 0000705E 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 40195 00007063 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 40196 00007068 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 40197 0000706D 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 40198 00007072 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 40199 00007077 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 40200 0000707C 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 40201 00007081 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 40202 00007086 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 40203 00007088 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 40204 0000708A EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 40205                                  ext_inval2:				  ;AN000;;EO.
 40206                                  	;mov	al,1
 40207 0000708C B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 40208                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40209                                  eo_err:
 40210                                  	;jmp	SYS_RET_ERR
 40211 0000708E EB93                    	jmp	short CreateFail
 40212                                  
 40213                                  ext_inval_parm:				  ;AN000;EO..
 40214 00007090 59                      	POP	CX			  ;AN000;EO..  pop up satck
 40215 00007091 5E                      	POP	SI			  ;AN000;EO..
 40216                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 40217                                  	;mov	al,13
 40218 00007092 B00D                    	mov	al,error_invalid_data
 40219                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40220                                  	;;jmp	SYS_RET_ERR
 40221                                  	;jmp	short eo_err
 40222                                  	; 17/12/2022
 40223 00007094 EB8D                    	jmp	short CreateFail
 40224                                  
 40225                                  	; 17/12/2022	
 40226                                  ;error_return:				  ;AN000;EO.
 40227                                  ;	retn				  ;AN000;EO.. return with error
 40228                                  
 40229                                  goopen2:				  ;AN000;
 40230                                  	; 17/12/2022
 40231                                  	;test	bh,20h				 
 40232 00007096 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 40233                                  	;;test	bx,2000h
 40234                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 40235 00007099 7406                    	JZ	short goopen		  ;AN000;EO.. no
 40236                                  	;or	byte [SS:EXTOPEN_ON],2
 40237 0000709B 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 40238                                  goopen:					  ;AN000;
 40239                                  	;or	byte [SS:EXTOPEN_ON],1 
 40240 000070A1 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 40241                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 40242                                  	; 18/12/2022
 40243 000070A7 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 40244                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 40245 000070AD 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 40246 000070B3 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 40247 000070B5 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 40248 000070B8 723F                    	JC	short error_return	  ;AN000;;EO. error
 40249                                  
 40250 000070BA 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40251 000070C0 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40252                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40253 000070C2 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 40254 000070C9 EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 40255                                  
 40256                                  	; 17/12/2022
 40257                                  ;ok_return2:
 40258                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 40259                                  
 40260                                  chknext:
 40261                                  	; 17/12/2022
 40262 000070CB 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 40263                                  	;;test	word [SS:EXTOPEN_FLAG],1
 40264                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 40265 000070D1 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 40266 000070D3 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 40267 000070D6 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 40268 000070D8 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40269 000070DE 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40270 000070E0 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 40271 000070E7 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 40272 000070ED 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 40273 000070EF 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 40274 000070F6 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40275                                  error_return2:
 40276 000070F8 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 40277                                  error_return:	 ;17/12/2022
 40278 000070F9 C3                      	retn				  ;AN000;;EO. return with error
 40279                                  
 40280                                  	; 17/12/2022
 40281                                  ok_return:
 40282                                  ok_return2:
 40283 000070FA E93A95                  	jmp	SYS_RET_OK
 40284                                  
 40285                                  exist_open:				  ;AN000;
 40286 000070FD 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 40287 00007103 7402                    	jz	short noserver		  ;AN000;;EO. no
 40288 00007105 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 40289                                  noserver:
 40290 00007107 E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 40291 0000710A 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 40292 0000710C 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 40293 00007112 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 40294                                  local_extopen:
 40295                                  	;cmp	ax,2
 40296 00007114 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 40297 00007117 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 40298                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 40299                                  	; 17/12/2022
 40300 00007119 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 40301                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 40302                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 40303                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 40304                                  	; 17/12/2022
 40305 0000711F 745D                    	jz	short extexit ; 10/06/2019
 40306                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40307                                  	;jnz	short do_creat
 40308                                  	;jmp	short extexit
 40309                                  do_creat:
 40310 00007121 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 40311 00007126 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 40312 0000712B 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 40313 0000712D E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 40314 00007130 724C                    	JC	short extexit 		  ;AN000;;EO. error
 40315                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40316 00007132 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40317                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 40318 00007139 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40319                                  
 40320                                  ext_ok:
 40321 0000713B 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 40322 00007141 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 40323                                  	;mov	word [SS:EXTOPEN_FLAG],1
 40324 00007143 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 40325                                  setXAttr:
 40326                                  	; 29/04/2019
 40327 0000714A 50                      	push	ax
 40328 0000714B E83393                  	call	Get_User_Stack		  ;AN000;;EO.
 40329 0000714E 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 40330                                  	;mov	[si+4],ax
 40331 00007152 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 40332 00007155 58                      	pop	ax			  ;AN000;;EO.
 40333 00007156 8904                    	mov	[si],ax
 40334                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 40335                                  	; 17/12/2022
 40336 00007158 EBA0                    	jmp	short ok_return
 40337                                  ;ok_return:				  ;AN000;
 40338                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 40339                                  
 40340                                  extexit2:				  ;AN000; ERROR RECOVERY
 40341 0000715A 5B                      	POP	BX			  ;AN000;EO. close the handle
 40342 0000715B 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 40343                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 40344 0000715C 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40345                                  					  ;AN000;EO. from create;smr;SS Override
 40346 00007162 750C                    	JNZ	short justopen		  ;AN000;EO.
 40347 00007164 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 40348 00007169 C514                    	LDS	DX,[SI]			  ;AN000;EO.
 40349 0000716B E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 40350 0000716E EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 40351                                  
 40352                                  justopen:				  ;AN000;
 40353 00007170 E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 40354                                  reserror:				  ;AN000;
 40355 00007173 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 40356 00007174 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 40357                                  
 40358                                  ext_file_unfound:			  ;AN000;
 40359                                  	;mov	ax,2
 40360 00007176 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 40361 00007179 EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 40362                                  ext_inval:				  ;AN000;
 40363                                  	;mov	ax,1
 40364 0000717B B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 40365                                  lockoperr:	; 17/12/2022
 40366                                  extexit:
 40367 0000717E E9BF94                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 40368                                  
 40369                                  ;============================================================================
 40370                                  ; LOCK.ASM, MSDOS 6.0, 1991
 40371                                  ;============================================================================
 40372                                  ; 14/07/2018 - Retro DOS v3.0
 40373                                  ; 22/05/2019 - Retro DOS v4.0
 40374                                  
 40375                                  ;BREAK <$LockOper - Lock Calls>
 40376                                  ;----------------------------------------------------------------------------
 40377                                  ;
 40378                                  ;   Assembler usage:
 40379                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 40380                                  ;	    MOV     CX, OffsetHigh
 40381                                  ;	    MOV     DX, OffsetLow
 40382                                  ;	    MOV     SI, LengthHigh
 40383                                  ;	    MOV     DI, LengthLow
 40384                                  ;	    MOV     AH, LockOper
 40385                                  ;	    MOV     AL, Request
 40386                                  ;	    INT     21h
 40387                                  ;
 40388                                  ;   Error returns:
 40389                                  ;	    AX = error_invalid_handle
 40390                                  ;	       = error_invalid_function
 40391                                  ;	       = error_lock_violation
 40392                                  ;
 40393                                  ;   Assembler usage:
 40394                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 40395                                  ;
 40396                                  ;				    0? lock all
 40397                                  ;				    8? lock write
 40398                                  ;				    ?2 lock multiple
 40399                                  ;				    ?3 unlock multiple
 40400                                  ;				    ?4 lock/read
 40401                                  ;				    ?5 write/unlock
 40402                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 40403                                  ;	    MOV     BX, Handle
 40404                                  ;	    MOV     CX, count or size
 40405                                  ;	    LDS     DX, buffer
 40406                                  ;	    INT     21h
 40407                                  ;
 40408                                  ;   Error returns:
 40409                                  ;	    AX = error_invalid_handle
 40410                                  ;	       = error_invalid_function
 40411                                  ;	       = error_lock_violation
 40412                                  ;
 40413                                  ;----------------------------------------------------------------------------
 40414                                  
 40415                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40416                                  _$LockOper:
 40417 00007181 3C01                    	CMP	AL,1
 40418 00007183 770B                    	JA	short lock_bad_func
 40419                                  
 40420 00007185 57                      	PUSH	DI			       ; Save LengthLow
 40421 00007186 E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 40422 00007189 731D                    	JNC	short lock_do 		       ; have valid handle
 40423 0000718B 5F                      	POP	DI			       ; Clean stack
 40424                                  	;mov	al,6
 40425 0000718C B006                    	mov	al,error_invalid_handle
 40426                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40427                                  ;lockoperr:
 40428                                  	;jmp	SYS_RET_ERR
 40429                                  	; 17/12/2022
 40430 0000718E EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 40431                                  
 40432                                  lock_bad_func:
 40433                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40434 00007190 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40435                                  	;mov	al,1
 40436 00007196 B001                    	mov	al,error_invalid_function
 40437                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40438                                  lockoperrj:
 40439                                  	;jmp	SYS_RET_ERR
 40440 00007198 EBE4                    	jmp	short lockoperr
 40441                                  
 40442                                  	; 22/05/2019 - Retro DOS v4.0
 40443                                  
 40444                                  	; MSDOS 6.0 
 40445                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40446                                  ; Dead code deleted, MD, 23 Mar 90
 40447                                  
 40448                                  ;lock_do:
 40449                                  ;	; MSDOS 3.3
 40450                                  ;	or	al,al
 40451                                  ;	pop	ax
 40452                                  ;	jz	short DOS_Lock
 40453                                  ;DOS_Unlock:
 40454                                  ;	;test	word [es:di+5],8000h
 40455                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40456                                  ;	JZ	short LOCAL_UNLOCK
 40457                                  ;	push    ax
 40458                                  ;	mov     ax,110Bh
 40459                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40460                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40461                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40462                                  ;			; SFT DPB field -> DPB of drive containing file
 40463                                  ;			; Return: CF set error
 40464                                  ;	pop     bx
 40465                                  ;	jmp     short ValChk
 40466                                  ;
 40467                                  ;LOCAL_UNLOCK:
 40468                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40469                                  ;ValChk:
 40470                                  ;	JNC	short Lock_OK
 40471                                  ;lockerror:
 40472                                  ;	jmp	SYS_RET_ERR
 40473                                  ;Lock_OK:
 40474                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40475                                  ;	jmp	SYS_RET_OK
 40476                                  ;DOS_Lock:
 40477                                  ;	;test	word [es:di+5],8000h
 40478                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40479                                  ;	JZ	short LOCAL_LOCK
 40480                                  ;	;CallInstall NET_XLock,MultNET,10
 40481                                  ;	mov     ax, 110Ah
 40482                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40483                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40484                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40485                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40486                                  ;			; Return: CF set error
 40487                                  ;	JMP	short ValChk
 40488                                  ;
 40489                                  ;LOCAL_LOCK:
 40490                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40491                                  ;	JMP	short ValChk
 40492                                  
 40493                                  ; 17/12/2022
 40494                                  LOCAL_UNLOCK:
 40495                                  	; MSDOS 3.3
 40496                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40497                                  	; MSDOS 6.0
 40498 0000719A FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40499                                  ValChk:
 40500 0000719E 7302                    	JNC	short Lock_OK
 40501                                  lockerror:
 40502                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40503                                  	;;jmp	SYS_RET_ERR
 40504                                  	;jmp	short lockoperrj
 40505                                  	; 17/12/2022
 40506 000071A0 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40507                                  Lock_OK:
 40508                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40509                                  	; 10/06/2019
 40510 000071A2 A1[0C06]                	mov	ax,[TEMP_VAR]
 40511 000071A5 E98F94                  	jmp	SYS_RET_OK
 40512                                  
 40513                                  	; 22/05/2019
 40514                                  lock_do:
 40515                                  	; MSDOS 6.0
 40516 000071A8 89C3                    	MOV	BX,AX				; save AX
 40517 000071AA BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40518                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40519                                  	;;mov	[bp+0],dx
 40520                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40521                                  	; 15/12/2022
 40522 000071AD 895600                  	mov	[bp],dx
 40523                                  	;mov	[bp+2],cx
 40524 000071B0 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40525 000071B3 59                      	POP	CX				; get low length
 40526                                  	;mov	[bp+4],cx
 40527 000071B4 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40528                                  	;mov	[bp+6],si
 40529 000071B7 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40530 000071BA B90100                  	MOV	CX,1				; one range
 40531                                  
 40532                                  ;	PUSH	CS				;
 40533                                  ;	POP	DS				; DS:DX points to
 40534                                  
 40535 000071BD 16                      	push	ss
 40536 000071BE 1F                      	pop	ds
 40537                                  
 40538 000071BF 89EA                    	MOV	DX,BP				; Lock_Buffer
 40539                                  	;test	al,1
 40540 000071C1 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40541                                  	;JNZ	short DOS_Unlock		; yes
 40542                                  	;JMP	short DOS_Lock			; function 0
 40543                                  	; 17/12/2022
 40544                                  	; 10/06/2019
 40545 000071C3 740E                    	jz	short DOS_Lock
 40546                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40547                                  	;JNZ	short DOS_Unlock
 40548                                  	;JMP	short DOS_Lock
 40549                                  
 40550                                  DOS_Unlock:
 40551                                  	;;test	word [es:di+5],8000h
 40552                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40553 000071C5 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40554 000071CA 74CE                    	JZ	short LOCAL_UNLOCK
 40555                                  
 40556                                  lock_unlock: ; 22/05/2019
 40557                                  	
 40558                                  	;CallInstall Net_Xlock,MultNET,10
 40559                                  	
 40560                                  	; MSDOS 3.3
 40561                                  	;mov     ax,110Bh
 40562                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40563                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40564                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 40565                                  			; SFT DPB field -> DPB of drive containing file
 40566                                  			; Return: CF set error
 40567                                  	; MSDOS 6.0
 40568 000071CC B80A11                  	mov     ax,110Ah
 40569 000071CF CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40570                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40571                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40572                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40573                                  			; Return: CF set error
 40574                                  
 40575 000071D1 EBCB                    	JMP	SHORT ValChk
 40576                                  
 40577                                  ; 17/12/2022
 40578                                  %if 0
 40579                                  LOCAL_UNLOCK:
 40580                                  	; MSDOS 3.3
 40581                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40582                                  	; MSDOS 6.0
 40583                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40584                                  ValChk:
 40585                                  	JNC	short Lock_OK
 40586                                  lockerror:
 40587                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40588                                  	;jmp	SYS_RET_ERR
 40589                                  	jmp	short lockoperrj
 40590                                  Lock_OK:
 40591                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40592                                  	; 10/06/2019
 40593                                  	mov	ax,[TEMP_VAR]
 40594                                  	jmp	SYS_RET_OK
 40595                                  %endif
 40596                                  
 40597                                  DOS_Lock:
 40598                                  	;;test	word [es:di+5],8000h
 40599                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40600 000071D3 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40601 000071D8 7407                    	JZ	short LOCAL_LOCK
 40602                                  
 40603                                  	;CallInstall NET_XLock,MultNET,10
 40604                                  
 40605 000071DA B80A11                  	mov     ax,110Ah
 40606 000071DD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40607                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40608                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40609                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40610                                  			; Return: CF set error
 40611                                  
 40612 000071DF EBBD                    	JMP	short ValChk
 40613                                  
 40614                                  LOCAL_LOCK:
 40615                                  	; MSDOS 3.3
 40616                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40617                                  	; MSDOS 6.0
 40618 000071E1 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40619                                  
 40620 000071E5 EBB7                    	JMP	short ValChk
 40621                                  
 40622                                  ; 14/07/2018 - Retro DOS v3.0
 40623                                  ; LOCK_CHECK
 40624                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40625                                  
 40626                                  ;----------------------------------------------------------------------------
 40627                                  ; Inputs:
 40628                                  ;	Outputs of SETUP
 40629                                  ;	[USER_ID] Set
 40630                                  ;	[PROC_ID] Set
 40631                                  ; Function:
 40632                                  ;	Check for lock violations on local I/O
 40633                                  ;	Retries are attempted with sleeps in between
 40634                                  ; Outputs:
 40635                                  ;    Carry clear
 40636                                  ;	Operation is OK
 40637                                  ;    Carry set
 40638                                  ;	A lock violation detected
 40639                                  ; Outputs of SETUP preserved
 40640                                  ;----------------------------------------------------------------------------
 40641                                  
 40642                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40643                                  	; 22/05/2019 - Retro DOS v4.0
 40644                                  LOCK_CHECK:
 40645 000071E7 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 40646                                  LockRetry:
 40647 000071EB 53                      	push	bx		; save regs
 40648 000071EC 50                      	push	ax ; MSDOS 6.0
 40649                                  
 40650                                  	;MSDOS 3.3
 40651                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 40652                                  	;MSDOS 6.0
 40653 000071ED FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 40654                                  
 40655 000071F1 58                      	pop	ax ; MSDOS 6.0
 40656 000071F2 5B                      	pop	bx		; restrore regs
 40657 000071F3 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 40658                                  LockN:
 40659 000071F5 E8F49F                  	call	Idle		; wait a while
 40660 000071F8 4B                      	DEC	BX		; remember a retry
 40661 000071F9 75F0                    	JNZ	short LockRetry	; more retries left...
 40662 000071FB F9                      	STC
 40663                                  lc_ret_label:
 40664 000071FC C3                      	retn
 40665                                  
 40666                                  ; 14/07/2018 - Retro DOS v3.0
 40667                                  ; LOCK_VIOLATION
 40668                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40669                                  
 40670                                  ;----------------------------------------------------------------------------
 40671                                  ; Inputs:
 40672                                  ;	[THISDPB] set
 40673                                  ;	[READOP] indicates whether error on read or write
 40674                                  ; Function:
 40675                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 40676                                  ; Outputs:
 40677                                  ;	Carry set if user says FAIL, causes error_lock_violation
 40678                                  ;	Carry clear if user wants a retry
 40679                                  ;
 40680                                  ; DS, ES, DI, CX preserved, others destroyed
 40681                                  ;----------------------------------------------------------------------------
 40682                                  
 40683                                  LOCK_VIOLATION:
 40684 000071FD 1E                      	PUSH	DS
 40685 000071FE 06                      	PUSH	ES
 40686 000071FF 57                      	PUSH	DI
 40687 00007200 51                      	PUSH	CX
 40688                                  	;mov	ax,21h
 40689 00007201 B82100                  	MOV	AX,error_lock_violation
 40690                                  	;mov	byte [ALLOWED],18h
 40691 00007204 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40692 00007209 C42E[8A05]              	LES	BP,[THISDPB]
 40693 0000720D BF0100                  	MOV	DI,1		; Fake some registers
 40694 00007210 89F9                    	MOV	CX,DI
 40695                                  	;mov	dx,[es:bp+11]
 40696 00007212 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 40697 00007216 E8D8DF                  	call	HARDERR
 40698 00007219 59                      	POP	CX
 40699 0000721A 5F                      	POP	DI
 40700 0000721B 07                      	POP	ES
 40701 0000721C 1F                      	POP	DS
 40702 0000721D 3C01                    	CMP	AL,1
 40703 0000721F 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 40704 00007221 F9                      	STC
 40705 00007222 C3                      	retn
 40706                                  
 40707                                  ; 14/07/2018 - Retro DOS v3.0
 40708                                  
 40709                                  ;----------------------------------------------------------------------------
 40710                                  
 40711                                  ;	do a retz to return error
 40712                                  
 40713                                  	; 22/05/2019 - Retro DOS v4.0
 40714                                  CheckShare:
 40715                                  	; MSDOS 3.3
 40716                                  	;cmp	byte [cs:fShare],0
 40717                                  	;retn
 40718                                  
 40719                                  	; MSDOS 6.0
 40720 00007223 1E                      	push	ds			;smr;
 40721                                  	;getdseg <ds>			; ds -> dosdata
 40722 00007224 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 40723 00007229 803E[0303]00            	cmp	byte [fShare],0
 40724 0000722E 1F                      	pop	ds			;smr;
 40725 0000722F C3                      	retn
 40726                                  	
 40727                                  ;============================================================================
 40728                                  ; SHARE.ASM, MSDOS 6.0, 1991
 40729                                  ;============================================================================
 40730                                  ; 14/07/2018 - Retro DOS v3.0
 40731                                  ; 22/05/2019 - Retro DOS v4.0
 40732                                  
 40733                                  ; SHARE_CHECK
 40734                                  ;----------------------------------------------------------------------------
 40735                                  ; Inputs:
 40736                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 40737                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 40738                                  ;       [WFP_START] has full path of name
 40739                                  ;       [USER_ID] Set
 40740                                  ;       [PROC_ID] Set
 40741                                  ; Function:
 40742                                  ;       Check for sharing violations on local file/device access
 40743                                  ; Outputs:
 40744                                  ;    Carry clear
 40745                                  ;       Sharing approved
 40746                                  ;    Carry set
 40747                                  ;       A sharing violation detected
 40748                                  ;           AX is error code
 40749                                  ; USES    ALL but DS
 40750                                  ;----------------------------------------------------------------------------
 40751                                  
 40752                                  	; 22/05/2019 - Retro DOS v4.0
 40753                                  SHARE_CHECK:
 40754                                  	; 26/07/2019
 40755 00007230 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 40756                                  shchk_retn:
 40757 00007234 C3                      	retn
 40758                                  
 40759                                  ; SHARE_VIOLATION
 40760                                  ;----------------------------------------------------------------------------
 40761                                  ; Inputs:
 40762                                  ;       [THISDPB] Set
 40763                                  ;       AX has error code
 40764                                  ; Function:
 40765                                  ;       Handle Sharing errors
 40766                                  ; Outputs:
 40767                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 40768                                  ;       Carry clear if user wants a retry
 40769                                  ;
 40770                                  ; DS, ES, DI preserved, others destroyed
 40771                                  ;----------------------------------------------------------------------------
 40772                                  
 40773                                  SHARE_VIOLATION:
 40774 00007235 1E                      	PUSH    DS
 40775 00007236 06                      	PUSH	ES
 40776 00007237 57                      	PUSH    DI
 40777 00007238 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 40778                                  	;mov	byte [ALLOWED],18h
 40779 0000723D C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40780 00007242 C42E[8A05]              	LES     BP,[THISDPB]
 40781 00007246 BF0100                  	MOV     DI,1			; Fake some registers
 40782 00007249 89F9                    	MOV     CX,DI
 40783                                  	;mov	dx,[es:bp+17]
 40784 0000724B 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 40785 0000724F E89FDF                  	call	HARDERR
 40786 00007252 5F                      	POP     DI
 40787 00007253 07                      	POP	ES
 40788 00007254 1F                      	POP     DS
 40789 00007255 3C01                    	CMP     AL,1
 40790 00007257 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 40791 00007259 F9                      	STC
 40792 0000725A C3                      	retn
 40793                                  
 40794                                  ;----------------------------------------------------------------------------
 40795                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 40796                                  ;       NOT perform a close, it merely asserts that the sharing information
 40797                                  ;       for the SFT/UID/PID may be safely released.
 40798                                  ;
 40799                                  ;   Inputs:     ES:DI points to an SFT
 40800                                  ;   Outputs:    None
 40801                                  ;   Registers modified: all except DS,ES,DI
 40802                                  ;----------------------------------------------------------------------------
 40803                                  
 40804                                  ShareEnd:
 40805                                  	; 26/07/2019
 40806 0000725B FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 40807 0000725F C3                      	retn
 40808                                  
 40809                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 40810                                  ;----------------------------------------------------------------------------
 40811                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 40812                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 40813                                  ;
 40814                                  ;   Inputs:     ThisSFT points to the SFT
 40815                                  ;               WFP_Start points to the WFP
 40816                                  ;   Outputs:    Carry clear => successful entry
 40817                                  ;               Carry set => failed system call
 40818                                  ;   Registers modified: all
 40819                                  ;----------------------------------------------------------------------------
 40820                                  
 40821                                  ShareEnter:
 40822 00007260 51                      	push	cx
 40823                                  retry:
 40824 00007261 8B0E[1A00]              	mov     cx,[RetryCount]
 40825                                  attempt:
 40826 00007265 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 40827 00007269 31C0                    	XOR     AX,AX
 40828                                   	;mov	[es:di+51],axfff
 40829 0000726B 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 40830 0000726F 51                      	push	cx
 40831 00007270 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 40832 00007273 59                      	pop	cx
 40833 00007274 730A                    	jnc	short done		; success, let the user see this
 40834 00007276 E8739F                  	call	Idle                    ; wait a while
 40835 00007279 E2EA                    	loop    attempt                 ; go back for another attempt
 40836 0000727B E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 40837 0000727E 73E1                    	jnc	short retry		; user said to retry, go do it
 40838                                  done:
 40839 00007280 59                      	pop	cx
 40840 00007281 C3                      	retn
 40841                                  
 40842                                  ;============================================================================
 40843                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 40844                                  ;============================================================================
 40845                                  ; 29/04/2019 - Retro DOS 4.0
 40846                                  
 40847                                  ;** EXEPATCH.ASM 
 40848                                  ;----------------------------------------------------------------------------
 40849                                  ;	Contains the foll:
 40850                                  ;
 40851                                  ;		- code to find and overlay buggy unpack code
 40852                                  ;		- new code to be overlayed on buggy unpack code 
 40853                                  ;		- old code sequence to identify buggy unpack code
 40854                                  ;
 40855                                  ;	Revision history:
 40856                                  ;
 40857                                  ;		Created: 5/14/90
 40858                                  ;----------------------------------------------------------------------------
 40859                                  
 40860                                  ;----------------------------------------------------------------------------
 40861                                  ;
 40862                                  ; M020 : Fix for rational bug - for details see routine header
 40863                                  ; M028 : 4b04 implementation
 40864                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 40865                                  ; M032 : set turnoff bit only if DOS in HMA.
 40866                                  ; M033 : if IP < 2 then not exepacked.
 40867                                  ; M046 : support for a 4th version of exepacked files.
 40868                                  ; M068 : support for copy protected apps.
 40869                                  ; M071 : use A20OFF_COUNT of 10.
 40870                                  ;
 40871                                  ;----------------------------------------------------------------------------
 40872                                  
 40873                                  PATCH1_COM_OFFSET	EQU	06CH
 40874                                  PATCH1_OFFSET		EQU	028H
 40875                                  PATCH1_CHKSUM		EQU	0EF4EH
 40876                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 40877                                  
 40878                                  PATCH2_COM_OFFSET	EQU	076H
 40879                                  PATCH2_OFFSET		EQU	032H
 40880                                  
 40881                                  	; The strings that start at offset 076h have two possible 
 40882                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 40883                                  
 40884                                  PATCH2_CHKSUM		EQU	78B2H
 40885                                  CHKSUM2_LEN		EQU	119H/2
 40886                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 40887                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 40888                                  
 40889                                  PATCH3_COM_OFFSET	EQU	074H
 40890                                  PATCH3_OFFSET		EQU	032H
 40891                                  PATCH3_CHKSUM		EQU	4EDEH
 40892                                  CHKSUM3_LEN		EQU	117H/2
 40893                                  
 40894                                  ;**	Data structure passed for ExecReady call
 40895                                  ;
 40896                                  ;struc ERStruc
 40897                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 40898                                  ; .ER_Flags:	resw	1
 40899                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 40900                                  ; .ER_PSP:	resw	1	; PSP of the program
 40901                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 40902                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 40903                                  ; .size:
 40904                                  ;endstruc
 40905                                  
 40906                                  ;DOSCODE SEGMENT
 40907                                  
 40908                                  	; 22/05/2019 - Retro DOS v4.0
 40909                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 40910                                  
 40911                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40912                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 40913                                  
 40914                                  ; M028 - BEGIN
 40915                                  
 40916                                  ;--------------------------------------------------------------------------
 40917                                  ;
 40918                                  ;	Procedure Name		: ExecReady
 40919                                  ;
 40920                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 40921                                  ;
 40922                                  ;--------------------------------------------------------------------------
 40923                                  
 40924                                  ExecReady:
 40925 00007282 89D6                    	mov	si,dx			; move the pointer into a friendly one
 40926                                  	;;test	word [si+2],1
 40927                                  	; 17/12/2022
 40928 00007284 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40929                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 40930 00007288 7413                    	jz	short er_setver		; only setver for .COM files
 40931                                  
 40932                                  	;mov	ax,[si+8]
 40933 0000728A 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 40934 0000728D 83C010                  	add	ax,10h
 40935 00007290 8EC0                    	mov	es,ax
 40936                                  
 40937                                  	;mov	cx,[si+10]
 40938 00007292 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 40939                                  	;mov	cx,[si+12]
 40940 00007295 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 40941                                  
 40942                                  	;call	[ss:FixExePatch]
 40943 00007298 36FF16[F311]            	call	word [ss:FixExePatch] ; 28/12/2022
 40944                                  	
 40945                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40946                                  	;call	[ss:Rational386PatchPtr]
 40947                                  
 40948                                  er_setver:
 40949                                  	;;test	word [si+2],2		; Q: is this an overlay
 40950                                  	; 17/12/2022
 40951 0000729D F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 40952                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 40953 000072A1 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 40954                                  					; N: set up lie version first
 40955 000072A3 1E                      	push	ds
 40956 000072A4 56                      	push	si
 40957                                  	;lds	si,[si+4]
 40958 000072A5 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40959 000072A8 E876ED                  	call	Scan_Execname1
 40960 000072AB E887ED                  	call	Scan_Special_Entries
 40961 000072AE 5E                      	pop	si
 40962 000072AF 1F                      	pop	ds
 40963                                  	;mov	es,[si+8]
 40964 000072B0 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40965 000072B3 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40966 000072B7 26A34000                	mov	[es:PDB.Version],ax
 40967                                  
 40968                                  er_chkdoshi:
 40969 000072BB 36803E[F211]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40970 000072C1 741F                    	je	short er_done		; M032: N: done
 40971                                  
 40972                                  					; M068 - Start
 40973                                  	;mov	ax,[si+8]
 40974 000072C3 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40975                                  
 40976                                  	;or	byte [ss:DOS_FLAG],4
 40977 000072C6 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40978                                  					; ah = 25 & ah= 49. See dossym.inc 
 40979                                  					; under TAG M003 & M009 for 
 40980                                  					; explanation
 40981                                  	;;test	word [si+2],1
 40982                                  	; 17/12/2022
 40983 000072CC F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40984                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40985 000072D0 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40986                                  					;    a20off_psp and ret
 40987 000072D2 1E                         	push	ds
 40988 000072D3 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40989 000072D5 E88E02                  	call	IsCopyProt		; check if copy protected
 40990 000072D8 1F                      	pop	ds
 40991                                  
 40992                                  er_setA20:
 40993                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40994                                  	; is non-zero at this point it indicates that the A20 is to be 
 40995                                  	; turned off for that many int 21 calls made by the app. In 
 40996                                  	; addition the A20 has to be turned off when we exit from this 
 40997                                  	; call. Hence the inc.
 40998                                  
 40999 000072D9 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 41000 000072DE 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 41001                                  					; turned OFF.
 41002                                  er_done:				; M068 - End
 41003 000072E2 31C0                    	xor	ax,ax
 41004 000072E4 C3                      	retn
 41005                                  
 41006                                  ; M028 - END
 41007                                  
 41008                                  
 41009                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41010                                  %if 0
 41011                                  
 41012                                  ;----------------------------------------------------------------------------
 41013                                  ;
 41014                                  ; procedure : Rational386Patch
 41015                                  ;
 41016                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 41017                                  ; 386 registers (usually just the high word of 32 bit registers) during
 41018                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 41019                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 41020                                  ;
 41021                                  ; This routine applies patches to the Rational DOS Extender to work around
 41022                                  ; most of the register trashing bugs.
 41023                                  ;
 41024                                  ; Note that there are additional register trashing bugs not fixed by these
 41025                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 41026                                  ; may be modified on interrupts.
 41027                                  ;
 41028                                  ; There are two different Rational DOS Extender patchs in this module.
 41029                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 41030                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 41031                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 41032                                  ; or not.
 41033                                  ;
 41034                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 41035                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 41036                                  ; running in the HMA.
 41037                                  ;
 41038                                  ; This patch detection and replacement is based on an example supplied by
 41039                                  ; Ben Williams at Rational.
 41040                                  ;
 41041                                  ;----------------------------------------------------------------------------
 41042                                  
 41043                                  ; 22/05/2019 - Retro DOS v4.0
 41044                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 41045                                  
 41046                                  ;----------------------------------------------------------------------------
 41047                                  ;
 41048                                  ; INPUT : ES = segment where program got loaded
 41049                                  ;
 41050                                  ;----------------------------------------------------------------------------
 41051                                  
 41052                                  rpFind1:
 41053                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 41054                                  
 41055                                  rpFind1Len equ	$ - rpFind1
 41056                                  
 41057                                  ;	cli
 41058                                  ;	in	al, 21h
 41059                                  ;	pusha
 41060                                  ;	xor	ax, ax
 41061                                  ;	out	43h, al
 41062                                  ;	mov	dx, ...
 41063                                  
 41064                                  rpFind1a:
 41065                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 41066                                  
 41067                                  rpFind1aLen equ	$ - rpFind1a
 41068                                  
 41069                                  ;	mov	al, 0Eh
 41070                                  ;	out	37h, al
 41071                                  ;	xor	ax, ax
 41072                                  ;	out	0F2h, al
 41073                                  
 41074                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41075                                  
 41076                                  rpFind2:
 41077                                  	db	0Fh, 20h, 0C0h
 41078                                  
 41079                                  rpFind2Len equ	$ - rpFind2
 41080                                  
 41081                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 41082                                  
 41083                                  rpFind3:
 41084                                  	db	0Fh, 22h, 0C0h, 0EAh
 41085                                  
 41086                                  rpFind3Len equ	$ - rpFind3
 41087                                  
 41088                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 41089                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 41090                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 41091                                  
 41092                                  ; note, there is no rpRepl1 string
 41093                                  
 41094                                  rpRepl2:
 41095                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 41096                                  
 41097                                  rpRepl2Len equ	$ - rpRepl2
 41098                                  
 41099                                  ;	push	eax
 41100                                  ;	push	cx
 41101                                  ;	mov	eax, cr0
 41102                                  
 41103                                  rpRepl3:
 41104                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 41105                                  
 41106                                  rpRepl3Len equ	$ - rpRepl3
 41107                                  
 41108                                  ;	mov	ss, bx
 41109                                  ;	pop	cx
 41110                                  ;	pop	eax
 41111                                  
 41112                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 41113                                  
 41114                                  rpFind4:
 41115                                  	db	93h, 58h, 8Bh, 0CCh
 41116                                  
 41117                                  rpFind4Len equ	$ - rpFind4
 41118                                  
 41119                                  ;	xchg	bx, ax
 41120                                  ;	pop	ax
 41121                                  ;	mov	cx, sp
 41122                                  
 41123                                  rpFind5:
 41124                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 41125                                  
 41126                                  rpFind5Len equ	$ - rpFind5
 41127                                  
 41128                                  ;	mov	ax, DE0Ch
 41129                                  ;	int	67h
 41130                                  ;	mov	sp, cx
 41131                                  ;	jmp	bx
 41132                                  
 41133                                  rpRepl4:
 41134                                  	db	93h, 58h, 8Bh, 0CCh
 41135                                  	db	02Eh, 066h, 0A3h
 41136                                  
 41137                                  rpRepl4o1Len equ $ - rpRepl4
 41138                                  
 41139                                  	db	00h, 00h
 41140                                  	db	02Eh, 066h, 89h, 36h
 41141                                  
 41142                                  rpRepl4o2Len equ $ - rpRepl4
 41143                                  
 41144                                  	db	00h, 00h
 41145                                  
 41146                                  rpRepl4Len equ	$ - rpRepl4
 41147                                  
 41148                                  ;	xchg	bx, ax
 41149                                  ;	pop	ax
 41150                                  ;	mov	cx, sp
 41151                                  ;	mov	dword ptr cs:[xxxx], eax
 41152                                  ;	mov	dword ptr cs:[xxxx], esi
 41153                                  
 41154                                  rpRepl5:
 41155                                  	db	8Bh, 0E1h
 41156                                  	db	2Eh, 66h, 0A1h
 41157                                  
 41158                                  rpRepl5o1Len equ $ - rpRepl5
 41159                                  
 41160                                  	db	00h, 00h
 41161                                  	db	2Eh, 66h, 8Bh, 36h
 41162                                  
 41163                                  rpRepl5o2Len equ $ - rpRepl5
 41164                                  
 41165                                  	db	00h, 00h
 41166                                  	db	0FFh, 0E3h
 41167                                  
 41168                                  rpRepl5Len equ	$ - rpRepl5
 41169                                  
 41170                                  ;	mov	sp, cx
 41171                                  ;	mov	eax, dword ptr cs:[xxxx]
 41172                                  ;	mov	esi, dword ptr cs:[xxxx]
 41173                                  ;	jmp	bx
 41174                                  
 41175                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 41176                                  
 41177                                  rpFind6:
 41178                                  	db	0FAh, 52h, 51h
 41179                                  
 41180                                  rpFind6Len equ	$ - rpFind6
 41181                                  
 41182                                  ;	cli
 41183                                  ;	push	dx
 41184                                  ;	push	cx
 41185                                  
 41186                                  rpFind7a:
 41187                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 41188                                  
 41189                                  rpFind7aLen equ	$ - rpFind7a
 41190                                  
 41191                                  ;	mov	ax, 0DE0Ch
 41192                                  ;	call	fword ptr es:[xxxx]
 41193                                  
 41194                                  rpFind7b:
 41195                                  	db	59h, 5Ah, 5Bh
 41196                                  
 41197                                  rpFind7bLen equ	$ - rpFind7b
 41198                                  
 41199                                  ;	pop	cx
 41200                                  ;	pop	dx
 41201                                  ;	pop	bx
 41202                                  
 41203                                  rpRepl6 :
 41204                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 41205                                  
 41206                                  rpRepl6Len equ	$ - rpRepl6
 41207                                  
 41208                                  ;	cli
 41209                                  ;	push	eax
 41210                                  ;	push	ebx
 41211                                  ;	push	ecx
 41212                                  ;	push	edx
 41213                                  
 41214                                  rpRepl7:
 41215                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 41216                                  
 41217                                  rpRepl7Len equ	$ - rpRepl7
 41218                                  
 41219                                  ;	pop	edx
 41220                                  ;	pop	ecx
 41221                                  ;	pop	ebx
 41222                                  ;	pop	eax
 41223                                  ;	pop	bx
 41224                                  
 41225                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 41226                                  
 41227                                  rpFind8:
 41228                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 41229                                  
 41230                                  rpFind8Len equ	$ - rpFind8
 41231                                  
 41232                                  ;	pusha
 41233                                  ;	push	es
 41234                                  ;	push	ds
 41235                                  ;	mov	ax, dgroup	;jump back to here from replace8
 41236                                  ;	mov	ds, ax
 41237                                  
 41238                                  rpFind9 :
 41239                                  	db	1Fh, 07h, 61h
 41240                                  
 41241                                  rpFind9Len equ	$ - rpFind9
 41242                                  
 41243                                  ;	pop	ds
 41244                                  ;	pop	es
 41245                                  ;	popa
 41246                                  
 41247                                  rpRepl8:
 41248                                   	db	66h, 60h, 06h, 1Eh
 41249                                  
 41250                                  rpRepl8Len equ	$ - rpRepl8
 41251                                  
 41252                                  ;	pushad
 41253                                  ;	push	es
 41254                                  ;	push	ds
 41255                                  
 41256                                  rpRepl9:
 41257                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 41258                                  
 41259                                  rpRepl9Len equ	$ - rpRepl9
 41260                                  
 41261                                  ;	pop	ds
 41262                                  ;	pop	es
 41263                                  ;	popad
 41264                                  ;	retn			;no need to jmp back to main-line
 41265                                  
 41266                                  ;----------------------------------------------------------------------------
 41267                                  
 41268                                  struc SearchPair
 41269                                   .sp_off1: resw 1	; offset of 1st search string
 41270                                   .sp_len1: resw 1	; length of 1st search string
 41271                                   .sp_off2: resw 1	; 2nd string
 41272                                   .sp_len2: resw 1	; 2nd string
 41273                                   .sp_diff: resw 1	; max difference between offsets
 41274                                   .size:
 41275                                  endstruc
 41276                                  
 41277                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 41278                                  
 41279                                  rpBug1Strs:
 41280                                  	dw	rpFind2
 41281                                  	dw	rpFind2Len ; 3
 41282                                  	dw	rpFind3
 41283                                  	dw	rpFind3Len ; 4
 41284                                  	dw	20h
 41285                                  
 41286                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 41287                                  
 41288                                  rpBug2Strs:
 41289                                  	dw	rpFind4
 41290                                  	dw	rpFind4Len ; 4
 41291                                  	dw	rpFind5
 41292                                  	dw	rpFind5Len ; 9
 41293                                  	dw	80h
 41294                                  
 41295                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 41296                                  
 41297                                  rpBug3Strs:
 41298                                  	dw	rpFind6
 41299                                  	dw	rpFind6Len ; 3
 41300                                  	dw	rpFind7a
 41301                                  	dw	rpFind7aLen ; 7
 41302                                  	dw	80h
 41303                                  
 41304                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 41305                                  
 41306                                  rpBug4Strs:
 41307                                  	dw	rpFind8
 41308                                  	dw	4
 41309                                  	dw	rpFind9
 41310                                  	dw	rpFind9Len ; 3
 41311                                  	dw	80h
 41312                                  
 41313                                  ;----------------------------------------------------------------------------
 41314                                  
 41315                                  struc StackVars
 41316                                   .sv_wVersion:	resw 1		; Rational extender version #
 41317                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 41318                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 41319                                   .size:
 41320                                  endstruc
 41321                                  
 41322                                  ;----------------------------------------------------------------------------
 41323                                  
 41324                                  ; 22/05/2019 - Retro DOS v4.0
 41325                                  
 41326                                  Rational386Patch:
 41327                                  	; Do a few quick checks to see if this looks like a Rational
 41328                                  	; Extended application. Hopefully this will quickly weed out
 41329                                  	; most non Rational apps.
 41330                                  
 41331                                  	cmp	word [es:0],395		; version number goes here - versions
 41332                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 41333                                  
 41334                                  	cmp	word [es:0Ch],20h	; always has this value here
 41335                                  	jne	short rp3QuickOut
 41336                                  
 41337                                  	push	ax
 41338                                  
 41339                                  	mov	ax,18h 			; extender has 18h at
 41340                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 41341                                  	jne	short rp3QO_ax
 41342                                  	cmp	[es:28],ax
 41343                                  	jne	short rp3QO_ax
 41344                                  	cmp	[es:36],ax
 41345                                  	je	short rp3Maybe
 41346                                  rp3QO_ax:
 41347                                  	pop	ax
 41348                                  rp3QuickOut:
 41349                                  	retn
 41350                                  
 41351                                  ; It might be the rational extender, do more extensive checking
 41352                                  
 41353                                  rp3Maybe:
 41354                                  	cld
 41355                                  	push	bx			; note ax pushed above
 41356                                  	push	cx
 41357                                  	push	dx
 41358                                  	push	si
 41359                                  	push	di
 41360                                  	push	es
 41361                                  	push	ds			; we use all of them
 41362                                  	push	bp
 41363                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 41364                                  	mov	bp,sp
 41365                                  
 41366                                  	push	cs
 41367                                  	pop	ds
 41368                                  
 41369                                  	mov	ax,[es:0]		; save version #
 41370                                  	;mov	[bp+StackVars.sv_wVersion],ax
 41371                                  	mov	[bp],ax	
 41372                                  					; check that binary version # matches
 41373                                  	call	VerifyVersion		;   ascii string
 41374                                  	jne	short rp3Exit_j
 41375                                  
 41376                                  ; Looks like this is it, find where to put the patch code.  The
 41377                                  ; patch will be located on top of Rational code specific to 80286
 41378                                  ; processors, so these patchs MUST NOT be applied if running on
 41379                                  ; an 80286 system.
 41380                                  
 41381                                  	; Rational says the code to patch will never be beyond offset 46xxh
 41382                                  
 41383                                  	mov	cx,4500h		; force search len to 4700h (searches
 41384                                  	;mov	[bp+2],cx
 41385                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 41386                                  
 41387                                  	mov	es,[es:20h]		; es=code segment
 41388                                  
 41389                                  	mov	si,rpFind1		; string to find
 41390                                  	mov	dx,rpFind1Len ; 10	; length to match
 41391                                  	call	ScanCodeSeq		; look for code seq
 41392                                  	jz	short rpGotPatch
 41393                                  
 41394                                  ; According to Rational, some very old versions of the extender may not
 41395                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 41396                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 41397                                  
 41398                                  	mov	si,rpFind1a
 41399                                  	mov	dx,rpFind1aLen  ;8
 41400                                  	call	ScanCodeSeq
 41401                                  	jz	short rpGotPatch
 41402                                  
 41403                                  rp3Exit_j:
 41404                                  	jmp	rp3Exit
 41405                                  
 41406                                  ; Found the location to write patch code! DI = offset in code seg.
 41407                                  
 41408                                  rpGotPatch:
 41409                                  	;mov	[bp+4],di
 41410                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41411                                  
 41412                                  ;----------------------------------------------------------------------------
 41413                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41414                                  
 41415                                  	;cmp	word [bp+0],381
 41416                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41417                                  	cmp	word [bp],381
 41418                                  	jae	short rpBug2			;   < 3.81
 41419                                  
 41420                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41421                                  	call	FindBadCode
 41422                                  	jc	short rpBug2
 41423                                  
 41424                                  ; si = rpFind2 offset, di = rpFind3 offset
 41425                                  
 41426                                  	push	di
 41427                                  	mov	di,si				; rpFind2 offset
 41428                                  	mov	dx,rpFind2Len ; 3
 41429                                  
 41430                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41431                                  	jne	short rp_no_cx
 41432                                  
 41433                                  	dec	di				;   yes, gobble up push cx too
 41434                                  	inc	dx
 41435                                  rp_no_cx:
 41436                                  	mov	si,rpRepl2			; patch out find2 sequence
 41437                                  	mov	cx,rpRepl2Len  ; 6
 41438                                  	call	GenPatch
 41439                                  
 41440                                  	pop	di				; rpFind3 offset
 41441                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41442                                  	jne	short rp_no_cx2
 41443                                  
 41444                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41445                                  rp_no_cx2:
 41446                                  	;mov	ax,[bp+4]
 41447                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41448                                  	;mov	[es:di+4],ax
 41449                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41450                                  
 41451                                  	push	di				; save find3 offset
 41452                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41453                                  	mov	cx,rpRepl3Len ; 5
 41454                                  	call	CopyPatch
 41455                                  
 41456                                  	pop	bx				; find3 offset
 41457                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41458                                  	call	GenJump 			; jmp back from patch area
 41459                                  	;mov	[bp+4],di
 41460                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41461                                  						;   area pointer
 41462                                  
 41463                                  ;----------------------------------------------------------------------------
 41464                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41465                                  
 41466                                  rpBug2:
 41467                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41468                                  	call	FindBadCode
 41469                                  	jc	short rpBug3
 41470                                  
 41471                                  ; si = rpFind4 offset, di = rpFind5 offset
 41472                                  
 41473                                  	;push	word [bp+4]
 41474                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41475                                  						;   (where repl4 goes)
 41476                                  	push	di				; save find5 offset
 41477                                  
 41478                                  	mov	di,si
 41479                                  	mov	dx,rpFind4Len ; 4
 41480                                  	mov	si,rpRepl4
 41481                                  	mov	cx,rpRepl4Len ; 15
 41482                                  	call	GenPatch			; patch out find4 code
 41483                                  
 41484                                  	pop	di				; find5 offset
 41485                                  	add	di,5				; keep 5 bytes of find5 code
 41486                                  	;mov	bx,[bp+4]
 41487                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41488                                  	push	bx				; save repl5 location
 41489                                  	call	GenJump
 41490                                  
 41491                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41492                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41493                                  	call	CopyPatch			;   so no need to jmp back to
 41494                                  						;   main-line code
 41495                                  
 41496                                  ; patches have been made, now update the patch code to store/load dwords just
 41497                                  ; after the code in the patch area
 41498                                  
 41499                                  	pop	di				; repl5 location
 41500                                  	pop	si				; repl4 location
 41501                                  
 41502                                  	;mov	ax,[bp+4]
 41503                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41504                                  
 41505                                  	;mov	[es:si+7],ax
 41506                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41507                                  	;mov	[es:di+5],ax
 41508                                  	mov	[es:di+rpRepl5o1Len],ax
 41509                                  	add	ax,4
 41510                                  	;mov	[es:si+0Dh],ax
 41511                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41512                                  	;mov	[es:di+0Bh],ax
 41513                                  	mov	[es:di+rpRepl5o2Len],ax
 41514                                  
 41515                                  	;add	word [bp+4],8
 41516                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41517                                  						; patch area
 41518                                  
 41519                                  ;----------------------------------------------------------------------------
 41520                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41521                                  
 41522                                  rpBug3:
 41523                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41524                                  	call	FindBadCode
 41525                                  	jc	short rpBug4
 41526                                  
 41527                                  	;add	di,9
 41528                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41529                                  	push	si				;   code and locate find7b
 41530                                  	mov	si,rpFind7b			;   sequence
 41531                                  	mov	dx,rpFind7bLen ; 3
 41532                                  	call	ScanCodeSeq_di
 41533                                  	pop	si
 41534                                  	jnz	short rpBug4
 41535                                  
 41536                                  	push	di				; save find7b code offset
 41537                                  
 41538                                  	mov	di,si
 41539                                  	mov	dx,rpFind6Len ; 3
 41540                                  	mov	si,rpRepl6
 41541                                  	mov	cx,rpRepl6Len ; 9
 41542                                  	call	GenPatch			; patch out find6 code
 41543                                  
 41544                                  	pop	di
 41545                                  	mov	dx,rpFind7bLen ; 3
 41546                                  	mov	si,rpRepl7
 41547                                  	mov	cx,rpRepl7Len ; 9
 41548                                  	call	GenPatch			; patch out find7b code
 41549                                  
 41550                                  ;----------------------------------------------------------------------------
 41551                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41552                                  
 41553                                  rpBug4:
 41554                                  	;cmp	word [bp+0],360
 41555                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41556                                  	cmp	word [bp],360
 41557                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41558                                  
 41559                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41560                                  	call	FindBadCode
 41561                                  	jc	short rp3Exit
 41562                                  
 41563                                  	push	di				; save find9 code offset
 41564                                  
 41565                                  	mov	di,si
 41566                                  	mov	dx,3
 41567                                  	mov	si,rpRepl8
 41568                                  	mov	cx,rpRepl8Len ; 4
 41569                                  	call	GenPatch			; patch out find8 code
 41570                                  
 41571                                  	pop	di				; find9 offset
 41572                                  	;mov	bx,[bp+4]
 41573                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41574                                  	call	GenJump 			;   patch area
 41575                                  
 41576                                  	mov	si,rpRepl9			; copy replacement code to
 41577                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41578                                  	call	CopyPatch			;   so no jmp back to main-line
 41579                                  
 41580                                  rp3Exit:
 41581                                  	add	sp,StackVars.size
 41582                                  	pop	bp
 41583                                  	pop	ds
 41584                                  	pop	es
 41585                                  	pop	di
 41586                                  	pop	si
 41587                                  	pop	dx
 41588                                  	pop	cx
 41589                                  	pop	bx
 41590                                  	pop	ax
 41591                                  	retn
 41592                                  
 41593                                  ;----------------------------------------------------------------------------
 41594                                  ;
 41595                                  ; FindBadCode
 41596                                  ;
 41597                                  ; Searches Rational code segment looking for a pair of find strings (all
 41598                                  ; patches have at least two find strings).
 41599                                  ;
 41600                                  ; Entry:
 41601                                  ;	ES    = code segment to search
 41602                                  ;	DS:BX = search pair structure for this search
 41603                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41604                                  ;
 41605                                  ; Exit:
 41606                                  ;	CY flag clear if both strings found, and
 41607                                  ;	SI    = offset in ES of 1st string
 41608                                  ;	DI    = offset in ES of 2nd string
 41609                                  ;	CY set if either string not found, or strings too far apart
 41610                                  ;
 41611                                  ; Used:
 41612                                  ;	CX
 41613                                  ;
 41614                                  ;----------------------------------------------------------------------------
 41615                                  
 41616                                  ;struc SearchPair
 41617                                  ; .sp_off1: resw 1	; offset of 1st search string
 41618                                  ; .sp_len1: resw 1	; length of 1st search string
 41619                                  ; .sp_off2: resw 1	; 2nd string
 41620                                  ; .sp_len2: resw 1	; 2nd string
 41621                                  ; .sp_diff: resw 1	; max difference between offsets
 41622                                  ; .size:
 41623                                  ;endstruc
 41624                                  
 41625                                  FindBadCode:
 41626                                  	;mov	cx,[bp+2]
 41627                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 41628                                  
 41629                                  	mov	si,[bx]	; mov si,[bx+0]
 41630                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 41631                                  	
 41632                                  	;mov	dx,[bx+2]
 41633                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 41634                                  	call	ScanCodeSeq
 41635                                  	jnz	short fbc_error		; done if 1st not found
 41636                                  
 41637                                  	push	di			; save 1st string offset
 41638                                  
 41639                                  	;mov	si,[bx+4]
 41640                                  	mov	si,[bx+SearchPair.sp_off2]
 41641                                  	;mov	dx,[bx+6]
 41642                                  	mov	dx,[bx+SearchPair.sp_len2]
 41643                                  	call	ScanCodeSeq_di		; don't change flags after this!
 41644                                  
 41645                                  	pop	si			; restore 1st string offset
 41646                                  	jnz	short fbc_error
 41647                                  
 41648                                  	mov	ax,di			; sanity check that
 41649                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 41650                                  	jc	short fbc_error
 41651                                  	;cmp	ax,[bx+8]
 41652                                  	cmp	ax,[bx+SearchPair.sp_diff]
 41653                                  	ja	short fbc_error
 41654                                  
 41655                                  	clc
 41656                                  	retn
 41657                                  
 41658                                  fbc_error:
 41659                                  	stc
 41660                                  	retn
 41661                                  
 41662                                  ;----------------------------------------------------------------------------
 41663                                  ;
 41664                                  ; GenPatch
 41665                                  ;
 41666                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 41667                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 41668                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 41669                                  ; code.
 41670                                  ;
 41671                                  ; Entry:
 41672                                  ;	ES:DI = start of buggy code to be patched
 41673                                  ;	DX    = length of buggy code to be patched
 41674                                  ;	DS:SI = replacement patch code
 41675                                  ;	CX    = length of replacement patch code
 41676                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41677                                  ;
 41678                                  ; Exit:
 41679                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 41680                                  ;
 41681                                  ; Used:
 41682                                  ;	AX, BX, SI, Flags
 41683                                  ;
 41684                                  ;----------------------------------------------------------------------------
 41685                                  
 41686                                  GenPatch:
 41687                                  	push	di			;save offset of buggy code
 41688                                  
 41689                                  	;mov	bx,[bp+4]
 41690                                  	mov	bx,[bp+StackVars.sv_pPatch]
 41691                                  					;jump from buggy code to patch area
 41692                                  	call	GenJump
 41693                                  
 41694                                  	call	CopyPatch		;copy replacement code to patch area
 41695                                  
 41696                                  	pop	bx			;offset of buggy code + buggy code
 41697                                  	add	bx,dx			;  length = return from patch offset
 41698                                  
 41699                                  	call	GenJump 		;jump from patch area back to main-
 41700                                  	;mov	[bp+4],di
 41701                                  	mov	[bp+StackVars.sv_pPatch],di
 41702                                  					;  line code, update patch pointer
 41703                                  	retn
 41704                                  
 41705                                  ;----------------------------------------------------------------------------
 41706                                  ;
 41707                                  ; CopyPatch
 41708                                  ;
 41709                                  ; Copies patch code to patch location.
 41710                                  ;
 41711                                  ; Entry:
 41712                                  ;	DS:SI = patch code to be copied
 41713                                  ;	ES    = segment of code to patch
 41714                                  ;	CX    = length of code to copy
 41715                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41716                                  ;
 41717                                  ; Exit:
 41718                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 41719                                  ;
 41720                                  ; Used:
 41721                                  ;	SI, Flags
 41722                                  ;
 41723                                  ;----------------------------------------------------------------------------
 41724                                  
 41725                                  CopyPatch:
 41726                                  	push	cx
 41727                                  	;mov	di,[bp+4]
 41728                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 41729                                  	cld
 41730                                  	rep movsb
 41731                                  	pop	cx
 41732                                  	;mov	[bp+4],di
 41733                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 41734                                  	retn
 41735                                  
 41736                                  ;----------------------------------------------------------------------------
 41737                                  ;
 41738                                  ; GenJump
 41739                                  ;
 41740                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 41741                                  ;
 41742                                  ; Entry:
 41743                                  ;	ES:DI = from location (where to put jmp instruction)
 41744                                  ;	BX    = to location (where to jump to)
 41745                                  ;
 41746                                  ; Exit:
 41747                                  ;	DI = byte after generated jump
 41748                                  ;
 41749                                  ; Used:
 41750                                  ;	AX
 41751                                  ;
 41752                                  ;----------------------------------------------------------------------------
 41753                                  
 41754                                  GenJump:
 41755                                  	mov	al,0E9h		; jmp rel16 opcode
 41756                                  	stosb
 41757                                  
 41758                                  	mov	ax,bx		; calc offset to 'to' location
 41759                                  	sub	ax,di
 41760                                  	sub	ax,2
 41761                                  
 41762                                  	stosw			; output offset
 41763                                  
 41764                                  	retn
 41765                                  
 41766                                  ;----------------------------------------------------------------------------
 41767                                  ;
 41768                                  ; ScanCodeSeq
 41769                                  ;
 41770                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41771                                  ;
 41772                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41773                                  ;
 41774                                  ;----------------------------------------------------------------------------
 41775                                  
 41776                                  ScanCodeSeq:
 41777                                  	mov	di,200h
 41778                                  ScanCodeSeq_di:
 41779                                  	push	cx
 41780                                  	sub	cx,dx
 41781                                  	inc	cx
 41782                                  scsagain:
 41783                                  	push	si
 41784                                  	push	di
 41785                                  	push	cx
 41786                                  	mov	cx,dx
 41787                                  	rep	cmpsb
 41788                                  	pop	cx
 41789                                  	pop	di
 41790                                  	pop	si
 41791                                  	je	short scsfound
 41792                                  	inc	di
 41793                                  	loop	scsagain
 41794                                  scsfound:
 41795                                  	pop	cx
 41796                                  vvexit:		; 18/12/2022
 41797                                  	retn
 41798                                  	
 41799                                  ;----------------------------------------------------------------------------
 41800                                  ;
 41801                                  ; VerifyVersion
 41802                                  ;
 41803                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41804                                  ; from ES:2A.
 41805                                  ;
 41806                                  ;       Entry: AX = binary version number 
 41807                                  ;       Exit : Z flag set if version numbers match
 41808                                  ;
 41809                                  ;----------------------------------------------------------------------------
 41810                                  
 41811                                  VerifyVersion:
 41812                                  	mov	si,[es:2Ah]		; offset of version number
 41813                                  					;  in ascii
 41814                                  	mov	bl,10
 41815                                  	add	si,3			; point to last digit
 41816                                  
 41817                                  	call	VVDigit
 41818                                  	jne	short vvexit
 41819                                  	call	VVDigit
 41820                                  	jne	short vvexit
 41821                                  	cmp	byte [es:si],'.'
 41822                                  	jne	short vvexit
 41823                                  	dec	si
 41824                                  	;call	VVDigit
 41825                                  	; 18/12/2022
 41826                                  	;jmp	short VVDigit
 41827                                  ;vvexit:
 41828                                  	;retn
 41829                                  VVDigit:
 41830                                  	div	bl
 41831                                  	add	ah,'0'
 41832                                  	dec	si
 41833                                  	cmp	[es:si+1],ah
 41834                                  	mov	ah,0			; do not xor or sub we need Z
 41835                                  	retn
 41836                                  
 41837                                  %endif
 41838                                  
 41839                                  ;-----------------------------------------------------------------------
 41840                                  
 41841                                  ; 23/05/2019 - Retro DOS v4.0
 41842                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 41843                                  
 41844                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41845                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 41846                                  
 41847                                  exepatch_start:	 ; label byte
 41848                                  
 41849                                  	; The following is the code that'll be layed over the buggy unpack
 41850                                  	; code.
 41851                                  str1:
 41852 000072E5 06                      	db  06h	  		;push	es		 
 41853 000072E6 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 41854                                  
 41855                                  first_stop equ	$-str1
 41856                                  			
 41857 000072E8 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 41858                                  
 41859                                  first:  ; label	byte
 41860                                  
 41861 000072EA 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41862 000072EC 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41863 000072EE BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41864 000072F1 57                      	db  57h	    		;push	di
 41865 000072F2 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41866 000072F5 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 41867 000072F7 F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 41868 000072F9 47                      	db  47h	    		;inc	di			
 41869 000072FA 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 41870 000072FC 5F                      	db  5Fh	    		;pop	di
 41871 000072FD 58                      	db  58h	    		;pop	ax
 41872                                  
 41873                                  second_stop equ	$-first
 41874                                  
 41875 000072FE 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 41876                                  
 41877                                  second: ; label	byte
 41878                                  
 41879 00007300 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 41880                                  		    		;NextRec:				
 41881 00007302 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 41882                                  		    		;norm_agn:				
 41883 00007305 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 41884 00007307 F7D0                    	db  0F7h,0D0h		;not	ax		
 41885 00007309 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41886 0000730B 7413                    	db  74h,13h		;jz	short SI_ok			
 41887 0000730D 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 41888 0000730F 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 41889 00007312 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 41890 00007314 7308                    	db  73h,08h		;jnc	short SItoDS			
 41891 00007316 F7DA                    	db  0F7h,0DAh		;neg	dx			
 41892 00007318 D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 41893 0000731A 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 41894 0000731C 33D2                    	db  33h,0D2h		;xor	dx,dx			
 41895                                  				;SItoDS: 				
 41896 0000731E 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41897                                  				;SI_ok:					
 41898 00007320 87F7                    	db  87h,0F7h		;xchg	si,di			
 41899 00007322 1E                      	db  1Eh			;push	ds			
 41900 00007323 06                      	db  06h			;push	es			
 41901 00007324 1F                      	db  1Fh			;pop	ds			
 41902 00007325 07                      	db  07h			;pop	es			
 41903 00007326 FECD                    	db  0FEh,0CDh		;dec	ch			
 41904 00007328 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 41905 0000732A AC                      	db  0ACh		;lodsb			
 41906 0000732B 92                      	db  92h			;xchg	dx,ax
 41907 0000732C 4E                      	db  4Eh			;dec	si
 41908 0000732D AD                      	db  0ADh		;lodsw			
 41909 0000732E 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41910 00007330 46                      	db  46h			;inc	si		
 41911 00007331 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41912 00007333 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41913 00007335 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41914 00007337 7505                    	db  75h,05h		;jne	short TryEnum
 41915 00007339 AC                      	db  0ACh		;lodsb				
 41916 0000733A F3AA                    	db  0F3h,0AAh		;rep stosb			
 41917                                  
 41918                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 41919 0000733C EB06                    	db  0EBh,06h		;jmp	short TryNext
 41920                                  
 41921                                  				;TryEnum:
 41922 0000733E 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41923 00007340 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 41924 00007342 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41925                                  				;TryNext:
 41926                                  
 41927 00007344 92                      	db  92h			;xchg	dx,ax
 41928                                  ;	db  8Ah,0C2h		;mov	al,dl			
 41929                                  
 41930 00007345 A801                    	db  0A8h,01h		;test	al,1			
 41931 00007347 74B9                    	db  74h,0B9h		;jz	short NextRec			
 41932 00007349 9090                    	db  90h,90h		;nop,nop
 41933                                  	
 41934                                  last_stop equ $-second
 41935                                  size_str1 equ $-str1
 41936                                  
 41937                                  	; The following is the code that we need to look for in the exe
 41938                                  	; file.
 41939                                  
 41940                                  scan_patch1: ; label byte
 41941                                  
 41942 0000734B 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41943 0000734D 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41944 0000734F 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 41945 00007351 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41946 00007353 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41947 00007355 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41948 00007358 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41949 0000735B B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41950 0000735D F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41951 0000735F 47                      	db  47h			;inc	di			
 41952 00007360 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41953 00007362 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41954 00007364 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41955 00007366 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41956 00007368 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41957                                  				;NextRec:
 41958 0000736B B104                    	db  0B1h,04h		;mov	cl,4
 41959 0000736D 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41960 0000736F F7D0                    	db  0F7h,0D0h		;not	ax		
 41961 00007371 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41962 00007373 7409                    	db  74h,09h		;jz	short SI_ok
 41963 00007375 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41964 00007377 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41965 00007379 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41966 0000737B 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41967                                  	       			;SI_ok:
 41968 0000737E 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41969 00007380 F7D0                    	db  0F7h,0D0h		;not	ax
 41970 00007382 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41971 00007384 7409                    	db  74h,09h		;jz	short DI_ok
 41972 00007386 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41973 00007388 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41974 0000738A 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41975 0000738C 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41976                                  				;DI_ok:
 41977                                  
 41978                                  size_scan_patch1 equ $-scan_patch1
 41979                                  
 41980                                  scan_patch2: ; label byte
 41981                                  			
 41982 0000738F 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41983 00007391 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41984 00007393 48                      	db  48h			;dec	ax
 41985 00007394 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41986 00007396 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41987 00007398 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41988 0000739B B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41989 0000739E B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41990 000073A0 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41991 000073A2 47                      	db  47h			;inc	di			
 41992 000073A3 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41993 000073A5 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41994 000073A7 48                      	db  48h			;dec	ax
 41995 000073A8 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41996 000073AA BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41997                                  				;NextRec:
 41998 000073AD B104                    	db  0B1h,04h		;mov	cl,4
 41999 000073AF 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42000 000073B1 F7D0                    	db  0F7h,0D0h		;not	ax		
 42001 000073B3 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 42002 000073B5 740A                    	db  74h,0Ah		;jz	short SI_ok
 42003 000073B7 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42004 000073B9 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42005 000073BB 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 42006 000073BD 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 42007                                  				;or	si,0FFF0H
 42008                                  				;SI_ok:
 42009 000073C1 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 42010 000073C3 F7D0                    	db  0F7h,0D0h		;not	ax
 42011 000073C5 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42012 000073C7 740A                    	db  74h,0Ah		;jz	short DI_ok
 42013 000073C9 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42014 000073CB 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42015 000073CD 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42016 000073CF 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 42017                                  				;or	di,0FFF0H
 42018                                  				;DI_ok:
 42019                                  
 42020                                  size_scan_patch2 equ $-scan_patch2
 42021                                  
 42022                                  scan_patch3: ; label byte
 42023                                  
 42024 000073D3 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 42025 000073D5 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42026 000073D7 48                      	db  48h			;dec	ax
 42027 000073D8 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 42028 000073DA 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 42029 000073DC BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42030 000073DF B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42031 000073E2 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42032 000073E4 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 42033 000073E6 47                      	db  47h			;inc	di			
 42034 000073E7 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42035 000073E9 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 42036 000073EB 48                      	db  48h			;dec	ax
 42037 000073EC 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42038 000073EE BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 42039                                  				;NextRec:
 42040 000073F1 B104                    	db  0B1h,04h		;mov	cl,4
 42041 000073F3 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42042 000073F5 F7D0                    	db  0F7h,0D0h		;not	ax		
 42043 000073F7 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 42044 000073F9 7409                    	db  74h,09h		;jz	short SI_ok
 42045 000073FB 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42046 000073FD 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42047 000073FF 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 42048 00007401 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 42049                                  				;SI_ok:
 42050 00007404 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 42051 00007406 F7D0                    	db  0F7h,0D0h		;not	ax
 42052 00007408 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42053 0000740A 7409                    	db  74h,09h		;jz	short DI_ok
 42054 0000740C 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42055 0000740E 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42056 00007410 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42057 00007412 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42058                                  				;DI_ok:
 42059                                  
 42060                                  size_scan_patch3 equ $-scan_patch3
 42061                                  
 42062                                  scan_com: ; label byte
 42063                                  
 42064 00007415 AC                      	db  0ACh		;lodsb			
 42065 00007416 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 42066 00007418 4E                      	db  4Eh			;dec	si
 42067 00007419 AD                      	db  0ADh		;lodsw			
 42068 0000741A 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 42069 0000741C 46                      	db  46h			;inc	si		
 42070 0000741D 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 42071 0000741F 24FE                    	db  24h,0FEh		;and	al,0FEH		
 42072 00007421 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42073 00007423 7506                    	db  75h,06h		;jne	short TryEnum
 42074 00007425 AC                      	db  0ACh		;lodsb				
 42075 00007426 F3AA                    	db  0F3h,0AAh		;rep stosb			
 42076 00007428 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 42077                                  				;TryEnum:
 42078 0000742B 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42079 0000742D 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 42080 0000742F F3A4                    	db  0F3h,0A4h		;rep movsb			
 42081                                  				;TryNext:
 42082 00007431 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 42083 00007433 A801                    	db  0A8h,01h		;test	al,1			
 42084                                  ;	db  74h,0BAh		;jz	short NextRec			
 42085                                  
 42086                                  size_scan_com	equ	$-scan_com
 42087                                  
 42088                                  ;-----------------------------------------------------------------------
 42089                                  
 42090                                  ; 23/05/2019 - Retro DOS v4.0
 42091                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 42092                                  
 42093                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42094                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 42095                                  
 42096                                  ExePatch:
 42097                                  	; 28/12/2022 - Retro DOS v4.1
 42098                                  	;call	ExePackPatch
 42099                                  	;;call	word [ss:RationalPatchPtr]
 42100                                  	;retn
 42101                                  	; 28/12/2022
 42102                                  	;jmp	short ExePackPatch
 42103                                  
 42104                                  ;-----------------------------------------------------------------------
 42105                                  ;
 42106                                  ; Procedure Name 	: ExePackPatch
 42107                                  ;
 42108                                  ; Inputs	 	: DS 			-> DOSDATA
 42109                                  ;			  ES:0 			-> read in image
 42110                                  ;			  ax:cx = start cs:ip of program
 42111                                  ; Output		:		
 42112                                  ;
 42113                                  ;	1. If ES <= 0fffh
 42114                                  ;	   2. if exepack signature ('RB') found
 42115                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 42116                                  ;	       	 4. if rest of the code & checksum compares
 42117                                  ;	  	    5. overlay buggy code with code in 
 42118                                  ;		       doscode:str1.
 42119                                  ;		 6. endif
 42120                                  ;	      7. endif
 42121                                  ;	   8. endif
 42122                                  ;	9. endif
 42123                                  ;
 42124                                  ;
 42125                                  ; Uses			: NONE
 42126                                  ;
 42127                                  ;-----------------------------------------------------------------------
 42128                                  		
 42129                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42130                                  	; 23/05/2019 - Retro DOS v4.0	
 42131                                  ExePackPatch:
 42132 00007435 53                      	push	bx
 42133 00007436 8CC3                    	mov	bx,es			; bx has load segment
 42134 00007438 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 42135 0000743C 7602                    	jbe	short ep_cont		; N: 
 42136 0000743E 5B                      	pop	bx			; Y: no need to patch
 42137 0000743F C3                      	retn
 42138                                  ep_cont:
 42139 00007440 1E                      	push	ds
 42140 00007441 06                      	push	es
 42141 00007442 50                      	push	ax
 42142 00007443 51                      	push	cx
 42143 00007444 56                      	push	si
 42144 00007445 57                      	push	di
 42145                                  	
 42146                                  		; M033 - start
 42147                                  		; exepacked programs have an IP of 12h (>=2)
 42148                                  
 42149 00007446 83E902                  	sub	cx,2			; Q: is IP >=2 
 42150 00007449 7303                    	jnb	short epp_1		; N: exit
 42151 0000744B E9C500                  	jmp	ep_notpacked
 42152                                  					; ax:cx now points to location of
 42153                                  					; 'RB' if this is an exepacked file.
 42154                                  		; M033 - end
 42155                                  epp_1:
 42156 0000744E 89CF                    	mov	di,cx
 42157 00007450 8EC0                    	mov	es,ax
 42158 00007452 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 42159                                  					; unpack_offset
 42160                                  
 42161 00007457 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 42162                                  	;ljne	ep_notpacked
 42163 0000745C 7403                    	je	short epp_2
 42164 0000745E E9B200                  	jmp	ep_notpacked
 42165                                  epp_2:
 42166 00007461 0E                      	push	cs
 42167 00007462 1F                      	pop	ds			; set ds to cs
 42168                                  
 42169                                  	;add	di,6Ch
 42170 00007463 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 42171                                  					;          file where we hope to find
 42172                                  					;	   scan string. 
 42173                                  
 42174 00007466 E8B200                  	call	chk_common_str		; check for match
 42175                                  
 42176 00007469 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 42177                                  					; N: check at patch2_offset
 42178                                  					; Y: check for rest of patch string
 42179 0000746B BE[4B73]                	mov	si,scan_patch1
 42180                                  					; ds:si -> scan string 
 42181 0000746E 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 42182                                  
 42183                                  	;add	di,28h
 42184                                  	; 07/12/2022
 42185 00007473 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 42186                                  					;          file where we hope to find
 42187                                  					;	   scan string. 
 42188                                  	;mov	cx,68
 42189 00007476 B94400                  	mov	cx,size_scan_patch1
 42190                                  	;mov	bx,142
 42191 00007479 BB8E00                  	mov	bx,CHKSUM1_LEN
 42192                                  	;mov	ax,0EF4Eh
 42193 0000747C B84EEF                  	mov	ax,PATCH1_CHKSUM
 42194 0000747F E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 42195 00007482 7208                    	jc	short ep_done1		; Q: did we pass the test
 42196                                  					; N: exit
 42197                                  					; Y: overlay code with new 
 42198 00007484 BE[E572]                	mov	si,str1
 42199                                  	;mov	cx,102
 42200 00007487 B96600                  	mov	cx,size_str1
 42201                                  	
 42202 0000748A F3A4                    	rep	movsb
 42203                                  ep_done1:
 42204 0000748C E98400                  	jmp	ep_done
 42205                                  
 42206                                  ep_chkpatch2:
 42207                                  	;mov	di,76h
 42208 0000748F BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 42209                                  					; in another version of unpack
 42210 00007492 E88600                  	call	chk_common_str		; check for match
 42211                                  
 42212 00007495 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 42213                                  					; N: check for patch3_offset
 42214                                  					; Y: check for rest of patch string
 42215                                  
 42216 00007497 BE[8F73]                	mov	si,scan_patch2
 42217                                  					; ds:si -> scan string 
 42218                                  	;mov	di,32h
 42219 0000749A BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 42220                                  					;          file where we hope to find
 42221                                  	;mov	cx,68			;	   scan string. 
 42222 0000749D B94400                  	mov	cx,size_scan_patch2
 42223                                  	;mov	bx,140
 42224 000074A0 BB8C00                  	mov	bx,CHKSUM2_LEN
 42225                                  	;mov	ax,78B2h
 42226 000074A3 B8B278                  	mov	ax,PATCH2_CHKSUM
 42227 000074A6 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 42228                                  
 42229                                  					; M046 - Start
 42230                                  					; Q: did we pass the test
 42231 000074A9 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 42232                                  					; N: try with a different chksum
 42233                                  
 42234 000074AB BE[8F73]                	mov	si,scan_patch2
 42235                                  					; ds:si -> scan string 
 42236                                  	;mov	cx,68
 42237 000074AE B94400                  	mov	cx,size_scan_patch2
 42238                                  	;mov	bx,129
 42239 000074B1 BB8100                  	mov	bx,CHKSUM2A_LEN
 42240                                  	;mov	ax,1C47h
 42241 000074B4 B8471C                  	mov	ax,PATCH2A_CHKSUM
 42242 000074B7 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 42243                                  					; Q: did we pass the test
 42244 000074BA 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 42245                                  					; Y: overlay code with new 
 42246                                  						
 42247                                  ep_patchcode2:			       	; M046 - End
 42248 000074BC BE[E572]                	mov	si,str1
 42249                                  	;mov	cx,3
 42250 000074BF B90300                  	mov	cx,first_stop
 42251 000074C2 F3A4                    	rep	movsb
 42252 000074C4 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 42253 000074C7 AB                      	stosw
 42254 000074C8 83C602                  	add	si,2
 42255                                  	;mov	cx,20
 42256 000074CB B91400                  	mov	cx,second_stop
 42257 000074CE F3A4                    	rep	movsb
 42258 000074D0 AB                      	stosw				; put in dec ax and nop
 42259 000074D1 83C602                  	add	si,2
 42260                                  	;mov	cx,75
 42261 000074D4 B94B00                  	mov	cx,last_stop
 42262 000074D7 F3A4                    	rep	movsb
 42263 000074D9 EB38                    	jmp	short ep_done
 42264                                  
 42265                                  ep_chkpatch3:
 42266                                  	;mov	di,74h
 42267 000074DB BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 42268                                  					; in another version of unpack
 42269 000074DE E83A00                  	call	chk_common_str		; check for match
 42270                                  
 42271 000074E1 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 42272                                  					; N: exit
 42273                                  					; Y: check for rest of patch string
 42274 000074E3 BE[D373]                	mov	si,scan_patch3
 42275                                  					; ds:si -> scan string 
 42276                                  	;mov	di,32h
 42277 000074E6 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 42278                                  					;          file where we hope to find
 42279                                  					;	   scan string. 
 42280                                  	;mov	cx,66
 42281 000074E9 B94200                  	mov	cx,size_scan_patch3
 42282                                  	;mov	bx,139
 42283 000074EC BB8B00                  	mov	bx,CHKSUM3_LEN
 42284                                  	;mov	ax,4EDEh
 42285 000074EF B8DE4E                  	mov	ax,PATCH3_CHKSUM
 42286 000074F2 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42287 000074F5 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 42288                                  					; N: exit
 42289                                  					; Y: overlay code with new 
 42290 000074F7 BE[E572]                	mov	si,str1
 42291                                  	;mv	cx,3
 42292 000074FA B90300                  	mov	cx,first_stop
 42293 000074FD F3A4                    	rep	movsb
 42294 000074FF B048                    	mov	al,48h			; al = opcode for dec ax
 42295 00007501 AA                      	stosb
 42296 00007502 83C602                  	add	si,2
 42297                                  	;mov	cx,20
 42298 00007505 B91400                  	mov	cx,second_stop
 42299 00007508 F3A4                    	rep	movsb
 42300 0000750A AA                      	stosb				; put in dec ax
 42301 0000750B 83C602                  	add	si,2
 42302                                  	;mov	cx,75
 42303 0000750E B94B00                  	mov	cx,last_stop
 42304 00007511 F3A4                    	rep	movsb
 42305                                  
 42306                                  ep_notpacked:
 42307                                  	;stc
 42308                                  ep_done:
 42309 00007513 5F                      	pop	di
 42310 00007514 5E                      	pop	si
 42311 00007515 59                      	pop	cx
 42312 00007516 58                      	pop	ax
 42313 00007517 07                      	pop	es
 42314 00007518 1F                      	pop	ds
 42315 00007519 5B                      	pop	bx
 42316 0000751A C3                      	retn
 42317                                  
 42318                                  ;-------------------------------------------------------------------------
 42319                                  ;
 42320                                  ; 	Procedure Name	: chk_common_str
 42321                                  ;
 42322                                  ;	Input		: DS = DOSCODE
 42323                                  ;			; ES:DI points to string in packed file
 42324                                  ;
 42325                                  ;	Output		; Z if match else NZ
 42326                                  ;
 42327                                  ;-------------------------------------------------------------------------
 42328                                  
 42329                                  	; 23/05/2019 - Retro DOS v4.0
 42330                                  chk_common_str:
 42331 0000751B BE[1574]                	mov	si,scan_com
 42332                                  					; ds:si -> scan string 
 42333                                  	;mov	cx,32
 42334 0000751E B92000                  	mov	cx,size_scan_com
 42335                                  
 42336 00007521 F3A6                    	repe	cmpsb	       
 42337                                  
 42338                                  					; M046 - start
 42339                                  	; a fourth possible version of these exepacked programs have a 
 42340                                  	; 056h instead of 06Bh. See scan_com above
 42341                                  	;
 42342                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 42343                                  	;
 42344                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 42345                                  	; we shall try to match the rest of the string
 42346                                  	;
 42347                                  
 42348 00007523 7409                    	jz	short ccs_done
 42349 00007525 26807DFF56              	cmp	byte [es:di-1],56h
 42350 0000752A 7502                    	jnz	short ccs_done
 42351                                  
 42352 0000752C F3A6                    	repe	cmpsb	    
 42353                                  ccs_done:				; M046 - end
 42354 0000752E C3                      	retn
 42355                                  
 42356                                  ;-------------------------------------------------------------------------
 42357                                  ;
 42358                                  ;	Procedure Name	: chk_patchsum
 42359                                  ;
 42360                                  ;	Input		: DS:SI -> string we're looking for
 42361                                  ;			: ES:DI -> offset in packed file
 42362                                  ;			: CX 	= scan length
 42363                                  ;			: BX	= length of check sum
 42364                                  ;			: AX 	= value of check sum
 42365                                  ;
 42366                                  ;	Output		: if patch & check sum compare
 42367                                  ;				NC
 42368                                  ;			  else
 42369                                  ;				CY
 42370                                  ;
 42371                                  ;	Uses		: AX, BX, CX, SI
 42372                                  ;
 42373                                  ;-------------------------------------------------------------------------
 42374                                  
 42375                                  	; 23/05/2019 - Retro DOS v4.0
 42376                                  chk_patchsum:
 42377 0000752F 57                      	push	di
 42378                                  
 42379 00007530 F3A6                    	repe	cmpsb			   
 42380                                  
 42381 00007532 7518                    	jnz	short cp_fail		; Q: does the patch match
 42382                                  					; N: exit
 42383                                  					; Y:	
 42384                                  
 42385                                  		; we do a check sum starting from the location of the 
 42386                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 42387                                  		; unpacking code.
 42388                                  
 42389 00007534 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 42390 00007539 89D9                    	mov	cx,bx			; cx = length of check sum
 42391                                  
 42392 0000753B 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 42393 0000753D 31C0                    	xor	ax,ax
 42394                                  ep_chksum:
 42395 0000753F 260305                  	add	ax,[es:di]
 42396 00007542 83C702                  	add	di,2
 42397 00007545 E2F8                    	loop	ep_chksum
 42398                                  
 42399 00007547 5F                      	pop	di			; restore di
 42400                                  
 42401 00007548 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 42402                                  	;jne	short cp_fail		; N: exit
 42403                                  					; Y: 
 42404                                  	; 25/09/2023
 42405                                  	;clc	
 42406                                  	;retn
 42407 0000754A 74E2                    	je	short ccs_done ; cf=0
 42408                                  	
 42409                                  cp_fail:
 42410 0000754C F9                      	stc
 42411 0000754D C3                      	retn
 42412                                  
 42413                                  ; 28/12/2022 - Retro DOS v4.1
 42414                                  %if 0
 42415                                  ;--------------------------------------------------------------------------- 
 42416                                  
 42417                                  
 42418                                  ; M020 : BEGIN
 42419                                  ;
 42420                                  ;---------------------------------------------------------------------------
 42421                                  ;
 42422                                  ; procedure : RationalPatch
 42423                                  ;
 42424                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42425                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42426                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42427                                  ;
 42428                                  ; THE BUG is in the following code sequence:
 42429                                  ;
 42430                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42431                                  ;90		even				; word align
 42432                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42433                                  ;e8 xx xx	call	set_A20			; enable A20
 42434                                  ;
 42435                                  ; This patch routine replaces the mov & the loop with a far call into a
 42436                                  ; routine in DOS data segment which is in low memory (because A20 line
 42437                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42438                                  ; a mov & loop.
 42439                                  ;
 42440                                  ; Identification of Buggy Rational EXE
 42441                                  ; ====================================
 42442                                  ;
 42443                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42444                                  ;
 42445                                  ; OFFSET				Contains
 42446                                  ; ------				--------
 42447                                  ; 0000h			100 times Version number in binary
 42448                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42449                                  ;
 42450                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42451                                  ;
 42452                                  ; 002ah			offset where version number is stored in ASCII
 42453                                  ;				e.g. '3.48A'
 42454                                  ;
 42455                                  ; 0030h			offset of copyright string. Copyright strings either
 42456                                  ;			start with "DOS/16M Copyright...." or
 42457                                  ;			"Copyright.....". The string contains
 42458                                  ;			"Rational Systems, Inc."
 42459                                  ;
 42460                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42461                                  ;				from the program image
 42462                                  ; 0016h			word : size of buggy code segment
 42463                                  ;
 42464                                  ;	Buggy code is definite to start after offset 200h in its segment
 42465                                  ;
 42466                                  ;----------------------------------------------------------------------------
 42467                                  
 42468                                  ; 23/05/2019 - Retro DOS v4.0
 42469                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42470                                  
 42471                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42472                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42473                                  
 42474                                  RScanPattern1:
 42475                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42476                                  
 42477                                  RLen1 equ $ - RScanPattern1
 42478                                  
 42479                                  RScanPattern2:
 42480                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42481                                  
 42482                                  RLen2 equ $ - RScanPattern2
 42483                                  
 42484                                  RScanPattern3:
 42485                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42486                                  
 42487                                  RLen3 equ $ - RScanPattern2
 42488                                  
 42489                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42490                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42491                                  
 42492                                  ;----------------------------------------------------------------------------
 42493                                  ;
 42494                                  ; INPUT : ES = segment where program got loaded
 42495                                  ;
 42496                                  ;----------------------------------------------------------------------------
 42497                                  
 42498                                  RationalPatch:
 42499                                  	cld
 42500                                  	push	ax
 42501                                  	push	bx
 42502                                  	push	cx
 42503                                  	push	dx
 42504                                  	push	si
 42505                                  	push	di
 42506                                  	push	es
 42507                                  	push	ds			; we use all of them
 42508                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42509                                  	push	cs
 42510                                  	pop	ds
 42511                                  	
 42512                                  	mov	si,RScanPattern1
 42513                                  	;mov	cx,10
 42514                                  	mov	cx,RLen1
 42515                                  	rep	cmpsb			; do we have the pattern ?
 42516                                  	jne	short rpexit
 42517                                  	mov	ax,[es:0]
 42518                                  	cmp	ax,348			; is it a buggy version ?
 42519                                  	jb	short rpexit
 42520                                  	cmp	ax,383			; is it a buggy version
 42521                                  	ja	short rpexit
 42522                                  
 42523                                  	call	VerifyVersion
 42524                                  	jne	short rpexit
 42525                                  
 42526                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42527                                  	sub	cx,200h			; Length we search (we start
 42528                                  					;  at offset 200h)
 42529                                  	mov	es,[es:20h]		; es=buggy code segment
 42530                                  	mov	si,RScanPattern2
 42531                                  	;mov	dx,8	
 42532                                  	mov	dx,RLen2
 42533                                  	call	ScanCodeSeq		; look for code seq with nop
 42534                                  	jz	short rpfound
 42535                                  
 42536                                  	mov	si,RScanPattern3
 42537                                  	;mov	dx,15
 42538                                  	mov	dx,RLen3
 42539                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42540                                  	jnz	short rpexit
 42541                                  
 42542                                  rpfound:
 42543                                  	
 42544                                  ;	we set up a far call into DOS data
 42545                                  ;	dx has the length of the code seq we were searching for
 42546                                  
 42547                                  	mov	al,9Ah			; far call opcode
 42548                                  	stosb
 42549                                  	mov	ax,RatBugCode
 42550                                  	stosw
 42551                                  	mov	ax,ss
 42552                                  	stosw
 42553                                  	mov	cx,dx
 42554                                  	sub	cx,6			; filler (with NOPs)
 42555                                  	mov	al,90h
 42556                                  	rep	stosb
 42557                                  rpexit:
 42558                                  	pop	ds
 42559                                  	pop	es
 42560                                  	pop	di
 42561                                  	pop	si
 42562                                  	pop	dx
 42563                                  	pop	cx
 42564                                  	pop	bx
 42565                                  	pop	ax
 42566                                  	retn
 42567                                  
 42568                                  ; M020 END
 42569                                  
 42570                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42571                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42572                                  
 42573                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42574                                  
 42575                                  ;----------------------------------------------------------------------------
 42576                                  ;
 42577                                  ; ScanCodeSeq
 42578                                  ;
 42579                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42580                                  ;
 42581                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42582                                  ;
 42583                                  ;----------------------------------------------------------------------------
 42584                                  
 42585                                  ScanCodeSeq:
 42586                                  	; 17/12/2022
 42587                                  	mov	di,200h
 42588                                  ;ScanCodeSeq_di:
 42589                                  	push	cx
 42590                                  	sub	cx,dx
 42591                                  	inc	cx
 42592                                  	; 17/12/2022
 42593                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42594                                  	;mov	di,200h
 42595                                  scsagain:
 42596                                  	push	si
 42597                                  	push	di
 42598                                  	push	cx
 42599                                  	mov	cx,dx
 42600                                  	rep	cmpsb
 42601                                  	pop	cx
 42602                                  	pop	di
 42603                                  	pop	si
 42604                                  	je	short scsfound
 42605                                  	inc	di
 42606                                  	loop	scsagain
 42607                                  scsfound:
 42608                                  	pop	cx
 42609                                  vvexit:		; 18/12/2022
 42610                                  	retn
 42611                                  
 42612                                  
 42613                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42614                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42615                                  
 42616                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42617                                  
 42618                                  ;----------------------------------------------------------------------------
 42619                                  ;
 42620                                  ; VerifyVersion
 42621                                  ;
 42622                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42623                                  ; from ES:2A.
 42624                                  ;
 42625                                  ;       Entry: AX = binary version number 
 42626                                  ;       Exit : Z flag set if version numbers match
 42627                                  ;
 42628                                  ;----------------------------------------------------------------------------
 42629                                  
 42630                                  VerifyVersion:
 42631                                  	mov	si,[es:2Ah]		; offset of version number
 42632                                  					;  in ascii
 42633                                  	mov	bl,10
 42634                                  	add	si,3			; point to last digit
 42635                                  
 42636                                  	call	VVDigit
 42637                                  	jne	short vvexit
 42638                                  	call	VVDigit
 42639                                  	jne	short vvexit
 42640                                  	cmp	byte [es:si],'.' ; 2Eh
 42641                                  	jne	short vvexit
 42642                                  	dec	si
 42643                                  	;call	VVDigit
 42644                                  	; 18/12/2022
 42645                                  	;jmp	short VVDigit
 42646                                  ;vvexit:
 42647                                  	;retn
 42648                                  VVDigit:
 42649                                  	div	bl
 42650                                  	add	ah,'0' ; 30h
 42651                                  	dec	si
 42652                                  	cmp	[es:si+1],ah
 42653                                  	mov	ah,0			; do not xor or sub we need Z
 42654                                  	retn
 42655                                  
 42656                                  ;--------------------------------------------------------------------------- 
 42657                                  %endif	; 28/12/2022
 42658                                  
 42659                                  ;---------------------------------------------------------------------------
 42660                                  ;
 42661                                  ;	M068
 42662                                  ;
 42663                                  ; 	Procedure Name	: IsCopyProt
 42664                                  ;
 42665                                  ;	Inputs		: DS:100 -> start of com file just read in
 42666                                  ;
 42667                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 42668                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 42669                                  ;			  copy protect scheme that relies on the A20 line
 42670                                  ;			  being turned off for it's scheme to work.
 42671                                  ;
 42672                                  ;			  Note: The int 21 function dispatcher will turn 
 42673                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 42674                                  ;				and dec the A20OFF_COUNT before	iretting 
 42675                                  ;				to the user. 
 42676                                  ;
 42677                                  ;	Uses		: ES, DI, SI, CX
 42678                                  ;
 42679                                  ;---------------------------------------------------------------------------
 42680                                  
 42681                                  ; 23/05/2019 - Retro DOS v4.0
 42682                                  
 42683                                  CPStartOffset	EQU	0175h
 42684                                  CPID1Offset	EQU	011Bh
 42685                                  CPID2Offset	EQU	0173h
 42686                                  CPID3Offset	EQU	0146h
 42687                                  CPID4Offset	EQU	0124h
 42688                                  ID1		EQU	05343h
 42689                                  ID2		EQU	05044h
 42690                                  ID3		EQU	0F413h
 42691                                  ID4		EQU	08000h
 42692                                  
 42693                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 42694                                  
 42695                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42696                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 42697                                  
 42698                                  CPScanPattern:
 42699 0000754E 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 42700 00007552 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 42701 00007556 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 42702 0000755C 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 42703 00007560 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 42704 00007563 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 42705                                  
 42706                                  CPSPlen	EQU $ - CPScanPattern
 42707                                  
 42708                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 42709                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 42710                                  
 42711                                  IsCopyProt:
 42712 00007566 813E1B014353            	cmp	word [CPID1Offset],ID1
 42713 0000756C 752D                    	jne	short CP_done
 42714                                  
 42715 0000756E 813E73014450            	cmp	word [CPID2Offset],ID2
 42716 00007574 7525                    	jne	short CP_done
 42717                                  
 42718 00007576 813E460113F4            	cmp	word [CPID3Offset],ID3
 42719 0000757C 751D                    	jne	short CP_done
 42720                                  
 42721 0000757E 813E24010080            	cmp	word [CPID4Offset],ID4
 42722 00007584 7515                    	jne	short CP_done
 42723                                  
 42724 00007586 0E                      	push	cs
 42725 00007587 07                      	pop	es
 42726 00007588 BF[4E75]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 42727                                  
 42728 0000758B BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 42729                                  					; of pattern
 42730                                  
 42731 0000758E B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 42732 00007591 F3A6                    	repe	cmpsb
 42733 00007593 7506                    	jnz	short CP_done
 42734                                  
 42735 00007595 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 42736                                  CP_done:
 42737 0000759B C3                      	retn
 42738                                  	
 42739                                  ;DOSCODE ENDS
 42740                                  
 42741                                  	;END
 42742                                  
 42743                                  ;----------------------------------------------------------------------------
 42744                                  
 42745                                  ;align 2 ; 05/09/2018 (Error!)
 42746                                  
 42747                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42748                                  ;align 16 ; 08/09/2018 (OK.)
 42749                                  align 2
 42750                                  
 42751                                  ; 06/08/2018 - Retro DOS v3.0
 42752                                  ;============================================================================
 42753                                  ; MSINIT.ASM
 42754                                  ;============================================================================
 42755                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 42756                                  ;
 42757                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42758                                  ;
 42759                                  	; 15/07/2018 - Retro DOS v3.0
 42760                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 42761                                  
 42762                                  ; temp iret instruction
 42763                                  
 42764                                  
 42765                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42766                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 42767                                  
 42768                                  initiret: ; MSDOS 6.0
 42769                                  SYSBUF:
 42770                                  ;IRETT: ; 06/05/2019
 42771 0000759C CF                      	iret
 42772                                  
 42773                                  ; 22/04/2019 - Retro DOS v4.0
 42774                                  
 42775                                  ; pointer to the BIOS data segment that will be available just to the
 42776                                  ; initialization code
 42777                                  
 42778 0000759D 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 42779                                  
 42780                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42781                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 42782                                  
 42783                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 42784                                  
 42785                                  ParaRound:
 42786 0000759F 83C00F                  	add	ax, 15
 42787 000075A2 D1D8                    	rcr	ax, 1
 42788 000075A4 D1E8                    	shr	ax, 1
 42789 000075A6 D1E8                    	shr	ax, 1
 42790 000075A8 D1E8                    	shr	ax, 1
 42791 000075AA C3                      	retn
 42792                                  
 42793                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42794                                  
 42795                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42796                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 42797                                  	
 42798                                  	; 30/05/2019
 42799                                  	; 22/04/2019 - Retro DOS v4.0
 42800                                  	; 07/07/2018 - Retro DOS v3.0
 42801                                  	; Retro DOS v2.0 - 03/03/2018
 42802                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42803                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 42804                                  DOSINIT:
 42805                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 42806                                  	;
 42807                                  	; Far call from SYSINIT
 42808                                  	; DX = Memory size in paragraphs
 42809                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 42810                                  	;	  (Retro DOS v2.0, 16/03/2018)
 42811                                  	;
 42812                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 42813                                  	;	  (Retro DOS v4.0, 20/04/2019)
 42814                                  
 42815 000075AB FA                              CLI
 42816 000075AC FC                              CLD
 42817                                  
 42818                                  	; 03/11/2022
 42819                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 42820                                  	
 42821                                  	; 17/12/2022
 42822                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42823                                  	;push	dx ; =*=		; save parameters from BIOS
 42824                                  	
 42825 000075AD 56                      	push	si
 42826 000075AE 1E                      	push	ds
 42827 000075AF 57                      	push	di			;save di (ptr to BiosComBlock)
 42828                                  
 42829 000075B0 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 42830                                  
 42831                                  ; First, move the DOS data segment to its final location in low memory
 42832                                  
 42833                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 42834                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 42835 000075B2 B8[2C7A]                	mov	ax,MEMSTRT		; get offset of end of init code
 42836                                  
 42837                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 42838                                  	;and	ax,~15	; 0FFF0h	; boundary
 42839                                  
 42840                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 42841                                  					; code segment
 42842                                  
 42843                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42844 000075B5 83C00F                  	add	ax,15			; round to nearest paragraph
 42845 000075B8 83E0F0                  	and	ax,~15			; boundary
 42846                                  
 42847 000075BB 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 42848                                  					; code segment
 42849                                  	; 05/12/2022
 42850                                  	; 30/04/2019 - Retro DOS v4.0
 42851                                  	;xor	si,si
 42852                                  	
 42853 000075BD 8CC8                    	mov	ax,cs
 42854 000075BF 8ED8                    	mov	ds,ax			; ds = current code segment
 42855                                  					; DS:SI now points to dosdata
 42856                                  
 42857                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 42858                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 42859                                  					;  BData segment. Cannot use
 42860                                  					;  getdseg macro here!!!
 42861                                  	; 17/12/2022
 42862 000075C1 8E06[9D75]              	mov	es,[InitBioDataSeg]
 42863                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42864                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 42865                                  
 42866                                  	;mov	es,[es:3]
 42867 000075C5 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 42868                                  
 42869 000075CA 31FF                    	xor	di,di			; ES:DI now points to RAM data
 42870                                  
 42871                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 42872                                  	;mov	cx,4976  ; 25/05/2019
 42873                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42874                                  	;mov	cx,4962
 42875                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 42876 000075CC B9A512                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 42877 000075CF F3A4                    	rep	movsb			; move data to final location
 42878                                  	
 42879 000075D1 5F                      	pop	di			; restore ptr to BiosComBlock
 42880 000075D2 1F                      	pop	ds			; restore parms from BIOS
 42881 000075D3 5E                      	pop	si
 42882                                  	; 17/12/2022
 42883                                  	;pop	dx ; 30/05/2019	
 42884                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42885                                  	;pop	dx ; =*=		
 42886                                  
 42887 000075D4 06                      	push	es
 42888 000075D5 1E                      	push	ds
 42889 000075D6 07                      	pop	es			; es:si -> device chain
 42890 000075D7 1F                      	pop	ds			; ds points to dosdata
 42891                                  
 42892                                  ;SR;
 42893                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 42894                                  ;now so that the EXEC call knows when SysInit is present to do the special
 42895                                  ;lie table handling for device drivers. This can be expanded later on to
 42896                                  ;establish a communication block from the BIOS to the DOS.
 42897                                  
 42898                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 42899                                  	;mov	[1042h],bx
 42900 000075D8 893E[4010]              	mov	[BiosDataPtr],di
 42901 000075DC 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 42902                                  
 42903 000075E0 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 42904                                  
 42905                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 42906                                  
 42907 000075E5 2E8C1E[9B4F]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 42908 000075EA 2E8C1E[9F4F]            	mov	[cs:LowInt24Addr+2],ds
 42909 000075EF 2E8C1E[A34F]            	mov	[cs:LowInt28Addr+2],ds
 42910                                  
 42911                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 42912                                  	;mov	[584h],sp
 42913                                  	;mov	[586h],ss
 42914 000075F4 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 42915 000075F8 8926[8405]              	mov	[USER_SP],sp
 42916 000075FC 8C16[8605]              	mov	[USER_SS],ss
 42917                                  
 42918 00007600 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 42919 00007602 8ED0                    	mov	ss,ax
 42920                                  
 42921                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 42922                                  	;mov	sp,offset dosdata:dskstack
 42923 00007604 BC[2009]                	mov	sp,DSKSTACK
 42924                                  
 42925                                  ;M023
 42926                                  ; Init patch ptrs to default values
 42927                                  
 42928                                  	;mov	word [1212h],RetExePatch
 42929                                  	;mov	word [1214h],RetExePatch
 42930                                  	;mov	word [61h],RetExePatch
 42931 00007607 C706[F311][0761]        	mov	word [FixExePatch],RetExePatch	; M023
 42932                                  	; 28/12/2022 - Retro DOS v4.1
 42933                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 42934 0000760D C706[6100][0761]        	mov	word [ChkCopyProt],RetExePatch	; M068
 42935                                  
 42936                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42937                                  %if 0	; 19/09/2023
 42938                                  
 42939                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 42940                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 42941                                  ; running in the HMA.
 42942                                  
 42943                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 42944                                  	cmp	al,2		;   386 or later?
 42945                                  	mov	ax,Rational386Patch
 42946                                  	jae	short di_set_patch
 42947                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 42948                                  di_set_patch:
 42949                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 42950                                  
 42951                                  %endif
 42952                                  	; Set up the variable temp_dosloc to point to the dos code segment
 42953                                  
 42954 00007613 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42955                                  
 42956                                  	; ax now holds segment of DOS code
 42957 00007615 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42958                                  
 42959 00007618 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42960 0000761C 8936[4800]              	mov	word [NULDEV],si
 42961                                  ;SR;
 42962                                  ; There are some locations in the Win386 instance data structures
 42963                                  ; which need to be set up with the DOS data segment. First, initialize
 42964                                  ; the segment part of the instance table pointer in the SIS.
 42965                                  
 42966                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42967 00007620 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42968                                  
 42969                                  ; Now initialize the segment part of the pointer to the data in each
 42970                                  ; instance table entry.
 42971                                  
 42972 00007624 56                      	push	si		; preserve pointer to device chain
 42973                                  	; 18/12/2022
 42974                                  	; cx = 0
 42975 00007625 B107                    	mov	cl,7
 42976                                  	;mov	cx,7		; There are 7 entries in the instance table
 42977                                  				; M019
 42978                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42979 00007627 BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42980                                  Instance_init_loop:
 42981 0000762A 8C1C                    	mov	[si],ds		; set offset in instance entry
 42982                                  	;add	si,6
 42983 0000762C 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42984 0000762F E2F9                    	loop	Instance_init_loop
 42985                                  
 42986                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42987                                  
 42988                                  	; 18/12/2022
 42989 00007631 B105                    	mov	cl,5
 42990                                  	;mov	cx,5		; There are five entries in the instance table
 42991                                  
 42992                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42993                                  	;mov	si,11EDh	; point si to segment field
 42994 00007633 BE[CE11]                	mov	si,OldInstanceJunk+6
 42995                                  OldInstance_init_loop:
 42996 00007636 8C1C                    	mov	[si],ds		; set offset in instance entry
 42997 00007638 83C606                  	add	si,6		; move on to next entry
 42998 0000763B E2F9                    	loop	OldInstance_init_loop
 42999 0000763D 5E                      	pop	si		; restore pointer to device chain
 43000                                  
 43001                                  ; End of WIN386 2.xx compatibility bullshit
 43002                                  
 43003                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43004                                  %if 0	
 43005                                     	; 30/04/2019
 43006                                  	;push	es
 43007                                  	;pop	ds
 43008                                  			; ds:si points to console device
 43009                                  
 43010                                  	; 24/04/2019 - Retro DOS v4.0
 43011                                  
 43012                                  	; 15/07/2018
 43013                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 43014                                  	; (Set INT 2Ah handler address to an 'IRET')
 43015                                  
 43016                                  	; need crit vector inited to use deviocall
 43017                                  	;push	ds			; preserve segment of device chain
 43018                                  	push	es ; 30/04/2019
 43019                                  
 43020                                  %endif
 43021                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43022 0000763E 06                      	push	es
 43023                                  	; 17/12/2022
 43024                                  	;pop	ds
 43025                                  	;push	ds
 43026                                  
 43027 0000763F 31C0                    	xor	ax,ax
 43028 00007641 8ED8                    	mov	ds,ax			; point DS to int vector table
 43029 00007643 B8[9C75]                	mov	ax,initiret
 43030                                  	;mov	[0A8h],ax  ; [2Ah*4]
 43031 00007646 A3A800                  	mov	[addr_int_ibm],ax
 43032 00007649 8CC8                    	mov	ax,cs
 43033                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 43034 0000764B A3AA00                  	mov	[addr_int_ibm+2],ax
 43035 0000764E 1F                      	pop	ds			; restore segment of device chain
 43036                                  
 43037 0000764F E81C02                  	call	CHARINIT  		; initialize console driver
 43038 00007652 56                      	push	si			; save pointer to header
 43039                                  
 43040 00007653 16                      	push	ss			; move pointer to dos data...
 43041 00007654 07                      	pop	es			; ...into ES
 43042                                  
 43043                                  	;initialize sft for file 0 (CON)
 43044                                  
 43045                                          ; 07/07/2018 - Retro DOS v3.0
 43046                                  	; 24/04/2019 - Retro DOS v4.0
 43047                                  	;mov	di,SFTABL+6 
 43048 00007655 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 43049 00007658 B80300                          MOV     AX,3
 43050 0000765B AB                              STOSW           	; Refcount
 43051 0000765C FEC8                            DEC     AL
 43052 0000765E AB                              STOSW           	; Access rd/wr, compatibility
 43053 0000765F 30C0                            XOR     AL,AL
 43054 00007661 AA                              STOSB           	; attribute
 43055                                  	;mov	al,0C3h
 43056 00007662 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 43057 00007664 AB                      	STOSW			; flags
 43058 00007665 89F0                            mov	ax,si
 43059 00007667 AB                              stosw			; device pointer in devptr	
 43060 00007668 8CD8                            mov	ax,ds
 43061 0000766A AB                      	stosw
 43062 0000766B 31C0                    	xor	ax,ax	; 0
 43063 0000766D AB                      	stosw			; firclus
 43064 0000766E AB                      	stosw			; time
 43065 0000766F AB                      	stosw			; date
 43066 00007670 48                      	dec	ax	; -1
 43067 00007671 AB                      	stosw			; size
 43068 00007672 AB                      	stosw
 43069 00007673 40                      	inc	ax	; 0
 43070 00007674 AB                      	stosw			; position
 43071 00007675 AB                      	stosw
 43072                                  	;add	di,7
 43073 00007676 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 43074                                  				; point at name
 43075                                  	;add	si,10
 43076 00007679 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 43077                                  				; point to name
 43078 0000767C B90400                  	mov	cx,4
 43079 0000767F F3A5                    	rep	movsw		; name
 43080 00007681 B103                    	mov	cl,3
 43081 00007683 B020                    	mov	al," "
 43082 00007685 F3AA                    	rep	stosb		; extension
 43083                                  
 43084 00007687 5E                      	pop	si		; get back pointer to header
 43085                                  
 43086                                  				; mark device as CON I/O
 43087                                  	; 15/07/2018
 43088                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 43089 00007688 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 43090                                  	; 12/03/2018
 43091                                  	;mov	[ss:32h],si
 43092 0000768C 368936[3200]            	MOV     [SS:BCON],SI
 43093                                  	;mov	[ss:34h],ds
 43094 00007691 368C1E[3400]                    MOV     [SS:BCON+2],DS
 43095                                  
 43096                                  	; initialize each device until the clock device is found
 43097                                  
 43098                                  CHAR_INIT_LOOP:
 43099 00007696 C534                            LDS     SI,[SI]			; AUX device
 43100 00007698 E8D301                  	call	CHARINIT 
 43101                                         	;15/07/2018
 43102                                  	;test	byte [SI+4],8
 43103 0000769B F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 43104 0000769F 74F5                            JZ      SHORT CHAR_INIT_LOOP
 43105                                  	; 12/03/2018
 43106                                  	;mov	[ss:2Eh],si
 43107 000076A1 368936[2E00]                    MOV     [SS:BCLOCK],SI
 43108                                  	;mov	[ss:30h],ds
 43109 000076A6 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 43110                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 43111                                  
 43112                                  	;mov	bp,4970			; bp = pointer to free mem
 43113                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 43114                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 43115                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 43116 000076AB BDA512                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 43117                                  
 43118 000076AE 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 43119 000076B3 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 43120                                  PERDRV:
 43121                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 43122 000076B8 C534                            LDS	SI,[SI]			; Next device
 43123 000076BA 83FEFF                          CMP	SI,-1	; 0FFFFh
 43124 000076BD 7479                    	JZ	SHORT CONTINIT
 43125                                  
 43126 000076BF E8AC01                          call	CHARINIT
 43127                                  
 43128                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 43129                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 43130                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 43131                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 43132                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 43133                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 43134                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 43135                                  
 43136                                          ; 15/07/2018
 43137                                  	;test	word [SI+4],8000h		; DEVTYP
 43138                                          ; 17/12/2022
 43139                                  	;test	byte [SI+5],80h
 43140 000076C2 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 43141                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 43142 000076C6 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 43143                                  
 43144 000076C8 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 43145 000076CD 30ED                    	XOR     CH,CH
 43146                                          ; 07/07/2018
 43147                                  	;MOV	[SI+10],CL		; Number of units in name field
 43148 000076CF 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 43149 000076D2 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 43150 000076D7 30F6                    	XOR     DH,DH
 43151 000076D9 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 43152 000076DE 1E                      	PUSH    DS
 43153 000076DF 56                              PUSH    SI
 43154 000076E0 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 43155                                  
 43156                                  PERUNIT:
 43157 000076E5 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 43158 000076E7 43                              INC     BX
 43159 000076E8 43                              INC     BX                      ; On to next BPB
 43160                                  	; 15/12/2022
 43161                                  	; 07/07/2018
 43162                                          ;mov	[ES:BP+DPB.DRIVE],DL
 43163 000076E9 26885600                	MOV     [ES:BP],DL
 43164                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43165                                  	;;mov	[ES:BP+0],DL
 43166                                  	;mov	[ES:BP+DPB.DRIVE],DL
 43167                                  
 43168                                  	;MOV	[ES:BP+1],DH
 43169 000076ED 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 43170 000076F1 53                              PUSH    BX
 43171 000076F2 51                              PUSH    CX
 43172 000076F3 52                              PUSH    DX
 43173                                  
 43174                                          ;invoke	$SETDPB
 43175 000076F4 E8BF98                          CALL	_$SETDPB		; build DPB!
 43176                                  
 43177                                  	; 07/07/2018
 43178                                  	;MOV	AX,[ES:BP+2]
 43179 000076F7 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 43180                                          ; 12/03/2018
 43181 000076FB 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 43182 00007700 7604                    	JBE     SHORT NOTMAX		; N:
 43183 00007702 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 43184                                  NOTMAX:					
 43185                                  	; set the next dpb field in the currently built bpb
 43186                                  	; and mark as never accessed
 43187                                          
 43188                                  	; 24/04/2019
 43189 00007706 89E8                    	mov	ax,bp			; get pointer to DPB
 43190                                  	;add	ax,33
 43191 00007708 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 43192                                  					; set seg & offset of next DPB
 43193                                  	;mov	[es:bp+25],ax
 43194 0000770B 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 43195                                  	;mov	[es:bp+27],es
 43196 0000770F 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 43197                                  					; mark as never accessed
 43198                                  	;mov	byte [es:bp+24],0FFh
 43199 00007713 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 43200                                  
 43201 00007718 5A                      	POP     DX
 43202 00007719 59                              POP     CX
 43203 0000771A 5B                              POP     BX
 43204 0000771B 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 43205 0000771D 5E                              POP     SI
 43206 0000771E 1F                              POP     DS
 43207                                  					; ds:si -> device header
 43208                                  					; store it in the corresponding dpb
 43209                                  	; 07/07/2018
 43210                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 43211 0000771F 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 43212                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 43213 00007723 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 43214                                  
 43215 00007727 1E                              PUSH    DS			; save pointer to device header
 43216 00007728 56                              PUSH    SI
 43217 00007729 FEC6                            INC     DH			; inc unit #
 43218 0000772B FEC2                            INC     DL			; inc drive #
 43219 0000772D 8ED8                            MOV     DS,AX			; restore segment of BPB array
 43220                                          ;add	bp,33 ; 24/04/2019
 43221 0000772F 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 43222 00007732 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 43223                                          
 43224 00007734 5E                      	POP     SI			; restore pointer to device header
 43225 00007735 1F                              POP     DS
 43226 00007736 EB80                    	JMP	PERDRV			; process all drivers in chain
 43227                                  
 43228                                  CONTINIT:
 43229                                  	; 24/04/2019
 43230                                  	;sub	bp,33			; set link in last DPB to -1
 43231 00007738 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 43232                                  					; set last link offset & segment
 43233                                  	;mov	word [bp+25],0FFFFh
 43234 0000773B C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 43235                                  	;mov	word [bp+27],0FFFFh
 43236 00007740 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 43237                                  	;add	bp,33
 43238 00007745 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 43239                                  					; the DPB chain is done.  
 43240 00007748 16                      	push	ss
 43241 00007749 1F                      	pop	ds
 43242                                  
 43243 0000774A 89E8                    	mov	ax,bp
 43244 0000774C E850FE                  	call	ParaRound		; round up to segment
 43245                                  
 43246 0000774F 8CDA                    	mov	dx,ds			; dx = dosdata segment
 43247 00007751 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 43248                                  
 43249 00007753 BB0F00                  	mov	bx,0Fh
 43250                                  	
 43251                                  	; 24/05/2019
 43252                                  	;mov	cx,[ENDMEM]
 43253                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43254                                  	; 17/12/2022
 43255                                  	;mov	cx,[ENDMEM] 
 43256                                  					; set seg inpacketto dosdata					
 43257 00007756 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 43258                                  
 43259                                  ; Patch in the segments of the interrupt vectors with current code segment.
 43260                                  ; Also patch in the segment of the pointers in the dosdata area.
 43261                                  ;
 43262                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 43263                                  ; calls were done. The procedure patch_misc_segments is called multiple
 43264                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 43265                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 43266                                  
 43267 0000775A 52                      	push	dx			; preserve first free segment
 43268                                  
 43269 0000775B A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 43270 0000775E 8EC0                    	mov	es,ax			; es = segment of DOS
 43271 00007760 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 43272                                  
 43273 00007766 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 43274 00007769 E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 43275                                  					; other tables with seg in ES.
 43276                                  	; 17/12/2022
 43277                                  	; cx = 0
 43278 0000776C 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 43279                                  
 43280 00007770 5A                      	pop	dx			; restore first free segment
 43281                                  
 43282                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 43283                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 43284                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 43285                                  ; low_mem_stub by seg_reinit.
 43286                                  
 43287                                  	;xor	ax,ax ; 0
 43288                                  	;mov	ds,ax
 43289                                  	;mov	es,ax
 43290                                  	; 17/12/2022
 43291                                  	; cx = 0
 43292                                  	;xor	cx,cx ; 0
 43293 00007771 8ED9                    	mov	ds,cx
 43294 00007773 8EC1                    	mov	es,cx
 43295                                  
 43296                                  	; set the segment of int 24 vector that was 
 43297                                  	; left out by patch_vec_segments above.
 43298                                  
 43299                                  	; 17/12/2022
 43300                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43301                                  ;%if 0
 43302                                  	; 24/05/2019
 43303                                  	;;mov	di,90h
 43304                                  	;;mov	di,4*int_fatal_abort
 43305                                  	;mov	di,addr_int_fatal_abort
 43306 00007775 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 43307                                  
 43308 00007778 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 43309                                  	;mov	[di+2],ax  ; int 24h segment
 43310 0000777C 8905                    	mov	[di],ax ; 24/05/2019
 43311                                  
 43312                                  	;;mov	di,82h
 43313                                  	;mov	di,INTBASE+2
 43314                                  
 43315                                  ;%endif
 43316                                  	; 17/12/2022
 43317                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43318                                  	;;mov	di,90h
 43319                                  	;;mov	di,4*int_fatal_abort
 43320                                  	;mov	di,addr_int_fatal_abort
 43321                                  	;mov	ax,[ss:TEMP_DOSLOC]
 43322                                  	;mov	[di+2],ax  ; int 24h segment
 43323                                  	;;mov	di,82h
 43324                                  	;mov	di,INTBASE+2
 43325                                  
 43326                                  	; set default divide trap offset
 43327                                  
 43328                                  	;mov	word ptr ds:[0],offset doscode:divov
 43329 0000777E C7060000[7251]          	mov	word [0],DIVOV	
 43330                                  
 43331                                  	; set vectors 20-28 and 2a-3f to point to iret.
 43332                                  
 43333                                  	;mov	di,80h
 43334 00007784 BF8000                  	mov	di,INTBASE
 43335                                  	;mov	ax,offset doscode:irett
 43336 00007787 B8[E202]                	mov	ax,IRETT
 43337                                  
 43338                                  	; 17/12/2022
 43339                                  	; cx = 0
 43340 0000778A B109                    	mov	cl,9
 43341                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 43342                                  					;   sets offsets for ints 20h-28h
 43343                                  iset1:
 43344 0000778C AB                      	stosw
 43345                                  	;add	di,2
 43346                                  	; 20/09/2023
 43347 0000778D 47                      	inc	di
 43348 0000778E 47                      	inc	di
 43349 0000778F E2FB                    	loop	iset1
 43350                                  
 43351 00007791 83C704                  	add	di,4			; skip vector 29h
 43352                                  
 43353                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 43354                                  ;					;   sets offsets for ints 2ah-2fh
 43355                                  ;iset2:
 43356                                  ;	stosw
 43357                                  ;	add	di,2
 43358                                  ;	loop	iset2
 43359                                  
 43360                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43361                                  ; patch_vec_segments above. So skip it.
 43362                                  
 43363                                  ;	add	di,8			; skip vector 30h & 31h 
 43364                                  
 43365                                  	;;;
 43366                                  	; 06/05/2019 - Retro DOS v4.0
 43367                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 43368                                  	; 17/12/2022
 43369 00007794 B105                    	mov	cl,5 ; 28/06/2019
 43370                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43371                                  	;mov	cx,6
 43372                                  iset2:
 43373 00007796 AB                      	stosw
 43374                                  	;add	di,2
 43375                                  	; 20/09/2023
 43376 00007797 47                      	inc	di
 43377 00007798 47                      	inc	di
 43378 00007799 E2FB                    	loop	iset2
 43379                                  
 43380                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43381                                  	; 17/12/2022
 43382 0000779B 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 43383                                  	;add	di,8
 43384                                  	;;;
 43385                                  
 43386                                  	; 17/12/2022
 43387 0000779E B10E                    	mov	cl,14
 43388                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 43389                                  					;   sets offsets for ints 32h-3fh
 43390                                  iset3:
 43391 000077A0 AB                      	stosw
 43392                                  	;add	di,2
 43393                                  	; 20/09/2023
 43394 000077A1 47                      	inc	di
 43395 000077A2 47                      	inc	di
 43396 000077A3 E2FB                    	loop	iset3
 43397                                  
 43398                                  ;if installed
 43399                                  	; set the offset of int2f handler
 43400                                  	;mov	word [0BCh],INT2F
 43401 000077A5 C706BC00[0307]          	mov	word [02Fh*4],INT2F
 43402                                  	; set segment to doscode as we have to do int 2f to check for XMS
 43403 000077AB 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 43404                                  	;mov	[0BEh],ax
 43405 000077AF A3BE00                  	mov	[(02Fh*4)+2],ax
 43406                                  ;endif
 43407                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 43408                                  	; long jump will be patched in by seg_reinit
 43409                                  
 43410                                  	;mov	byte [C0h],0EAh
 43411 000077B2 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43412                                  	;mov	byte [C1h],CALL_ENTRY
 43413 000077B7 C706C100[E302]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43414                                  
 43415 000077BD C7068000[DC02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43416 000077C3 C7068400[0803]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43417 000077C9 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43418 000077CF 89168A00                	mov	word [addr_int_terminate+2],dx	
 43419 000077D3 C7069400[2D05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43420 000077D9 C7069800[B405]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43421 000077DF C7069C00[AA60]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43422                                  
 43423 000077E5 16                      	push	ss
 43424 000077E6 1F                      	pop	ds
 43425                                  	
 43426                                  	; 24/05/2019
 43427                                  	;push	ss
 43428                                  	;pop	es
 43429                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43430                                  	; 17/12/2022
 43431                                  	;push	ss
 43432                                  	;pop	es
 43433                                  
 43434 000077E7 52                      	push	dx			; remember address of arena
 43435                                  
 43436 000077E8 42                      	inc	dx			; leave room for arena header
 43437                                  	;mov	[330h],dx
 43438 000077E9 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43439                                  
 43440 000077ED 31FF                    	xor	di,di			; point es:di at end of memory
 43441 000077EF 8EC2                    	mov	es,dx			; ...where psp will be
 43442 000077F1 31C0                    	xor	ax,ax
 43443                                  	;mov	cx,80h			; psp is 128 words
 43444                                  	; 17/12/2022
 43445 000077F3 B180                    	mov	cl,128 ; 28/06/2019
 43446                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43447                                  	;mov	cx,128
 43448                                  
 43449 000077F5 F3AB                    	rep	stosw			; zero out psp area
 43450 000077F7 A1[4603]                        mov     ax,[ENDMEM]
 43451                                  	
 43452                                  	; 17/12/2022
 43453                                  	; cx = 0
 43454 000077FA E80799                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43455                                  
 43456                                  	; ds, es now point to PSP
 43457                                  
 43458 000077FD 16                      	push	ss
 43459 000077FE 1F                      	pop	ds
 43460                                  
 43461                                  	;mov	di,24
 43462 000077FF BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43463 00007802 31C0                    	xor	ax,ax
 43464 00007804 AB                      	stosw
 43465 00007805 AA                      	stosb				; 0,1 and 2 are con device
 43466 00007806 B0FF                    	mov	al,0FFh
 43467                                  	;mov	cx,FILPERPROC-3 ; 17
 43468                                  	; 17/12/2022
 43469                                  	; cx = 4
 43470 00007808 B111                    	mov	cl,FILPERPROC-3 ; 17
 43471 0000780A F3AA                    	rep	stosb			; rest are unused
 43472                                  
 43473 0000780C 16                      	push	ss
 43474 0000780D 07                      	pop	es
 43475                                  					; must be set to print messages
 43476 0000780E 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 43477                                  
 43478                                  ; after this point the char device functions for con will work for
 43479                                  ; printing messages
 43480                                  
 43481                                  	; 24/04/2019 - Retro DOS v4.0
 43482                                  
 43483                                  ; 12/05/2019
 43484                                  ;
 43485                                  ;write_version_msg:
 43486                                  ;
 43487                                  ;	;if	(not ibm)
 43488                                  ;	;mov	si,offset doscode:header
 43489                                  ;	mov	si,HEADER
 43490                                  ;outmes:
 43491                                  ;	;lods	cs:byte ptr [si]
 43492                                  ;	cs
 43493                                  ;	lodsb
 43494                                  ;	cmp	al,"$"
 43495                                  ;	je	short outdone
 43496                                  ;	call	OUTT
 43497                                  ;	jmp	short outmes
 43498                                  ;outdone:
 43499                                  ;	push	ss			; out stomps on segments
 43500                                  ;	pop	ds
 43501                                  ;	push	ss
 43502                                  ;	pop	es
 43503                                  ;	;endif
 43504                                  
 43505                                  	; at this point es is dosdata
 43506                                  
 43507                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 43508                                  	; in sysinittable (ms_data.asm)
 43509                                  
 43510                                  	;mov	si,0D28h
 43511 00007812 BE[280D]                	mov	si,SysInitTable
 43512                                  
 43513                                  	; 17/12/2022
 43514                                  	; ds = es = ss
 43515                                  
 43516                                  	; 17/12/2022
 43517                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43518                                  ;%if 0
 43519                                  	;;mov	[es:si+6],es
 43520                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43521                                  	;;mov	[es:si+2],es
 43522                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43523                                  	
 43524 00007815 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43525 00007818 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43526                                  
 43527                                  	; buffhead -> dosdata:hashinitvar 
 43528                                  
 43529                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43530 0000781B 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43531                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43532                                  	;mov	si,6Dh
 43533 0000781F BE[6D00]                	mov	si,HASHINITVAR
 43534                                  	;mov	[es:BUFFHEAD],si
 43535 00007822 8936[3800]              	mov	[BUFFHEAD],si
 43536                                  
 43537 00007826 5A                              pop     dx                      ; restore address of arena
 43538                                  
 43539                                  	;mov	[032Ch+2],dx
 43540 00007827 8916[2E03]                      mov     [DMAADD+2],dx
 43541                                  
 43542                                  	;mov	[es:arena_head],dx
 43543 0000782B 8916[2400]              	mov	[arena_head],dx
 43544                                  
 43545                                  ;%endif
 43546                                  
 43547                                  ; 17/12/2022
 43548                                  %if 0
 43549                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43550                                  	;;;
 43551                                  	;mov	[es:si+6],es
 43552                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43553                                  	;mov	[es:si+2],es
 43554                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43555                                  
 43556                                  	; buffhead -> dosdata:hashinitvar 
 43557                                  
 43558                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43559                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43560                                  	;mov	si,6Dh
 43561                                  	mov	si,HASHINITVAR
 43562                                  	mov	[es:BUFFHEAD],si
 43563                                  
 43564                                          pop     dx                      ; restore address of arena
 43565                                  
 43566                                  	;mov	[032Ch+2],dx
 43567                                          mov     [DMAADD+2],dx
 43568                                  
 43569                                  	mov	[es:arena_head],dx
 43570                                  	;;;
 43571                                  %endif
 43572                                  
 43573 0000782F 8EDA                            mov     ds,dx
 43574                                  
 43575                                  	;mov	byte [0],'Z'
 43576 00007831 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43577                                          ;mov	word [1],0
 43578 00007836 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43579                                  
 43580 0000783C 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43581 00007840 29D0                    	sub	ax,dx
 43582 00007842 48                              dec     ax
 43583 00007843 A30300                          mov     [ARENA.SIZE],ax
 43584                                  
 43585                                  	; point to sft 0
 43586                                  
 43587                                  	;mov	di,offset dosdata:sftabl + sftable
 43588                                  	;mov	di,SFTABL+6
 43589 00007846 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43590 00007849 B80300                          mov     ax,3
 43591 0000784C AB                              stosw           		; adjust refcount
 43592                                  
 43593                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43594                                  
 43595                                          ;mov	di,offset dosdata:sysinittable
 43596                                  	;mov	di,0D28h
 43597 0000784D BF[280D]                	mov	di,SysInitTable	
 43598                                  
 43599 00007850 42                      	inc	dx			; advance dx from arena to psp
 43600 00007851 8EDA                    	mov	ds,dx			; point ds to psp
 43601                                  
 43602                                  					; pass the address os seg_reinit 
 43603                                  					; in dx
 43604 00007853 BA[C178]                	mov	dx,seg_reinit
 43605 00007856 B9[E572]                	mov	cx,exepatch_start
 43606 00007859 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43607                                  
 43608 0000785D B8[9C75]                	mov	ax,SYSBUF
 43609 00007860 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43610                                  	
 43611 00007863 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43612 00007868 368E16[8605]                    mov     ss,[ss:USER_SS]
 43613                                  
 43614 0000786D CB                              retf
 43615                                  
 43616                                  ;
 43617                                  ; END OF DOSINIT
 43618                                  ;
 43619                                  ;--------------------------------------------------------------------------
 43620                                  
 43621                                  CHARINIT:
 43622                                  	; 24/04/2019 - Retro DOS v4.0
 43623                                  	; 07/07/2018 - Retro DOS v3.0
 43624                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 43625 0000786E 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 43626                                  	;mov	byte [ss:035Bh],0
 43627 00007874 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 43628                                  	;mov	byte [ss:035Ch],0
 43629 0000787A 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 43630                                  	;mov	word [ss:035BD],0
 43631 00007880 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 43632 00007887 06                              PUSH	ES
 43633 00007888 53                              PUSH	BX
 43634 00007889 50                              PUSH	AX
 43635 0000788A BB[5A03]                        MOV	BX,DEVCALL
 43636                                          ;PUSH	CS
 43637 0000788D 16                      	PUSH	SS ; 30/04/2019
 43638 0000788E 07                              POP	ES
 43639 0000788F E8D8CC                          CALL	DEVIOCALL2	
 43640 00007892 58                      	POP	AX
 43641 00007893 5B                              POP	BX
 43642 00007894 07                              POP	ES
 43643 00007895 C3                              RETN
 43644                                  
 43645                                  ; 25/04/2019 - Retro DOS v4.0
 43646                                  
 43647                                  ;-----------------------------------------------------------------------------
 43648                                  ;
 43649                                  ;	check_XMM: routine to check presence of XMM driver
 43650                                  ;
 43651                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 43652                                  ;
 43653                                  ;	USED:	none
 43654                                  ;
 43655                                  ;-----------------------------------------------------------------------------
 43656                                  
 43657                                  check_XMM: ; proc near
 43658                                  ;
 43659                                  ; determine whether or not an XMM driver is installed
 43660                                  ;
 43661 00007896 50                      	push	ax
 43662                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 43663 00007897 B80043                  	mov	ax,4300h
 43664 0000789A CD2F                    	int	2Fh
 43665                                  		; - Multiplex - XMS - INSTALLATION CHECK
 43666                                  		; Return: AL = 80h XMS driver installed
 43667                                  		; AL <> 80h no driver
 43668 0000789C 3C80                    	cmp	al,80h			; Q: installed
 43669 0000789E 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 43670                                  ;
 43671                                  ; get the XMM control functions entry point, save it, we
 43672                                  ; need to call it later.
 43673                                  ;
 43674 000078A0 53                      	push	bx
 43675 000078A1 52                      	push	dx
 43676 000078A2 1E                      	push	ds
 43677 000078A3 06                      	push	es
 43678                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 43679 000078A4 B81043                  	mov	ax,4310h
 43680 000078A7 CD2F                    	int	2Fh
 43681                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 43682                                  		; Return: ES:BX -> driver entry point
 43683                                  
 43684 000078A9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43685                                  
 43686 000078AE 891E[4911]              	mov	[XMMcontrol],bx
 43687 000078B2 8C06[4B11]              	mov	[XMMcontrol+2],es
 43688                                  cXMMexit:
 43689 000078B6 F8                      	clc
 43690 000078B7 07                      	pop	es
 43691 000078B8 1F                      	pop	ds
 43692 000078B9 5A                      	pop	dx
 43693 000078BA 5B                      	pop	bx
 43694 000078BB 58                      	pop	ax
 43695 000078BC C3                      	retn				; done
 43696                                  ;
 43697                                  ; set carry if XMM driver not present
 43698                                  ;
 43699                                  cXMM_no_driver:
 43700 000078BD F9                      	stc
 43701 000078BE 58                      	pop	ax
 43702 000078BF C3                      	retn
 43703                                  
 43704                                  ;-----------------------------------------------------------------------------
 43705                                  ;
 43706                                  ; Procedure Name : seg_reinit
 43707                                  ;
 43708                                  ; Inputs	 : ES has final dos code location
 43709                                  ;		   AX = 0 / 1
 43710                                  ;
 43711                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 43712                                  ;		   if AX =0
 43713                                  ;		      if first entry
 43714                                  ;			 patch segment & offset of vectors with stub
 43715                                  ;			 and stub with segment in ES
 43716                                  ;		      else
 43717                                  ;			 patch stub with segment in ES
 43718                                  ;
 43719                                  ;		   else if AX = 1
 43720                                  ;			patch segment of vectors with segment in ES	
 43721                                  ;
 43722                                  ; NOTE		 : This routine can be called at most twice!
 43723                                  ;
 43724                                  ; Regs Mod.	 : es, ax, di, cx, bx
 43725                                  ;-----------------------------------------------------------------------------
 43726                                  
 43727 000078C0 00                      num_entry: db	0		; keeps track of the # of times this routine
 43728                                  				; has been called. (0 or 1)
 43729                                  
 43730                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 43731                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 43732                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 43733                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 43734                                  
 43735                                  seg_reinit:	; proc	far
 43736 000078C1 1E                      	push	ds
 43737                                  
 43738 000078C2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43739                                  
 43740 000078C7 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 43741                                  					; other tables with seg in ES.
 43742                                  	; 17/12/2022
 43743                                  	; cx = 0
 43744 000078CA 39C8                    	cmp	ax,cx ; 0
 43745                                  	;cmp	ax,0
 43746 000078CC 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 43747                                  
 43748                                  	; 17/12/2022
 43749 000078CE 2E380E[C078]            	cmp	[cs:num_entry],cl ; 0
 43750                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 43751 000078D3 7508                    	jne	short second_entry	; N: just patch the stub with 
 43752                                  					;    segment in ES
 43753                                  					; Y: patch the vectors with stub 
 43754 000078D5 8CD8                    	mov	ax,ds
 43755 000078D7 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 43756 000078DA E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 43757                                  					; with those in the stub.
 43758                                  	; 17/12/2022
 43759                                  	; cx = 0
 43760                                  second_entry:
 43761 000078DD 8CC0                    	mov	ax,es			; patch the stub with segment in es
 43762                                  
 43763                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 43764                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 43765 000078DF BF[4810]                	mov	di,DOSINTTABLE
 43766                                  	; 17/12/2022
 43767                                  	; cx = 0
 43768                                  	;mov	cx,9
 43769 000078E2 B109                    	mov	cl,9
 43770 000078E4 1E                      	push	ds			
 43771 000078E5 07                      	pop	es			; es:di -> DOSINTTABLE
 43772                                  
 43773                                  dosinttabloop:
 43774                                  	;add	di,2
 43775                                  	; 19/06/2023
 43776 000078E6 47                      	inc	di
 43777 000078E7 47                      	inc	di
 43778 000078E8 AB                      	stosw
 43779 000078E9 E2FB                    	loop	dosinttabloop	
 43780                                  
 43781                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 43782                                  ; use the HMA, so we don't want to check CS
 43783                                  
 43784                                  ;ifndef ROMDOS
 43785 000078EB 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 43786 000078EE 7220                    	jb	short sr_done		; N: done
 43787                                  ;endif
 43788 000078F0 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 43789 000078F3 721B                    	jc	short sr_done		; failed to set up XMS do not do
 43790                                  					; A20 toggling in the stub.
 43791                                  	; 17/12/2022
 43792                                  	; cx = 0
 43793 000078F5 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 43794                                  ; M021-
 43795                                  	;mov	byte [1211h],1
 43796 000078F8 C606[F211]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 43797                                  				
 43798                                  					; set pointer to the routine that 
 43799                                  					; patches buggy exepacked code.
 43800                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 43801 000078FD C706[F311][3574]        	mov	word [FixExePatch],ExePatch
 43802                                  					; M068: set pointer to the routine 
 43803                                  					; M068: that detects copy protected
 43804                                  					; M068: apps
 43805                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 43806 00007903 C706[6100][6675]        	mov	word [ChkCopyProt],IsCopyProt
 43807                                  
 43808                                  	; 19/09/2023
 43809 00007909 EB05                    	jmp	short sr_done
 43810                                  
 43811                                  ; 28/12/2022 - Retro DOS v4.1
 43812                                  %if 0
 43813                                  ;----------------------------------------------------------------------------
 43814                                  
 43815                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 43816                                  
 43817                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43818                                  ;
 43819                                  ;; M020 - begin
 43820                                  ;
 43821                                  ;	call	WhatCPUType
 43822                                  ;	cmp	al,1
 43823                                  ;	jne	short sr_done 		; we need Rational Patch only
 43824                                  ;					;  on 286 systems
 43825                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 43826                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43827                                  ;
 43828                                  ;; M020 - end
 43829                                  ;
 43830                                  ;	jmp	short sr_done
 43831                                  ;
 43832                                  ;patch_vec_seg:				; patch vectors with segment in es
 43833                                  ;	mov	ax,es
 43834                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 43835                                  ;					; NOTE we don't have to patch the 
 43836                                  ;					; offsets as they have been already
 43837                                  ;					; set to the doscode offsets at
 43838                                  ;					; DOSINIT.
 43839                                  ;sr_done:
 43840                                  ;	mov	byte [cs:num_entry],1
 43841                                  ;	pop	ds
 43842                                  ;	retf	; ! far return !
 43843                                  
 43844                                  ;----------------------------------------------------------------------------
 43845                                  ;
 43846                                  ; Procedure Name : WhatCPUType
 43847                                  ;
 43848                                  ; Inputs	 : none
 43849                                  ;
 43850                                  ; Outputs	 : AL = 0 if CPU <  286
 43851                                  ;		      = 1 if CPU == 286
 43852                                  ;		      = 2 if CPU >= 386
 43853                                  ;
 43854                                  ; Regs. Mod.	 : AX
 43855                                  ;
 43856                                  ;----------------------------------------------------------------------------
 43857                                  
 43858                                  WhatCPUType:
 43859                                  	; 25/04/2019 - Retro DOS v4.0
 43860                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 43861                                  
 43862                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 43863                                  
 43864                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 43865                                  ; 	it is called from both CODE and SYSINITSEG.
 43866                                  ;
 43867                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 43868                                  ;  Returns: AX = 0 if 8086 or 8088
 43869                                  ;              = 1 if 80286
 43870                                  ;              = 2 if 80386
 43871                                  
 43872                                  	; 04/11/2022
 43873                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 43874                                  
 43875                                  Get_CPU_Type:	;macro
 43876                                  	pushf
 43877                                  	push	bx			; preserve bx
 43878                                  	xor	bx,bx			; init bx to zero
 43879                                  
 43880                                  	xor	ax,ax			; 0000 into AX
 43881                                  	push	ax			; put it on the stack...
 43882                                  	popf				; ...then shove it into the flags
 43883                                  	pushf				; get it back out of the flags...
 43884                                  	pop	ax			; ...and into ax
 43885                                  	and	ax,0F000h		; mask off high four bits
 43886                                  	cmp	ax,0F000h		; was it all 1's?
 43887                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 43888                                  
 43889                                  	mov	ax,0F000h		; now try to set the high four bits..
 43890                                  	push	ax
 43891                                  	popf
 43892                                  	pushf
 43893                                  	pop	ax			; ...and see what happens
 43894                                  	and	ax,0F000h		; any high bits set ?
 43895                                  	jz	short cpu_286		; nay; it's an 80286
 43896                                  
 43897                                  cpu_386:				; bx starts as zero
 43898                                  	inc	bx			; inc twice if 386
 43899                                  cpu_286:				; just inc once if 286
 43900                                  	inc	bx
 43901                                  cpu_8086:				; don't inc at all if 086
 43902                                  	mov	ax,bx			; put CPU type value in ax
 43903                                  	pop	bx			; restore original bx
 43904                                  	popf
 43905                                  	
 43906                                  	;endm
 43907                                  
 43908                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 43909                                  	retn	; 19/09/2023
 43910                                  
 43911                                  ; 19/09/2023
 43912                                  ;	; 04/11/2022
 43913                                  ;	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 43914                                  ;	cmp	al,1
 43915                                  ;	jne	short sr_done 		; we need Rational Patch only
 43916                                  ;					;  on 286 systems
 43917                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43918                                  
 43919                                  ;----------------------------------------------------------------------------
 43920                                  %endif	; 28/12/2022
 43921                                  
 43922                                  	; 19/09/2023
 43923                                  	;jmp	short sr_done
 43924                                  
 43925                                  patch_vec_seg:				; patch vectors with segment in es
 43926 0000790B 8CC0                    	mov	ax,es
 43927 0000790D E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 43928                                  					; NOTE we don't have to patch the 
 43929                                  					; offsets as they have been already
 43930                                  					; set to the doscode offsets at
 43931                                  					; DOSINIT.
 43932                                  sr_done:
 43933 00007910 2EC606[C078]01          	mov	byte [cs:num_entry],1
 43934 00007916 1F                      	pop	ds
 43935 00007917 CB                      	retf	; ! far return !
 43936                                  
 43937                                  ;----------------------------------------------------------------------------
 43938                                  ;
 43939                                  ; Procedure Name : patch_vec_segments
 43940                                  ;
 43941                                  ; Inputs	 : ax -> has segment address to patch in
 43942                                  ;		   ds -> DOSDATA
 43943                                  ;
 43944                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 43945                                  ;			
 43946                                  ;			0,20-28,3a-3f
 43947                                  ;
 43948                                  ; Regs. Mod.	 : DI,CX,DX,AX
 43949                                  ;
 43950                                  ;----------------------------------------------------------------------------
 43951                                  
 43952                                  patch_vec_segments:
 43953                                  
 43954 00007918 06                      	push	es
 43955                                  
 43956 00007919 31C9                    	xor	cx,cx ; 0
 43957 0000791B 8EC1                    	mov	es,cx
 43958                                  
 43959                                  	;mov	di,82h
 43960 0000791D BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43961                                  
 43962 00007920 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43963                                  
 43964                                  					; set vectors 20 & 21
 43965                                  	; 04/11/2022
 43966                                  	;mov	cx,2
 43967                                  	; 17/12/2022
 43968                                  	;mov	cl,2
 43969                                  ps_set1:
 43970 00007924 AB                      	stosw	; int 20h segment
 43971                                  	;add	di,2
 43972                                  	; 17/12/2022
 43973 00007925 47                      	inc	di
 43974 00007926 47                      	inc	di
 43975                                  	;loop	ps_set1
 43976                                  
 43977                                  	; 17/12/2022
 43978 00007927 AB                      	stosw	; int 21h segment
 43979                                  	;inc	di
 43980                                  	;inc	di
 43981                                  
 43982                                  	;add	di,4			; skip int 22h vector
 43983 00007928 83C706                  	add	di,6 ; *
 43984                                  
 43985 0000792B AB                      	stosw				; set int 23h
 43986 0000792C 83C706                  	add	di,6			; skip int 24h
 43987                                  
 43988                                  					; set vectors 25-28 and 2a-3f 
 43989                                  	; 04/11/2022
 43990                                  	;mov	cx,4			; set 4 segments
 43991                                  	; 17/12/2022
 43992 0000792F B104                    	mov	cl,4
 43993                                  ps_set2:
 43994 00007931 AB                      	stosw				
 43995                                  	;add	di,2
 43996                                  	; 17/12/2022
 43997 00007932 47                      	inc	di
 43998 00007933 47                      	inc	di
 43999 00007934 E2FB                    	loop	ps_set2
 44000                                  
 44001 00007936 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 44002                                  					;   already be set.
 44003                                  	; 04/11/2022
 44004                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 44005                                  	; 17/12/2022
 44006 00007939 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 44007                                  ps_set3:
 44008 0000793B AB                      	stosw
 44009                                  	;add	di,2
 44010                                  	; 17/12/2022
 44011 0000793C 47                      	inc	di
 44012 0000793D 47                      	inc	di
 44013 0000793E E2FB                    	loop	ps_set3
 44014                                  
 44015                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 44016                                  ; below. So skip it.
 44017                                  
 44018 00007940 83C708                  	add	di,8			; skip vector 30h & 31h 
 44019                                  	
 44020                                  	; 04/11/2022
 44021                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 44022                                  	; 17/12/2022
 44023 00007943 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 44024                                  ps_set4:
 44025 00007945 AB                      	stosw
 44026                                  	;add	di,2
 44027                                  	; 17/12/2022
 44028 00007946 47                      	inc	di
 44029 00007947 47                      	inc	di
 44030 00007948 E2FB                    	loop	ps_set4
 44031                                  
 44032                                  ; set offset of int2f
 44033                                  
 44034                                  ;if installed
 44035                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 44036                                  ;endif
 44037                                  	;mov	[es:0C3h],ax
 44038 0000794A 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 44039                                  	; 17/12/2022
 44040                                  	; cx = 0
 44041 0000794E 07                      	pop	es
 44042 0000794F C3                      	retn
 44043                                  
 44044                                  ;---------------------------------------------------------------------------
 44045                                  ;
 44046                                  ; Procedure Name : patch_misc_segments
 44047                                  ;
 44048                                  ; Inputs	 : es = segment to patch in
 44049                                  ;		   ds = dosdata
 44050                                  ;
 44051                                  ; outputs	 : patches in the sharer and other tables in the dos
 44052                                  ;		   with right dos code segment in es
 44053                                  ;
 44054                                  ; Regs Mod	 : DI,SI,CX
 44055                                  ;
 44056                                  ;---------------------------------------------------------------------------
 44057                                  
 44058                                  patch_misc_segments:
 44059                                  
 44060 00007950 53                      	push	bx
 44061 00007951 06                      	push	es
 44062 00007952 50                      	push	ax
 44063                                  
 44064 00007953 8CC0                    	mov	ax,es			; ax - > DOS segment
 44065                                  	
 44066 00007955 1E                      	push	ds
 44067 00007956 07                      	pop	es			; es -> DOSDATA
 44068                                  	
 44069                                  ; initialize the jump table for the sharer...
 44070                                  
 44071                                  	;mov	di,offset dosdata:jshare
 44072                                  	;mov	di,90h
 44073 00007957 BF[9000]                	mov	di,JShare
 44074                                  	;mov	bx,[0AAAh]
 44075 0000795A 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 44076                                  					; table was patched during the first
 44077                                  					; call to this routine
 44078 0000795E B90F00                  	mov	cx,15
 44079                                  jumptabloop:
 44080                                  	;add	di,2			; skip offset
 44081                                  	; 17/12/2022
 44082 00007961 47                      	inc	di
 44083 00007962 47                      	inc	di
 44084 00007963 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 44085 00007966 7405                    	je	short share_patch	; Y: patch in sharer table
 44086                                  					; N: 
 44087 00007968 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 44088 0000796B 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 44089                                  share_patch:
 44090 0000796D AB                      	stosw				; drop in segment
 44091                                  no_share_patch:
 44092 0000796E E2F1                    	loop	jumptabloop
 44093                                  					; BUGBUG patching the country info 
 44094                                  					; with dosdata can be done inline
 44095                                  					; in dosinit.
 44096                                  					; for dos 3.3 country info
 44097                                  					; table address
 44098                                  
 44099                                  	;mov	si,offset dosdata:country_cdpg
 44100                                  	;mov	si,122Ah   
 44101 00007970 BE[0012]                	mov	si,COUNTRY_CDPG
 44102                                  					; initialize double word
 44103                                  					; pointers with dosdata in ds
 44104                                  	;mov	[si+4Fh],ds
 44105                                  	;mov	[si+54h],ds
 44106                                  	;mov	[si+59h],ds
 44107                                  	;mov	[si+5Eh],ds
 44108                                  	;mov	[si+80h],ds
 44109                                  	;mov	[si+63h],ds
 44110 00007973 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 44111 00007976 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 44112 00007979 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 44113 0000797C 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 44114 0000797F 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 44115 00007983 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 44116                                  
 44117                                  					; fastopen routines are in doscode
 44118                                  					; so patch with doscode seg in ax
 44119                                  
 44120                                  	;mov	si,offset dosdata:fastopentable
 44121                                  	;mov	si,0D30h
 44122 00007986 BE[300D]                	mov	si,FastOpenTable
 44123                                  
 44124                                  	; 17/12/2022
 44125                                  	; bx = [TEMP_DOSLOC]
 44126 00007989 83FBFF                  	cmp	bx,-1
 44127                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 44128 0000798C 7405                    	je	short fast_patch	; Y: patch segment
 44129                                  	;mov	cx,[TEMP_DOSLOC]
 44130                                  					; Q: has fastopen patched in it's
 44131                                  					;    segment
 44132                                  	; 17/12/2022
 44133 0000798E 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 44134                                  	;;cmp	cx,[si+4]
 44135                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 44136 00007991 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 44137                                  
 44138                                  fast_patch:
 44139                                  	;mov	[si+4],ax
 44140 00007993 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 44141                                  no_fast_patch:
 44142                                  	; 17/12/2022
 44143                                  	; cx = 0
 44144 00007996 58                      	pop	ax
 44145 00007997 07                      	pop	es
 44146 00007998 5B                      	pop	bx
 44147                                  
 44148 00007999 C3                      	retn
 44149                                  
 44150                                  ;--------------------------------------------------------------------------
 44151                                  ;
 44152                                  ; Procedure Name : patch_offset
 44153                                  ; 
 44154                                  ; Inputs	 : NONE
 44155                                  ;
 44156                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 44157                                  ;		   0,20-28,3a-3f, and 30,31
 44158                                  ;
 44159                                  ;
 44160                                  ; Regs. Mod	 : AX,DI,CX
 44161                                  ;--------------------------------------------------------------------------
 44162                                  
 44163                                  patch_offset:
 44164 0000799A 06                      	push	es		; preserve es
 44165                                  
 44166 0000799B 31C0                    	xor	ax,ax
 44167 0000799D 8EC0                    	mov	es,ax
 44168                                  				; set default divide trap address
 44169                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 44170                                  	;mov	word [es:0],108Ah
 44171 0000799F 26C7060000[7010]        	mov	word [es:0],ldivov
 44172                                  
 44173                                  	;mov	di,80h
 44174 000079A6 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 44175                                  	;mov	ax,offset dosdata:lirett
 44176                                  	;mov	ax,10DAh
 44177 000079A9 B8[C010]                	mov	ax,lirett
 44178                                  				; set vectors 20 & 21 to point to iret.
 44179                                  	; 17/12/2022
 44180                                  	; cx = 0
 44181                                  
 44182                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 44183                                  po_iset1:
 44184 000079AC AB                      	stosw	; int 20h offset
 44185                                  	;add	di,2 ; *
 44186                                  	;loop	po_iset1
 44187                                  	; 17/12/2022
 44188 000079AD 47                      	inc	di
 44189 000079AE 47                      	inc	di
 44190 000079AF AB                      	stosw	; int 21h offset
 44191                                  
 44192                                  	;add	di,4		; skip vector 22h
 44193                                  	; 17/12/2022
 44194 000079B0 83C706                  	add	di,6 ; *	
 44195                                  
 44196 000079B3 AB                      	stosw			; set offset of 23h
 44197                                  	;add	di,6		; skip 24h
 44198                                  	; 19/09/2023
 44199 000079B4 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 44200                                  
 44201                                  				; set vectors 25-28 and 2a-3f to iret.
 44202                                  	; 04/11/2022
 44203                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 44204                                  	; 19/09/2023
 44205                                  	; 17/12/2022
 44206                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 44207                                  po_iset2:
 44208 000079B7 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 44209                                  	;add	di,2
 44210                                  	; 19/09/2023
 44211                                  	; 17/12/2022
 44212                                  	;inc	di
 44213                                  	;inc	di
 44214                                  	; 19/09/2023
 44215                                  	;loop	po_iset2
 44216                                  
 44217                                  	;add	di,4		; skip vector 29h
 44218                                  	; 19/09/2023
 44219 000079B8 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 44220                                  
 44221                                  	; 04/11/2022
 44222                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 44223                                  	; 17/12/2022
 44224                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 44225 000079BB B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 44226                                  po_iset3:
 44227 000079BD AB                      	stosw
 44228                                  	;add	di,2
 44229                                  	; 17/12/2022
 44230 000079BE 47                      	inc	di
 44231 000079BF 47                      	inc	di
 44232 000079C0 E2FB                    	loop	po_iset3
 44233                                  
 44234                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 44235                                  ; below. So skip it.
 44236                                  
 44237                                  	;add	di,8		; skip vector 30h & 31h 
 44238                                  	; 17/12/2022
 44239 000079C2 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 44240                                  
 44241                                  	; 04/11/2022
 44242                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 44243                                  				;   sets offsets for ints 32h-3fh
 44244                                  	; 17/12/2022
 44245 000079C5 B10E                    	mov	cl,14 ; 26/06/2019
 44246                                  po_iset4:
 44247 000079C7 AB                      	stosw
 44248                                  	;add	di,2
 44249                                  	; 17/12/2022
 44250 000079C8 47                      	inc	di
 44251 000079C9 47                      	inc	di
 44252 000079CA E2FB                    	loop	po_iset4
 44253                                  
 44254                                  ;if installed
 44255                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 44256                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 44257 000079CC 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 44258                                  ;endif
 44259                                  
 44260                                  ; set up entry point call at vectors 30-31h
 44261                                  	;mov	byte [es:0C0h],0EAh
 44262 000079D3 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 44263                                  	;mov	word [es:0C1h],10D0h
 44264                                  
 44265 000079D9 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 44266                                  
 44267                                  							; 19/09/2023
 44268                                  	;mov	word [es:80h],1094h
 44269 000079E0 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 44270                                  	;mov	word [es:84h],109Eh
 44271 000079E7 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 44272                                  	;mov	word [es:94h],10A8h
 44273 000079EE 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 44274                                  	;mov	word [es:98h],10B2h
 44275 000079F5 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 44276                                  	;mov	word [es:9Ch],10BCh
 44277 000079FC 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 44278                                  
 44279                                  	; 17/12/2022
 44280                                  	; CX = 0
 44281 00007A03 07                      	pop	es		; restore es
 44282 00007A04 C3                      	retn
 44283                                  
 44284                                  ;--------------------------------------------------------------------------
 44285                                  ;
 44286                                  ; 	Procedure Name	:	patch_in_nops
 44287                                  ;
 44288                                  ; 	Entry		: 	ES -> DOSDATA
 44289                                  ;
 44290                                  ;	Regs Mod	: 	cx, di
 44291                                  ;
 44292                                  ;	Description:
 44293                                  ;		This routine patches in 2 nops at the offsets specified in 
 44294                                  ;	patch_table. This basically enables the low mem stub to start 
 44295                                  ;	making XMS calls.
 44296                                  ;
 44297                                  ;--------------------------------------------------------------------------
 44298                                  
 44299                                  	; 04/11/2022
 44300                                  	; (MSDOS 5.0 MSDOS.SYS)
 44301                                  	; DOSCODE:0BC50h
 44302                                  
 44303                                  patch_table:	; label	byte
 44304                                  	;dw	offset dosdata:i0patch
 44305                                  	;dw	offset dosdata:i20patch
 44306                                  	;dw	offset dosdata:i21patch
 44307                                  	;dw	offset dosdata:i25patch
 44308                                  	;dw	offset dosdata:i26patch
 44309                                  	;dw	offset dosdata:i27patch
 44310                                  	;dw	offset dosdata:i2fpatch
 44311                                  	;dw	offset dosdata:cpmpatch
 44312 00007A05 [7010]                  	dw	i0patch
 44313 00007A07 [7A10]                  	dw	i20patch
 44314 00007A09 [8410]                  	dw	i21patch
 44315 00007A0B [8E10]                  	dw	i25patch
 44316 00007A0D [9810]                  	dw	i26patch
 44317 00007A0F [A210]                  	dw	i27patch
 44318 00007A11 [AC10]                  	dw	i2fpatch
 44319 00007A13 [B610]                  	dw	cpmpatch
 44320                                  
 44321                                  patch_table_size equ ($-patch_table)/2
 44322                                  
 44323                                  patch_in_nops:
 44324 00007A15 50                      	push	ax
 44325 00007A16 56                      	push	si
 44326 00007A17 BE[057A]                	mov	si,patch_table
 44327 00007A1A B89090                  	mov	ax,9090h ; nop, nop
 44328                                  	; 17/12/2022
 44329                                  	; cx = 0
 44330                                  	;mov	cx,8
 44331                                  	;mov	cx,patch_table_size ; 8
 44332 00007A1D B108                    	mov	cl,patch_table_size ; 8
 44333                                  pin_loop:
 44334 00007A1F 2E8B3C                  	mov	di,[cs:si]
 44335 00007A22 AB                      	stosw
 44336                                  	;add	si,2
 44337                                  	; 17/12/2022
 44338 00007A23 46                      	inc	si
 44339 00007A24 46                      	inc	si
 44340 00007A25 E2F8                    	loop	pin_loop
 44341 00007A27 5E                      	pop	si
 44342 00007A28 58                      	pop	ax
 44343 00007A29 C3                      	retn
 44344                                  
 44345                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 44346                                  ; ---------------------------------------------------------------------------
 44347                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 44348                                  ; ---------------------------------------------------------------------------
 44349                                  
 44350                                  	; 05/12/2022 - temporary ; (paragraph alinment)
 44351                                  DOSCODE_END:
 44352                                  	;times	9 db 0	; db 9 dup(0)
 44353                                  	; 18/12/2022
 44354 00007A2A 0000                    	dw	0  ;	times 2 db 0
 44355                                  
 44356                                  ;align 16
 44357                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 44358                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 44359                                  
 44360                                  ; ---------------------------------------------------------------------------
 44361                                  
 44362                                  
 44363                                  ;memstrt label word
 44364                                  ; ---------------------------------------------------------------------------
 44365                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 44366                                  ; ---------------------------------------------------------------------------
 44367                                  
 44368                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 44369                                  
 44370                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 44371                                  ; the dos initialization segment
 44372                                  
 44373                                  ;ifndef ROMDOS
 44374                                  
 44375                                  ;doscode ends
 44376                                  
 44377                                  ;else
 44378                                  
 44379                                  ;;dosinitseg ends
 44380                                  
 44381                                  ;endif ; ROMDOS
 44382                                  
 44383                                  ;============================================================================
 44384                                  
 44385                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 44386                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 44387                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 44388                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 44389                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 44390                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 44391                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 44392                                  
 44393                                  ;; burasý doscode sonu
 44394                                  
 44395                                  ;============================================================================
 44396                                  ; DOSDATA
 44397                                  ;============================================================================
 44398                                  ; 29/04/2019 - Retro DOS 4.0
 44399                                  
 44400                                  ;[BITS 16]
 44401                                  
 44402                                  ;[ORG 0]
 44403                                  
 44404                                  ; 25/04/2019 - Retro DOS v4.0
 44405                                  
 44406                                  ;============================================================================
 44407                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44408                                  ;============================================================================
 44409                                  
 44410                                  ;align 16
 44411                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44412                                  	; (4970 bytes for MSDOS 6.21)
 44413                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44414                                  
 44415                                  ;============================================================================
 44416                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44417                                  ;============================================================================
 44418                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44419                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44420                                  ; 16/07/2018 - Retro DOS 3.0	
 44421                                  
 44422                                  ;Break <Initialized data and data used at DOS initialization>
 44423                                  ;----------------------------------------------------------------------------
 44424                                  
 44425                                  ; We need to identify the parts of the data area that are relevant to tasks
 44426                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44427                                  ; data will be gathered with the system code. The process data under 2.x will
 44428                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44429                                  ;
 44430                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44431                                  ; describing that data item.
 44432                                  
 44433                                  ;DOSDATA SEGMENT
 44434                                  
 44435                                  ; 04/11/2022
 44436                                  ;[ORG 0]
 44437                                  
 44438                                  ; ----------------------------------------------------------------------------
 44439                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44440                                  ; ----------------------------------------------------------------------------
 44441                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44442                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44443                                  ; ----------------------------------------------------------------------------
 44444                                  
 44445                                  ; 04/11/2022
 44446                                  
 44447                                  ;DOSDATA:0000h
 44448                                  
 44449 00007A2C 90<rep 4h>              align 16
 44450                                  
 44451                                  ; ----------------------------------------------------------------------------
 44452                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44453                                  ; ----------------------------------------------------------------------------
 44454                                  
 44455                                  segment .data  vstart=0 ; 06/12/2022
 44456                                  								
 44457                                  ; ============================================================================
 44458                                  
 44459                                  ; 06/12/2022
 44460                                  ;DOSDATASTART equ $
 44461                                  DOSDATASTART:
 44462                                  
 44463                                  
 44464                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44465                                  
 44466                                  	;; 03/11/2022
 44467                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44468                                  
 44469                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44470                                  	;db	4 dup (?)	
 44471 00000000 00<rep 4h>              	times	4 db 0
 44472                                  
 44473                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44474                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44475                                  	;dw	0
 44476                                  
 44477                                  	;EVEN
 44478                                  
 44479                                  ;align 2
 44480                                  
 44481                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44482                                  ; area compatability. This location must be incremented EACH TIME the data
 44483                                  ; area here gets mucked with.
 44484                                  ;
 44485                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44486                                  
 44487                                  MSCT001S:	; LABEL BYTE
 44488                                  	
 44489                                  DataVersion:	
 44490 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44491                                  
 44492                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44493                                  ;hkn; been removed to DOSCODE above
 44494                                  
 44495                                  ;M044
 44496                                  ; First part of save area for saving last para of Window memory
 44497                                  
 44498                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44499 00000006 00<rep 8h>              	times	8 db 0
 44500                                  
 44501                                  	; MSDOS 6.21 DOSDATA:000Eh
 44502                                  MYNUM:			; Offset 000Eh
 44503 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44504                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44505 00000010 0000                    	dw	0
 44506                                  OpenLRU:
 44507 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44508                                  OEM_HANDLER: 		
 44509 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44510                                  
 44511                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44512                                  ;;			way that we leave DOS???? - jgl
 44513                                  
 44514                                  LeaveAddr:
 44515 00000018 [0404]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44516                                  RetryCount:		
 44517 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44518                                  RetryLoop:
 44519 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44520                                  LastBuffer:
 44521 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44522                                  CONTPOS:
 44523 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44524                                  arena_head:
 44525 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44526                                  
 44527                                  ;; 16/07/2018
 44528                                  ;;***************************************************************************
 44529                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44530                                  ;;***************************************************************************
 44531                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44532                                  ;;
 44533                                  ;;	AH = 52h
 44534                                  ;;
 44535                                  ;;	on return:
 44536                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44537                                  ;;		Known "invars" fields follow (varies with DOS version):
 44538                                  ;;
 44539                                  ;;	Offset Size		 Description
 44540                                  ;;
 44541                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44542                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44543                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44544                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44545                                  ;;		      0 indicates no unread input (DOS 3.x)
 44546                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44547                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44548                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44549                                  ;;	  08   dword  pointer to $CLOCK device driver
 44550                                  ;;	  0C   dword  pointer to CON device driver
 44551                                  ;;	  10   byte   number of logical drives in system
 44552                                  ;;	  11   word   maximum bytes/block of any block device
 44553                                  ;;	  13   dword  pointer to DOS cache buffer header
 44554                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44555                                  ;;		      point to the next device in device chain
 44556                                  ;;
 44557                                  ;;***************************************************************************
 44558                                  
 44559                                  ; The following block of data is used by SYSINIT. 
 44560                                  ; Do not change the order or size of this block
 44561                                  
 44562                                  ;SYSINITVAR:
 44563                                  ;----------------------------------------------------------------------------
 44564                                  SYSINITVARS:
 44565                                  DPBHEAD:
 44566 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44567                                  SFT_ADDR:
 44568 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44569                                  BCLOCK:
 44570 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44571                                  BCON:
 44572 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44573                                  MAXSEC:
 44574 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44575                                  BUFFHEAD:
 44576 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44577                                  CDSADDR:
 44578 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44579                                  SFTFCB:
 44580 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44581                                  KEEPCOUNT:
 44582 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44583                                  NUMIO:
 44584 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44585                                  CDSCOUNT:
 44586 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44587                                  
 44588                                  ; A fake header for the NUL device
 44589                                  NULDEV:
 44590 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44591                                  	;dw	8004h
 44592 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44593 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44594 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44595 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44596                                  SPLICES:
 44597 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44598                                  
 44599                                  Special_Entries:
 44600 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44601                                  UU_IFS_DOS_CALL:
 44602 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 44603                                  ; 
 44604                                  ; UU_IFS_HEADER:
 44605                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 44606                                  
 44607                                  ChkCopyProt:
 44608 00000061 0000                    	dw	0	; M068
 44609                                  A20OFF_PSP:
 44610 00000063 0000                    	dw	0	; M068
 44611                                  BUFFERS_PARM1:
 44612 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 44613                                  BUFFERS_PARM2:
 44614 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 44615                                  BOOTDRIVE:
 44616 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 44617                                  DDMOVE:
 44618 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 44619                                  EXT_MEM_SIZE:
 44620 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 44621                                  
 44622                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 44623                                  ;
 44624                                  ; Replaced by next two declarations
 44625                                  ;
 44626                                  ;UU_BUF_HASH_PTR:
 44627                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 44628                                  ;UU_BUF_HASH_COUNT:
 44629                                  ;	dw	1	; [SYSTEM] number of Hash entries
 44630                                  
 44631                                  BufferQueue:
 44632 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 44633                                  DirtyBufferCount:
 44634 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 44635                                  			; BUGBUG ---- change to byte
 44636                                  SC_CACHE_PTR:
 44637 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 44638                                  SC_CACHE_COUNT:
 44639 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 44640                                  BuffInHMA:
 44641 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 44642                                  LoMemBuff:
 44643 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 44644                                  			;  in Low mem when buffs are in HMA
 44645                                  ;
 44646                                  ; All variables which have UU_ as prefix can be reused for other
 44647                                  ; purposes and can be renamed. All these variables were used for
 44648                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 44649                                  ; manager ---- MOHANS
 44650                                  ;
 44651                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 44652                                  UU_BUF_EMS_FIRST_PAGE:	
 44653 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 44654                                  
 44655                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 44656                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 44657                                  ;	dw	0			
 44658                                  
 44659                                  CL0FATENTRY:
 44660 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 44661                                  			; is used in pack/unpack rts.
 44662                                  			; in fat.asm if cluster 0 is specified.
 44663                                  			; SR;
 44664                                  IoStatFail:
 44665 00000083 00                      	db	0	; IoStatFail has been added to 
 44666                                  			; record a fail on an I24 
 44667                                  			; issued from IOFUNC on a status call. 
 44668                                  
 44669                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 44670                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 44671                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 44672                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 44673                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 44674                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 44675                                  ;
 44676                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 44677                                  						; state of the 	buffers page.
 44678                                  						; This one byte is retained to 
 44679                                  						; keep the size of this data 
 44680                                  						; block the same.;
 44681                                  ALLOCMSAVE:
 44682 00000084 00                      	db	0	; M063: temp var. used to 
 44683                                  			; M063: save alloc method in
 44684                                  			; M063: msproc.asm
 44685                                  A20OFF_COUNT:
 44686 00000085 00                      	db	0	; M068: indiactes the # of 
 44687                                  			; M068: int 21 calls for 
 44688                                  			; M068: which A20 is off
 44689                                  DOS_FLAG:
 44690 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 44691                                  			; definitions
 44692                                  UNPACK_OFFSET:
 44693 00000087 0000                    	dw	0	; saves pointer to the start
 44694                                  			; of unpack code in exepatch.
 44695                                  			; asm.
 44696                                  UMBFLAG:
 44697 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 44698                                  			; M003: link state of the UMBs
 44699                                  			; M003: whether linked or not 
 44700                                  			; M003: to the DOS arena chain
 44701                                  SAVE_AX:
 44702 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 44703                                  			; M000: in msproc.asm
 44704                                  UMB_HEAD:
 44705 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 44706                                  			; M000: the first umb arena by 
 44707                                  			; M000: BIOS sysinit.
 44708                                  START_ARENA:
 44709 0000008E 0100                    	dw	1	; M000: this is the first arena 
 44710                                  			; M000: from which DOS will 
 44711                                  			; M000: start its scan for alloc.
 44712                                  
 44713                                  ; End of SYSINITVar block
 44714                                  ;----------------------------------------------------------------------------
 44715                                  
 44716                                  ; 25/04/2019 - Retro DOS v4.0
 44717                                  
 44718                                  ; 16/07/2018
 44719                                  ; MSDOS 3.3 (& MDOS 6.0)
 44720                                  
 44721                                  ;
 44722                                  ; Sharer jump table
 44723                                  ;
 44724                                  
 44725                                  ;PUBLIC	JShare
 44726                                  	;EVEN
 44727                                  
 44728                                  ;JShare	LABEL	DWORD
 44729                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 44730                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 44731                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 44732                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 44733                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 44734                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 44735                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 44736                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 44737                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 44738                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 44739                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 44740                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 44741                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 44742                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 44743                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 44744                                  
 44745                                  align 2
 44746                                  
 44747                                  JShare:
 44748 00000090 [FD06]0000              		DW	BadCall,0
 44749 00000094 [0107]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 44750 00000098 [0107]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 44751 0000009C [FD06]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 44752 000000A0 [FD06]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 44753 000000A4 [FD06]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 44754 000000A8 [FD06]0000              set_block:	DW	BadCall,0  ; 6   set_block
 44755 000000AC [FD06]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 44756 000000B0 [0107]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 44757 000000B4 [FD06]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 44758 000000B8 [FD06]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 44759 000000BC [FD06]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 44760 000000C0 [0107]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 44761 000000C4 [FD06]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 44762 000000C8 [FD06]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 44763                                  
 44764                                  
 44765                                  ;============================================================================
 44766                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 44767                                  ;============================================================================
 44768                                  ; 25/04/2019 - Retro DOS 4.0 
 44769                                  ; 16/07/2018 - Retro DOS 3.0	
 44770                                  
 44771                                  ;Break <Initialized data and data used at DOS initialization>
 44772                                  ;----------------------------------------------------------------------------
 44773                                  
 44774                                  ; We need to identify the parts of the data area that are relevant to tasks
 44775                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 44776                                  ; data will be gathered with the system code.  The process data under 2.x will
 44777                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44778                                  ;
 44779                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44780                                  ; describing that data item.
 44781                                  
 44782                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 44783                                  
 44784                                  ;
 44785                                  ; Table of routines for assignable devices
 44786                                  ;
 44787                                  ; MSDOS allows assignment if the following standard devices:
 44788                                  ;   stdin  (usually CON input)
 44789                                  ;   stdout (usually CON output)
 44790                                  ;   auxin  (usually AUX input)
 44791                                  ;   auxout (usually AUX output)
 44792                                  ;   stdlpt (usually PRN output)
 44793                                  ;
 44794                                  ; SPECIAL NOTE:
 44795                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 44796                                  ;   If we're not at end-of-file, then we always say that we have a character.
 44797                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 44798                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 44799                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 44800                                  ;   as EOF).
 44801                                  
 44802                                  ; Default SFTs for boot up
 44803                                  
 44804                                  		;PUBLIC	SFTABL
 44805                                  
 44806                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 44807 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 44808 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 44809 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 44810                                  		;times 295 db 0 ; MSDOS 6.0
 44811 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 44812                                  
 44813                                  ; the next two variables relate to the position of the logical stdout/stdin
 44814                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 44815                                  ; console.
 44816                                  		; DOSDATA:01F9h (MSDOS 6.21)
 44817 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 44818 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 44819                                  					;	   of buffered input call
 44820 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 44821 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 44822                                  		; DOSDATA:02FEh (MSDOS 6.21)
 44823 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 44824 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 44825 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 44826                                  switch_character:
 44827 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 44828 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 44829 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 44830 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 44831 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 44832                                  
 44833                                  ; The following table is a list of addresses that the sharer patches to be
 44834                                  ; PUSH AX to enable the critical sections
 44835                                  
 44836                                  		; DOSDATA:0315h (MSDOS 6.21)
 44837                                  
 44838                                  ;PUBLIC	CritPatch
 44839                                  
 44840                                  CritPatch:	; LABEL WORD
 44841                                  
 44842                                  ;IRP sect,<critDisk,critDevice>
 44843                                  
 44844                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 44845                                  ;
 44846                                  ;SR; Change code patch address to a variable in data segment
 44847                                  ;
 44848                                  ;       dw OFFSET DOSDATA: redir_patch
 44849                                  ;       dw OFFSET DOSDATA: redir_patch
 44850                                  ;
 44851                                  ;;hkn	Short_Addr  E&sect
 44852                                  ;;hkn	Short_Addr  L&sect
 44853                                  ;
 44854                                  ;ELSE
 44855                                  ;	DW	0
 44856                                  ;	DW	0
 44857                                  ;ENDIF
 44858                                  ;ENDM
 44859                                  ;	DW	0
 44860                                  
 44861                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 44862                                   
 44863 00000315 [0C0D]                  	dw 	redir_patch
 44864 00000317 [0C0D]                  	dw 	redir_patch			
 44865 00000319 [0C0D]                  	dw	redir_patch
 44866 0000031B [0C0D]                  	dw 	redir_patch
 44867                                  
 44868 0000031D 0000                    	dw	0
 44869                                  
 44870                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 44871                                  ; Also, IBM server 1.0 requires this also.
 44872                                  
 44873                                  	;EVEN			; Force swap area to start on word boundry
 44874 0000031F 90                      align 2
 44875                                  	;PUBLIC	SWAP_START
 44876                                  SWAP_START:	; LABEL BYTE
 44877 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 44878 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 44879 00000322 FF                      WPERR:		db -1		; Write protect error flag
 44880 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 44881 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 44882                                  
 44883                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 44884 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 44885 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 44886                                  ; end warning
 44887                                   
 44888 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 44889                                  
 44890 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 44891 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 44892 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 44893 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 44894 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 44895 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 44896                                  ;				; F.C. 2/17/86
 44897 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 44898 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 44899                                  ;align 2
 44900                                  SWAP_ALWAYS:	; 05/08/2018
 44901 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 44902                                  				;   extended error type stuff.
 44903                                  				;   NOTE: does not have Correct value on
 44904                                  				;   1-12, OEM, Get/Set CurrentPDB,
 44905                                  				;   GetExtendedError system calls)
 44906 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 44907 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 44908 00000340 0000                    FirstArena:	dw 0		; first free block found
 44909 00000342 0000                    BestArena:	dw 0		; best free block found
 44910 00000344 0000                    LastArena:	dw 0		; last free block found
 44911 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 44912 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 44913 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 44914 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 44915 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 44916 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 44917 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 44918                                  
 44919                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 44920                                  	;EVEN
 44921 0000034F 90                      align 2
 44922                                  		; DOSDATA:0350h (MSDOS 6.21)
 44923 00000350 00                      DAY:		db 0		; Day of month
 44924 00000351 00                      MONTH:		db 0		; Month of year
 44925 00000352 0000                    YEAR:		dw 0		; Year (with century)
 44926 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 44927 00000356 00                      WEEKDAY:	db 0		; Day of week
 44928                                  ; end warning
 44929                                  
 44930 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 44931 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 44932 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 44933                                  
 44934                                  ; Combination of all device call parameters
 44935                                  	;PUBLIC	DEVCALL 	;
 44936                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 44937                                  DEVCALL: ; 08/08/2018
 44938 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 44939 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 44940 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 44941 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 44942 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 44943                                  
 44944                                  	;PUBLIC	CALLUNIT
 44945                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 44946                                  CALLFLSH: ; LABEL   WORD	;
 44947 00000367 00                      CALLMED:	db 0		; media byte
 44948                                  CALLBR:	  ; LABEL   DWORD	;
 44949                                  	;PUBLIC	CALLXAD 	;
 44950                                  CALLXAD:  ; LABEL   DWORD	;
 44951 00000368 00                      CALLRBYT:	db 0		;
 44952                                  	;PUBLIC	CALLVIDM	;
 44953                                  CALLVIDM: ; LABEL   DWORD	;
 44954 00000369 00<rep 3h>              	times 3 db 0	;
 44955                                  	;PUBLIC CallBPB		;
 44956                                  CALLBPB:  ; LABEL   DWORD	;
 44957                                  CALLSCNT:			;
 44958 0000036C 0000                    		dw 0		;
 44959                                  	;PUBLIC	CALLSSEC	;
 44960                                  CALLSSEC: ; LABEL   WORD	;
 44961 0000036E 0000                    		dw 0		;
 44962 00000370 00000000                CALLVIDRW:	dd 0		;
 44963                                  ;MSDOS 6.0
 44964 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44965 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44966                                  
 44967                                  ; Same as above for I/O calls	;
 44968                                  				;
 44969                                  	;PUBLIC	IOCall		;
 44970                                  ;IOCALL	SRHEAD	<>		;
 44971                                  IOCALL:	; 07/08/2018
 44972 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44973 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44974 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44975 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44976 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44977                                  IOFLSH:	  ; LABEL   WORD	;
 44978                                          ;PUBLIC  IORCHR		;
 44979                                  IORCHR:	  ; LABEL   BYTE	;
 44980 00000389 00                      IOMED:		db 0		;
 44981 0000038A 00000000                IOXAD:		dd 0		;
 44982 0000038E 0000                    IOSCNT:		dw 0		;	
 44983 00000390 0000                    IOSSEC:		dw 0		;
 44984                                  
 44985                                  ; Call struct for DSKSTATCHK	;
 44986 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44987 00000393 00                      		db 0
 44988 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44989 00000395 0000                    DSKSTST:	dw 0		;
 44990 00000397 00<rep 8h>              	times 8	db 0		;
 44991 0000039F 00                      DSKCHRET:	db 0		;
 44992                                  
 44993                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44994                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44995                                  ;hkn   short_addr  DEVIOBUF	;
 44996                                  	
 44997 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44998 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44999 000003A4 0100                    DSKSTCNT:	dw 1		;
 45000 000003A6 0000                    		dw 0		;
 45001                                  
 45002 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 45003                                  
 45004                                  ;MSDOS 6.0
 45005                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 45006 000003A9 00000000                		dd 0		;MS. position
 45007 000003AD 00000000                		dd 0		;MS. length
 45008                                  
 45009                                  ;hkn; the foll. was moved from dosmes.asm.
 45010                                  
 45011                                  	;EVEN
 45012 000003B1 90                      align 2				; needed to maintain offsets
 45013                                  
 45014                                  		; DOSDATA:03B2h (MSDOS 6.21)
 45015                                  USERNUM:
 45016 000003B2 0000                     		dw 0		; 24 bit user number
 45017 000003B4 00                      		db 0
 45018                                  ;IF IBM
 45019                                  ;IF IBMCOPYRIGHT
 45020                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 45021                                  ;ELSE
 45022                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 45023                                  ;ENDIF
 45024                                  ;ELSE
 45025 000003B5 FF                      OEMNUM:		DB 0FFh
 45026                                  ;ENDIF
 45027                                  
 45028                                  ;============================================================================
 45029                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 45030                                  ;============================================================================
 45031                                  ; 25/04/2019 - Retro DOS 4.0
 45032                                  
 45033                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 45034                                  ; ----------------------------------------------------------
 45035                                  ; This data section which was named as uninitialized data
 45036                                  ; (as overlayed by initialization code) but follows 
 45037                                  ; initialized data section from DOSDATA:03B6h address
 45038                                  ; (in otherwords, the method is different than MSDOS 3.3,
 45039                                  ; and there is not overlaying..)
 45040                                  ; **********************************************************
 45041                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 45042                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 45043                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 45044                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 45045                                  ; TIMEBUF is at offset 03B6h.
 45046                                  ; **********************************************************	
 45047                                  
 45048                                  ;Break <Uninitialized data overlayed by initialization code>
 45049                                  ;----------------------------------------------------------------------------
 45050                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 45051                                  ; Init code overlaps with data area below
 45052                                  
 45053                                  ; 	ORG     0
 45054                                  
 45055                                  MSDAT001S:	; label byte
 45056                                  
 45057                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 45058                                  TIMEBUF: ;	times 6 db 0
 45059 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 45060 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 45061                                  
 45062                                  ; The following areas are used as temp buffer in EXEC system call
 45063                                  
 45064                                  ; DOSDATA:03BEh
 45065                                  OPENBUF: ;times 64  dw	0
 45066 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 45067                                  RENBUF:	
 45068 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 45069                                  
 45070                                  ; Buffer for search calls
 45071                                  SEARCHBUF:	
 45072 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 45073                                  DUMMYCDS:  ;times 88 db 0
 45074 000004F3 00<rep 58h>             	times	curdirLen db 0
 45075                                  
 45076                                  ; End of contiguous buffer
 45077                                   
 45078                                  ; Temporary directory entry for use by many routines. Device directory
 45079                                  ; entries (bogus) are built here.
 45080                                  
 45081                                  ; DOSDATA:054Bh
 45082                                  
 45083                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 45084                                  
 45085                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 45086                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 45087                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 45088                                  
 45089                                  NAME1:	
 45090 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 45091                                  NAME2:
 45092 00000557 00<rep Dh>              	times	13 db	0 		;
 45093                                  DESTSTART:
 45094 00000564 0000                    	dw	0			;
 45095                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 45096                                  	;times	5  db	0
 45097 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 45098                                  
 45099                                  ; End Temporary directory entry.
 45100                                  
 45101 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 45102                                  EXTFCB:	
 45103 0000056C 00                      	db	0		; TRUE => extended FCB in use
 45104                                  SATTRIB:
 45105 0000056D 00                      	db	0		; Storage for search attributes
 45106                                  OPEN_ACCESS:
 45107 0000056E 00                      	db	0		; access of open system call
 45108                                  FOUNDDEL:
 45109 0000056F 00                      	db	0		; true => file was deleted
 45110                                  FOUND_DEV:
 45111 00000570 00                      	db	0		; true => search found a device
 45112                                  FSPLICE:
 45113 00000571 00                      	db	0		; true => do a splice in transpath
 45114                                  FSHARING:
 45115 00000572 00                      	db	0		; TRUE => no redirection
 45116                                  SECCLUSPOS:
 45117 00000573 00                      	db	0		; Position of first sector within cluster
 45118 00000574 00                      TRANS:	db	0		;
 45119 00000575 00                      READOP:	db	0		;
 45120                                  THISDRV:
 45121 00000576 00                      	db	0		;
 45122                                  CLUSFAC:
 45123 00000577 00                      	db	0		;
 45124                                  CLUSSPLIT:
 45125 00000578 00                      	db	0		;
 45126                                  INSMODE:
 45127 00000579 00                      	db	0		; true => insert mode in buffered read
 45128 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 45129 0000057B 00                      VOLID:	db	0		;
 45130                                  EXIT_TYPE:
 45131 0000057C 00                      	db	0		; type of exit...
 45132                                   
 45133                                  	;EVEN
 45134                                  
 45135 0000057D 90                      align 2
 45136                                  
 45137                                  ; DOSDATA:057Eh
 45138                                  
 45139                                  ; WARNING - the following two items are accessed as a word
 45140                                  
 45141                                  CREATING:
 45142 0000057E 00                      	db	0		; true => creating a file
 45143 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 45144                                  				; = DIRFREE iff BUGBUG
 45145                                  EXITHOLD:
 45146 00000580 00000000                	dd	0		; Temp location for proc terminate
 45147                                  USER_SP:
 45148 00000584 0000                    	dw	0		; User SP for system call
 45149                                  USER_SS:
 45150 00000586 0000                    	dw	0		; User SS for system call
 45151                                  CONTSTK:
 45152 00000588 0000                    	dw	0		;
 45153                                  THISDPB:
 45154 0000058A 00000000                	dd	0		;
 45155                                  CLUSSAVE:
 45156 0000058E 0000                    	dw	0		;
 45157                                  CLUSSEC:
 45158 00000590 00000000                	dd	0		;>32mb			AC0000
 45159                                  PREREAD:
 45160 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 45161 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 45162                                  FATBYTE:
 45163 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 45164                                  ; DOSDATA:059Ah
 45165 0000059A 00000000                DEVPT:	dd	0		;
 45166                                  THISSFT:
 45167 0000059E 00000000                	dd	0		; Address of user SFT
 45168                                  THISCDS:
 45169 000005A2 00000000                	dd	0		; Address of current CDS
 45170                                  THISFCB:
 45171 000005A6 00000000                	dd	0		; Address of user FCB
 45172 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 45173 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 45174 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 45175                                  WFP_START:
 45176 000005B2 0000                    	dw	0		;
 45177                                  REN_WFP:
 45178 000005B4 0000                    	dw	0		;
 45179                                  CURR_DIR_END:
 45180 000005B6 0000                    	dw	0		;
 45181                                  NEXTADD:
 45182 000005B8 0000                    	dw	0		;
 45183                                  LASTPOS:
 45184 000005BA 0000                    	dw	0		;
 45185                                  CLUSNUM:
 45186 000005BC 0000                    	dw	0		;
 45187 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 45188                                  DIRSTART:
 45189 000005C2 0000                    	dw	0		;
 45190 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 45191 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 45192                                                                  ; sectors
 45193                                  BYTSECPOS:
 45194 000005CC 0000                    	dw	0		; Position of first byte within sector
 45195                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 45196 000005CE 0000<rep 2h>                    times	2 dw 0
 45197                                  BYTCNT1:
 45198 000005D2 0000                    	dw	0		; No. of bytes in first sector
 45199                                  BYTCNT2:
 45200 000005D4 0000                    	dw	0		; No. of bytes in last sector
 45201 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 45202                                  ; DOSDATA:05D8h
 45203                                  ENTFREE:
 45204 000005D8 0000                    	dw	0		;
 45205                                  ENTLAST:
 45206 000005DA 0000                    	dw	0		;
 45207                                  NXTCLUSNUM:
 45208 000005DC 0000                    	dw	0		;
 45209                                  GROWCNT:
 45210 000005DE 00000000                	dd	0		;
 45211 000005E2 00000000                CURBUF:	dd	0		;
 45212 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 45213 000005EA 0000                    SAVEBX:	dw	0		;
 45214 000005EC 0000                    SAVEDS:	dw	0		;
 45215                                  RESTORE_TMP:
 45216 000005EE 0000                    	dw	0		; return address for restore world
 45217 000005F0 0000                    NSS:	dw	0
 45218 000005F2 0000                    NSP:	dw	0
 45219                                  ; DOSDATA:05F4h
 45220                                  EXTOPEN_FLAG:
 45221 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 45222                                  EXTOPEN_ON:
 45223 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 45224                                  EXTOPEN_IO_MODE:
 45225 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 45226                                  SAVE_DI:
 45227 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 45228                                  SAVE_ES:
 45229 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 45230                                  SAVE_DX:
 45231 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 45232                                  SAVE_CX:
 45233 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 45234                                  SAVE_BX:
 45235 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 45236                                  SAVE_SI:
 45237 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 45238                                  SAVE_DS:
 45239 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 45240                                  
 45241                                  ; DOSDATA:0607h
 45242                                  
 45243                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 45244                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 45245                                  ; the high 16, the low 16 are still in the register.
 45246                                  
 45247                                  HIGH_SECTOR:	
 45248 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 45249                                  	; 25/09/2023
 45250                                  OffsetMagicPatch:
 45251                                  	;dw	MagicPatch	;scottq 8/6/92
 45252                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45253 00000609 0000                    	dw	0
 45254                                  				;see dos\mpatch.asm
 45255                                  DISK_FULL:
 45256 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 45257                                  TEMP_VAR:
 45258 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 45259                                  TEMP_VAR2:
 45260 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 45261 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 45262                                  DOS34_FLAG:
 45263 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 45264                                  NO_FILTER_PATH:
 45265 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 45266                                  NO_FILTER_DPATH:
 45267 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 45268                                  ; M008
 45269                                  AbsRdWr_SS:
 45270 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 45271                                  AbsRdWr_SP:
 45272 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 45273                                  
 45274                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 45275                                  ; M008
 45276                                   
 45277                                   
 45278                                  ; make those pushes fast!!!
 45279                                  
 45280                                  ;EVEN
 45281                                  
 45282 0000061F 90                      align 2
 45283                                  
 45284                                  StackSize   equ 180h  ; 384	; gross but effective
 45285                                  
 45286                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 45287                                  ;				; made up their minds about
 45288                                   
 45289                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 45290                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 45291                                  
 45292                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 45293                                   
 45294 00000620 00<rep 180h>                    times	StackSize db	0	;
 45295                                  AUXSTACK:			; LABEL   BYTE
 45296                                   
 45297 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 45298                                  DSKSTACK:			; LABEL   BYTE
 45299                                   
 45300 00000920 00<rep 180h>                    times	StackSize db	0	;
 45301                                  IOSTACK:			; LABEL   BYTE
 45302                                  
 45303                                  ; DOSDATA:0AA0h 
 45304                                   
 45305                                  ; patch space for Boca folks.
 45306                                  ; Say What????!!! This does NOT go into the swappable area!
 45307                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 45308                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 45309                                   
 45310                                  IBMPATCH: ; label byte
 45311                                  PRINTER_FLAG:
 45312 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 45313                                  VOLCHNG_FLAG:
 45314 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 45315                                  VIRTUAL_OPEN:
 45316 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 45317                                   
 45318                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 45319                                  
 45320                                  FSeek_drive:
 45321 00000AA3 00                      	db	0		;AN000; fastseek drive #
 45322                                  FSeek_firclus:
 45323 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 45324                                  FSeek_logclus:
 45325 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 45326                                  FSeek_logsave:
 45327 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 45328                                  
 45329                                  ; DOSDATA:0AAAh
 45330                                  
 45331                                  TEMP_DOSLOC:
 45332 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 45333                                  				;at SYSINIT time.
 45334                                  SWAP_END:  ; LABEL   BYTE
 45335                                   
 45336                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 45337                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 45338                                  ; to include this byte.
 45339                                   
 45340 00000AAC 00                      	db	0
 45341                                  
 45342                                  ; DOSDATA:0AADh
 45343                                   
 45344                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 45345                                  
 45346                                  ;DOSDATA    ENDS
 45347                                  
 45348                                  ;============================================================================
 45349                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 45350                                  ;============================================================================
 45351                                  ; 27/04/2019 - Retro DOS 4.0
 45352                                  ; 16/07/2018 - Retro DOS 3.0
 45353                                  
 45354                                  ;DOSDATA Segment
 45355                                  
 45356                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 45357                                  
 45358                                  ;
 45359                                  ; upper case table
 45360                                  ; ---------------------------------------------------------------------------
 45361                                  UCASE_TAB:	; label   byte
 45362 00000AAD 8000                    	dw	128
 45363 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 45364 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45365 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45366 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45367 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45368 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45369 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45370 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45371 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45372 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45373 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45374 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45375 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45376 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45377 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45378 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45379                                  ;
 45380                                  ; file upper case table
 45381                                  ; ---------------------------------------------------------------------------
 45382                                  FILE_UCASE_TAB:	; label  byte
 45383 00000B2F 8000                    	dw	128
 45384 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 45385 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45386 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45387 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45388 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45389 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45390 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45391 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45392 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45393 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45394 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45395 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45396 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45397 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45398 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45399 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45400                                  ;
 45401                                  ; file char list
 45402                                  ; ---------------------------------------------------------------------------
 45403                                  FILE_CHAR_TAB:	; label  byte
 45404 00000BB1 1600                    	dw	22				; length
 45405 00000BB3 0100FF                  	db	1,0,255 			; include all
 45406 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45407 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45407 00000BC2 7C3C3E2B3D3B2C     
 45408                                  	;db	24 dup (?)			; reserved
 45409 00000BC9 00<rep 18h>             	times	24 db 0
 45410                                  
 45411                                  ;
 45412                                  ; collate table
 45413                                  ; ---------------------------------------------------------------------------
 45414                                  COLLATE_TAB:	; label   byte
 45415 00000BE1 0001                    	dw	256
 45416 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45417 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45418 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45419 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45420 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45421 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45422 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45423 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45424 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45425 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45426 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45427 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45428 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45429 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45430 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45431 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45432 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45433 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45434 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45435 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45436 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45437 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45438 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45439 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45440 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45441 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45442 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45443 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45444 00000CC3 E053                    	db	224,"S"
 45445 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45446 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45447 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45448 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45449                                  
 45450                                  ; ------------------------------------------------<MSKK01>----------------------
 45451                                  
 45452                                  ; DOSDATA:0CE3h
 45453                                  
 45454                                  ; 29/04/2019
 45455                                  
 45456                                  ; dbcs is not supported in DOS 3.3
 45457                                  ;		   DBCS_TAB	    CC_DBCS <>
 45458                                  ;
 45459                                  ; DBCS for DOS 4.00			   2/12/KK
 45460                                  
 45461                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45462                                  ; ------------------------------------------------<MSKK01>----------------------
 45463                                  ;ifdef	DBCS
 45464                                  ; ifdef	  JAPAN
 45465                                  ;		dw	6		; <MSKK01>
 45466                                  ;		db	081h,09fh	; <MSKK01>
 45467                                  ;		db	0e0h,0fch	; <MSKK01>
 45468                                  ;		db	0,0		; <MSKK01>
 45469                                  ;
 45470                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45471                                  ; endif
 45472                                  ; ifdef	  TAIWAN
 45473                                  ;		dw	4		; <TAIWAN>
 45474                                  ;		db	081h,0FEh	; <TAIWAN>
 45475                                  ;		db	0,0		; <TAIWAN>
 45476                                  ;
 45477                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45478                                  ; endif
 45479                                  ; ifdef   KOREA                         ; Keyl
 45480                                  ;               dw      4               ; <KOREA>
 45481                                  ;               db      0A1h,0FEh       ; <KOREA>
 45482                                  ;               db      0,0             ; <KOREA>
 45483                                  ;
 45484                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45485                                  ;  endif
 45486                                  ;else
 45487 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45488                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45489 00000CE5 00<rep 10h>             		times	16 db 0
 45490                                  
 45491                                  ;		dw	6		;  2/12/KK
 45492                                  ;		db	081h,09Fh	;  2/12/KK
 45493                                  ;		db	0E0h,0FCh	;  2/12/KK
 45494                                  ;		db	0,0		;  2/12/KK
 45495                                  ;
 45496                                  ;endif
 45497                                  ; ------------------------------------------------<MSKK01>----------------------
 45498                                  
 45499                                  ; DOSDATA:0CF5h
 45500                                  
 45501                                  ; ---------------------------------------------------------------------------
 45502                                  ;
 45503                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45504                                  ;     ENTRY: AL = Character to map
 45505                                  ;     EXIT:  AL = The converted character
 45506                                  ; Alters no registers except AL and flags.
 45507                                  ; The routine should do nothing to chars below 80H.
 45508                                  ; ---------------------------------------------------------------------------
 45509                                  ; Example:
 45510                                  
 45511                                  MAP_CASE:
 45512                                  ;Procedure MAP_CASE,FAR
 45513                                  
 45514 00000CF5 3C80                    	CMP	AL,80h
 45515 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45516 00000CF9 CB                      	RETF
 45517                                  Map1:
 45518 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45519 00000CFC 1E                      	PUSH	DS
 45520 00000CFD 53                      	PUSH	BX
 45521 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45522                                  FINISH:
 45523 00000D01 0E                      	PUSH	CS		;Move to DS
 45524 00000D02 1F                      	POP	DS
 45525 00000D03 D7                      	XLAT			;Get upper case character
 45526 00000D04 5B                      	POP	BX
 45527 00000D05 1F                      	POP	DS
 45528                                  L_RET:	
 45529 00000D06 CB                      	RETF
 45530                                  
 45531                                  ;EndProc MAP_CASE
 45532                                  
 45533                                  ; ---------------------------------------------------------------------------
 45534                                  
 45535                                  ; The variables for ECS version are moved here for the same data alignments
 45536                                  ; as IBM-DOS and MS-DOS.
 45537                                  
 45538                                  InterChar:
 45539 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45540                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45541                                  DUMMY:	; LABEL   WORD
 45542                                  InterCon:  
 45543 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45544                                  SaveCurFlg:
 45545 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45546                                  
 45547                                  ; ---------------------------------------------------------------------------
 45548                                  
 45549 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45550                                  redir_patch:
 45551 00000D0C 00                      	  db	0
 45552                                  
 45553                                  ; DOSDATA:0D0Dh
 45554                                  
 45555                                  Mark1:	; label byte
 45556                                  
 45557                                  ;IF2
 45558                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45559                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45560                                  ;	ENDIF
 45561                                  ;ENDIF
 45562                                  
 45563 00000D0D 00<rep 5h>              	  times 5 db 0
 45564                                  
 45565                                  ;############################################################################
 45566                                  ;
 45567                                  ; ** HACK FOR DOS 4.0 REDIR **
 45568                                  ; 
 45569                                  ; The redir requires the following:
 45570                                  ;
 45571                                  ;	MSVERS	offset D12H
 45572                                  ;	YRTAB	offset D14H
 45573                                  ; 	MONTAB	offset D1CH
 45574                                  ;
 45575                                  ; WARNING! WARNING!
 45576                                  ; 
 45577                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45578                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45579                                  ;
 45580                                  ; CURRENTLY MARK1 = 0D0DH
 45581                                  ;
 45582                                  ;############################################################################
 45583                                  
 45584                                  	;ORG	0D12h
 45585                                  
 45586                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45587                                  
 45588                                  	;db	6
 45589                                  	;db	20
 45590                                  
 45591                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45592                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45593 00000D12 06                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45594 00000D13 16                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 45595                                  
 45596                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45597                                  ;
 45598                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 45599                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 45600                                  
 45601                                  ; Days in year
 45602                                  
 45603                                  YRTAB:   
 45604 00000D14 C8A6                    	DB	200,166			; Leap year
 45605 00000D16 C8A5                    	DB	200,165
 45606 00000D18 C8A5                    	DB	200,165
 45607 00000D1A C8A5                    	DB	200,165
 45608                                  
 45609                                  ; Days of each month
 45610                                  
 45611                                  MONTAB:        
 45612 00000D1C 1F                      	DB      31                      ; January
 45613                                  february:
 45614 00000D1D 1C                      	DB	28 			; February--reset each 
 45615                                  					; time year changes
 45616 00000D1E 1F                              DB      31                      ; March
 45617 00000D1F 1E                              DB      30                      ; April
 45618 00000D20 1F                              DB      31                      ; May
 45619 00000D21 1E                              DB      30                      ; June
 45620 00000D22 1F                              DB      31                      ; July
 45621 00000D23 1F                              DB      31                      ; August
 45622 00000D24 1E                              DB      30                      ; September
 45623 00000D25 1F                              DB      31                      ; October
 45624 00000D26 1E                              DB      30                      ; November
 45625 00000D27 1F                              DB      31                      ; December
 45626                                  
 45627                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 45628                                  
 45629                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 45630                                  
 45631                                  SysInitTable:
 45632                                  	;dw	SYSINITVAR
 45633 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 45634 00000D2A 0000                            dw      0		; segment
 45635 00000D2C [0012]                          dw	COUNTRY_CDPG	; pointer to country tabl
 45636 00000D2E 0000                            dw      0		; segment of pointer
 45637                                  
 45638                                  ; DOS 3.3 F.C. 6/12/86
 45639                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 45640                                  
 45641                                  FastTable:				; a better name
 45642                                  FastOpenTable:
 45643 00000D30 0200                    	dw      2                       ; number of entries
 45644 00000D32 [8A12]                  	dw      FastRet			; pointer to ret instr.
 45645 00000D34 0000                    	dw      0                       ; and will be modified by
 45646 00000D36 [8A12]                  	dw      FastRet			; FASTxxx when loaded in
 45647 00000D38 0000                    	dw      0                       
 45648                                  
 45649                                  ; DOS 3.3 F.C. 6/12/86
 45650                                  
 45651                                  FastFlg:				; flags
 45652                                  FastOpenFlg:
 45653 00000D3A 00                      	db	0			; don't change the foll: order  
 45654                                  
 45655                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 45656                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 45657                                  ; or filled by FastOPen when calling FastOpen Lookup
 45658                                  
 45659                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 45660                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 45661                                  	;times	11 db 0
 45662 00000D3B 00<rep Bh>              	times	FEI.size db 0
 45663                                  
 45664                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 45665                                  ; when calling FastOpen Lookup
 45666                                  
 45667                                  Dir_Info_Buff:	; label  byte
 45668                                  	;db   	SIZE dir_entry dup (0)
 45669                                  	;times	32 db 0
 45670 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 45671                                  
 45672                                  Next_Element_Start:
 45673 00000D66 0000                    	dw	0			; save next element start offset
 45674                                  Del_ExtCluster:
 45675 00000D68 0000                    	dw	0			; for dos_delete                       
 45676                                  
 45677                                  ; The following is a stack and its pointer for interrupt 2F which is used
 45678                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 45679                                  ; not to destroy the INT 21 stack saved for the user.
 45680                                  
 45681                                  USER_SP_2F:	; LABEL  WORD
 45682 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 45683                                  
 45684                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 45685                                  DOS_TEMP:	; label  word		; temporary word
 45686                                  FAKE_STACK_2F:  
 45687                                  	; dw  14 dup (0)		; 12 register temporary storage
 45688 00000D6C 0000<rep Eh>            	times 14 dw 0
 45689                                  
 45690                                  Hash_Temp: 	;label  word		; temporary word             
 45691                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 45692 00000D88 0000<rep 4h>            	times 4 dw 0
 45693                                              	
 45694                                  SCAN_FLAG:	
 45695 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 45696                                  DATE_FLAG:
 45697 00000D91 0000                    	dw     0                	; flag to update the date
 45698                                  
 45699                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 45700 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 45701                                  
 45702                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 45703 00000D95 00000000                	dd     0               		; for extended error                   
 45704 00000D99 00000000                	dd     0			; for parser                           
 45705 00000D9D 00000000                	dd     0			; for critical errror                  
 45706 00000DA1 00000000                	dd     0			; for IFS                              
 45707 00000DA5 00000000                	dd     0			; for code reduction                   
 45708                                  
 45709                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 45710 00000DA9 FFFFFFFF                	dd     -1                                                        
 45711                                  SC_SECTOR_SIZE:
 45712 00000DAD 0000                    	dw	0			; sector size for SC                 
 45713                                  SC_DRIVE:
 45714 00000DAF 00                      	db	0			; drive # for secondary cache        
 45715                                  CurSC_DRIVE:
 45716 00000DB0 FF                      	db	-1			; current SC drive                   
 45717                                  CurSC_SECTOR:
 45718 00000DB1 00000000                	dd	0			; current SC starting sector         
 45719                                  SC_STATUS:
 45720 00000DB5 0000                    	dw	0			; SC status word                     
 45721                                  SC_FLAG:
 45722 00000DB7 00                      	db	0			; SC flag                            
 45723                                  AbsDskErr:
 45724 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 45725                                                                                            
 45726                                  NO_NAME_ID:	; label byte                                                           
 45727 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 45727 00000DC3 2020               
 45728                                  
 45729                                  ;hkn; moved from TABLE segment in kstrin.asm
 45730                                  
 45731                                  KISTR001S:	; label	byte		; 2/17/KK
 45732 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 45733                                  KISTR001E:	; label	byte		; 2/17/KK
 45734                                  
 45735                                  ; the nul device driver used to be part of the code. However, since the 
 45736                                  ; header is in the data, and the entry points are only given as an offset,
 45737                                  ; the strategy and interrupt entry points must also be in the data now.
 45738                                  
 45739                                  ; DOSDATA:0DC6h
 45740                                  
 45741                                  SNULDEV:
 45742                                  ;procedure snuldev,far
 45743                                  	;or	word [es:bx+3],100h
 45744                                  	; 17/12/2022
 45745                                  	;or	byte [es:bx+4],01h
 45746                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 45747                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 45748 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 45749                                  INULDEV:
 45750 00000DCC CB                      	retf				; must not be a return!
 45751                                  ;endproc snuldev
 45752                                  
 45753                                  ;M044
 45754                                  ; Second part of save area for saving last para of Windows memory
 45755                                  
 45756                                  WinoldPatch2:
 45757                                  	;db	8 dup (?)	; M044
 45758 00000DCD 00<rep 8h>              	times	8 db 0	
 45759                                  UmbSave2:
 45760                                  	;db	5 dup (?)	; M062
 45761 00000DD5 00<rep 5h>              	times	5 db 0
 45762                                  UmbSaveFlag:
 45763 00000DDA 00                      	db	0		; M062
 45764                                  
 45765                                  ; DOSDATA:0DDBh
 45766                                  
 45767                                  Mark2:	; label byte
 45768                                  
 45769                                  ;IF2
 45770                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 45771                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45772                                  ;	ENDIF
 45773                                  ;ENDIF
 45774                                  
 45775                                  ;############################################################################
 45776                                  ;
 45777                                  ; ** HACK FOR DOS 4.0 REDIR **
 45778                                  ; 
 45779                                  ; The redir requires the following:
 45780                                  ;
 45781                                  ;	ERR_TABLE_21	offset DDBH
 45782                                  ;	ERR_TABLE_24	offset E5BH
 45783                                  ; 	ErrMap24	offset EABH
 45784                                  ;
 45785                                  ; WARNING! WARNING!
 45786                                  ;
 45787                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45788                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45789                                  ;
 45790                                  ; CURRENTLY MARK2 = 0DD0H
 45791                                  ;
 45792                                  ;############################################################################
 45793                                  
 45794                                  	;ORG	0DDBh
 45795                                  
 45796                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 45797                                  
 45798                                  ; ---------------------------------------------------------------------------
 45799                                  ;
 45800                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 45801                                  ; errors. Each entry is 4 bytes long:
 45802                                  ;
 45803                                  ;       Err#,Class,Action,Locus
 45804                                  ;
 45805                                  ; A value of 0FFh indicates a call specific value (ie. should already
 45806                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45807                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 45808                                  ;
 45809                                  ; ---------------------------------------------------------------------------
 45810                                  
 45811                                  ;ErrTab  Macro   err,class,action,locus
 45812                                  ;ifidn <locus>,<0FFh>
 45813                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 45814                                  ;ELSE
 45815                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 45816                                  ;ENDIF
 45817                                  ;ENDM
 45818                                  
 45819                                  ERR_TABLE_21: ; LABEL   BYTE
 45820 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 45821 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45822 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45823 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 45824 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 45825 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45826 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 45827 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45828 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45829 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45830 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45831 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45832 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 45833 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45834 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 45835 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 45836 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45837 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 45838 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45839 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45840 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 45841 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 45842 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 45843 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45844 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 45845 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45846 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 45847 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45848                                      ; MSDOS 6.0
 45849 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45850 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45851 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 45852 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 45853                                  
 45854                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 45855                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 45856                                  ;		db 2,8,3,2
 45857                                  ;		db 3,8,3,2
 45858                                  ;		db 4,1,4,1
 45859                                  ;		db 5,3,3,0FFh
 45860                                  ;		db 6,7,4,1
 45861                                  ;		db 7,7,5,5
 45862                                  ;		db 8,1,4,5
 45863                                  ;		db 9,7,4,5
 45864                                  ;		db 0Ah,7,4,5
 45865                                  ;		db 0Bh,9,3,1
 45866                                  ;		db 0Ch,7,4,1
 45867                                  ;		db 0Dh,9,4,1
 45868                                  ;		db 0Fh,8,3,2
 45869                                  ;		db 10h,3,3,2
 45870                                  ;		db 11h,0Dh,3,2
 45871                                  ;		db 12h,8,3,2
 45872                                  ;		db 50h,0Ch,3,2
 45873                                  ;		db 20h,0Ah,2,2
 45874                                  ;		db 21h,0Ah,2,2
 45875                                  ;		db 54h,1,4,0FFh
 45876                                  ;		db 56h,3,3,1
 45877                                  ;		db 52h,1,4,2
 45878                                  ;		db 32h,9,3,3
 45879                                  ;		db 55h,0Ch,3,3
 45880                                  ;		db 57h,9,3,1
 45881                                  ;		db 53h,0Dh,4,1
 45882                                  ;		db 24h,1,4,5
 45883                                  ; MSDOS 6.0 (MSDOS 6.21)
 45884                                  ;		db 26h,1,4,1
 45885                                  ;		db 27h,1,4,1
 45886                                  ;		db 5Ah,0Dh,4,2
 45887                                  ; MSDOS 6.0 & MSDOS 3.3
 45888                                  ;		db 0FFh,0FFh,0FFh,0FFh
 45889                                  
 45890                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45891                                  
 45892                                  ; ---------------------------------------------------------------------------
 45893                                  ;
 45894                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 45895                                  ; errors. Each entry is 4 bytes long:
 45896                                  ;
 45897                                  ;       Err#,Class,Action,Locus
 45898                                  ;
 45899                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 45900                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45901                                  ; THE END.
 45902                                  ;
 45903                                  ; ---------------------------------------------------------------------------
 45904                                  
 45905                                  ERR_TABLE_24: ; LABEL   BYTE
 45906 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45907 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45908 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 45909 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45910 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45911 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45912 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 45913 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45914 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45915 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 45916 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 45917 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 45918 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 45919 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45920 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45921 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45922 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45923 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45924 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45925 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 45926                                  
 45927                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 45928                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 45929                                  ;		db 14h,4,5,1
 45930                                  ;		db 15h,5,7,0FFh
 45931                                  ;		db 16h,4,5,1
 45932                                  ;		db 17h,0Bh,4,2
 45933                                  ;		db 18h,4,5,1
 45934                                  ;		db 19h,5,1,2
 45935                                  ;		db 1Ah,0Bh,7,2
 45936                                  ;		db 1Bh,0Bh,4,2
 45937                                  ;		db 1Ch,2,7,4
 45938                                  ;		db 1Dh,5,4,0FFh
 45939                                  ;		db 1Eh,5,4,0FFh
 45940                                  ;		db 1Fh,0Dh,4,0FFh
 45941                                  ;		db 20h,0Ah,2,2
 45942                                  ;		db 21h,0Ah,2,2
 45943                                  ;		db 22h,0Bh,7,2
 45944                                  ;		db 32h,9,3,3
 45945                                  ;		db 23h,7,4,1
 45946                                  ;		db 24h,1,4,5
 45947                                  ;		db 0FFh,0Dh,5,0FFh
 45948                                  
 45949                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 45950                                  
 45951                                  ; ---------------------------------------------------------------------------
 45952                                  ;
 45953                                  ; We need to map old int 24 errors and device driver errors into the new set
 45954                                  ; of errors. The following table is indexed by the new errors
 45955                                  ;
 45956                                  ; ---------------------------------------------------------------------------
 45957                                  
 45958                                  ;Public  ErrMap24
 45959                                  ErrMap24: ; Label   BYTE
 45960 00000EAB 13                          DB  error_write_protect	; 0
 45961 00000EAC 14                          DB  error_bad_unit		; 1
 45962 00000EAD 15                          DB  error_not_ready		; 2
 45963 00000EAE 16                          DB  error_bad_command	; 3
 45964 00000EAF 17                          DB  error_CRC		; 4
 45965 00000EB0 18                          DB  error_bad_length	; 5
 45966 00000EB1 19                          DB  error_seek		; 6
 45967 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45968 00000EB3 1B                          DB  error_sector_not_found	; 8
 45969 00000EB4 1C                          DB  error_out_of_paper	; 9
 45970 00000EB5 1D                          DB  error_write_fault	; A
 45971 00000EB6 1E                          DB  error_read_fault	; B
 45972 00000EB7 1F                          DB  error_gen_failure	; C
 45973 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45974 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45975 00000EBA 22                          DB  error_wrong_disk	; F
 45976                                  
 45977                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45978                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45979                                  	
 45980                                  ErrMap24End: ; LABEL   BYTE
 45981                                  
 45982                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45983                                  
 45984                                  ; ---------------------------------------------------------------------------
 45985                                  
 45986                                  ; 27/04/2019 - Retro DOS v4.0
 45987                                  
 45988                                  FIRST_BUFF_ADDR:
 45989 00000EBB 0000                    	dw	0			; first buffer address               
 45990                                  SPECIAL_VERSION:
 45991 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45992                                  FAKE_COUNT:
 45993 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45994                                  OLD_FIRSTCLUS:
 45995 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45996                                  
 45997                                  ; ---------------------------------------------------------------------------
 45998                                  
 45999                                  ;smr; moved from TABLE segment in exec.asm
 46000                                  
 46001 00000FC0 0000                    exec_init_SP: dw 0
 46002 00000FC2 0000                    exec_init_SS: dw 0
 46003 00000FC4 0000                    exec_init_IP: dw 0
 46004 00000FC6 0000                    exec_init_CS: dw 0
 46005                                  
 46006                                  exec_signature:
 46007 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 46008                                  exec_len_mod_512:
 46009 00000FCA 0000                    	dw	0	; low 9 bits of length
 46010                                  exec_pages:
 46011 00000FCC 0000                    	dw	0	; number of 512b pages in file
 46012                                  exec_rle_count:
 46013 00000FCE 0000                    	dw	0	; count of reloc entries
 46014                                  exec_par_dir:
 46015 00000FD0 0000                    	dw	0	; number of paragraphs before image
 46016                                  exec_min_BSS:
 46017 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 46018                                  exec_max_BSS:
 46019 00000FD4 0000                    	dw	0	; max number of para of BSS
 46020                                  exec_SS:
 46021 00000FD6 0000                    	dw	0	; stack of image
 46022                                  exec_SP:
 46023 00000FD8 0000                    	dw	0	; SP of image
 46024                                  exec_chksum:
 46025 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 46026                                  exec_IP:
 46027 00000FDC 0000                    	dw	0	; IP of entry
 46028                                  exec_CS:
 46029 00000FDE 0000                    	dw	0	; CS of entry
 46030                                  exec_rle_table:
 46031 00000FE0 0000                    	dw	0	; byte offset of reloc table
 46032                                  
 46033                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 46034                                  
 46035                                  ;smr; eom
 46036                                  
 46037                                  ; ---------------------------------------------------------------------------
 46038                                  
 46039                                  ;SR;
 46040                                  ; WIN386 instance table for DOS
 46041                                  
 46042                                  Win386_Info:
 46043 00000FE2 0300                    	db	3, 0
 46044 00000FE4 000000000000000000-     	dd	0, 0, 0
 46044 00000FED 000000             
 46045 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 46046                                  
 46047                                  Instance_Table:
 46048 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 46049 00000FFA [3200]00000400          	dw	BCON, 0, 4
 46050 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 46051 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 46052 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 46053 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 46054 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 46055 0000101E 00000000                	dw	0, 0
 46056                                  
 46057                                  ; M001; SR;
 46058                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 46059                                  ; M001; some DOS variables. Note that the only really important variable in 
 46060                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 46061                                  ; M001; which does not need to be done in DOS 5.0. 
 46062                                  
 46063                                  ; 29/12/2022
 46064                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 46065                                  
 46066                                  Win386_DOSVars:
 46067 00001022 05                      	db	5	;Major version 5 ; M001
 46068 00001023 00                      	db	0	;Minor version 0 ; M001
 46069 00001024 [EC05]                  	dw	SAVEDS	; M001
 46070 00001026 [EA05]                  	dw	SAVEBX	; M001
 46071 00001028 [2103]                  	dw	INDOS	; M001
 46072 0000102A [3E03]                  	dw	USER_ID	; M001
 46073 0000102C [1503]                  	dw	CritPatch ; M001
 46074 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 46075                                  
 46076                                  ;SR;
 46077                                  ; Flag to indicate whether WIN386 is running or not
 46078                                  
 46079 00001030 00                      IsWin386: db	0
 46080                                  
 46081                                  ;M018
 46082                                  ; This variable contains the path to the VxD device needed for Win386
 46083                                  
 46084 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 46084 0000103A 2E33383600         
 46085                                  
 46086                                  ;End WIN386 support
 46087                                  
 46088                                  ; ---------------------------------------------------------------------------
 46089                                  
 46090                                  ;SR;
 46091                                  ; These variables have been added for the special lie support for device
 46092                                  ;drivers.
 46093                                  ;
 46094                                  
 46095                                  DriverLoad:	
 46096 0000103F 01                      	db	1	;initialized to do special handling
 46097                                  BiosDataPtr:
 46098 00001040 00000000                	dd	0
 46099                                  
 46100                                  ; 29/12/2022 - Retro DOS v4.1
 46101                                  %if 0
 46102                                  
 46103                                  ; 27/04/2019 - Retro DOS v4.0
 46104                                  ; 04/11/2022
 46105                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 46106                                  
 46107                                  ;------------------------------------------------------------------------
 46108                                  ; Patch for Sidekick
 46109                                  ;
 46110                                  ; A documented method for finding the offset of the Errormode flag in the 
 46111                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 46112                                  ; for the following sequence of instructions.
 46113                                  ;
 46114                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 46115                                  ;
 46116                                  ; The Offset of Errormode flag is 0320h
 46117                                  ;
 46118                                  ;------------------------------------------------------------------------
 46119                                  
 46120                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 46121                                  	db	075h, 0Ch			 ; jnz  NearLabel
 46122                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 46123                                  	db	0CDh, 028h			 ; int  28h
 46124                                  
 46125                                  ;--------------------------------------------------------------------------
 46126                                  ; Patch for PortOfEntry - M036
 46127                                  ;
 46128                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 46129                                  ; the offset of Errormode flag. The following patch is to support them in 
 46130                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 46131                                  ;
 46132                                  ;---------------------------------------------------------------------------
 46133                                  
 46134                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 46135                                  	db	075h, 037h			 ; jnz	NearLabel
 46136                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 46137                                  
 46138                                  %endif ; 29/12/2022
 46139                                  
 46140                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 46141                                  
 46142                                  ;--------------------------------------------------------------------------
 46143                                  
 46144                                  ;*** New FCB Implementation
 46145                                  ; This variable is used as a cache in the new FCB implementation to remember
 46146                                  ;the address of a local SFT that can be recycled for a regenerate operation
 46147                                  
 46148 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 46149                                  
 46150                                  ;DOSDATA ENDS
 46151                                  
 46152                                  ;============================================================================
 46153                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 46154                                  ;============================================================================
 46155                                  ; 27/04/2019 - Retro DOS 4.0
 46156                                  
 46157                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 46158                                  
 46159                                  ;---------------------------------------------------------------------------
 46160                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 46161                                  ;----------------------------------------------------------------------------
 46162                                  	
 46163                                  	;db	90h
 46164                                  
 46165                                  	;EVEN
 46166                                  align 2
 46167                                  
 46168                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 46169                                  
 46170                                  DOSINTTABLE:	; LABEL	DWORD
 46171                                  
 46172                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 46173                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 46174                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 46175                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 46176                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 46177                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 46178                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 46179                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 46180                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 46181                                  	
 46182 00001048 [7251]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 46183 0000104C [DC02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 46184 00001050 [0803]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 46185 00001054 [2D05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 46186 00001058 [B405]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 46187 0000105C [AA60]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 46188 00001060 [0307]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 46189 00001064 [E302]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 46190 00001068 [E202]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 46191                                  
 46192 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 46193 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 46194                                  
 46195                                  ;-------------------------------------------------------------------------
 46196                                  ;
 46197                                  ; LOW MEM STUB:
 46198                                  ;
 46199                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 46200                                  ; handled by DOS. This stub is installed if the user specifies that the 
 46201                                  ; DOS load in HIMEM. Each entry point does this.
 46202                                  ;
 46203                                  ; 	1. if jmp to 8 has been patched out
 46204                                  ;	   2. if A20 OFF
 46205                                  ;	      3. Enable A20
 46206                                  ;	   4. else 
 46207                                  ;	      5. just go to dos entry
 46208                                  ;	   6. endif
 46209                                  ;	7. else
 46210                                  ;	   8. just go to dos entry
 46211                                  ;	9. endif
 46212                                  ;
 46213                                  ;--------------------------------------------------------------------------
 46214                                  
 46215                                  ; 27/04/2019 - Retro DOS v4.0
 46216                                  
 46217                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 46218                                  
 46219                                  ;--------------------------------------------------------------------------
 46220                                  ;
 46221                                  ; DIVIDE BY 0 handler
 46222                                  ;
 46223                                  ;--------------------------------------------------------------------------
 46224                                  
 46225                                  ldivov:
 46226                                  	; The following jump, skipping the XMS calls will be patched to 
 46227                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46228                                  	; needed because the stub is installed even before the XMS driver
 46229                                  	; is loaded if the user specifies dos=high in the config.sys
 46230                                  i0patch:
 46231 00001070 EB03                    	jmp	short divov_cont	
 46232                                  
 46233 00001072 E8D800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46234                                  divov_cont:
 46235 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 46236                                  
 46237                                  ;------------------------------------------------------------------------
 46238                                  ;
 46239                                  ; INT 20 Handler
 46240                                  ;
 46241                                  ; Here we do not have to set up the stack to return here as the abort call
 46242                                  ; will return to the address after the int 21 ah=4b call. This would be the
 46243                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 46244                                  ; will be restored then.
 46245                                  ;
 46246                                  ;-------------------------------------------------------------------------
 46247                                  
 46248                                  lquit:
 46249                                  	; The following jump, skipping the XMS calls will be patched to 
 46250                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46251                                  	; needed because the stub is installed even before the XMS driver
 46252                                  	; is loaded if the user specifies dos=high in the config.sys
 46253                                  i20patch:
 46254 0000107A EB03                    	jmp	short quit_cont	
 46255                                  
 46256 0000107C E8CE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46257                                  quit_cont:
 46258 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 46259                                  
 46260                                  ;--------------------------------------------------------------------------
 46261                                  ;
 46262                                  ; INT 21 Handler
 46263                                  ;
 46264                                  ;--------------------------------------------------------------------------
 46265                                  
 46266                                  lcommand:
 46267                                  	; The following jump, skipping the XMS calls will be patched to 
 46268                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46269                                  	; needed because the stub is installed even before the XMS driver
 46270                                  	; is loaded if the user specifies dos=high in the config.sys
 46271                                  i21patch:
 46272 00001084 EB03                    	jmp	short command_cont	
 46273                                  
 46274 00001086 E8C400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46275                                  command_cont:
 46276 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 46277                                  
 46278                                  ;------------------------------------------------------------------------
 46279                                  ;
 46280                                  ; INT 25 
 46281                                  ;
 46282                                  ;----------------------------------------------------------------------------
 46283                                  
 46284                                  labsdrd:
 46285                                  	; The following jump, skipping the XMS calls will be patched to 
 46286                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46287                                  	; needed because the stub is installed even before the XMS driver
 46288                                  	; is loaded if the user specifies dos=high in the config.sys
 46289                                  i25patch:
 46290 0000108E EB03                    	jmp	short absdrd_cont	
 46291                                  
 46292 00001090 E8BA00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46293                                  absdrd_cont:
 46294 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 46295                                  
 46296                                  ;-------------------------------------------------------------------------
 46297                                  ;
 46298                                  ; INT 26
 46299                                  ;
 46300                                  ;-----------------------------------------------------------------------
 46301                                  
 46302                                  labsdwrt:
 46303                                  	; The following jump, skipping the XMS calls will be patched to 
 46304                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46305                                  	; needed because the stub is installed even before the XMS driver
 46306                                  	; is loaded if the user specifies dos=high in the config.sys
 46307                                  i26patch:
 46308 00001098 EB03                    	jmp	short absdwrt_cont	
 46309                                  
 46310 0000109A E8B000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46311                                  absdwrt_cont:
 46312 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 46313                                  
 46314                                  ;------------------------------------------------------------------------
 46315                                  ;
 46316                                  ; INT 27
 46317                                  ;
 46318                                  ;-----------------------------------------------------------------------
 46319                                  
 46320                                  lstay_resident:
 46321                                  	; The following jump, skipping the XMS calls will be patched to 
 46322                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46323                                  	; needed because the stub is installed even before the XMS driver
 46324                                  	; is loaded if the user specifies dos=high in the config.sys
 46325                                  i27patch:
 46326 000010A2 EB03                    	jmp	short sr_cont	
 46327                                  
 46328 000010A4 E8A600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46329                                  sr_cont:
 46330 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 46331                                  
 46332                                  ;-----------------------------------------------------------------------------
 46333                                  ;
 46334                                  ; INT 2f
 46335                                  ;
 46336                                  ;-------------------------------------------------------------------------
 46337                                  
 46338                                  lint2f:
 46339                                  	; The following jump, skipping the XMS calls will be patched to 
 46340                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46341                                  	; needed because the stub is installed even before the XMS driver
 46342                                  	; is loaded if the user specifies dos=high in the config.sys
 46343                                  i2fpatch:
 46344 000010AC EB03                    	jmp	short int2f_cont	
 46345                                  
 46346 000010AE E89C00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46347                                  int2f_cont:
 46348 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 46349                                  
 46350                                  ;-----------------------------------------------------------------------------
 46351                                  ;
 46352                                  ; CPM entry
 46353                                  ;
 46354                                  ;------------------------------------------------------------------------
 46355                                  
 46356                                  lcall_entry:
 46357                                  	; The following jump, skipping the XMS calls will be patched to 
 46358                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 46359                                  	; needed because the stub is installed even before the XMS driver
 46360                                  	; is loaded if the user specifies dos=high in the config.sys
 46361                                  cpmpatch:
 46362 000010B6 EB03                    	jmp	short callentry_cont	
 46363                                  
 46364 000010B8 E89200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 46365                                  callentry_cont:
 46366 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 46367                                  
 46368                                  ;--------------------------------------------------------------------------
 46369                                  
 46370                                  lirett:
 46371 000010C0 CF                      	iret
 46372                                  
 46373                                  ;---------------------------------------------------------------------------
 46374                                  ;
 46375                                  ; LowIntXX:
 46376                                  ;
 46377                                  ; Interrupts from DOS that pass control to a user program must be done from
 46378                                  ; low memory, as the user program may change the state of the A20 line or
 46379                                  ; they may require that the A20 line be OFF. The following piece of code is
 46380                                  ; far call'd from the following places in DOS:
 46381                                  ;
 46382                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 46383                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 46384                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 46385                                  ;
 46386                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 46387                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 46388                                  ; before doing the ints and then do a far junp back into DOS.
 46389                                  ;
 46390                                  ;---------------------------------------------------------------------------
 46391                                  
 46392 000010C1 00000000                DosRetAddr23:	dd	0
 46393 000010C5 00000000                DosRetAddr24:	dd	0
 46394 000010C9 00000000                DosRetAddr28:	dd	0
 46395                                  
 46396                                  	; Execute int 23h from low memory
 46397                                  LowInt23:
 46398                                  					; save the return address that is on
 46399                                  					; the stack
 46400 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 46401 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 46402                                  
 46403 000010D7 CD23                    	int	23h			; ctrl C
 46404                                  					; turn on A20 it has been turned OFF
 46405                                  					; by int 28/23/24 handler.
 46406                                  
 46407 000010D9 E87100                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 46408                                  
 46409 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46410                                  
 46411                                  
 46412                                  	; Execute int 24h from low memory
 46413                                  LowInt24:
 46414                                  					; save the return address that is on
 46415                                  					; the stack
 46416 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 46417 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 46418                                  
 46419 000010EB CD24                    	int	24h			; crit error
 46420                                  					; turn on A20 it has been turned OFF
 46421                                  					; by int 28/23/24 handler.
 46422                                  
 46423 000010ED E85D00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46424                                  
 46425 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46426                                  
 46427                                  
 46428                                   
 46429                                  	; Execute int 28h from low memory
 46430                                  LowInt28:
 46431 000010F5 CD28                    	int	28h			; idle int
 46432                                  					; turn on A20 it has been turned OFF
 46433                                  					; by int 28/23/24 handler.
 46434                                  
 46435 000010F7 E85300                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 46436                                  
 46437 000010FA CB                      	retf
 46438                                  
 46439                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46440                                  
 46441                                  ;-------------------------------------------------------------------------
 46442                                  ;
 46443                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46444                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46445                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46446                                  ; This is so because exepac'd programs rely on address wrap.
 46447                                  ;
 46448                                  ;------------------------------------------------------------------------- 
 46449                                  
 46450                                  disa20_xfer:
 46451 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 46452                                  
 46453                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46454                                  
 46455                                  	; DS:SI points to entry point
 46456                                  	; AX:DI points to initial stack
 46457                                  	; DX has PDB pointer
 46458                                  	; BX has initial AX value
 46459                                  
 46460 000010FE FA                      	cli
 46461 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46462                                  
 46463 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 46464 00001107 89FC                    	mov	SP,DI			; and SP
 46465 00001109 FB                      	sti
 46466                                  
 46467 0000110A 1E                      	push	DS			; fake long call to entry
 46468 0000110B 56                      	push	SI
 46469 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 46470 0000110E 8EDA                    	mov	DS,DX
 46471 00001110 89D8                    	mov	AX,BX			; set up proper AX
 46472 00001112 CB                      	retf
 46473                                  
 46474                                  ;-------------------------------------------------------------------------
 46475                                  ;
 46476                                  ; M003:
 46477                                  ;
 46478                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46479                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 46480                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 46481                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 46482                                  ; more info.	
 46483                                  ;
 46484                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 46485                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 46486                                  ; stack to avoid additional stack overhead for the user.
 46487                                  ;
 46488                                  ; -------------------------------------------------------------------------
 46489                                  
 46490                                  disa20_iret:
 46491 00001113 E82700                  	call	XMMDisableA20
 46492 00001116 FE0E[2103]              	dec	byte [INDOS]
 46493 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46494 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 46495 00001122 89E5                    	mov	BP,SP
 46496                                  	;mov	[BP+user_env.user_AX],AL
 46497 00001124 884600                  	mov	[bp],al
 46498 00001127 A1[F205]                	mov	AX,[NSP]
 46499 0000112A A3[8405]                	mov	[USER_SP],AX
 46500 0000112D A1[F005]                	mov	AX,[NSS]
 46501 00001130 A3[8605]                	mov	[USER_SS],AX
 46502                                  
 46503 00001133 58                      	pop	AX			; restore user regs
 46504 00001134 5B                      	pop	BX
 46505 00001135 59                      	pop	CX
 46506 00001136 5A                      	pop	DX
 46507 00001137 5E                      	pop	SI
 46508 00001138 5F                      	pop	DI
 46509 00001139 5D                      	pop	BP
 46510 0000113A 1F                      	pop	DS
 46511 0000113B 07                      	pop	ES
 46512 0000113C CF                      	iret
 46513                                  
 46514                                  ;**************************************************************************
 46515                                  ;***	XMMDisableA20 - switch 20th address line			      
 46516                                  ;									      
 46517                                  ;	This routine is used to disable the 20th address line in 	      
 46518                                  ;	the system using XMM calls.					      
 46519                                  ;									      
 46520                                  ;	ENTRY	none		;ds = _DATA				      
 46521                                  ;	EXIT	A20 line disabled					      
 46522                                  ;	USES	NOTHING					      
 46523                                  ;									      
 46524                                  ;**************************************************************************
 46525                                  
 46526                                  XMMDisableA20:
 46527 0000113D 53                      	push	bx
 46528 0000113E 50                      	push	ax
 46529                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46530 0000113F B406                    	mov	ah,6
 46531 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46532 00001146 58                      	pop	ax
 46533 00001147 5B                      	pop	bx
 46534 00001148 C3                      	retn
 46535                                  
 46536                                  ; The entry point in the BIOS XMS driver is defined here.
 46537                                  
 46538                                  XMMcontrol:
 46539 00001149 00000000                	dd	0
 46540                                  
 46541                                  ;--------------------------------------------------------------------------
 46542                                  ;
 46543                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46544                                  ;									      
 46545                                  ;	This routine is used to query the A20 state in		 	      
 46546                                  ;	the system using XMM calls.					      
 46547                                  ;									      
 46548                                  ;	ENTRY: none		
 46549                                  ;
 46550                                  ;	EXIT : A20 will be ON
 46551                                  ;		
 46552                                  ; 	USES : NONE								      
 46553                                  ;									      
 46554                                  ;--------------------------------------------------------------------------
 46555                                  
 46556                                  ; 19/09/2023
 46557                                  ;LowMemory:	; label dword		; Set equal to 0000:0080
 46558                                  ;	dw	00080h
 46559                                  ;	dw	00000h
 46560                                  ;
 46561                                  ;HighMemory:	; label dword
 46562                                  ;	dw	00090h			; Set equal to FFFF:0090
 46563                                  ;	dw	0FFFFh
 46564                                  
 46565                                  EnsureA20ON:
 46566 0000114D 9C                      	pushf
 46567 0000114E 1E                      	push    ds
 46568 0000114F 06                      	push	es
 46569 00001150 51                      	push	cx
 46570 00001151 56                      	push	si
 46571 00001152 57                      	push	di
 46572                                  
 46573                                  	; 19/09/2023
 46574                                  	;lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46575                                  	;les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46576                                  
 46577 00001153 31FF                    	xor	di,di
 46578 00001155 8EC7                    	mov	es,di
 46579 00001157 4F                      	dec	di
 46580 00001158 BE9000                  	mov	si,90h	; 0FFFFh:0090h	; HighMemory
 46581 0000115B 8EDF                    	mov	ds,di
 46582 0000115D BF8000                  	mov	di,80h ; 0000h:0080h	; LowMemory
 46583                                  	
 46584 00001160 B90400                  	mov	cx,4
 46585 00001163 FC                      	cld
 46586 00001164 F3A7                    	repe    cmpsw
 46587                                  
 46588 00001166 7407                    	jz	short EA20_OFF
 46589                                  EA20_RET:
 46590 00001168 5F                      	pop	di
 46591 00001169 5E                      	pop	si
 46592 0000116A 59                      	pop	cx
 46593 0000116B 07                      	pop	es
 46594 0000116C 1F                      	pop	ds
 46595 0000116D 9D                      	popf
 46596 0000116E C3                      	retn
 46597                                  
 46598                                  EA20_OFF:
 46599                                  	; We are going to do the XMS call on the DOS's AuxStack.
 46600                                  	; NOTE: ints are disabled at this point.
 46601                                  
 46602 0000116F 53                      	push	bx
 46603 00001170 50                      	push	ax
 46604                                  
 46605 00001171 8CD0                    	mov	ax,ss			; save user's stack pointer
 46606 00001173 2EA3[6C10]              	mov	[cs:SS_Save],ax
 46607 00001177 2E8926[6E10]            	mov	[cs:SP_Save],sp
 46608 0000117C 8CC8                    	mov	ax,cs
 46609 0000117E 8ED0                    	mov	ss,ax
 46610 00001180 BC[A007]                	mov	sp,AUXSTACK
 46611                                  					; ss:sp -> DOSDATA:AuxStack
 46612                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 46613 00001183 B405                    	mov	ah,5
 46614 00001185 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 46615 0000118A 09C0                    	or	ax,ax
 46616 0000118C 740F                    	jz	short XMMerror		; AX = 0 fatal error
 46617                                  
 46618 0000118E 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 46619 00001192 8ED0                    	mov	ss,ax
 46620 00001194 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 46621                                  
 46622 00001199 58                      	pop	ax
 46623 0000119A 5B                      	pop	bx
 46624                                  
 46625 0000119B EBCB                    	jmp	short EA20_RET
 46626                                  
 46627                                  XMMerror:				; M006 - Start
 46628 0000119D B40F                    	mov	ah,0Fh			; get video mode
 46629 0000119F CD10                    	int	10h
 46630 000011A1 3C07                    	cmp	al,7			; Q: are we an MDA
 46631 000011A3 7406                    	je	short XMMcont			; Y: do not change mode
 46632 000011A5 30E4                    	xor	ah,ah ; 0			; set video mode
 46633 000011A7 B002                    	mov	al,02h			; 80 X 25 text
 46634 000011A9 CD10                    	int	10h
 46635                                  XMMcont:
 46636 000011AB B405                    	mov	ah,05h			; set display page
 46637 000011AD 30C0                    	xor	al,al			; page 0
 46638 000011AF CD10                    	int	10h
 46639                                  	
 46640 000011B1 BE[8E12]                	mov	si,XMMERRMSG
 46641 000011B4 0E                      	push	cs
 46642 000011B5 1F                      	pop	ds
 46643 000011B6 FC                      	cld				; clear direction flag
 46644                                  XMMprnt:
 46645 000011B7 AC                      	lodsb
 46646 000011B8 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 46647 000011BA 7409                    	jz	short XMMStall		; function 0Eh	
 46648 000011BC B40E                    	mov	ah,0Eh
 46649 000011BE BB0700                  	mov	bx,7
 46650 000011C1 CD10                    	int	10h
 46651 000011C3 EBF2                    	jmp	short XMMprnt
 46652                                  
 46653                                  XMMStall:
 46654 000011C5 FB                      	sti				; allow the user to warm boot
 46655 000011C6 EBFD                    	jmp	short XMMStall		; M006 - End
 46656                                  
 46657                                  ;---------------------------------------------------------------------------
 46658                                  
 46659                                  ; 27/04/2019 - Retro DOS v4.0
 46660                                  
 46661                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 46662                                  ALTAH	equ 0Ch
 46663                                  
 46664                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 46665                                  ;table was different for this. Segments will be patched in at init time.
 46666                                  
 46667                                  OldInstanceJunk:
 46668 000011C8 7000                    	dw	70h	;segment of BIOS
 46669 000011CA 0000                    	dw	0	;indicate stacks in SYSINIT area
 46670 000011CC 0600                    	dw	6	;5 instance items
 46671                                  
 46672                                  	;dw	0,offset dosdata:contpos, 2
 46673                                  	;dw	0,offset dosdata:bcon, 4
 46674                                  	;dw	0,offset dosdata:carpos,106h
 46675                                  	;dw	0,offset dosdata:charco, 1
 46676                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 46677                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 46678                                  
 46679 000011CE 0000[2200]0200          	dw	0,CONTPOS,2
 46680 000011D4 0000[3200]0400          	dw	0,BCON,4
 46681 000011DA 0000[F901]0601          	dw	0,CARPOS,106h
 46682 000011E0 0000[0003]0100          	dw	0,CHARCO,1
 46683 000011E6 0000[C00F]2200          	dw	0,exec_init_SP,34
 46684 000011EC 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 46685                                  
 46686                                  ;---------------------------------------------------------------------------
 46687                                  
 46688                                  ; M021-
 46689                                  ;
 46690                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 46691                                  ; 	takes control of the HMA. When running, this word is a reliable
 46692                                  ;	indicator that the DOS is actually using HMA. You can't just use
 46693                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 46694                                  
 46695                                  DosHasHMA:
 46696 000011F2 00                      	db	0
 46697                                  FixExePatch:
 46698 000011F3 0000                    	dw	0		; M012
 46699                                  
 46700                                  ; 28/12/2022 - Retro DOS v4.1
 46701                                  ;RationalPatchPtr:
 46702                                  ;	dw	0		; M012
 46703                                  
 46704                                  ; End M021
 46705                                  
 46706                                  ;---------------------------------------------------------------------------
 46707                                  
 46708                                  ; 28/12/2022 - Retro DOS v4.1
 46709                                  %if 0
 46710                                  
 46711                                  ; M020 Begin
 46712                                  
 46713                                  RatBugCode:	; proc	far
 46714                                  	push	cx
 46715                                  	mov	cx,[10h]
 46716                                  rbc_loop:
 46717                                  	;loop	$
 46718                                  	loop	rbc_loop
 46719                                  	pop	cx
 46720                                  	retf
 46721                                  		
 46722                                  ; M020 End
 46723                                  
 46724                                  %endif
 46725                                  
 46726                                  ;---------------------------------------------------------------------------
 46727                                  	
 46728                                  UmbSave1:
 46729                                  	;db	11 dup (?)	; M023
 46730 000011F5 00<rep Bh>              	times	11 db 0	
 46731                                  
 46732                                  ; DOSDATA:122Ah
 46733                                  
 46734                                  Mark3:	; label byte
 46735                                  
 46736                                  ;IF2
 46737                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 46738                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46739                                  ;	ENDIF
 46740                                  ;ENDIF
 46741                                  
 46742                                  ;############################################################################
 46743                                  ;
 46744                                  ; ** HACK FOR DOS 4.0 REDIR **
 46745                                  ;
 46746                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 46747                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 46748                                  ; COUNTRY_CDPG if it can. 
 46749                                  ;
 46750                                  ; MARK3 SHOULD NOT BE > 122AH 
 46751                                  ;
 46752                                  ; As of 9/6/90, this area is FULL!
 46753                                  ;
 46754                                  ;############################################################################
 46755                                   
 46756                                  	;ORG	0122Ah
 46757                                  
 46758                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 46759                                  
 46760                                  ; The following table is used for DOS 3.3
 46761                                  ;DOS country and code page information is defined here for DOS 3.3.
 46762                                  ;The initial value for ccDosCountry is 1 (USA).
 46763                                  ;The initial value for ccDosCodepage is 850.
 46764                                  
 46765                                  ; country and code page information
 46766                                  ; ---------------------------------------------------------------------------
 46767                                  COUNTRY_CDPG:	; label  byte
 46768 00001200 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 46769 00001208 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 46769 00001211 53595300           
 46770                                  	;db   51 dup (?)
 46771 00001215 00<rep 33h>             	times 51 db 0
 46772                                  ; ------------------------------------------------<MSKK01>-------------------
 46773                                  ;ifdef	DBCS
 46774                                  ;  ifdef JAPAN
 46775                                  ;	dw   932			; system code page id (JAPAN)
 46776                                  ;  endif
 46777                                  ;  ifdef TAIWAN
 46778                                  ;	dw   938			; system code page id (TAIWAN)
 46779                                  ;  endif
 46780                                  ;  ifdef KOREA
 46781                                  ;	dw   934			; system code page id (KOREA IBM)
 46782                                  ;  endif
 46783                                  ;else
 46784 00001248 B501                    	dw   437			; system code page id
 46785                                  ;endif
 46786                                  ; ------------------------------------------------<MSKK01>-------------------
 46787 0000124A 0600                    	dw   6				; number of entries
 46788 0000124C 02                      	db   SetUcase  ; 2		; Ucase type
 46789 0000124D [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 46790 0000124F 0000                    	dw   0				; segment of poiter
 46791 00001251 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 46792 00001252 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 46793 00001254 0000                    	dw   0				; segment of poiter
 46794 00001256 05                      	db   SetFileList ; 5		; valid file chars type
 46795 00001257 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 46796 00001259 0000                    	dw   0				; segment of poiter
 46797 0000125B 06                      	db   SetCollate	; 6		; collate type
 46798 0000125C [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 46799 0000125E 0000                    	dw   0				; segment of poiter
 46800 00001260 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 46801 00001261 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 46802 00001263 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 46803 00001265 01                      	db   SetCountryInfo  ; 1	; country info type
 46804 00001266 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 46805                                  ; ------------------------------------------------<MSKK01>-------------------
 46806                                  ;ifdef	DBCS
 46807                                  ;	...... 
 46808                                  ;else
 46809 00001268 0100                    	dw   1				; USA country id
 46810 0000126A B501                    	dw   437			; USA system code page id
 46811 0000126C 0000                    	dw   0 				; date format
 46812 0000126E 2400000000              	db   '$',0,0,0,0		; currency symbol
 46813 00001273 2C00                    	db   ',',0			; thousand separator
 46814 00001275 2E00                    	db   '.',0			; decimal separator
 46815 00001277 2D00                    	db   '-',0			; date separator
 46816 00001279 3A00                    	db   ':',0			; time separator
 46817 0000127B 00                      	db   0				; currency format flag
 46818 0000127C 02                      	db   2				; # of digits in currency
 46819 0000127D 00                      	db   0 				; time format
 46820 0000127E [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 46821 00001280 0000                    	dw   0				; segment of entry point
 46822 00001282 2C00                    	db   ',',0			; data list separator
 46823 00001284 000000000000000000-     	dw   0,0,0,0,0			; reserved
 46823 0000128D 00                 
 46824                                  ;endif
 46825                                  ; ------------------------------------------------<MSKK01>-------------------
 46826                                  
 46827                                  ; 27/04/2019 - Retro DOS v4.0
 46828                                  
 46829                                  ;include msdos.cl2			; XMMERRMSG
 46830                                  
 46831                                  ; DOSDATA:12B8h (MSDOS 6.22, MSDOS.SYS) ; 17/01/2024
 46832                                  
 46833                                  XMMERRMSG:
 46834 0000128E 0D0A                    	db	0Dh,0Ah
 46835 00001290 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 46835 00001299 617265204572726F72-
 46835 000012A2 0D0A24             
 46836                                  
 46837                                  ; DOSDATA ends
 46838                                  
 46839                                  ; 05/11/2022
 46840                                  ;----------------------------------------------------------------------------
 46841                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 46842                                  ;----------------------------------------------------------------------------
 46843                                  
 46844                                  ; 28/12/2022 - Retro DOS v4.1
 46845                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 46846                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 46847                                  ;----------------------------------------------------------------------------
 46848                                  %if 0
 46849                                  
 46850                                  ;----------------------------------------------------------------------------
 46851                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46852                                  
 46853                                  ;============================================================================
 46854                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 46855                                  ;============================================================================
 46856                                  ; 27/04/2019 - Retro DOS 4.0
 46857                                  
 46858                                  ;DOSDATA Segment
 46859                                  
 46860                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 46861                                  
 46862                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46863                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 46864                                  
 46865                                  ; first and second DOS patches
 46866                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 46867                                  ;
 46868                                  ; Code in disk.asm, 2 locations, one for read, one for write
 46869                                  ;	DVRDLP:
 46870                                  ;	DVWRTLP:
 46871                                  ;
 46872                                  ;
 46873                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 46874                                  ;	lds	si,si+7 				  ; sf_devptr
 46875                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 46876                                  
 46877                                  DOSP1_ID:	db	036h,0C5h,036h
 46878                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46879                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 46880                                  
 46881                                  		db	90h, 90h
 46882                                  
 46883                                  DOSP12_ID:	db	036h,0C5h,036h
 46884                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46885                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 46886                                  
 46887                                  ; DOSDATA:12E3h
 46888                                  
 46889                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 46890                                  ;
 46891                                  ; Code in disk.asm, 1 location
 46892                                  ;	GETBUF:
 46893                                  ;
 46894                                  ; 051h	push	cx	<- begin special int28 mode
 46895                                  ;	push	es
 46896                                  ;	push	di
 46897                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 46898                                  ;	call	????	; $STD_CON_STRING_INPUT
 46899                                  ;	pop	di
 46900                                  ;	pop	es
 46901                                  ; 059h	pop	cx	<- end special int28 mode
 46902                                  
 46903                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 46904                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 46905                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 46906                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 46907                                  DOSP4_ID:	db	059h			; pop cx
 46908                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 46909                                  	
 46910                                  ; DOSDATA:12EFh
 46911                                  
 46912                                  ; Fifth DOS patch - System call 40h (Write) to console
 46913                                  ;
 46914                                  ; Code in disk.asm, 1 location
 46915                                  ;
 46916                                  ;		push	cx
 46917                                  ;      WRCONLP: lodsb
 46918                                  ;		cmp	al,1Ah
 46919                                  ;		jz	????
 46920                                  ;		call	????	<- "simulate" int28 event
 46921                                  ;		loop	WRCONLP
 46922                                  ;      CONEOF:	pop	ax
 46923                                  
 46924                                  DOSP5_ID:	db	051h			; push cx
 46925                                  		db	0ACh,03Ch,01Ah,074h,005h
 46926                                  		db	0E8h			; call
 46927                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 46928                                  
 46929                                  ; DOSDATA:12F6h
 46930                                  
 46931                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 46932                                  ;
 46933                                  ; Code in disp.asm, 1 location
 46934                                  ;
 46935                                  ;
 46936                                  ;	mov [SaveDS],ds
 46937                                  ;	mov [SaveBX],bx
 46938                                  ;	mov bx,cs
 46939                                  ;	mov ds,bx
 46940                                  ;	inc [indos]
 46941                                  ;	xor ax,ax
 46942                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 46943                                  
 46944                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 46945                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 46946                                  		db	02Eh,089h,01Eh
 46947                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 46948                                  		db	08Ch,0CBh		; mov bx,cs
 46949                                  		db	08Eh,0DBh		; mov ds,bx
 46950                                  		db	0FEh,006h
 46951                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 46952                                  		db	033h,0C0h		; xor ax,ax
 46953                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 46954                                  
 46955                                  ; DOSDATA:130Ah
 46956                                  
 46957                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 46958                                  ;
 46959                                  ; Code in handle.asm, 1 location in routine CheckOwner
 46960                                  ;
 46961                                  ;
 46962                                  ;
 46963                                  ;	push	ax
 46964                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 46965                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 46966                                  ;	pop	ax
 46967                                  ;	jz	????
 46968                                  
 46969                                  DOSP8_ID:	db	050h			; push ax
 46970                                  		db	036h,0A1h
 46971                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 46972                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 46973                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46974                                  		db	02Fh,058h		; pop  ax
 46975                                  
 46976                                  ; DOSDATA:1314h
 46977                                  
 46978                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46979                                  ;
 46980                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46981                                  ;   a yeild when a character is not ready to be read.
 46982                                  ;
 46983                                  ; Code in disk.asm, 3 locations
 46984                                  ;
 46985                                  ;   DVRDRAW:
 46986                                  ;	    PUSH    ES
 46987                                  ;	    POP     DS
 46988                                  ;   ReadRawRetry:				<- Patch 10
 46989                                  ;	    MOV     BX,DI
 46990                                  ;	    XOR     AX,AX			<- Reenter #2
 46991                                  ;	    MOV     DX,AX
 46992                                  ;	    call    SETREAD
 46993                                  ;	    PUSH    DS				<- Reenter #1
 46994                                  ;	    LDS     SI,[THISSFT]
 46995                                  ;	    call    DEVIOCALL
 46996                                  ;	    MOV     DX,DI
 46997                                  ;	    MOV     AH,86H
 46998                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46999                                  ;	    TEST    DI,STERR
 47000                                  ;	    JZ	    CRDROK
 47001                                  ;	    call    CHARHARD
 47002                                  ;	    MOV     DI,DX
 47003                                  ;	    OR	    AL,AL
 47004                                  ;	    JZ	    CRDROK
 47005                                  ;	    CMP     AL,3
 47006                                  ;	    JZ	    CRDFERR
 47007                                  ;	    POP     DS
 47008                                  ;	    JMP     ReadRawRetry
 47009                                  ;
 47010                                  ;   CRDFERR:
 47011                                  ;	    POP     DI				<- Patch 11
 47012                                  ;   DEVIOFERR:
 47013                                  ;	    LES     DI,[THISSFT]
 47014                                  ;	    jmp     SET_ACC_ERR_DS
 47015                                  ;
 47016                                  ;   CRDROK:
 47017                                  ;	    POP     DI				<- Patch 12
 47018                                  ;	    MOV     DI,DX
 47019                                  ;	    ADD     DI,[CALLSCNT]
 47020                                  ;	    JMP     SHORT ENDRDDEVJ3
 47021                                  
 47022                                  DOSP10_ID:		db	006H,01FH
 47023                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 47024                                  DOSP10_LOC:		db	08BH,0DFH
 47025                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 47026                                  			db	033H,0C0H,08BH,0D0H,0E8H
 47027                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 47028                                  			db	0DFH,00EH
 47029                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 47030                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 47031                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 47032                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 47033                                  			db	009H,003H
 47034                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 47035                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 47036                                  			db	01FH,0EBH,0CFH
 47037                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 47038                                  			db	05FH
 47039                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 47040                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 47041                                  
 47042                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 47043                                  			db	05FH,08BH,0FAH
 47044                                  ; DOSDATA:1353h
 47045                                  
 47046                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 47047                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 47048                                  ;
 47049                                  ;	    Sets focus to current VM so user can see fatal message.
 47050                                  ;
 47051                                  ;
 47052                                  ;	l0: lodsb		<- Setfocus here
 47053                                  ;	    cmp al, '$'
 47054                                  ;	    je l1
 47055                                  ;	    mov bl, 7
 47056                                  ;	    mov ah, 0Eh
 47057                                  ;	    int 10h
 47058                                  ;	    jmp l0
 47059                                  ;	l1: jmp $
 47060                                  
 47061                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 47062                                  		db	03Ch,024h		;     cmp al, '$'
 47063                                  		db	074h,008h		;     je l1
 47064                                  		db	0B3h,007h		;     mov bl, 7
 47065                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 47066                                  		db	0CDh,010h		;     int 10h
 47067                                  		db	0EBh,0F3h		;     jmp l0
 47068                                  		db	0EBh,0FEh		; l1: jmp $
 47069                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 47070                                  
 47071                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47072                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 47073                                  
 47074                                  ; 06/12/2022
 47075                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 47076                                  
 47077                                  ; DOSDATA ends
 47078                                  
 47079                                  ;============================================================================
 47080                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 47081                                  ;============================================================================
 47082                                  ; 27/04/2019 - Retro DOS 4.0
 47083                                  
 47084                                  ;mpatch.asm -- holds data patch location for callouts 
 47085                                  ; -- allocate cluster in rom.asm
 47086                                  ;
 47087                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 47088                                  ; Currently, this location is used only by magicdrv.sys's patch to
 47089                                  ; cluster allocation, however it can be expanded to be used by other
 47090                                  ; patches. This is important since we have an easy-access pointer to
 47091                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 47092                                  ; only patch out a far call/retf, so any space after that could be
 47093                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 47094                                  ; to call out here.
 47095                                  ;
 47096                                  ; Currently, we allocate only the minimum space required for the 6
 47097                                  ; byte magicdrv patch, so if you change the dos data, you may want
 47098                                  ; to reserve space here if your new data will be position dependent
 47099                                  ; and would prohibit growing of this table.
 47100                                  ;       
 47101                                  ;history	-	created 8-7-92 by scottq
 47102                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 47103                                  ;
 47104                                  ;Exported Functions
 47105                                  ;==================
 47106                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 47107                                  
 47108                                  ; DosData Segment
 47109                                  
 47110                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 47111                                  
 47112                                  ; ---------------------------------------------------------------------------
 47113                                  
 47114                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 47115                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 47116                                  ; greater). Added to this file because it needed to be somewhere and is
 47117                                  ; 'patch' related.
 47118                                  
 47119                                  Rational386PatchPtr:
 47120                                  	dw	0	; points to patch routine or RET instr.
 47121                                  ; ---------------------------------------------------------------------------
 47122                                  
 47123                                  MagicPatch:
 47124                                  ;MagicPatch proc far
 47125                                          retf            ;default is to just return to allocate
 47126                                          nop             ;however, this code will be patched
 47127                                          nop             ;by magicdrv.sys to
 47128                                          nop             ; call far ?:?     
 47129                                          nop             ; retf or perhaps just jmp far
 47130                                          nop             ;retf/nop take one byte, so we need six instructions
 47131                                                          ;for 6 byte patch
 47132                                  ;MagicPatch endp
 47133                                  
 47134                                  ; ---------------------------------------------------------------------------
 47135                                  
 47136                                  ;DosData Ends
 47137                                  
 47138                                  ; DOSDATA:136Ah
 47139                                  
 47140                                  ;----------------------------------------------------------------------------
 47141                                  
 47142                                  ;DOSDATALAST SEGMENT
 47143                                  
 47144                                  ; 29/04/2019 - Retro DOS v4.0
 47145                                  
 47146                                  ;----------------------------------------------------------------------------
 47147                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 47148                                  
 47149                                  ;db 0,1,12,64,19,0 ; ! Magic numbers !
 47150                                  
 47151                                  ;align 16
 47152                                  
 47153                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 47154                                  
 47155                                  ;----------------------------------------------------------------------------
 47156                                  
 47157                                  %endif	; 05/11/2022
 47158                                  
 47159                                  ; 05/12/2022
 47160                                  ;MSDAT001E:	; label byte
 47161                                  
 47162                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47163                                  DOSDATAEND equ $
 47164                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 47165                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 47166                                  
 47167                                  ;DOSDATALAST ENDS
 47168                                  
 47169                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 47170                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 47171                                  ;============================================================================
 47172                                  ;	END
 47173                                  ;============================================================================
 47174                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 47175                                  ; -----------------------------
 47176                                  ; MAY 2019, ISTANBUL - TURKIYE.
