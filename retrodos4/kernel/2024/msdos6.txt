     1                                  ;*****************************************************************************
     2                                  ; MSDOS6.BIN (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 22/01/2024 - Retro DOS v4.2 ((Previous: 29/09/2023))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos6.s -l msdos6.lst -o MSDOS6.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 30/12/2022 - Retro DOS v4.2 Kernel ('msdos6.s')
    27                                  ; Modified from 'msdos5.s' (29/12/2022, Retro DOS v4.1 Kernel) file
    28                                  ; as below:
    29                                  ;	1) MS-DOS version has been changed to 6.22 (It was 5.0) 
    30                                  ;	2) Retro DOS version has been changed to 4.2 (It was 4.1)
    31                                  ; (The content has not been changed except kernel version because the kernel
    32                                  ;  code is already compatible with MSDOS 6.x and it is optimized before.
    33                                  ;	(But IO.SYS part of the kernel is not same with Retro DOS v4.1 code.)	
    34                                  
    35                                  ; ----------------------------------------------------------------------------
    36                                  
    37                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    38                                  
    39                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    40                                  ;	(as included binary, 'MSDOS5.BIN') 
    41                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    42                                  ;	
    43                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    44                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    45                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    46                                        
    47                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    48                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    49                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    50                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    51                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    52                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    53                                  
    54                                  ;=============================================================================
    55                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    56                                  ;-----------------------------------------------------------------------------
    57                                  
    58                                  ; MSDOS 6.0 Kernel source files:
    59                                  ;	MSDATA.ASM, 
    60                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    61                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    62                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    63                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    64                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    65                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    66                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    67                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    68                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    69                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    70                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    71                                  ;
    72                                  ; MSDOS 2.0 Kernel source files:
    73                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    74                                  ;	MSCODE.ASM
    75                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    76                                  
    77                                  ;============================================================================
    78                                  ; DOSLINK
    79                                  ;============================================================================
    80                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    81                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    82                                  ;stdio time xenix xenix2
    83                                  
    84                                  ;============================================================================
    85                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    86                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    87                                  ;============================================================================
    88                                  ;
    89                                  ; ###########################################################################
    90                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    91                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    92                                  ; #			 Licensed to: Freeware version			    #
    93                                  ; ###########################################################################
    94                                  ;
    95                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    96                                  
    97                                  ; ---------------------------------------------------------------------------
    98                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    99                                  ; Format      :	Binary file
   100                                  ;============================================================================
   101                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
   102                                  ;----------------------------------------------------------------------------
   103                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
   104                                  
   105                                  ;============================================================================
   106                                  ; MSDOS.ASM
   107                                  ;============================================================================
   108                                  
   109                                  ;TITLE   Standard MSDOS
   110                                  ;NAME    MSDOS_2
   111                                  
   112                                  ; Number of disk I/O buffers
   113                                  
   114                                  ;	INCLUDE STDSW.ASM
   115                                  ;       INCLUDE MSHEAD.ASM
   116                                  ;       INCLUDE MSDATA.ASM
   117                                  
   118                                  ;	END
   119                                  
   120                                  ;============================================================================
   121                                  ; STDSW.ASM
   122                                  ;============================================================================
   123                                  
   124                                  TRUE    EQU     0FFFFH
   125                                  FALSE   EQU     ~TRUE ; NOT TRUE
   126                                  
   127                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   128                                  ; version of the operating system
   129                                  ;MSVER   EQU	false
   130                                  ;IBM     EQU	true
   131                                  ;WANG    EQU	FALSE
   132                                  ;ALTVECT EQU	FALSE
   133                                  
   134                                  ; Set this switch to cause DOS to move itself to the end of memory
   135                                  ;HIGHMEM EQU     FALSE
   136                                  
   137                                  ;	IF      IBM
   138                                  ESCCH    EQU	 0			;character to begin escape seq.
   139                                  CANCEL   EQU	 27			;Cancel with escape
   140                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   141                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   142                                  ZEROEXT  EQU	TRUE
   143                                  ;       ELSE
   144                                  ;       IF      WANG			;Are we assembling for WANG?
   145                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   146                                  ;       ELSE
   147                                  ;ESCCH	 EQU	1BH
   148                                  ;       ENDIF
   149                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   150                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   151                                  					;and off if not WANG
   152                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   153                                  					;and off
   154                                  ;ZEROEXT EQU	TRUE
   155                                  ;        ENDIF
   156                                  
   157                                  ;============================================================================
   158                                  ; MSHEAD.ASM
   159                                  ;============================================================================
   160                                  
   161                                  ;--------------------------------------------------------------
   162                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   163                                  ;--------------------------------------------------------------
   164                                  
   165                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   166                                  ;        by Microsoft MSDOS development group:
   167                                  ;           Tim Paterson (Ret.)
   168                                  ;           Aaron Reynolds
   169                                  ;           Nancy Panners (Parenting)
   170                                  ;           Mark Zbikowski
   171                                  ;           Chris Peters (BIOS) (ret.)
   172                                  
   173                                  ; ****************** Revision History *************************
   174                                  ;          >> EVERY change must noted below!! <<
   175                                  ;
   176                                  ; 0.34 12/29/80 General release, updating all past customers
   177                                  ; 0.42 02/25/81 32-byte directory entries added
   178                                  ; 0.56 03/23/81 Variable record and sector sizes
   179                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   180                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   181                                  ; 0.75 04/17/81 Improve and correct buffer handling
   182                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   183                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   184                                  ; 1.00 04/28/81 Renumber for general release
   185                                  ; 1.01 05/12/81 Fix bug in `STORE'
   186                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   187                                  ;               RENAME fix, general cleanup
   188                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   189                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   190                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   191                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   192                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   193                                  ;               of smaller improvements
   194                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   195                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   196                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   197                                  ;               zero extent field in IBM version (back to 1.01!)
   198                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   199                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   200                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   201                                  ;               is searched first when possible to minimize I/O
   202                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   203                                  ;               full sector write when file is growing
   204                                  ;      03/09/82 Multiple I/O buffers
   205                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   206                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   207                                  ;               must invalidate all buffers (disk and directory).
   208                                  ; 1.27 03/31/82 Installable device drivers
   209                                  ;                 Function call 47 - Get pointer to device table list
   210                                  ;                 Function call 48 - Assign CON AUX LIST
   211                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   212                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   213                                  ;               call entries.  Most CS relative references changed to SS
   214                                  ;               relative with an eye toward putting a portion of the DOS in
   215                                  ;               ROM.  DOS source also broken into header, data and code pieces
   216                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   217                                  ;               return the current values.
   218                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   219                                  ;               call to return flag location (call 29)
   220                                  ;      04/15/82 Volume ID attribute added
   221                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   222                                  ;               avoid a CS relative reference.
   223                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   224                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   225                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   226                                  ;               call 49.
   227                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   228                                  ;               address of DPB
   229                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   230                                  ;               writting to console device via file I/O.  Added a console
   231                                  ;               output attribute to devices.
   232                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   233                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   234                                  ;               as devices....  pipes, redirection now possible
   235                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   236                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   237                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   238                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   239                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   240                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   241                                  ;               out back about 1.27 or so (oops).  ARR
   242                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   243                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   244                                  ;               RMDIR Xenix calls
   245                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   246                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   247                                  ;               Frees up lots of memory.
   248                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   249                                  ;               system buffers
   250                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   251                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   252                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   253                                  ;               changed to set file handle environment.
   254                                  ; 2.00 08/01/82 Number for IBM release
   255                                  ;      01/19/83 No environ bug in EXEC
   256                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   257                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   258                                  ;      01/27/83 Growcnt fixed for 32-bits
   259                                  ;      01/27/83 Find-first problem after create
   260                                  ; 2.01 02/17/83 International DOS
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   264                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   265                                  ; 2.10 03/09/83 Start of NETWORK support
   266                                  ;		New Buffer structure
   267                                  ;		New Sytem file table structure
   268                                  ;		FCB moved to internal representation
   269                                  ;		DOS re-organized
   270                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   271                                  ;		device interface.
   272                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   273                                  ;               an IBM PC
   274                                  ; 2.50 09/12/83 More network stuff
   275                                  ;
   276                                  ; *************************************************************
   277                                  
   278                                  ; ----------------------------------------------------------------------------
   279                                  ; EQUATES
   280                                  
   281                                  ; Interrupt Entry Points:
   282                                  
   283                                  ; INTBASE:      ABORT
   284                                  ; INTBASE+4:    COMMAND
   285                                  ; INTBASE+8:    BASE EXIT ADDRESS
   286                                  ; INTBASE+C:    CONTROL-C ABORT
   287                                  ; INTBASE+10H:  FATAL ERROR ABORT
   288                                  ; INTBASE+14H:  BIOS DISK READ
   289                                  ; INTBASE+18H:  BIOS DISK WRITE
   290                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   291                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   292                                  ; INTBASE+40H:  Long jump to CALL entry point
   293                                  
   294                                  ENTRYPOINTSEG   EQU     0Ch
   295                                  MAXDIF          EQU     0FFFh
   296                                  SAVEXIT         EQU     10
   297                                  ; 06/05/2019
   298                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   299                                  
   300                                         ; INCLUDE DOSSYM.ASM
   301                                         ; INCLUDE DEVSYM.ASM
   302                                  
   303                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   304                                  ; PAGE
   305                                  ; There are three kinds of context resets that can occur during normal DOS
   306                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   307                                  ; be handles in a clean fashion that allows nested executions along with the
   308                                  ; ability to trap one's own errors.
   309                                  ;
   310                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   311                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   312                                  ;           follows:
   313                                  ;
   314                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   315                                  ;           Save it in static memory.
   316                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   317                                  ;
   318                                  ;           The interrupt service routine must preserve all registers and
   319                                  ;           return carry set iff the operation is to be aborted (via abort
   320                                  ;           system call), otherwise, carry is reset and the operation is
   321                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   322                                  ;           RESULTS.
   323                                  ;
   324                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   325                                  ;           restore INT int_ctrl_c from the saved vector.
   326                                  ;
   327                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   328                                  ;           also preserve registers and return one of three values in AL: 0 and
   329                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   330                                  ;           himself is not to issue the abort, rather, the dos will do it for
   331                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   332                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   333                                  ;
   334                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   335                                  ;           abort call.  This is reserved for knowledgeable system programs.
   336                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   337                                  
   338                                  ;SUBTTL SEGMENT DECLARATIONS
   339                                  
   340                                  ; The following are all of the segments used.  They are declared in the order
   341                                  ; that they should be placed in the executable
   342                                  
   343                                  ;
   344                                  ; segment ordering for MSDOS
   345                                  ;
   346                                  
   347                                  ;START           SEGMENT BYTE PUBLIC 'START'
   348                                  ;START           ENDS
   349                                  
   350                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   351                                  ;CONSTANTS       ENDS
   352                                  
   353                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   354                                  ;DATA            ENDS
   355                                  
   356                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   357                                  ;CODE            ENDS
   358                                  
   359                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   360                                  ;LAST            ENDS
   361                                  
   362                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   363                                  
   364                                  ; The following segment is defined such that the data/const classes appear
   365                                  ; before the code class for ROMification
   366                                  
   367                                  ;START		SEGMENT BYTE PUBLIC 'START'
   368                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   369                                  ;		JMP     DOSINIT
   370                                  ;START		ENDS
   371                                  
   372                                  ;============================================================================
   373                                  ; BPB.INC, MSDOS 6.0, 1991
   374                                  ;============================================================================
   375                                  ; 09/07/2018 - Retro DOS v3.0
   376                                  
   377                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   378                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   379                                  ;									   ;
   380                                  
   381                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   382                                  ;
   383                                  ;	The BPB contains information about the disk structure. It dates
   384                                  ;	back to the earliest FAT systems and so FAT information is
   385                                  ;	intermingled with physical driver information.
   386                                  ;
   387                                  ;	A boot sector contains a BPB for its device; for other disks
   388                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   389                                  ;	information in the DPB.
   390                                  ;
   391                                  ;	The BDS structure contains a BPB within it. 
   392                                  
   393                                  struc A_BPB
   394 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   395 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   396 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   397 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   398 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   399 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   400 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   401 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   402 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   403 0000000F ????                    .BPB_HEADS:		resw	1
   404 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   405 00000013 ????                    			resw	1
   406 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   407 00000017 ????                    			resw	1
   408 00000019 ????????????            			resb	6	; NOTE:  many times these
   409                                  ;					; 	 6 bytes are omitted
   410                                  ;					;	 when BPB manipulations
   411                                  ;					;	 are performed!
   412                                  .size:
   413                                  endstruc
   414                                  
   415                                  ;                                                                          ;
   416                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   417                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   418                                  
   419                                  ;============================================================================
   420                                  ; BUFFER.INC, MSDOS 6.0, 1991
   421                                  ;============================================================================
   422                                  ; 04/05/2019 - Retro DOS v4.0
   423                                  
   424                                  ; <Disk I/O Buffer Header>
   425                                  
   426                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   427                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   428                                  ;									   ;
   429                                  
   430                                  ; Field definition for I/O buffer information
   431                                  
   432                                  struc BUFFINFO
   433 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   434 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   435 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   436                                  				; SFT table index (bit 7 = 1)
   437                                  				; = FFH if buffer free
   438 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   439                                  				;	= 0 if Local device buffer
   440                                  				; Bit 6 = 1 if buffer dirty
   441                                  				; Bit 5 = Reserved
   442                                  				; Bit 4 = Search bit (bit 7 = 1)
   443                                  				; Bit 3 = 1 if buffer is DATA
   444                                  				; Bit 2 = 1 if buffer is DIR
   445                                  				; Bit 1 = 1 if buffer is FAT
   446                                  				; Bit 0 = Reserved
   447 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   448                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   449 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   450 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   451 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   452 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   453 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   454                                  .size:	; 20 bytes
   455                                  endstruc
   456                                  
   457                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   458                                  				;For buf_flags bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID. Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ;============================================================================
   489                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   490                                  ;============================================================================
   491                                  ; 04/05/2019 - Retro DOS v4.0
   492                                  
   493                                  ; <Control character definitions>
   494                                  
   495                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   496                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   497                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   498                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   499                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   500                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   501                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   502                                  c_HT	    EQU     09h 	; ^I ASCII tab
   503                                  
   504                                  ; <User stack inside of system call>
   505                                  ; Location of user registers relative user stack pointer
   506                                  
   507                                  struc	user_env   ; user_environ
   508 00000000 ????                    .user_AX: resw 1
   509 00000002 ????                    .user_BX: resw 1
   510 00000004 ????                    .user_CX: resw 1
   511 00000006 ????                    .user_DX: resw 1
   512 00000008 ????                    .user_SI: resw 1
   513 0000000A ????                    .user_DI: resw 1
   514 0000000C ????                    .user_BP: resw 1
   515 0000000E ????                    .user_DS: resw 1
   516 00000010 ????                    .user_ES: resw 1
   517 00000012 ????                    .user_IP: resw 1
   518 00000014 ????                    .user_CS: resw 1
   519 00000016 ????                    .user_F:  resw 1
   520                                  .size:
   521                                  endstruc
   522                                  
   523                                  ; ---- <Disk map> ----
   524                                  
   525                                  ;	MSDOS partitions the disk into 4 sections:
   526                                  ;
   527                                  ;  phys sector 0:   +-------------------+
   528                                  ;	|	    | boot/reserved	|
   529                                  ;	|	    +-------------------+
   530                                  ;	|	    |  File allocation	|
   531                                  ;	v	    |	   table(s)	|
   532                                  ;		    |  (multiple copies |
   533                                  ;		    |	  are kept)	|
   534                                  ;		    +-------------------+
   535                                  ;		    |	  Directory	|
   536                                  ;		    +-------------------+
   537                                  ;		    |	  File space	|
   538                                  ;		    +-------------------+
   539                                  ;		    |	Unaddressable	|
   540                                  ;		    |  (to end of disk) |
   541                                  ;		    +-------------------+
   542                                  ;
   543                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   544                                  ; adjusted to maximize the file space addressable.
   545                                  
   546                                  ; <File allocation Table information>
   547                                  
   548                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   549                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   550                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   551                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   552                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   553                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   554                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   555                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   556                                  ; The first available allocation unit is assigned entry number two, and even
   557                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   558                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   559                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   560                                  ; the next cluster in the file.
   561                                  ;
   562                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   563                                  ; do because these clusters show as allocated, but are not part of any
   564                                  ; allocation chain and thus will never be allocated to a file.	A particular
   565                                  ; number is selected so that disk checking programs know what to do (ie.  a
   566                                  ; cluster with entry FF7H which is not in a chain is not an error).
   567                                  
   568                                  ;**	Character Type Flags
   569                                  ;
   570                                  ;	These flags are used in a lookup table indexed by the character code.
   571                                  ;	They're used to quickly classify characters when parsing paths.
   572                                  ;	I think that these are only used to parse FCBs - jgl
   573                                  
   574                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   575                                  FDELIM	equ 2		; is a delimiter
   576                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   577                                  FFCB	equ 8		; is valid in an FCB
   578                                  
   579                                  ;** Bit definitions for DOS_FLAG
   580                                  ;
   581                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   582                                  ;	  $open to indicate to the redirector that this open is being made
   583                                  ;	  by an exec call.
   584                                  ;
   585                                  ; Bit 2
   586                                  ;
   587                                  ; M003, M027:
   588                                  ;
   589                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   590                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   591                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   592                                  ; user program in the case of an Exec call. The next call to DOS will turn
   593                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   594                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   595                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   596                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   597                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   598                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   599                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   600                                  ; Bit 2 will be unconditionally cleared here.
   601                                  ;
   602                                  ; M009, M027:
   603                                  ;
   604                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   605                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   606                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   607                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   608                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   609                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   610                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   611                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   612                                  ; Bit 2 will be unconditionally cleared here.
   613                                  
   614                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   615                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   616                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   617                                  
   618                                  ;============================================================================
   619                                  ; VECTOR.INC, MSDOS 6.0, 1991
   620                                  ;============================================================================
   621                                  ; 04/05/2019 - Retro DOS v4.0
   622                                  
   623                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   624                                  
   625                                  ; <interrupt definitions>
   626                                  
   627                                  INTTAB          EQU     20H
   628                                  INTBASE         EQU     4 * INTTAB
   629                                  ENTRYPOINT      EQU     INTBASE+40H
   630                                  
   631                                  ;	IF      ALTVECT
   632                                  ;ALTTAB  EQU     0F0H
   633                                  ;ALTBASE EQU     4 * ALTTAB
   634                                  ;	ENDIF
   635                                  
   636                                  ;
   637                                  ; interrupt assignments
   638                                  ;
   639                                  ;	IF	NOT ALTVECT
   640                                  int_abort	    EQU     INTTAB	; abort process
   641                                  int_command	    EQU     int_abort+1 ; call MSDOS
   642                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   643                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   644                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   645                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   646                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   647                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   648                                  					; resident
   649                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   650                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   651                                  ;									   ;
   652                                  int_spooler	    EQU     int_abort+8 ; spooler call
   653                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   654                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   655                                  ;									   ;
   656                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   657                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   658                                  ;	ELSE
   659                                  ;int_abort	    EQU     INTTAB	; abort process
   660                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   661                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   662                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   663                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   664                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   665                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   666                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   667                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   668                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   669                                  ;									   ;
   670                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   671                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   672                                  ;									   ;
   673                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	ENDIF
   676                                  
   677                                  addr_int_abort		EQU    4 * int_abort
   678                                  addr_int_command	EQU    4 * int_command
   679                                  addr_int_terminate	EQU    4 * int_terminate
   680                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   681                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   682                                  addr_int_disk_read	EQU    4 * int_disk_read
   683                                  addr_int_disk_write	EQU    4 * int_disk_write
   684                                  addr_int_keep_process	EQU    4 * int_keep_process
   685                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   686                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   687                                  ;									   ;
   688                                  addr_int_spooler	EQU    4 * int_spooler
   689                                  addr_int_fastcon	EQU    4 * int_fastcon
   690                                  addr_int_ibm		EQU    4 * int_IBM
   691                                  ;									   ;
   692                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   693                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   694                                  
   695                                  ;============================================================================
   696                                  ; DIRENT.INC, MSDOS 6.0, 1991
   697                                  ;============================================================================
   698                                  ; 04/05/2019 - Retro DOS v4.0
   699                                  
   700                                  ; BREAK <Directory entry>
   701                                  
   702                                  ;
   703                                  ;       +---------------------------+
   704                                  ;       |  (12 BYTE) filename/ext   |       0       0
   705                                  ;       +---------------------------+
   706                                  ;       |     (BYTE) attributes     |       11      B
   707                                  ;       +---------------------------+
   708                                  ;       |    (10 BYTE) reserved     |       12      C
   709                                  ;       +---------------------------+
   710                                  ;       | (WORD) time of last write |       22      16
   711                                  ;       +---------------------------+
   712                                  ;       | (WORD) date of last write |       24      18
   713                                  ;       +---------------------------+
   714                                  ;       |   (WORD) First cluster    |       26      1A
   715                                  ;       +---------------------------+
   716                                  ;       |     (DWORD) file size     |       28      1C
   717                                  ;       +---------------------------+
   718                                  ;
   719                                  ;   First byte of filename  = E5 -> free directory entry
   720                                  ;                           = 00 -> end of allocated directory
   721                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   722                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   723                                  ;
   724                                  struc dir_entry
   725 00000000 <res Bh>                .dir_name:	resb 11			; file name
   726 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   727 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   728 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   729 00000010 ??                      .dir_attr2:	resb 1			; reserved
   730 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   731 00000016 ????                    .dir_time:	resw 1			; time of last write
   732 00000018 ????                    .dir_date:	resw 1			; date of last write
   733 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   734 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   735 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   736                                  .size:
   737                                  endstruc
   738                                  
   739                                  attr_read_only      EQU      1h
   740                                  attr_hidden         EQU      2h
   741                                  attr_system         EQU      4h
   742                                  attr_volume_id      EQU      8h
   743                                  attr_directory      EQU     10h
   744                                  attr_archive        EQU     20h
   745                                  attr_device	    EQU     40h	; This is a VERY special bit.
   746                                  				;   NO directory entry on a disk EVER
   747                                  				;   has this bit set. It is set non-zero
   748                                  				;   when a device is found by GETPATH
   749                                  
   750                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   751                                                                          ; OR of hard attributes for FINDENTRY
   752                                  
   753                                  attr_ignore         EQU     attr_read_only+attr_archive
   754                                                                          ; ignore this(ese) attribute(s)
   755                                                                          ; during search first/next
   756                                  
   757                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   758                                                                          ; changeable via CHMOD
   759                                  
   760                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   761                                  
   762                                  ;============================================================================
   763                                  ; DPB.INC, MSDOS 6.0, 1991
   764                                  ;============================================================================
   765                                  ; 24/04/2019 - Retro DOS v4.0
   766                                  
   767                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   768                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   769                                  
   770                                  ; ---------------------------------------------------------------------------
   771                                  ;**	DPB - Drive Parameter Block
   772                                  ;
   773                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   774                                  ;	possibly inaccurate deductions from code study... - jgl
   775                                  ;
   776                                  ;	The DPB is DOS's main structure for describing block devices.
   777                                  ;	It contains info about the "Drive" intermingled with info about
   778                                  ;	the FAT file system which is presumably on the drive.  I don't know
   779                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   780                                  ;
   781                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   782                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   783                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   784                                  ; ---------------------------------------------------------------------------
   785                                  
   786                                  struc	DPB
   787 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   788 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   789 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   790 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   791 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   792 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   793 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   794 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   795 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   796 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   797                                  ; MSDOS 3.3
   798                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   799                                  ; MSDOS 6.0
   800 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   801 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   802 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   803 00000017 ??                      .MEDIA:		resb 1		; Media byte
   804 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   805                                  				; check the first time this DPB is used
   806 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   807 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   808 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   809                                  .size:
   810                                  endstruc
   811                                  
   812                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   813                                  
   814                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   815                                  
   816                                  ;                                                                          ;
   817                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   818                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   819                                  
   820                                  ;============================================================================
   821                                  ; SF.INC, MSDOS 6.0, 1991
   822                                  ;============================================================================
   823                                  ; 25/04/2019 - Retro DOS v4.0
   824                                  ; 07/07/2018 - Retro DOS v3.0
   825                                  
   826                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   827                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   828                                  ;                                                                          ;
   829                                  
   830                                  ; ---------------------------------------------------------------------------
   831                                  ;**	SF.INC - System File Table
   832                                  ;
   833                                  ;   AN000   version 4.00   Jan. 1988
   834                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   835                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   836                                  ; ---------------------------------------------------------------------------
   837                                  ;**	System File Table SuperStructure
   838                                  ;
   839                                  ;	The system file table entries are allocated in contiguous groups.
   840                                  ;	There may be more than one such groups; the SF "superstructure"
   841                                  ;	tracks the groups.
   842                                  ; ---------------------------------------------------------------------------
   843                                  
   844                                  struc	SFT
   845 00000000 ????????                .SFLink:	resd 1
   846 00000004 ????                    .SFCount:	resw 1		; number of entries
   847 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   848                                  .size:
   849                                  endstruc
   850                                  
   851                                  ; ---------------------------------------------------------------------------
   852                                  ;**	System file table entry
   853                                  ;
   854                                  ;	These are the structures which are at SFTABLE in the SF structure.
   855                                  ; ---------------------------------------------------------------------------
   856                                  
   857                                  ; 25/04/2019 - Retro DOS v4.0
   858                                  
   859                                  struc SF_ENTRY
   860 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   861                                  				;   if FCB then ref count
   862 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   863 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   864 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   865                                  				; Bit 15 = 1 if remote file
   866                                  				;	 = 0 if local file or device
   867                                  				; Bit 14 = 1 if date/time is not to be
   868                                  				;   set from clock at CLOSE.  Set by
   869                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   870                                  				;   other reseters of the dirty bit
   871                                  				;   (WRITE)
   872                                  				; Bit 13 = Pipe bit (reserved)
   873                                  				;
   874                                  				; Bits 0-7 (old FCB_devid bits)
   875                                  				; If remote file or local file, bit
   876                                  				; 6=0 if dirty Device ID number, bits
   877                                  				; 0-5 if local file.
   878                                  				; bit 7=0 for local file, bit 7
   879                                  				;      =1 for local I/O device
   880                                  				; If local I/O device, bit 6=0 if EOF (input)
   881                                  				;		Bit 5=1 if Raw mode
   882                                  				;		Bit 0=1 if console input device
   883                                  				;		Bit 1=1 if console output device
   884                                  				;		Bit 2=1 if null device
   885                                  				;		Bit 3=1 if clock device
   886 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   887                                  				; to device header if local device,
   888                                  				; points to net device header if
   889                                  				; remote
   890 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   891 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   892 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   893 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   894 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   895                                  
   896                                  ; Starting here, the next 7 bytes may be used by the file system to store
   897                                  ; an ID
   898                                  
   899                                  ; 09/07/2018 - Retro DOS v3.0
   900                                  
   901                                  ; MSDOS 3.3 SF.INC, 1987
   902                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   903                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   904                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   905                                  ;				; for this file
   906                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   907                                  
   908                                  ; MSDOS 6.0, SF.INC, 1991
   909 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   910 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   911                                  				; for this file
   912 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   913                                  
   914                                  ; End of 7 bytes of file-system specific info.
   915                                  
   916 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   917                                  				; directory entry.  This is used by
   918                                  				; close to detect file deleted and
   919                                  				; disk changed errors.
   920                                  ; SHARING INFO
   921 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   922 0000002F ????                    .sf_UID:	resw	1
   923 00000031 ????                    .sf_PID:	resw	1
   924 00000033 ????                    .sf_MFT:	resw	1
   925                                  
   926                                  ; MSDOS 6.0, SF.INC, 1991
   927 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   928 00000037 ????????                .sf_IFS_HDR:	resd	1
   929                                  
   930                                  .size:
   931                                  endstruc
   932                                  
   933                                  ; 20/07/2018
   934                                  ; MSDOS 3.3, SF.INC, 1987
   935                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   936                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   937                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   938                                  ; MSDOS 6.0, SF.INC, 1991
   939                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   940                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   941                                  
   942                                  ; 19/07/2018
   943                                  ; MSDOS 3.3, SF.INC, 1987
   944                                  
   945                                  sf_default_number  EQU	5
   946                                  
   947                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   948                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   949                                  ; by placing a -1 in the ref_count field.
   950                                  
   951                                  sf_busy EQU -1
   952                                  
   953                                  ; mode mask for FCB detection
   954                                  sf_isFCB		EQU	1000000000000000B
   955                                  
   956                                  ; Flag word masks
   957                                  sf_isnet		EQU	1000000000000000B
   958                                  sf_close_nodate 	EQU	0100000000000000B
   959                                  sf_pipe 		EQU	0010000000000000B
   960                                  sf_no_inherit		EQU	0001000000000000B
   961                                  sf_net_spool		EQU	0000100000000000B
   962                                  
   963                                  ; 25/04/2019
   964                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   965                                  
   966                                  ; ---------------------------------------------------------------------------
   967                                  ; Local file/device flag masks
   968                                  ; ---------------------------------------------------------------------------
   969                                  
   970                                  devid_file_clean        EQU     40h     ; true if file and not written
   971                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   972                                  
   973                                  devid_device            EQU     80h     ; true if a device
   974                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   975                                  devid_device_raw        EQU     20h     ; true if in raw mode
   976                                  devid_device_special    EQU     10h     ; true if special device
   977                                  devid_device_clock      EQU     08h     ; true if clock device
   978                                  devid_device_null       EQU     04h     ; true if null device
   979                                  devid_device_con_out    EQU     02h     ; true if console output
   980                                  devid_device_con_in     EQU     01h     ; true if consle input
   981                                  
   982                                  ; ---------------------------------------------------------------------------
   983                                  ; structure of devid field as returned by IOCTL is:
   984                                  ;
   985                                  ;       BIT     7   6   5   4   3   2   1   0
   986                                  ;             |---|---|---|---|---|---|---|---|
   987                                  ;             | I | E | R | S | I | I | I | I |
   988                                  ;             | S | O | A | P | S | S | S | S |
   989                                  ;             | D | F | W | E | C | N | C | C |
   990                                  ;             | E |   |   | C | L | U | O | I |
   991                                  ;             | V |   |   | L | K | L | T | N |
   992                                  ;             |---|---|---|---|---|---|---|---|
   993                                  ;       ISDEV = 1 if this channel is a device
   994                                  ;             = 0 if this channel is a disk file
   995                                  ;
   996                                  ;       If ISDEV = 1
   997                                  ;
   998                                  ;             EOF = 0 if End Of File on input
   999                                  ;             RAW = 1 if this device is in Raw mode
  1000                                  ;                 = 0 if this device is cooked
  1001                                  ;             ISCLK = 1 if this device is the clock device
  1002                                  ;             ISNUL = 1 if this device is the null device
  1003                                  ;             ISCOT = 1 if this device is the console output
  1004                                  ;             ISCIN = 1 if this device is the console input
  1005                                  ;
  1006                                  ;       If ISDEV = 0
  1007                                  ;             EOF = 0 if channel has been written
  1008                                  ;             Bits 0-5  are  the  block  device  number  for
  1009                                  ;                 the channel (0 = A, 1 = B, ...)
  1010                                  ; ---------------------------------------------------------------------------
  1011                                  
  1012                                  devid_ISDEV     EQU     80h
  1013                                  devid_EOF       EQU     40h
  1014                                  devid_RAW       EQU     20h
  1015                                  devid_SPECIAL   EQU     10H
  1016                                  devid_ISCLK     EQU     08h
  1017                                  devid_ISNUL     EQU     04h
  1018                                  devid_ISCOT     EQU     02h
  1019                                  devid_ISCIN     EQU     01h
  1020                                  
  1021                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1022                                  
  1023                                  ;============================================================================
  1024                                  ; PDB.INC, MSDOS 6.0, 1991
  1025                                  ;============================================================================
  1026                                  ; 04/05/2019 - Retro DOS v4.0
  1027                                  ; 08/07/2018 - Retro DOS v3.0
  1028                                  
  1029                                  ; ---------------------------------------------------------------------------
  1030                                  ; BREAK <Process data block>
  1031                                  ; ---------------------------------------------------------------------------
  1032                                  ;**	Process data block (otherwise known as program header)
  1033                                  ;
  1034                                  
  1035                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1036                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1037                                  ;	for use.
  1038                                  ; ---------------------------------------------------------------------------
  1039                                  
  1040                                  FILPERPROC	EQU     20
  1041                                  
  1042                                  struc PDB	; Process_data_block
  1043 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1044 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1045 00000004 ??                                      resb 1
  1046 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1047 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1048 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1049 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1050 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1051 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1052 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1053 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1054 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1055 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1056 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1057 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1058 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1059 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1060 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1061 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1062 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1063 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1064                                  				;  an extended FCB
  1065                                  ;endstruc 	; MSDOS 3.3
  1066                                  	  	; MSDOS 6.0
  1067 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1068 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1069 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1070 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1071                                  endstruc
  1072                                  
  1073                                  ;============================================================================
  1074                                  ; EXE.INC, MSDOS 6.0, 1991
  1075                                  ;============================================================================
  1076                                  ; 04/05/2019 - Retro DOS v4.0
  1077                                  
  1078                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1079                                  ; ---------------------------------------------------------------------------
  1080                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1081                                  ; whether or not the program is executed or whether or not a program header
  1082                                  ; gets created.
  1083                                  
  1084                                  exec_func_no_execute EQU 1	; no execute bit
  1085                                  exec_func_overlay    EQU 2	; overlay bit
  1086                                  
  1087                                  struc EXEC0
  1088 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1089 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1090 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1091 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1092                                  .size:
  1093                                  endstruc
  1094                                  
  1095                                  struc EXEC1
  1096 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1097 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1098 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1099 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1100 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1101 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1102 00000012 ????                    .IP:		resw 1		; entry point IP
  1103 00000014 ????                    .CS:		resw 1		; entry point CS
  1104                                  .size:
  1105                                  endstruc
  1106                                  
  1107                                  struc EXEC3
  1108 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1109 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1110                                  endstruc
  1111                                  
  1112                                  ;**	Exit codes (in upper byte) for terminating programs
  1113                                  
  1114                                  EXIT_TERMINATE		EQU	0
  1115                                  EXIT_ABORT		EQU	0
  1116                                  EXIT_CTRL_C		EQU	1
  1117                                  EXIT_HARD_ERROR 	EQU	2
  1118                                  EXIT_KEEP_PROCESS	EQU	3
  1119                                  
  1120                                  ;**	EXE File Header Description
  1121                                  
  1122                                  struc EXE
  1123 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1124 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1125 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1126 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1127 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1128 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1129 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1130 0000000E ????                    .SS:          resw 1		; stack of image
  1131 00000010 ????                    .SP:          resw 1		; SP of image
  1132 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1133 00000014 ????                    .IP:          resw 1		; IP of entry
  1134 00000016 ????                    .CS:          resw 1		; CS of entry
  1135 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1136 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1137 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1138                                  .size:
  1139                                  endstruc
  1140                                  
  1141                                  exe_valid_signature     EQU 5A4Dh
  1142                                  exe_valid_old_signature EQU 4D5Ah
  1143                                  
  1144                                  ;**	EXE file symbol info definitions
  1145                                  
  1146                                  struc symbol_entry
  1147 00000000 ????????                .value:	resd 1
  1148 00000004 ????                    .type:	resw 1
  1149 00000006 ??                      .len:	resb 1
  1150 00000007 <res FFh>               .name:	resb 255
  1151                                  endstruc
  1152                                  
  1153                                  ;**	Data structure passed for ExecReady call
  1154                                  
  1155                                  struc ERStruc
  1156 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1157 00000002 ????                     .ER_Flags:	resw	1
  1158 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1159 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1160 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1161 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1162                                   .size:
  1163                                  endstruc
  1164                                  
  1165                                  ;** bit fields in ER_Flags
  1166                                  
  1167                                  ER_EXE		equ	0001h
  1168                                  ER_OVERLAY	equ	0002h
  1169                                  
  1170                                  
  1171                                  ;============================================================================
  1172                                  ; ARENA.INC, MSDOS 6.0, 1991
  1173                                  ;============================================================================
  1174                                  ; 24/04/2019 - Retro DOS v4.0
  1175                                  ; 04/08/2018 - Retro DOS v3.0
  1176                                  
  1177                                  ;BREAK <Memory arena structure>
  1178                                  
  1179                                  ;**	Arena Header
  1180                                  
  1181                                  struc ARENA
  1182 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1183 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1184 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1185 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1186 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1187                                  .headersize:			
  1188                                  endstruc
  1189                                  
  1190                                  ; 20/05/2019 - Retro DOS v4.0
  1191                                  ARENAHEADERSIZE equ ARENA.headersize 
  1192                                  
  1193                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1194                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1195                                  ; Change them and change ALLOC.ASM.
  1196                                  
  1197                                  arena_owner_system  EQU 0               ; free block indication
  1198                                  
  1199                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1200                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1201                                  
  1202                                  FIRST_FIT	EQU	00000000B
  1203                                  BEST_FIT	EQU	00000001B
  1204                                  LAST_FIT	EQU	00000010B
  1205                                  
  1206                                  ; MSDOS 6.0
  1207                                  LOW_FIRST	EQU	00000000B	; M001
  1208                                  HIGH_FIRST	EQU	10000000B	; M001
  1209                                  HIGH_ONLY	EQU	01000000B	; M001
  1210                                  
  1211                                  LINKSTATE	EQU	00000001B	; M002
  1212                                  
  1213                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1214                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1215                                  
  1216                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1217                                  						; M026: used to mask of bits
  1218                                  						; M026: 6 & 7 of AllocMethod
  1219                                  
  1220                                  ;============================================================================
  1221                                  ; MI.INC, MSDOS 6.0, 1991
  1222                                  ;============================================================================
  1223                                  ; 07/07/2018 - Retro DOS v3.0
  1224                                  
  1225                                  ;BREAK <Machine instruction, flag definitions and character types>
  1226                                  
  1227                                  mi_INT		EQU	0CDh
  1228                                  mi_long_jmp	EQU	0EAh
  1229                                  mi_Long_CALL	EQU	09Ah
  1230                                  mi_Long_RET	EQU	0CBh
  1231                                  mi_Near_RET	EQU	0C3h
  1232                                  
  1233                                  ;			xxxxoditszxaxpxc
  1234                                  f_Overflow	EQU	0000100000000000B
  1235                                  f_Direction	EQU	0000010000000000B
  1236                                  f_Interrupt	EQU	0000001000000000B
  1237                                  f_Trace 	EQU	0000000100000000B
  1238                                  f_Sign		EQU	0000000010000000B
  1239                                  f_Zero		EQU	0000000001000000B
  1240                                  f_Aux		EQU	0000000000010000B
  1241                                  f_Parity	EQU	0000000000000100B
  1242                                  f_Carry 	EQU	0000000000000001B
  1243                                  
  1244                                  ;============================================================================
  1245                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1246                                  ;============================================================================
  1247                                  ; 13/07/2018 - Retro DOS v3.0
  1248                                  ; 29/04/2019 - Retro DOS v4.0
  1249                                  
  1250                                  ;**	Standard I/O file handles
  1251                                  
  1252                                  stdin       EQU     0
  1253                                  stdout      EQU     1
  1254                                  stderr      EQU     2
  1255                                  stdaux      EQU     3
  1256                                  stdprn      EQU     4
  1257                                  
  1258                                  ;**	File Modes
  1259                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1260                                  
  1261                                  open_for_read   EQU 0
  1262                                  open_for_write  EQU 1
  1263                                  open_for_both   EQU 2
  1264                                  
  1265                                  ; MSDOS 6.0
  1266                                  OPEN_FOR_BOTH	equ 2
  1267                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1268                                  				; made from exec
  1269                                  
  1270                                  access_mask	EQU 0Fh ; 09/08/2018
  1271                                  
  1272                                  SHARING_MASK	    equ 0F0h
  1273                                  SHARING_COMPAT	    equ 000h
  1274                                  SHARING_DENY_BOTH   equ 010h
  1275                                  SHARING_DENY_WRITE  equ 020h
  1276                                  SHARING_DENY_READ   equ 030h
  1277                                  SHARING_DENY_NONE   equ 040h
  1278                                  SHARING_NET_FCB     equ 070h
  1279                                  SHARING_NO_INHERIT  equ 080h
  1280                                  
  1281                                  ; 29/04/2019
  1282                                  
  1283                                  ;**	Extended Open Definitions
  1284                                  
  1285                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1286                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1287                                  NOT_EXISTS_MASK    equ 0F0h
  1288                                  
  1289                                  ;*	SF_MODE values
  1290                                  
  1291                                  AUTO_COMMIT_WRITE	equ 4000h
  1292                                  INT_24_ERROR		equ 2000h
  1293                                  
  1294                                  ;*	Flags in EXTOPEN_ON
  1295                                  
  1296                                  EXT_OPEN_ON		equ 01h
  1297                                  EXT_FILE_NOT_EXISTS	equ 04h
  1298                                  EXT_OPEN_I24_OFF	equ 02h
  1299                                  
  1300                                  ;*	Flags in EXTOPEN_FLAG
  1301                                  
  1302                                  ACTION_OPENED		equ 01h
  1303                                  ACTION_CREATED_OPENED	equ 02h
  1304                                  ACTION_REPLACED_OPENED	equ 03h
  1305                                  EXT_EXISTS_OPEN 	equ 01h
  1306                                  EXT_EXISTS_FAIL 	equ 00h
  1307                                  EXT_NEXISTS_CREATE	equ 10h
  1308                                  
  1309                                  ;**	Extended Open Structure
  1310                                  
  1311                                  struc EXT_OPEN_PARM
  1312 00000000 ????????                .SET_LIST:	resd 1
  1313 00000004 ????                    .NUM_OF_PARM:	resw 1
  1314                                  endstruc
  1315                                  
  1316                                  ;============================================================================
  1317                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1318                                  ;============================================================================
  1319                                  ; 29/04/2019 - Retro DOS v4.0
  1320                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1321                                  
  1322                                  ; <system call definitions>
  1323                                  
  1324                                  ABORT                           EQU 0   ;  0      0
  1325                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1326                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1327                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1328                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1329                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1330                                  RAW_CON_IO                      EQU 6   ;  6      6
  1331                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1332                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1333                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1334                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1335                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1336                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1337                                  DISK_RESET                      EQU 13  ; 13      D
  1338                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1339                                  FCB_OPEN                        EQU 15  ; 15      F
  1340                                  FCB_CLOSE                       EQU 16  ; 16     10
  1341                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1342                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1343                                  FCB_DELETE                      EQU 19  ; 19     13
  1344                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1345                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1346                                  FCB_CREATE                      EQU 22  ; 22     16
  1347                                  FCB_RENAME                      EQU 23  ; 23     17
  1348                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1349                                  SET_DMA                         EQU 26  ; 26     1A
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1352                                  ;                                                                          ;
  1353                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1354                                  ;                                                                          ;
  1355                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1356                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1357                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1358                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1359                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1360                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1361                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1362                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1363                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1364                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1365                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1366                                  GET_DATE                        EQU 42  ; 42     2A
  1367                                  SET_DATE                        EQU 43  ; 43     2B
  1368                                  GET_TIME                        EQU 44  ; 44     2C
  1369                                  SET_TIME                        EQU 45  ; 45     2D
  1370                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1371                                  ; Extended functionality group
  1372                                  GET_DMA                         EQU 47  ; 47     2F
  1373                                  GET_VERSION                     EQU 48  ; 48     30
  1374                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1375                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1376                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1377                                  ;                                                                          ;
  1378                                  GET_DPB                         EQU 50  ; 50     32
  1379                                  ;                                                                          ;
  1380                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1381                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1382                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1383                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1384                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1385                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1386                                  CHAR_OPER                       EQU 55  ; 55     37
  1387                                  INTERNATIONAL                   EQU 56  ; 56     38
  1388                                  ; XENIX CALLS
  1389                                  ;   Directory Group
  1390                                  MKDIR                           EQU 57  ; 57     39
  1391                                  RMDIR                           EQU 58  ; 58     3A
  1392                                  CHDIR                           EQU 59  ; 59     3B
  1393                                  ;   File Group
  1394                                  CREAT                           EQU 60  ; 60     3C
  1395                                  OPEN                            EQU 61  ; 61     3D
  1396                                  CLOSE                           EQU 62  ; 62     3E
  1397                                  READ                            EQU 63  ; 63     3F
  1398                                  WRITE                           EQU 64  ; 64     40
  1399                                  UNLINK                          EQU 65  ; 65     41
  1400                                  LSEEK                           EQU 66  ; 66     42
  1401                                  CHMOD                           EQU 67  ; 67     43
  1402                                  IOCTL                           EQU 68  ; 68     44
  1403                                  XDUP                            EQU 69  ; 69     45
  1404                                  XDUP2                           EQU 70  ; 70     46
  1405                                  CURRENT_DIR                     EQU 71  ; 71     47
  1406                                  ;    Memory Group
  1407                                  ALLOC                           EQU 72  ; 72     48
  1408                                  DEALLOC                         EQU 73  ; 73     49
  1409                                  SETBLOCK                        EQU 74  ; 74     4A
  1410                                  ;    Process Group
  1411                                  EXEC                            EQU 75  ; 75     4B
  1412                                  EXIT                            EQU 76  ; 76     4C
  1413                                  _WAIT				EQU 77  ; 77     4D
  1414                                  FIND_FIRST                      EQU 78  ; 78     4E
  1415                                  ;   Special Group
  1416                                  FIND_NEXT                       EQU 79  ; 79     4F
  1417                                  ; SPECIAL SYSTEM GROUP
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1422                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1423                                  GET_IN_VARS                     EQU 82  ; 82     52
  1424                                  SETDPB                          EQU 83  ; 83     53
  1425                                  ;                                                                          ;
  1426                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1427                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1428                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1431                                  ;                                                                          ;
  1432                                  DUP_PDB                         EQU 85  ; 85     55
  1433                                  ;                                                                          ;
  1434                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1435                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1436                                  RENAME                          EQU 86  ; 86     56
  1437                                  FILE_TIMES                      EQU 87  ; 87     57
  1438                                  ALLOCOPER			EQU 88	; 88	 58
  1439                                  ; Network extention system calls
  1440                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1441                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1442                                  CREATENEWFILE			EQU 91	; 91	 5B
  1443                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1444                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1445                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1446                                  ;									   ;
  1447                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1448                                  					;	    CloseByName, CloseUser,
  1449                                  					;	    CloseUserProcess,
  1450                                  					;	    GetOpenFileList
  1451                                  ;									   ;
  1452                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1453                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1454                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1455                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1456                                  XNAMETRANS			EQU 96	; 96	 60
  1457                                  PATHPARSE			EQU 97	; 97	 61
  1458                                  GETCURRENTPSP			EQU 98	; 98	 62
  1459                                  HONGEUL 			EQU 99	; 99	 63
  1460                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1461                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1462                                  ;									   ;
  1463                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1464                                  ;									   ;
  1465                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1466                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1467                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1468                                  GETSETCDPG			EQU 102 ; 102	 66
  1469                                  EXTHANDLE			EQU 103 ; 103	 67
  1470                                  COMMIT				EQU 104 ; 104	 68
  1471                                  
  1472                                  ; 29/04/2019 - Retro DOS v4.0
  1473                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1474                                  
  1475                                  GetSetMediaID			EQU 105 ; 105	 69
  1476                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1477                                  ExtOpen 			EQU 108 ; 108	 6C
  1478                                  
  1479                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1480                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1481                                  ;                                                                          ;
  1482                                  ;ifdef ROMEXEC
  1483                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1484                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1485                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1486                                  ;endif
  1487                                  ;                                                                          ;
  1488                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1489                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1490                                  
  1491                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1492                                  ;OEM_C1				EQU 249 ; 249    F9
  1493                                  ;OEM_C2				EQU 250 ; 250    FA
  1494                                  ;OEM_C3				EQU 251 ; 251    FB
  1495                                  ;OEM_C4				EQU 252 ; 252    FC
  1496                                  ;OEM_C5				EQU 253 ; 253    FD
  1497                                  ;OEM_C6				EQU 254 ; 254    FE
  1498                                  ;OEM_C7				EQU 255 ; 255    FF
  1499                                  
  1500                                  ;============================================================================
  1501                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1502                                  ;============================================================================
  1503                                  ; 24/04/2019 - Retro DOS 4.0
  1504                                  
  1505                                  ;MAJOR_VERSION	EQU     6
  1506                                  ;;MINOR_VERSION	EQU	00
  1507                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1508                                  
  1509                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1510                                  ;MAJOR_VERSION	EQU     5
  1511                                  ;MINOR_VERSION	EQU     0
  1512                                  
  1513                                  ; 30/12/2022 - Retro DOS v4.2
  1514                                  MAJOR_VERSION	EQU     6
  1515                                  MINOR_VERSION	EQU     22
  1516                                  
  1517                                  ;============================================================================
  1518                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1519                                  ;============================================================================
  1520                                  ; 09/07/2018 - Retro DOS 3.0
  1521                                  
  1522                                  ; Current structure of the data returned by the international call
  1523                                  
  1524                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1525                                  .Date_tim_format:
  1526 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1527                                  .Currency_sym:
  1528 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1529                                  .Thous_sep:
  1530 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1531                                  .Decimal_sep:
  1532 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1533                                  .Date_sep:
  1534 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1535                                  .Time_sep:
  1536 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1537                                  .Bit_field:	
  1538 0000000F ??                      		RESB 1		; Bit values
  1539                                                                     ;   Bit 0 = 0 if currency symbol first
  1540                                                                     ;         = 1 if currency symbol last
  1541                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1542                                                                     ;         = 1 if space after currency symbol
  1543                                  .Currency_cents:
  1544 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1545                                  .Time_24:
  1546 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1547                                  .Map_call:
  1548 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1549 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1550                                  				;  in pieces.
  1551                                  .Data_sep:
  1552 00000016 ????                    		RESB	2	; Data list separator character
  1553                                  .size:		
  1554                                  endstruc
  1555                                  
  1556                                  ; Max size of the block returned by the INTERNATIONAL call
  1557                                  
  1558                                  internat_block_max	EQU	32
  1559                                  
  1560                                  ;============================================================================
  1561                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1562                                  ;============================================================================
  1563                                  ; 08/07/2018 - Retro DOS v3.0
  1564                                  
  1565                                  ;SysInitVars STRUC
  1566                                  struc SYSI
  1567 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1568 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1569 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1570 0000000C ????????                .CON:	    resd 1		; CON device
  1571 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1572 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1573 00000016 ????????                .CDS:	    resd 1		; CDS list
  1574 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1575 0000001E ????                    .Keep:	    resw 1		; keep count
  1576 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1577 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1578 00000022 ????????                .DEV:	    resd 1		; device list
  1579                                  ; 09/07/2018
  1580                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1581                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1582 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1583 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1584 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1585 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1586 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1587 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1588 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1589 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1590 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1591 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1592 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1593 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1594                                  endstruc
  1595                                  ;SysInitVars ENDS
  1596                                  
  1597                                  ;This is added for more information exchange between DOS, BIOS.
  1598                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1599                                  
  1600                                  ;SysInitVars_Ext struc
  1601                                  struc SYSI_EXT
  1602 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1603 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1604                                  endstruc
  1605                                  ;SysInitVars_Ext ends
  1606                                  
  1607                                  ;============================================================================
  1608                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1609                                  ;============================================================================
  1610                                  ; 09/07/2018 - Retro DOS v3.0
  1611                                  
  1612                                  ;*** J.K.
  1613                                  ;General Guide -
  1614                                  ;Category Code:
  1615                                  ; 0... .... DOS Defined
  1616                                  ; 1... .... User defined
  1617                                  ; .xxx xxxx Code
  1618                                  
  1619                                  ;Function Code:
  1620                                  ; 0... .... Return error if unsupported
  1621                                  ; 1... .... Ignore if unsupported
  1622                                  ; .0.. .... Intercepted by DOS
  1623                                  ; .1.. .... Passed to driver
  1624                                  ; ..0. .... Sends data/commands to device
  1625                                  ; ..1. .... Quries data/info from device
  1626                                  ; ...x .... Subfunction
  1627                                  ;
  1628                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1629                                  ; function set.  It plays no critical role; some functions may contain both
  1630                                  ; command and query elements. The convention is that such commands are
  1631                                  ; defined as "sends data".
  1632                                  
  1633                                  ;*****************************;*
  1634                                  ; BLOCK DRIVERS 	      ;*
  1635                                  ;*****************************;*
  1636                                  
  1637                                  ; IOCTL SUB-FUNCTIONS
  1638                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1639                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1640                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1641                                  IOCTL_READ_HANDLE	EQU	2
  1642                                  IOCTL_WRITE_HANDLE	EQU	3
  1643                                  IOCTL_READ_DRIVE	EQU	4
  1644                                  IOCTL_WRITE_DRIVE	EQU	5
  1645                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1646                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1647                                  IOCTL_CHANGEABLE?	EQU	8
  1648                                  IOCTL_DeviceLocOrRem?	EQU	9
  1649                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1650                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1651                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1652                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1653                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1654                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1655                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1656                                  ; (MSDOS 6.0)
  1657                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1658                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1659                                  
  1660                                  ; GENERIC IOCTL CATEGORY CODES
  1661                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1662                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1663                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1664                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1665                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1666                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1667                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1668                                  
  1669                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1670                                  RAWIO			EQU	8
  1671                                  
  1672                                  ; RAWIO SUB-FUNCTIONS
  1673                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1674                                  GET_DEVICE_PARAMETERS	EQU	60H
  1675                                  SET_DEVICE_PARAMETERS	EQU	40H
  1676                                  READ_TRACK		EQU	61H
  1677                                  WRITE_TRACK		EQU	41H
  1678                                  VERIFY_TRACK		EQU	62H
  1679                                  FORMAT_TRACK		EQU	42H
  1680                                  ; (MSDOS 6.0)
  1681                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1682                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1683                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1684                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1685                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1686                                  
  1687                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1688                                  BUILD_DEVICE_BPB	EQU	000000001B
  1689                                  
  1690                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1691                                  INSTALL_FAKE_BPB	EQU	000000001B
  1692                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1693                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1694                                  
  1695                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1696                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1697                                  STATUS_FOR_FORMAT	EQU	000000001B
  1698                                  ; (MSDOS 6.0)
  1699                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1700                                  
  1701                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1702                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1703                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1704                                  
  1705                                  ; DEVICETYPE VALUES
  1706                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1707                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1708                                  DEV_5INCH		EQU	0
  1709                                  DEV_5INCH96TPI		EQU	1
  1710                                  DEV_3INCH720KB		EQU	2
  1711                                  DEV_8INCHSS		EQU	3
  1712                                  DEV_8INCHDS		EQU	4
  1713                                  DEV_HARDDISK		EQU	5
  1714                                  DEV_OTHER		EQU	7
  1715                                  ; (MSDOS 6.0)
  1716                                  ;DEV_3INCH1440KB	EQU	7
  1717                                  DEV_3INCH2880KB		EQU	9
  1718                                  ; Retro DOS v2.0 - 26/03/2018
  1719                                  ;;DEV_TAPE		EQU	6
  1720                                  ;;DEV_ERIMO		EQU	8
  1721                                  ;DEV_3INCH2880KB	EQU	9
  1722                                  DEV_3INCH1440KB		EQU	10
  1723                                  
  1724                                  ; (MSDOS 3.3)
  1725                                  ;MAX_DEV_TYPE		EQU	7
  1726                                  
  1727                                  ; (MSDOS 6.0)
  1728                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1729                                  					; CURRENTLY SUPPORT.
  1730                                  struc A_SECTORTABLE
  1731 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1732 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1733                                  .size:
  1734                                  endstruc
  1735                                  
  1736                                  ;============================================================================
  1737                                  ; DEVSYM.INC
  1738                                  ;============================================================================
  1739                                  ; 07/07/2018 - Retro DOS v3.0
  1740                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1741                                  
  1742                                  ;**	DevSym.inc - Device Symbols
  1743                                  
  1744                                  ; The device table list has the form:
  1745                                  struc	SYSDEV
  1746 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1747 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1748 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1749 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1750 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1751                                  .size:
  1752                                  endstruc
  1753                                  
  1754                                  ;
  1755                                  ; ATTRIBUTE BIT MASKS
  1756                                  ;
  1757                                  ; CHARACTER DEVICES:
  1758                                  ;
  1759                                  ; BIT 15 -> MUST BE 1
  1760                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1761                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1762                                  ;     12 -> UNUSED
  1763                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1764                                  ;     10 -> MUST BE 0
  1765                                  ;      9 -> MUST BE 0
  1766                                  ;      8 -> UNUSED
  1767                                  ;      7 -> UNUSED
  1768                                  ;      6 -> UNUSED
  1769                                  ;      5 -> UNUSED
  1770                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1771                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1772                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1773                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1774                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1775                                  ;
  1776                                  ; BLOCK DEVICES:
  1777                                  ;
  1778                                  ; BIT 15 -> MUST BE 0
  1779                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1780                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1781                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1782                                  ;	    THE SAME PLACE.
  1783                                  ;     12 -> UNUSED
  1784                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1785                                  ;     10 -> MUST BE 0
  1786                                  ;      9 -> MUST BE 0
  1787                                  ;      8 -> UNUSED
  1788                                  ;      7 -> UNUSED
  1789                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1790                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1791                                  ;      5 -> UNUSED
  1792                                  ;      4 -> UNUSED
  1793                                  ;      3 -> UNUSED
  1794                                  ;      2 -> UNUSED
  1795                                  ;      1 -> UNUSED
  1796                                  ;      0 -> UNUSED
  1797                                  ;
  1798                                  
  1799                                  ;Attribute bit masks
  1800                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1801                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1802                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1803                                  
  1804                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1805                                  
  1806                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1807                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1808                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1809                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1810                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1811                                  				;  ENTRY POINTS, 0 IF NOT
  1812                                  
  1813                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1814                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1815                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1816                                  				;  ITS CURRENT FORM.
  1817                                  
  1818                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1819                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1820                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1821                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1822                                  
  1823                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1824                                  
  1825                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1826                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1827                                  				;LOGICAL DRIVES, AND SUPPORTS
  1828                                  				;GENERIC IOCTL CALLS.
  1829                                  				;FOR CHARACTER DEVICES, THIS
  1830                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1831                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1832                                  
  1833                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1834                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1835                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1836                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1837                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1838                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1839                                  
  1840                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1841                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1842                                  
  1843                                  ;Static Reguest Header
  1844                                  struc	SRHEAD
  1845 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1846 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1847 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1848 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1849 00000005 ????????????????                	resb 8		;Reserved for queue links
  1850                                  .size:
  1851                                  endstruc
  1852                                  
  1853                                  ;Status word masks
  1854                                  STERR   EQU     8000H           ;Bit 15 - Error
  1855                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1856                                  STDON   EQU     0100H           ;Bit 8 - Done
  1857                                  STECODE EQU     00FFH           ;Error code
  1858                                  WRECODE EQU     0
  1859                                  
  1860                                  ;Function codes
  1861                                  DINITHL EQU     26              ;Size of init header
  1862                                  DMEDHL  EQU     15              ;Size of media check header
  1863                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1864                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1865                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1866                                  DSTATHL EQU     13              ;Size of status header
  1867                                  DFLSHL  EQU     15              ;Size of flush header
  1868                                  
  1869                                  DEVINIT EQU     0               ;Initialization
  1870                                  DEVMDCH EQU     1               ;Media check
  1871                                  DEVBPB  EQU     2               ;Get BPB
  1872                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1873                                  DEVRD   EQU     4               ;Read
  1874                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1875                                  DEVIST  EQU     6               ;Input status
  1876                                  DEVIFL  EQU     7               ;Input flush
  1877                                  DEVWRT  EQU     8               ;Write
  1878                                  DEVWRTV EQU     9               ;Write with verify
  1879                                  DEVOST  EQU     10              ;Output status
  1880                                  DEVOFL  EQU     11              ;Output flush
  1881                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1882                                  
  1883                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1884                                  DEVOPN	EQU	13		;DEVICE OPEN
  1885                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1886                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1887                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1888                                  ; 07/08/2018 - Retro DOS v3.0
  1889                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1890                                  GENIOCTL EQU	19
  1891                                  
  1892                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1893                                  ;		     20
  1894                                  ;		     21
  1895                                  ;		     22
  1896                                  
  1897                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1898                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1899                                  ; 18/05/2019 - Retro DOS v4.0
  1900                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1901                                  
  1902                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1903                                  
  1904                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1905                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1906                                  
  1907                                  ; ADDED FOR DOS 5.00
  1908                                  
  1909                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1910                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1911                                  
  1912                                  struc IOCTL_REQ
  1913 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1914                                  				; GENERIC IOCTL ADDITION.
  1915 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1916 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1917 0000000F ????                    .REG_SI:	resw 1
  1918 00000011 ????                    .REG_DI:	resw 1
  1919 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1920                                  .size: ; 07/08/2018
  1921                                  endstruc
  1922                                  
  1923                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1924                                  GEN_IOCTL_WRT_TRK EQU	40H
  1925                                  GEN_IOCTL_RD_TRK  EQU	60H
  1926                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1927                                  
  1928                                  ;; 32-bit absolute read/write input list structure
  1929                                  
  1930                                  struc ABS_32RW
  1931 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1932 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1933 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1934                                  .size:
  1935                                  endstruc
  1936                                  
  1937                                  ;; media ID info
  1938                                  
  1939                                  struc MEDIA_ID_INFO
  1940 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1941 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1942 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1943 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1944                                  .size:
  1945                                  endstruc
  1946                                  
  1947                                  ; equates for DOS34_FLAG
  1948                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1949                                  
  1950                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1951                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1952                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1953                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1954                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1955                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1956                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1957                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1958                                  					    ;M018: that knows how to handle 
  1959                                  					    ;M018: open for exec
  1960                                  
  1961                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1962                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1963                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1964                                  
  1965                                  ;============================================================================
  1966                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1967                                  ;============================================================================
  1968                                  ; 16/07/2018 - Retro DOS v3.0 
  1969                                  
  1970                                  ;**	ERROR.INC - DOS Error Codes
  1971                                  ;
  1972                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1973                                  ;    return error codes through AX. If an error occurred then
  1974                                  ;    the carry bit will be set and the error code is in AX. If no error
  1975                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1976                                  ;
  1977                                  ;    Since the set of error codes is being extended as we extend the operating
  1978                                  ;    system, we have provided a means for applications to ask the system for a
  1979                                  ;    recommended course of action when they receive an error.
  1980                                  ;
  1981                                  ;    The GetExtendedError system call returns a universal error, an error
  1982                                  ;    location and a recommended course of action. The universal error code is
  1983                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1984                                  ;    is issued.
  1985                                  
  1986                                  ;	2.0 error codes
  1987                                  
  1988                                  error_invalid_function		EQU	1
  1989                                  error_file_not_found		EQU	2
  1990                                  error_path_not_found		EQU	3
  1991                                  error_too_many_open_files	EQU	4
  1992                                  error_access_denied		EQU	5
  1993                                  error_invalid_handle		EQU	6
  1994                                  error_arena_trashed		EQU	7
  1995                                  error_not_enough_memory 	EQU	8
  1996                                  error_invalid_block		EQU	9
  1997                                  error_bad_environment		EQU	10
  1998                                  error_bad_format		EQU	11
  1999                                  error_invalid_access		EQU	12
  2000                                  error_invalid_data		EQU	13
  2001                                  ;**** reserved			EQU	14	; *****
  2002                                  error_invalid_drive		EQU	15
  2003                                  error_current_directory 	EQU	16
  2004                                  error_not_same_device		EQU	17
  2005                                  error_no_more_files		EQU	18
  2006                                  
  2007                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  2008                                  
  2009                                  error_write_protect		EQU	19
  2010                                  error_bad_unit			EQU	20
  2011                                  error_not_ready 		EQU	21
  2012                                  error_bad_command		EQU	22
  2013                                  error_CRC			EQU	23
  2014                                  error_bad_length		EQU	24
  2015                                  error_seek			EQU	25
  2016                                  error_not_DOS_disk		EQU	26
  2017                                  error_sector_not_found		EQU	27
  2018                                  error_out_of_paper		EQU	28
  2019                                  error_write_fault		EQU	29
  2020                                  error_read_fault		EQU	30
  2021                                  error_gen_failure		EQU	31
  2022                                  
  2023                                  ;	the new 3.0 error codes reported through INT 24
  2024                                  
  2025                                  error_sharing_violation 	EQU	32
  2026                                  error_lock_violation		EQU	33
  2027                                  error_wrong_disk		EQU	34
  2028                                  error_FCB_unavailable		EQU	35
  2029                                  error_sharing_buffer_exceeded	EQU	36
  2030                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2031                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2032                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2033                                  
  2034                                  ;	New OEM network-related errors are 50-79
  2035                                  
  2036                                  error_not_supported		EQU	50
  2037                                  
  2038                                  error_net_access_denied		EQU	65	;M028
  2039                                  
  2040                                  ;	End of INT 24 reportable errors
  2041                                  
  2042                                  error_file_exists		EQU	80
  2043                                  error_DUP_FCB			EQU	81	; *****
  2044                                  error_cannot_make		EQU	82
  2045                                  error_FAIL_I24			EQU	83
  2046                                  
  2047                                  ;	New 3.0 network related error codes
  2048                                  
  2049                                  error_out_of_structures 	EQU	84
  2050                                  error_already_assigned		EQU	85
  2051                                  error_invalid_password		EQU	86
  2052                                  error_invalid_parameter 	EQU	87
  2053                                  error_NET_write_fault		EQU	88
  2054                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2055                                  
  2056                                  ;	BREAK <Interrupt 24 error codes>
  2057                                  
  2058                                  ;**	Int24 Error Codes
  2059                                  
  2060                                  error_I24_write_protect 	EQU	0
  2061                                  error_I24_bad_unit		EQU	1
  2062                                  error_I24_not_ready		EQU	2
  2063                                  error_I24_bad_command		EQU	3
  2064                                  error_I24_CRC			EQU	4
  2065                                  error_I24_bad_length		EQU	5
  2066                                  error_I24_Seek			EQU	6
  2067                                  error_I24_not_DOS_disk		EQU	7
  2068                                  error_I24_sector_not_found	EQU	8
  2069                                  error_I24_out_of_paper		EQU	9
  2070                                  error_I24_write_fault		EQU	0Ah
  2071                                  error_I24_read_fault		EQU	0Bh
  2072                                  error_I24_gen_failure		EQU	0Ch
  2073                                  ; NOTE: Code 0DH is used by MT-DOS.
  2074                                  error_I24_wrong_disk		EQU	0Fh
  2075                                  
  2076                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2077                                  ;
  2078                                  ;	NOTE: ABORT is ALWAYS allowed
  2079                                  
  2080                                  Allowed_FAIL			EQU	00001000B
  2081                                  Allowed_RETRY			EQU	00010000B
  2082                                  Allowed_IGNORE			EQU	00100000B
  2083                                  
  2084                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2085                                  I24_area			EQU	00000110B  ; 00 if DOS
  2086                                  						   ; 01 if FAT
  2087                                  						   ; 10 if root DIR
  2088                                  						   ; 11 if DATA
  2089                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2090                                  
  2091                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2092                                  
  2093                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2094                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2095                                  ;	to take for error codes that they don't explicitly understand.
  2096                                  
  2097                                  ;	Values for error CLASS
  2098                                  
  2099                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2100                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2101                                  errCLASS_Auth		EQU	3	; Permission problem
  2102                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2103                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2104                                  errCLASS_SysFail	EQU	6	; System Failure
  2105                                  errCLASS_Apperr 	EQU	7	; Application Error
  2106                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2107                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2108                                  errCLASS_Locked 	EQU	10	; Locked
  2109                                  errCLASS_Media		EQU	11	; Media Failure
  2110                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2111                                  errCLASS_Unk		EQU	13	; Unknown/other
  2112                                  
  2113                                  ;	Values for error ACTION
  2114                                  
  2115                                  errACT_Retry		EQU	1	; Retry
  2116                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2117                                  errACT_User		EQU	3	; Ask user to regive info
  2118                                  errACT_Abort		EQU	4	; abort with clean up
  2119                                  errACT_Panic		EQU	5	; abort immediately
  2120                                  errACT_Ignore		EQU	6	; ignore
  2121                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2122                                  
  2123                                  ;	Values for error LOCUS
  2124                                  
  2125                                  errLOC_Unk		EQU	1	; No appropriate value
  2126                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2127                                  errLOC_Net		EQU	3	; Network
  2128                                  errLOC_SerDev		EQU	4	; Serial Device
  2129                                  errLOC_Mem		EQU	5	; Memory
  2130                                  
  2131                                  ;============================================================================
  2132                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2133                                  ;============================================================================
  2134                                  ; 04/05/2019 - Retro DOS v4.0
  2135                                  
  2136                                  ;**	Int 2A functions
  2137                                  ; ---------------------------------------------------------------------------
  2138                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2139                                  ;		as a critical section handler since critical sections
  2140                                  ;		were originally created to support the net.
  2141                                  ; ---------------------------------------------------------------------------
  2142                                  
  2143                                  ; ---------------------------------------------------------------------------
  2144                                  ;**	This table was created by examining the source and may not be
  2145                                  ;	complete or completely accurate - JGL
  2146                                  ;
  2147                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2148                                  
  2149                                  ;	(ah) = 0	installation check
  2150                                  ;			   (returns ah !=0 if installed)
  2151                                  ;	(ah) = 1	cooked net bios call
  2152                                  ;	(ah) = 3	query drive shared
  2153                                  ;			   (ds:si) = "n:" asciz string
  2154                                  ;	(ah) = 4	net bios
  2155                                  ;	       (al) = 0	   cooked net bios call
  2156                                  ;	       (al) = 1	   raw net bios call
  2157                                  ;	       (al) = 2	   ???
  2158                                  ;
  2159                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2160                                  ;			NCBs available/outstanding. DX returns the number of
  2161                                  ;			sessions. Supposedly, this is documented in an old
  2162                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2163                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2164                                  ;			not be used, as it is a hack, only to get Lotus
  2165                                  ;			Notes running.
  2166                                  ;
  2167                                  ;	(ah) = 80h	enter critical section
  2168                                  ;	(ah) = 81h	leave critical section
  2169                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2170                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2171                                  ; ---------------------------------------------------------------------------
  2172                                  
  2173                                  ;**	Critical section definitions
  2174                                  ; ---------------------------------------------------------------------------
  2175                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2176                                  ;	which various programs use to make it so, in a limited fashion.
  2177                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2178                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2179                                  ;	DOS's global data structures, such as the memory arena, are not
  2180                                  ;	in this area, so critical section indicators are used to protect
  2181                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2182                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2183                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2184                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2185                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2186                                  ;	critical section they then switch away from that second thread and
  2187                                  ;	let the first one finish and exit the section.
  2188                                  ; ---------------------------------------------------------------------------
  2189                                  
  2190                                  ; These below are subject to leave-all sections
  2191                                  critDisk    EQU     1			; Disk I/O critical section
  2192                                  critShare   EQU     1			; Sharer I/O critical section
  2193                                  critMem     EQU     1			; memory maintenance critical section
  2194                                  critSFT     EQU     1			; sft table allocation
  2195                                  critDevice  EQU     2			; Device I/O critical section
  2196                                  critNet     EQU     5			; network critical section
  2197                                  critIFS     EQU     6			; ifsfunc critical section
  2198                                  ; These below are not subject to leave-all sections
  2199                                  critASSIGN  EQU     8			; Assign has munged a system call
  2200                                  
  2201                                  ;============================================================================
  2202                                  ; MULT.INC (MSDOS 6.0, 1991)
  2203                                  ;============================================================================
  2204                                  ; 04/05/2019 - Retro DOS v4.0
  2205                                  
  2206                                  ;Break <Multiplex channels>
  2207                                  
  2208                                  ; ---------------------------------------------------------------------------
  2209                                  ; The current set of defined multiplex channels is (* means documented):
  2210                                  ;
  2211                                  ;   Channel(h)  Issuer          Receiver    Function
  2212                                  ;      00       server          PSPRINT     print job control
  2213                                  ;     *01       print/apps      PRINT       Queueing of files
  2214                                  ;      02       BIOS            REDIR       signal open/close of printers
  2215                                  ;
  2216                                  ;      05       command         REDIR       obtain text of net int 24 message
  2217                                  ;     *06       server/assign   ASSIGN      Install check
  2218                                  ;
  2219                                  ;      08       external driver IBMBIO      interface to internal routines
  2220                                  ;
  2221                                  ;      10       sharer/server   Sharer      install check
  2222                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2223                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2224                                  ;      13       MSNET           MSNET       movement of NCBs
  2225                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2226                                  ;                                           of alternative INT_13 drivers after
  2227                                  ;                                           boot_up
  2228                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2229                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2230                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2231                                  ;      16       WIN386          WIN386      Windows communications
  2232                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2233                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2234                                  ;      19       Shell
  2235                                  ;      1A       Ansi.sys
  2236                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2237                                  ;
  2238                                  ;      40h      OS/2
  2239                                  ;      41h      Lanman
  2240                                  ;      42h      Lanman
  2241                                  ;      43h      Himem
  2242                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2243                                  ;                               AL = 30h    reserved for Himem external A20 code
  2244                                  ;      44h      Dosextender
  2245                                  ;      45H      Windows profiler
  2246                                  ;      46h      Windows/286 DOS extender
  2247                                  ;      47h      Basic Compiler Vn. 7.0
  2248                                  ;      48h      Doskey
  2249                                  ;      49h      DOS 5.x install 
  2250                                  ;      4Ah      Multi Purpose
  2251                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2252                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2253                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2254                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2255                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2256                                  ;
  2257                                  ;                multSmartdrv           10h
  2258                                  ;                multMagicdrv           11h
  2259                                  ;      4Bh      Task Switcher API
  2260                                  ;
  2261                                  ;      4Ch      APPS            APM         Advanced power management
  2262                                  ;      4Dh      Kana Kanji Converter, MSKK
  2263                                  ;
  2264                                  ;      51h      ODI real mode support driver (for Chicago)
  2265                                  ;
  2266                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2267                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2268                                  ;
  2269                                  ;      55h      COMMAND.COM
  2270                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2271                                  ;                                           instance of command.com
  2272                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2273                                  ;                                           instance of ROM COMMAND
  2274                                  ;      56h      Sewell Development
  2275                                  ;               INTERLNK
  2276                                  ;
  2277                                  ;      57h      Iomega Corp.
  2278                                  ;
  2279                                  ;      ABh      Unspecified IBM use
  2280                                  ;      ACh      Graphics
  2281                                  ;      ADh      NLS (toronto)
  2282                                  ;      AEh
  2283                                  ;      AFh      Mode
  2284                                  ;      B0h      GRAFTABL        GRAFTABL
  2285                                  ;
  2286                                  ;      D7h      Banyan VINES
  2287                                  ; ---------------------------------------------------------------------------
  2288                                  
  2289                                  ;MUX 00-3F reserverd for IBM
  2290                                  ;MUX 80-BF reserverd for IBM
  2291                                  
  2292                                  ;MUX 40-7F reserved for Microsoft
  2293                                  
  2294                                  ;MUX C0-FF users
  2295                                  
  2296                                  MultSHARE   EQU     10h 		; sharer
  2297                                      ;	1   MFT_enter
  2298                                      ;	2   MFTClose
  2299                                      ;	3   MFTclU
  2300                                      ;	4   MFTCloseP
  2301                                      ;	5   MFTCloN
  2302                                      ;	6   set_block
  2303                                      ;	7   clr_block
  2304                                      ;	8   chk_block
  2305                                      ;	9   MFT_get
  2306                                      ;	10  ShSave
  2307                                      ;	11  ShChk
  2308                                      ;	12  ShCol
  2309                                      ;	13  ShCloseFile
  2310                                  
  2311                                  MultNET     EQU     11h 		; Network support
  2312                                  MultIFS     EQU     11h                 ; Network support
  2313                                      ;   1   IFS_RMDIR
  2314                                      ;   2   IFS_SEQ_RMDIR
  2315                                      ;   3   IFS_MKDIR
  2316                                      ;   4   IFS_SEQ_MKDIR
  2317                                      ;   5   IFS_CHDIR
  2318                                      ;   6   IFS_CLOSE
  2319                                      ;   7   IFS_COMMIT
  2320                                      ;   8   IFS_READ
  2321                                      ;   9   IFS_WRITE
  2322                                      ;   10  IFS_LOCK
  2323                                      ;   11  IFS_UNLOCK
  2324                                      ;   12  IFS_DISK_INFO
  2325                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2326                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2327                                      ;   15  IFS_GET_FILE_INFO
  2328                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2329                                      ;   17  IFS_RENAME
  2330                                      ;   18  IFS_SEQ_RENAME
  2331                                      ;   19  IFS_DELETE
  2332                                      ;   20  IFS_SEQ_DELETE
  2333                                      ;   21  IFS_OPEN
  2334                                      ;   22  IFS_SEQ_OPEN
  2335                                      ;   23  IFS_CREATE
  2336                                      ;   24  IFS_SEQ_CREATE
  2337                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2338                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2339                                      ;   27  IFS_SEARCH_FIRST
  2340                                      ;   28  IFS_SEARCH_NEXT
  2341                                      ;   29  IFS_ABORT
  2342                                      ;   30  IFS_ASSOPER
  2343                                      ;   31  Printer_SET_STRING
  2344                                      ;   32  IFSFlushBuf
  2345                                      ;   33  IFSBufWrite
  2346                                      ;   34  IFSResetEnvironment
  2347                                      ;   35  IFSSpoolCheck
  2348                                      ;   36  IFSSpoolClose
  2349                                      ;   37  IFSDeviceOper
  2350                                      ;   38  IFSSpoolEchoCheck
  2351                                      ;   39      - - -   Unused   - - -
  2352                                      ;   40      - - -   Unused   - - -
  2353                                      ;   41      - - -   Unused   - - -
  2354                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2355                                      ;   43  DEVICE_IOCTL
  2356                                      ;   44  IFS_UPDATE_CB
  2357                                      ;   45  IFS_FILE_XATTRIBUTES
  2358                                      ;   46  IFS_XOPEN
  2359                                      ;   47  IFS_DEPENDENT_IOCTL
  2360                                  
  2361                                  MultDOS     EQU     12h 		; DOS call back
  2362                                      ;	1   DOS_CLOSE
  2363                                      ;	2   RECSET
  2364                                      ;	3   Get DOSGROUP
  2365                                      ;	4   PATHCHRCMP
  2366                                      ;	5   OUT
  2367                                      ;	6   NET_I24_ENTRY
  2368                                      ;	7   PLACEBUF
  2369                                      ;	8   FREE_SFT
  2370                                      ;	9   BUFWRITE
  2371                                      ;	10  SHARE_VIOLATION
  2372                                      ;	11  SHARE_ERROR
  2373                                      ;	12  SET_SFT_MODE
  2374                                      ;	13  DATE16
  2375                                      ;	14  SETVISIT
  2376                                      ;	15  SCANPLACE
  2377                                      ;	16  SKIPVISIT
  2378                                      ;	17  StrCpy
  2379                                      ;	18  StrLen
  2380                                      ;	19  UCase
  2381                                      ;	20  POINTCOMP
  2382                                      ;	21  CHECKFLUSH
  2383                                      ;	22  SFFromSFN
  2384                                      ;	23  GetCDSFromDrv
  2385                                      ;	24  Get_User_Stack
  2386                                      ;	25  GetThisDrv
  2387                                      ;	26  DriveFromText
  2388                                      ;	27  SETYEAR
  2389                                      ;	28  DSUM
  2390                                      ;	29  DSLIDE
  2391                                      ;	30  StrCmp
  2392                                      ;	31  initcds
  2393                                      ;	32  pjfnfromhandle
  2394                                      ;	33  $NameTrans
  2395                                      ;	34  CAL_LK
  2396                                      ;	35  DEVNAME
  2397                                      ;	36  Idle
  2398                                      ;   37  DStrLen
  2399                                      ;   38  NLS_OPEN      DOS 3.3
  2400                                      ;   39  $CLOSE        DOS 3.3
  2401                                      ;   40  NLS_LSEEK     DOS 3.3
  2402                                      ;   41  $READ         DOS 3.3
  2403                                      ;   42  FastInit      DOS 4.0
  2404                                      ;   43  NLS_IOCTL     DOS 3.3
  2405                                      ;   44  GetDevList    DOS 3.3
  2406                                      ;   45  NLS_GETEXT    DOS 3.3
  2407                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2408                                      ;   47  FAKE_VERSION  DOS 4.0
  2409                                  
  2410                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2411                                      ;	0   NLSInstall
  2412                                      ;	1   ChgCodePage
  2413                                      ;	2   GetExtInfo
  2414                                      ;	3   SetCodePage
  2415                                      ;	4   GetCntry
  2416                                  
  2417                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2418                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2419                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2420                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2421                                  
  2422                                  multMULT        EQU     4Ah
  2423                                  multMAGIC       EQU     256*multMULT + 11h
  2424                                  multMULTRPLTOM  EQU     06h
  2425                                  
  2426                                      ;   0   swap disk function for single floppy drive m/cs
  2427                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2428                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2429                                      ;       drive
  2430                                      ;
  2431                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2432                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2433                                      ;       returns pointer in ES:DI
  2434                                      ;
  2435                                      ;   3-4 currently used by nobody
  2436                                      ;   5   Switcher API
  2437                                      ;   6   Top of Memory for RPL.
  2438                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2439                                      ;           code present in TOM should respond with a new TOM in DX
  2440                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2441                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2442                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2443                                      ;           It is the responsibility of RPL program to release the mem.
  2444                                      ;   7   Reserved for PROTMAN support.
  2445                                      ;  10   smartdrv 4.0
  2446                                      ;  11   dblspace api
  2447                                      ;  12   MRCI     api
  2448                                      ;  13   dblspace/mrci stealth packet api
  2449                                  
  2450                                  MultAPM     EQU     4ch             ; Obselete ???
  2451                                      ;       00h     APM_VER_CHK
  2452                                      ;       01h     APM_SUS_SYS_REQ
  2453                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2454                                  
  2455                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2456                                  				;  APM events                         ; M036
  2457                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2458                                  
  2459                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2460                                  ;	  it calls Multdos 42 to set up an entry routine address
  2461                                      ;	0   Install status  (reserved)
  2462                                      ;	1   Lookup
  2463                                      ;	2   Insert
  2464                                      ;	3   Delete
  2465                                      ;	4   Purge	    (reserved)
  2466                                  
  2467                                  ;============================================================================
  2468                                  ; FIND.INC (MSDOS 6.0, 1991)
  2469                                  ;============================================================================
  2470                                  ; 17/05/2019 - Retro DOS v4.0
  2471                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2472                                  
  2473                                  ;Break	<find first/next buffer>
  2474                                  
  2475                                  struc find_buf
  2476 00000000 ??                      .drive:	    resb 1		; drive of search
  2477 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2478 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2479 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2480 0000000F ????                    .DirStart:  resw 1		; DirStart
  2481 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2482 00000015 ??                      .attr:	    resb 1		; attribute found
  2483 00000016 ????                    .time:	    resw 1		; time
  2484 00000018 ????                    .date:	    resw 1		; date
  2485 0000001A ????                    .size_l:    resw 1		; low(size)
  2486 0000001C ????                    .size_h:    resw 1		; high(size)
  2487 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2488                                  .size:
  2489                                  endstruc
  2490                                  
  2491                                  ;============================================================================
  2492                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2493                                  ;============================================================================
  2494                                  ; 29/04/2019 - Retro DOS v4.0
  2495                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2496                                  
  2497                                  ;Equates for COUNTRY INFORMATION.
  2498                                  SetCountryInfo	EQU	1	;country info
  2499                                  SetUcase	EQU	2	;uppercase table
  2500                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2501                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2502                                  SetFileList	EQU	5	;valid file character list
  2503                                  SetCollate	EQU	6	;collating sequence
  2504                                  SetDBCS 	EQU	7	;double byte character set
  2505                                  SetALL		EQU	-1	;all the entries
  2506                                  
  2507                                  ;DOS country and code page information table structure.
  2508                                  ;Internally, IBMDOS gives a pointer to this table.
  2509                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2510                                  ;this structure.
  2511                                  
  2512                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2513 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2514 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2515 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2516 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2517 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2518 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2519                                  
  2520 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2521 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2522                                  
  2523 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2524 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2525                                  
  2526 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2527 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2528                                  
  2529                                  ; MSDOS 6.0
  2530 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2531 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2532                                  
  2533 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2534 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2535 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2536 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2537 0000006C ????                    .ccDFormat:		resw 1	;date format
  2538 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2539 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2540 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2541 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2542 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2543 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2544 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2545 0000007D ??                      .ccTFormat:		resb 1	;time format
  2546 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2547 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2548 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2549                                  .size:
  2550                                  endstruc
  2551                                  
  2552                                  ;Ucase table
  2553                                  struc CC_UCASE_TAB
  2554 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2555 00000002 <res 80h>               .ccUcase_data:		resb 128
  2556                                  endstruc
  2557                                  
  2558                                  ;File Ucase table
  2559                                  struc CC_FILE_UCASE_TAB
  2560 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2561 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2562                                  endstruc
  2563                                  
  2564                                  ;File char list
  2565                                  struc CC_FILE_CHAR_TAB
  2566 00000000 ????                    .ccFilechar_leng:	resw 1
  2567 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2568                                  endstruc
  2569                                  
  2570                                  ;collate table
  2571                                  struc CC_COLLATE_TAB
  2572 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2573 00000002 <res 100h>              .ccCollate_data:	resb 256
  2574                                  endstruc
  2575                                  
  2576                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2577                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2578                                  
  2579                                  ; 06/08/2018
  2580                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2581                                  
  2582                                  ;CAPITALIZATION equates
  2583                                  CAP_ONE_CHAR	equ	20H
  2584                                  CAP_STRING	equ	21H
  2585                                  CAP_ASCIIZ	equ	22H
  2586                                  CHECK_YES_NO	equ	23H
  2587                                  UPPER_TABLE	equ	80H
  2588                                  
  2589                                  ;NLS_YES	equ	59H  ; 'Y'
  2590                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2591                                  ;NLS_NO		equ	4EH  ; 'N'	
  2592                                  ;NLS_no2	equ	6EH  ; 'n'	
  2593                                  
  2594                                  ;============================================================================
  2595                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2596                                  ;============================================================================
  2597                                  ; 25/04/2019 - Retro DOS v4.0
  2598                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2599                                  
  2600                                  ;BREAK <Current directory list structure>
  2601                                  
  2602                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2603                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2604                                  ;									   ;
  2605                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2606                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2607                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2608                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2609                                  ; of the disk being changed or if the path must be recracked.		   ;
  2610                                  ;
  2611                                  ;	Some pathnames have special preambles, such as
  2612                                  ;
  2613                                  ;		\\machine\sharename\...
  2614                                  ;	For these pathnames we can't allow ".." processing to back us
  2615                                  ;	up into the special front part of the name.  The CURDIR_END field
  2616                                  ;	holds the address of the seperator character which marks
  2617                                  ;	the split between the special preamble and the regular
  2618                                  ;	path list; ".." processing isn't allowed to back us up past
  2619                                  ;	(i.e., before) CURDIR_END
  2620                                  ;	For the root, it points at the leading /.  For net
  2621                                  ;	assignments it points at the end (nul) of the initial assignment:
  2622                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2623                                  ;	  ^		 ^		     ^
  2624                                  
  2625                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2626                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2627                                  
  2628                                  struc curdir	; curdir_list
  2629 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2630 00000043 ????                    .flags:		resw 1			; various flags
  2631 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2632 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2633 0000004D ????                    .user_word:	resw 1
  2634 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2635                                  ; MSDOS 6.0
  2636 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2637 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2638 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2639                                  .size:
  2640                                  endstruc
  2641                                  
  2642                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2643                                  
  2644                                  %define curdir_netID curdir_ID  ; dword
  2645                                  
  2646                                  ;**	Flag values for CURDIR_FLAGS
  2647                                  
  2648                                  curdir_isnet	EQU	1000000000000000B
  2649                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2650                                  curdir_inuse	EQU	0100000000000000B
  2651                                  curdir_splice	EQU	0010000000000000B
  2652                                  curdir_local	EQU	0001000000000000B
  2653                                  
  2654                                  ;									   ;
  2655                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2657                                  
  2658                                  ;============================================================================
  2659                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2660                                  ;============================================================================
  2661                                  ; 09/07/2018 - Retro DOS v3.0
  2662                                  
  2663                                  ;BREAK <File Control Block definition>
  2664                                  
  2665                                  ;
  2666                                  ; Field definition for FCBs
  2667                                  ; The FCB has the following structure:
  2668                                  ;
  2669                                  ;	+---------------------------+
  2670                                  ;	|   Drive indicator(byte)   |
  2671                                  ;	+---------------------------+
  2672                                  ;	|    Filename (8 chars)     |
  2673                                  ;	+---------------------------+
  2674                                  ;	|    Extension (3 chars)    |
  2675                                  ;	+---------------------------+
  2676                                  ;	|   Current Extent(word)    |
  2677                                  ;	+---------------------------+
  2678                                  ;	|    Record size (word)     |
  2679                                  ;	+---------------------------+
  2680                                  ;	|    File Size (2 words)    |
  2681                                  ;	+---------------------------+
  2682                                  ;	|	Date of write	    |
  2683                                  ;	+---------------------------+
  2684                                  ;	|	Time of write	    |
  2685                                  ;	+---------------------------+
  2686                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2687                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2688                                  ;									   ;
  2689                                  ;	+---------------------------+
  2690                                  ;	|   8 bytes reserved	    |
  2691                                  ;	+---------------------------+
  2692                                  ;									   ;
  2693                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2694                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2695                                  ;	|    next record number     |
  2696                                  ;	+---------------------------+
  2697                                  ;	|   random record number    |
  2698                                  ;	+---------------------------+
  2699                                  ;
  2700                                  
  2701                                  struc	SYS_FCB
  2702 00000000 ??                      .drive:	resb 1
  2703 00000001 ????????????????        .name:	resb 8
  2704 00000009 ??????                  .ext:	resb 3
  2705 0000000C ????                    .EXTENT: resw 1
  2706 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2707 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2708                                  				; following word
  2709 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2710 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2711 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2712                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2713                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2714                                  ;									   ;
  2715 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2716                                  ;									   ;
  2717                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2718                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2719 00000020 ??                      .NR:	resb 1			; Next record
  2720 00000021 ????????                .RR:	resb 4			; Random record
  2721                                  .size:
  2722                                  endstruc
  2723                                  
  2724                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2725                                  				; NEXT
  2726                                  ; 20/07/2018
  2727                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2728                                  
  2729                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2730                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2731                                  ; NOTE about this byte (fcb_nsl_drive)
  2732                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2733                                  ;	00 means a local file or device with sharing loaded
  2734                                  ;	10 means a remote (network) file
  2735                                  ;	01 means a local file with no sharing loaded
  2736                                  ;	11 means a local device with no sharing loaded
  2737                                  
  2738                                  ; 20/07/2018
  2739                                  
  2740                                  ;
  2741                                  ; Network FCB
  2742                                  ;
  2743                                  
  2744                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2745                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2746                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2747                                  
  2748                                  ;
  2749                                  ; No sharing local file FCB
  2750                                  ;
  2751                                  
  2752                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2753                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2754                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2755                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2756                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2757                                  
  2758                                  ;
  2759                                  ; No sharing local device FCB
  2760                                  ;
  2761                                  
  2762                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2763                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2764                                  
  2765                                  ;
  2766                                  ; Sharing local FCB
  2767                                  ;
  2768                                  
  2769                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2770                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2771                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2772                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2773                                  
  2774                                  ;
  2775                                  ; Bogusness:  the four cases are:
  2776                                  ;
  2777                                  ;   local file	    00
  2778                                  ;   local device    40
  2779                                  ;   local sharing   C0
  2780                                  ;   network	    80
  2781                                  ;
  2782                                  ; Since sharing and network collide, we cannot use a test instruction for
  2783                                  ; deciding whether a network or a share check in involved
  2784                                  ;
  2785                                  FCBDEVICE   EQU 040h
  2786                                  FCBNETWORK  EQU 080h
  2787                                  FCBSHARE    EQU 0C0h
  2788                                  
  2789                                  ; FCBSPECIAL must be able to mask off both net and share
  2790                                  FCBSPECIAL  EQU 080h
  2791                                  FCBMASK     EQU 0C0h
  2792                                  
  2793                                  ;============================================================================
  2794                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2795                                  ;============================================================================
  2796                                  ; 11/07/2018 - Retro DOS v3.0
  2797                                  ; 25/04/2019 - Retro DOS v4.0
  2798                                  
  2799                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2800 00000000 ??                      .dirpos:	resb 1
  2801 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2802                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2803 00000005 ????                    .clusnum:	resw 1
  2804 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2805 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2806                                  .size:
  2807                                  endstruc
  2808                                  
  2809                                  ; 23/07/2018
  2810                                  ;FASTOPEN NAME CACHING Subfunctions
  2811                                  FONC_Look_up	equ	1
  2812                                  FONC_insert	equ	2
  2813                                  FONC_delete	equ	3
  2814                                  FONC_update	equ	4
  2815                                  FONC_purge	equ	5	;reserved for the future use.
  2816                                  FONC_Rename	equ	6	;AN001
  2817                                  
  2818                                  ; 27/07/2018
  2819                                  ;FastOpen Data Structure
  2820                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2821 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2822 00000002 ????????                .name_caching:	resd 1
  2823                                  ; MSDOS 6.0
  2824                                  ;.fatchain_caching: resd 1	;reserved for future use
  2825                                  .size:
  2826                                  endstruc
  2827                                  
  2828                                  ; 27/07/2018
  2829                                  ;Equates used in DOS.
  2830                                  FastOpen_Set	       equ     00000001b
  2831                                  FastOpen_Reset	       equ     11111110b
  2832                                  Lookup_Success	       equ     00000010b
  2833                                  Lookup_Reset	       equ     11111101b
  2834                                  Special_Fill_Set       equ     00000100b
  2835                                  Special_Fill_Reset     equ     11111011b
  2836                                  No_Lookup	       equ     00001000b
  2837                                  Set_For_Search	       equ     00010000b	;DCR 167
  2838                                  
  2839                                  ; 09/08/2018 
  2840                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2841                                  ; Fastxxx equates
  2842                                  FastOpen_ID	   equ	   1
  2843                                  FastSeek_ID	   equ	   2
  2844                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2845                                  
  2846                                  ;Structure definitions
  2847                                  ;
  2848                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2849 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2850 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2851                                  endstruc
  2852                                  
  2853                                  ;============================================================================
  2854                                  ; LOCK.INC, MSDOS 6.0, 1991
  2855                                  ;============================================================================
  2856                                  ; 14/07/2018 - Retro DOS v3.0
  2857                                  
  2858                                  ;**	LOCK.INC - Definitions for Record Locking
  2859                                  
  2860                                  ;**	LOCK functions
  2861                                  
  2862                                  LOCK_ALL	    equ    0
  2863                                  UNLOCK_ALL	    equ    1
  2864                                  LOCK_MUL_RANGE	    equ    2
  2865                                  UNLOCK_MUL_RANGE    equ    3
  2866                                  LOCK_READ	    equ    4
  2867                                  WRITE_UNLOCK	    equ    5
  2868                                  LOCK_ADD	    equ    6
  2869                                  
  2870                                  ;**	Structure for Lock buffer
  2871                                  
  2872                                  struc LockBuf
  2873 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2874 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2875                                  endstruc
  2876                                  
  2877                                  ;============================================================================
  2878                                  ; DPL.ASM, MSDOS 6.0, 1991
  2879                                  ;============================================================================
  2880                                  ; 04/08/2018 - Retro DOS v3.0
  2881                                  
  2882                                  ; (SRVCALL.ASM)
  2883                                  
  2884                                  struc DPL
  2885 00000000 ????                    .AX:	resw	1	; AX register
  2886 00000002 ????                    .BX:	resw	1	; BX register
  2887 00000004 ????                    .CX:	resw	1	; CX register
  2888 00000006 ????                    .DX:	resw	1	; DX register
  2889 00000008 ????                    .SI:	resw	1	; SI register
  2890 0000000A ????                    .DI:	resw	1	; DI register
  2891 0000000C ????                    .DS:	resw	1	; DS register
  2892 0000000E ????                    .ES:	resw	1	; ES register
  2893 00000010 ????                    .rsrvd: resw	1	; Reserved
  2894 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2895 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2896                                  .size:
  2897                                  endstruc
  2898                                   
  2899                                  ;----------------------------------------------------------------------------
  2900                                  ; DOSDATA
  2901                                  ;----------------------------------------------------------------------------
  2902                                  ;============================================================================
  2903                                  ; 24/04/2019 - Retro DOS v4.0
  2904                                  
  2905                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2906                                  		; ((just after resident IO.SYS code&data))
  2907                                  
  2908                                  ;============================================================================
  2909                                  ; WIN386.INC, MSDOS 6.0, 1991
  2910                                  ;============================================================================
  2911                                  ; 24/04/2019 - Retro DOS 4.0
  2912                                  
  2913                                  ;
  2914                                  ;  Symbols and structures relating to WIN386 support.
  2915                                  ;
  2916                                  ;  Used by files in both the DOS and the BIOS.
  2917                                  ;
  2918                                  ;  Created: 7-13-89 by MRW
  2919                                  ;
  2920                                  
  2921                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2922                                  
  2923                                  MultWin386		equ     16h	; Int 2f multiplex number
  2924                                  
  2925                                  Win386_Init		equ	05h	; Win386 initialization
  2926                                  Win386_Exit		equ	06h	; Win386 exit
  2927                                  Win386_Devcall		equ	07h	; Win386 device call out
  2928                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2929                                  
  2930                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2931                                  ; answer call outs from the DOSMGR
  2932                                  
  2933                                  Win386_DOSMGR		equ	15H
  2934                                  
  2935                                  ; The following structures are used to communicate instance data to 
  2936                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2937                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2938                                  
  2939                                  struc Win386_SIS	; Startup Info Structure
  2940 00000000 ????                     .Version:		resb	2	; db 3, 0
  2941 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2942 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2943 0000000A ????????                 .Reference_Data:	resd	1
  2944 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2945                                  endstruc
  2946                                  
  2947                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2948                                  
  2949                                  struc Win386_IIS	; Instance Item Structure
  2950 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2951 00000004 ????                    .Size:			resw	1	; size of an instance item
  2952                                  endstruc
  2953                                  
  2954                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2955                                  
  2956                                  ;Win386 DOSMGR function return values to indicate operation done
  2957                                  
  2958                                  WIN_OP_DONE		equ	0B97Ch	; 
  2959                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2960                                  
  2961                                  ;M021
  2962                                  ; WInoldap callout multiplex number
  2963                                  
  2964                                  WINOLDAP		equ	46h	;
  2965                                  
  2966                                  ;============================================================================
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; DOSCODE
  2969                                  ;----------------------------------------------------------------------------
  2970                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2971                                  
  2972                                  ;============================================================================
  2973                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2974                                  ;============================================================================
  2975                                  ; 16/07/2018 - Retro DOS 3.0
  2976                                  ;----------------------------------------------------------------------------
  2977                                  ; 24/04/2019 - Retro DOS 4.0
  2978                                  
  2979                                  ; MSDOS 6.0
  2980                                  ;----------------------------------------------------------------------------
  2981                                  ; FILE : ORIGIN.INC
  2982                                  ;----------------------------------------------------------------------------
  2983                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2984                                  ; is used for ORGing the DOS code.
  2985                                  ;
  2986                                  ; Brief Description of the necessacity of this ORG:
  2987                                  ; -------------------------------------------------
  2988                                  ;
  2989                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2990                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2991                                  ; This means programs running out off the HMA must use non-zero offset base
  2992                                  ; addresses. It also means that if we're running multiple programs from the
  2993                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2994                                  ; HMA segments that precede it.
  2995                                  ; 
  2996                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2997                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2998                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2999                                  ; selecting segment values between f124h and ffffh it could be located 
  3000                                  ; anywhere in the HMA. The problem with this is that programs with such 
  3001                                  ; high ORGs would not be able to run in low RAM.
  3002                                  ;
  3003                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  3004                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  3005                                  ; the following solution has been implemented:
  3006                                  ;
  3007                                  ; The Bios Code segment will have a very small offset and run at the very
  3008                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  3009                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  3010                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  3011                                  ; possible physical address at which DOS code will run, while still providing
  3012                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  3013                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  3014                                  ; mostly true.
  3015                                  ;
  3016                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3017                                  ; putting this value after the first jmp instruction in the DOS code in
  3018                                  ; mshead.asm. 
  3019                                  ;
  3020                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3021                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3022                                  ;
  3023                                  ; Revision History:
  3024                                  ;
  3025                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3026                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3027                                  ;
  3028                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3029                                  ; A utility called getsize will obtain the corresponding values from msdos
  3030                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3031                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3032                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3033                                  ; dependant on that.				  --- Apr 3 '90
  3034                                  ;
  3035                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3036                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3037                                  ; so the offset will not need to be included at the beginning of the code
  3038                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3039                                  ; at offset zero within the segment.
  3040                                  ; 
  3041                                  ;
  3042                                  ;--------------------------------------------------------------------------
  3043                                  
  3044                                  BIODATASTART	EQU	00700h
  3045                                  ;include	bdsize.inc	; this sets the values:
  3046                                  				;	BIODATASIZ
  3047                                  				;	BIOCODESIZ
  3048                                  				;	DOSDATASIZ
  3049                                  
  3050                                  ; 05/12/2022
  3051                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3052                                  			; 0900h for MSDOS 5.0 IO.SYS
  3053                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3054                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3055                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3056                                  			; 1370h for MSDOS 5.0 IO.SYS
  3057                                  ;ifndef ROMDOS
  3058                                  ;
  3059                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3060                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3061                                  ;
  3062                                  ;else
  3063                                  ;
  3064                                  ;BYTSTART	EQU	0
  3065                                  ;PARASTART	EQU	0
  3066                                  ;
  3067                                  ;endif ; ROMDOS
  3068                                  
  3069                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3070                                  ; -----------------------------------------------------------------
  3071                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3072                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3073                                  ;DOSDATASIZE equ MSDAT001E
  3074                                  ; 05/12/2022
  3075                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3076                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3077                                  			    ; of DOSDATA (in low memory) while
  3078                                  			    ; dos/kernel code starts just after 
  3079                                  			    ; this data block ((org = DOSDATASIZE))
  3080                                  			    ; (in low memory or in HMA)	
  3081                                  ; -----------------------------------------------------------------
  3082                                  
  3083                                  ; 04/11/2022	
  3084                                  ; -----------------------------------------------------------------	
  3085                                  ; NOTE:
  3086                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3087                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3088                                  ; -----------------------------------------------------------------
  3089                                  
  3090                                  ; ----------------------------------------------------------------------------
  3091                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3092                                  ; ----------------------------------------------------------------------------
  3093                                  
  3094                                  ;segment .code vstart=3DD0h ; 06/12/2022
  3095                                  ; 29/09/2023
  3096                                  segment .code vstart=3DE0h ; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
  3097                                  								
  3098                                  ; ============================================================================
  3099                                  
  3100                                  
  3101                                  ;[ORG 3DE0h]
  3102                                  
  3103                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3104                                  
  3105                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3106                                  
  3107                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3108                                  	;PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3109                                  			     ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3110                                  	
  3111                                  	; 29/09/2023 
  3112                                  	; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3113                                  	PARASTART equ 3DE0h	; (MSDOS 6.22 MSDOS.SYS)
  3114                                  
  3115                                  	[ORG PARASTART]	
  3116                                  
  3117                                  _$STARTCODE:
  3118                                  
  3119                                  ;PARASTART:
  3120 00000000 E9B076                          JMP     DOSINIT
  3121                                  
  3122                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3123                                  	; 04/11/2022
  3124 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3125                                  
  3126                                  BioDataSeg:
  3127 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3128                                  
  3129                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3130                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3131                                  ; allows getting the DOS data segment without going through the 
  3132                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3133                                  
  3134                                  DosDSeg:
  3135 00000007 0000                    	dw	0
  3136                                  	
  3137                                  ;============================================================================
  3138                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3139                                  ;============================================================================
  3140                                  ; 16/07/2018 - Retro DOS 3.0
  3141                                  ; 29/04/2019 - Retro DOS 4.0
  3142                                  
  3143                                  	; (MSDOS version)
  3144                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3145                                  	;db	6
  3146                                  	;db	20
  3147                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3148                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3149                                  	;db	5
  3150                                  	;db	0	
  3151                                  
  3152                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3153                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3154 00000009 06                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3155 0000000A 16                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3156                                  
  3157                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3158                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3159                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3160                                  
  3161                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3162                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3163                                  ;
  3164                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3165                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3166                                  
  3167                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3168                                  ; those error codes which are "allowed" for each system call. If the error
  3169                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3170                                  ; is to return the "real" error via Extended error, and one of the allowed
  3171                                  ; errors on the actual call.
  3172                                  ;
  3173                                  ; The table is organized as follows:
  3174                                  ;
  3175                                  ;    Each entry in the table is of variable size, but the first
  3176                                  ;       two bytes are always:
  3177                                  ;
  3178                                  ;       Call#,Cnt of bytes following this byte
  3179                                  ;
  3180                                  ; EXAMPLE:
  3181                                  ;       Call 61 (OPEN)
  3182                                  ;
  3183                                  ;       DB      61,5,12,3,2,4,5
  3184                                  ;
  3185                                  ;       61 is the AH INT 21 call value for OPEN.
  3186                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3187                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3188                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3189                                  ;       this case 5).  The last value will be the one returned on the call if
  3190                                  ;       the "real" error is not one of the allowed ones.
  3191                                  ;
  3192                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3193                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3194                                  ;   call, so set up an Extended error and leave the current error code alone.
  3195                                  ;
  3196                                  ; The table is terminated by a call value of 0FFh
  3197                                  
  3198                                  ;PUBLIC I21_MAP_E_TAB
  3199                                  	; 10/08/2018
  3200                                  
  3201                                  ; 29/04/2019
  3202                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3203                                  ; 04/11/2022
  3204                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3205                                  
  3206                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3207 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3208 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3209 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3210 00000018 0205                        DB          error_file_not_found,error_access_denied
  3211 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3212 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3213 00000022 04                          DB          error_too_many_open_files
  3214 00000023 05                          DB          error_access_denied
  3215                                      ; MSDOS 6.0
  3216 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3217 00000029 04                          DB          error_too_many_open_files
  3218 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3219                                      ; MSDOS 3.3
  3220                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3221                                      ;DB		error_too_many_open_files,error_access_denied
  3222 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3223 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3224 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3225 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3226 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3227 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3228 00000045 05                          DB          error_access_denied
  3229 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3230 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3231 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3232 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3233                                      ; MSDOS 6.0	
  3234 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3235                                      ; MSDOS 3.3	
  3236                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3237 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3238 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3239 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3240 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3241 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3242 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3243 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3244 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3245                                      ; MSDOS 6.0
  3246 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3247 0000007D 1005                        DB		error_current_directory,error_access_denied
  3248                                      ; MSDOS 3.3
  3249                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3250                                      ;DB		error_access_denied
  3251                                      ; MSDOS 6.0	
  3252 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3253 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3254                                      ; MSDOS 3.3	
  3255                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3256 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3257 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3258 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3259 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3260 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3261 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3262 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3263 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3264 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3265 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3266 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3267 000000AA 01                          DB              error_invalid_function
  3268                                      ; MSDOS 6.0		
  3269 000000AB 6C0A                        DB	ExtOpen,10
  3270 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3271 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3272 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3273 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3274 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3275 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3276 000000BD FF                          DB  0FFh
  3277                                  
  3278                                  ;19/09/2023
  3279                                  ;22/12/2022
  3280                                  ;04/11/2022	
  3281                                  ;29/04/2019 - Retro DOS v4.0
  3282                                  ;============================================================================
  3283                                  ; 	Retro DOS v4.0
  3284                                  ;============================================================================
  3285 000000BE 00                      	db 	0
  3286                                  RETRODOSMSG:
  3287 000000BF 0D0A                    	db	13,10
  3288                                  	;;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3289                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3290                                  	;;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3291                                  	;;db	"Retro DOS v4.2 by Erdogan Tan [2022]"	; 30/12/2022
  3292                                  	;db	"Retro DOS v4.2 by Erdogan Tan [2023]"
  3293 000000C1 526574726F20444F53-     	db	"Retro DOS v4.2 by Erdogan Tan [2024]"	; 05/01/2024
  3293 000000CA 2076342E3220627920-
  3293 000000D3 4572646F67616E2054-
  3293 000000DC 616E205B323032345D 
  3294 000000E5 0D0A2400                	db	13,10,"$", 0 
  3295                                  
  3296                                  ;============================================================================
  3297                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3298                                  ;============================================================================
  3299                                  ; 11/07/2018 - Retro DOS v3.0
  3300                                  
  3301                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3302 000000E9 90                      align 2
  3303                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3304                                  
  3305                                  ; Standard Functions
  3306                                  ;DISPATCH  LABEL WORD
  3307                                  DISPATCH:
  3308                                  	; 16/07/2018 - Retro DOS v3.0
  3309                                  	; (MSDOS 3.3)
  3310                                  
  3311                                  ; 29/04/2019
  3312                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3313                                  
  3314                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3315                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3316                                  
  3317 000000EA [E561]                          short_addr  _$ABORT			    ;  0      0
  3318 000000EC [5616]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3319 000000EE [5F16]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3320 000000F0 [1117]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3321 000000F2 [2C17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3322 000000F4 [3217]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3323 000000F6 [9D15]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3324 000000F8 [C915]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3325 000000FA [7713]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3326 000000FC [D013]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3327 000000FE [DC13]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3328 00000100 [4617]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3329 00000102 [5017]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3330 00000104 [9B0F]                          short_addr  _$DISK_RESET		    ; 13      D
  3331 00000106 [820E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3332 00000108 [0D1E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3333 0000010A [EF17]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3334 0000010C [1F1F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3335 0000010E [B11F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3336 00000110 [9517]                          short_addr  _$FCB_DELETE		    ; 19     13
  3337 00000112 [0B1F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3338 00000114 [101F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3339 00000116 [F11E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3340 00000118 [5B18]                          short_addr  _$FCB_RENAME		    ; 23     17
  3341                                  	; 16/07/2018
  3342                                          ;short_addr _CPMFUNC			    ; 24     18	
  3343 0000011A [5306]                          short_addr  NO_OP			    ; 24     18
  3344 0000011C [7D0E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3345 0000011E [720E]                          short_addr  _$SET_DMA			    ; 26     1A
  3346                                  
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3349                                  ;                                                                          ;
  3350 00000120 [2A0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3351 00000122 [2C0F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3352                                  ;                                                                          ;
  3353                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3354                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3355                                  
  3356                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3357                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3358                                  
  3359                                  ; 08/07/2018 - Retro DOS v3.0
  3360                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3361                                  
  3362 00000124 [5306]                  	short_addr  NO_OP			    ; 29     1D
  3363 00000126 [5306]                  	short_addr  NO_OP			    ; 30     1E
  3364                                  
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000128 [6B0F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372                                          ;short_addr _CPMFUNC			    ; 32     20
  3373                                  
  3374                                  ; 08/07/2018 - Retro DOS v3.0
  3375                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3376                                  
  3377 0000012A [5306]                  	short_addr  NO_OP			    ; 32     20
  3378                                  
  3379 0000012C [151F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3380 0000012E [1A1F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3381 00000130 [A717]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3382 00000132 [7D17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3383                                  
  3384                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3385                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3386                                  
  3387                                  ; Extended Functions
  3388 00000134 [A30E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3389                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;                                                                          ;
  3392 00000136 [A810]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3393                                  ;                                                                          ;
  3394                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3395                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3396 00000138 [061F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3397 0000013A [011F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3398 0000013C [1F0F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3399 0000013E [5E0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3400 00000140 [7B0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3401 00000142 [9A0A]                          short_addr  _$GET_TIME                      ; 44     2C
  3402 00000144 [AB0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3403 00000146 [630C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3404                                  
  3405                                  ; Extended functionality group
  3406 00000148 [5F0E]                          short_addr  _$GET_DMA                       ; 47     2F
  3407 0000014A [3A0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3408 0000014C [8961]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3409                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3410                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3411                                  ;                                                                          ;
  3412 0000014E [6D0F]                          short_addr  _$GET_DPB			    ; 50     32
  3413                                  ;                                                                          ;
  3414                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3416 00000150 [6702]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3417 00000152 [550F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3418 00000154 [940E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3419 00000156 [3C0E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3420 00000158 [D00E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3421 0000015A [6A0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3422                                  ; XENIX CALLS
  3423                                  ;   Directory Group
  3424 0000015C [0B22]                          short_addr  _$MKDIR			    ; 57     39
  3425 0000015E [5721]                          short_addr  _$RMDIR			    ; 58     3A
  3426 00000160 [9221]                          short_addr  _$CHDIR			    ; 59     3B
  3427                                  ;   File Group
  3428 00000162 [A76F]                          short_addr  _$CREAT			    ; 60     3C
  3429 00000164 [D06E]                          short_addr  _$OPEN			    ; 61     3D
  3430 00000166 [0167]                          short_addr  _$CLOSE		 	    ; 62     3E
  3431 00000168 [1268]                          short_addr  _$READ			    ; 63     3F
  3432 0000016A [7868]                          short_addr  _$WRITE			    ; 64     40
  3433 0000016C [F76F]                          short_addr  _$UNLINK			    ; 65     41
  3434 0000016E [7D68]                          short_addr  _$LSEEK			    ; 66     42
  3435 00000170 [B46F]                          short_addr  _$CHMOD			    ; 67     43
  3436 00000172 [6C22]                          short_addr  _$IOCTL			    ; 68     44
  3437 00000174 [3269]                          short_addr  _$DUP			    ; 69     45
  3438 00000176 [5069]                          short_addr  _$DUP2			    ; 70     46
  3439 00000178 [E820]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3440                                  ;   Memory Group
  3441 0000017A [7C62]                          short_addr  _$ALLOC			    ; 72     48
  3442 0000017C [F663]                          short_addr  _$DEALLOC                       ; 73     49
  3443 0000017E [D263]                          short_addr  _$SETBLOCK                      ; 74     4A
  3444                                  ;   Process Group
  3445 00000180 [635B]                          short_addr  _$EXEC			    ; 75     4B
  3446 00000182 [C161]                          short_addr  _$EXIT			    ; 76     4C
  3447 00000184 [595B]                          short_addr  _$WAIT			    ; 77     4D
  3448 00000186 [2420]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3449                                  ;   Special Group
  3450 00000188 [7A20]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3451                                  ; SPECIAL SYSTEM GROUP
  3452                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3453                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3454                                  ;                                                                          ;
  3455 0000018A [B902]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3456 0000018C [C502]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3457 0000018E [610F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3458 00000190 [D00F]                          short_addr  _$SETDPB			    ; 83     53
  3459                                  ;                                                                          ;
  3460                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3461                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3462 00000192 [5E0C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3463                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3464                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3465                                  ;                                                                          ;
  3466 00000194 [9710]                          short_addr  _$DUP_PDB                       ; 85     55
  3467                                  ;                                                                          ;
  3468                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470 00000196 [1D70]                          short_addr  _$RENAME			    ; 86     56
  3471 00000198 [E468]                          short_addr  _$FILE_TIMES                    ; 87     57
  3472 0000019A [2B64]                          short_addr  _$ALLOCOPER                     ; 88     58
  3473                                  
  3474                                  ; 08/07/2018 - Retro DOS v3.0
  3475                                  ; -------------------------------------------------------------------------;
  3476                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3477                                  
  3478                                  ; Network extention system calls
  3479 0000019C [E40E]                          short_addr  _$GetExtendedError              ; 89     59
  3480 0000019E [A870]                          short_addr  _$CreateTempFile                ; 90     5A
  3481 000001A0 [9070]                          short_addr  _$CreateNewFile                 ; 91     5B
  3482 000001A2 [8972]                          short_addr  _$LockOper                      ; 92     5C
  3483 000001A4 [1165]                          short_addr  _$ServerCall                    ; 93     5D
  3484 000001A6 [1A6A]                          short_addr  _$UserOper                      ; 94     5E
  3485 000001A8 [7F69]                          short_addr  _$AssignOper                    ; 95     5F
  3486 000001AA [6B6E]                          short_addr  _$NameTrans                     ; 96     60
  3487 000001AC [5306]                  	short_addr  NO_OP			    ; 97     61
  3488 000001AE [C502]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3489                                  ; the next call is reserved for hangool sys call
  3490                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3491 000001B0 [040F]                  	short_addr  _$ECS_Call			    ; 99     63
  3492                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496 000001B2 [D102]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3497                                  ;                                                                          ;
  3498                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3499                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3500 000001B4 [ED0C]                          short_addr  _$GetExtCntry                   ; 101    65
  3501 000001B6 [EA0D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3502 000001B8 [4E67]                          short_addr  _$ExtHandle                     ; 103    67
  3503 000001BA [3467]                          short_addr  _$COMMIT                        ; 104    68
  3504                                  
  3505                                  ; 08/07/2018
  3506                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3507                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3508                                  
  3509                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3510 000001BC [9A11]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3511 000001BE [3467]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3512 000001C0 [5306]                  	short_addr  NO_OP                           ; 107    6B   
  3513                                  						    ; IFS_IOCTL no longer 
  3514                                  						    ; supported
  3515 000001C2 [3E71]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3516                                  
  3517                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3518                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3519                                  ;                                                                          ;
  3520                                  ;ifdef ROMEXEC
  3521                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3522                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3523                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3524                                  ;endif
  3525                                  ;                                                                          ;
  3526                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3527                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3528                                  
  3529                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3530                                  
  3531                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3532                                  
  3533                                  ; 08/07/2018 - Retro DOS v3.0
  3534                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3535                                  
  3536                                  ;	If 	Installed
  3537                                  
  3538                                  align 2
  3539                                  
  3540                                  ;PUBLIC FOO
  3541                                  
  3542                                  FOO:	; LABEL WORD
  3543 000001C4 [1007]                          short_addr  Leave2F
  3544                                  
  3545 000001C6 [C801]                  DTab:	DW  DOSTable
  3546                                  
  3547                                  	;PUBLIC FOO,DTAB
  3548                                  
  3549                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3550                                  
  3551                                  ; 29/04/2019
  3552                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3553                                  
  3554                                  
  3555                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3556                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3557                                         
  3558                                  DOSTable:  ; LABEL  WORD
  3559 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3560 000001C9 [3509]                          short_addr  DOSInstall          ;   0 install check
  3561 000001CB [272F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3562 000001CD [C50E]                          short_addr  RECSET              ;   2   RECSET
  3563 000001CF [2F09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3564 000001D1 [8E50]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3565 000001D3 [6116]                          short_addr  OUTT                ;   5   OUT
  3566 000001D5 [6453]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3567 000001D7 [E358]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3568 000001D9 [2530]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3569 000001DB [A85A]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3570 000001DD [3D73]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3571 000001DF [702C]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3572 000001E1 [5A2C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3573 000001E3 [F00A]                          short_addr  DATE16              ;   13  DATE16
  3574 000001E5 [0612]                          short_addr  Idle		;   14      empty slot
  3575 000001E7 [DC58]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3576 000001E9 [0612]                          short_addr  Idle		;   16      empty slot
  3577 000001EB [D311]                          short_addr  StrCpy              ;   17  StrCpy
  3578 000001ED [EB11]                          short_addr  StrLen              ;   18  StrLen
  3579 000001EF [3950]                          short_addr  UCase		;   19  UCase
  3580 000001F1 [2059]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3581 000001F3 [7F5A]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3582 000001F5 [7C66]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3583 000001F7 [DF6A]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3584 000001F9 [8104]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3585 000001FB [8A6A]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3586 000001FD [906E]                          short_addr  DriveFromText       ;   26  DriveFromText
  3587 000001FF [970B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3588 00000201 [300C]                          short_addr  DSUM                ;   28  DSUM
  3589 00000203 [8D0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3590 00000205 [B111]                          short_addr  StrCmp              ;   30  StrCmp
  3591 00000207 [CD69]                          short_addr  InitCDS             ;   31  initcds
  3592 00000209 [4966]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3593 0000020B [6B6E]                          short_addr  _$NameTrans		;   33  $NameTrans
  3594 0000020D [7A06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3595 0000020F [C741]                          short_addr  DEVNAME             ;   35  DEVNAME
  3596 00000211 [0612]                          short_addr  Idle                ;   36  Idle
  3597 00000213 [F911]                          short_addr  DStrLen             ;   37  DStrLen
  3598 00000215 [A812]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3599 00000217 [0167]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3600 00000219 [AE12]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3601 0000021B [1268]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3602 0000021D [6A12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3603 0000021F [EB12]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3604 00000221 [DA12]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3605 00000223 [0813]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3606                                          
  3607                                  	; 29/04/2019 - Retro DOS v4.0
  3608 00000225 [0C13]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3609                                  
  3610 00000227 [5306]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3611                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3612                                  
  3613                                  DOSTableEnd:  ; LABEL BYTE
  3614                                  
  3615                                  	;ENDIF
  3616                                  
  3617                                  ; ----------------------------------------------------------------------------
  3618                                  ; BREAK   <Copyright notice and version>
  3619                                  ; ----------------------------------------------------------------------------
  3620                                  
  3621                                  ;CODSTRT EQU	$
  3622                                  
  3623                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3624                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3625                                  
  3626                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3627                                  ;       module. The reason is so that the data alignments are the same in
  3628                                  ;       IBM-DOS and MS-DOS up through header.
  3629                                  
  3630                                  	;PUBLIC	HEADER
  3631                                  
  3632                                  HEADER:	; LABEL	BYTE
  3633                                          ;IF	DEBUG
  3634                                          ;DB	13,10,"Debugging DOS version "
  3635                                          ;DB	MAJOR_VERSION + "0"
  3636                                          ;DB	"."
  3637                                          ;DB	(MINOR_VERSION / 10) + "0"
  3638                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3639                                          ;ENDIF
  3640                                  
  3641                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3642                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3643                                  %if 0
  3644                                          ;IF	NOT IBM
  3645                                          DB	13,10,"MS-DOS version "
  3646                                          DB	MAJOR_VERSION + "0"
  3647                                          DB	"."
  3648                                          DB	(MINOR_VERSION / 10) + "0"
  3649                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3650                                          DB	(MINOR_VERSION % 10) + "0"
  3651                                  
  3652                                          ;IF	HIGHMEM
  3653                                          ;DB	"H"
  3654                                          ;ENDIF
  3655                                  
  3656                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3657                                  	; 30/04/2019 - Retro DOS v4.0
  3658                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3659                                  
  3660                                  	;ENDIF
  3661                                  
  3662                                  %endif
  3663                                  
  3664                                  ;IF DEBUG
  3665                                  ;	DB	13,10,"$"
  3666                                  ;ENDIF
  3667                                  
  3668                                  ;include copyrigh.inc
  3669                                  
  3670                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3671                                  
  3672                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3673                                  	;DB	"Licensed Material - Property of Microsoft "
  3674                                  	;DB	"All rights reserved "
  3675                                  
  3676                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3677                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3678                                  
  3679                                  ; 28/12/2022 - Retro DOS v4.1
  3680                                  %if 0
  3681                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3682                                  ms_copyright:
  3683                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3684                                  	db	'Licensed Material - Property of Microsoft '
  3685                                  	db	'All rights reserved '
  3686                                  
  3687                                  %endif
  3688                                  	;; 28/12/2022 - Retro DOS v4.1
  3689                                  ;ms_copyright:	
  3690                                    	;db	13,10,"MS DOS Version 5.0"
  3691                                  	;db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3692                                  
  3693                                  ;	; 21/09/2023 - Retro DOS v4.2 MSDOS.SYS
  3694                                  ;	; (MSDOS 6.22 MSDOS.SYS - DOSCODE:3FDDh (File offset: 509))
  3695                                  ;ms_copyright:
  3696                                  ;	db 'MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp '
  3697                                  ;	db 'Licensed Material - Property of Microsoft All rights reserved '
  3698                                  
  3699                                  	; 20/09/2023 - Retro DOS v4.2
  3700                                  ms_copyright:	
  3701 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 6.22"
  3701 00000232 56657273696F6E2036-
  3701 0000023B 2E3232             
  3702 0000023E 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1994 Microsoft Corp.",13,10,"$",0	
  3702 00000247 687420313938312D31-
  3702 00000250 393934204D6963726F-
  3702 00000259 736F667420436F7270-
  3702 00000262 2E0D0A2400         
  3703                                  
  3704                                  ;============================================================================
  3705                                  ; MSCODE.ASM
  3706                                  ;============================================================================
  3707                                  
  3708                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3709                                  ; 03/03/2018
  3710                                  
  3711                                  ;
  3712                                  ; MSCODE.ASM -- MSDOS code
  3713                                  ;
  3714                                  
  3715                                  ;INCLUDE DOSSEG.ASM
  3716                                  ;INCLUDE STDSW.ASM
  3717                                  
  3718                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3719                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3720                                  
  3721                                  ;.xcref
  3722                                  ;INCLUDE DOSSYM.ASM
  3723                                  ;INCLUDE DEVSYM.ASM
  3724                                  ;.cref
  3725                                  ;.list
  3726                                  
  3727                                  ;IFNDEF  KANJI
  3728                                  ;KANJI   EQU     0       ; FALSE
  3729                                  ;ENDIF
  3730                                  
  3731                                  ;IFNDEF  IBM
  3732                                  ;IBM     EQU     0
  3733                                  ;ENDIF
  3734                                  
  3735                                  ;IFNDEF  HIGHMEM
  3736                                  ;HIGHMEM  EQU     0
  3737                                  ;ENDIF
  3738                                  
  3739                                          ;i_need  USER_SP,WORD
  3740                                          ;i_need  USER_SS,WORD
  3741                                          ;i_need  SAVEDS,WORD
  3742                                          ;i_need  SAVEBX,WORD
  3743                                          ;i_need  INDOS,BYTE
  3744                                          ;i_need  NSP,WORD
  3745                                          ;i_need  NSS,WORD
  3746                                          ;i_need  CURRENTPDB,WORD
  3747                                          ;i_need  AUXSTACK,BYTE
  3748                                          ;i_need  CONSWAP,BYTE
  3749                                          ;i_need  IDLEINT,BYTE
  3750                                          ;i_need  NOSETDIR,BYTE
  3751                                          ;i_need  ERRORMODE,BYTE
  3752                                          ;i_need  IOSTACK,BYTE
  3753                                          ;i_need  WPERR,BYTE
  3754                                          ;i_need  DSKSTACK,BYTE
  3755                                          ;i_need  CNTCFLAG,BYTE
  3756                                          ;i_need  LEAVEADDR,WORD
  3757                                          ;i_need  NULLDEVPT,DWORD
  3758                                  
  3759                                          ;IF NOT IBM
  3760                                          ;i_need  OEM_HANDLER,DWORD
  3761                                          ;ENDIF
  3762                                  
  3763                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3764                                  
  3765                                  ;============================================================================
  3766                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3767                                  ;============================================================================
  3768                                  ; 11/07/2018 - Retro DOS v3.0
  3769                                  ; 01/05/2019 - Retro DOS v4.0
  3770                                  
  3771                                  ; DosCode SEGMENT
  3772                                  
  3773                                  ; ==========================================================================
  3774                                  ;
  3775                                  ; $Set_CTRL_C_Trapping
  3776                                  ;
  3777                                  ; Function:
  3778                                  ;	Enable disable ^C checking in dispatcher
  3779                                  ;
  3780                                  ; Inputs:
  3781                                  ;		AL = 0 read ^C status
  3782                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3783                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3784                                  ;		AL = 5 get DOS boot drive
  3785                                  ;		AL = 6 Get version number
  3786                                  ;			RETURNS:
  3787                                  ;				BH = Minor version number
  3788                                  ;				BL = Major version number
  3789                                  ;				DL = DOS internal revision
  3790                                  ;				DH = DOS type flags
  3791                                  ;					Bit 3 	- DOS in ROM
  3792                                  ;					Bit 4 	- DOS in HMA
  3793                                  ;					Bit 0-2, 5-7 - Reserved
  3794                                  ; Outputs:
  3795                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3796                                  ;
  3797                                  ; History:
  3798                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3799                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3800                                  ; ==========================================================================
  3801                                  
  3802                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3803                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3804                                  
  3805                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3806                                  ; DOSCODE:4052h (MSDOS 6.21, MSDOS.SYS)
  3807                                  ; DOSCODE:4052h (MSDOS 6.22, MSDOS.SYS)
  3808                                  ; DOSCODE:4123h (PCDOS 7.1, IBMDOS.COM)
  3809                                  
  3810                                  _$SET_CTRL_C_TRAPPING:
  3811                                  	; 01/05/2019 - Retro DOS v4.0
  3812                                  
  3813 00000267 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3814 00000269 7603                    	jbe	short scct_1		; If yes continue processing
  3815                                  
  3816 0000026B B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3817 0000026D CF                      	iret
  3818                                  scct_1:
  3819 0000026E 1E                      	push	DS
  3820                                  
  3821                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3822 0000026F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3823                                  	
  3824 00000274 50                      	push	AX			; DL only register that can change
  3825 00000275 56                      	push	SI
  3826                                  
  3827 00000276 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3828 00000279 30E4                    	xor	AH,AH			; Clear high byte of AX
  3829 0000027B 09C0                    	or	AX,AX			; Check for subfunction 0
  3830 0000027D 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3831                                  
  3832 0000027F 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3833 00000281 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3834                                  scct_2:
  3835 00000283 48                      	dec	AX			; Now dec AX and see if it was 1
  3836 00000284 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3837                                  
  3838 00000286 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3839 00000289 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3840 0000028B EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3841                                  scct_3:
  3842 0000028D 48                      	dec	AX			; Dec AX again to see if it was 2
  3843 0000028E 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3844                                  
  3845 00000290 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3846 00000293 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3847 00000295 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3848                                  scct_4:
  3849 00000297 3C03                    	cmp	al,3 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3850                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3851 00000299 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3852 0000029B 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3853 0000029F EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3854                                  scct_5:
  3855 000002A1 3C04                    	cmp	al,4 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3856                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3857 000002A3 750E                    	jne	short scct_9s		; If not equal then not get version
  3858                                  	
  3859                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3860                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3861 000002A5 BB0616                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3862                                  	
  3863                                  	;mov	dl,0
  3864                                  	;mov	DL,DOSREVNM ; 0
  3865                                  
  3866                                  	;xor	dh,dh			; assume vanilla DOS
  3867                                  	; 01/01/2024
  3868 000002A8 BA0000                  	mov	dx,0
  3869 000002AB 3836[F211]              	cmp	byte [DosHasHMA],dh ; 0
  3870                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3871                                  	;je	short @F
  3872 000002AF 7402                    	je	short scct_6
  3873                                  	; 01/01/2024
  3874 000002B1 B610                    	mov	dh,10h
  3875                                  	;or	dh,10h
  3876                                  	;;or	DH,DOSINHMA ; 10h
  3877                                  ;@@:
  3878                                  scct_6:
  3879                                  
  3880                                  ;ifdef ROMDOS
  3881                                  ;	or	DH,DOSINROM ; 08h
  3882                                  ;endif ; ROMDOS
  3883                                  
  3884                                  scct_9s:
  3885 000002B3 5E                      	pop	SI
  3886 000002B4 58                      	pop	AX
  3887 000002B5 1F                      	pop	DS
  3888                                  scct_9f:
  3889 000002B6 CF                      	iret
  3890                                  
  3891                                  SetCtrlShortEntry:			; This allows a conditional entry
  3892                                  					; from main dispatch code
  3893 000002B7 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3894                                  
  3895                                  ; ==========================================================================
  3896                                  ;									   
  3897                                  ; The following two routines are dispatched to directly with ints disabled
  3898                                  ; immediately after the int 21h entry.	no DIS state is set.
  3899                                  ;
  3900                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3901                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3902                                  ;
  3903                                  ; ==========================================================================
  3904                                  
  3905                                  _$SET_CURRENT_PDB:
  3906 000002B9 1E                      	push	DS
  3907                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3908 000002BA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3909 000002BF 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3910 000002C3 1F                      	pop	DS
  3911 000002C4 CF                      	iret
  3912                                  
  3913                                  ; ==========================================================================
  3914                                  ;
  3915                                  ; $get_current_PDB returns in BX the current process
  3916                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3917                                  ;
  3918                                  ; ==========================================================================
  3919                                  
  3920                                  _$GET_CURRENT_PDB:
  3921 000002C5 1E                      	push	DS
  3922                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3923 000002C6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3924 000002CB 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3925 000002CF 1F                      	pop	DS
  3926 000002D0 CF                      	iret
  3927                                  
  3928                                  ; ==========================================================================
  3929                                  ;
  3930                                  ; Sets the Printer Flag to whatever is in AL.
  3931                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3932                                  ;
  3933                                  ; ==========================================================================
  3934                                  
  3935                                  _$SET_PRINTER_FLAG:
  3936 000002D1 1E                      	push	ds
  3937                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3938 000002D2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3939 000002D7 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3940 000002DA 1F                      	pop	ds
  3941 000002DB CF                      	iret
  3942                                  
  3943                                  ; 01/05/2019 - Retro DOS v4.0
  3944                                  ; 08/07/2018 - Retro DOS v3.0
  3945                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3946                                  
  3947                                  ; ----------------------------------------------------------------------------
  3948                                  ; BREAK   <System call entry points and dispatcher>
  3949                                  ; ----------------------------------------------------------------------------
  3950                                  
  3951                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3952                                  
  3953                                  ; ==========================================================================
  3954                                  ;
  3955                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3956                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3957                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3958                                  ;
  3959                                  ; ==========================================================================
  3960                                  
  3961                                  SYSTEM_CALL:    ; PROC NEAR
  3962                                  
  3963                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3964                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3965                                  
  3966                                  ;entry	QUIT				
  3967                                  QUIT:				; INT 20H entry point	
  3968                                  	;MOV	AH,0
  3969 000002DC 30E4                    	xor	ah,ah ; 08/07/2018
  3970 000002DE EB36                    	JMP     SHORT SAVREGS
  3971                                  
  3972                                  ; ---------------------------------------------------------------------------
  3973                                  
  3974                                  	; The system call in AH is out of the range that we know how
  3975                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3976                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3977                                  	; error as this may break some programs compatability.
  3978                                  
  3979                                  BADCALL:
  3980                                          ;MOV	AL,0
  3981 000002E0 30C0                    	xor	al,al ; 08/07/2018
  3982                                  IRETT:	; 06/05/2019
  3983                                  _IRET:
  3984 000002E2 CF                              IRET
  3985                                  
  3986                                  ; ---------------------------------------------------------------------------
  3987                                  
  3988                                  ; 01/05/2019 - Retro DOS v4.0
  3989                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3990                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3991                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3992                                  
  3993                                  	; An alternative method of entering the system is to perform a
  3994                                  	; CALL 5 in the program segment prefix with the contents of CL
  3995                                  	; indicating what system call the user would like. A subset of
  3996                                  	; the possible system calls is allowed here only the
  3997                                  	; CPM-compatible calls may get dispatched.
  3998                                  
  3999                                  		; System call entry point and dispatcher
  4000                                  CALL_ENTRY:
  4001 000002E3 1E                      	push	DS
  4002                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4003 000002E4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4004 000002E9 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  4005                                  
  4006 000002ED 58                              POP     AX                      ; IP from the long call at 5
  4007 000002EE 58                              POP     AX                      ; Segment from the long call at 5
  4008 000002EF 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  4009                                  
  4010                                  		; Re-order the stack to simulate an interrupt 21.
  4011                                  
  4012 000002F3 9C                      	PUSHF				; Start re-ordering the stack
  4013 000002F4 FA                      	CLI
  4014 000002F5 50                              PUSH    AX                      ; Save segment
  4015 000002F6 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  4016                                  	; 04/11/2022
  4017                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  4018                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  4019 000002FA FF36[EC05]              	push	word [SAVEDS]
  4020 000002FE 1F                      	pop	ds
  4021                                  	;
  4022                                  	;cmp	cl,36
  4023 000002FF 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  4024 00000302 77DC                            JA      SHORT BADCALL
  4025 00000304 88CC                            MOV     AH,CL
  4026                                  	; 08/07/2018
  4027 00000306 EB0E                    	jmp	short SAVREGS
  4028                                  
  4029                                  ; ---------------------------------------------------------------------------
  4030                                  
  4031                                  ; 01/05/2019 - Retro DOS v4.0
  4032                                  
  4033                                  	; This is the normal INT 21 entry point. We first perform a
  4034                                  	; quick test to see if we need to perform expensive DOS-entry
  4035                                  	; functions. Certain system calls are done without interrupts
  4036                                  	; being enabled.
  4037                                  
  4038                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4039                                  
  4040                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4041                                  ; 04/11/2022
  4042                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4043                                  
  4044                                  COMMAND:
  4045                                  	; 22/12/2022
  4046 00000308 FA                      	cli
  4047                                  
  4048                                  	; 01/05/2019 - Retro DOS v4.0
  4049                                  	; 08/07/2018 - Retro DOS v3.0
  4050                                  
  4051                                  ; 22/12/2022
  4052                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4053                                  	;IF	NOT IBM
  4054 00000309 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4055 0000030C 7203                    	JB	SHORT NOTOEM
  4056 0000030E E97A01                  	JMP	_$SET_OEM_HANDLER
  4057                                  
  4058                                  NOTOEM:
  4059                                  	;ENDIF
  4060                                  
  4061                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4062                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4063                                  
  4064                                  	; 22/12/2022
  4065                                  	;cli	; 08/07/2018
  4066                                  
  4067                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4068                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4069                                  	; 04/11/2022
  4070 00000311 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4071                                  	;JBE	SHORT SAVREGS
  4072 00000314 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4073                                  
  4074                                  	; 31/05/2019
  4075                                  
  4076                                  	; The following set of calls are issued by the server at
  4077                                  	; *arbitrary* times and, therefore, must be executed on
  4078                                  	; the user's entry stack and executed with interrupts off.
  4079                                  
  4080                                  SAVREGS:
  4081                                  	; 01/05/2019 - Retro DOS v4.0
  4082                                  	; 10/08/2018
  4083                                  	; 08/07/2018 - Retro DOS v3.0
  4084 00000316 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4085                                  	;;je	_$SET_CTRL_C_TRAPPING
  4086                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4087 00000319 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4088                                  	; 04/11/2022
  4089 0000031B 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4090 0000031D 80FC64                  	cmp	ah,64h			; Check Max case number
  4091 00000320 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4092 00000322 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4093 00000324 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4094 00000327 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4095 00000329 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4096 0000032C 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4097 0000032E 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4098 00000331 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4099                                  
  4100                                  SaveAllRegs:
  4101                                  	; 01/05/2019 - Retro DOS v4.0
  4102                                  
  4103 00000333 06                              push	ES
  4104 00000334 1E                      	push	DS
  4105 00000335 55                      	push	BP
  4106 00000336 57                      	push	DI
  4107 00000337 56                      	push	SI
  4108 00000338 52                      	push	DX
  4109 00000339 51                      	push	CX
  4110 0000033A 53                      	push	BX
  4111 0000033B 50                      	push	AX
  4112                                  
  4113 0000033C 8CD8                    	mov	AX,DS
  4114                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4115 0000033E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4116 00000343 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4117 00000346 891E[EA05]              	mov	[SAVEBX],BX
  4118                                  
  4119                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4120                                  	
  4121                                  	; 08/07/2018 - Retro DOS v3.0        
  4122                                  	;xor     ax,ax
  4123                                  	;mov     [USER_ID],ax
  4124                                  	;mov     ax,[CurrentPDB]
  4125                                  	;mov     [PROC_ID],ax
  4126                                  
  4127                                  	; 01/05/2019
  4128                                  
  4129                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4130                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4131                                  	; this!!!
  4132                                  
  4133 0000034A A1[8405]                	MOV     AX,[USER_SP]
  4134 0000034D A3[F205]                        MOV     [NSP],AX
  4135 00000350 A1[8605]                        MOV     AX,[USER_SS]
  4136 00000353 A3[F005]                        MOV     [NSS],AX
  4137                                  
  4138 00000356 31C0                    	xor	AX,AX ; 0
  4139 00000358 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4140                                  
  4141 0000035B F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4142 00000360 7503                    	jnz	short set_indos_flag	; if win386 present
  4143 00000362 A3[3E03]                	mov	[USER_ID],AX
  4144                                  set_indos_flag:
  4145 00000365 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4146                                  
  4147 00000369 8926[8405]                      MOV     [USER_SP],SP
  4148 0000036D 8C16[8605]                      MOV     [USER_SS],SS
  4149                                  
  4150 00000371 A1[3003]                	mov	AX,[CurrentPDB]
  4151 00000374 A3[3C03]                	mov	[PROC_ID],AX
  4152 00000377 8ED8                    	mov	DS,AX
  4153 00000379 58                      	pop	AX
  4154 0000037A 50                      	push	AX
  4155                                  
  4156                                  	; save user stack in his area for later returns (possibly from EXEC)
  4157                                  
  4158 0000037B 89262E00                        MOV     [PDB.USER_STACK],SP
  4159 0000037F 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4160                                  
  4161                                  	; 18/07/2018
  4162                                  	;mov	byte [CS:FSHARING], 0
  4163                                  
  4164                                  	;MOV     BX,CS			; no holes here.
  4165                                  	;MOV     SS,BX
  4166                                  
  4167                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4168 00000383 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4169                                  					;entry	REDISP
  4170                                  REDISP:
  4171 00000388 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4172 0000038B FB                              STI                             ; stack is in our space now...
  4173                                  
  4174 0000038C 8CD3                    	mov	bx,ss
  4175 0000038E 8EDB                    	mov	ds,bx
  4176                                  
  4177 00000390 93                      	xchg	ax,bx
  4178                                  
  4179 00000391 31C0                    	xor	ax,ax ; 0
  4180                                  
  4181                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4182                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4183                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4184                                  
  4185                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4186                                  
  4187                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4188                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4189                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4190                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4191                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4192                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4193                                  	;inc	ax
  4194                                  	;;inc	AL			; AL = 1
  4195                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4196                                  
  4197                                  	; 15/12/2022
  4198 00000393 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4199                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4200 00000396 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4201 0000039C A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4202                                  	;mov	byte [IDLEINT],1
  4203 0000039F A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4204 000003A2 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4205 000003A5 40                      	inc	ax
  4206                                  	;inc	al			; AL = 1
  4207 000003A6 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4208                                  
  4209 000003A9 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4210                                  
  4211 000003AA 88E3                    	MOV     BL,AH			
  4212 000003AC D1E3                            SHL     BX,1			; 2 bytes per call in table
  4213                                         
  4214 000003AE FC                      	CLD
  4215                                  		; Since the DOS maintains mucho state information across system
  4216                                  		; calls, we must be very careful about which stack we use.
  4217                                  		; First, all abort operations must be on the disk stack. This
  4218                                  		; is due to the fact that we may be hitting the disk (close
  4219                                  		; operations, flushing) and may need to report an INT 24.
  4220                                          
  4221 000003AF 08E4                    	OR      AH,AH
  4222 000003B1 7416                            JZ      SHORT DSKROUT		; ABORT
  4223                                  
  4224                                          ;CMP	AH,12
  4225                                          ;JBE	SHORT IOROUT		; Character I/O
  4226                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4227                                          ;JZ	SHORT IOROUT
  4228                                          ;CMP	AH,SET_CURRENT_PDB
  4229                                          ;JNZ	SHORT DSKROUT
  4230                                  
  4231                                  		; Second, PRINT and PSPRINT and the server issue
  4232                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4233                                  		; This call MUST, therefore, use the AUXSTACK.
  4234                                  
  4235                                  	; 10/08/2018
  4236 000003B3 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4237 000003B6 7434                    	je      short DISPCALL
  4238                                  	
  4239                                  	; 01/05/2019
  4240                                  	
  4241                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4242                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4243                                  
  4244 000003B8 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4245 000003BB 770C                    	ja      short DSKROUT
  4246                                  
  4247                                  IOROUT:
  4248                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4249                                  	; (ss: prefix was not needed here! ds=ss)
  4250                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4251                                  	; 15/12/2022
  4252 000003BD 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4253 000003C2 7528                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4254 000003C4 BC[A00A]                        MOV     SP,IOSTACK
  4255 000003C7 EB23                            JMP     SHORT DISPCALL
  4256                                  
  4257                                  		; We are on a system call that is classified as "the rest".
  4258                                  		; We place ourselves onto the DSKSTACK and away we go.
  4259                                  		; We know at this point:
  4260                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4261                                  		;    ErrorMode and WpErr
  4262                                  		; *  That there can be no critical sections in effect.
  4263                                  		;    We signal the server to remove all the resources.
  4264                                  
  4265                                  DSKROUT:
  4266                                  	; 01/01/2024
  4267                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4268                                  	; 08/07/2018 - Retro DOS v3.0
  4269 000003C9 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4270                                  	; 01/01/2024
  4271                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4272                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4273                                  	                   		; make sure flags are reset
  4274 000003CC C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4275                                  
  4276                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4277                                  	; (ss: prefix was not needed here! ds=ss)
  4278                                  
  4279                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4280                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4281                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4282                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4283                                                                          ; make sure flags are reset
  4284 000003D2 50                      	push    ax
  4285 000003D3 B482                    	mov     ah,82h			; Release all resource information
  4286 000003D5 CD2A                    	int     2Ah 		; Microsoft Networks 
  4287                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4288 000003D7 58                      	pop     ax
  4289                                  
  4290                                  		; Since we are going to be running on the DSKStack and since
  4291                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4292                                  		; generation of INT 28's.
  4293                                  
  4294                                  	; 15/12/2022
  4295                                  	;mov     byte [ss:IDLEINT],0
  4296                                  	;
  4297                                          ;mov	sp,DSKSTACK
  4298                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4299                                          ;jz	short DISPCALL
  4300                                  
  4301 000003D8 C606[5803]00            	mov     byte [IDLEINT],0
  4302                                  
  4303 000003DD BC[2009]                	MOV     SP,DSKSTACK
  4304 000003E0 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4305 000003E5 7405                    	JZ      SHORT DISPCALL
  4306                                  
  4307 000003E7 50                              PUSH    AX
  4308                                          ;invoke	DSKSTATCHK
  4309 000003E8 E8BC4C                          CALL	DSKSTATCHK
  4310 000003EB 58                      	POP     AX
  4311                                  DISPCALL:
  4312                                  	; 01/05/2019 - Retro DOS v4.0
  4313 000003EC 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4314                                  
  4315                                  	; 15/12/2022
  4316 000003F1 871E[EA05]              	xchg	bx,[SAVEBX]
  4317 000003F5 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4318                                  
  4319                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4320                                  	; (ss: prefix was not needed here! ds=ss)        
  4321                                  	;xchg	bx,[ss:SAVEBX]
  4322                                  	;mov	ds,[ss:SAVEDS]
  4323                                  
  4324 000003F9 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4325                                  
  4326                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4327                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4328                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4329                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4330                                  	; because this bit is used to indicate to the next int 21 call that
  4331                                  	; the previous int 21 was an exec.
  4332                                  	;
  4333                                  	; So do not add any code between the call above and the label 
  4334                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4335                                  
  4336                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4337 000003FE 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4338                                  
  4339                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4340                                  ; DOSCODE:41F7h
  4341                                  
  4342                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  4343                                  ; DOSCODE:4204h
  4344                                  
  4345                                  ;entry LEAVE
  4346                                  ;;;_LEAVE:				; Exit from a system call
  4347                                  LeaveDOS: ; 18/07/2018 
  4348                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4349 00000404 FA                      	CLI
  4350                                  
  4351                                  	; 01/05/2019
  4352                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4353 00000405 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4354 0000040A 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4355 0000040F 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4356                                  
  4357                                  LeaveA20On:
  4358 00000411 FE0E[2103]                      DEC     BYTE [INDOS]
  4359                                          ; 04/11/2022
  4360 00000415 8E16[8605]              	mov	ss,[USER_SS]
  4361 00000419 8B26[8405]              	MOV     SP,[USER_SP]
  4362                                  	;MOV	SS,[USER_SS]
  4363 0000041D 89E5                    	MOV     BP,SP
  4364                                  	;MOV	[BP.user_AX],AL	
  4365                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4366                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4367                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4368                                  
  4369                                  	; 15/12/2022
  4370 0000041F 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4371                                  	
  4372                                  	;MOV	AX,[NSP]
  4373                                          ;MOV	[USER_SP],AX
  4374                                          ;MOV	AX,[NSS]
  4375                                          ;MOV	[USER_SS],AX
  4376                                  	; 01/01/2024
  4377 00000422 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4378 00000426 A3[8605]                	mov	[USER_SS],ax
  4379 00000429 8C06[8405]              	mov	[USER_SP],es
  4380                                  
  4381 0000042D 58                      	pop	AX
  4382 0000042E 5B                      	pop	BX
  4383 0000042F 59                      	pop	CX
  4384 00000430 5A                      	pop	DX
  4385 00000431 5E                      	pop	SI
  4386 00000432 5F                      	pop	DI
  4387 00000433 5D                      	pop	BP
  4388 00000434 1F                      	pop	DS
  4389 00000435 07                      	pop	ES
  4390                                  
  4391 00000436 CF                              IRET
  4392                                  
  4393                                  disa20:	   				; M068 - Start
  4394 00000437 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4395 0000043B 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4396 0000043F 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4397                                  					;    a20 off
  4398                                  					; Y: turn a20 off and dec a20off_count
  4399 00000441 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4400                                   					; Start - M004
  4401 00000445 1E                      	push	ds			; segment of stub
  4402 00000446 BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4403 00000449 53                      	push	bx
  4404 0000044A CB                      	retf	  			; go to stub
  4405                                  					; End - M004
  4406                                  ;SYSTEM_CALL ENDP
  4407                                  
  4408                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4409                                  ; 04/11/2022
  4410                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4411                                  
  4412                                  ; ==========================================================================
  4413                                  ;
  4414                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4415                                  ; the stack prior to giving the user control
  4416                                  ;
  4417                                  ; ==========================================================================
  4418                                  
  4419                                  ; 01/05/2019 - Retro DOS v4.0
  4420                                  
  4421                                          ;procedure restore_world,NEAR
  4422                                  restore_world:
  4423                                  	;getdseg <es>		; es -> dosdata
  4424 0000044B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4425                                  
  4426 00000450 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4427                                  
  4428 00000455 58                              POP     AX
  4429 00000456 5B                              POP     BX
  4430 00000457 59                              POP     CX
  4431 00000458 5A                              POP     DX
  4432 00000459 5E                              POP     SI
  4433 0000045A 5F                              POP     DI
  4434 0000045B 5D                              POP     BP
  4435 0000045C 1F                              POP     DS
  4436                                  
  4437 0000045D 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4438                                  
  4439                                  ;restore_world	ENDP
  4440                                  
  4441                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4442                                  
  4443                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4444                                  ; 04/11/2022
  4445                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4446                                  
  4447                                  ; ==========================================================================
  4448                                  ;
  4449                                  ; Save_World saves complete registers on the stack
  4450                                  ;
  4451                                  ; ==========================================================================
  4452                                  
  4453                                          ;procedure save_world,NEAR
  4454                                  save_world:
  4455                                  	;getdseg <es>		; es -> dosdata
  4456 00000462 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4457                                  
  4458 00000467 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4459                                  
  4460                                  	; 12/05/2019
  4461                                          
  4462 0000046C 1E                      	PUSH    DS
  4463 0000046D 55                              PUSH    BP
  4464 0000046E 57                              PUSH    DI
  4465 0000046F 56                              PUSH    SI
  4466 00000470 52                              PUSH    DX
  4467 00000471 51                              PUSH    CX
  4468 00000472 53                              PUSH    BX
  4469 00000473 50                              PUSH    AX
  4470                                  
  4471 00000474 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4472                                  
  4473 00000479 55                      	push	BP		
  4474 0000047A 89E5                    	mov	BP,SP
  4475 0000047C 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4476 0000047F 5D                      	pop	BP
  4477                                  	
  4478 00000480 C3                      	retn
  4479                                  
  4480                                  ;save_world	ENDP
  4481                                  
  4482                                  ; 01/05/2019
  4483                                  
  4484                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4485                                  ; 04/11/2022
  4486                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4487                                  
  4488                                  ; ==========================================================================
  4489                                  ;
  4490                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4491                                  ;
  4492                                  ; ==========================================================================
  4493                                  
  4494                                          ;procedure get_user_stack,NEAR
  4495                                  Get_User_Stack:
  4496                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4497 00000481 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4498 00000486 C536[8405]                      lds	si,[USER_SP]
  4499 0000048A C3                      	retn
  4500                                  
  4501                                  ;get_user_stack  ENDP
  4502                                  
  4503                                  ; 22/12/2022
  4504                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4505                                  ;%if 0
  4506                                  
  4507                                  ; ---------------------------------------------------------------------------
  4508                                  ;
  4509                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4510                                  ; Inputs:
  4511                                  ;	User registers, User Stack, INTS disabled
  4512                                  ;	If CALL F8, DS:DX is new handler address
  4513                                  ; Function:
  4514                                  ;	Process OEM INT 21 extensions
  4515                                  ; Outputs:
  4516                                  ;	Jumps to OEM_HANDLER if appropriate
  4517                                  ;
  4518                                  ; ---------------------------------------------------------------------------
  4519                                  
  4520                                  ;IF	NOT IBM
  4521                                  
  4522                                  _$SET_OEM_HANDLER:
  4523                                  	; 01/05/2019 - Retro DOS v4.0
  4524                                  	
  4525                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4526                                  	;(jb	short NOTOOEM)
  4527                                  
  4528 0000048B 06                      	push	es ; *
  4529                                  	;getdseg <es>			; es -> dosdata
  4530 0000048C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4531                                  
  4532 00000491 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4533                                  						; (message) request	
  4534                                  	; AH = 0F8h = SET OEM HANDLER
  4535                                  
  4536 00000493 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4537 00000498 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4538                                  
  4539 0000049D 07                      	pop	es ; *
  4540                                  
  4541 0000049E CF                      	IRET                            ; Quick return, Have altered no registers
  4542                                  
  4543                                  check_trueversion_request:
  4544                                  	; 18/07/2019 - Retro DOS v3.0
  4545                                  
  4546                                  	; Retro DOS v2.0 - 20/04/2018
  4547 0000049F 83F8FF                  	CMP	AX,0FFFFh
  4548                                  	; 18/07/2018
  4549 000004A2 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4550                                  
  4551                                  	; 01/05/2019
  4552 000004A4 07                      	pop	es ; *
  4553                                  
  4554 000004A5 B40E                    	mov	ah,0Eh
  4555                                  
  4556                                  	; Retro DOS v4.0 feature only!
  4557 000004A7 81FBA101                	cmp	bx,417  ; Signature to bypass
  4558                                  			; Retro DOS true version message	
  4559 000004AB 7414                    	je	short true_version_iret
  4560                                  
  4561 000004AD 56                      	push	si
  4562 000004AE 53                      	push	bx
  4563                                  
  4564 000004AF BE[BF00]                	mov	si,RETRODOSMSG
  4565                                  wrdosmsg:
  4566                                  	;movb	ah,0Eh
  4567 000004B2 BB0700                  	mov	bx,7
  4568                                  wrdosmsg_nxt:
  4569 000004B5 2EAC                    	cs	lodsb
  4570 000004B7 3C24                    	cmp	al,'$'
  4571 000004B9 7404                    	je	short wrdosmsg_ok		
  4572 000004BB CD10                    	int	10h
  4573 000004BD EBF6                    	jmp	short wrdosmsg_nxt
  4574                                  
  4575                                  wrdosmsg_ok:
  4576 000004BF 5B                      	pop	bx
  4577 000004C0 5E                      	pop	si
  4578                                  
  4579                                  true_version_iret:
  4580                                  	; ah = 0Eh
  4581                                  	;mov	al,40h ; Retro DOS v4.0
  4582                                  	; 
  4583                                  	;mov	al,41h ; Retro DOS v4.1 
  4584                                  	; 30/12/2022
  4585 000004C1 B042                    	mov	al,42h ; Retro DOS v4.2
  4586 000004C3 CF                      	iret
  4587                                  
  4588                                  	; If above F8 try to jump to handler
  4589                                  
  4590                                  DO_OEM_FUNC:
  4591                                  	; 01/05/2019
  4592 000004C4 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4593 000004CA 7504                    	JNE     short OEM_JMP
  4594 000004CC 07                      	pop	es ; *
  4595 000004CD E910FE                  	JMP     BADCALL                 ; Handler not initialized
  4596                                  OEM_JMP:
  4597 000004D0 06                      	push	es
  4598 000004D1 1F                      	pop	ds ; DOSDATA segment !
  4599 000004D2 07                      	pop	es ; *
  4600                                  
  4601                                  	; 22/12/2022
  4602 000004D3 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4603                                  
  4604 000004D4 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4605                                  
  4606                                  ;       ENDIF
  4607                                  
  4608                                  ; ---------------------------------------------------------------------------
  4609                                  
  4610                                  ;%endif
  4611                                  
  4612                                  ;============================================================================
  4613                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4614                                  ;============================================================================
  4615                                  ; 17/07/2018 - Retro DOS v3.0
  4616                                  
  4617                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4618                                  ;	NAME	IBMCODE
  4619                                  
  4620                                  ;BREAK <NullDev -- Driver for null device>
  4621                                  
  4622                                  ; ROMDOS note:
  4623                                  ;	NUL device driver used to be here, but it was removed and placed in
  4624                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4625                                  ;	header, which is also in DOSDATA.
  4626                                  
  4627                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4628                                  
  4629                                  ;----------------------------------------------------------------------------
  4630                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4631                                  ;----------------------------------------------------------------------------
  4632                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4633                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4634                                  
  4635                                  ;Public MSC001S,MSC001E
  4636                                  ;MSC001S label byte
  4637                                  	;IF	IBM
  4638                                  ; Codes returned by BIOS
  4639                                  ERRIN:
  4640 000004D8 02                      	DB	2			; NO RESPONSE
  4641 000004D9 06                      	DB	6			; SEEK FAILURE
  4642 000004DA 0C                      	DB	12			; GENERAL ERROR
  4643 000004DB 04                      	DB	4			; BAD CRC
  4644 000004DC 08                      	DB	8			; SECTOR NOT FOUND
  4645 000004DD 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4646                                  ERROUT:
  4647                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4648 000004DE 80                      	DB	80H			; NO RESPONSE
  4649 000004DF 40                      	DB	40H			; Seek failure
  4650 000004E0 02                      	DB	2			; Address Mark not found
  4651 000004E1 10                      	DB	10H			; BAD CRC
  4652 000004E2 04                      	DB	4			; SECTOR NOT FOUND
  4653 000004E3 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4654                                  
  4655                                  NUMERR	EQU	$-ERROUT
  4656                                  	;ENDIF
  4657                                  ;MSC001E label byte
  4658                                  ;----------------------------------------------------------------------------
  4659                                  
  4660                                  ;============================================================================
  4661                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4662                                  ;============================================================================
  4663                                  ; 18/07/2018 - Retro DOS v3.0
  4664                                  ; 15/05/2019 - Retro DOS v4.0
  4665                                  
  4666                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4667                                  
  4668                                  ;   AbsSetup - setup for abs disk functions
  4669                                  ;----------------------------------------------------------------------------
  4670                                  
  4671                                  AbsSetup:
  4672                                  	; 02/01/2024
  4673 000004E4 1E                      	push	ds ; *
  4674 000004E5 16                      	push	ss
  4675 000004E6 1F                      	pop	ds
  4676 000004E7 FE06[2103]              	inc	byte [INDOS]
  4677                                  	;INC	byte [SS:INDOS]		; SS override
  4678 000004EB FB                      	STI
  4679 000004EC FC                      	CLD
  4680                                  	; 02/01/2024
  4681                                  	;PUSH	DS
  4682                                  	;push	ss
  4683                                  	;pop	ds
  4684 000004ED E80901                  	CALL	GETBP
  4685                                  	; 02/01/2024
  4686 000004F0 1F                      	pop	ds ; *
  4687 000004F1 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4688                                  	;mov	word [es:bp+1Fh]
  4689 000004F3 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4690                                  
  4691                                  	; 02/01/2024
  4692                                  ;errdriv:
  4693                                  ;	POP	DS
  4694                                  ;	jnc	short AbsSetup2
  4695                                  ;AbsSetup_retn:
  4696                                  ;	retn
  4697                                  
  4698                                  AbsSetup2:
  4699                                  	; 15/05/2019 - Retro DOS v4.0
  4700                                  	; MSDOS 6.0
  4701                                  					; SS override
  4702 000004F9 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4703 00000500 E83504                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4704 00000503 7227                    	jc	short AbsSetup_retn
  4705 00000505 E82A56                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4706                                  
  4707                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4708 00000508 1E                      	PUSH	DS
  4709 00000509 56                      	PUSH	SI
  4710 0000050A 50                      	PUSH	AX
  4711                                  
  4712 0000050B 16                      	push	ss
  4713 0000050C 1F                      	pop	ds
  4714                                  	
  4715 0000050D BE[BE03]                	MOV	SI,OPENBUF
  4716 00000510 8804                    	MOV	[SI],AL
  4717 00000512 800441                  	ADD	BYTE [SI],"A"
  4718 00000515 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4719 0000051A B80003                  	MOV	AX,0300H
  4720 0000051D F8                      	CLC
  4721 0000051E CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4722                                  		
  4723                                  		; 04/11/2022
  4724                                  		; (INT 2Ah - AX = 0300h)
  4725                                  		; Microsoft Networks - CHECK DIRECT I/O
  4726                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4727                                  		;    only drive specifier--must include the colon)
  4728                                  		; Return: CF clear if absolute disk access allowed
  4729                                  
  4730 00000520 58                      	POP	AX
  4731 00000521 5E                      	POP	SI
  4732 00000522 1F                      	POP	DS
  4733 00000523 7307                    	jnc	short AbsSetup_retn
  4734                                  
  4735                                  	;mov	word [ss:EXTERR],32h
  4736 00000525 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4737                                  errdriv:	; 02/01/2024
  4738                                  AbsSetup_retn:
  4739 0000052C C3                      	retn
  4740                                  
  4741                                  ;---------------------------------------------------------------------------
  4742                                  ;
  4743                                  ; Procedure Name : ABSDRD
  4744                                  ;
  4745                                  ; Interrupt 25 handler. Performs absolute disk read.
  4746                                  ; Inputs:	AL - 0-based drive number
  4747                                  ;		DS:BX point to destination buffer
  4748                                  ;		CX number of logical sectors to read
  4749                                  ;		DX starting logical sector number (0-based)
  4750                                  ; Outputs:	Original flags still on stack
  4751                                  ;		Carry set
  4752                                  ;		    AH error from BIOS
  4753                                  ;		    AL same as low byte of DI from INT 24
  4754                                  ;
  4755                                  ;---------------------------------------------------------------------------
  4756                                          ;procedure   ABSDRD,FAR
  4757                                  ABSDRD:
  4758                                  	; 15/05/2019 - Retro DOS v4.0
  4759                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4760                                  	; 04/11/2022
  4761                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4762                                  	
  4763                                  	; MSDOS 6.0
  4764 0000052D FA                      	CLI
  4765                                  	
  4766                                  ;	set up ds to point to DOSDATA
  4767                                  
  4768 0000052E 50                      	push	ax			; preserve AX value
  4769 0000052F 8CD8                    	mov	ax,ds			; store DS value in AX
  4770                                  	;getdseg <ds>
  4771 00000531 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4772 00000536 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4773 00000539 58                      	pop	ax			; restore AX value
  4774                                  
  4775                                  	; M072:
  4776                                  	; We shall save es on the user stack here. We need to use ES in
  4777                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4778                                  	; time in order to restore the user stack.
  4779                                  
  4780 0000053A 06                      	push	es  ; ****		; M072
  4781                                  
  4782 0000053B 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4783 0000053F 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4784                                  
  4785                                  ; 	set up ss to point to DOSDATA
  4786                                  ;
  4787                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4788                                  ; version of the getdseg macro with the SS register! An interrupt will
  4789                                  ; sneak through.
  4790                                  
  4791                                  ;ifndef ROMDOS
  4792                                  	;getdseg <ss>			; cli in entry of routine
  4793 00000543 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4794                                  ;else
  4795                                  ;	mov	ds, cs:[BioDataSeg]
  4796                                  ;	assume	ds:bdata
  4797                                  ;
  4798                                  ;	mov	ss, ds:[DosDataSg]
  4799                                  ;	assume	ss:DOSDATA
  4800                                  ;
  4801                                  ;endif ; ROMDOS
  4802                                  
  4803 00000548 BC[2009]                	MOV	SP,DSKSTACK
  4804                                  
  4805 0000054B 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4806                                  
  4807 0000054F 06                      	push	es ; *** (MSDOS 6.21)
  4808 00000550 E80FFF                  	call	save_world		; save all regs
  4809                                  
  4810 00000553 06                      	PUSH	ES ; **
  4811 00000554 E88DFF                  	CALL	AbsSetup
  4812 00000557 723D                    	JC	short ILEAVE
  4813                                  
  4814                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4815                                  	;  the secondary cache. The secondary cache does not check for media
  4816                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4817                                  	;  read, and get data from the previous disk. To get around this,
  4818                                  	;  we just won't use the secondary cache for absolute disk reads.
  4819                                  	;                                                      -mw 8/5/88
  4820                                  
  4821                                  	;EnterCrit critDisk
  4822 00000559 E8B10D                  	call	ECritDisk
  4823 0000055C 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4824                                  	;LeaveCrit critDisk
  4825 00000562 E8C30D                  	call	LCritDisk
  4826                                  
  4827                                          ;invoke	DSKREAD
  4828 00000565 E8EA31                  	CALL	DSKREAD
  4829 00000568 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4830                                  
  4831 0000056A 89F9                            mov     cx,di
  4832 0000056C 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4833 00000571 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4834                                  
  4835                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4836                                  ;            sectors, also termed an "Extent".)
  4837                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4838                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4839                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4840                                  ;
  4841                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4842                                  ;	buffers must be "read" into the transfer memory block, so that the
  4843                                  ;       transfer memory reflects the most recent data.
  4844                                  
  4845                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4846 00000576 E82934                          call	DskRdBufScan
  4847 00000579 EB1B                    	jmp     short ILEAVE
  4848                                  
  4849                                  TLEAVE:
  4850 0000057B 7419                    	JZ	short ILEAVE
  4851                                  
  4852                                  ERR_LEAVE:				; M039
  4853                                  	; 15/07/2018 - Retro DOS v3.0
  4854                                          ;IF	IBM
  4855                                  ; Translate the error code to ancient 1.1 codes
  4856 0000057D 06                              PUSH    ES ; *
  4857 0000057E 0E                              PUSH    CS
  4858 0000057F 07                              POP     ES
  4859 00000580 30E4                            XOR     AH,AH			; Nul error code
  4860                                  	;mov	cx,6
  4861 00000582 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4862 00000585 BF[D804]                        MOV     DI,ERRIN		; Point to error conditions
  4863 00000588 F2AE                            REPNE   SCASB
  4864 0000058A 7504                            JNZ     SHORT LEAVECODE		; Not found
  4865                                  	;mov	ah,[ES:DI+5]
  4866 0000058C 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4867                                  LEAVECODE:
  4868 00000590 07                              POP     ES ; *
  4869                                  	; 15/05/2019 - Retro DOS v4.0
  4870 00000591 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4871                                          ;ENDIF
  4872                                  
  4873 00000595 F9                              STC
  4874                                  ILEAVE:
  4875                                  	; 15/05/2019
  4876 00000596 07                              POP     ES ; **
  4877 00000597 E8B1FE                  	call	restore_world
  4878 0000059A 07                              pop	es ; *** (MSDOS 6.21)
  4879 0000059B FA                      	CLI
  4880 0000059C 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4881 000005A0 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4882 000005A5 16                              push	ss			; M072 - Start
  4883 000005A6 07                      	pop	es			; es - dosdata
  4884 000005A7 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4885 000005AC 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4886 000005B1 07                      	pop	es  ; ****		; Note es was saved on user
  4887                                  					; stack at entry 
  4888                                  					; M072 - End
  4889 000005B2 FB                              STI
  4890 000005B3 CB                      	RETF   ; ! FAR return !
  4891                                  
  4892                                  ;ABSDRD	ENDP
  4893                                  
  4894                                  ;---------------------------------------------------------------------------
  4895                                  ;
  4896                                  ; Procedure Name : ABSDWRT
  4897                                  ;
  4898                                  ; Interrupt 26 handler. Performs absolute disk write.
  4899                                  ; Inputs:	AL - 0-based drive number
  4900                                  ;		DS:BX point to source buffer
  4901                                  ;		CX number of logical sectors to write
  4902                                  ;		DX starting logical sector number (0-based)
  4903                                  ; Outputs:	Original flags still on stack
  4904                                  ;		Carry set
  4905                                  ;		    AH error from BIOS
  4906                                  ;		    AL same as low byte of DI from INT 24
  4907                                  ;
  4908                                  ;---------------------------------------------------------------------------
  4909                                          ;procedure   ABSDWRT,FAR
  4910                                  ABSDWRT:
  4911                                  	; 15/05/2019 - Retro DOS v4.0
  4912                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4913                                  	; 04/11/2022
  4914                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4915                                  
  4916 000005B4 FA                      	CLI
  4917                                  
  4918                                  ;	set up ds to point to DOSDATA
  4919                                  
  4920 000005B5 50                      	push	ax
  4921 000005B6 8CD8                    	mov	ax,ds
  4922                                  	;getdseg <ds>
  4923 000005B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4924 000005BD A3[0A0D]                	mov	[TEMPSEG],ax
  4925 000005C0 58                      	pop	ax
  4926                                  
  4927                                  	; M072:
  4928                                  	; We shall save es on the user stack here. We need to use ES in
  4929                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4930                                  	; time in order to restore the user stack.
  4931                                  
  4932 000005C1 06                      	push	es ; ****		; M072
  4933                                  
  4934 000005C2 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4935 000005C6 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4936                                  
  4937                                  	; set up ss to point to DOSDATA
  4938                                  	;
  4939                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4940                                  	; ROMDOS version of the getdseg macro with the SS register!
  4941                                  	; An interrupt will sneak through.
  4942                                  
  4943                                  ;ifndef ROMDOS
  4944                                  	;getdseg <ss>			; cli in entry of routine
  4945 000005CA 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4946                                  ;else
  4947                                  ;	mov	ds, cs:[BioDataSeg]
  4948                                  ;	assume	ds:bdata
  4949                                  ;
  4950                                  ;	mov	ss, ds:[DosDataSg]
  4951                                  ;	assume	ss:DOSDATA
  4952                                  ;
  4953                                  ;endif ; ROMDOS
  4954                                  
  4955 000005CF BC[2009]                	MOV	SP,DSKSTACK
  4956                                  		; we are now switched to DOS's disk stack
  4957                                  
  4958 000005D2 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4959                                  
  4960 000005D6 06                      	push	es ; *** (MSDOS 6.21)
  4961                                  
  4962 000005D7 E888FE                  	call	save_world	      	; save all regs
  4963                                  
  4964 000005DA 06                      	PUSH	ES ; **
  4965 000005DB E806FF                  	CALL	AbsSetup
  4966 000005DE 72B6                    	JC	short ILEAVE
  4967                                  
  4968                                  	;EnterCrit critDisk
  4969 000005E0 E82A0D                  	call	ECritDisk
  4970 000005E3 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4971 000005E9 E89103                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4972                                  	;LeaveCrit critDisk
  4973 000005EC E8390D                  	call	LCritDisk
  4974                                  
  4975                                  ;M039
  4976                                  ;       DS:BX = transfer address (source data address).
  4977                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4978                                  ;	     sectors, also termed an "Extent".)
  4979                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4980                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4981                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4982                                  ;
  4983                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4984                                  ;       written. Note that all the above registers are preserved for
  4985                                  ;       DSKWRITE.
  4986                                  
  4987 000005EF 1E                              push    ds
  4988                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4989 000005F0 E8C636                  	call	DskWrtBufPurge
  4990 000005F3 1F                              pop     ds
  4991                                  ;M039
  4992                                  	;invoke	DSKWRITE
  4993 000005F4 E88431                  	call	DSKWRITE
  4994 000005F7 EB82                    	JMP	short TLEAVE
  4995                                  
  4996                                  ;ABSDWRT ENDP
  4997                                  
  4998                                  ;----------------------------------------------------------------------------
  4999                                  ;
  5000                                  ; Procedure Name : GETBP
  5001                                  ;
  5002                                  ; Inputs:
  5003                                  ;	AL = Logical unit number (A = 0)
  5004                                  ; Function:
  5005                                  ;	Find Drive Parameter Block
  5006                                  ; Outputs:
  5007                                  ;	ES:BP points to DPB
  5008                                  ;	[THISDPB] = ES:BP
  5009                                  ;	Carry set if unit number bad or unit is a NET device.
  5010                                  ;		Later case sets extended error error_I24_not_supported
  5011                                  ; No other registers alteredjjj
  5012                                  ;
  5013                                  ;----------------------------------------------------------------------------
  5014                                  
  5015                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5016                                  GETBP:
  5017                                  	; 15/05/2019 - Retro DOS v4.0
  5018                                  	; 11/07/2018 - Retro DOS v3.0
  5019 000005F9 50                      	PUSH	AX
  5020 000005FA 0401                    	ADD	AL, 1		; No increment; need carry flag
  5021 000005FC 7216                    	JC	SHORT SKIPGET
  5022 000005FE E88964                  	CALL	GETTHISDRV
  5023                                  	; MSDOS 6.0
  5024 00000601 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5025 00000603 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5026 00000605 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  5027 00000608 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5028 0000060A F9                      	STC				;DCR.			;AN000;
  5029 0000060B A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5030 0000060E C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  5031                                  SKIPGET:
  5032 00000614 58                      	POP	AX
  5033 00000615 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  5034                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5035                                  	;jnc	short getbp_t
  5036                                  	;retn
  5037                                  getbp_t:
  5038 00000617 C42E[A205]              	LES	BP,[THISCDS]
  5039                                  	; 15/12/2022
  5040 0000061B 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5041                                  	; 07/12/2022
  5042                                  	;TEST	WORD [ES:BP+43H],8000H
  5043                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5044 00000620 7408                    	JZ	SHORT GETBP_CDS
  5045 00000622 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5046 00000628 F9                      	STC
  5047                                  GETBP_RETN:
  5048 00000629 C3                      	RETN
  5049                                  
  5050                                  GETBP_CDS:
  5051                                  	;LES	BP,[ES:BP+45H]
  5052 0000062A 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5053                                  GOTDPB:
  5054                                  	; Load THISDPB from ES:BP
  5055 0000062E 892E[8A05]              	MOV	[THISDPB],BP
  5056 00000632 8C06[8C05]              	MOV	[THISDPB+2],ES
  5057 00000636 C3                      	RETN
  5058                                  
  5059                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5060                                  
  5061                                  ;----------------------------------------------------------------------------
  5062                                  ;
  5063                                  ; Procedure Name : SYS_RETURN
  5064                                  ;
  5065                                  ; These are the general system call exit mechanisms. All internal system
  5066                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5067                                  ; is to set the user's flags and set his AX register for return.
  5068                                  ;
  5069                                  ;----------------------------------------------------------------------------
  5070                                  
  5071                                          ;procedure   SYS_RETURN,NEAR
  5072                                  SYS_RETURN:        
  5073                                          ;entry	SYS_RET_OK
  5074                                  SYS_RET_OK:   
  5075 00000637 E847FE                  	call    Get_User_Stack
  5076                                  		; turn off user's carry flag
  5077                                  SYS_RET_OK_clc: ; 25/06/2019 
  5078                                          ;;and	word [SI+16h],0FFFEh 
  5079                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5080                                          ; 25/06/2019
  5081 0000063A 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5082 0000063E EB10                    	JMP     SHORT DO_RET
  5083                                  
  5084                                          ;entry   SYS_RET_ERR
  5085                                  SYS_RET_ERR:        
  5086 00000640 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5087 00000642 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5088 00000645 E81A00                  	CALL	ErrorMap
  5089                                  
  5090                                  	;entry	From_GetSet
  5091                                  From_GetSet:
  5092 00000648 E836FE                          call    Get_User_Stack
  5093                                  		 ; signal carry to user
  5094                                  	;;or	word [SI+16h],1
  5095                                  	;OR	word [SI+user_env.user_F],f_Carry
  5096                                  	; 25/06/2019
  5097 0000064B 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5098 0000064F F9                      	STC			; also, signal internal error
  5099                                  DO_RET:
  5100                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5101 00000650 8904                    	MOV	[SI],AX
  5102 00000652 C3                      	RETN
  5103                                  
  5104                                  	;entry	FCB_RET_OK
  5105                                  FCB_RET_OK:
  5106                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5107                                  NO_OP:
  5108 00000653 30C0                    	XOR	AL,AL
  5109 00000655 C3                      	retn
  5110                                  
  5111                                  	;entry	FCB_RET_ERR
  5112                                  FCB_RET_ERR:
  5113 00000656 30E4                    	XOR	AH,AH
  5114 00000658 36A3[2403]              	mov	[ss:EXTERR],AX
  5115 0000065C E80300                  	CALL	ErrorMap
  5116 0000065F B0FF                    	MOV	AL,-1
  5117 00000661 C3                      	retn
  5118                                  
  5119                                  	;entry	ErrorMap
  5120                                  ErrorMap:
  5121 00000662 56                      	PUSH	SI
  5122                                  				; ERR_TABLE_21 is now in DOSDATA
  5123 00000663 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5124                                  				; SS override for FAILERR and EXTERR
  5125 00000666 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5126 0000066C 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5127                                  		 ; Ooops, this is the REAL reason
  5128                                  	;mov	word [SS:EXTERR],53h
  5129 0000066E 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5130                                  EXTENDED_NORMAL:
  5131 00000675 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5132 00000678 5E                      	POP	SI
  5133 00000679 C3                      	retn
  5134                                  
  5135                                  	;EndProc SYS_RETURN
  5136                                  
  5137                                  ;---------------------------------------------------------------------------
  5138                                  ;
  5139                                  ; Procedure Name : CAL_LK
  5140                                  ;
  5141                                  ; Inputs:
  5142                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5143                                  ;		(DS NEED not be DOSDATA)
  5144                                  ;	[EXTERR] is set with error
  5145                                  ; Function:
  5146                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5147                                  ; Outputs:
  5148                                  ;	[EXTERR_CLASS] set
  5149                                  ;	[EXTERR_ACTION] set
  5150                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5151                                  ; Destroys SI, FLAGS
  5152                                  ;
  5153                                  ;---------------------------------------------------------------------------
  5154                                  
  5155                                  	;procedure CAL_LK,NEAR
  5156                                  CAL_LK:
  5157 0000067A 1E                      	PUSH	DS
  5158 0000067B 50                      	PUSH	AX
  5159 0000067C 53                      	PUSH	BX
  5160                                  
  5161                                  ;M048	Context DS		; DS:SI -> Table
  5162                                  ;
  5163                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5164                                  ; is DOSDATA
  5165                                  
  5166                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5167                                  	; 15/05/2019 - Retro DOS v4.0
  5168 0000067D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5169                                  
  5170                                  	; 18/07/2018
  5171                                  	;push	ss
  5172                                  	;pop	ds
  5173                                  
  5174 00000682 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5175                                  TABLK1:
  5176 00000686 AC                      	LODSB
  5177                                  
  5178 00000687 3CFF                    	CMP	AL,0FFH
  5179 00000689 7409                    	JZ	short GOT_VALS	; End of table
  5180 0000068B 38D8                    	CMP	AL,BL
  5181 0000068D 7405                    	JZ	short GOT_VALS	; Got entry
  5182 0000068F 83C603                  	ADD	SI,3		; Next table entry
  5183                                  	; 15/08/2018
  5184 00000692 EBF2                    	JMP	short TABLK1
  5185                                  
  5186                                  GOT_VALS:
  5187 00000694 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5188                                  
  5189 00000695 80FCFF                  	CMP	AH,0FFH
  5190 00000698 7404                    	JZ	short NO_SET_ACT
  5191 0000069A 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5192                                  NO_SET_ACT:
  5193 0000069E 3CFF                    	CMP	AL,0FFH
  5194 000006A0 7403                    	JZ	short NO_SET_CLS
  5195 000006A2 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5196                                  NO_SET_CLS:
  5197 000006A5 AC                      	LODSB			; Get LOCUS
  5198                                  
  5199 000006A6 3CFF                    	CMP	AL,0FFH
  5200 000006A8 7403                    	JZ	short NO_SET_LOC
  5201 000006AA A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5202                                  NO_SET_LOC:
  5203 000006AD 5B                      	POP	BX
  5204 000006AE 58                      	POP	AX
  5205 000006AF 1F                      	POP	DS
  5206 000006B0 C3                      	retn
  5207                                  
  5208                                  	;EndProc CAL_LK
  5209                                  
  5210                                  ;---------------------------------------------------------------------------
  5211                                  ;
  5212                                  ; Procedure Name : ETAB_LK
  5213                                  ;
  5214                                  ; Inputs:
  5215                                  ;	AX is error code
  5216                                  ;	[USER_IN_AX] has AH value of system call involved
  5217                                  ; Function:
  5218                                  ;	Make sure error code is appropriate to this call.
  5219                                  ; Outputs:
  5220                                  ;	AX MAY be mapped error code
  5221                                  ;	[EXTERR] = Input AX
  5222                                  ; Destroys ONLY AX and FLAGS
  5223                                  ;
  5224                                  ;---------------------------------------------------------------------------
  5225                                  
  5226                                  	;procedure ETAB_LK,NEAR
  5227                                  
  5228                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5229 000006B1 1E                      	PUSH	DS
  5230 000006B2 56                      	PUSH	SI
  5231 000006B3 51                      	PUSH	CX
  5232 000006B4 53                      	PUSH	BX
  5233                                  
  5234                                  	;Context DS			; SS is DOSDATA
  5235                                  
  5236 000006B5 16                      	push	ss
  5237 000006B6 1F                      	pop	ds
  5238                                  
  5239 000006B7 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5240                                  
  5241                                  					; I21_MAP_E_TAB is now in DOSCODE
  5242 000006BA BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5243 000006BD 88C7                    	MOV	BH,AL			; Real code to BH
  5244 000006BF 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5245                                  TABLK2:
  5246                                  	; 15/05/2019 - Retro DOS v4.0
  5247 000006C3 2E                      	cs
  5248 000006C4 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5249                                  	
  5250                                  	; 18/07/2018 - Retro DOS v3.0
  5251                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5252                                  
  5253 000006C5 3CFF                    	CMP	AL,0FFH 		; End of table?
  5254 000006C7 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5255 000006C9 38D8                    	CMP	AL,BL			; Found call?
  5256 000006CB 740C                    	JZ	short GOT_CALL		; Yes
  5257 000006CD 86E0                    	XCHG	AH,AL			; Count to AL
  5258 000006CF 30E4                    	XOR	AH,AH			; Make word for add
  5259 000006D1 01C6                    	ADD	SI,AX			; Next table entry
  5260 000006D3 EBEE                    	JMP	short TABLK2
  5261                                  
  5262                                  NOT_IN_TABLE:
  5263 000006D5 88F8                    	MOV	AL,BH			; Restore original code
  5264 000006D7 EB0C                    	JMP	SHORT NO_MAP
  5265                                  
  5266                                  GOT_CALL:
  5267 000006D9 88E1                    	MOV	CL,AH
  5268 000006DB 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5269                                  CHECK_CODE:
  5270                                  	; 15/05/2019 - Retro DOS v4.0
  5271 000006DD 2E                      	cs
  5272 000006DE AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5273                                  
  5274                                  	; 18/07/2018
  5275                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5276                                  
  5277 000006DF 38F8                    	CMP	AL,BH			; Code OK?
  5278 000006E1 7402                    	JZ	short NO_MAP		; Yes
  5279 000006E3 E2F8                    	LOOP	CHECK_CODE
  5280                                  NO_MAP:
  5281 000006E5 30E4                    	XOR	AH,AH			; AX is now valid code
  5282 000006E7 5B                      	POP	BX
  5283 000006E8 59                      	POP	CX
  5284 000006E9 5E                      	POP	SI
  5285 000006EA 1F                      	POP	DS
  5286 000006EB C3                      	retn
  5287                                  
  5288                                  	;EndProc ETAB_LK
  5289                                  
  5290                                  ; 18/07/2018 - Retro DOS v3.0
  5291                                  ;---------------------------------------------------------------------------
  5292                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5293                                  
  5294                                  ;IF installed ; (*)
  5295                                  
  5296                                  ;---------------------------------------------------------------------------
  5297                                  ;
  5298                                  ; Procedure Name : SetBad
  5299                                  ;
  5300                                  ; SetBad sets up info for bad functions
  5301                                  ;
  5302                                  ;---------------------------------------------------------------------------
  5303                                  
  5304                                  SetBad:
  5305                                  	;mov	ax,1
  5306 000006EC B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5307                                  
  5308                                  	; MSDOS 3.3
  5309                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5310                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5311                                  
  5312                                  ;	set up ds to point to DOSDATA
  5313                                  
  5314                                  	; 15/05/2019 - Retro DOS v4.0
  5315                                  	; MSDOS 6.0
  5316 000006EF 1E                      	push	ds
  5317                                  
  5318                                  	;getdseg <ds>
  5319 000006F0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5320                                  
  5321 000006F5 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5322                                  
  5323 000006FA 1F                      	pop	ds	  	;hkn; restore ds
  5324                                  
  5325 000006FB F9                      	STC
  5326 000006FC C3                      	retn
  5327                                  
  5328                                  ;--------------------------------------------------------------------------
  5329                                  ;
  5330                                  ; Procedure Name : BadCall
  5331                                  ;
  5332                                  ; BadCall is the initial routine for bad function calls
  5333                                  ;
  5334                                  ;--------------------------------------------------------------------------
  5335                                  
  5336                                  BadCall:
  5337 000006FD E8ECFF                  	call	SetBad
  5338 00000700 CB                      	retf
  5339                                  
  5340                                  ;--------------------------------------------------------------------------
  5341                                  ;
  5342                                  ; OKCall always sets carry to off.
  5343                                  ;
  5344                                  ;-----------------------------------------------------------------------
  5345                                  
  5346                                  OKCall:
  5347 00000701 F8                      	CLC
  5348 00000702 CB                      	retf
  5349                                  
  5350                                  ;---------------------------------------------------------------------------
  5351                                  ;
  5352                                  ; Procedure Name : INT2F
  5353                                  ;
  5354                                  ; INT 2F handler works as follows:
  5355                                  ;   PUSH    AX
  5356                                  ;   MOV     AX,multiplex:function
  5357                                  ;   INT     2F
  5358                                  ;   POP     ...
  5359                                  ; The handler itself needs to make the AX available for the various routines.
  5360                                  ;
  5361                                  ;----------------------------------------------------------------------------
  5362                                  
  5363                                  ; 15/05/2019 - Retro DOS v4.0
  5364                                  
  5365                                  ;KERNEL_SEGMENT equ 70h
  5366                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5367                                  DOSBIODATASEG equ 70h
  5368                                  
  5369                                  ; retrodos4.s - offset in BIOSDATA
  5370                                  bios_i2f equ 5
  5371                                  
  5372                                  ;PUBLIC	Int2F
  5373                                  ;INT2F	PROC	FAR
  5374                                  
  5375                                  ; 15/05/2019
  5376                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5377                                  
  5378                                  ; 04/11/2022
  5379                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5380                                  
  5381                                  	; 05/01/2024
  5382                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5383                                  	; 18/07/2018 - Retro DOS v3.0
  5384                                  INT2F:
  5385                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5386                                  INT2FNT:
  5387                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5388 00000703 FB                      	STI
  5389                                  	;cmp	ah,11h
  5390 00000704 80FC11                  	CMP	AH,MultNET
  5391 00000707 750A                    	JNZ	short INT2FSHR
  5392                                  TestInstall:
  5393 00000709 08C0                    	OR	AL,AL
  5394 0000070B 7403                    	JZ	short Leave2F
  5395                                  BadFunc:
  5396 0000070D E8DCFF                  	CALL	SetBad
  5397                                  
  5398                                  	;entry	Leave2F
  5399                                  Leave2F:
  5400 00000710 CA0200                  	RETF	2			; long return + clear flags off stack
  5401                                  
  5402                                  INT2FSHR:
  5403                                  	;cmp	ah,10h
  5404 00000713 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5405 00000716 74F1                    	JZ	short TestInstall	; yes, check for installation
  5406                                  INT2FNLS:
  5407                                  	;cmp	ah,14h
  5408 00000718 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5409 0000071B 74EC                    	JZ	short TestInstall	; yes check for installation
  5410                                  INT2FDOS:
  5411                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5412                                  
  5413                                  	; 18/07/2018
  5414                                  	; MSDOS 3.3
  5415                                  	;;cmp	ah,12h	
  5416                                  	;CMP	AH,MultDOS
  5417                                  	;jz	short DispatchDOS
  5418                                  	;iret
  5419                                  
  5420                                  	; 15/05/2019
  5421                                  	; MSDOS 6.0
  5422                                  	;cmp	ah,12h	; 07/12/2022
  5423 0000071D 80FC12                  	CMP	AH,MultDOS
  5424 00000720 7503                    	JNZ	short check_win		;check if win386 broadcast
  5425 00000722 E9F201                  	jmp	DispatchDOS
  5426                                  
  5427                                  	; .... win386 .... 
  5428                                  
  5429                                  check_win:
  5430                                  	;cmp	ah,16h
  5431 00000725 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5432 00000728 7408                    	je	short Win386_Msg
  5433                                  
  5434                                  	; M044
  5435                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5436                                  	; of Windows. If so, do special action of going and saving last para
  5437                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5438                                  	; bug
  5439                                  
  5440 0000072A 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5441                                  	;jne	short next_i2f		; no, chain on
  5442                                  	; 15/12/2022
  5443                                  	;jmp	winold_swap		; yes, do desired action
  5444 0000072D 7442                    	je	short winold_swap
  5445 0000072F E90501                  	jmp	next_i2f
  5446                                  
  5447                                  	; 15/12/2022
  5448                                  ;next_i2f:
  5449                                  ;	;;;jmp	bios_i2f
  5450                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5451                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5452                                  ;	; 04/11/2022
  5453                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5454                                  
  5455                                  ;	IRET				; This assume that we are at the head
  5456                                  					; of the list
  5457                                  ;INT2F	ENDP
  5458                                  
  5459                                  ; 15/05/2019 - Retro DOS v4.0
  5460                                  
  5461                                  ; We have received a message from Win386. There are three possible
  5462                                  ; messages we could get from Win386:
  5463                                  ;
  5464                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5465                                  ;		  to the Win386 startup info structure.
  5466                                  ; Exit		- for this, we clear the IsWin386 flag.
  5467                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5468                                  ;		  has already been handled. this is indicated by setting
  5469                                  ;		  CX to a non-zero value.
  5470                                  
  5471                                  Win386_Msg:
  5472 00000732 1E                      	push	ds
  5473                                  
  5474                                  	;getdseg <DS>			; ds is DOSDATA
  5475 00000733 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5476                                  
  5477                                  	; For WIN386 2.xx instance data
  5478                                  
  5479 00000738 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5480 0000073A 7503                    	jne	short Win386_Msg_exit
  5481 0000073C E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5482                                  Win386_Msg_exit:
  5483 0000073F 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5484 00000741 7503                    	jne	short Win386_Msg_devcall
  5485 00000743 E92C01                  	jmp	Win386_Leaving
  5486                                  Win386_Msg_devcall:
  5487 00000746 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5488 00000748 7503                    	jne	short Win386_Msg_init
  5489 0000074A E96001                  	jmp	Win386_Query
  5490                                  Win386_Msg_init:
  5491 0000074D 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5492 0000074F 7403                    	je	short Win386_Starting
  5493 00000751 E9E200                  	jmp	win_nexti2f		; no, return
  5494                                  Win386_Starting:
  5495                                  	; 17/12/2022
  5496 00000754 F6C201                  	test	dl,1
  5497                                  	;test	dx,1			; is this really win386?
  5498 00000757 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5499 00000759 E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5500                                  Win386_vchk:
  5501                                  	; M018 -- start of block changes
  5502                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5503                                  	; than 030Ah, we skip the VxD presence check
  5504                                  
  5505                                  ;M067 -- Begin changes
  5506                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5507                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5508                                  ;So, we null out the VxD ptr before the check.
  5509                                  
  5510                                  	;mov	word [Win386_Info+6],0
  5511 0000075C C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5512                                  	;mov	word [Win386_Info+8],0
  5513 00000762 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5514                                  
  5515                                  ;M067 -- End changes
  5516                                  
  5517                                  ;ifdef JAPAN
  5518                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5519                                  ;else
  5520 00000768 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5521                                  ;endif
  5522                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5523 0000076C 724E                    	jb	short Win386_vxd
  5524 0000076E E9DD00                  	jmp	noVxD31
  5525                                  
  5526                                  	; 15/12/2022
  5527                                  winold_swap:
  5528 00000771 1E                      	push	ds
  5529 00000772 06                      	push	es
  5530 00000773 56                      	push	si
  5531 00000774 57                      	push	di
  5532 00000775 51                      	push	cx
  5533                                  
  5534                                  	;getdseg <ds>			;ds = DOSDATA
  5535 00000776 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5536                                  
  5537 0000077B 3C01                    	cmp	al,1			;swap Windows out call
  5538 0000077D 751B                    	jne	short swapin		;no, check if Swap in call
  5539 0000077F E88801                  	call	getwinlast
  5540 00000782 1E                      	push	ds
  5541 00000783 07                      	pop	es
  5542 00000784 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5543 00000786 31F6                    	xor	si,si
  5544 00000788 BF[0600]                	mov	di,WinoldPatch1
  5545 0000078B B90800                  	mov	cx,8
  5546 0000078E FC                      	cld
  5547 0000078F 51                      	push	cx
  5548 00000790 F3A4                    	rep	movsb			;save first 8 bytes
  5549 00000792 59                      	pop	cx
  5550 00000793 BF[CD0D]                	mov	di,WinoldPatch2
  5551 00000796 F3A4                    	rep	movsb			;save next 8 bytes
  5552 00000798 EB1B                    	jmp	short winold_done
  5553                                  swapin:
  5554 0000079A 3C02                    	cmp	al,2			;swap Windows in call?
  5555 0000079C 7517                    	jne	short winold_done	;no, something else, pass it on
  5556 0000079E E86901                  	call	getwinlast
  5557 000007A1 8EC6                    	mov	es,si
  5558 000007A3 31FF                    	xor	di,di
  5559 000007A5 BE[0600]                	mov	si,WinoldPatch1
  5560 000007A8 B90800                  	mov	cx,8
  5561 000007AB FC                      	cld
  5562 000007AC 51                      	push	cx
  5563 000007AD F3A4                    	rep	movsb			;restore first 8 bytes
  5564 000007AF 59                      	pop	cx
  5565 000007B0 BE[CD0D]                	mov	si,WinoldPatch2
  5566 000007B3 F3A4                    	rep	movsb			;restore next 8 bytes
  5567                                  winold_done:
  5568 000007B5 59                      	pop	cx
  5569 000007B6 5F                      	pop	di
  5570 000007B7 5E                      	pop	si
  5571 000007B8 07                      	pop	es
  5572 000007B9 1F                      	pop	ds
  5573 000007BA EB7B                    	jmp	short next_i2f		;chain on
  5574                                  	; 15/12/2022
  5575                                  	;jmp	next_i2f	
  5576                                  
  5577                                  Win386_vxd:
  5578 000007BC 50                      	push	ax
  5579 000007BD 53                      	push	bx
  5580 000007BE 51                      	push	cx
  5581 000007BF 52                      	push	dx
  5582 000007C0 56                      	push	si
  5583 000007C1 57                      	push	di			; save regs !!dont change order!!
  5584                                  
  5585 000007C2 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5586 000007C6 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5587 000007C9 741F                    	je	short Vxd31		; N: continue
  5588                                  					; Y: save arena associated with 
  5589                                  					;    umb_head
  5590                                  
  5591 000007CB C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5592                                  					; umb_arena
  5593 000007D0 1E                      	push	ds
  5594 000007D1 06                      	push	es
  5595                                  
  5596                                  	;mov	ax,ds
  5597                                  	;mov	es,ax			; es - > dosdata
  5598                                  	; 05/01/2024
  5599 000007D2 1E                      	push	ds
  5600 000007D3 07                      	pop	es
  5601                                  
  5602 000007D4 8EDB                    	mov	ds,bx
  5603 000007D6 31F6                    	xor	si,si			; ds:si -> umb_head
  5604                                  
  5605 000007D8 FC                      	cld
  5606                                  
  5607 000007D9 BF[F511]                	mov	di,UmbSave1
  5608 000007DC B90B00                  	mov	cx,11
  5609 000007DF F3A4                    	rep	movsb
  5610                                  
  5611 000007E1 BF[D50D]                	mov	di,UmbSave2
  5612                                  	;mov	cx,5
  5613                                  	; 18/12/2022
  5614 000007E4 B105                    	mov	cl,5
  5615 000007E6 F3A4                    	rep	movsb	
  5616                                  
  5617 000007E8 07                      	pop	es
  5618 000007E9 1F                      	pop	ds			; M062 - End
  5619                                  
  5620                                  Vxd31:
  5621                                  	;test	byte [DOS_FLAG],2
  5622 000007EA F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5623 000007EF 7408                    	jz	short Dont_Supress		; M066
  5624 000007F1 5F                      	pop	di				; M066
  5625 000007F2 5E                      	pop	si				; M066
  5626 000007F3 5A                      	pop	dx				; M066
  5627 000007F4 59                      	pop	cx				; M066
  5628 000007F5 5B                      	pop	bx				; M066
  5629 000007F6 58                      	pop	ax				; M066
  5630 000007F7 EB55                    	jmp	short noVxD31			; M066
  5631                                  
  5632                                  	; We check here if the VxD is available in the root of the boot drive. 
  5633                                  	; We do an extended open to suppress any error messages
  5634                                  	
  5635                                  Dont_Supress:
  5636 000007F9 A0[6900]                	mov	al,[BOOTDRIVE]
  5637 000007FC 0440                    	add	al,'A' - 1		; get drive letter
  5638 000007FE A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5639                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5640                                  	;mov	al,0			; no extended attributes
  5641                                  	; 18/12/2022
  5642 00000801 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5643 00000804 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5644                                  					; no inherit, suppress crit err
  5645 00000807 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5646 0000080A BA0100                  	mov	dx,1			; fail if file does not exist
  5647 0000080D BE[3110]                	mov	si,VxDpath	
  5648                                  					; path of VxD file
  5649 00000810 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5650                                  
  5651 00000813 CD21                    	int	21h			; do extended open
  5652                                  
  5653 00000815 5F                      	pop	di
  5654 00000816 5E                      	pop	si
  5655 00000817 5A                      	pop	dx
  5656 00000818 59                      	pop	cx
  5657                                  
  5658 00000819 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5659                                  
  5660                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5661                                  	; to indicate error to Windows after displaying message to user that 
  5662                                  	; VxD needs to be present to run Windows in enhanced mode.
  5663                                  
  5664 0000081B 52                      	push	dx
  5665 0000081C 1E                      	push	ds
  5666 0000081D 56                      	push	si
  5667 0000081E BE[B209]                	mov	si,NoVxDErrMsg
  5668 00000821 0E                      	push	cs
  5669 00000822 1F                      	pop	ds
  5670 00000823 B96300                  	mov	cx,VxDMesLen ; 99	;
  5671 00000826 B402                    	mov	ah,2			; write char to console
  5672 00000828 FC                      	cld
  5673                                  vxdlp:
  5674 00000829 AC                      	lodsb
  5675 0000082A 86D0                    	xchg	dl,al			; get char in dl
  5676 0000082C CD21                    	int	21h
  5677 0000082E E2F9                    	loop	vxdlp
  5678                                  
  5679 00000830 5E                      	pop	si
  5680 00000831 1F                      	pop	ds
  5681 00000832 5A                      	pop	dx
  5682 00000833 5B                      	pop	bx
  5683 00000834 58                      	pop	ax			;all registers restored
  5684 00000835 41                      	inc	cx			;cx != 0 to indicate error
  5685                                  	; 15/12/22022
  5686                                  	;jmp	win_nexti2f		;chain on
  5687                                  	;jmp	short win_nexti2f
  5688                                  
  5689                                  	; 15/12/2022
  5690                                  win_nexti2f:
  5691 00000836 1F                      	pop	ds
  5692                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5693                                  	; 15/12/2022
  5694                                  next_i2f:
  5695                                  	;;;jmp	bios_i2f
  5696                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5697                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5698                                  	; 04/11/2022
  5699 00000837 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5700                                  
  5701                                  VxDthere:
  5702 0000083C 89C3                    	mov	bx,ax
  5703 0000083E B43E                    	mov	ah,CLOSE ; 3Eh
  5704 00000840 CD21                    	int	21h			;close the file
  5705                                  
  5706                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5707                                  
  5708                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5709                                  	;mov	bx,Win386_Info
  5710                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5711                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5712                                  	; 15/12/2022
  5713 00000842 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5714 00000848 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5715                                  
  5716 0000084C 5B                      	pop	bx
  5717 0000084D 58                      	pop	ax
  5718                                  noVxD31:
  5719                                  	; M018; End of block changes
  5720                                  
  5721 0000084E 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5722 00000853 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5723                                  
  5724                                  	; M002;
  5725                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5726                                  
  5727 00000858 52                      	push	dx			; M002
  5728 00000859 89DA                    	mov	dx,bx			; M002
  5729                                  					; point ES:BX to Win386_Info ; M002
  5730 0000085B BB[E20F]                	mov	bx,Win386_Info 
  5731 0000085E 895702                  	mov	[bx+2],dx		; M002
  5732 00000861 8C4704                  	mov	[bx+4],es		; M002
  5733 00000864 5A                      	pop	dx			; M002
  5734 00000865 1E                      	push	ds			; M002
  5735 00000866 07                      	pop	es			; M002
  5736                                  	;jmp	win_nexti2f		; M002
  5737                                  	; 15/12/2022
  5738 00000867 EBCD                    	jmp	short win_nexti2f
  5739                                  
  5740                                  	; 15/12/2022
  5741                                  	; Code to return Win386 2.xx instance table
  5742                                  OldWin386Init:
  5743 00000869 58                      	pop	ax			; discard ds pushed on stack
  5744 0000086A BE[C811]                	mov	si,OldInstanceJunk 
  5745                                  					; ds:si = instance table
  5746 0000086D B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5747                                  	;jmp	next_i2f
  5748                                  	; 15/12/2022
  5749 00000870 EBC5                    	jmp	short next_i2f
  5750                                  
  5751                                  Win386_Leaving:
  5752                                  	; 15/12/2022
  5753 00000872 F6C201                  	test 	dl,1
  5754                                  	;test	dx,1			; is this really win386?
  5755                                  	;jz	short Win386_Leaving_c
  5756                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5757                                  	; 15/12/2022
  5758 00000875 75BF                    	jnz	short win_nexti2f	
  5759                                  
  5760                                  Win386_Leaving_c:
  5761                                  					; M062 - Start
  5762 00000877 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5763                                  					;    up.
  5764 0000087C 7523                    	jne	short noumb		; N: not saved 
  5765 0000087E C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5766                                  					;    previously saved umb_head
  5767                                  	; 05/01/2024
  5768                                  	;push	ax ; (not necessary)
  5769 00000883 06                      	push	es
  5770 00000884 51                      	push	cx
  5771 00000885 56                      	push	si
  5772 00000886 57                      	push	di
  5773                                  
  5774                                  	;mov	ax,[UMB_HEAD]
  5775                                  	;mov	es,ax
  5776                                  	; 05/01/2024
  5777 00000887 8E06[8C00]              	mov	es,[UMB_HEAD]
  5778 0000088B 31FF                    	xor	di,di			; es:di -> umb_head
  5779                                  
  5780 0000088D FC                      	cld
  5781                                  
  5782 0000088E BE[F511]                	mov	si,UmbSave1
  5783 00000891 B90B00                  	mov	cx,11
  5784 00000894 F3A4                    	rep	movsb
  5785 00000896 BE[D50D]                	mov	si,UmbSave2
  5786                                  	;mov	cx,5
  5787                                  	; 18/12/2022
  5788 00000899 B105                    	mov	cl,5
  5789 0000089B F3A4                    	rep	movsb
  5790                                  
  5791 0000089D 5F                      	pop	di
  5792 0000089E 5E                      	pop	si
  5793 0000089F 59                      	pop	cx
  5794 000008A0 07                      	pop	es
  5795                                  	; 05/01/2024
  5796                                  	;pop	ax
  5797                                  noumb:					; M062 - End
  5798 000008A1 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5799 000008A6 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5800 000008AB EB89                    	jmp	short win_nexti2f
  5801                                  
  5802                                  ;	; 15/12/2022
  5803                                  ;	; Code to return Win386 2.xx instance table
  5804                                  ;OldWin386Init:
  5805                                  ;	pop	ax			; discard ds pushed on stack
  5806                                  ;	mov	si,OldInstanceJunk 
  5807                                  ;					; ds:si = instance table
  5808                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5809                                  ;	;jmp	next_i2f
  5810                                  ;	; 15/12/2022
  5811                                  ;	jmp	short _next_i2f
  5812                                  
  5813                                  Win386_Query:
  5814 000008AD 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5815 000008B0 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5816 000008B2 09C9                    	or	cx,cx			; is it an instance query?
  5817 000008B4 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5818 000008B6 41                      	inc	cx			; indicate that data is instanced
  5819                                  ;
  5820                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5821                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5822                                  ; M001;  
  5823                                  ; M001; OFFSETS STRUC
  5824                                  ; M001; 	Major_version	db	?
  5825                                  ; M001; 	Minor_version	db	?
  5826                                  ; M001; 	SaveDS		dw	?
  5827                                  ; M001; 	SaveBX		dw	?
  5828                                  ; M001; 	Indos		dw	?
  5829                                  ; M001; 	User_id		dw	?
  5830                                  ; M001; 	CritPatch	dw	?
  5831                                  ; M001; OFFSETS	ENDS
  5832                                  ; M001; 
  5833                                  ; M001; User_Id is the only variable really important for proper functioning  
  5834                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5835                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5836                                  ; M001; pass this table because Win386 depends on this table to get the 
  5837                                  ; M001; User_Id offset.
  5838                                  ; M001; 
  5839 000008B7 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5840 000008BA 1E                      	push	ds			; M001
  5841 000008BB 07                      	pop	es			; es:bx points at offset table ; M001
  5842 000008BC EB40                    	jmp	short PopIret		; M001
  5843                                  
  5844                                  ; 15/12/2022
  5845                                  ;	; Code to return Win386 2.xx instance table
  5846                                  ;OldWin386Init:
  5847                                  ;	pop	ax			; discard ds pushed on stack
  5848                                  ;	mov	si,OldInstanceJunk 
  5849                                  ;					; ds:si = instance table
  5850                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5851                                  ;	;jmp	next_i2f
  5852                                  ;	; 15/12/2022
  5853                                  ;	jmp	short _next_i2f
  5854                                  
  5855                                  dosmgr_func:
  5856 000008BE 49                      	dec	cx
  5857 000008BF 7435                    	jz	short win386_patch	; call to patch DOS
  5858 000008C1 49                      	dec	cx
  5859 000008C2 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5860 000008C4 49                      	dec	cx
  5861 000008C5 7439                    	jz	short win386_size	; get size of DOS data structures
  5862 000008C7 49                      	dec	cx
  5863 000008C8 7428                    	jz	short win386_inst	; instance more data
  5864                                  	;dec	cx
  5865                                  	;jnz	short PopIret		; no functions above this
  5866                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5867 000008CA E232                    	loop	PopIret
  5868                                  
  5869                                  	; Get DOS device driver size -- es:di points at device driver header
  5870                                  	; In DOS 4.x, the para before the device header contains an arena 
  5871                                  	; header for the driver.
  5872                                  
  5873 000008CC 8CC0                    	mov	ax,es			; ax = device header segment
  5874                                  
  5875                                  	; We check to see if we have a memory arena for this device driver. 
  5876                                  	; The way to do this would be to look at the previous para to see if
  5877                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5878                                  	; in the arena is the same as the device header segment. These two 
  5879                                  	; checks together should take care of all cases
  5880                                  
  5881 000008CE 48                      	dec	ax			; get arena header
  5882 000008CF 06                      	push	es
  5883 000008D0 8EC0                    	mov	es,ax			; arena header for device driver
  5884                                  
  5885 000008D2 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5886 000008D6 7517                    	jnz	short cantsize		; no, cant size this driver
  5887 000008D8 40                      	inc	ax			; get back device header segment
  5888 000008D9 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5889 000008DD 7510                    	jnz	short cantsize		; no, not a proper arena
  5890                                  
  5891 000008DF 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5892 000008E3 07                      	pop	es
  5893                                  
  5894                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5895                                  	; Speed is not critical and so we choose the shortest method 
  5896                                  	; -- use "mul"
  5897                                  
  5898 000008E4 BB1000                  	mov	bx,16
  5899 000008E7 F7E3                    	mul	bx
  5900 000008E9 89C1                    	mov	cx,ax
  5901 000008EB 89D3                    	mov	bx,dx
  5902 000008ED EB09                    	jmp	short win386_done	; return with device driver size
  5903                                  cantsize:
  5904 000008EF 07                      	pop	es
  5905 000008F0 31C0                    	xor	ax,ax
  5906                                  win386_inst:	; 05/01/2024
  5907 000008F2 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5908 000008F4 EB08                    	jmp	short PopIret		; return
  5909                                  
  5910                                  win386_patch:
  5911                                  	; dx contains bits marking the patches to be applied. We return 
  5912                                  	; the field with all bits set to indicate that all patches have been
  5913                                  	; done
  5914                                  
  5915 000008F6 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5916                                   	;jmp	short win386_done	; done, return
  5917                                  	; 15/12/2022
  5918                                  	; 15/12/2022
  5919                                  win386_done:
  5920 000008F8 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5921 000008FB BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5922                                  PopIret:
  5923 000008FE 1F                      	pop	ds
  5924 000008FF CF                      	iret	
  5925                                  
  5926                                  win386_size:
  5927                                  	; Return the size of DOS data structures -- currently only CDS size
  5928                                  
  5929                                  	; 17/12/2022
  5930 00000900 F6C201                  	test	dl,1
  5931                                  	;test	dx,1			; check for CDS size bit
  5932 00000903 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5933                                  
  5934 00000905 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5935 00000908 EBEE                    	jmp	short win386_done	; return with the size
  5936                                  
  5937                                  ; 05/01/2024
  5938                                  %if 0
  5939                                  win386_inst:
  5940                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5941                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5942                                  	; this by returning a status of not previously instanced. The basic
  5943                                  	; structure of these things have not changed and so the current
  5944                                  	; DOSMGR code should be able to work it out
  5945                                  
  5946                                  	xor	dx,dx			; make sure dx has a not done value
  5947                                  	jmp	short PopIret		; skip done indication
  5948                                  %endif
  5949                                  
  5950                                  	; 15/12/2022
  5951                                  ;win386_done:
  5952                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5953                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5954                                  ;PopIret:
  5955                                  ;	pop	ds
  5956                                  ;	iret				; return back up the chain
  5957                                  
  5958                                  	; 15/12/2022
  5959                                  ;win_nexti2f:
  5960                                  	;pop	ds
  5961                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5962                                  
  5963                                  ;End WIN386 support
  5964                                  
  5965                                  ; 15/05/2019
  5966                                  
  5967                                  ;M044; Start of changes
  5968                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5969                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5970                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5971                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5972                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5973                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5974                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5975                                  ; last para of the Windows memory block and then restore this para on the
  5976                                  ; Windows swapin callout. 
  5977                                  
  5978                                  getwinlast:
  5979                                  	; 07/12/2022
  5980 0000090A 8B36[3003]              	mov	si,[CurrentPDB]
  5981 0000090E 4E                      	dec	si
  5982 0000090F 8EC6                    	mov	es,si
  5983 00000911 2603360300              	add	si,[es:3]
  5984 00000916 C3                      	retn
  5985                                  
  5986                                  ; 15/12/2022
  5987                                  %if 0
  5988                                  winold_swap:
  5989                                  	push	ds
  5990                                  	push	es
  5991                                  	push	si
  5992                                  	push	di
  5993                                  	push	cx
  5994                                  
  5995                                  	;getdseg <ds>			;ds = DOSDATA
  5996                                  	mov	ds,[cs:DosDSeg]
  5997                                  
  5998                                  	cmp	al,1			;swap Windows out call
  5999                                  	jne	short swapin		;no, check if Swap in call
  6000                                  	call	getwinlast
  6001                                  	push	ds
  6002                                  	pop	es
  6003                                  	mov	ds,si			;ds = memory arena of Windows
  6004                                  	xor	si,si
  6005                                  	mov	di,WinoldPatch1
  6006                                  	mov	cx,8
  6007                                  	cld
  6008                                  	push	cx
  6009                                  	rep	movsb			;save first 8 bytes
  6010                                  	pop	cx
  6011                                  	mov	di,WinoldPatch2
  6012                                  	rep	movsb			;save next 8 bytes
  6013                                  	jmp	short winold_done
  6014                                  swapin:
  6015                                  	cmp	al,2			;swap Windows in call?
  6016                                  	jne	short winold_done	;no, something else, pass it on
  6017                                  	call	getwinlast
  6018                                  	mov	es,si
  6019                                  	xor	di,di
  6020                                  	mov	si,WinoldPatch1
  6021                                  	mov	cx,8
  6022                                  	cld
  6023                                  	push	cx
  6024                                  	rep	movsb			;restore first 8 bytes
  6025                                  	pop	cx
  6026                                  	mov	si,WinoldPatch2
  6027                                  	rep	movsb			;restore next 8 bytes
  6028                                  winold_done:
  6029                                  	pop	cx
  6030                                  	pop	di
  6031                                  	pop	si
  6032                                  	pop	es
  6033                                  	pop	ds
  6034                                  	jmp	next_i2f		;chain on
  6035                                  
  6036                                  %endif
  6037                                  
  6038                                  ;M044; End of changes
  6039                                  
  6040                                  ; 15/05/2019
  6041                                  
  6042                                  DispatchDOS:
  6043 00000917 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6044 0000091C 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6045 00000921 50                      	PUSH	AX			; push index
  6046 00000922 55                      	PUSH	BP
  6047 00000923 89E5                    	MOV	BP,SP
  6048                                  		; stack looks like:
  6049                                  		;   0	BP
  6050                                  		;   2	DISPATCH
  6051                                  		;   4	TABLE
  6052                                  		;   6	RETURN
  6053                                  		;   8	LONG-RETURN
  6054                                  		;   C	FLAGS
  6055                                  		;   E	AX
  6056                                  	
  6057 00000925 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6058 00000928 5D                      	POP	BP
  6059 00000929 E8F408                  	call	TableDispatch
  6060 0000092C E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6061                                  
  6062                                  INT2F_etcetera:
  6063                                  	;entry	DosGetGroup
  6064                                  DosGetGroup:
  6065                                  	; MSDOS 3.3
  6066                                  	;push	cs
  6067                                  	;pop	ds
  6068                                  	;retn
  6069                                  
  6070                                  	; MSDOS 6.0
  6071                                  ;SR; Cannot use CS now
  6072                                  ;
  6073                                  ;	PUSH	CS
  6074                                  ;	POP	DS
  6075                                  
  6076                                  	; 04/11/2022
  6077                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6078                                  
  6079                                  	;getdseg <ds>
  6080 0000092F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6081 00000934 C3                      	retn
  6082                                  
  6083                                  	;entry	DOSInstall
  6084                                  DOSInstall:
  6085 00000935 B0FF                    	MOV	AL,0FFh
  6086 00000937 C3                      	retn
  6087                                  
  6088                                  ;ENDIF ; (*)
  6089                                  
  6090                                  
  6091                                  ; 15/05/2019 - Retro DOS v4.0
  6092                                  
  6093                                  ;------------------------------------------------------------------------
  6094                                  ;
  6095                                  ; Procedure Name : RW32_CONVERT
  6096                                  ;
  6097                                  ;Input: same as ABSDRD and ABSDWRT
  6098                                  ;	 ES:BP -> DPB
  6099                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6100                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6101                                  ;	 carry clear, parms ok
  6102                                  ;
  6103                                  ;------------------------------------------------------------------------
  6104                                  
  6105                                  	; 06/01/2024
  6106                                  RW32_CONVERT:
  6107                                  	;inc	cx ; *	; 01 -> 0
  6108 00000938 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6109 0000093B 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6110                                  	;dec	cx ; *
  6111 0000093D 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6112 0000093E 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6113                                  	;mov	ax,[es:bp+0Dh]
  6114 0000093F 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6115                                  	;mov	dl,[es:bp+4]
  6116 00000943 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6117 00000947 80FAFE                  	CMP	DL,0FEh ; 254		;>32mb  removable ?	;AN000;
  6118 0000094A 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6119                                  	;INC	DL			;>32mb			;AN000;
  6120                                  	; 17/12/2022
  6121 0000094C 42                      	inc	dx
  6122 0000094D 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6123 0000094F F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6124 00000951 09D2                    	OR	DX,DX	; (clears CF)	;>32mb  > 32mb ?	;AN000;
  6125                                  letold:
  6126 00000953 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6127 00000954 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6128 00000955 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6129                                  
  6130 00000957 1E                      	push	ds
  6131                                  	;getdseg <ds>
  6132 00000958 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6133 0000095D C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6134 00000963 1F                      	pop	ds
  6135                                  
  6136 00000964 F9                      	STC				;>32mb			;AN000;
  6137 00000965 C3                      	retn				;>32mb			;AN000;
  6138                                  
  6139                                  new32format:
  6140                                  	;mov	dx,[bx+2]
  6141 00000966 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6142                                  
  6143 00000969 1E                      	push	ds			; set up ds to DOSDATA
  6144                                  	;getdseg <ds>
  6145 0000096A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6146 0000096F 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6147 00000973 1F                      	pop	ds
  6148                                  
  6149 00000974 8B17                    	mov	dx,[bx]
  6150                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6151                                  	;mov	cx,[bx+4]
  6152 00000976 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6153                                  	;lds	bx,[bx+6]
  6154 00000979 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6155                                  old_style:				;>32mb			;AN000;
  6156                                  	; 06/01/2024
  6157                                  	; cf=0
  6158                                  	;CLC				;>32mb			;AN000;
  6159 0000097C C3                      	retn				;>32mb			;AN000;
  6160                                  
  6161                                  ;------------------------------------------------------------------------
  6162                                  ;
  6163                                  ; Procedure Name : Fastxxx_Purge
  6164                                  ;
  6165                                  ; Input: None
  6166                                  ; Functions: Purge Fastopen/ Cache Buffers
  6167                                  ; Output: None
  6168                                  ;
  6169                                  ;------------------------------------------------------------------------
  6170                                  
  6171                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6172                                  
  6173                                  Fastxxx_Purge:
  6174 0000097D 50                      	PUSH	AX			; save regs.	;AN000;
  6175 0000097E 56                      	PUSH	SI						;AN000;
  6176 0000097F 52                      	PUSH	DX						;AN000;
  6177                                  topen:
  6178 00000980 1E                      	push	ds			; set up ds to DOSDATA
  6179                                  	;getdseg <ds>
  6180 00000981 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6181                                  
  6182 00000986 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6183                                  					; fastopen installed ?	;AN000;
  6184 0000098B 1F                      	pop	ds
  6185 0000098C 740B                    	JZ	short nofast		; no			;AN000;
  6186 0000098E B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6187                                  dofast:
  6188 00000990 B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6189                                  	;;mov	dl,[es:bp+0]
  6190                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6191                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6192                                  	; 15/12/2022
  6193 00000992 268A5600                	mov	dl,[es:bp]
  6194                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6195 00000996 E85C1D                  	call	Fast_Dispatch
  6196                                  nofast:
  6197 00000999 5A                      	POP	DX						;AN000;
  6198 0000099A 5E                      	POP	SI			; restore regs		;AN000;
  6199 0000099B 58                      	POP	AX			 			;AN000;
  6200 0000099C C3                      	retn				; exit
  6201                                  
  6202                                  ;============================================================================
  6203                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6204                                  ;============================================================================
  6205                                  ; 29/04/2019 - Retro DOS v4.0
  6206                                  
  6207                                  ;include dossym.inc
  6208                                  ;include dosmac.inc
  6209                                  ;include doscntry.inc
  6210                                  
  6211                                  ; DOSCODE Segment
  6212                                  
  6213                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6214                                  ; ---------------------------------------------------------------------------
  6215                                  ;include divmes.inc
  6216                                  
  6217                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6218                                  ; -------------------------------------
  6219                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6220                                  
  6221                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6222                                  	;PUBLIC	DIVMES
  6223                                  
  6224 0000099D 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6224 000009A6 6F766572666C6F770D-
  6224 000009AF 0A                 
  6225                                  
  6226                                  	;PUBLIC	DivMesLen
  6227                                  DivMesLen:
  6228 000009B0 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6229                                  
  6230                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6231                                  ; -------------------------------------
  6232                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6233                                  
  6234                                  ; (MSDOS 6.0)
  6235                                  ; VxD not found error message
  6236                                  
  6237                                  NoVxDErrMsg:
  6238 000009B2 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6238 000009BB 686176652074686520-
  6238 000009C4 66696C652057494E41-
  6238 000009CD 32302E33383620696E-
  6238 000009D6 2074686520726F6F74-
  6238 000009DF 206F6620796F757220-
  6238 000009E8 626F6F742064726976-
  6238 000009F1 65                 
  6239 000009F2 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6239 000009FB 57696E646F77732069-
  6239 00000A04 6E20456E68616E6365-
  6239 00000A0D 64204D6F64650D0A   
  6240                                  
  6241                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6242                                  
  6243                                  ; 13/05/2019 - Retro DOS v4.0
  6244                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6245                                  
  6246                                  ;include yesno.asm  (MNSDOS 6.0)
  6247                                  ; -------------------------------------
  6248                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6249                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6250                                  
  6251                                  ; This is for country Yes and No
  6252                                  
  6253 00000A15 59                      NLS_YES:	db 'Y'
  6254 00000A16 4E                      NLS_NO:		db 'N'
  6255 00000A17 79                      NLS_yes2:	db 'y'
  6256 00000A18 6E                      NLS_no2:	db 'n'
  6257                                  
  6258                                  ; ---------------------------------------------------------------------------
  6259                                  
  6260                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6261                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6262                                  
  6263                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6264                                  
  6265                                  ; The following two tables implement the current buffered input editing
  6266                                  ; routines. The tables are pairwise associated in reverse order for ease
  6267                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6268                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6269                                  
  6270                                  	;PUBLIC	CANCHAR
  6271                                  CANCHAR:
  6272 00000A19 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6273                                  	
  6274                                  	;PUBLIC	ESCCHAR
  6275                                  ESCCHAR:
  6276 00000A1A 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6277                                  	
  6278                                  	;IF	NOT Rainbow
  6279                                  
  6280                                  ESCTAB:	; LABEL BYTE
  6281                                  
  6282                                  	;IF	IBM
  6283 00000A1B 40                      	DB	64		; Ctrl-Z - F6
  6284 00000A1C 4D                      	DB	77		; Copy one char - -->
  6285 00000A1D 3B                      	DB	59		; Copy one char - F1
  6286 00000A1E 53                      	DB	83		; Skip one char - DEL
  6287 00000A1F 3C                      	DB	60		; Copy to char - F2
  6288 00000A20 3E                      	DB	62		; Skip to char - F4
  6289 00000A21 3D                      	DB	61		; Copy line - F3
  6290 00000A22 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6291 00000A23 3F                      	DB	63		; Reedit line (new template) - F5
  6292 00000A24 4B                      	DB	75		; Backspace - <--
  6293 00000A25 52                      	DB	82		; Enter insert mode - INS (toggle)
  6294 00000A26 52                      	DB	82		; Exit insert mode - INS (toggle)
  6295 00000A27 41                      	DB	65		; Escape character - F7
  6296 00000A28 41                      	DB	65		; End of table
  6297                                  	;ENDIF
  6298                                  
  6299                                  ESCEND: ; LABEL BYTE
  6300                                  
  6301                                  ESCTABLEN EQU ESCEND-ESCTAB
  6302                                  
  6303                                  ESCFUNC: ; LABEL WORD
  6304                                  	
  6305 00000A29 [1514]                  	short_addr  GETCH	; Ignore the escape sequence
  6306 00000A2B [9214]                  	short_addr  TWOESC
  6307 00000A2D [8715]                  	short_addr  EXITINS
  6308 00000A2F [8715]                  	short_addr  ENTERINS
  6309 00000A31 [8D14]                  	short_addr  BACKSP
  6310 00000A33 [7315]                  	short_addr  REEDIT
  6311 00000A35 [7A14]                  	short_addr  KILNEW
  6312 00000A37 [0915]                  	short_addr  COPYLIN
  6313 00000A39 [3B15]                  	short_addr  SKIPSTR
  6314 00000A3B [0F15]                  	short_addr  COPYSTR
  6315 00000A3D [3215]                  	short_addr  SKIPONE
  6316 00000A3F [1415]                  	short_addr  COPYONE
  6317 00000A41 [1415]                  	short_addr  COPYONE
  6318 00000A43 [8E15]                  	short_addr  CTRLZ
  6319                                  
  6320                                  	;ENDIF
  6321                                  
  6322                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6323                                  ; ---------------------------------------------------------------------------
  6324                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6325                                  
  6326                                  ; OEMFunction key is expected to process a single function
  6327                                  ;   key input from a device and dispatch to the proper
  6328                                  ;   routines leaving all registers UNTOUCHED.
  6329                                  ;
  6330                                  ; Inputs:   CS, SS are DOSGROUP
  6331                                  ; Outputs:  None. This function is expected to JMP to onw of
  6332                                  ;           the following labels:
  6333                                  ;
  6334                                  ;           GetCh       - ignore the sequence
  6335                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6336                                  ;           ExitIns     - toggle insert mode
  6337                                  ;           EnterIns    - toggle insert mode
  6338                                  ;           BackSp      - move backwards one space
  6339                                  ;           ReEdit      - reedit the line with a new template
  6340                                  ;           KilNew      - discard the current line and start from scratch
  6341                                  ;           CopyLin     - copy the rest of the template into the line
  6342                                  ;           SkipStr     - read the next character and skip to it in the template
  6343                                  ;           CopyStr     - read next char and copy from template to line until char
  6344                                  ;           SkipOne     - advance position in template one character
  6345                                  ;           CopyOne     - copy next character in template into line
  6346                                  ;           CtrlZ       - place a ^Z into the template
  6347                                  ; Registers that are allowed to be modified by this function are:
  6348                                  ;           AX, CX, BP
  6349                                  
  6350                                  ; 13/05/2019 - Retro DOS v4.0
  6351                                  ; -------------------------------------
  6352                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6353                                  
  6354                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6355                                  ; -------------------------------------
  6356                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6357                                  
  6358                                  OEMFunctionKey:
  6359 00000A45 E82F09                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6360 00000A48 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6361 00000A4A 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6362 00000A4B BF[1B0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6363 00000A4E 06                      	push	es
  6364 00000A4F 0E                      	push	cs
  6365 00000A50 07                      	pop	es
  6366 00000A51 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6367 00000A53 07                      	pop	es
  6368 00000A54 5F                      	POP     DI                      ; restore DI
  6369 00000A55 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6370 00000A57 89CD                    	MOV     BP,CX                   ; move to indexable register
  6371                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6372 00000A59 2EFFA6[290A]            	JMP	word [CS:BP+ESCFUNC]
  6373                                  
  6374                                  ;DOSCODE ENDS
  6375                                  	
  6376                                  ;============================================================================
  6377                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6378                                  ;============================================================================
  6379                                  ; Retro DOS v3.0 - 18/07/2018
  6380                                  
  6381                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6382                                  ;----------------------------------------------------------------------------
  6383                                  ; Retro DOS v2.0 - 13/03/2018
  6384                                  
  6385                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6386                                  
  6387                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6388                                  
  6389                                  ;**	$GET_DATE - Get Current Date
  6390                                  ;----------------------------------------
  6391                                  ;	ENTRY	none
  6392                                  ;	EXIT	(cx:dx) = current date
  6393                                  ;	USES	all
  6394                                  
  6395                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6396                                  
  6397                                  _$GET_DATE:	;System call 42
  6398                                  
  6399 00000A5E 16                      	PUSH	SS
  6400 00000A5F 1F                      	POP	DS
  6401 00000A60 E8B700                  	CALL	READTIME	;Check for rollover to next day
  6402 00000A63 A1[5203]                	MOV	AX,[YEAR]
  6403                                  
  6404                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6405                                  
  6406 00000A66 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6407 00000A6A E814FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6408                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6409 00000A6D 895C06                  	MOV	[SI+user_env.user_DX],BX
  6410 00000A70 05BC07                  	ADD	AX,1980		;Put bias back
  6411                                  	;MOV	[SI+4],AX	;CX=year
  6412 00000A73 894404                  	MOV	[SI+user_env.user_CX],AX
  6413 00000A76 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6414                                  RET20:	; 05/11/2022
  6415                                  RET24:	; 18/12/2022
  6416 00000A7A C3                      	RETN
  6417                                  
  6418                                  ;**	$SET_DATE - Set Current Date
  6419                                  ;----------------------------------------
  6420                                  ;	ENTRY	(cx:dx) = current date
  6421                                  ;	EXIT	(al) = -1 iff bad date
  6422                                  ;		(al) = 0 if ok
  6423                                  ;	USES	all
  6424                                  
  6425                                  _$SET_DATE:	;System call 43
  6426                                  
  6427 00000A7B B0FF                    	MOV	AL,-1		;Be ready to flag error
  6428 00000A7D 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6429                                  	;JC	SHORT RET24	;Error if not big enough
  6430                                  	; 05/11/2022
  6431 00000A81 72F7                    	jc	short RET20
  6432 00000A83 83F977                  	CMP	CX,119		;Year must be less than 2100
  6433 00000A86 77F2                    	JA	SHORT RET24
  6434 00000A88 08F6                    	OR	DH,DH
  6435                                  	;JZ	SHORT RET24
  6436                                   	; 05/11/2022
  6437 00000A8A 74EE                    	jz	short RET20
  6438 00000A8C 08D2                    	OR	DL,DL
  6439                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6440                                  	; 05/11/2022
  6441 00000A8E 74EA                    	jz	short RET20
  6442 00000A90 80FE0C                  	CMP	DH,12		;Check against max. month
  6443 00000A93 77E5                    	JA	SHORT RET24
  6444 00000A95 16                      	PUSH	SS
  6445 00000A96 1F                      	POP	DS
  6446                                  	;CALL	DODATE
  6447                                  	; 18/12/2022
  6448 00000A97 E91301                  	jmp	DODATE
  6449                                  ;RET24:  
  6450                                  	;RETN
  6451                                  
  6452                                  ;**	$GET_TIME - Get Current Time
  6453                                  ;----------------------------------------
  6454                                  ;	ENTRY	none
  6455                                  ;	EXIT	(cx:dx) = current time
  6456                                  ;	USES	all
  6457                                  
  6458                                  _$GET_TIME:			;System call 44
  6459                                  
  6460 00000A9A 16                      	PUSH	SS
  6461 00000A9B 1F                      	POP	DS
  6462 00000A9C E87B00                  	CALL	READTIME
  6463 00000A9F E8DFF9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6464                                  	;MOV	[SI+6],DX
  6465 00000AA2 895406                  	MOV	[SI+user_env.user_DX],DX
  6466                                  	;MOV	[SI+4],CX
  6467 00000AA5 894C04                  	MOV	[SI+user_env.user_CX],CX
  6468                                  set_time_ok:	; 06/01/2024
  6469 00000AA8 30C0                    	XOR	AL,AL
  6470                                  RET26:  
  6471 00000AAA C3                      	RETN
  6472                                  
  6473                                  ;**	$SET_TIME - Set Current Time
  6474                                  ;----------------------------------------
  6475                                  ;	ENTRY	(cx:dx) = time
  6476                                  ;	EXIT	(al) = 0 if 0k
  6477                                  ;		(al) = -1 if invalid
  6478                                  ;	USES	ALL
  6479                                  
  6480                                  _$SET_TIME:			;System call 45
  6481                                  
  6482 00000AAB B0FF                    	MOV	AL,-1		;Flag in case of error
  6483 00000AAD 80FD18                  	CMP	CH,24		;Check hours
  6484 00000AB0 73F8                    	JAE	SHORT RET26
  6485 00000AB2 80F93C                  	CMP	CL,60		;Check minutes
  6486 00000AB5 73F3                    	JAE	SHORT RET26
  6487 00000AB7 80FE3C                  	CMP	DH,60		;Check seconds
  6488 00000ABA 73EE                    	JAE	SHORT RET26
  6489 00000ABC 80FA64                  	CMP	DL,100		;Check 1/100's
  6490 00000ABF 73E9                    	JAE	SHORT RET26
  6491 00000AC1 51                      	PUSH	CX
  6492 00000AC2 52                      	PUSH	DX
  6493 00000AC3 16                      	PUSH	SS
  6494 00000AC4 1F                      	POP	DS
  6495 00000AC5 BB[B603]                	MOV	BX,TIMEBUF
  6496 00000AC8 B90600                  	MOV	CX,6
  6497                                  	;XOR	DX,DX
  6498                                  	;MOV	AX,DX
  6499 00000ACB 31C0                    	xor	ax,ax
  6500 00000ACD 99                      	cwd	; 06/01/2024
  6501 00000ACE 53                      	PUSH	BX
  6502 00000ACF E8083C                  	CALL	SETREAD
  6503 00000AD2 1E                      	PUSH	DS
  6504 00000AD3 C536[2E00]              	LDS	SI,[BCLOCK]
  6505 00000AD7 E88A3B                  	CALL	DEVIOCALL2	;Get correct day count
  6506 00000ADA 1F                      	POP	DS
  6507 00000ADB 5B                      	POP	BX
  6508 00000ADC E82E3C                  	CALL	SETWRITE
  6509 00000ADF 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6510 00000AE3 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6511 00000AE7 C536[2E00]              	LDS	SI,[BCLOCK]
  6512 00000AEB E8763B                  	CALL	DEVIOCALL2	;Set the time
  6513                                  	; 06/01/2024
  6514                                  	;XOR	AL,AL
  6515                                  	;RETN
  6516 00000AEE EBB8                    	jmp	short set_time_ok
  6517                                  
  6518                                  ; 11/07/2018 - Retro DOS v3.0
  6519                                  ; Retro DOS v2.0 - 14/03/2018
  6520                                  
  6521                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6522                                  
  6523                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6524                                  ;----------------------------------------------------------
  6525                                  ; Date16 returns the current date in AX, current time in DX
  6526                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6527                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6528                                  
  6529                                  DATE16:
  6530                                  	
  6531                                  ;M048	Context DS
  6532                                  ;
  6533                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6534                                  ; is DOSDATA
  6535                                  
  6536                                  	;push	ss
  6537                                  	;pop	ds
  6538                                  
  6539                                  	;getdseg <ds>		; M048
  6540                                  
  6541                                  	; 13/05/2019 - Retro DOS v4.0
  6542 00000AF0 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6543                                  
  6544 00000AF5 51                      	PUSH	CX
  6545 00000AF6 06                      	PUSH	ES
  6546 00000AF7 E82000                  	CALL	READTIME
  6547 00000AFA 07                      	POP	ES
  6548 00000AFB D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6549 00000AFD D0E1                    	SHL	CL,1
  6550 00000AFF D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6551 00000B01 D1E1                    	SHL	CX,1
  6552 00000B03 D1E1                    	SHL	CX,1
  6553 00000B05 D0EE                    	SHR	DH,1		;Count every two seconds
  6554 00000B07 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6555 00000B09 89CA                    	MOV	DX,CX
  6556                                  
  6557                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6558                                  
  6559 00000B0B A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6560 00000B0E B104                    	MOV	CL,4
  6561 00000B10 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6562 00000B12 D1E0                    	SHL	AX,1
  6563 00000B14 59                      	POP	CX
  6564 00000B15 0A06[5003]              	OR	AL,[DAY]
  6565                                  RET21:
  6566 00000B19 C3                      	RETN
  6567                                  
  6568                                  ;----------------------------------------------------------
  6569                                  
  6570                                  READTIME:
  6571                                  
  6572                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6573                                  ;Uses AX, CX, DX.
  6574                                  
  6575 00000B1A C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6576 00000B20 56                      	PUSH	SI
  6577 00000B21 53                      	PUSH	BX
  6578                                  
  6579 00000B22 BB[B603]                	MOV	BX,TIMEBUF
  6580                                  
  6581 00000B25 B90600                  	MOV	CX,6
  6582                                  	;XOR	DX,DX
  6583                                  	;MOV	AX,DX
  6584                                  	; 06/01/2024
  6585 00000B28 31C0                    	xor	ax,ax
  6586 00000B2A 99                      	cwd
  6587 00000B2B E8AC3B                  	CALL	SETREAD
  6588 00000B2E 1E                      	PUSH	DS
  6589 00000B2F C536[2E00]              	LDS	SI,[BCLOCK]
  6590 00000B33 E82E3B                  	CALL	DEVIOCALL2	;Get correct date and time
  6591 00000B36 1F                      	POP	DS
  6592 00000B37 5B                      	POP	BX
  6593 00000B38 5E                      	POP	SI
  6594 00000B39 A1[B603]                	MOV	AX,[TIMEBUF]
  6595 00000B3C 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6596 00000B40 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6597 00000B44 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6598                                  	;JZ	SHORT RET22
  6599 00000B48 74CF                    	JZ	SHORT RET21 ; 18/07/2018
  6600                                  	;cmp	ax,43830
  6601 00000B4A 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6602 00000B4D 733D                    	JAE	SHORT RET22	;Ignore if too large
  6603 00000B4F A3[5403]                	MOV	[DAYCNT],AX
  6604 00000B52 56                      	PUSH	SI
  6605 00000B53 51                      	PUSH	CX
  6606 00000B54 52                      	PUSH	DX		;Save time
  6607 00000B55 31D2                    	XOR	DX,DX
  6608                                  	;mov	cx,1461
  6609 00000B57 B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6610 00000B5A F7F1                    	DIV	CX		;Compute number of 4-year units
  6611 00000B5C D1E0                    	SHL	AX,1
  6612 00000B5E D1E0                    	SHL	AX,1
  6613 00000B60 D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6614 00000B62 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6615                                  
  6616 00000B64 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6617                                  
  6618 00000B67 E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6619 00000B6A D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6620 00000B6C 7304                    	JNC	SHORT SK	;Extra half-year?
  6621 00000B6E 81C2C800                	ADD	DX,200
  6622                                  SK:
  6623 00000B72 E82200                  	CALL	SETYEAR
  6624 00000B75 B101                    	MOV	CL,1		;At least at first month in year
  6625                                  
  6626 00000B77 BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6627                                  	
  6628 00000B7A E81000                  	CALL	DSLIDE		;Find out which month we're in
  6629 00000B7D 880E[5103]              	MOV	[MONTH],CL
  6630 00000B81 42                      	INC	DX		;Remainder is day of month (start with one)
  6631 00000B82 8816[5003]              	MOV	[DAY],DL
  6632 00000B86 E89400                  	CALL	WKDAY		;Set day of week
  6633 00000B89 5A                      	POP	DX
  6634 00000B8A 59                      	POP	CX
  6635 00000B8B 5E                      	POP	SI
  6636                                  RET22:  
  6637 00000B8C C3                      	RETN
  6638                                  
  6639                                  ;----------------------------------------------------------
  6640                                  
  6641                                  DSLIDE:
  6642                                  	;MOV	AH,0
  6643                                  	; 06/01/2024
  6644                                  	; (AH=0)
  6645                                  DSLIDE1:
  6646 00000B8D AC                      	LODSB			;Get count of days
  6647 00000B8E 39C2                    	CMP	DX,AX		;See if it will fit
  6648                                  	;JB	SHORT RET23	;If not, done
  6649 00000B90 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6650 00000B92 29C2                    	SUB	DX,AX
  6651 00000B94 41                      	INC	CX		;Count one more month/year
  6652 00000B95 EBF6                    	JMP	SHORT DSLIDE1
  6653                                  
  6654                                  ;----------------------------------------------------------
  6655                                  
  6656                                  SETYEAR:
  6657                                  
  6658                                  ;Set year with value in CX. Adjust length of February for this year.
  6659                                  
  6660                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6661                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6662                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6663                                  ;	preserve DS as CHKYR is also called as a routine.
  6664                                  
  6665                                  	; MSDOS 6.0 (18/07/2018) ; *
  6666                                  
  6667                                  	;GETDSEG DS
  6668                                  
  6669                                  	;PUSH	CS  ; *
  6670                                  	;POP	DS  ; *
  6671                                  
  6672                                  	; 13/05/2019 - Retro DOS v4.0
  6673 00000B97 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6674                                  
  6675                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6676                                  	; 05/11/2022 
  6677                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6678                                  
  6679 00000B9C 880E[5203]              	MOV	[YEAR],CL
  6680                                  CHKYR:
  6681 00000BA0 F6C103                  	TEST	CL,3		;Check for leap year
  6682 00000BA3 B01C                    	MOV	AL,28
  6683 00000BA5 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6684 00000BA7 FEC0                    	INC	AL		;Add leap day
  6685                                  SAVFEB:
  6686 00000BA9 A2[1D0D]                	mov	[february],al
  6687                                  	;MOV	[MONTAB+1],AL	;Store for February
  6688                                  RET23:  
  6689 00000BAC C3                      	RETN
  6690                                  
  6691                                  ;----------------------------------------------------------
  6692                                  
  6693                                  DODATE:
  6694 00000BAD E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6695 00000BB0 88F0                    	MOV	AL,DH
  6696                                  
  6697 00000BB2 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6698                                  
  6699 00000BB5 D7                      	XLAT			;Look up days in month
  6700 00000BB6 38D0                    	CMP	AL,DL
  6701 00000BB8 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6702                                  	;JB	SHORT RET25	;Error if too many days
  6703 00000BBA 72F0                    	jb	short RET23 ; 18/07/2018
  6704 00000BBC E8D8FF                  	CALL	SETYEAR
  6705                                  ;
  6706                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6707                                  ;
  6708 00000BBF 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6709 00000BC3 D1E9                    	SHR	CX,1
  6710 00000BC5 D1E9                    	SHR	CX,1
  6711                                  	;mov	ax,1461
  6712 00000BC7 B8B505                  	MOV	AX,FOURYEARS
  6713 00000BCA 89D3                    	MOV	BX,DX
  6714 00000BCC F7E1                    	MUL	CX
  6715 00000BCE 8A0E[5203]              	MOV	CL,[YEAR]
  6716 00000BD2 80E103                  	AND	CL,3
  6717                                  
  6718 00000BD5 BE[140D]                	MOV	SI,YRTAB
  6719                                  
  6720 00000BD8 89C2                    	MOV	DX,AX
  6721 00000BDA D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6722 00000BDC E85100                  	CALL	DSUM		;Add up the days in each year
  6723 00000BDF 88F9                    	MOV	CL,BH		;Month of year
  6724                                  
  6725 00000BE1 BE[1C0D]                	MOV	SI,MONTAB
  6726                                  
  6727 00000BE4 49                      	DEC	CX		;Account for months starting with one
  6728 00000BE5 E84800                  	CALL	DSUM		;Add up days in each month
  6729 00000BE8 88D9                    	MOV	CL,BL		;Day of month
  6730 00000BEA 49                      	DEC	CX		;Account for days starting with one
  6731 00000BEB 01CA                    	ADD	DX,CX		;Add in to day total
  6732 00000BED 92                      	XCHG	AX,DX		;Get day count in AX
  6733 00000BEE A3[5403]                	MOV	[DAYCNT],AX
  6734 00000BF1 56                      	PUSH	SI
  6735 00000BF2 53                      	PUSH	BX
  6736 00000BF3 50                      	PUSH	AX
  6737                                  
  6738 00000BF4 BB[B603]                	MOV	BX,TIMEBUF
  6739                                  
  6740 00000BF7 B90600                  	MOV	CX,6
  6741                                  	;XOR	DX,DX
  6742                                  	;MOV	AX,DX
  6743                                  	; 06/01/2024
  6744 00000BFA 31C0                    	xor	ax,ax
  6745 00000BFC 99                      	cwd
  6746 00000BFD 53                      	PUSH	BX
  6747 00000BFE E8D93A                  	CALL	SETREAD
  6748                                  
  6749 00000C01 1E                      	PUSH	DS
  6750 00000C02 C536[2E00]              	LDS	SI,[BCLOCK]
  6751 00000C06 E85B3A                  	CALL	DEVIOCALL2	;Get correct date and time
  6752 00000C09 1F                      	POP	DS
  6753 00000C0A 5B                      	POP	BX
  6754 00000C0B E8FF3A                  	CALL	SETWRITE
  6755 00000C0E 8F06[B603]              	POP	WORD [TIMEBUF]
  6756 00000C12 1E                      	PUSH	DS
  6757 00000C13 C536[2E00]              	LDS	SI,[BCLOCK]
  6758 00000C17 E84A3A                  	CALL	DEVIOCALL2	;Set the date
  6759 00000C1A 1F                      	POP	DS
  6760 00000C1B 5B                      	POP	BX
  6761 00000C1C 5E                      	POP	SI
  6762                                  WKDAY:
  6763 00000C1D A1[5403]                	MOV	AX,[DAYCNT]
  6764 00000C20 31D2                    	XOR	DX,DX
  6765 00000C22 B90700                  	MOV	CX,7
  6766 00000C25 40                      	INC	AX
  6767 00000C26 40                      	INC	AX		;First day was Tuesday
  6768 00000C27 F7F1                    	DIV	CX		;Compute day of week
  6769 00000C29 8816[5603]              	MOV	[WEEKDAY],DL
  6770 00000C2D 30C0                    	XOR	AL,AL		;Flag OK
  6771                                  RET25:
  6772 00000C2F C3                      	RETN
  6773                                  
  6774                                  ;----------------------------------------------------------
  6775                                  
  6776                                  ;**	DSUM - Compute the sum of a string of bytes
  6777                                  ;
  6778                                  ;	ENTRY	(cx) = byte count
  6779                                  ;		(ds:si) = byte address
  6780                                  ;		(dx) = sum register, initialized by caller
  6781                                  ;	EXIT	(dx) updated
  6782                                  ;	USES	ax, cx, dx, si, flags
  6783                                  
  6784                                  DSUM:
  6785 00000C30 B400                    	MOV	AH,0
  6786 00000C32 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6787                                  	;JCXZ	RET25 ; 18/07/2018
  6788                                  DSUM1:
  6789 00000C34 AC                      	LODSB
  6790 00000C35 01C2                    	ADD	DX,AX
  6791 00000C37 E2FB                    	LOOP	DSUM1
  6792                                  DSUM9:
  6793 00000C39 C3                      	RETN
  6794                                  
  6795                                  ;============================================================================
  6796                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6797                                  ;============================================================================
  6798                                  ; 29/04/2019 - Retro DOS v4.0
  6799                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6800                                  
  6801                                  ; 12/03/2018 - Retro DOS v2.0 
  6802                                  
  6803                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6804                                  ;NAME	GETSET
  6805                                  
  6806                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6807                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6808                                  
  6809                                  ;USERNUM:
  6810                                  ;	DW	0			; 24 bit user number
  6811                                  ;       DB      0
  6812                                  ;;	IF      IBM
  6813                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6814                                  ;;	ELSE
  6815                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6816                                  ;;	ENDIF
  6817                                  
  6818                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6819                                  ;; 08/07/2018 - Retro DOS v3.0
  6820                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6821                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6822                                  
  6823                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6824                                  ;----------------------------------------------------------------------------
  6825                                  
  6826                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6827                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6828                                  
  6829                                  _$GET_VERSION:
  6830                                  
  6831                                  ; Inputs:
  6832                                  ;       None
  6833                                  ; Function:
  6834                                  ;       Return MS-DOS version number
  6835                                  ; Outputs:
  6836                                  ;       OEM number in BH
  6837                                  ;       User number in BL:CX (24 bits)
  6838                                  ;       Version number as AL.AH in binary
  6839                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6840                                  
  6841                                  ; MSDOS 6.0
  6842                                  ;
  6843                                  ;	Fake_Count is used to lie about the version numbers to support
  6844                                  ;	old binarys. See ms_table.asm for more info.
  6845                                  ;
  6846                                  ;		if input al = 00
  6847                                  ;		  (bh) = OEM number			
  6848                                  ;		else if input al = 01
  6849                                  ;		  (bh) = version flags
  6850                                  ;		 
  6851                                  ;		       	 bits 0-2 = DOS internal revision
  6852                                  ;		       	 bits 3-7 = DOS type flags
  6853                                  ;		              bit 3    = DOS is in ROM
  6854                                  ;		              bit 4    = DOS in in HMA
  6855                                  ;		              bits 5-7 = reserved
  6856                                  ;               M007 change - only bit 3 is now valid. Other bits
  6857                                  ;               are 0 when AL = 1
  6858                                  
  6859                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6860 00000C3A 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6861 00000C3F 8CDB                    	mov	bx, ds
  6862                                  
  6863                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6864                                  	;--------------------------------------
  6865                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6866                                  
  6867 00000C41 16                              PUSH    SS
  6868 00000C42 1F                              POP     DS
  6869                                          
  6870                                  	; 06/01/2024
  6871                                  	;MOV	BX,[USERNUM+2]
  6872                                          ;MOV	CX,[USERNUM]
  6873                                  
  6874                                  	; 13/05/2019 - Retro DOS v4.0
  6875                                  
  6876                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6877                                  	;DOS flags
  6878                                  
  6879 00000C43 3C01                    	cmp	AL,1
  6880 00000C45 7502                    	jne	short Norm_Vers
  6881                                  
  6882                                  ;ifdef ROMDOS
  6883                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6884                                  ;				(DOSINROM = 8)
  6885                                  ;else
  6886 00000C47 30FF                            xor     bh,bh		; Otherwise return 0
  6887                                  ;endif				;M007 end
  6888                                  
  6889                                  Norm_Vers:
  6890                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6891                                  
  6892                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6893                                  	; 13/05/2019 - Retro DOS v4.0
  6894 00000C49 1E                      	push	ds		; Get the version number from the
  6895 00000C4A 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6896                                  	;mov	ax,[40h]
  6897 00000C4E A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6898                                  	; 07/12/2022
  6899 00000C51 1F                      	pop	ds
  6900 00000C52 E82CF8                  	call	Get_User_Stack
  6901                                  				; Put values for return registers
  6902                                  				; in the proper place on the user's	 
  6903                                  				; stack addressed by DS:SI
  6904                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6905                                  gdrvfspc_ret:
  6906                                          ;MOV	[SI+user_env.user_AX],AX
  6907 00000C55 8904                            MOV	[SI],AX
  6908                                          ;MOV	[SI+4],CX
  6909 00000C57 894C04                  	mov	[SI+user_env.user_CX],CX
  6910                                  set_user_bx:
  6911                                  	;MOV	[SI+2],BX
  6912 00000C5A 895C02                  	mov	[SI+user_env.user_BX],BX
  6913                                  
  6914 00000C5D C3                      	RETN
  6915                                  
  6916                                  ; 18/07/2018 - Retro DOS v3.0
  6917                                  
  6918                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6919                                  ;----------------------------------------------------------------------------
  6920                                  
  6921                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6922                                  ;
  6923                                  ;	ENTRY	none
  6924                                  ;	EXIT	(al) = value of VERIFY flag
  6925                                  ;	USES	all
  6926                                  
  6927                                  
  6928                                  _$GET_VERIFY_ON_WRITE:
  6929                                  
  6930                                  ;hkn; SS override
  6931 00000C5E 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6932 00000C62 C3                      	retn
  6933                                  
  6934                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6935                                  ;
  6936                                  ;	ENTRY	(al) = value of VERIFY flag
  6937                                  ;	EXIT	none
  6938                                  ;	USES	all
  6939                                  
  6940                                  _$SET_VERIFY_ON_WRITE:
  6941                                  
  6942 00000C63 2401                    	AND	AL,1
  6943                                  ;hkn; SS override
  6944 00000C65 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6945                                  RET27:	; 18/07/2018
  6946 00000C69 C3                      	retn
  6947                                  
  6948                                  ; 19/07/2018 - Retro DOS v3.0
  6949                                  
  6950                                  ;BREAK <$International - return country-dependent information>
  6951                                  ;----------------------------------------------------------------------------
  6952                                  ;
  6953                                  ; Procedure Name : $INTERNATIONAL
  6954                                  ;
  6955                                  ; Inputs:
  6956                                  ;	MOV	AH,International
  6957                                  ;	MOV	AL,country	(al = 0 => current country)
  6958                                  ;      [MOV	BX,country]
  6959                                  ;	LDS	DX,block
  6960                                  ;	INT	21
  6961                                  ; Function:
  6962                                  ;	give users an idea of what country the application is running
  6963                                  ; Outputs:
  6964                                  ;	IF DX != -1 on input (get country)
  6965                                  ;	  AL = 0 means return current country table.
  6966                                  ;	  0<AL<0FFH means return country table for country AL
  6967                                  ;	  AL = 0FF means return country table for country BX
  6968                                  ;	  No Carry:
  6969                                  ;	     Register BX will contain the 16-bit country code.
  6970                                  ;	     Register AL will contain the low 8 bits of the country code.
  6971                                  ;	     The block pointed to by DS:DX is filled in with the information
  6972                                  ;	     for the particular country.
  6973                                  ;		BYTE  Size of this table excluding this byte and the next
  6974                                  ;		BYTE  Country code represented by this table
  6975                                  ;			A sequence of n bytes, where n is the number specified
  6976                                  ;			by the first byte above and is not > internat_block_max,
  6977                                  ;			in the correct order for being returned by the
  6978                                  ;			INTERNATIONAL call as follows:
  6979                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6980                                  ;		5 BYTE	Currency symbol null terminated
  6981                                  ;		2 BYTE	thousands separator null terminated
  6982                                  ;		2 BYTE	Decimal point null terminated
  6983                                  ;		2 BYTE	Date separator null terminated
  6984                                  ;		2 BYTE	Time separator null terminated
  6985                                  ;		1 BYTE	Bit field.  Currency format.
  6986                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6987                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6988                                  ;		1 BYTE	No. of significant decimal digits in currency
  6989                                  ;		1 BYTE	Bit field.  Time format.
  6990                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6991                                  ;		DWORD	Call address of case conversion routine
  6992                                  ;		2 BYTE	Data list separator null terminated.
  6993                                  ;	  Carry:
  6994                                  ;	     Register AX has the error code.
  6995                                  ;	IF DX = -1 on input (set current country)
  6996                                  ;	  AL = 0 is an error
  6997                                  ;	  0<AL<0FFH means set current country to country AL
  6998                                  ;	  AL = 0FF means set current country to country BX
  6999                                  ;	  No Carry:
  7000                                  ;	    Current country SET
  7001                                  ;	    Register AL will contain the low 8 bits of the country code.
  7002                                  ;	  Carry:
  7003                                  ;	     Register AX has the error code.
  7004                                  ;-----------------------------------------------------------------------------
  7005                                  
  7006                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  7007                                  
  7008                                  ; 13/05/2019 - Retro DOS v4.0
  7009                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  7010                                  
  7011                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7012                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  7013                                  
  7014                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7015                                  	 
  7016 00000C6A 3CFF                    	CMP	AL,0FFH
  7017 00000C6C 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7018 00000C6E 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7019 00000C70 30FF                    	XOR	BH,BH
  7020                                  BX_HAS_CODE:
  7021 00000C72 1E                      	PUSH	DS
  7022 00000C73 07                      	POP	ES
  7023 00000C74 52                      	PUSH	DX
  7024 00000C75 5F                      	POP	DI			; User buffer to ES:DI
  7025                                  
  7026                                  ;hkn; SS is DOSDATA
  7027                                  ;	context DS
  7028                                  
  7029 00000C76 16                      	push	ss
  7030 00000C77 1F                      	pop	ds
  7031                                  
  7032 00000C78 83FFFF                  	CMP	DI,-1
  7033 00000C7B 745D                    	JZ	short international_set
  7034 00000C7D 09DB                    	OR	BX,BX
  7035 00000C7F 7505                    	JNZ	short international_find
  7036                                  
  7037                                  ;hkn; country_cdpg is in DOSDATA segment.
  7038 00000C81 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7039                                  
  7040 00000C84 EB39                    	JMP	SHORT international_copy
  7041                                  
  7042                                  international_find:
  7043                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7044                                  	; 06/01/2024
  7045 00000C86 31ED                    	xor	bp,bp ; 0
  7046 00000C88 E80A00                  	CALL	international_get
  7047 00000C8B 7255                    	JC	short errtn
  7048                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7049                                  	; 06/01/2024
  7050 00000C8D 09DB                    	or	bx,bx
  7051 00000C8F 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7052 00000C91 89D3                    	MOV	BX,DX			 ; put country back
  7053 00000C93 EB3A                    	JMP	SHORT international_ok3
  7054                                  
  7055                                  international_get:
  7056 00000C95 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7057                                  
  7058                                  ;hkn; country_cdpg is in DOSDATA segment.
  7059                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7060                                  
  7061                                  	; MSDOS 3.3
  7062                                  	;;cmp	bx,[SI+63h]
  7063                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7064                                  	;jz	short RET27
  7065                                  
  7066                                  	; 13/05/2019 - Retro DOS v4.0
  7067                                  
  7068                                  	; MSDOS 6.0
  7069                                  	;cmp	bx,[ss:si+68h]
  7070 00000C98 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7071 00000C9C 74CB                    	jz	short RET27			; return if equal
  7072                                  
  7073 00000C9E 89DA                    	MOV	DX,BX
  7074 00000CA0 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7075                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7076 00000CA2 B80014                  	mov	ax,1400h
  7077 00000CA5 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7078                                  			; Return: AL = 00h not installed, OK to install
  7079                                  			; 01h not installed, not OK
  7080                                  			; FFh installed
  7081 00000CA7 3CFF                    	CMP	AL,0FFH
  7082 00000CA9 7510                    	JNZ	short interr		; not in memory
  7083                                  	
  7084                                  	; 06/01/2024
  7085 00000CAB B80314                  	mov	ax,1403h		; set country info
  7086                                  
  7087                                  	;cmp	bp,0
  7088 00000CAE 09ED                    	or	bp,bp			; GetCntry ?
  7089 00000CB0 7501                    	JNZ	short stcdpg
  7090                                  	
  7091                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7092                                  	;mov	ax,1404h
  7093 00000CB2 40                      	inc	ax	; AX = 1404h ; get country info
  7094                                  
  7095                                  	; 06/01/2024
  7096                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7097                                  	;		; BX = code page, DX = country code,
  7098                                  	;		; DS:SI -> internal code page structure
  7099                                  	;		; ES:DI -> user buffer
  7100                                  	;		; Return: AL = status
  7101                                  	;
  7102                                  	;JMP	short chkok
  7103                                  	
  7104                                  	;nop
  7105                                  
  7106                                  stcdpg:
  7107                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7108                                  	; 06/01/2024
  7109                                  	;mov     ax,1403h
  7110                                  gscdpg:
  7111 00000CB3 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7112                                  			; DS:SI -> internal code page structure
  7113                                  			; BX = code page, DX = country code
  7114                                  			; Return: AL = status
  7115                                  chkok:
  7116 00000CB5 08C0                    	or	al,al			; success ?
  7117                                  	;retz				; yes
  7118 00000CB7 74B0                    	jz	short RET27
  7119                                  
  7120                                  setcarry:
  7121 00000CB9 F9                      	STC				; set carry
  7122 00000CBA C3                      	retn
  7123                                  interr:
  7124 00000CBB B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7125 00000CBD EBFA                    	JMP	short setcarry
  7126                                  
  7127                                  international_copy:
  7128                                  
  7129                                  ;hkn; country_cdpg is in DOSDATA segment.
  7130                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7131                                  
  7132                                  	; MSDOS 3.3
  7133                                  	;;mov	bx,[SI+63h]
  7134                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7135                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7136                                  
  7137                                  	; 13/05/2019 - Retro DOS v4.0
  7138                                  
  7139                                  	; MSDOS 6.0
  7140                                  	;mov	bx,[ss:si+68h]
  7141 00000CBF 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7142 00000CC3 BE[6C12]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7143                                  
  7144                                  	;mov	cx,24
  7145 00000CC6 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7146                                  
  7147                                  	; MSDOS 6.0
  7148                                  
  7149                                  ;hkn;	must set up DS to SS so that international info can be copied
  7150                                  	
  7151 00000CC9 1E                      	push	ds
  7152                                  
  7153 00000CCA 16                      	push	ss			; cs -> ss
  7154 00000CCB 1F                      	pop	ds
  7155                                  
  7156 00000CCC F3A4                    	REP	MOVSB			; copy country info
  7157                                  
  7158                                  	; MSDOS 6.0
  7159                                  
  7160 00000CCE 1F                      	pop	ds	;hkn;	restore ds
  7161                                  
  7162                                  international_ok3:
  7163 00000CCF E8AFF7                  	call	Get_User_Stack
  7164                                  ;ASSUME	DS:NOTHING
  7165                                  	;MOV	[SI+2],BX
  7166 00000CD2 895C02                  	MOV	[SI+user_env.user_BX],BX
  7167                                  international_ok:
  7168 00000CD5 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7169                                  ;SYS_RET_OK_jmp:
  7170                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7171                                  nono:	; 15/12/2022
  7172                                  SYS_RET_OK_jmp:
  7173 00000CD7 E95DF9                  	jmp	SYS_RET_OK
  7174                                  
  7175                                  international_set:
  7176                                  
  7177                                  ;hkn; ASSUME	DS:DOSGROUP
  7178                                  ;ASSUME	DS:DOSDATA
  7179                                  
  7180 00000CDA BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7181 00000CDD E8B5FF                  	CALL	international_get
  7182 00000CE0 73F3                    	JNC	short international_ok
  7183                                  errtn:
  7184 00000CE2 3CFF                    	CMP	AL,0FFH
  7185 00000CE4 7403                    	JZ	short errtn2
  7186                                  errtn1:
  7187 00000CE6 E957F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7188                                  errtn2:
  7189                                  	;error	error_invalid_function	; NLSFUNC not existent
  7190                                  
  7191                                  	;mov	al,1
  7192 00000CE9 B001                    	mov	al,error_invalid_function 
  7193 00000CEB EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7194                                  ;errtn3:
  7195                                  ;	jmp	SYS_RET_ERR
  7196                                  
  7197                                  ;EndProc $INTERNATIONAL
  7198                                  
  7199                                  ; 19/07/2018
  7200                                  
  7201                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7202                                  
  7203                                  ;----------------------------------------------------------------------------
  7204                                  ;
  7205                                  ; Procedure Name : $GetExtCntry
  7206                                  ;
  7207                                  ; Inputs:
  7208                                  ;	if AL >= 20H
  7209                                  ;	  AL= 20H    capitalize single char, DL= char
  7210                                  ;	      21H    capitalize string, CX= string length
  7211                                  ;	      22H    capitalize ASCIIZ string
  7212                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7213                                  ;	      80H bit 0 = use normal upper case table
  7214                                  ;		      1 = use file upper case table
  7215                                  ;	   DS:DX points to string
  7216                                  ;
  7217                                  ;	else
  7218                                  ;
  7219                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7220                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7221                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7222                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7223                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7224                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7225                                  ;	INT	21
  7226                                  ; Function:
  7227                                  ;	give users extended country dependent information
  7228                                  ;	or capitalize chars
  7229                                  ; Outputs:
  7230                                  ;	  No Carry:
  7231                                  ;	     extended country info is succesfully returned
  7232                                  ;	  Carry:
  7233                                  ;	     Register AX has the error code.
  7234                                  ;	     AX=0, NO	 for YES/NO CHECK
  7235                                  ;		1, YES
  7236                                  ;----------------------------------------------------------------------------
  7237                                  
  7238                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7239                                  
  7240                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7241                                  
  7242                                  	; MSDOS 6.0
  7243                                  _$GetExtCntry:
  7244 00000CED 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7245 00000CEF 7269                    	JB	short notcap
  7246                                  capcap: 				;
  7247 00000CF1 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7248 00000CF3 7505                    	JNZ	short fileupper		; file upper case
  7249                                  
  7250                                  ;hkn; UCASE_TAB in DOSDATA
  7251 00000CF5 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7252 00000CF8 EB05                    	JMP	SHORT capit
  7253                                  
  7254                                  fileupper:
  7255                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7256                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7257                                  	; AL >= 80h
  7258 00000CFA 247F                    	and	al,7Fh 
  7259                                  
  7260                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7261 00000CFC BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7262                                  capit:					;
  7263 00000CFF 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7264 00000D01 750D                    	JNZ	short chkyes		; no
  7265 00000D03 88D0                    	MOV	AL,DL			; set up AL
  7266 00000D05 E85643                  	call	GETLET3 		; upper case it
  7267 00000D08 E876F7                  	call	Get_User_Stack		; get user stack
  7268                                  	;mov	[si+6],al
  7269 00000D0B 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7270 00000D0E EBC7                    	JMP	SHORT nono		; done
  7271                                  chkyes: 				;
  7272 00000D10 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7273 00000D12 7522                    	JNZ	short capstring		; no
  7274                                  
  7275 00000D14 31C0                    	XOR	AX,AX			; presume NO
  7276                                  		      
  7277                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7278                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7279                                  
  7280                                  	; 06/08/2018 - Retro DOS v3.0
  7281                                  	; 13/05/2019 - Retro DOS v4.0
  7282                                  	;cmp	dl,'Y'
  7283 00000D16 2E3A16[150A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7284 00000D1B 7416                    	JZ	short yesyes		; yes
  7285                                  	;cmp	dl,'y'
  7286 00000D1D 2E3A16[170A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7287 00000D22 740F                    	JZ	short yesyes		; yes
  7288                                  	;cmp	dl,'N'
  7289 00000D24 2E3A16[160A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7290 00000D29 74AC                    	JZ	short nono		; no
  7291                                  	;cmp	dl,'n'
  7292 00000D2B 2E3A16[180A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7293 00000D30 74A5                    	JZ	short nono		; no
  7294                                  ;dbcs_char:				;
  7295 00000D32 40                      	INC	AX			; not YES or NO
  7296                                  yesyes: 				;
  7297 00000D33 40                      	INC	AX			; return 1
  7298                                  	; 15/12/2022
  7299                                  ;nono:	
  7300 00000D34 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7301                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7302                                  	;jmp	SYS_RET_OK		; done
  7303                                  
  7304                                  capstring:				;
  7305 00000D36 89D6                    	MOV	SI,DX			; si=dx
  7306 00000D38 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7307 00000D3A 750D                    	JNZ	short capascii		; no
  7308                                  	;OR	CX,CX			; check count 0
  7309                                  	;JZ	short nono		; yes finished
  7310                                  	; 06/01/2024
  7311 00000D3C E399                    	jcxz	nono
  7312                                  concap: 				;
  7313 00000D3E AC                      	LODSB				; get char
  7314 00000D3F E81C43                  	call	GETLET3 		; upper case it
  7315 00000D42 8844FF                  	MOV	byte [SI-1],AL		; store back
  7316                                  ;next99: 				;
  7317 00000D45 E2F7                    	LOOP	concap			; continue
  7318 00000D47 EB8E                    	JMP	short nono		; done
  7319                                  capascii:				;
  7320 00000D49 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7321 00000D4B 7545                    	JNZ	short capinval		; no
  7322                                  concap2:				;
  7323 00000D4D AC                      	LODSB				; get char
  7324 00000D4E 08C0                    	or	al,al			; end of string ?
  7325 00000D50 7485                    	JZ	short nono		; yes
  7326 00000D52 E80943                  	call	GETLET3 		; upper case it
  7327 00000D55 8844FF                  	MOV	[SI-1],AL		; store back
  7328 00000D58 EBF3                    	JMP	short concap2 		; continue
  7329                                  
  7330                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7331                                  
  7332                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7333                                  ; _$GetExtCntry:
  7334                                  
  7335                                  notcap:
  7336 00000D5A 83F905                  	CMP	CX,5			; minimum size is 5
  7337 00000D5D 7277                    	jb	short sizeerror
  7338                                  
  7339                                  GEC_CONT:
  7340                                  ;hkn; SS is DOSDATA
  7341                                  	;context DS
  7342                                  
  7343 00000D5F 16                      	push	ss
  7344                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7345 00000D60 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7346                                  	
  7347                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7348 00000D61 BE[0012]                	MOV	SI,COUNTRY_CDPG
  7349                                  
  7350 00000D64 83FAFF                  	CMP	DX,-1			; active country ?
  7351 00000D67 7503                    	JNZ	short GETCDPG 		; no
  7352                                  
  7353                                  ;hkn; use DS override to accesss country_cdpg fields
  7354                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7355                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7356 00000D69 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7357                                  					; get active country id;smr;use DS
  7358                                  GETCDPG:
  7359 00000D6C 83FBFF                  	CMP	BX,-1			; active code page?
  7360 00000D6F 7503                    	JNZ	short CHKAGAIN		; no, check again
  7361                                  
  7362                                  ;hkn; use DS override to accesss country_cdpg fields
  7363                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7364                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7365 00000D71 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7366                                  					; get active code page id;smr;Use DS
  7367                                  CHKAGAIN:
  7368                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7369 00000D74 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7370                                  					; same as active country id?;smr;use DS
  7371 00000D77 7550                    	JNZ	short CHKNLS		; no
  7372                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7373 00000D79 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7374                                  					; same as active code pg id?;smr;use DS
  7375 00000D7C 754B                    	JNZ	short CHKNLS		; no
  7376                                  CHKTYPE:
  7377                                  	;mov	bx,[si+48h]
  7378 00000D7E 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7379                                  					; bx = sys code page id;smr;use DS
  7380 00000D81 51                      	PUSH	CX			; save cx
  7381                                  	;mov	cx,[si+4Ah]
  7382 00000D82 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7383                                  	;mov	si,COUNTRY_CDPG+76
  7384 00000D85 BE[4C12]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7385                                  NXTENTRY:
  7386 00000D88 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7387 00000D8A 740B                    	JZ	short FOUNDIT
  7388 00000D8C 83C605                  	ADD	SI,5			; next entry
  7389 00000D8F E2F7                    	LOOP	NXTENTRY
  7390 00000D91 59                      	POP	CX
  7391                                  capinval:
  7392                                  	;error	error_invalid_function	; info type not found
  7393                                  	;mov	al,1
  7394 00000D92 B001                    	mov	al,error_invalid_function
  7395                                  ;SYS_RET_ERR_jmp:
  7396                                  	;jmp	SYS_RET_ERR
  7397                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7398                                  SYS_RET_ERR_jmp:
  7399 00000D94 E9A9F8                  	jmp	SYS_RET_ERR	
  7400                                  
  7401                                  FOUNDIT:
  7402 00000D97 A4                      	MOVSB				; move info id byte
  7403 00000D98 59                      	POP	CX			; restore char count
  7404                                  	;cmp	al,1
  7405 00000D99 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7406 00000D9B 7415                    	JZ	short setsize
  7407 00000D9D B90400                  	MOV	CX,4			; 4 bytes will be moved
  7408 00000DA0 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7409                                  OK_RETN:
  7410 00000DA3 F3A4                    	REP	MOVSB			; copy info
  7411 00000DA5 89C1                    	MOV	CX,AX			; CX = actual length returned
  7412 00000DA7 89D8                    	MOV	AX,BX			; return sys code page in ax
  7413                                  GETDONE:
  7414 00000DA9 E8D5F6                  	call	Get_User_Stack		; return actual length to user's CX
  7415                                  	;mov	[si+4],cx 
  7416 00000DAC 894C04                  	MOV	[SI+user_env.user_CX],CX
  7417                                  	;jmp	SYS_RET_OK
  7418                                  	; 15/12/2022
  7419                                  	; 25/06/2019
  7420 00000DAF E988F8                  	jmp	SYS_RET_OK_clc
  7421                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7422                                  	; 15/12/2022
  7423                                  ;nono_jmp:
  7424                                  	;jmp	short nono
  7425                                  setsize:
  7426 00000DB2 83E903                  	SUB	CX,3			; size after length field
  7427 00000DB5 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7428 00000DB7 7302                    	JAE	short setsize2		; no
  7429 00000DB9 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7430                                  setsize2:
  7431 00000DBB 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7432                                  	;ADD	DI,2			; update index
  7433                                  	;ADD	SI,2
  7434                                  	; 06/01/2024
  7435 00000DBE 47                      	inc	di
  7436 00000DBF 47                      	inc	di
  7437 00000DC0 46                      	inc	si
  7438 00000DC1 46                      	inc	si
  7439 00000DC2 89C8                    	MOV	AX,CX
  7440 00000DC4 83C003                  	ADD	AX,3			; AX has the actual length
  7441 00000DC7 EBDA                    	JMP	short OK_RETN 		; go move it
  7442                                  CHKNLS:
  7443 00000DC9 30E4                    	XOR	AH,AH
  7444                                  	;PUSH	AX			; save info type
  7445                                  	;POP	BP			; bp = info type
  7446                                  	; 06/01/2024
  7447 00000DCB 89C5                    	mov	bp,ax
  7448                                  	
  7449                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7450 00000DCD B80014                  	mov     ax,1400h
  7451 00000DD0 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7452                                  			; Return: AL = 00h not installed, OK to install
  7453                                  			; 01h not installed, not OK
  7454                                  			; FFh installed
  7455 00000DD2 3CFF                    	CMP	AL,0FFH
  7456 00000DD4 7404                    	JZ	short NLSNXT		; in memory
  7457                                  
  7458                                  sizeerror:
  7459                                  	;error	error_invalid_function
  7460                                  	;mov	al,1
  7461 00000DD6 B001                    	mov	al,error_invalid_function
  7462                                  	;jmp	SYS_RET_ERR
  7463                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7464                                  sys_ret_err_jmp2:
  7465 00000DD8 EBBA                    	jmp	short SYS_RET_ERR_jmp
  7466                                  
  7467                                  NLSNXT: 
  7468                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7469 00000DDA B80214                  	mov     ax,1402h
  7470 00000DDD CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7471                                  			; BP = subfunction, BX = code page
  7472                                  			; DX = country code, DS:SI -> internal code page structure
  7473                                  			; ES:DI -> user buffer, CX = size of user buffer
  7474                                  			; Return: AL = status
  7475                                  			; 00h successful
  7476                                  			; else DOS error code
  7477                                  
  7478 00000DDF 3C00                    	CMP	AL,0			; success ?
  7479 00000DE1 7505                    	JNZ	short NLSERROR
  7480                                  	;mov	ax,[si+48h] ; 13/05/2019
  7481 00000DE3 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7482                                  			; ax = sys code page id;smr;use ds;
  7483                                  			;BUGBUG;check whether DS is OK after the above calls
  7484 00000DE6 EBC1                    	JMP	short GETDONE
  7485                                  seterr:
  7486                                  	; 15/12/2022
  7487                                  NLSERROR:
  7488                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7489                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7490                                  	;jmp	short sys_ret_err_jmp2
  7491                                  	; 15/12/2022
  7492 00000DE8 EBAA                    	jmp	short SYS_RET_ERR_jmp
  7493                                  
  7494                                  ;EndProc $GetExtCntry
  7495                                  
  7496                                  ; 13/05/2019 - Retro DOS v4.0
  7497                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7498                                  
  7499                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7500                                  ;----------------------------------------------------------------------------
  7501                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7502                                  ;
  7503                                  ;   System call format:
  7504                                  ;
  7505                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7506                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7507                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7508                                  ;	INT	21
  7509                                  ;
  7510                                  ;	ENTRY	(al) = n
  7511                                  ;		(bx) = code page
  7512                                  ;	EXIT	'C' clear
  7513                                  ;		  global code page is set	(set global code page)
  7514                                  ;		  (BX) = active code page id	(get global code page)
  7515                                  ;		  (DX) = system code page id	(get global code page)
  7516                                  ;		'C' set
  7517                                  ;		  (AX) = error code
  7518                                  
  7519                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7520                                  
  7521                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7522                                  	; DOSCODE:4BC9h
  7523                                  
  7524                                  _$GetSetCdPg:
  7525                                  
  7526                                  ;hkn; SS is DOSDATA
  7527                                  	;context DS
  7528                                  
  7529 00000DEA 16                      	push	ss
  7530 00000DEB 1F                      	pop	ds
  7531                                  
  7532                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7533 00000DEC BE[0012]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7534                                  
  7535 00000DEF 3C01                    	CMP	AL,1		       ; get global code page
  7536 00000DF1 7512                    	JNZ	short setglpg 	       ; set global code page
  7537                                  	
  7538                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7539                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7540 00000DF3 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7541                                  					; get active code page id;smr;use ds
  7542                                  	;mov	dx,[si+48h]
  7543 00000DF6 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7544                                  				  	; get sys code page id;smr;use ds
  7545 00000DF9 E885F6                  	call	Get_User_Stack
  7546                                  ;ASSUME DS:NOTHING
  7547                                  	;;mov	[si+2],bx
  7548                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7549                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7550 00000DFC E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7551                                  	;mov	[si+6],dx
  7552 00000DFF 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7553                                  OK_RETURN:
  7554                                  	; 15/12/2022
  7555                                  	;transfer SYS_RET_OK
  7556 00000E02 E932F8                  	jmp	SYS_RET_OK
  7557                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7558                                  	;jmp	short nono_jmp
  7559                                  
  7560                                  ;hkn; ASSUME DS:DOSGROUP
  7561                                  ;ASSUME	DS:DOSDATA
  7562                                  
  7563                                  setglpg:
  7564 00000E05 3C02                    	CMP	AL,2
  7565 00000E07 752F                    	JNZ	short nomem
  7566                                  	
  7567                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7568                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7569 00000E09 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7570                                  	
  7571                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7572 00000E0C B80014                  	mov     ax,1400h
  7573 00000E0F CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7574                                  			; Return: AL = 00h not installed, OK to install
  7575                                  			; 01h not installed, not OK
  7576                                  			; FFh installed
  7577 00000E11 3CFF                    	CMP	AL,0FFH
  7578 00000E13 7523                    	JNZ	short nomem		; not in memory
  7579                                  
  7580                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7581 00000E15 B80114                  	mov     ax,1401h
  7582 00000E18 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7583                                  			; DS:SI -> internal code page structure
  7584                                  			; BX = new code page, DX = country code???
  7585                                  			; Return: AL = status
  7586                                  			; 00h successful
  7587                                  			; else DOS error code
  7588                                  	;cmp	al,0
  7589 00000E1A 08C0                    	or	al,al			; success ?
  7590 00000E1C 74E4                    	JZ	short OK_RETURN		; yes
  7591                                  
  7592 00000E1E 3C41                    	CMP	AL,65			; set device code page failed
  7593 00000E20 75C6                    	JNZ	short seterr
  7594                                  	;MOV	AX,65
  7595                                  	; 06/01/2024
  7596 00000E22 98                      	cbw
  7597 00000E23 A3[2403]                	MOV	[EXTERR],AX
  7598                                  	;mov	byte [EXTERR_ACTION],6
  7599                                  	;mov	byte [EXTERR_CLASS],5
  7600                                  	;mov	byte [EXTERR_LOCUS],4
  7601 00000E26 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7602 00000E2B C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7603 00000E30 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7604                                  	;transfer From_GetSet
  7605 00000E35 E910F8                  	jmp	From_GetSet
  7606                                  
  7607                                  	; 15/12/2022
  7608                                  ;seterr:
  7609                                  	;;;transfer SYS_RET_ERR
  7610                                  	;;jmp	SYS_RET_ERR
  7611                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7612                                  	;jmp	short NLSERROR
  7613                                  
  7614                                  nomem:
  7615                                  	;error	error_invalid_function	; function not defined
  7616                                  	;mov	al,1
  7617 00000E38 B001                    	mov	al,error_invalid_function
  7618 00000E3A EBAC                    	jmp	short seterr
  7619                                  
  7620                                  ;EndProc $GetSetCdPg
  7621                                  
  7622                                  ; 09/01/2024
  7623                                  ; 13/05/2019 - Retro DOS v4.0
  7624                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7625                                  
  7626                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7627                                  ;----------------------------------------------------------------------------
  7628                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7629                                  ;
  7630                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7631                                  ;		drive.
  7632                                  ;
  7633                                  ;	This call returns the same info in the same registers (except for the
  7634                                  ;	FAT pointer) as the old FAT pointer calls
  7635                                  ;
  7636                                  ;	ENTRY	DL = Drive number
  7637                                  ;	EXIT	AX = Sectors per allocation unit
  7638                                  ;		   = -1 if bad drive specified
  7639                                  ;		On User Stack
  7640                                  ;		    BX = Number of free allocation units
  7641                                  ;		    DX = Total Number of allocation units on disk
  7642                                  ;		    CX = Sector size
  7643                                  
  7644                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7645                                  
  7646                                  _$GET_DRIVE_FREESPACE:
  7647                                  
  7648                                  ;hkn; SS is DOSDATA
  7649                                  	;context DS
  7650 00000E3C 16                      	push	ss
  7651 00000E3D 1F                      	pop	ds
  7652                                  
  7653 00000E3E 88D0                    	MOV	AL,DL
  7654                                  	;invoke	GetThisDrv		; Get drive
  7655 00000E40 E8475C                  	call	GETTHISDRV
  7656                                  SET_AX_RET:
  7657 00000E43 7212                    	JC	short BADFDRV
  7658                                  	;invoke	DISK_INFO
  7659 00000E45 E88E1E                  	call	DISK_INFO
  7660 00000E48 87D3                    	XCHG	DX,BX
  7661                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7662                                  	; 06/01/2024
  7663 00000E4A 720B                    	jc	short BADFDRV
  7664 00000E4C 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7665                                  DoSt:
  7666 00000E4E E830F6                  	call	Get_User_Stack
  7667                                  ;ASSUME	DS:NOTHING
  7668                                  	;mov	[si+6],dx
  7669                                  	;;mov	[si+4],cx
  7670                                  	;;mov	[si+2],bx
  7671                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7672 00000E51 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7673                                  	;MOV	[SI+user_env.user_CX],CX
  7674                                  	;MOV	[SI+user_env.user_BX],BX
  7675                                  	;;MOV	[SI+user_env.user_AX],AX
  7676                                  	;mov	[si],ax
  7677                                  	;;return
  7678                                  	;retn
  7679                                  	; 09/01/2024
  7680 00000E54 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7681                                  
  7682                                  BADFDRV:
  7683                                  	; MSDOS 3.3
  7684                                  	;;mov	al,0Fh
  7685                                  	;mov	al,error_invalid_drive	; Assume error
  7686                                  
  7687                                  	; 13/05/2019 - Retro DOS v4.0
  7688                                  
  7689                                  	; MSDOS 6.0 & MSDOS 3.3
  7690                                  	;invoke	FCB_RET_ERR
  7691 00000E57 E8FCF7                  	call	FCB_RET_ERR
  7692                                  	
  7693 00000E5A B8FFFF                  	MOV	AX,-1
  7694 00000E5D EBEF                    	JMP	short DoSt
  7695                                  
  7696                                  ;EndProc $GET_DRIVE_FREESPACE
  7697                                  
  7698                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7699                                  ;----------------------------------------------------------------------------
  7700                                  ;**	$Get_DMA - Get Disk Transfer Address
  7701                                  ;
  7702                                  ;	ENTRY	none
  7703                                  ;	EXIT	ES:BX is current transfer address
  7704                                  ;	USES	all
  7705                                  
  7706                                  	; 09/01/2024
  7707                                  _$GET_DMA:
  7708 00000E5F 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7709 00000E64 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7710 00000E69 E815F6                  	call	Get_User_Stack
  7711                                  	;mov	[si+2],bx
  7712                                  	;mov	[si+10h],cx
  7713                                  	; 09/01/2024
  7714                                  	;MOV	[SI+user_env.user_BX],BX
  7715 00000E6C 894C10                  	MOV	[SI+user_env.user_ES],CX
  7716                                  	;retn
  7717                                  	; 09/01/2024
  7718 00000E6F E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7719                                  
  7720                                  ;**	$Set_DMA - Set Disk Transfer Address
  7721                                  ;----------------------------------------------------------------------------
  7722                                  ;	ENTRY	DS:DX is current transfer address
  7723                                  ;	EXIT	none
  7724                                  ;	USES	all
  7725                                  
  7726                                  _$SET_DMA:
  7727 00000E72 368916[2C03]            	MOV	[SS:DMAADD],DX
  7728 00000E77 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7729 00000E7C C3                      	retn
  7730                                  
  7731                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7732                                  ;------------------------------------------------------------------------------
  7733                                  
  7734                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7735                                  ;-----------------------------------------------------
  7736                                  ;	ENTRY	none
  7737                                  ;	EXIT	(AL) = drive number
  7738                                  ;	USES	all
  7739                                  
  7740                                  _$GET_DEFAULT_DRIVE:
  7741 00000E7D 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7742 00000E81 C3                      	retn
  7743                                  
  7744                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7745                                  ;-----------------------------------------------------
  7746                                  ;	ENTRY	(DL) = Drive number for new default drive
  7747                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7748                                  
  7749                                  _$SET_DEFAULT_DRIVE:
  7750 00000E82 88D0                    	MOV	AL,DL
  7751 00000E84 FEC0                    	INC	AL			; A=1, B=2...
  7752 00000E86 E8E55B                  	call	GetVisDrv		; see if visible drive
  7753 00000E89 7204                    	JC	short SETRET		; errors do not set
  7754 00000E8B 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7755                                  
  7756                                  SETRET:
  7757 00000E8F 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7758 00000E93 C3                      	retn
  7759                                  
  7760                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7761                                  ;----------------------------------------------------------------------------
  7762                                  
  7763                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7764                                  ;---------------------------------------------------
  7765                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7766                                  ;	contents of an interrupt vector.
  7767                                  ;
  7768                                  ;	ENTRY	(AL) = interrupt number
  7769                                  ;	EXIT	(ES:BX) = current interrupt vector
  7770                                  
  7771                                  _$GET_INTERRUPT_VECTOR:
  7772 00000E94 E82E00                  	CALL	RECSET
  7773 00000E97 26C41F                  	LES	BX,[ES:BX]
  7774 00000E9A E8E4F5                  	call	Get_User_Stack
  7775                                  set_user_es_bx:
  7776                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7777                                  	;;mov	[si+2],bx
  7778                                  	;mov	[si+10h],es
  7779                                  	;MOV	[SI+user_env.user_BX],BX
  7780 00000E9D 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7781                                  	;retn
  7782 00000EA0 E9B7FD                  	jmp	set_user_bx
  7783                                  
  7784                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7785                                  ;---------------------------------------------------
  7786                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7787                                  ;	contents of an interrupt vector.
  7788                                  ;
  7789                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7790                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7791                                  ;	for explanation.
  7792                                  ;
  7793                                  ;	ENTRY	(AL) = interrupt number
  7794                                  ;		(ds:dx) = desired new vector value
  7795                                  ;	EXIT	none
  7796                                  ;	USES	all
  7797                                  
  7798                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7799                                  ; 13/05/2019 - Retro DOS v4.0
  7800                                  
  7801                                  _$SET_INTERRUPT_VECTOR:
  7802 00000EA3 E81F00                  	CALL	RECSET
  7803 00000EA6 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7804 00000EA7 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7805 00000EAA 268C5F02                	MOV	[ES:BX+2],DS
  7806 00000EAE FB                      	STI
  7807                                  					; M004, M068 - Start
  7808                                  	; MSDOS 6.0
  7809 00000EAF 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7810                                  					; Q: was the previous call an int 21h
  7811                                  					;    exec call
  7812                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7813                                  	;jnz	short siv_1		; Y: go set count
  7814                                  	;retn				; N: return
  7815                                  	; 15/12/2022
  7816 00000EB5 740D                    	jz	short siv_2
  7817                                  siv_1:	
  7818 00000EB7 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7819 00000EBD 7505                    	jnz	short siv_2		 ; N: done
  7820                                  	; 20/09/2023
  7821 00000EBF 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7822                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7823                                  					 ; dispatcher to turn A20 Off before
  7824                                  					 ; returning to user.
  7825                                  siv_2:
  7826                                  	; 07/12/2022
  7827 00000EC4 C3                      	retn				; M004, M068 - End
  7828                                  	
  7829                                  RECSET:
  7830 00000EC5 31DB                    	XOR	BX,BX
  7831 00000EC7 8EC3                    	MOV	ES,BX
  7832 00000EC9 88C3                    	MOV	BL,AL
  7833 00000ECB D1E3                    	SHL	BX,1
  7834 00000ECD D1E3                    	SHL	BX,1
  7835 00000ECF C3                      	retn
  7836                                  
  7837                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7838                                  ;-------------------------------------------------------------------------------------
  7839                                  
  7840                                  ;**	$Char_Oper - Manipulate Switch Character
  7841                                  ;
  7842                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7843                                  ;
  7844                                  ;	ENTRY	AL = function:
  7845                                  ;		    0 - read switch char
  7846                                  ;		    1 - set switch char (char in DL)
  7847                                  ;		    2 - read device availability
  7848                                  ;			Always returns available
  7849                                  ;		    3 - set device availability
  7850                                  ;			No longer supported (NOP)
  7851                                  ;	EXIT	(al) = 0xff iff error
  7852                                  ;		(al) != 0xff if ok
  7853                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7854                                  ;	USES	AL, DL
  7855                                  ;
  7856                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7857                                  ;		The character / is always returned for subfunction 0,
  7858                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7859                                  
  7860                                  ; 13/05/2019 - Retro DOS v4.0
  7861                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7862                                  
  7863                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7864                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7865                                  
  7866                                  _$CHAR_OPER:
  7867                                  	; MSDOS 6.0
  7868 00000ED0 08C0                    	or	al,al				; get switch?
  7869 00000ED2 B22F                    	mov	dl,'/'				; assume yes
  7870 00000ED4 7407                    	jz	short chop_1			; jump if yes
  7871 00000ED6 3C02                    	cmp	al,2				; check device availability?
  7872 00000ED8 B2FF                    	mov	dl,-1				; assume yes
  7873 00000EDA 7401                    	jz	short chop_1			; jump if yes
  7874 00000EDC C3                      	retn					; otherwise just quit
  7875                                  
  7876                                  ; subfunctions requiring return of value to user come here. DL holds
  7877                                  ; value to return
  7878                                  
  7879                                  chop_1:
  7880 00000EDD E8A1F5                  	call	Get_User_Stack
  7881 00000EE0 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7882 00000EE3 C3                      	retn
  7883                                  
  7884                                  	; MSDOS 3.3
  7885                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7886                                  	;push	ss
  7887                                  	;pop	ds
  7888                                  	;cmp	al,1
  7889                                  	;jb	short chop_1
  7890                                  	;jz	short chop_2
  7891                                  	;cmp	al,3
  7892                                  	;jb	short chop_3
  7893                                  	;jz	short chop_5
  7894                                  	;mov	al,0FFh
  7895                                  	;retn
  7896                                  ;chop_1:
  7897                                  	;mov	dl,[chSwitch]
  7898                                  	;jmp	short chop_4
  7899                                  ;chop_2:
  7900                                  	;mov	[chSwitch],dl
  7901                                  	;retn
  7902                                  ;chop_3:
  7903                                  	;mov	dl, FFh
  7904                                  ;chop_4:
  7905                                  	;call	Get_User_Stack
  7906                                  	;mov	[si+6],dx
  7907                                  ;chop_5:
  7908                                  	;retn
  7909                                  
  7910                                  ;**	$GetExtendedError - Return Extended error code
  7911                                  ;----------------------------------------------------------------------------
  7912                                  ;	This function reads up the extended error info from the static
  7913                                  ;	variables where it was stored.
  7914                                  ;
  7915                                  ;	ENTRY	none
  7916                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7917                                  ;		BL = recommended action
  7918                                  ;		BH = class of error
  7919                                  ;		CH = locus of error
  7920                                  ;		ES:DI = may be pointer
  7921                                  ;	USES	ALL
  7922                                  
  7923                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7924                                  
  7925                                  _$GetExtendedError:
  7926 00000EE4 16                      	push	ss
  7927 00000EE5 1F                      	pop	ds
  7928 00000EE6 A1[2403]                	MOV	AX,[EXTERR]
  7929 00000EE9 C43E[2803]              	LES	DI,[EXTERRPT]
  7930 00000EED 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7931 00000EF1 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7932 00000EF5 E889F5                  	call	Get_User_Stack
  7933                                  	;mov	[si+0Ah],di
  7934 00000EF8 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7935                                  
  7936                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7937                                  	;;mov	[si+10h],es
  7938                                  	;MOV	[SI+user_env.user_ES],ES
  7939                                  	;;mov	[si+2],bx
  7940                                  	;MOV	[SI+user_env.user_BX],BX
  7941 00000EFB E89FFF                  	call	set_user_es_bx
  7942                                  
  7943                                  	;mov	[si+4],cx
  7944 00000EFE 894C04                  	MOV	[SI+user_env.user_CX],CX
  7945                                  jmp_SYS_RET_OK:
  7946                                  	; 15/12/2022
  7947                                  	;jmp	SYS_RET_OK
  7948                                  	; 25/06/2019
  7949 00000F01 E936F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7950                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7951                                  ;jmp_SYS_RET_OK:
  7952                                  	;jmp	SYS_RET_OK
  7953                                  
  7954                                  ; --------------------------------------------------------------------------
  7955                                  ; 09/01/2024
  7956                                  %if 0
  7957                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7958                                  	; DOSCODE:4CF3h
  7959                                  ;patch_or_unknown:
  7960                                  ;get_code_page:
  7961                                  	push    si
  7962                                  	mov     si, COUNTRY_CDPG
  7963                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7964                                  	mov     ax, [ss:si+6Ah]
  7965                                  	pop     si
  7966                                  	retn
  7967                                  %endif
  7968                                  ; --------------------------------------------------------------------------
  7969                                  
  7970                                  ; 29/04/2019 - Retro DOS v4.0
  7971                                  
  7972                                  ;BREAK	<ECS_call - Extended Code System support function>
  7973                                  ;---------------------------------------------------------------------------
  7974                                  ; Inputs:
  7975                                  ;	AL = 0	get lead byte table
  7976                                  ;		on return DS:SI has the table location
  7977                                  ;
  7978                                  ;	AL = 1	set / reset interim console flag
  7979                                  ;		DL = flag (00H or 01H)
  7980                                  ;		no return
  7981                                  ;
  7982                                  ;	AL = 2	get interim console flag
  7983                                  ;		on return DL = current flag value
  7984                                  ;
  7985                                  ;	AL = OTHER then error, and returns with:
  7986                                  ;		AX = error_invalid_function
  7987                                  ;
  7988                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7989                                  ;	 SS:SP WILL BE PRESERVED!
  7990                                  ;---------------------------------------------------------------------------
  7991                                  
  7992                                  _$ECS_Call:
  7993 00000F04 08C0                    	or	al,al			; AL = 0 (get table)?
  7994                                  	;jnz	short _okok
  7995                                  	; 15/12/2022
  7996 00000F06 7403                    	jz	short get_lbt
  7997                                  ;_okok:
  7998 00000F08 E92CF7                  	jmp	SYS_RET_OK
  7999                                  get_lbt:
  8000 00000F0B E873F5                  	call	Get_User_Stack		; *
  8001                                  
  8002                                  ;hkn; dbcs_table moved low to dosdata
  8003                                  	;mov	word [si+8],DBCS_TAB+2
  8004 00000F0E C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  8005                                  
  8006 00000F13 06                      	push	es
  8007                                  	;getdseg <es>			; es = DOSDATA
  8008 00000F14 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  8009                                  	;mov	[si+14],es
  8010 00000F19 8C440E                  	mov	[SI+user_env.user_DS],es
  8011 00000F1C 07                      	pop	es
  8012                                  
  8013                                  	; 15/12/2022
  8014 00000F1D EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  8015                                  ;_okok:
  8016                                  	; 15/12/2022	
  8017                                  	;;transfer SYS_RET_OK
  8018                                  	;jmp	short jmp_SYS_RET_OK
  8019                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8020                                  	;;jmp	SYS_RET_OK
  8021                                  	;jmp	short jmp_SYS_RET_OK
  8022                                  
  8023                                  ;============================================================================
  8024                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8025                                  ;============================================================================
  8026                                  ; 19/07/2018 - Retro DOS v3.0
  8027                                  ; 15/05/2019 - Retro DOS v4.0
  8028                                  
  8029                                  ; System calls for parsing command lines
  8030                                  ;
  8031                                  ;   $PARSE_FILE_DESCRIPTOR
  8032                                  ;
  8033                                  ;   Modification history:
  8034                                  ;
  8035                                  ;       Created: ARR 30 March 1983
  8036                                  ;               EE PathParse 10 Sept 1983
  8037                                  ;
  8038                                  
  8039                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8040                                  ;---------------------------------------------------------------------------
  8041                                  ; Inputs:
  8042                                  ;       DS:SI Points to a command line
  8043                                  ;       ES:DI Points to an empty FCB
  8044                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8045                                  ;                   = 0 Parse stops if separator encountered
  8046                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8047                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8048                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8049                                  ;                   = 0  "       "      "       - put blanks in FCB
  8050                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8051                                  ;                   = 0  "       "      "        - put blanks in FCB
  8052                                  ; Function:
  8053                                  ;       Parse command line into FCB
  8054                                  ; Returns:
  8055                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8056                                  ;       DS:SI points to first character after filename
  8057                                  ;---------------------------------------------------------------------------
  8058                                  
  8059                                  _$PARSE_FILE_DESCRIPTOR:
  8060 00000F1F E8DE3F                  	call	MAKEFCB
  8061 00000F22 56                      	PUSH    SI
  8062 00000F23 E85BF5                  	call	Get_User_Stack
  8063                                  	;pop	word [si+8]
  8064 00000F26 8F4408                  	POP     word [SI+user_env.user_SI]
  8065 00000F29 C3                      	retn
  8066                                  
  8067                                  ;============================================================================
  8068                                  ; MISC.ASM, MSDOS 6.0, 1991
  8069                                  ;============================================================================
  8070                                  ; 19/07/2018 - Retro DOS v3.0
  8071                                  
  8072                                  ; 29/04/2019 - Retro DOS v4.0
  8073                                  
  8074                                  ;ENTRYPOINTSEG	EQU	0CH
  8075                                  ;MAXDIF		EQU	0FFFH
  8076                                  ;SAVEXIT 	EQU	10
  8077                                  ;WRAPOFFSET	EQU	0FEF0h
  8078                                  
  8079                                  ;
  8080                                  ;----------------------------------------------------------------------------
  8081                                  ;
  8082                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8083                                  ;
  8084                                  ;	Return Stuff sort of like old get fat call
  8085                                  ;
  8086                                  ;	ENTRY	none
  8087                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8088                                  ;			GOD help anyone who tries to do ANYTHING except
  8089                                  ;			READ this ONE byte.
  8090                                  ;		DX = Total Number of allocation units on disk
  8091                                  ;		CX = Sector size
  8092                                  ;		AL = Sectors per allocation unit
  8093                                  ;		   = -1 if bad drive specified
  8094                                  ;	USES	all
  8095                                  ;
  8096                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8097                                  ;
  8098                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8099                                  ;
  8100                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8101                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8102                                  ;			GOD help anyone who tries to do ANYTHING except
  8103                                  ;			READ this ONE byte.
  8104                                  ;		DX = Total Number of allocation units on disk
  8105                                  ;		CX = Sector size
  8106                                  ;		AL = Sectors per allocation unit
  8107                                  ;		   = -1 if bad drive specified
  8108                                  ;	USES	all
  8109                                  ;
  8110                                  ;----------------------------------------------------------------------------
  8111                                  ;
  8112                                  
  8113                                  _$SLEAZEFUNC:
  8114                                  	; 10/01/2024
  8115                                  	; 15/05/2019 - Retro DOS v4.0
  8116 00000F2A B200                    	MOV	DL,0
  8117                                  _$SLEAZEFUNCDL:
  8118 00000F2C 16                      	push	ss
  8119 00000F2D 1F                      	pop	ds
  8120                                  	
  8121 00000F2E 88D0                    	MOV	AL,DL
  8122 00000F30 E8575B                  	call	GETTHISDRV		; Get CDS structure
  8123                                  SET_AL_RET:
  8124                                  	; MSDOS 3.3
  8125                                  	;;mov	al, 0Fh
  8126                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8127                                  	
  8128                                  	; MSDOS 6.0 & MSDOS 3.3
  8129 00000F33 721D                    	JC	short BADSLDRIVE
  8130                                  
  8131 00000F35 E89E1D                  	call	DISK_INFO
  8132                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8133 00000F38 7218                    	jc	short BADSLDRIVE
  8134 00000F3A 8826[9805]              	MOV	[FATBYTE],AH
  8135                                  
  8136                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8137                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8138                                  ; CALL AGAIN
  8139                                  
  8140                                  	; 10/01/2024
  8141                                  	;MOV	DI,FATBYTE
  8142 00000F3E 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8143 00000F40 E83EF5                  	call	Get_User_Stack
  8144                                  	;mov	[si+4],cx
  8145                                  	;mov	[si+6],bx
  8146                                  	;mov	[si+2],di
  8147 00000F43 894C04                  	MOV	[SI+user_env.user_CX],CX
  8148 00000F46 895C06                  	MOV	[SI+user_env.user_DX],BX
  8149                                  	;MOV	[SI+user_env.user_BX],DI
  8150                                  	; 10/01/2024
  8151 00000F49 C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8152                                  	
  8153                                  	;mov	[si+0Eh],ss
  8154 00000F4E 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8155                                  
  8156 00000F51 C3                      	retn
  8157                                  
  8158                                  BADSLDRIVE:
  8159 00000F52 E901F7                  	jmp	FCB_RET_ERR
  8160                                  
  8161                                  ;
  8162                                  ;----------------------------------------------------------------------------
  8163                                  ;
  8164                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8165                                  ;
  8166                                  ;	Returns location of DOS status for interrupt routines
  8167                                  ;
  8168                                  ;	ENTRY	none
  8169                                  ;	EXIT	(es:bx) = flag location
  8170                                  ;	USES	all
  8171                                  ;
  8172                                  ;----------------------------------------------------------------------------
  8173                                  ;
  8174                                  
  8175                                  _$GET_INDOS_FLAG:
  8176 00000F55 E829F5                          CALL	Get_User_Stack
  8177                                          ;MOV	WORD [SI+2],INDOS
  8178 00000F58 C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8179                                  getin_segm:	; 13/01/2024
  8180                                  	;MOV	[SI+10H],SS
  8181 00000F5D 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8182 00000F60 C3                      	RETN 
  8183                                  ;
  8184                                  ;----------------------------------------------------------------------------
  8185                                  ;
  8186                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8187                                  ;
  8188                                  ;	Return a pointer to interesting DOS variables This call is version
  8189                                  ;	dependent and is subject to change without notice in future versions.
  8190                                  ;	Use at risk.
  8191                                  ;
  8192                                  ;	ENTRY	none
  8193                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8194                                  ;	uses	ALL
  8195                                  ;
  8196                                  ;----------------------------------------------------------------------------
  8197                                  ;
  8198                                  
  8199                                  	; 13/01/2024
  8200                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8201                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8202                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8203                                  
  8204                                  _$GET_IN_VARS:
  8205 00000F61 E81DF5                  	CALL	Get_User_Stack
  8206                                  	;MOV	WORD [SI+2],SYSINITVAR
  8207                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8208 00000F64 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8209                                  	; 13/01/2024
  8210                                  	;;MOV	[SI+10H],SS
  8211                                  	;MOV	[SI+user_env.user_ES],SS
  8212                                  	;RETN
  8213 00000F69 EBF2                    	jmp	short getin_segm
  8214                                  
  8215                                  ;
  8216                                  ;----------------------------------------------------------------------------
  8217                                  ;
  8218                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8219                                  ;
  8220                                  ;	Return pointer to drive parameter table for default drive
  8221                                  ;
  8222                                  ;	ENTRY	none
  8223                                  ;	EXIT	(ds:bx) = DPB address
  8224                                  ;	USES	all
  8225                                  ;
  8226                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8227                                  ;
  8228                                  ;	Return pointer to a specified drive parameter table
  8229                                  ;
  8230                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8231                                  ;	EXIT	(al) = 0 iff ok
  8232                                  ;		  (ds:bx) = DPB address
  8233                                  ;		(al) = -1 if bad drive
  8234                                  ;	USES	all
  8235                                  ;
  8236                                  ;----------------------------------------------------------------------------
  8237                                  ;
  8238                                  
  8239                                  ; 15/05/2019 - Retro DOS v4.0
  8240                                  
  8241                                  _$GET_DEFAULT_DPB:
  8242 00000F6B B200                    	MOV	DL,0
  8243                                  _$GET_DPB:
  8244 00000F6D 16                      	push	ss
  8245 00000F6E 1F                      	pop	ds
  8246                                  
  8247 00000F6F 88D0                    	MOV	AL,DL
  8248 00000F71 E8165B                  	call	GETTHISDRV		; Get CDS structure
  8249 00000F74 7222                    	JC	short ISNODRV 		; no valid drive
  8250 00000F76 C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8251                                  	;;test	word [es:di+43h],8000h
  8252                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8253                                  	;test	byte [es:di+44h],80h
  8254 00000F7A 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8255 00000F7F 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8256 00000F81 E88903                  	call	ECritDisk
  8257 00000F84 E84047                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8258 00000F87 E89E03                  	call	LCritDisk
  8259 00000F8A 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8260                                  					;   have.
  8261 00000F8C E8F2F4                  	call	Get_User_Stack
  8262                                  	;mov	[si+2],bp
  8263 00000F8F 896C02                  	MOV	[SI+user_env.user_BX],BP
  8264                                  	;mov	[si+0Eh],es
  8265 00000F92 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8266 00000F95 30C0                    	XOR	AL,AL
  8267 00000F97 C3                      	retn
  8268                                  ISNODRV:
  8269 00000F98 B0FF                    	MOV	AL,-1
  8270 00000F9A C3                      	retn
  8271                                  
  8272                                  ;
  8273                                  ;----------------------------------------------------------------------------
  8274                                  ;
  8275                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8276                                  ;
  8277                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8278                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8279                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8280                                  ;
  8281                                  ;	ENTRY	none
  8282                                  ;	EXIT	none
  8283                                  ;	USES	all
  8284                                  ;
  8285                                  ;----------------------------------------------------------------------------
  8286                                  ;
  8287                                  
  8288                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8289                                  	; DOSCODE:4D94h
  8290                                  _$DISK_RESET:
  8291                                  	; 15/05/2019 - Retro DOS v4.0
  8292 00000F9B B0FF                    	mov	al,0FFh	; -1
  8293 00000F9D 16                      	push	ss
  8294 00000F9E 1F                      	pop	ds
  8295                                  	; 06/11/2022
  8296                                  	;MOV	AL,-1
  8297 00000F9F E86B03                  	call	ECritDisk
  8298                                  	; MSDOS 6.0
  8299                                  	;;or	word [DOS34_FLAG],4
  8300                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8301 00000FA2 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8302 00000FA7 E8964A                  	call	FLUSHBUF
  8303                                  	; MSDOS 6.0
  8304                                  	;and	word [DOS34_FLAG],0FFFBh
  8305                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8306                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8307                                  	; 15/12/2022
  8308 00000FAA 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8309 00000FAF C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8310                                  ;
  8311                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8312                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8313                                  ; let's do it.
  8314                                  ;
  8315                                  ; Invalidate 'last-buffer' used
  8316                                  ;
  8317 00000FB5 BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8318 00000FB8 891E[2000]              	MOV	[LastBuffer+2],BX
  8319 00000FBC 891E[1E00]              	MOV	[LastBuffer],BX
  8320                                  
  8321                                  	; MSDOS 3.3 
  8322                                  	; IBMDOS.COM, Offset 1C66h
  8323                                  	;;;;
  8324                                  	;lds	si,[BUFFHEAD]
  8325                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8326                                  				; .buf_flags, AH = 0, reset/clear
  8327                                  ;DRST_1:
  8328                                  	;;mov	[si+4],ax
  8329                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8330                                  	;lds	si,[SI]
  8331                                  	;cmp	si,bx ; -1
  8332                                  	;je	short DRST_2
  8333                                  	;;mov	[si+4],ax
  8334                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8335                                  	;lds	si,[SI]
  8336                                  	;cmp	si,bx
  8337                                  	;jne	short DRST_1
  8338                                  	;;;;
  8339                                  ;DRST_2:
  8340 00000FC0 E86503                  	call	LCritDisk
  8341 00000FC3 B8FFFF                  	MOV	AX,-1
  8342                                  	; 07/12/2022
  8343                                  	;mov	ax,0FFFFh
  8344                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8345 00000FC6 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8346 00000FC7 B82011                  	mov     ax,1120h
  8347 00000FCA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8348                                  			; DS = DOS CS
  8349                                  			; Return: CF clear (successful)
  8350 00000FCC 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8351                                  	
  8352 00000FCD C3                      	retn
  8353                                  
  8354                                  	; 19/07/2018 - Retro DOS v3.0
  8355                                  
  8356                                  ;
  8357                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8358                                  ;
  8359                                  ;----------------------------------------------------------------------------
  8360                                  ;
  8361                                  ;**	$SetDPB - Create a DPB
  8362                                  ;
  8363                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8364                                  ;
  8365                                  ;	ENTRY	ES:BP Points to DPB
  8366                                  ;		DS:SI Points to BPB
  8367                                  ;	EXIT	DPB setup
  8368                                  ;	USES	ALL but BP, DS, ES
  8369                                  ;
  8370                                  ;----------------------------------------------------------------------------
  8371                                  ;
  8372                                  
  8373                                  ; 10/05/2019 - Retro DOS v4.0
  8374                                  
  8375                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8376                                  
  8377                                  ; MSDOS 6.0
  8378 00000FCE 0300                    word3:	dw	3			; M008 -- word value for divides
  8379                                  
  8380                                  ; 13/01/2024
  8381                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8382                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8383                                  
  8384                                  ;procedure   $SETDPB,NEAR
  8385                                  
  8386                                  _$SETDPB:
  8387 00000FD0 89EF                    	MOV	DI,BP
  8388                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8389                                  	; 13/01/2024
  8390 00000FD2 47                      	inc	di
  8391 00000FD3 47                      	inc	di
  8392 00000FD4 AD                      	LODSW
  8393 00000FD5 AB                      	STOSW				; dpb_sector_size
  8394                                  	; MSDOS 6.0
  8395                                  	;cmp	byte [si+3],0
  8396 00000FD6 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8397 00000FDA 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8398                                  	;mov	byte [es:di+4],0
  8399 00000FDC 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8400                                  	; 13/01/2024
  8401 00000FE1 89C3                    	mov	bx,ax
  8402 00000FE3 EB70                    	JMP	short setend			     ; NO		;AN000;
  8403                                  
  8404                                  yesfat: ; 10/08/2018
  8405 00000FE5 89C2                    	MOV	DX,AX
  8406 00000FE7 AC                      	LODSB
  8407                                  	;DEC	AL
  8408                                  	; 17/12/2022
  8409 00000FE8 48                      	dec	ax
  8410 00000FE9 AA                      	STOSB				; dpb_cluster_mask
  8411                                  	;INC	AL
  8412 00000FEA 40                      	inc	ax
  8413 00000FEB 30E4                    	XOR	AH,AH
  8414                                  LOG2LOOP:
  8415 00000FED A801                    	test	AL,1
  8416 00000FEF 7506                    	JNZ	short SAVLOG
  8417 00000FF1 FEC4                    	INC	AH
  8418 00000FF3 D0E8                    	SHR	AL,1
  8419 00000FF5 EBF6                    	JMP	SHORT LOG2LOOP
  8420                                  SAVLOG:
  8421 00000FF7 88E0                    	MOV	AL,AH
  8422 00000FF9 AA                      	STOSB				; dpb_cluster_shift
  8423 00000FFA 88C3                    	MOV	BL,AL
  8424 00000FFC A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8425 00000FFD AC                      	LODSB
  8426 00000FFE AA                      	STOSB				; dpb_FAT_count Number of FATs
  8427                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8428                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8429 00000FFF 88C7                    	MOV	BH,AL
  8430 00001001 AD                      	LODSW
  8431 00001002 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8432 00001003 B105                    	MOV	CL,5
  8433 00001005 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8434 00001007 48                      	DEC	AX
  8435 00001008 01D0                    	ADD	AX,DX			; Cause Round Up
  8436 0000100A 89D1                    	MOV	CX,DX
  8437 0000100C 31D2                    	XOR	DX,DX
  8438 0000100E F7F1                    	DIV	CX
  8439 00001010 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8440 00001012 47                      	INC	DI
  8441 00001013 47                      	INC	DI			; Skip dpb_first_sector
  8442 00001014 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8443 00001015 AC                      	LODSB
  8444                                  	;mov	[es:bp+17h],al
  8445 00001016 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8446 0000101A AD                      	LODSW				; Number of sectors in a FAT
  8447                                  	
  8448                                  	;;;
  8449                                  	;MSDOS 3.3
  8450                                  	;
  8451                                  	;STOSB		; DPB.FAT_SIZE
  8452                                  	;MUL	BH
  8453                                  	
  8454                                  	;MSDOS 6.0
  8455                                  	;
  8456 0000101B AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8457 0000101C 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8458 0000101E 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8459 00001020 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8460                                  	;;;
  8461                                  	
  8462                                  	;add	ax,[es:bp+6]
  8463 00001022 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8464 00001026 AB                      	STOSW				; dpb_dir_sector
  8465 00001027 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8466                                  	;mov	[es:bp+0Bh],ax
  8467 00001029 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8468                                  	
  8469                                  	; MSDOS 6.0
  8470 0000102D 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8471                                  	;;cmp	word [es:bp+0Dh],0
  8472                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8473                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8474                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8475                                  	; 15/12/2022
  8476                                  	; 28/07/2019
  8477 0000102F 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8478 00001033 09DB                    	or	bx,bx
  8479 00001035 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8480                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8481                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8482                                  	
  8483                                  
  8484 00001037 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8485                                  	;mov	bx,[si+8]
  8486 00001039 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8487                                  	;mov	dx,[si+10]
  8488 0000103C 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8489 0000103F 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8490 00001041 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8491 00001044 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8492 00001046 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8493                                  rott:					;AN000;;F.C. >32mb
  8494 00001048 F8                      	CLC				;AN000;;F.C. >32mb
  8495 00001049 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8496 0000104B D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8497 0000104D E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8498                                  norot:					;AN000;
  8499                                  	; 15/12/2022
  8500                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8501 0000104F EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8502                                  normal_dpb:
  8503                                  	;;sub	ax,[es:bp+0Dh]
  8504                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8505                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8506                                  	; 15/12/2022
  8507                                  	; bx = [es:bp+DSKSIZ]
  8508                                  	;sub	ax,bx ; 28/07/2019
  8509                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8510                                  	; 15/12/2022
  8511 00001051 29C3                    	sub	bx,ax
  8512                                  	;NEG	AX			; Sectors in data area
  8513                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8514                                  	; 15/12/2022
  8515                                  	; CL = cluster shift
  8516                                  	; BX = number of data sectors 
  8517                                  	;SHR	AX,CL			; Div by sectors/cluster
  8518 00001053 D3EB                    	shr	bx,cl 
  8519                                  setend:
  8520                                  ;	M008 - CAS
  8521                                  ;
  8522                                  	; 15/12/2022
  8523 00001055 43                      	inc	bx
  8524                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8525                                  ;
  8526                                  ;	There has been a bug in our fatsize calculation for so long
  8527                                  ;	  that we can't correct it now without causing some user to
  8528                                  ;	  experience data loss. There are even cases where allowing
  8529                                  ;	  the number of clusters to exceed the fats is the optimal
  8530                                  ;	  case -- where adding 2 more fat sectors would make the
  8531                                  ;	  data field smaller so that there's nothing to use the extra
  8532                                  ;	  fat sectors for.
  8533                                  ;
  8534                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8535                                  ;	  still report that there was a cluster left when the disk was
  8536                                  ;	  actually full. Very graceful failure for a corrupt system
  8537                                  ;	  configuration. There may be worse cases that were never
  8538                                  ;	  properly traced back to this bug. The problem cases only
  8539                                  ;	  occurred when partition sizes were very near FAT sector
  8540                                  ;	  rounding boundaries, which were rare cases.
  8541                                  ;
  8542                                  ;	Also, it's possible that some third-party partition program might
  8543                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8544                                  ;	  scheme. In this hypothetical case, the number of allocation
  8545                                  ;	  clusters which don't actually have FAT entries to represent
  8546                                  ;	  them might be larger and might create a more catastrophic
  8547                                  ;	  failure. So we'll provide the safeguard of limiting the
  8548                                  ;	  max_cluster to the amount that will fit in the FATs.
  8549                                  ;
  8550                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8551                                  
  8552                                  ;	make sure the number of fat sectors is actually enough to
  8553                                  ;	  hold that many clusters. otherwise, back the number of
  8554                                  ;	  clusters down
  8555                                  
  8556                                  	; 15/12/2022
  8557                                  	; bx = number of clusters
  8558                                  
  8559                                  	; 19/07/2018 - Retro DOS v3.0
  8560                                  	; MSDOS 6.0
  8561                                  	; 15/12/2022
  8562                                  	;mov	bx,ax			; remember calculated # clusters
  8563                                  
  8564                                  	; 01/08/2018 (MSDOS 3.3)
  8565                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8566                                  	;xor	ah,ah 
  8567                                  
  8568                                  	; 10/05/2019 - Retro DOS v4.0
  8569                                  	;mov	ax,[ES:BP+0Fh]
  8570 00001056 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8571                                  
  8572                                  	;mul	word [es:bp+2]	
  8573 0000105A 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8574 0000105E 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8575 00001062 720D                    	jb	short setend_fat12
  8576 00001064 D1EA                    	shr	dx,1
  8577                                  
  8578                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8579                                  	; 15/12/2022
  8580                                  ;cs3 7/2/92
  8581 00001066 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8582                                  					; than enough for the maximum FAT,
  8583                                  					; so go ahead and use the calculated
  8584                                  					; number of clusters.
  8585                                  ;cs3 7/2/92
  8586                                  
  8587 00001068 D1D8                    	rcr	ax,1			; find number of entries
  8588 0000106A 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8589                                  ;					;  into 12-bit fatland?
  8590 0000106D 7215                    	jb	short setend_faterr	; then go ahead and let the
  8591                                  ;					;  inconsistency pass through
  8592                                  ;					;  rather than lose data by
  8593                                  ;					;  correcting the fat type
  8594 0000106F EB0E                    	jmp	short setend_fat16
  8595                                  
  8596                                  setend_fat12:
  8597 00001071 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8598 00001073 11D2                    	adc	dx,dx
  8599                                  
  8600                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8601                                  ;cs3 7/2/92
  8602                                  	; 15/12/2022
  8603 00001075 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8604 00001078 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8605                                  					; here. Check for it and use
  8606                                  					; the calculated size in this case.
  8607                                  ;cs3 7/2/92
  8608                                  
  8609 0000107A 2EF736[CE0F]            	div	word [cs:word3]
  8610                                  
  8611                                  setend_fat16:
  8612 0000107F 48                      	dec	ax			; limit at 1
  8613 00001080 39D8                    	cmp	ax,bx			; is fat big enough?
  8614 00001082 7602                    	jbe	short setend_fat	; use max value that'll fit
  8615                                  
  8616                                  setend_faterr:
  8617 00001084 89D8                    	mov	ax,bx			; use calculated value
  8618                                  
  8619                                  setend_fat:
  8620                                  
  8621                                  ;	now ax = maximum legal cluster
  8622                                  
  8623                                  ;	end M008
  8624                                  
  8625                                  	;mov	[es:bp+0Dh], ax
  8626 00001086 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8627                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8628                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8629 0000108A 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8630                                  					; Init so first ALLOC starts at
  8631                                  					; begining of FAT
  8632                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8633                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8634 00001090 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8635                                  
  8636 00001096 C3                      	retn
  8637                                  
  8638                                  ;EndProc $SETDPB
  8639                                  
  8640                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8641                                  
  8642                                  ;
  8643                                  ;----------------------------------------------------------------------------
  8644                                  ;
  8645                                  ;**	$Dup_PDB
  8646                                  ;
  8647                                  ; Inputs:   DX is new segment address of process
  8648                                  ;	    SI is end of new allocation block
  8649                                  ;
  8650                                  ;----------------------------------------------------------------------------
  8651                                  ;
  8652                                  
  8653                                  _$DUP_PDB:
  8654                                  
  8655                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8656                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8657                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8658                                  
  8659                                  	; MSDOS 3.3
  8660                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8661                                  	;MOV	DS,[CS:CurrentPDB]
  8662                                  
  8663                                  	; 15/05/2019 - Retro DOS v4.0
  8664                                  	; MSDOS 6.0
  8665 00001097 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8666 0000109C C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8667 000010A1 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8668                                  
  8669 000010A5 56                      	PUSH	SI
  8670 000010A6 EB0A                    	JMP	SHORT CreateCopy
  8671                                  
  8672                                  ;
  8673                                  ;----------------------------------------------------------------------------
  8674                                  ;
  8675                                  ; Inputs:
  8676                                  ;	DX = Segment number of new base
  8677                                  ; Function:
  8678                                  ;	Set up program base and copy term and ^C from int area
  8679                                  ; Returns:
  8680                                  ;	None
  8681                                  ; Called at DOS init
  8682                                  ;
  8683                                  ;----------------------------------------------------------------------------
  8684                                  ;
  8685                                  
  8686                                  ; 15/05/2019 - Retro DOS v4.0
  8687                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8688                                  
  8689                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8690                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8691                                  
  8692                                  _$CREATE_PROCESS_DATA_BLOCK:
  8693                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8694 000010A8 E8D6F3                  	CALL	Get_User_Stack
  8695                                  	;mov	ds,[si+14h]
  8696 000010AB 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8697                                  	;push	word [2]
  8698 000010AE FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8699                                  CreateCopy:
  8700 000010B2 8EC2                    	MOV	ES,DX
  8701                                  
  8702 000010B4 31F6                    	XOR	SI,SI			; copy entire PDB
  8703 000010B6 89F7                    	MOV	DI,SI
  8704 000010B8 B98000                  	MOV	CX,128
  8705 000010BB F3A5                    	REP	MOVSW
  8706                                  
  8707                                  ; DOS 3.3 7/9/86
  8708                                  	;mov	cx,20
  8709                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8710                                  	; 15/12/2022
  8711 000010BD B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8712                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8713                                  	;mov	cx,FILPERPROC
  8714                                  
  8715                                  	;mov	di,18h
  8716 000010BF BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8717                                  	;;PUSH	DS ; * 15/05/2019
  8718                                  	;;lds	si,[34h]
  8719                                  	;LDS	SI,[PDB.JFN_Pointer]
  8720                                  	;REP	MOVSB
  8721                                  	;;POP	DS ; * 15/05/2019
  8722                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8723                                  	; 05/12/2022
  8724                                  	; (push ds then pop ds is not needed here!)
  8725                                  	;push	ds
  8726                                  	;lds	si,[34h]
  8727 000010C2 C5363400                	lds	si,[PDB.JFN_Pointer]
  8728 000010C6 F3A4                    	rep	movsb
  8729                                  	;pop	ds
  8730                                  
  8731                                  ; DOS 3.3 7/9/86
  8732                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8733                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8734                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8735                                  
  8736 000010C8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8737                                  
  8738                                  	;;test	byte [cs:CreatePDB],0FFh
  8739                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8740                                  	; 17/12/2022
  8741 000010CD 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8742                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8743 000010D1 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8744                                  
  8745                                  ; Here we set up for a new process...
  8746                                  
  8747                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8748                                  	;POP	DS
  8749                                  
  8750                                  	; MSDOS 6.0
  8751                                  	;;getdseg <ds>			; ds -> dosdata
  8752                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8753                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8754                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8755                                  	; 15/12/2022
  8756                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8757                                  
  8758 000010D3 31DB                    	XOR	BX,BX			; dup all jfns
  8759                                  	;mov	cx,20
  8760                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8761                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8762                                  	; 15/12/2022
  8763 000010D5 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8764                                  
  8765                                  Create_dup_jfn:
  8766 000010D7 06                      	PUSH	ES ;**			; save new PDB
  8767 000010D8 E88B55                  	call	SFFromHandle		; get sf pointer
  8768 000010DB B0FF                    	MOV	AL,-1			; unassigned JFN
  8769 000010DD 7224                    	JC	short CreateStash	; file was not really open
  8770                                  	;;test	word [es:di+5],1000h
  8771                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8772                                  	; 15/05/2019
  8773                                  	;test	byte [es:di+6],10h
  8774 000010DF 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8775 000010E4 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8776                                  
  8777                                  ; We do not inherit network file handles.
  8778                                  
  8779                                  	;mov	ah,[es:di+2]
  8780 000010E6 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8781                                  	;and	ah,0F0h
  8782 000010EA 80E4F0                  	AND	AH,SHARING_MASK
  8783                                  	;cmp	ah,70h
  8784 000010ED 80FC70                  	CMP	AH,SHARING_NET_FCB
  8785 000010F0 7411                    	jz	short CreateStash
  8786                                  
  8787                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8788                                  ; duplication operation.
  8789                                  
  8790 000010F2 893E[9E05]              	MOV	[THISSFT],DI
  8791 000010F6 8C06[A005]              	MOV	[THISSFT+2],ES
  8792 000010FA E83119                  	call	DOS_DUP 		; signal duplication
  8793                                  
  8794                                  ; get the old sfn for copy
  8795                                  
  8796 000010FD E84955                  	call	pJFNFromHandle		; ES:DI is jfn
  8797 00001100 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8798                                  
  8799                                  ; Take AL (old sfn or -1) and stash it into the new position
  8800                                  
  8801                                  CreateStash:
  8802 00001103 07                      	POP	ES ;**
  8803                                  	;mov	[es:bx+18h],al
  8804 00001104 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8805 00001108 43                      	INC	BX			; next jfn...
  8806 00001109 E2CC                    	LOOP	Create_dup_jfn
  8807                                  
  8808 0000110B 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8809                                  	; 06/11/2022
  8810                                  	;mov	[es:16h],bx
  8811 0000110F 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8812 00001114 8C06[3003]              	MOV	[CurrentPDB],ES
  8813                                  	;MOV	DS,BX ; 28/07/2019
  8814                                  	; 07/12/2022
  8815                                  	;mov	ds,[cs:DosDSeg]
  8816                                  	; 15/12/2022
  8817                                  	; ds = [cs:DosDSeg]
  8818 00001118 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8819                                  	;mov	ds,bx
  8820                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8821                                  	; 15/12/2022
  8822                                  	;mov	ds,bx
  8823                                  
  8824                                  ; end of new process create
  8825                                  
  8826                                  Create_PDB_cont:
  8827                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8828                                  
  8829                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8830                                  
  8831                                  	;; 28/07/2019
  8832                                  	;;push	ds
  8833                                  	;;mov	ds,[cs:DosDSeg]
  8834                                  	;mov	byte [CreatePDB],0
  8835                                  	;;pop	ds
  8836                                  
  8837                                  ; 05/12/2022
  8838                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8839                                  ;	; (push-pop ds is nonsense here! 
  8840                                  ;	;  but i am using same code with original MSDOS.SYS
  8841                                  ;	;  for address compatibility.)
  8842                                  ;	push	ds
  8843                                  ;	; ds = [cs:DosDSeg] !
  8844                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8845                                  ;	mov	byte [CreatePDB],0
  8846                                  ;	pop	ds
  8847                                  
  8848 0000111D 58                      	POP	AX ;*
  8849                                  
  8850                                  	;entry	SETMEM
  8851                                  
  8852                                  	; 17/12/2022
  8853                                  	; cx = 0
  8854                                  
  8855                                  ;---------------------------------------------------------------------------
  8856                                  ; Inputs:
  8857                                  ;	AX = Size of memory in paragraphs
  8858                                  ;	DX = Segment
  8859                                  ; Function:
  8860                                  ;	Completely prepares a program base at the
  8861                                  ;	specified segment.
  8862                                  ; Called at DOS init
  8863                                  ; Outputs:
  8864                                  ;	DS = DX
  8865                                  ;	ES = DX
  8866                                  ;	[0] has INT int_abort
  8867                                  ;	[2] = First unavailable segment
  8868                                  ;	[5] to [9] form a long call to the entry point
  8869                                  ;	[10] to [13] have exit address (from int_terminate)
  8870                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8871                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8872                                  ; DX,BP unchanged. All other registers destroyed.
  8873                                  ;---------------------------------------------------------------------------
  8874                                  
  8875                                  SETMEM:
  8876                                  	;XOR	CX,CX
  8877                                  	; 17/12/2022
  8878                                  	; cx = 0
  8879 0000111E 8ED9                    	MOV	DS,CX
  8880 00001120 8EC2                    	MOV	ES,DX
  8881                                  	;mov	si,88h
  8882 00001122 BE8800                  	MOV	SI,addr_int_terminate
  8883                                  	;mov	di,10 ; 0Ah
  8884 00001125 BF0A00                  	MOV	DI,SAVEXIT
  8885                                  	;MOV	CX,6
  8886                                  	; 15/12/2022
  8887 00001128 B106                    	mov	cl,6
  8888 0000112A F3A5                    	REP	MOVSW
  8889 0000112C 26A30200                	MOV	[ES:2],AX
  8890 00001130 29D0                    	SUB	AX,DX
  8891 00001132 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8892 00001135 7603                    	JBE	short HAVDIF
  8893 00001137 B8FF0F                  	MOV	AX,MAXDIF
  8894                                  HAVDIF:
  8895 0000113A 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8896 0000113D BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8897 00001140 29C3                    	SUB	BX,AX
  8898 00001142 B104                    	MOV	CL,4
  8899 00001144 D3E0                    	SHL	AX,CL
  8900 00001146 8EDA                    	MOV	DS,DX
  8901                                  
  8902                                  	; (MSDOS 6.0 note)
  8903                                  	;
  8904                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8905                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8906                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8907                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8908                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8909                                  	; making this equvalence valid for this particular case. If however
  8910                                  	; there is less than 64K remaining the address in BX:AX will not 
  8911                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8912                                  	; into the PSP.
  8913                                  	;
  8914                                  	; Therefore for the case where there is less than 64K remaining in 
  8915                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8916                                  	; requirements will not work. Call 5, however will continue to work
  8917                                  	; for all cases.
  8918                                  	;
  8919                                  
  8920                                  	;mov	[6],ax
  8921                                  	;mov	[8],bx
  8922                                  
  8923 00001148 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8924 0000114B 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8925                                  
  8926                                  	; 06/05/2019 - Retro DOS v4.0
  8927 0000114F 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8928                                  					;    memory left
  8929 00001152 740C                    	je	short addr_ok		; Y: the above calculated address is
  8930                                  					;    OK
  8931                                  					; N: 
  8932                                  
  8933 00001154 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8934 0000115A C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8935                                  addr_ok:
  8936                                  	;mov	word [0],20CDh
  8937 00001160 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8938                                  	;mov	byte [5],9Ah
  8939 00001166 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8940                                  	;mov	word [50h],21CDh
  8941 0000116B C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8942                                  	;mov	byte [52h],0CBh
  8943 00001171 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8944                                  	;mov	word [34h],18h
  8945 00001176 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8946                                  	;mov	word [36h],ds
  8947 0000117C 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8948                                  	;mov	word [32h],20
  8949 00001180 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8950                                  ;
  8951                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8952                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8953                                  ; particular SFT.  We perform this by requiring that the server link together
  8954                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8955                                  ; initialize this pointer.
  8956                                  ;
  8957                                   	;mov	word [38h],-1
  8958 00001186 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8959                                  	;mov	word [3Ah],-1
  8960 0000118C C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8961                                  
  8962                                  	; 06/05/2019
  8963                                  	; Set the real version number in the PSP - 5.00
  8964                                  
  8965                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8966                                  	; 07/12/2022
  8967 00001192 26C70640000616          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8968                                  
  8969 00001199 C3                      	retn
  8970                                  
  8971                                  ; 29/04/2019 - Retro DOS v4.0
  8972                                  
  8973                                  ;BREAK <$GSetMediaID -- get set media ID>
  8974                                  
  8975                                  ;---------------------------------------------------------------------------
  8976                                  ; Inputs:
  8977                                  ;	BL= drive number as defined in IOCTL
  8978                                  ;	AL= 0 get media ID
  8979                                  ;	    1 set media ID
  8980                                  ;	DS:DX= buffer containing information
  8981                                  ;		DW  0  info level (set on input)
  8982                                  ;		DD  ?  serial #
  8983                                  ;		DB  11 dup(?)  volume id
  8984                                  ;		DB   8 dup(?)  file system type
  8985                                  ; Function:
  8986                                  ;	Get or set media ID
  8987                                  ; Returns:
  8988                                  ;	carry clear, DS:DX is filled
  8989                                  ;	carry set, error
  8990                                  ;---------------------------------------------------------------------------
  8991                                  
  8992                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8993                                  _$GSetMediaID:
  8994                                  	; RAWIO - GET_MEDIA_ID
  8995 0000119A B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8996 0000119D 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8997 0000119F 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8998                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8999                                  	;jne	short errorfunc	      ;AN000;MS.; no
  9000                                  	; 15/12/2022
  9001 000011A1 FEC8                    	dec	al
  9002 000011A3 7507                    	jnz	short errorfunc ; al > 1
  9003                                  	; RAWIO - SET_MEDIA_ID
  9004                                  	;mov	cx,0846h	      ;AN001;MS.;
  9005                                  	; 15/12/2022
  9006 000011A5 B146                    	mov	cl,46h	; cx = 0846h 
  9007                                  doioctl:			      ;AN000;
  9008 000011A7 B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  9009                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  9010                                  	;call	_$IOCTL
  9011                                  	;retn			      ;AN000;MS.;
  9012                                  	; 15/12/2022
  9013 000011A9 E9C010                  	jmp	_$IOCTL
  9014                                  errorfunc:			      ;AN000;
  9015                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  9016                                  	;mov	al,1
  9017 000011AC B001                    	mov	al,error_invalid_function
  9018 000011AE E98FF4                  	jmp	SYS_RET_ERR
  9019                                  
  9020                                  ; 16/05/2019 - Retro DOS v4.0
  9021                                  
  9022                                  ;============================================================================
  9023                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9024                                  ;============================================================================
  9025                                  ; 20/07/2018 - Retro DOS v3.0
  9026                                  ; 29/04/2019 - Retro DOS v4.0
  9027                                  
  9028                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9029                                  ;----------------------------------------------------------------------------
  9030                                  ;
  9031                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9032                                  ;	     Strings of different lengths don't match.
  9033                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9034                                  ;   Outputs: Z if strings same, NZ if different
  9035                                  ;   Registers modified: NONE
  9036                                  ;----------------------------------------------------------------------------
  9037                                  
  9038                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9039                                  StrCmp:
  9040 000011B1 56                      	push	si
  9041 000011B2 57                      	push	di
  9042 000011B3 50                      	push	ax
  9043                                  Cmplp:
  9044 000011B4 AC                      	LODSB
  9045 000011B5 E8813E                  	call	UCase			; convert to upper case
  9046 000011B8 E8D33E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9047 000011BB 88C4                    	MOV	AH,AL
  9048 000011BD 268A05                  	MOV	AL,[ES:DI]
  9049 000011C0 47                      	INC	DI
  9050 000011C1 E8753E                  	call	UCase			; convert to upper case
  9051 000011C4 E8C73E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9052 000011C7 38C4                    	CMP	AH,AL
  9053 000011C9 7504                    	JNZ	short PopRet		; Strings dif
  9054                                  
  9055 000011CB 08C0                    	OR	AL,AL
  9056 000011CD 75E5                    	JNZ	short Cmplp		; More string
  9057                                  PopRet:
  9058 000011CF 58                      	pop	ax
  9059 000011D0 5F                      	pop	di
  9060 000011D1 5E                      	pop	si
  9061 000011D2 C3                      	retn
  9062                                  
  9063                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9064                                  ;----------------------------------------------------------------------------
  9065                                  ;
  9066                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9067                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9068                                  ;	characters.
  9069                                  ;
  9070                                  ;   Inputs:	DS:SI - pointer to source string
  9071                                  ;		ES:DI - pointer to destination string
  9072                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9073                                  ;		DS:SI point byte after nul byte at end of source string
  9074                                  ;   Registers modified: SI,DI
  9075                                  ;----------------------------------------------------------------------------
  9076                                  
  9077                                  StrCpy:
  9078 000011D3 50                      	push	ax
  9079                                  CPYLoop:
  9080 000011D4 AC                      	LODSB
  9081 000011D5 E8613E                  	call	UCase			; convert to upper case
  9082 000011D8 E8B33E                  	call	PATHCHRCMP		; convert / to \ ;
  9083 000011DB AA                      	STOSB
  9084                                  
  9085 000011DC 08C0                    	OR	AL,AL
  9086 000011DE 75F4                    	JNZ	short CPYLoop
  9087 000011E0 58                      	pop	ax
  9088 000011E1 C3                      	retn
  9089                                  
  9090                                  ;----------------------------------------------------------------------------
  9091                                  ; Procedure Name : FStrCpy
  9092                                  ;----------------------------------------------------------------------------
  9093                                  
  9094                                  FStrCpy:
  9095 000011E2 50                      	push	ax
  9096                                  FCPYLoop:
  9097 000011E3 AC                      	LODSB
  9098 000011E4 AA                      	STOSB
  9099 000011E5 08C0                    	OR	AL,AL
  9100 000011E7 75FA                    	JNZ	short FCPYLoop
  9101 000011E9 58                      	pop	ax
  9102 000011EA C3                      	retn
  9103                                  
  9104                                  ; 20/07/2018 - Retro DOS v3.0
  9105                                  ;----------------------------------------------------------------------------
  9106                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9107                                  ;----------------------------------------------------------------------------
  9108                                  ;
  9109                                  ;UCase:	
  9110                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9111                                  ;	retn
  9112                                  
  9113                                  ;Break <StrLen - compute length of string ES:DI>
  9114                                  ;----------------------------------------------------------------------------
  9115                                  ;**	StrLen - Compute Length of String
  9116                                  ;
  9117                                  ;	StrLen computes the length of a string, including the trailing 00
  9118                                  ;
  9119                                  ;	ENTRY	(es:di) = address of string
  9120                                  ;	EXIT	(cx) = size of string
  9121                                  ;	USES	cx, flags
  9122                                  ;----------------------------------------------------------------------------
  9123                                  
  9124                                  StrLen:
  9125 000011EB 57                      	push	di
  9126 000011EC 50                      	push	ax
  9127                                  	;MOV	CX,-1
  9128 000011ED B9FFFF                  	mov	cx,65535
  9129 000011F0 30C0                    	XOR	AL,AL
  9130 000011F2 F2AE                    	REPNE	SCASB
  9131 000011F4 F7D1                    	NOT	CX
  9132 000011F6 58                      	pop	ax
  9133 000011F7 5F                      	pop	di
  9134 000011F8 C3                      	retn
  9135                                  
  9136                                  ;----------------------------------------------------------------------------
  9137                                  ;**	DStrLen - Compute Length of String
  9138                                  ;
  9139                                  ;	ENTRY	(ds:si) = address of string
  9140                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9141                                  ;	USES	cx, flags
  9142                                  ;----------------------------------------------------------------------------
  9143                                  
  9144                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9145 000011F9 E80300                  	CALL	XCHGP
  9146 000011FC E8ECFF                  	CALL	StrLen
  9147                                  	;CALL	XCHGP
  9148                                  	;retn
  9149                                  	; 18/12/2022
  9150                                  	;jmp	short XCHGP
  9151                                  
  9152                                  ;----------------------------------------------------------------------------
  9153                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9154                                  ;
  9155                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9156                                  ;
  9157                                  ;	ENTRY	none
  9158                                  ;	EXIT	pairs exchanged
  9159                                  ;	USES	SI, DI, DS, ES
  9160                                  ;----------------------------------------------------------------------------
  9161                                  
  9162                                  XCHGP:
  9163 000011FF 1E                      	push	ds
  9164 00001200 06                      	push	es
  9165 00001201 1F                      	pop	ds
  9166 00001202 07                      	pop	es
  9167 00001203 87F7                    	XCHG	SI,DI
  9168                                  xchgp_retn:
  9169 00001205 C3                      	retn
  9170                                  
  9171                                  ;Break	<Idle - wait for a specified amount of time>
  9172                                  ;----------------------------------------------------------------------------
  9173                                  ;
  9174                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9175                                  ;   	   we spin until RetryLoop is exhausted.
  9176                                  ;
  9177                                  ;   Inputs:	RetryLoop is the number of times we spin
  9178                                  ;   Outputs:	Wait
  9179                                  ;   Registers modified: none
  9180                                  ;----------------------------------------------------------------------------
  9181                                  
  9182                                  Idle:
  9183                                  	;test	byte [SS:FSHARING],0FFh
  9184 00001206 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9185                                  	;retnz
  9186 0000120C 75F7                    	jnz	short xchgp_retn
  9187                                  	;SAVE	<CX>
  9188 0000120E 51                      	push	cx
  9189 0000120F 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9190 00001214 E308                    	JCXZ	Idle3
  9191                                  Idle1:	
  9192 00001216 51                      	PUSH	CX
  9193 00001217 31C9                    	XOR	CX,CX
  9194                                  Idle2:	
  9195 00001219 E2FE                    	LOOP	Idle2
  9196 0000121B 59                      	POP	CX
  9197 0000121C E2F8                    	LOOP	Idle1
  9198                                  Idle3:	
  9199                                  	;RESTORE <CX>
  9200 0000121E 59                      	pop	cx
  9201 0000121F C3                      	retn
  9202                                  
  9203                                  ;Break	<TableDispatch - dispatch to a table>
  9204                                  ;----------------------------------------------------------------------------
  9205                                  ;
  9206                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9207                                  ;   routine. Preserve all input registers to the routine.
  9208                                  ;
  9209                                  ;   Inputs:	Push	return address
  9210                                  ;		Push	Table address
  9211                                  ;		Push	index (byte)
  9212                                  ;   Outputs:	appropriate routine gets jumped to.
  9213                                  ;		return indicates invalid index
  9214                                  ;   Registers modified: none.
  9215                                  ;----------------------------------------------------------------------------
  9216                                  
  9217                                  struc TFrame	 ; TableFrame
  9218 00000000 ????                    .OldBP:	 resw 1  ; 0
  9219 00000002 ????                    .OldRet: resw 1  ; 2
  9220 00000004 ??                      .Index:	 resb 1  ; 4
  9221 00000005 ??                      .Pad:	 resb 1  ; 5  
  9222 00000006 ????                    .Tab:	 resw 1  ; 6
  9223 00000008 ????                    .NewRet: resw 1  ; 8
  9224                                  endstruc
  9225                                  
  9226                                  TableDispatch:
  9227 00001220 55                      	PUSH	BP
  9228 00001221 89E5                    	MOV	BP,SP
  9229 00001223 53                      	PUSH	BX			; save BX
  9230                                  	;mov	bx,[bp+6]
  9231 00001224 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9232 00001227 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9233                                  	;cmp	[bp+4],bl
  9234 0000122A 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9235 0000122D 7317                    	JAE	short TableError	; yes
  9236                                  	;mov	bl,[bp+4]
  9237 0000122F 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9238 00001232 30FF                    	XOR	BH,BH			; convert to word
  9239 00001234 D1E3                    	SHL	BX,1			; convert to word pointer
  9240 00001236 43                      	INC	BX			; point past first length byte
  9241                                  	; 17/08/2018
  9242                                  	;add	bx,[bp+6]
  9243 00001237 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9244 0000123A 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9245                                  	;mov	[bp+6],bx
  9246 0000123D 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9247 00001240 5B                      	POP	BX			; restore BX
  9248 00001241 5D                      	POP	BP			; restore BP
  9249 00001242 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9250 00001245 C3                      	retn				; do operation
  9251                                  TableError:
  9252 00001246 5B                      	POP	BX			; restore BX
  9253 00001247 5D                      	POP	BP			; restore BP
  9254 00001248 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9255                                  
  9256                                  ;Break	<TestNet - determine if a CDS is for the network>
  9257                                  ;----------------------------------------------------------------------------
  9258                                  ;
  9259                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9260                                  ;	network CDS. This will handle NULL cds also.
  9261                                  ;
  9262                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9263                                  ;   Outputs:	ES:DI = ThisCDS
  9264                                  ;		carry Set => network
  9265                                  ;		carry Clear => local
  9266                                  ;   Registers modified: none.
  9267                                  ;----------------------------------------------------------------------------
  9268                                  
  9269                                  TestNet:
  9270                                  	;LES	DI,[CS:THISCDS]
  9271                                  
  9272                                  	; 16/05/2019 - Retro DOS v4.0
  9273 0000124B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9274 00001250 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9275 00001255 83FFFF                  	CMP	DI,-1
  9276 00001258 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9277                                  	;;test	word [es:di+43h],8000h
  9278                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9279                                  	;test	byte [es:di+44h],80h
  9280 0000125A 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9281 0000125F 7501                    	JNZ	short CMCRet		; jump has carry clear
  9282 00001261 C3                      	retn				; carry is clear
  9283                                  CMCRet: 
  9284 00001262 F5                      	CMC
  9285 00001263 C3                      	retn
  9286                                  
  9287                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9288                                  ;----------------------------------------------------------------------------
  9289                                  ;
  9290                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9291                                  ;	network file.
  9292                                  ;
  9293                                  ;   Inputs:	ES:DI point to SFT
  9294                                  ;   Outputs:	Zero set if not network sft
  9295                                  ;		zero reset otherwise
  9296                                  ;		Carry CLEAR!!!
  9297                                  ;   Registers modified: none.
  9298                                  ;----------------------------------------------------------------------------
  9299                                  
  9300                                  IsSFTNet:
  9301                                  	;;test	word [es:di+5],8000h
  9302                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9303                                  	; 16/05/2019 
  9304                                  	;test	byte [es:di+6],80h
  9305 00001264 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9306 00001269 C3                      	retn
  9307                                  
  9308                                  ;Break	<FastInit - Initialize FastTable entries >
  9309                                  ;----------------------------------------------------------------------------
  9310                                  ;   DOS 4.00   2/9/87
  9311                                  ;   FastInit  - initialize the FASTXXX routine entry
  9312                                  ;		  in the FastTable
  9313                                  ;
  9314                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9315                                  ;		DS:SI = address of FASTXXX routine entry
  9316                                  ;		   SI = -1 for query only
  9317                                  ;   Outputs:	Carry flag clear, if success
  9318                                  ;		Carry flag set,   if failure
  9319                                  ;
  9320                                  ;
  9321                                  ;----------------------------------------------------------------------------
  9322                                  
  9323                                  ;Procedure FastInit,NEAR
  9324                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9325                                  
  9326                                  ;	; MSDOS 3.3
  9327                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9328                                  ;FastInit:
  9329                                  ;	mov	di,FastTable ; FastOpenTable
  9330                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9331                                  ;	mov	bx,cs			; get DOS segment
  9332                                  ;	cmp	ax,bx			; first time installed ?	
  9333                                  ;	je	short ok_install	; yes
  9334                                  ;	stc				; set carry
  9335                                  ;	retn				; (cf=1 means) already installed !
  9336                                  ;
  9337                                  ;ok_install:
  9338                                  ;	mov	bx,FastTable ; FastOpenTable
  9339                                  ;	mov	cx,ds
  9340                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9341                                  ;	mov	[cs:bx+4],cx
  9342                                  ;	mov	[cs:bx+2],si
  9343                                  ;	retn
  9344                                  
  9345                                  ; 16/05/2019 - Retro DOS v4.0
  9346                                  
  9347                                  FastInit:
  9348                                  	; MSDOS 6.0
  9349                                  	;hkn; set up es to dosdataseg.
  9350 0000126A 06                      	push	es
  9351                                  	;getdseg <es>			; es -> dosdata
  9352 0000126B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9353                                  
  9354                                  	;hkn; FastTable is in DOSDATA
  9355 00001270 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9356 00001273 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9357 00001274 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9358 00001276 D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9359 00001278 D1E3                    	SHL	BX,1			;AN000;FO.
  9360 0000127A 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9361 0000127C 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9362                                  fcheck: 				;AN000;
  9363 00001280 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9364 00001282 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9365 00001284 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9366 00001286 09C0                    	OR	AX,AX			;AN000;FO.;
  9367                                  	;JZ	short ok_install	;AN000;FO.;
  9368                                  	;STC				;AN000;FO.;; already installed !
  9369                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9370                                  	; 14/01/2024
  9371 00001288 F9                      	stc
  9372 00001289 7517                    	jnz	short FSret
  9373                                  ok_install:				;AN000;
  9374 0000128B 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9375 0000128E 7412                    	JZ	short FSret		;AN000;FO.; yes
  9376 00001290 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9377 00001292 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9378 00001296 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9379                                  
  9380                                  ;hkn; FastFlg moved to DOSDATA
  9381 00001299 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9382 0000129C 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9383                                  	;or	byte [es:di],80h
  9384 0000129E 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9385                                  FSret:					;AN000;
  9386 000012A2 07                      	pop	es
  9387 000012A3 C3                      	retn				;AN000;FO.
  9388                                  
  9389                                  ;EndProc FastInit
  9390                                  
  9391                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9392                                  ;----------------------------------------------------------------------------
  9393                                  ;   DOS 3.3   6/10/86
  9394                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9395                                  ;
  9396                                  ;   Inputs:	None
  9397                                  ;   Outputs:	AX = -1 and carry flag set
  9398                                  ;
  9399                                  ;   Registers modified: none.
  9400                                  ;----------------------------------------------------------------------------
  9401                                  
  9402                                  FastRet:
  9403                                  	;mov	ax,-1
  9404                                  	;stc
  9405                                  	;retf
  9406 000012A4 F9                      	STC
  9407 000012A5 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9408 000012A7 CB                      	RETF
  9409                                  
  9410                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9411                                  ;----------------------------------------------------------------------------
  9412                                  ;   DOS 3.3   6/10/86
  9413                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9414                                  ;
  9415                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9416                                  ;   Outputs:	same output as $OPEN
  9417                                  ;
  9418                                  ;----------------------------------------------------------------------------
  9419                                  
  9420                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9421                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9422                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9423                                  
  9424                                  NLS_OPEN:
  9425                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9426                                  ;	MOV	BYTE [CPSWFLAG],0
  9427                                  ;	PUSH	BX		 ; save current state
  9428                                  
  9429 000012A8 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9430 000012AA E8235C                  	call	_$OPEN
  9431                                  
  9432                                  ;	POP	BX		 ; restore current state
  9433                                  ;	MOV	[CPSWFLAG],BL
  9434                                  
  9435 000012AD C3                      	RETN
  9436                                  
  9437                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9438                                  ;----------------------------------------------------------------------------
  9439                                  ;   DOS 3.3   6/10/86
  9440                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9441                                  ;
  9442                                  ;   Inputs:	BP = open mode
  9443                                  ;   Outputs:	same output as $LSEEK
  9444                                  ;
  9445                                  ;----------------------------------------------------------------------------
  9446                                  
  9447                                  ; 16/05/2019 - Retro DOS v4.0
  9448                                  
  9449                                  NLS_LSEEK:
  9450 000012AE 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9451 000012B3 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9452 000012B8 E81000                  	CALL	Fake_User_Stack
  9453 000012BB 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9454 000012BD E8BD55                  	call	_$LSEEK
  9455 000012C0 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9456 000012C5 368F06[8405]            	POP	word [SS:USER_SP]
  9457 000012CA C3                      	RETN
  9458                                  
  9459                                  ;Break	<Fake_User_Stack - save user stack>
  9460                                  ;----------------------------------------------------------------------------
  9461                                  ;   DOS 3.3   6/10/86
  9462                                  ;   Fake_User_Stack - save user stack pointer
  9463                                  ;
  9464                                  ;----------------------------------------------------------------------------
  9465                                  
  9466                                  Fake_User_Stack:
  9467 000012CB 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9468 000012CF 36A3[8405]              	MOV	[SS:USER_SP],AX
  9469 000012D3 8CD0                    	MOV	AX,SS
  9470 000012D5 36A3[8605]              	MOV	[SS:USER_SS],AX
  9471 000012D9 C3                      	RETN
  9472                                  
  9473                                  ;Break	<GetDevList - get device header list pointer>
  9474                                  ;----------------------------------------------------------------------------
  9475                                  ;   DOS 3.3   7/25/86
  9476                                  ;   GetDevList - get device header list pointer
  9477                                  ;
  9478                                  ;   Output: AX:BX points to the device header list
  9479                                  ;----------------------------------------------------------------------------
  9480                                  
  9481                                  GetDevList:
  9482                                  	; 16/05/2019 - Retro DOS v4.0
  9483 000012DA BE[280D]                	MOV	SI,SysInitTable
  9484 000012DD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9485 000012E2 C534                    	LDS	SI,[SI]
  9486                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9487 000012E4 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9488                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9489 000012E7 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9490 000012EA C3                      	RETN
  9491                                  
  9492                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9493                                  ;----------------------------------------------------------------------------
  9494                                  ;   DOS 3.3   7/25/86
  9495                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9496                                  ;
  9497                                  ;   Inputs:	BP = function code 0CH
  9498                                  ;   Outputs:	same output as generic $IOCTL
  9499                                  ;
  9500                                  ;----------------------------------------------------------------------------
  9501                                  
  9502                                  NLS_IOCTL:
  9503                                  	; 16/05/2019 - Retro DOS v4.0
  9504 000012EB 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9505 000012F0 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9506 000012F5 E8D3FF                  	CALL	Fake_User_Stack
  9507 000012F8 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9508 000012FA E86F0F                  	call	_$IOCTL
  9509 000012FD 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9510 00001302 368F06[8405]            	POP	word [SS:USER_SP]
  9511 00001307 C3                      	RETN
  9512                                  
  9513                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9514                                  ;----------------------------------------------------------------------------
  9515                                  ;   DOS 3.3   7/25/86
  9516                                  ;   NLS_GETEXT	-
  9517                                  ;
  9518                                  ;   Inputs:	none
  9519                                  ;   Outputs:	AX = extended error
  9520                                  ;
  9521                                  ;----------------------------------------------------------------------------
  9522                                  
  9523                                  NLS_GETEXT:
  9524                                  	; 16/05/2019 - Retro DOS v4.0
  9525 00001308 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9526                                  	; 23/09/2023
  9527                                  MSG_RETRIEVAL:
  9528 0000130C C3                      	RETN
  9529                                  
  9530                                  ; 29/04/2019 - Retro DOS v4.0
  9531                                  
  9532                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9533                                  
  9534                                  ;----------------------------------------------------------------------------
  9535                                  ;   DOS 4.00
  9536                                  ;
  9537                                  ;   Inputs:	DL=0 get extended error message addr
  9538                                  ;		  =1 set extended error message addr
  9539                                  ;		  =2 get parser error message addr
  9540                                  ;		  =3 set parser error message addr
  9541                                  ;		  =4 get critical error message addr
  9542                                  ;		  =5 set critical error message addr
  9543                                  ;		  =6 get file system error message addr
  9544                                  ;		  =7 set file system error message addr
  9545                                  ;		  =8 get address for code reduction
  9546                                  ;		  =9 set address for code reduction
  9547                                  ;   Function:	get/set message address
  9548                                  ;   Outputs:	ES:DI points to addr when get
  9549                                  ;----------------------------------------------------------------------------
  9550                                  
  9551                                  ;Procedure MSG_RETRIEVAL,NEAR
  9552                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9553                                  
  9554                                  ; 23/09/2023
  9555                                  ;MSG_RETRIEVAL:
  9556                                  
  9557                                  ;;	NOTE:  This function lives in command.com resident code now.
  9558                                  ;;	If the int 2F ever gets this far, we'll return registers
  9559                                  ;;	unchanged, which produces the same result as before, if
  9560                                  ;;	command.com wasn't present (and therefore no messages available).
  9561                                  ;;
  9562                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9563                                  ;;	No_Op zeroes AL.
  9564                                  ;;
  9565                                  ;;;hkn; set up ds to point to DOSDATA
  9566                                  ;;	push	ds
  9567                                  ;;	getdseg	<ds>			; ds -> dosdata
  9568                                  ;;
  9569                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9570                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9571                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9572                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9573                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9574                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9575                                  ;;	DEC	AL		    ;AN000;;MS.
  9576                                  ;;toget:				    ;AN000;
  9577                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9578                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9579                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9580                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9581                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9582                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9583                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9584                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9585                                  ;;getget: 				     ;AN000;
  9586                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9587                                  ;;MSGret: 				     ;AN000;
  9588                                  ;;	POP	SI			     ;AN000;;MS.
  9589                                  ;;	POP	AX			     ;AN000;;MS.
  9590                                  ;;
  9591                                  ;;	pop	ds
  9592                                  
  9593                                  ;	return				     ;AN000;;MS. exit
  9594                                  
  9595                                  ; 23/09/2023
  9596                                  ;	retn	; 29/04/2019
  9597                                  
  9598                                  ;============================================================================
  9599                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9600                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9601                                  ;============================================================================
  9602                                  ; 20/07/2018 - Retro DOS v3.0
  9603                                  
  9604                                  ;	; MSDOS 3.3
  9605                                  ;	; 08/08/2018 - Retro DOS v3.0
  9606                                  ;ECritMEM:
  9607                                  ;ECritSFT:
  9608                                  ;	;
  9609                                  ;ECritDisk:
  9610                                  ;	retn
  9611                                  ;	;push	ax
  9612                                  ;	
  9613                                  ;	mov	ax,8001h
  9614                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9615                                  ;			; AL = critical section number (00h-0Fh)
  9616                                  ;	pop	ax
  9617                                  ;	retn
  9618                                  ;
  9619                                  ;	; MSDOS 3.3
  9620                                  ;	; 08/08/2018 - Retro DOS v3.0
  9621                                  ;LCritMEM:
  9622                                  ;LCritSFT:
  9623                                  ;	;
  9624                                  ;LCritDisk:
  9625                                  ;	retn
  9626                                  ;	;push	ax
  9627                                  ;	
  9628                                  ;	mov	ax,8101h
  9629                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9630                                  ;			; AL = critical section number (00h-0Fh)
  9631                                  ;	pop	ax
  9632                                  ;	retn
  9633                                  ;
  9634                                  ;ECritDevice:
  9635                                  ;	retn
  9636                                  ;	;push	ax
  9637                                  ;	
  9638                                  ;	mov	ax,8002h
  9639                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9640                                  ;			; AL = critical section number (00h-0Fh)
  9641                                  ;	pop	ax
  9642                                  ;	retn
  9643                                  ;
  9644                                  ;LCritDevice:
  9645                                  ;	retn
  9646                                  ;	;push	ax
  9647                                  ;	
  9648                                  ;	mov	ax,8102h
  9649                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9650                                  ;			; AL = critical section number (00h-0Fh)
  9651                                  ;	pop	ax
  9652                                  ;	retn
  9653                                  
  9654                                  ;============================================================================
  9655                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9656                                  ;============================================================================
  9657                                  ; 12/05/2019 - Retro DOS v4.0
  9658                                  
  9659                                  ; Critical Section Routines
  9660                                  
  9661                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9662                                  
  9663                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9664                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9665                                  
  9666                                  ; ---------------------------------------------------------------------------
  9667                                  ; Each handler must leave everything untouched; including flags!
  9668                                  ;
  9669                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9670                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9671                                  ; ---------------------------------------------------------------------------
  9672                                  
  9673                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9674                                  ; ---------------------------------------------------------------------------
  9675                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9676                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9677                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9678                                  ; ---------------------------------------------------------------------------
  9679                                  
  9680                                  ;%macro POPFF 0
  9681                                  ;	jmp	$+3
  9682                                  ;	iret
  9683                                  ;	push	cs
  9684                                  ;	call	$-2
  9685                                  ;%endmacro
  9686                                  
  9687                                  ; ---------------------------
  9688                                  
  9689                                  ;Procedure  ECritDisk,NEAR
  9690                                  	;public  ECritMEM
  9691                                  	;public  ECritSFT
  9692                                  ECritMEM:
  9693                                  ECritSFT:
  9694                                  ;
  9695                                  ECritDisk:
  9696                                  
  9697                                  ;SR; Check if critical section is to be entered
  9698                                  
  9699 0000130D 9C                      	pushf
  9700 0000130E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9701 00001314 740D                    	jz	short ECritDisk_2
  9702                                  
  9703                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9704                                  ;	;popff  ; * (macro)
  9705                                  ;	jmp	short ECritDisk_1 ; *
  9706                                  ;
  9707                                  ;ECritDisk_iret: ; *
  9708                                  ;	iret ; *
  9709                                  
  9710                                  	; 16/12/2022
  9711                                  	; 13/11/2022
  9712                                  	;jmp	short ECritDisk_1
  9713                                  	; 06/11/2022
  9714                                  ;ECritDisk_iret:
  9715                                  ;	iret	
  9716                                  
  9717                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9718                                  ECritDisk_1:
  9719 00001316 0E                      	push	cs ; *
  9720 00001317 E80800                  	call	ECritDisk_iret ; *		
  9721                                  	
  9722                                  ECritDisk_0:
  9723 0000131A 50                      	PUSH    AX
  9724                                  	;MOV	AX,8000h+critDisk
  9725                                  	;INT	int_IBM
  9726 0000131B B80180                  	mov	ax,8001h
  9727 0000131E CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9728                                  			; AL = critical section number (00h-0Fh)
  9729 00001320 58                      	POP     AX
  9730 00001321 C3                      	retn
  9731                                  
  9732                                  	; 16/12/2022
  9733                                  	; 13/11/2022
  9734                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9735                                  LCritDisk_iret: 
  9736 00001322 CF                      	iret
  9737                                  
  9738                                  ECritDisk_2:
  9739                                  	;;popff ; *
  9740                                  	;;retn
  9741                                  ;	jmp	short ECritDisk_3 ; *
  9742                                  ;ECritDisk_iret2: ; *
  9743                                  ;	iret
  9744                                  	
  9745                                  	; 16/12/2022
  9746                                  	; 13/11/2022
  9747                                  	;jmp	short ECritDisk_3
  9748                                  ;ECritDisk_iret2:
  9749                                  	;iret
  9750                                  
  9751                                  ECritDisk_3:
  9752 00001323 0E                      	push    cs ; *
  9753                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9754                                  	;call	ECritDisk_iret2 ; *
  9755                                  	;retn
  9756                                  	; 16/12/2022
  9757 00001324 E8FBFF                  	call	ECritDisk_iret
  9758 00001327 C3                      	retn
  9759                                  
  9760                                  ;EndProc ECritDisk
  9761                                  
  9762                                  ; ---------------------------
  9763                                  
  9764                                  ;Procedure   LCritDisk,NEAR
  9765                                  	;public  LCritMEM
  9766                                  	;public  LCritSFT
  9767                                  LCritMEM:
  9768                                  LCritSFT:
  9769                                  ;
  9770                                  LCritDisk:
  9771                                  
  9772                                  ;SR; Check if critical section is to be entered
  9773                                  
  9774 00001328 9C                      	pushf
  9775 00001329 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9776 0000132F 740C                    	jz	short LCritDisk_2
  9777                                  	;popff  ; * (macro)
  9778                                  ;	jmp	short LCritDisk_1 ; *
  9779                                  ;
  9780                                  ;LCritDisk_iret: ; *
  9781                                  ;	iret ; *
  9782                                  
  9783                                  	; 16/12/2022
  9784                                  	; 13/11/2022
  9785                                  	;jmp	short LCritDisk_1
  9786                                  ;LCritDisk_iret:
  9787                                  	;iret
  9788                                  
  9789                                  LCritDisk_1:
  9790 00001331 0E                      	push	cs ; *
  9791 00001332 E8EDFF                  	call	LCritDisk_iret ; *		
  9792                                  	
  9793                                  LCritDisk_0:
  9794 00001335 50                      	PUSH	AX
  9795                                  	;MOV	AX,8100h+critDisk
  9796                                  	;INT	int_IBM
  9797 00001336 B80181                  	mov	ax,8101h
  9798 00001339 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9799                                  			; AL = critical section number (00h-0Fh)
  9800 0000133B 58                      	POP	AX
  9801 0000133C C3                      	retn
  9802                                  
  9803                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9804                                  ;	iret
  9805                                  
  9806                                  LCritDisk_2:
  9807                                  	;;popff ; *
  9808                                  	;;retn
  9809                                  ;	jmp	short LCritDisk_3 ; *
  9810                                  ;LCritDisk_iret2: ; *
  9811                                  ;	iret
  9812                                  
  9813                                  	; 16/12/2022
  9814                                  	; 13/11/2022
  9815                                  	;jmp	short LCritDisk_3
  9816                                  ;LCritDisk_iret2:
  9817                                  	;iret
  9818                                  
  9819                                  LCritDisk_3:
  9820 0000133D 0E                      	push    cs ; *
  9821                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9822                                  	;call	LCritDisk_iret2 ; *
  9823                                  	;retn
  9824                                  	; 16/12/2022
  9825 0000133E E8E1FF                  	call	LCritDisk_iret
  9826 00001341 C3                      	retn
  9827                                  
  9828                                  ;EndProc LCritDisk
  9829                                  
  9830                                  ; ---------------------------
  9831                                  
  9832                                  ;Procedure   ECritDevice,NEAR
  9833                                  
  9834                                  ECritDevice:
  9835                                  
  9836                                  ;SR; Check if critical section is to be entered
  9837                                  
  9838 00001342 9C                      	pushf
  9839 00001343 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9840 00001349 740D                    	jz	short ECritDevice_2
  9841                                  	;popff  ; * (macro)
  9842                                  ;	jmp	short ECritDevice_1 ; *
  9843                                  ;
  9844                                  ;ECritDevice_iret: ; *
  9845                                  ;	iret ; *
  9846                                  
  9847                                  	; 16/12/2022	
  9848                                  	; 13/11/2022
  9849                                  	;jmp	short ECritDevice_1
  9850                                  ;ECritDevice_iret:
  9851                                  	;iret
  9852                                  
  9853                                  ECritDevice_1:
  9854 0000134B 0E                      	push	cs ; *
  9855 0000134C E80800                  	call	ECritDevice_iret ; *		
  9856                                  	
  9857                                  ECritDevice_0:
  9858 0000134F 50                      	PUSH	AX
  9859                                  	;MOV	AX,8000h+critDevice
  9860                                  	;INT	int_IBM
  9861 00001350 B80280                  	mov	ax,8002h
  9862 00001353 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9863                                  			; AL = critical section number (00h-0Fh)
  9864 00001355 58                      	POP     AX
  9865 00001356 C3                      	retn
  9866                                  
  9867                                  	; 16/12/2022
  9868                                  	; 06/12/2022
  9869                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9870                                  LCritDevice_iret: 
  9871 00001357 CF                      	iret
  9872                                  
  9873                                  ECritDevice_2:
  9874                                  	;;popff ; *
  9875                                  	;;retn
  9876                                  ;	jmp	short ECritDevice_3 ; *
  9877                                  ;ECritDevice_iret2: ; *
  9878                                  ;	iret
  9879                                  
  9880                                  	; 16/12/2022
  9881                                  	; 13/11/2022
  9882                                  	;jmp	short ECritDevice_3
  9883                                  ;ECritDevice_iret2:
  9884                                  	;iret
  9885                                  
  9886                                  ECritDevice_3:
  9887 00001358 0E                      	push    cs ; *
  9888                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9889                                  	;call	ECritDevice_iret2 ; *
  9890                                  	;retn
  9891                                  	; 16/12/2022
  9892 00001359 E8FBFF                  	call	ECritDevice_iret
  9893 0000135C C3                      	retn
  9894                                  
  9895                                  ;EndProc ECritDevice
  9896                                  
  9897                                  ; ---------------------------
  9898                                  
  9899                                  ;Procedure   LCritDevice,NEAR
  9900                                  
  9901                                  LCritDevice:
  9902                                  
  9903                                  ;SR; Check if critical section is to be entered
  9904                                  
  9905 0000135D 9C                      	pushf
  9906 0000135E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9907 00001364 740C                    	jz	short LCritDevice_2
  9908                                  	;popff  ; * (macro)
  9909                                  ;	jmp	short LCritDevice_1 ; *
  9910                                  ;
  9911                                  ;LCritDevice_iret: ; *
  9912                                  ;	iret ; *
  9913                                  
  9914                                  	; 16/12/2022
  9915                                  	; 13/11/2022
  9916                                  	;jmp	short LCritDevice_1
  9917                                  ;LCritDevice_iret:
  9918                                  	;iret
  9919                                  
  9920                                  LCritDevice_1:
  9921 00001366 0E                      	push	cs ; *
  9922 00001367 E8EDFF                  	call	LCritDevice_iret ; *		
  9923                                  	
  9924                                  LCritDevice_0:
  9925 0000136A 50                      	PUSH	AX
  9926                                  	;MOV	AX,8100h+critDevice
  9927                                  	;INT	int_IBM
  9928 0000136B B80281                  	mov	ax,8102h
  9929 0000136E CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9930                                  			; AL = critical section number (00h-0Fh)
  9931 00001370 58                      	POP     AX
  9932 00001371 C3                      	retn
  9933                                  
  9934                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9935                                  ;	iret
  9936                                  
  9937                                  LCritDevice_2:
  9938                                  	;;popff ; *
  9939                                  	;;retn
  9940                                  ;	jmp	short LCritDevice_3 ; *
  9941                                  ;LCritDevice_iret2: ; *
  9942                                  ;	iret
  9943                                  
  9944                                  	; 16/12/2022
  9945                                  	; 13/11/2022
  9946                                  	;jmp	short LCritDevice_3
  9947                                  ;LCritDevice_iret2:
  9948                                  	;iret
  9949                                  
  9950                                  LCritDevice_3:
  9951 00001372 0E                      	push    cs ; *
  9952                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9953                                  	;call	LCritDevice_iret2 ; *
  9954                                  	;retn
  9955                                  	; 16/12/2022
  9956 00001373 E8E1FF                  	call	LCritDevice_iret
  9957 00001376 C3                      	retn
  9958                                  
  9959                                  ;EndProc LCritDevice
  9960                                  
  9961                                  ;============================================================================
  9962                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9963                                  ;============================================================================
  9964                                  ; 20/07/2018 - Retro DOS v3.0
  9965                                  
  9966                                  ;============================================================================
  9967                                  ; STDIO.ASM - (MSDOS 2.0)
  9968                                  ;============================================================================
  9969                                  
  9970                                  ;
  9971                                  ; Standard device IO for MSDOS (first 12 function calls)
  9972                                  ;
  9973                                  
  9974                                  ;.xlist
  9975                                  ;.xcref
  9976                                  ;INCLUDE STDSW.ASM
  9977                                  ;INCLUDE DOSSEG.ASM
  9978                                  ;.cref
  9979                                  ;.list
  9980                                  
  9981                                  ;TITLE   STDIO - device IO for MSDOS
  9982                                  ;NAME    STDIO
  9983                                  
  9984                                  ;INCLUDE IO.ASM
  9985                                  
  9986                                  ; ---------------------------------------------------------------------------
  9987                                  ;
  9988                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9989                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9990                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9991                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9992                                  ;			    to restore MSDOS 2.0 device IO source code 
  9993                                  ;
  9994                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9995                                  	
  9996                                  ;============================================================================
  9997                                  ; STDIO.ASM - (MSDOS 2.0)
  9998                                  ;============================================================================
  9999                                  
 10000                                  ;
 10001                                  ; Standard device IO for MSDOS (first 12 function calls)
 10002                                  ;
 10003                                  
 10004                                  ;.xlist
 10005                                  ;.xcref
 10006                                  ;INCLUDE STDSW.ASM
 10007                                  ;INCLUDE DOSSEG.ASM
 10008                                  ;.cref
 10009                                  ;.list
 10010                                  
 10011                                  ;TITLE   STDIO - device IO for MSDOS
 10012                                  ;NAME    STDIO
 10013                                  
 10014                                  ;INCLUDE IO.ASM
 10015                                  
 10016                                  ; ---------------------------------------------------------------------------
 10017                                  ;
 10018                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10019                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10020                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10021                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10022                                  ;			    to restore MSDOS 2.0 device IO source code 
 10023                                  ;
 10024                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10025                                  ;
 10026                                  ;============================================================================
 10027                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10028                                  ;============================================================================
 10029                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10030                                  
 10031                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10032                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10033                                  
 10034                                  ;============================================================================
 10035                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10036                                  ;============================================================================
 10037                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10038                                  
 10039                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10040                                  
 10041                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10042                                  ;
 10043                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10044                                  ;	NAME	IBMCPMIO
 10045                                  
 10046                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10047                                  ;
 10048                                  ;	$Std_Con_Input_No_Echo
 10049                                  ;	$Std_Con_String_Output
 10050                                  ;	$Std_Con_String_Input
 10051                                  ;	$RawConIO
 10052                                  ;	$RawConInput
 10053                                  ;	RAWOUT
 10054                                  ;	RAWOUT2
 10055                                  ;
 10056                                  
 10057                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10058                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10059                                  ; references to be SS or CS relative which is desired.
 10060                                  
 10061                                  ; ---------------------------------------------------------------------------
 10062                                  
 10063                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10064                                  ;	NAME	CPMIO2
 10065                                  
 10066                                  ;
 10067                                  ;	Microsoft Confidential
 10068                                  ;	Copyright (C) Microsoft Corporation 1991
 10069                                  ;	All Rights Reserved.
 10070                                  ;
 10071                                  
 10072                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10073                                  ;
 10074                                  ;	$Std_Con_Input
 10075                                  ;	$Std_Con_Output
 10076                                  ;	OUTT
 10077                                  ;	TAB
 10078                                  ;	BUFOUT
 10079                                  ;	$Std_Aux_Input
 10080                                  ;	$Std_Aux_Output
 10081                                  ;	$Std_Printer_Output
 10082                                  ;	$Std_Con_Input_Status
 10083                                  ;	$Std_Con_Input_Flush
 10084                                  ;
 10085                                  ;	Revision History:
 10086                                  ;
 10087                                  ;	  AN000	 version 4.00 - Jan. 1988
 10088                                  
 10089                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10090                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10091                                  ; references to be SS or CS relative which is desired.
 10092                                  
 10093                                  ;DOSCODE SEGMENT
 10094                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10095                                  
 10096                                  
 10097                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10098                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10099                                  ;hkn;	not valid. 
 10100                                  
 10101                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10102                                  ; 08/11/2022
 10103                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10104                                  
 10105                                  ;
 10106                                  ;----------------------------------------------------------------------------
 10107                                  ;
 10108                                  ; Procedure : $Std_Con_Input_No_Echo
 10109                                  ;
 10110                                  ;----------------------------------------------------------------------------
 10111                                  ;
 10112                                  
 10113                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10114                                  
 10115                                  ; Inputs:
 10116                                  ;	None
 10117                                  ; Function:
 10118                                  ;	Input character from console, no echo
 10119                                  ; Returns:
 10120                                  ;	AL = character
 10121                                  
 10122 00001377 1E                      	push	ds
 10123 00001378 56                      	push	si
 10124                                  INTEST:
 10125 00001379 E8DC3D                  	call	STATCHK
 10126 0000137C 753B                    	jnz	short GET ; 08/09/2018
 10127                                  ;*************************************************************************
 10128                                  ;hkn; SS override
 10129 0000137E 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10130 00001384 7505                    	jnz	short no_sys_wait
 10131 00001386 B405                    	mov	ah,5			; get input status with system wait
 10132 00001388 E80431                  	call	IOFUNC
 10133                                  no_sys_wait:
 10134                                  ;**************************************************************************
 10135 0000138B B484                    	MOV	AH,84h
 10136 0000138D CD2A                    	INT	int_IBM	 ; int 2Ah
 10137                                  
 10138                                  ;;; 7/15/86  update the date in the idle loop
 10139                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10140                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10141                                  
 10142                                  ;hkn; SS override
 10143 0000138F 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10144 00001395 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10145                                  
 10146 00001397 50                      	PUSH	AX
 10147 00001398 53                      	PUSH	BX			; following is tricky,
 10148 00001399 51                      	PUSH	CX			; it may be called by critical handler
 10149 0000139A 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10150                                  					; other's READ or WRITE
 10151 0000139B 1E                      	PUSH	DS			; save DS = SFT's segment
 10152                                  
 10153                                  ;hkn; READTIME must use ds = DOSDATA
 10154                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10155                                  
 10156 0000139C 16                      	PUSH	SS ; 04/05/2019
 10157 0000139D 1F                      	POP	DS
 10158                                  
 10159 0000139E B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10160 000013A1 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10161                                  	;invoke	READTIME		; readtime
 10162 000013A4 E873F7                  	call	READTIME
 10163 000013A7 B80100                  	MOV	AX,1
 10164 000013AA E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10165                                  
 10166                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10167                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10168                                  ;	push	bx
 10169                                  ;	mov	bx,DATE_FLAG
 10170                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10171                                  ;	cmp	word [cs:bx],5872h
 10172                                  ;	jz	short FETCHI_TAG_chk_ok
 10173                                  ;	call	DOSINIT
 10174                                  ;FETCHI_TAG_chk_ok:
 10175                                  ;	pop	bx
 10176                                  
 10177 000013AD 1F                      	POP	DS			; restore DS
 10178 000013AE 5A                      	POP	DX
 10179 000013AF 59                      	POP	CX
 10180 000013B0 5B                      	POP	BX
 10181 000013B1 58                      	POP	AX
 10182                                  NoUpdate:
 10183                                  
 10184                                  ;hkn; SS override
 10185 000013B2 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10186                                  
 10187                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10188 000013B7 EBC0                    	JMP	short INTEST
 10189                                  GET:
 10190 000013B9 30E4                    	XOR	AH,AH
 10191 000013BB E8D130                  	call	IOFUNC
 10192 000013BE 5E                      	POP	SI
 10193 000013BF 1F                      	POP	DS
 10194                                  ;;; 7/15/86
 10195                                  
 10196                                  ;hkn; SS override
 10197                                  	; MSDOS 6.0
 10198 000013C0 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10199                                  	;
 10200 000013C6 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10201 000013C8 7505                    	JNZ	short noscan
 10202                                  
 10203                                  ;hkn; SS override
 10204                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10205                                  	; 20/06/2023
 10206 000013CA 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10207                                  noscan:
 10208 000013CF C3                      	retn
 10209                                  ;
 10210                                  ;----------------------------------------------------------------------------
 10211                                  ;
 10212                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10213                                  ;
 10214                                  ;
 10215                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10216                                  ;	EXIT	none
 10217                                  ;	USES	ALL
 10218                                  ;
 10219                                  ;----------------------------------------------------------------------------
 10220                                  ;
 10221                                  
 10222                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10223                                  
 10224 000013D0 89D6                    	mov	si,dx
 10225                                  STRING_OUT1:	
 10226 000013D2 AC                      	lodsb
 10227 000013D3 3C24                    	cmp	al,'$'
 10228 000013D5 74F8                    	je	short noscan
 10229                                  NEXT_STR1:
 10230 000013D7 E88702                  	call	OUTT
 10231 000013DA EBF6                    	jmp	short STRING_OUT1
 10232                                  
 10233                                  ;----------------------------------------------------------------------------
 10234                                  ;
 10235                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10236                                  ;
 10237                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10238                                  ;
 10239                                  ;	ENTRY	(ds:dx) = input buffer
 10240                                  ;	EXIT	none
 10241                                  ;	USES	ALL
 10242                                  ;
 10243                                  ;----------------------------------------------------------------------------
 10244                                  
 10245                                  	; 15/01/2024
 10246                                  
 10247                                  _$STD_CON_STRING_INPUT:		;System call 10
 10248                                  
 10249                                  	; 15/01/2024
 10250                                  	;mov	ax,ss
 10251                                  	;mov	es,ax
 10252 000013DC 16                      	push	ss
 10253 000013DD 07                      	pop	es
 10254                                  
 10255 000013DE 89D6                    	mov	si,dx
 10256 000013E0 30ED                    	xor	ch,ch
 10257 000013E2 AD                      	lodsw
 10258                                  
 10259                                  ;	(AL) = the buffer length
 10260                                  ;	(AH) = the template length
 10261                                  
 10262 000013E3 08C0                            or	al,al
 10263 000013E5 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10264 000013E7 88E3                    	mov	bl,ah		;Init template counter
 10265 000013E9 88EF                            mov	bh,ch		;Init template counter
 10266                                  
 10267                                  ;	(BL) = the number of bytes in the template
 10268                                  
 10269 000013EB 38D8                            cmp	al,bl
 10270 000013ED 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10271 000013EF 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10272 000013F2 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10273                                  
 10274                                  ; The number of chars in the template is >= the number of chars in buffer or
 10275                                  ; there is no CR at the end of the template. This is an inconsistant state
 10276                                  ; of affairs. Pretend that the template was empty:
 10277                                  ;
 10278                                  
 10279                                  NOEDIT:	
 10280 000013F4 88EB                    	mov	bl,ch		;Reset buffer
 10281                                  EDITON: 
 10282 000013F6 88C2                    	mov	dl,al
 10283 000013F8 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10284                                  
 10285                                  ;	Top level. We begin to read a line in.
 10286                                  
 10287                                  NEWLIN: 
 10288 000013F9 36A0[F901]              	mov	al,[SS:CARPOS]
 10289 000013FD 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10290                                  
 10291 00001401 56                      	push	si
 10292 00001402 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10293 00001405 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10294 0000140A 88EF                    	mov	bh,ch		;No chars from template yet
 10295 0000140C 88EE                    	mov	dh,ch		;No chars to new line yet
 10296 0000140E E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10297 00001411 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10298 00001413 7503                    	jnz	short GOTCH
 10299                                  
 10300                                  ;	This is the main loop of reading in a character and processing it.
 10301                                  ;
 10302                                  ;	(BH) = the index of the next byte in the template
 10303                                  ;	(BL) = the length of the template
 10304                                  ;	(DH) = the number of bytes in the buffer
 10305                                  ;	(DL) = the length of the buffer
 10306                                  
 10307                                  GETCH:
 10308 00001415 E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10309                                  GOTCH:
 10310                                  ;
 10311                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10312                                  ; input queue.
 10313                                  ;
 10314 00001418 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10315 0000141A 74F9                    	jz	short GETCH
 10316                                  
 10317                                  ;	If the leading char is the function-key lead byte
 10318                                  
 10319                                  	;cmp	al,[SS:ESCCHAR]
 10320                                  
 10321                                  	; 04/05/2019 - Retro DOS v4.0
 10322                                  
 10323                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10324                                  
 10325 0000141C 2E3A06[1A0A]            	CMP	AL,[cs:ESCCHAR]
 10326 00001421 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10327                                  
 10328                                  ;	Rubout and ^H are both destructive backspaces.
 10329                                  
 10330 00001423 3C7F                            cmp	al,c_DEL ; 7FH
 10331                                          ;jz	short BACKSPJ
 10332                                          ; 15/01/2024
 10333 00001425 7466                    	je	short BACKSP
 10334 00001427 3C08                    	cmp	al,c_BS  ; 8
 10335                                          ;jz	short BACKSPJ
 10336                                          ; 15/01/2024
 10337 00001429 7462                    	je	short BACKSP
 10338                                  
 10339                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10340                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10341                                  	;	   	after CMP and a CMP again!
 10342                                  	;		
 10343                                  	;		-It would be better if they use a 'JMP short' to 
 10344                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10345                                  	;		between them. Then, they would be able use a patch
 10346                                  	;		between 5271h and 5279h when if it will be required.
 10347                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10348                                  	;	
 10349                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10350                                  
 10351                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10352                                  	;
 10353                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10354                                  
 10355                                  ;DOSCODE:526D	cmp     al, 8
 10356                                  ;DOSCODE:526F	jz      short BACKSPJ
 10357                                  ;DOSCODE:5271	cmp     al, 17h
 10358                                  ;DOSCODE:5273	nop
 10359                                  ;DOSCODE:5274	nop
 10360                                  ;DOSCODE:5275	cmp     al, 15h
 10361                                  ;DOSCODE:5277	nop
 10362                                  ;DOSCODE:5278	nop
 10363                                  ;DOSCODE:5279	cmp     al, 0Dh
 10364                                  ;DOSCODE:527B	jz      short ENDLIN
 10365                                  ;DOSCODE:527D	cmp     al, 0Ah
 10366                                  ;DOSCODE:527F	jz      short PHYCRLF
 10367                                  	
 10368                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10369                                  	; DOSCODE:525Dh
 10370                                  
 10371                                  ; 16/12/2022
 10372                                  %if 0
 10373                                  	; MSDOS 6.0
 10374                                  ;	^W deletes backward once and then backs up until a letter is before the
 10375                                  ;	cursor
 10376                                  
 10377                                  	CMP     AL,"W"-"@" ; 17h
 10378                                  
 10379                                  ;	The removal of the comment characters before the jump statement will
 10380                                  ;	cause ^W to backup a word.
 10381                                  
 10382                                  ;***	JZ	short WordDel
 10383                                  	NOP
 10384                                  	NOP
 10385                                  
 10386                                  	CMP     AL,"U"-"@" ; 15h
 10387                                  
 10388                                  ;	The removal of the comment characters before the jump statement will
 10389                                  ;	cause ^U to clear a line.
 10390                                  
 10391                                  ;***	JZ	short LineDel
 10392                                  	NOP
 10393                                  	NOP
 10394                                  
 10395                                  %endif
 10396                                  
 10397                                  ;	CR terminates the line.
 10398                                  
 10399 0000142B 3C0D                            cmp	al,c_CR ; 0Dh
 10400 0000142D 7430                            jz	short ENDLIN
 10401                                  
 10402                                  ;	LF goes to a new line and keeps on reading.
 10403                                  
 10404 0000142F 3C0A                            cmp	al,c_LF ; 0Ah
 10405 00001431 7442                    	jz	short PHYCRLF
 10406                                  
 10407                                  ;	^X (or ESC) deletes the line and starts over
 10408                                  
 10409                                  	; MSDOS 3.3
 10410                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10411                                  	;jz	short KILNEW
 10412                                  
 10413                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10414                                  
 10415                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10416                                  
 10417 00001433 2E3A06[190A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10418 00001438 7440                    	jz	short KILNEW
 10419                                  	
 10420                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10421                                  	;jz	short KILNEW
 10422                                  
 10423                                  ; Otherwise, we save the input character.
 10424                                  
 10425                                  SAVCH:	
 10426 0000143A 38D6                    	cmp	dh,dl
 10427 0000143C 7317                    	jnb	short BUFFUL		; buffer is full.
 10428 0000143E AA                              stosb
 10429 0000143F FEC6                    	inc	dh                      ; increment count in buffer.
 10430 00001441 E8B102                  	call	BUFOUT			; Print control chars nicely
 10431                                  
 10432 00001444 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10433 0000144A 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10434 0000144C 38DF                            cmp	bh,bl
 10435 0000144E 73C5                            jnb	short GETCH		; no more characters in template
 10436 00001450 46                              inc	si                      ; Skip to next char in template
 10437 00001451 FEC7                            inc	bh                      ; remember position in template
 10438 00001453 EBC0                            jmp	short GETCH
 10439                                  
 10440                                  	; 15/01/2024
 10441                                  ;BACKSPJ: 
 10442                                  	;jmp	short BACKSP
 10443                                  
 10444                                  BUFFUL: 
 10445 00001455 B007                    	mov	al, 7			; Bell to signal full buffer
 10446 00001457 E80702                  	call	OUTT
 10447 0000145A EBB9                    	jmp	short GETCH
 10448                                  
 10449                                  ESCAPE: 
 10450                                  	;transfer OEMFunctionKey
 10451 0000145C E9E6F5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10452                                  
 10453                                  ENDLIN:
 10454 0000145F AA                              stosb				; Put the CR in the buffer
 10455 00001460 E8FE01                  	call	OUTT                    ; Echo it
 10456 00001463 5F                              pop	di                      ; Get start of user buffer
 10457 00001464 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10458 00001467 FEC6                            inc	dh			; DH is length including CR
 10459                                  
 10460                                  COPYNEW:
 10461                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10462                                  	;mov	bp, es
 10463                                  	;mov	bx, ds
 10464                                  	;mov	es, bx
 10465                                  	;mov	ds, bp
 10466                                  	;mov	si, INBUF
 10467                                  	;mov	cl, dh
 10468                                  	;rep	movsb
 10469                                  	;retn
 10470                                  
 10471                                  	; CPMIO.ASM (MSDOS 6.0)
 10472                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10473                                  	;SAVE	<DS,ES>
 10474 00001469 1E                      	PUSH	DS
 10475 0000146A 06                      	PUSH	ES
 10476                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10477 0000146B 1F                      	POP	DS
 10478 0000146C 07                      	POP	ES
 10479                                  
 10480                                  ;;hkn; INBUF is in DOSDATA
 10481 0000146D BE[FB01]                        MOV     SI,INBUF
 10482 00001470 88F1                            MOV     CL,DH                   ; set up count
 10483 00001472 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10484                                  OLDBAK_RETN:
 10485 00001474 C3                              RETN
 10486                                  
 10487                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10488                                  
 10489                                  PHYCRLF:
 10490 00001475 E81B01                  	CALL	CRLF
 10491 00001478 EB9B                            JMP	short GETCH
 10492                                  
 10493                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10494                                  
 10495                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10496                                  
 10497                                  	; Note: Following routines were not used in IBMDOS.COM
 10498                                  	;	-CRTL+W, CRTL+U is not activated-
 10499                                  	;	but they were in the kernel code!?)
 10500                                  
 10501                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10502                                  	; DOSCODE:52B6h
 10503                                  
 10504                                  ;;;;;;;;
 10505                                  
 10506                                  ; 16/12/2022
 10507                                  %if 0
 10508                                  ;
 10509                                  ; Delete the previous line
 10510                                  ;
 10511                                  LineDel:
 10512                                  	OR      DH,DH
 10513                                  	JZ	short GETCH	 ; 06/12/2022
 10514                                  	Call    BackSpace
 10515                                  	JMP	short LineDel
 10516                                  
 10517                                  %endif
 10518                                  
 10519                                  ;
 10520                                  ; delete the previous word.
 10521                                  ;
 10522                                  WordDel:
 10523                                  WordLoop:
 10524                                  ;	Call    BackSpace               ; backspace the one spot
 10525                                  ;	OR      DH,DH
 10526                                  ;	JZ	short GetChj
 10527                                  ;	MOV     AL,[ES:DI-1]
 10528                                  ;	cmp     al,'0'
 10529                                  ;	jb	short GetChj
 10530                                  ;	cmp     al,'9'
 10531                                  ;	jbe	short WordLoop
 10532                                  ;	OR      AL,20h
 10533                                  ;	CMP     AL,'a'
 10534                                  ;	JB	short GetChj
 10535                                  ;	CMP     AL,'z'
 10536                                  ;	JBE	short WordLoop
 10537                                  ;GetChj: 
 10538                                  ;	JMP	GETCH
 10539                                  
 10540                                  ; 16/12/2022
 10541                                  %if 0
 10542                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10543                                  	; (Worddel is not called or jumped from anywhere!)
 10544                                  WordDel:
 10545                                  WordLoop:
 10546                                  	Call    BackSpace               ; backspace the one spot
 10547                                  	OR      DH,DH
 10548                                  	JZ	short GetChj
 10549                                  	MOV     AL,[ES:DI-1]
 10550                                  	cmp     al,'0'
 10551                                  	jb	short GetChj
 10552                                  	cmp     al,'9'
 10553                                  	jbe	short WordLoop
 10554                                  	OR      AL,20h
 10555                                  	CMP     AL,'a'
 10556                                  	JB	short GetChj
 10557                                  	CMP     AL,'z'
 10558                                  	JBE	short WordLoop
 10559                                  GetChj: 
 10560                                  	JMP	GETCH
 10561                                  
 10562                                  %endif
 10563                                  
 10564                                  ;;;;;;;;
 10565                                  
 10566                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10567                                  
 10568                                  ; The user wants to throw away what he's typed in and wants to start over.
 10569                                  ; We print the backslash and then go to the next line and tab to the correct
 10570                                  ; spot to begin the buffered input.
 10571                                  
 10572                                  KILNEW:
 10573 0000147A B05C                            mov	al,'\'
 10574 0000147C E8E201                          call	OUTT            ;Print the CANCEL indicator
 10575 0000147F 5E                              pop	si		;Remember start of edit buffer
 10576                                  PUTNEW:
 10577 00001480 E81001                  	call	CRLF            ;Go to next line on screen
 10578 00001483 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10579 00001487 E84B02                  	call	TAB             ;Tab over
 10580 0000148A E96CFF                          JMP     NEWLIN		;Start over again
 10581                                  
 10582                                  ;	Destructively back up one character position
 10583                                  
 10584                                  BACKSP:
 10585                                  	; 09/09/2018
 10586 0000148D E80800                  	Call    BackSpace
 10587 00001490 EB83                    	JMP     short GETCH	; 15/01/2024
 10588                                  
 10589                                  	; 15/01/2024
 10590                                  ;User really wants an ESC character in his line
 10591                                  TWOESC:	
 10592 00001492 2EA0[1A0A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10593 00001496 EBA2                    	jmp	short SAVCH
 10594                                  
 10595                                  BackSpace:
 10596 00001498 08F6                    	or	dh,dh
 10597 0000149A 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10598 0000149C E85800                  	call	BACKUP          ;Do the backup
 10599 0000149F 268A05                  	mov	al,[es:di]	;Get the deleted char
 10600 000014A2 3C20                            cmp	al,20h	; ' '
 10601 000014A4 730F                    	jnb	short OLDBAK	;Was a normal char
 10602 000014A6 3C09                            cmp	al,c_HT ; 9
 10603 000014A8 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10604                                  ;; 9/27/86 fix for ctrl-U backspace
 10605 000014AA 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10606 000014AC 7407                    	JZ	short OLDBAK
 10607 000014AE 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10608 000014B0 7403                    	JZ	short OLDBAK
 10609                                  ;; 9/27/86 fix for ctrl-U backspace
 10610 000014B2 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10611                                  OLDBAK:
 10612 000014B5 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10613 000014BB 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10614 000014BD 08FF                    	or	bh,bh
 10615 000014BF 74B3                            jz	short OLDBAK_RETN 
 10616                                  				;Not advanced in template, stay where we are
 10617 000014C1 FECF                    	dec	bh		;Go back in template
 10618 000014C3 4E                              dec	si
 10619 000014C4 C3                      	retn
 10620                                  BAKTAB:
 10621 000014C5 57                              push	di
 10622 000014C6 4F                              dec	di		;Back up one char
 10623 000014C7 FD                              std			;Go backward
 10624 000014C8 88F1                            mov	cl,dh		;Number of chars currently in line
 10625 000014CA B020                            mov	al,20h	; ' '
 10626 000014CC 53                              push	bx
 10627 000014CD B307                            mov	bl,7		;Max
 10628 000014CF E30E                            jcxz	FIGTAB		;At start, do nothing
 10629                                  FNDPOS:
 10630 000014D1 AE                              scasb			;Look back
 10631 000014D2 7609                    	jbe	short CHKCNT
 10632 000014D4 26807D0109              	cmp	byte [es:di+1],9
 10633 000014D9 7409                    	jz	short HAVTAB	;Found a tab
 10634 000014DB FECB                    	dec	bl		;Back one char if non tab control char
 10635                                  CHKCNT:
 10636 000014DD E2F2                            loop	FNDPOS
 10637                                  FIGTAB:		
 10638 000014DF 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10639                                  HAVTAB:
 10640 000014E4 28F3                    	sub	bl,dh
 10641 000014E6 00D9                    	add	cl,bl
 10642 000014E8 80E107                  	and	cl,7		;CX has correct number to erase
 10643 000014EB FC                      	cld			;Back to normal
 10644 000014EC 5B                      	pop	bx
 10645 000014ED 5F                      	pop	di
 10646 000014EE 74C5                    	jz	short OLDBAK	;Nothing to erase
 10647                                  TABBAK:
 10648 000014F0 E80700                  	call	BACKMES
 10649 000014F3 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10650 000014F5 EBBE                    	jmp	short OLDBAK
 10651                                  
 10652                                  BACKUP:
 10653 000014F7 FECE                            dec	dh		;Back up in line
 10654 000014F9 4F                              dec	di
 10655                                  BACKMES:
 10656 000014FA B008                            mov	al,c_BS ; 8	;Backspace
 10657 000014FC E86201                          call	OUTT
 10658 000014FF B020                            mov	al,20h ; ' '	;Erase
 10659 00001501 E85D01                          call	OUTT
 10660 00001504 B008                            mov	al,c_BS ; 8	;Backspace
 10661 00001506 E95801                  	jmp	OUTT		;Done
 10662                                  
 10663                                  	; 15/01/2024
 10664                                  ;User really wants an ESC character in his line
 10665                                  ;TWOESC:	
 10666                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10667                                  ;	jmp	SAVCH
 10668                                  
 10669                                  ;Copy the rest of the template
 10670                                  COPYLIN:
 10671 00001509 88D9                            mov	cl,bl		;Total size of template
 10672 0000150B 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10673 0000150D EB07                            jmp	short COPYEACH
 10674                                  
 10675                                  COPYSTR:
 10676 0000150F E83200                  	call	FINDOLD         ;Find the char
 10677 00001512 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10678                                  
 10679                                  ;Copy one char from template to line
 10680                                  COPYONE:
 10681 00001514 B101                            mov	cl,1
 10682                                  ;Copy CX chars from template to line
 10683                                  COPYEACH:
 10684 00001516 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10685 0000151C 38D6                    	cmp	dh,dl
 10686 0000151E 740F                            jz	short GETCH2		;At end of line, can't do anything
 10687 00001520 38DF                            cmp	bh,bl
 10688 00001522 740B                            jz	short GETCH2		;At end of template, can't do anything
 10689 00001524 AC                              lodsb
 10690 00001525 AA                              stosb
 10691 00001526 E8CC01                  	call	BUFOUT
 10692 00001529 FEC7                            inc	bh			;Ahead in template
 10693 0000152B FEC6                            inc	dh			;Ahead in line
 10694 0000152D E2E7                            loop	COPYEACH
 10695                                  GETCH2:
 10696 0000152F E9E3FE                          jmp	GETCH
 10697                                  
 10698                                  ;Skip one char in template
 10699                                  SKIPONE:
 10700 00001532 38DF                    	cmp	bh,bl
 10701 00001534 74F9                    	jz	short GETCH2		;At end of template
 10702 00001536 FEC7                    	inc	bh			;Ahead in template
 10703 00001538 46                      	inc	si
 10704                                          ;jmp	GETCH
 10705                                  	; 15/01/2024
 10706 00001539 EBF4                    	jmp	short GETCH2
 10707                                  
 10708                                  SKIPSTR:
 10709 0000153B E80600                  	call	FINDOLD                 ;Find out how far to go
 10710 0000153E 01CE                            add	si,cx			;Go there
 10711 00001540 00CF                            add	bh,cl
 10712                                          ;jmp	GETCH
 10713                                  	; 15/01/2024
 10714 00001542 EBEB                    	jmp	short GETCH2
 10715                                  
 10716                                  ;Get the next user char, and look ahead in template for a match
 10717                                  ;CX indicates how many chars to skip to get there on output
 10718                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10719                                  ;       address is popped off and a jump to GETCH is taken.
 10720                                  ;       Make sure nothing extra on stack when this routine
 10721                                  ;       is called!!! (no PUSHes before calling it).
 10722                                  
 10723                                  FINDOLD:
 10724 00001544 E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10725                                  
 10726                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10727                                  
 10728                                  	;CMP	AL,[SS:ESCCHAR]	
 10729                                  	;JNZ	SHORT FINDSETUP
 10730                                  
 10731                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10732                                  
 10733                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10734                                  
 10735 00001547 2E3A06[1A0A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10736 0000154C 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10737                                  
 10738 0000154E E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10739 00001551 EB1D                            JMP	SHORT NOTFND		; go try again
 10740                                  FINDSETUP:
 10741 00001553 88D9                    	mov	cl,bl
 10742 00001555 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10743 00001557 7417                    	jz	short NOTFND	;At end of template
 10744 00001559 49                              dec	cx		;Cannot point past end, limit search
 10745 0000155A 7414                            jz	short NOTFND	;If only one char in template, forget it
 10746 0000155C 06                      	push	es
 10747 0000155D 1E                      	push	ds
 10748 0000155E 07                      	pop	es
 10749 0000155F 57                      	push	di
 10750 00001560 89F7                    	mov	di,si		;Template to ES:DI
 10751 00001562 47                      	inc	di
 10752 00001563 F2AE                    	repne	scasb		;Look
 10753 00001565 5F                      	pop	di
 10754 00001566 07                      	pop	es
 10755 00001567 7507                    	jnz	short NOTFND	;Didn't find the char
 10756 00001569 F6D1                            not	cl		;Turn how far to go into how far we went
 10757 0000156B 00D9                            add	cl,bl		;Add size of template
 10758 0000156D 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10759                                  FINDOLD_RETN:
 10760 0000156F C3                      	retn
 10761                                  
 10762                                  NOTFND:
 10763 00001570 5D                      	pop	bp              ;Chuck return address
 10764                                  	;jmp	GETCH
 10765                                  	; 15/01/2024
 10766                                  GETCH2_j:
 10767 00001571 EBBC                    	jmp	short GETCH2
 10768                                  
 10769                                  REEDIT:
 10770 00001573 B040                    	mov	al,'@'		;Output re-edit character
 10771 00001575 E8E900                  	call	OUTT
 10772 00001578 5F                      	pop	di
 10773 00001579 57                      	push	di
 10774 0000157A 06                      	push	es
 10775 0000157B 1E                      	push	ds
 10776 0000157C E8EAFE                  	call	COPYNEW		;Copy current line into template
 10777 0000157F 1F                      	pop	ds
 10778 00001580 07                      	pop	es
 10779 00001581 5E                      	pop	si
 10780 00001582 88F3                    	mov	bl,dh		;Size of line is new size template
 10781 00001584 E9F9FE                  	jmp	PUTNEW		;Start over again
 10782                                  
 10783                                  EXITINS:
 10784                                  ENTERINS:
 10785 00001587 36F616[7905]            	not	byte [SS:INSMODE]
 10786                                  	;jmp	GETCH
 10787                                  	; 15/01/2024
 10788 0000158C EBE3                    	jmp	short GETCH2_j
 10789                                  
 10790                                  ;Put a real live ^Z in the buffer (embedded)
 10791                                  CTRLZ:
 10792 0000158E B01A                    	mov	al,"Z"-"@" ; 1Ah
 10793 00001590 E9A7FE                          jmp	SAVCH
 10794                                  
 10795                                  ;Output a CRLF
 10796                                  CRLF:
 10797 00001593 B00D                    	mov	al,c_CR ; 0Dh 
 10798 00001595 E8C900                  	call	OUTT
 10799 00001598 B00A                    	mov	al,c_LF ; 0Ah
 10800 0000159A E9C400                  	jmp	OUTT
 10801                                  
 10802                                  ;
 10803                                  ;----------------------------------------------------------------------------
 10804                                  ;
 10805                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10806                                  ;
 10807                                  ;	Input or output raw character from console, no echo
 10808                                  ;
 10809                                  ;	ENTRY	DL = -1 if input
 10810                                  ;		   =  output character if output
 10811                                  ;	EXIT	(AL) = input character if input
 10812                                  ;	USES	all
 10813                                  ;
 10814                                  ;----------------------------------------------------------------------------
 10815                                  ; 20/07/2018 - Retro DOS v3.0
 10816                                  
 10817                                  ; 04/05/2019 - Retro DOS v4.0
 10818                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10819                                  
 10820                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10821                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10822                                  
 10823                                  _$RAW_CON_IO:			; System call 6
 10824 0000159D 88D0                    	MOV	AL,DL
 10825 0000159F 3CFF                    	CMP	AL,-1
 10826 000015A1 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10827                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10828                                  	;jz	short rci1
 10829                                  	;jmp	short RAWOUT
 10830                                  	; 16/12/202
 10831                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10832                                  	;nop
 10833                                  rci1:
 10834                                  			; Get pointer to register save area
 10835 000015A3 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10836 000015A8 31DB                    	XOR	BX,BX
 10837                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10838 000015AA E89D20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10839                                          ;JC	SHORT RET17
 10840 000015AD 72C0                            jc	short FINDOLD_RETN
 10841 000015AF B401                    	MOV	AH,1
 10842 000015B1 E8DB2E                  	CALL	IOFUNC
 10843 000015B4 750B                    	JNZ	SHORT RESFLG
 10844 000015B6 E8713B                  	CALL	SPOOLINT
 10845                                  	;OR	BYTE [ES:DI+16H],40H
 10846 000015B9 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10847 000015BE 30C0                    	XOR	AL,AL
 10848                                  RET17:
 10849 000015C0 C3                      	RETN
 10850                                  
 10851                                  RESFLG:
 10852                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10853 000015C1 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10854                                  				; Reset user's zero flag
 10855                                  ;RILP:
 10856                                  rci0:
 10857 000015C6 E8613B                  	CALL	SPOOLINT
 10858                                  ;
 10859                                  ;----------------------------------------------------------------------------
 10860                                  ;
 10861                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10862                                  ;
 10863                                  ;	Input raw character from console, no echo
 10864                                  ;
 10865                                  ;	ENTRY	none
 10866                                  ;	EXIT	(al) = character
 10867                                  ;	USES	all
 10868                                  ;
 10869                                  ;----------------------------------------------------------------------------
 10870                                  ;
 10871                                  
 10872                                  ;rci0:	invoke	SPOOLINT
 10873                                  
 10874                                  	;entry	$RAW_CON_INPUT
 10875                                  
 10876                                  	; 04/05/2019 - Retro DOS v4.0
 10877                                  
 10878                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10879                                  
 10880                                  _$RAW_CON_INPUT:		; System call 7
 10881 000015C9 53                      	push	bx
 10882 000015CA 31DB                    	XOR	BX,BX
 10883                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10884 000015CC E87B20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10885 000015CF 5B                      	pop	bx
 10886 000015D0 72EE                    	JC	SHORT RET17
 10887 000015D2 B401                    	MOV	AH,1
 10888 000015D4 E8B82E                  	CALL	IOFUNC
 10889                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10890                                  	;XOR	AH,AH
 10891                                          ;CALL	IOFUNC
 10892                                          ;RETN
 10893 000015D7 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10894 000015D9 B484                    	MOV	AH,84h
 10895 000015DB CD2A                    	INT	int_IBM  ; int 2Ah
 10896 000015DD EBE7                    	JMP	short rci0
 10897                                  rci5:	
 10898 000015DF 30E4                    	XOR	AH,AH
 10899                                  	;CALL	IOFUNC
 10900                                  	;RETN
 10901                                  	; 18/12/2022
 10902 000015E1 E9AB2E                  	jmp	IOFUNC
 10903                                  
 10904                                  ;       Output the character in AL to stdout
 10905                                  ;
 10906                                  	;entry	RAWOUT
 10907                                  RAWOUT:
 10908 000015E4 53                      	PUSH    BX
 10909 000015E5 BB0100                  	MOV     BX,1
 10910                                  
 10911                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10912 000015E8 E85F20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10913 000015EB 721B                    	JC	SHORT RAWRET1
 10914                                  
 10915                                  	;
 10916                                  	; MSDOS 2.11
 10917                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10918                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10919                                          ;PUSH	DS
 10920                                          ;PUSH	SI
 10921                                          ;LDS	SI,[SI+19H]		; output to special?
 10922                                  	;TEST	BYTE [SI+4],ISSPEC
 10923                                  	;POP	SI
 10924                                  	;
 10925                                          
 10926                                  	; MSDOS 3.3 & MSDOS 6.0
 10927                                  	;mov	bx,[si+5]
 10928 000015ED 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10929                                   ;
 10930                                   ; If we are a network handle OR if we are not a local device then go do the
 10931                                   ; output the hard way.
 10932                                   ;	
 10933                                  	;and	bx,8080h
 10934 000015F0 81E38080                	AND	BX,sf_isnet+devid_device
 10935                                  	;cmp	bx,80h
 10936 000015F4 81FB8000                	CMP	BX,devid_device
 10937 000015F8 7510                    	jnz     short RAWNORM
 10938 000015FA 1E                      	push    ds
 10939                                  	;lds	bx,[si+7]
 10940 000015FB C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10941                                  	;test	byte [bx+4],10h
 10942 000015FE F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10943                                  	;
 10944                                  
 10945 00001602 1F                      	POP	DS
 10946 00001603 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10947                                  
 10948 00001605 CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10949                                  
 10950                                  	;JMP	SHORT RAWRET
 10951                                  ;RAWNORM:
 10952                                  ;	CALL    RAWOUT3
 10953                                  RAWRET: 
 10954 00001607 F8                      	CLC
 10955                                  RAWRET1:
 10956 00001608 5B                      	POP     BX
 10957                                  RAWRET2:
 10958 00001609 C3                      	RETN
 10959                                  RAWNORM:
 10960 0000160A E80700                  	CALL    RAWOUT3
 10961 0000160D EBF8                    	jmp	short RAWRET
 10962                                  
 10963                                  ;	Output the character in AL to handle in BX
 10964                                  ;
 10965                                  ;	entry	RAWOUT2
 10966                                  
 10967                                  RAWOUT2:
 10968                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10969                                  	;JC	SHORT RET18
 10970 0000160F E83820                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10971 00001612 72F5                    	JC	SHORT RAWRET2
 10972                                  RAWOUT3:
 10973 00001614 50                      	PUSH	AX
 10974 00001615 EB0C                    	JMP	SHORT RAWOSTRT
 10975                                  ROLP:
 10976 00001617 E8103B                  	CALL	SPOOLINT
 10977                                  
 10978                                  	; 01/05/2019 - Retro DOS v4.0
 10979                                  
 10980                                  	; MSDOS 6.0
 10981                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10982                                  	; 17/12/2022
 10983 0000161A 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10984                                  	;or	word [ss:DOS34_FLAG],200h
 10985                                  				;AN002; set control break
 10986                                  	;invoke DSKSTATCHK
 10987 00001620 E8843A                  	call	DSKSTATCHK	;AN002; check control break
 10988                                  RAWOSTRT:
 10989 00001623 B403                    	MOV	AH,3
 10990 00001625 E8672E                  	CALL	IOFUNC
 10991 00001628 74ED                    	JZ	SHORT ROLP
 10992                                  
 10993                                  	; MSDOS 6.0
 10994                                  ;SR;
 10995                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10996                                  ;the user failed. We do not send a char if this happens. We however return
 10997                                  ;to the caller with carry clear because this DOS call does not return any
 10998                                  ;status. 
 10999                                  ;
 11000 0000162A 40                      	inc	ax		;fail on I24 if ax = -1
 11001 0000162B 58                      	POP	AX
 11002 0000162C 7405                    	jz	short nosend	;yes, do not send char
 11003 0000162E B402                    	MOV	AH,2
 11004 00001630 E85C2E                  	call	IOFUNC
 11005                                  nosend:
 11006 00001633 F8                      	CLC			; Clear carry indicating successful
 11007 00001634 C3                      	retn
 11008                                  
 11009                                  	; MSDOS 3.3 & MSDOS 2.11
 11010                                  	;POP	AX
 11011                                  	;MOV	AH,2
 11012                                          ;CALL	IOFUNC
 11013                                  	;CLC			; Clear carry indicating successful
 11014                                  ;RET18:    
 11015                                  	;RETN
 11016                                  
 11017                                  ;;10/08/2018
 11018                                  ; 20/07/2018 - Retro DOS v3.0
 11019                                  ; ---------------------------------------------------------------------------
 11020                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11021                                  ; ---------------------------------------------------------------------------
 11022                                  
 11023                                  ; This routine is called at DOS init
 11024                                  
 11025                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11026                                  ;;OUTMES:
 11027                                  ;;	;LODS	CS:BYTE PTR [SI]
 11028                                  ;;	CS	LODSB
 11029                                  ;;	CMP     AL,"$" ; 24h
 11030                                  ;;	JZ	SHORT RET18
 11031                                  ;;	CALL	OUTT
 11032                                  ;;	JMP     SHORT OUTMES
 11033                                  
 11034                                  ; ---------------------------------------------------------------------------
 11035                                  
 11036                                  ; 20/07/2018 - Retro DOS v3.0
 11037                                  
 11038                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11039                                  
 11040                                  ;
 11041                                  ;----------------------------------------------------------------------------
 11042                                  ;
 11043                                  ; Inputs:
 11044                                  ;	AX=0 save the DEVCALL request packet
 11045                                  ;	  =1 restore the DEVCALL request packet
 11046                                  ; Function:
 11047                                  ;	save or restore the DEVCALL packet
 11048                                  ; Returns:
 11049                                  ;	none
 11050                                  ;
 11051                                  ;----------------------------------------------------------------------------
 11052                                  ;
 11053                                  
 11054                                  ; 04/05/2019 - Retro DOS v4.0
 11055                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11056                                  
 11057                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11058                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11059                                  
 11060                                  ; 12/05/2019
 11061                                  
 11062                                  	; 15/01/2024
 11063                                  
 11064                                  Save_Restore_Packet:
 11065 00001635 1E                      	PUSH	DS
 11066 00001636 06                      	PUSH	ES
 11067 00001637 56                      	PUSH	SI
 11068 00001638 57                      	PUSH	DI
 11069                                  
 11070                                  	; 16/12/2022
 11071                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11072                                  	; 09/09/2018
 11073 00001639 BF[6C0D]                	mov	di,FAKE_STACK_2F
 11074 0000163C BE[5A03]                	mov	si,DEVCALL
 11075 0000163F BE[5A03]                	mov	si,DEVCALL
 11076                                  	;
 11077                                  	; 21/09/2023
 11078 00001642 09C0                    	or	ax,ax 
 11079                                  	;CMP	AX,0		; save packet
 11080 00001644 7402                    	JZ	short save_packet ; 16/12/2022
 11081                                  	;je	short set_seg
 11082                                  
 11083                                  	; MSDOS 6.0
 11084                                  restore_packet:
 11085                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11086                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11087                                  	; MSDOS 3.3
 11088                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11089                                  	;mov	di,DEVCALL  ; 09/09/2018
 11090                                  	;
 11091                                  	;JMP	short set_seg
 11092                                  
 11093                                  	; 16/12/2022	
 11094                                  	; 09/09/2018
 11095 00001646 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11096                                  
 11097                                  ; 16/12/2022
 11098                                  %if 0
 11099                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11100                                  	cmp	ax,0		; save packet
 11101                                  	jz	short save_packet
 11102                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11103                                  	mov	di,DEVCALL 
 11104                                  	jmp	short set_seg
 11105                                  
 11106                                  	; MSDOS 6.0
 11107                                  save_packet:
 11108                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11109                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11110                                  	; 09/09/2018
 11111                                  	; MSDOS 3.3
 11112                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11113                                  	;mov	si,DEVCALL ; 09/09/2018
 11114                                  
 11115                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11116                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11117                                  	mov	si,DEVCALL
 11118                                  %endif
 11119                                  
 11120                                  ; 15/01/2024
 11121                                  ; 16/12/2022
 11122                                  save_packet:
 11123                                  ;set_seg:
 11124                                  	; MSDOS 3.3
 11125                                  	;mov	ax,cs
 11126                                  
 11127                                  	; MSDOS 6.0
 11128                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11129                                  	;MOV	DS,AX
 11130                                  	;MOV	ES,AX
 11131                                  	; 15/01/2024
 11132 00001648 16                      	push	ss
 11133 00001649 1F                      	pop	ds
 11134 0000164A 1E                      	push	ds
 11135 0000164B 07                      	pop	es
 11136                                  
 11137 0000164C B90B00                  	MOV	CX,11		; 11 words to move
 11138 0000164F F3A5                    	REP	MOVSW
 11139                                  
 11140 00001651 5F                      	POP	DI
 11141 00001652 5E                      	POP	SI
 11142 00001653 07                      	POP	ES
 11143 00001654 1F                      	POP	DS
 11144 00001655 C3                      	retn
 11145                                  
 11146                                  ;============================================================================
 11147                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11148                                  ;============================================================================
 11149                                  ; 20/07/2018 - Retro DOS v3.0
 11150                                  ; 01/05/2019 - Retro DOS v4.0
 11151                                  
 11152                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11153                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11154                                  ;hkn;	not valid. 
 11155                                  
 11156                                  ;
 11157                                  ;----------------------------------------------------------------------------
 11158                                  ;
 11159                                  ;**	$STD_CON_INPUT - System Call 1
 11160                                  ;
 11161                                  ;	Input character from console, echo
 11162                                  ;
 11163                                  ;	ENTRY	none
 11164                                  ;	EXIT	(al) = character
 11165                                  ;	USES	ALL
 11166                                  ;
 11167                                  ;----------------------------------------------------------------------------
 11168                                  ;
 11169                                  
 11170                                  _$STD_CON_INPUT:	;System call 1
 11171                                  	
 11172 00001656 E81EFD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11173 00001659 50                      	PUSH	AX
 11174 0000165A E80400                  	CALL	OUTT
 11175 0000165D 58                      	POP	AX
 11176                                  CON_INPUT_RETN:	
 11177 0000165E C3                      	RETN
 11178                                  
 11179                                  ;
 11180                                  ;----------------------------------------------------------------------------
 11181                                  ;
 11182                                  ;**	$STD_CON_OUTPUT - System Call 2
 11183                                  ;
 11184                                  ;	Output character to console
 11185                                  ;
 11186                                  ;	ENTRY	(dl) = character
 11187                                  ;	EXIT	none
 11188                                  ;	USES	all
 11189                                  ;
 11190                                  ;----------------------------------------------------------------------------
 11191                                  ;
 11192                                  
 11193                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11194                                  
 11195                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11196                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11197                                  
 11198                                  _$STD_CON_OUTPUT:	;System call 2
 11199                                  
 11200 0000165F 88D0                    	MOV	AL,DL
 11201                                  OUTT:
 11202 00001661 3C20                    	CMP	AL,20H ; " "
 11203 00001663 725C                    	JB	SHORT CTRLOUT
 11204 00001665 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11205 00001667 7405                    	JZ	SHORT OUTCH
 11206                                  OUTCHA:	
 11207                                  	;INC	BYTE PTR [CARPOS]
 11208 00001669 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11209                                  OUTCH:
 11210 0000166E 1E                      	PUSH	DS
 11211 0000166F 56                      	PUSH	SI
 11212                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11213                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11214 00001670 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11215                                  	;AND	BYTE [SS:CHARCO],00111111B
 11216                                  	; 01/05/2019 - Retro DOS v4.0
 11217 00001675 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11218 0000167B 7505                    	JNZ	SHORT OUTSKIP
 11219                                  
 11220 0000167D 50                      	PUSH	AX
 11221 0000167E E8D73A                  	CALL	STATCHK
 11222 00001681 58                      	POP	AX
 11223                                  OUTSKIP:
 11224 00001682 E85FFF                  	CALL	RAWOUT				;output the character
 11225                                  
 11226 00001685 5E                      	POP	SI
 11227 00001686 1F                      	POP	DS
 11228                                  
 11229                                  	;TEST	BYTE PTR [PFLAG],-1
 11230                                  	;retz
 11231 00001687 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11232 0000168D 74CF                    	JZ	SHORT CON_INPUT_RETN
 11233                                  
 11234 0000168F 53                      	PUSH	BX
 11235 00001690 1E                      	PUSH	DS
 11236 00001691 56                      	PUSH	SI
 11237 00001692 BB0100                  	MOV	BX,1
 11238                                  	; 20/07/2018 - Retro DOS v3.0
 11239                                  	; MSDOS 3.3
 11240                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11241 00001695 E8B21F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11242                                  					;hkn; to sft entry
 11243 00001698 7224                    	JC	SHORT TRIPOPJ
 11244                                  
 11245                                  	; 01/05/2019 - Retro DOS v4.0
 11246                                  
 11247                                  	;mov	bx,[si+5]
 11248 0000169A 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11249                                  	;test	bx,8000h
 11250                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11251 0000169D F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11252 000016A0 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11253                                  	;;test	bx,80h
 11254                                  	;TEST	BX,devid_device 		; output to file?
 11255 000016A2 F6C380                  	test	bl,devid_device ; 80h
 11256 000016A5 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11257                                  	; 14/03/2018
 11258                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11259                                  	;jc	short TRIPOPJ
 11260                                  	; MSDOS 2.11
 11261                                  	;test	byte [SI+18H], 80h
 11262                                  	;jz	short TRIPOPJ
 11263 000016A7 BB0400                  	MOV	BX,4
 11264 000016AA E89D1F                  	CALL	GET_IO_SFT
 11265 000016AD 720F                    	JC	SHORT TRIPOPJ
 11266                                  	;;test	word [si+5], 800h
 11267                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11268                                  	;test	byte [si+6],8 ; 08/11/2022
 11269 000016AF F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11270                                  						; StdPrn redirected?
 11271                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11272                                  	;jz	LISSTRT2 ; 10/08/2018 
 11273                                  	; 16/12/2022
 11274 000016B3 7503                    	jnz	short outch1
 11275 000016B5 E98700                  	jmp	LISSTRT2
 11276                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11277                                  	;jz	short LISSTRT2J
 11278                                  outch1:
 11279                                  	;MOV	BYTE [PFLAG],0
 11280 000016B8 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11281                                  	; MSDOS 2.11
 11282                                  	;mov	bx,4
 11283                                  	;jmp	short LISSTRT2
 11284                                  	
 11285                                  TRIPOPJ:
 11286                                  	; 20/07/2018
 11287 000016BE E98100                  	JMP	TRIPOP
 11288                                  
 11289                                  	; 16/12/2022
 11290                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11291                                  ;LISSTRT2J:
 11292                                  ;	JMP	LISSTRT2
 11293                                  
 11294                                  CTRLOUT:
 11295 000016C1 3C0D                    	CMP	AL,c_CR ; 0Dh
 11296 000016C3 7420                    	JZ	SHORT ZERPOS
 11297 000016C5 3C08                    	CMP	AL,c_BS ; 8
 11298 000016C7 7424                    	JZ	SHORT BACKPOS
 11299 000016C9 3C09                    	CMP	AL,c_HT ; 9
 11300 000016CB 75A1                    	JNZ	SHORT OUTCH
 11301                                  	;MOV	AL,[CARPOS]
 11302 000016CD 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11303 000016D1 0CF8                    	OR	AL,0F8H
 11304 000016D3 F6D8                    	NEG	AL
 11305                                  TAB:
 11306 000016D5 51                      	PUSH	CX
 11307 000016D6 88C1                    	MOV	CL,AL
 11308 000016D8 B500                    	MOV	CH,0
 11309 000016DA E307                    	JCXZ	POPTAB
 11310                                  TABLP:
 11311 000016DC B020                    	MOV	AL," "
 11312 000016DE E880FF                  	CALL	OUTT
 11313 000016E1 E2F9                    	LOOP	TABLP
 11314                                  POPTAB:
 11315 000016E3 59                      	POP	CX
 11316                                  
 11317 000016E4 C3                      	RETN
 11318                                  
 11319                                  ZERPOS:
 11320                                  	;MOV	BYTE PTR [CARPOS],0
 11321 000016E5 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11322                                  	; 10/08/2018
 11323 000016EB EB81                    	JMP	short OUTCH ; 04/05/2019
 11324                                  	
 11325                                  	; 18/12/2022
 11326                                  ;OUTJ:	
 11327                                  	;JMP	OUTT
 11328                                  
 11329                                  BACKPOS:
 11330                                  	;DEC	BYTE PTR [CARPOS]
 11331 000016ED 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11332 000016F2 E979FF                  	JMP	OUTCH
 11333                                  
 11334                                  BUFOUT:
 11335 000016F5 3C20                    	CMP	AL," "
 11336 000016F7 7315                    	JAE	SHORT OUTJ		;Normal char
 11337 000016F9 3C09                    	CMP	AL,9
 11338 000016FB 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11339                                  	;DOS 3.3  7/14/86
 11340 000016FD 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11341 000016FF 740D                    	JZ	short CTRLU
 11342 00001701 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11343 00001703 7409                    	JZ	short CTRLU
 11344                                  NOT_CTRLU:
 11345                                  	;DOS 3.3  7/14/86
 11346 00001705 50                      	PUSH	AX
 11347 00001706 B05E                    	MOV	AL,"^"
 11348 00001708 E856FF                  	CALL	OUTT		;Print '^' before control chars
 11349 0000170B 58                      	POP	AX
 11350 0000170C 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11351                                  CTRLU:
 11352                                  	;CALL	OUTT
 11353                                  	; 18/12/2022
 11354                                  OUTJ:
 11355 0000170E E950FF                  	jmp	OUTT
 11356                                  ;BUFOUT_RETN:
 11357                                  	;RETN
 11358                                  
 11359                                  ;
 11360                                  ;----------------------------------------------------------------------------
 11361                                  ;
 11362                                  ;**	$STD_AUX_INPUT - System Call 3
 11363                                  ;
 11364                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11365                                  ;
 11366                                  ;	ENTRY	none
 11367                                  ;	EXIT	(al) = character
 11368                                  ;	USES	all
 11369                                  ;
 11370                                  ;----------------------------------------------------------------------------
 11371                                  ;
 11372                                  
 11373                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11374                                  
 11375                                  _$STD_AUX_INPUT:	;System call 3
 11376                                  
 11377 00001711 E8443A                  	CALL	STATCHK
 11378 00001714 BB0300                  	MOV	BX,3
 11379 00001717 E8301F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11380                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11381                                  	;retc
 11382                                  	; 16/12/2022
 11383                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11384                                  	;JC	SHORT BUFOUT_RETN
 11385                                  	;JMP	SHORT TAISTRT
 11386                                  	; 07/12/2022
 11387 0000171A 7304                    	jnc	SHORT TAISTRT
 11388 0000171C C3                      	retn	
 11389                                  
 11390                                  AUXILP:
 11391 0000171D E80A3A                  	CALL	SPOOLINT
 11392                                  TAISTRT:
 11393 00001720 B401                    	MOV	AH,1
 11394 00001722 E86A2D                  	CALL	IOFUNC
 11395 00001725 74F6                    	JZ	SHORT AUXILP
 11396 00001727 30E4                    	XOR	AH,AH
 11397                                  	; 16/12/2022
 11398                                  	;CALL	IOFUNC
 11399                                  	;RETN
 11400                                  	; 07/12/2022
 11401 00001729 E9632D                  	jmp	IOFUNC
 11402                                  
 11403                                  ;
 11404                                  ;----------------------------------------------------------------------------
 11405                                  ;
 11406                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11407                                  ;
 11408                                  ;	ENTRY	(dl) = character
 11409                                  ;	EXIT	none
 11410                                  ;	USES	all
 11411                                  ;
 11412                                  ;----------------------------------------------------------------------------
 11413                                  ;
 11414                                  
 11415                                  _$STD_AUX_OUTPUT:	;System call 4
 11416                                  
 11417 0000172C 53                      	PUSH	BX
 11418 0000172D BB0300                  	MOV	BX,3
 11419 00001730 EB04                    	JMP	SHORT SENDOUT
 11420                                  
 11421                                  ;
 11422                                  ;----------------------------------------------------------------------------
 11423                                  ;
 11424                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11425                                  ;
 11426                                  ;	ENTRY	(dl) = character
 11427                                  ;	EXIT	none
 11428                                  ;	USES	all
 11429                                  ;
 11430                                  ;----------------------------------------------------------------------------
 11431                                  ;
 11432                                  
 11433                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11434                                  
 11435 00001732 53                      	PUSH	BX
 11436 00001733 BB0400                  	MOV	BX,4
 11437                                  
 11438                                  SENDOUT:
 11439 00001736 88D0                    	MOV	AL,DL
 11440 00001738 50                      	PUSH	AX
 11441 00001739 E81C3A                  	CALL	STATCHK
 11442 0000173C 58                      	POP	AX
 11443 0000173D 1E                      	PUSH	DS
 11444 0000173E 56                      	PUSH	SI
 11445                                  LISSTRT2:
 11446 0000173F E8CDFE                  	CALL	RAWOUT2
 11447                                  TRIPOP:
 11448 00001742 5E                      	POP	SI
 11449 00001743 1F                      	POP	DS
 11450 00001744 5B                      	POP	BX
 11451                                  SCIS_RETN:	; 20/07/2018
 11452 00001745 C3                      	RETN
 11453                                  ;
 11454                                  ;----------------------------------------------------------------------------
 11455                                  ;
 11456                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11457                                  ;
 11458                                  ;	Check console input status
 11459                                  ;
 11460                                  ;	ENTRY	none
 11461                                  ;	EXIT	AL = -1 character available, = 0 no character
 11462                                  ;	USES	all
 11463                                  ;
 11464                                  ;----------------------------------------------------------------------------
 11465                                  ;
 11466                                  
 11467                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11468                                  
 11469 00001746 E80F3A                  	CALL	STATCHK
 11470 00001749 B000                    	MOV	AL,0		; no xor!!
 11471                                  	;retz
 11472 0000174B 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11473 0000174D 0CFF                    	OR	AL,-1
 11474                                  ;SCIS_RETN:
 11475 0000174F C3                      	RETN
 11476                                  
 11477                                  ;
 11478                                  ;----------------------------------------------------------------------------
 11479                                  ;
 11480                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11481                                  ;
 11482                                  ;	Flush console input buffer and perform call in AL
 11483                                  ;
 11484                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11485                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11486                                  ;		return arguments for the fcn supplied in (AL)
 11487                                  ;	USES	all
 11488                                  ;
 11489                                  ;----------------------------------------------------------------------------
 11490                                  ;
 11491                                  
 11492                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11493                                  
 11494 00001750 50                      	PUSH	AX
 11495 00001751 52                      	PUSH	DX
 11496 00001752 31DB                    	XOR	BX,BX
 11497 00001754 E8F31E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11498                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11499 00001757 7205                    	JC	SHORT BADJFNCON
 11500 00001759 B404                    	MOV	AH,4
 11501 0000175B E8312D                  	CALL	IOFUNC
 11502                                  
 11503                                  BADJFNCON:
 11504 0000175E 5A                      	POP	DX
 11505 0000175F 58                      	POP	AX
 11506 00001760 88C4                    	MOV	AH,AL
 11507 00001762 3C01                    	CMP	AL,1
 11508 00001764 7413                    	JZ	SHORT REDISPJ
 11509 00001766 3C06                    	CMP	AL,6
 11510 00001768 740F                    	JZ	SHORT REDISPJ
 11511 0000176A 3C07                    	CMP	AL,7
 11512 0000176C 740B                    	JZ	SHORT REDISPJ
 11513 0000176E 3C08                    	CMP	AL,8
 11514 00001770 7407                    	JZ	SHORT REDISPJ
 11515 00001772 3C0A                    	CMP	AL,10
 11516 00001774 7403                    	JZ	SHORT REDISPJ
 11517 00001776 B000                    	MOV	AL,0
 11518 00001778 C3                      	RETN
 11519                                  
 11520                                  REDISPJ:
 11521 00001779 FA                      	CLI
 11522                                  	;transfer REDISP
 11523 0000177A E90BEC                  	JMP	REDISP
 11524                                  
 11525                                  ;============================================================================
 11526                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11527                                  ;============================================================================
 11528                                  ; 20/07/2018 - Retro DOS v3.0
 11529                                  ; 17/05/2019 - Retro DOS v4.0
 11530                                  
 11531                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11532                                  ;
 11533                                  ;	$GET_FCB_POSITION
 11534                                  ;	$FCB_DELETE
 11535                                  ;	$GET_FCB_FILE_LENGTH
 11536                                  ;	$FCB_CLOSE
 11537                                  ;	$FCB_RENAME
 11538                                  ;	SaveFCBInfo
 11539                                  ;	ResetLRU
 11540                                  ;	SetOpenAge
 11541                                  ;	LRUFCB
 11542                                  ;	FCBRegen
 11543                                  ;	BlastSFT
 11544                                  ;	CheckFCB
 11545                                  ;	SFTFromFCB
 11546                                  ;	FCBHardErr
 11547                                  ;
 11548                                  ;	Revision history:
 11549                                  ;
 11550                                  ;		Created: ARR 4 April 1983"
 11551                                  ;			 MZ  6 June  1983 completion of functions
 11552                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11553                                  ;					  times.  Change so successive closes work by
 11554                                  ;					  always returning OK.	Also, detect I/O to
 11555                                  ;					  already closed FCB and return EOF.
 11556                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11557                                  ;					  out of sft into FCB for reconnection
 11558                                  ;
 11559                                  ;		A000	 version 4.00  Jan. 1988
 11560                                  
 11561                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11562                                  ;----------------------------------------------------------------------------
 11563                                  ;
 11564                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11565                                  ;	extent and next record field and set the random record field to point
 11566                                  ;	to that record
 11567                                  ;
 11568                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11569                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11570                                  ;   Registers modified: all
 11571                                  ;
 11572                                  ;----------------------------------------------------------------------------
 11573                                  ;
 11574                                  
 11575                                  _$GET_FCB_POSITION:
 11576 0000177D E8D404                  	call	GetExtended		; point to FCB
 11577 00001780 E8A504                  	call	GetExtent		; DX:AX is current record
 11578                                  	;mov	[si+21h],ax
 11579 00001783 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11580                                  	;mov	[si+23h],dl
 11581 00001786 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11582                                  	;cmp	word [si+0Eh],64
 11583 00001789 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11584 0000178D 7303                    	JAE	short GetFCBBye
 11585                                  	;mov	[si+24h],dh
 11586 0000178F 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11587                                  GoodPath:	; 16/12/2022
 11588                                  GetFCBBye:
 11589 00001792 E9BEEE                  	jmp	FCB_RET_OK
 11590                                  
 11591                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11592                                  ;----------------------------------------------------------------------------
 11593                                  ;
 11594                                  ;**	$FCB_Delete - Delete from FCB Template
 11595                                  ;
 11596                                  ;	given an FCB, remove all directory entries in the current
 11597                                  ;	directory that have names that match the FCB's ?  marks.
 11598                                  ;
 11599                                  ;	ENTRY	(DS:DX) = address of FCB
 11600                                  ;	EXIT	entries matching the FCB are deleted
 11601                                  ;		(al) = ff iff no entries were deleted
 11602                                  ;	USES	all
 11603                                  ;
 11604                                  ;----------------------------------------------------------------------------
 11605                                  ;
 11606                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11607                                  
 11608                                  _$FCB_DELETE:		; System call 19
 11609                                  					; OpenBuf is in DOSDATA
 11610 00001795 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11611                                  
 11612 00001798 E86453                  	call	TransFCB		; convert FCB to path
 11613 0000179B 7207                    	JC	short BadPath 		; signal no deletions
 11614                                  
 11615 0000179D 16                      	push	SS
 11616 0000179E 1F                      	pop	DS			; SS is DOSDATA
 11617                                  
 11618 0000179F E87C0D                  	call	DOS_DELETE		; wham
 11619                                  	;JC	short BadPath
 11620                                  	; 16/12/2022
 11621 000017A2 73EE                    	jnc 	short GoodPath
 11622                                  ;GoodPath:
 11623                                  ;	;jmp	FCB_RET_OK		; do a good return
 11624                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11625                                  ;	jmp	short GetFCBBye
 11626                                  
 11627                                  BadPath:
 11628                                  	; Error code is in AX
 11629                                  
 11630 000017A4 E9AFEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11631                                  
 11632                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11633                                  ;----------------------------------------------------------------------------
 11634                                  ;
 11635                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11636                                  ;	file in records (rounded up if partial).
 11637                                  ;
 11638                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11639                                  ;   Outputs:	Random record field updated to reflect the number of records
 11640                                  ;   Registers modified: all
 11641                                  ;
 11642                                  ;----------------------------------------------------------------------------
 11643                                  ;
 11644                                  	; 15/01/2024
 11645                                  
 11646                                  _$GET_FCB_FILE_LENGTH:
 11647                                  
 11648 000017A7 E8AA04                  	call	GetExtended		; get real FCB pointer
 11649                                  					; DX points to Input FCB
 11650                                  
 11651                                  					; OpenBuf is in DOSDATA
 11652 000017AA BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11653                                  
 11654 000017AD 1E                      	push	ds			; save pointer to true FCB
 11655 000017AE 56                      	push	si
 11656 000017AF E84D53                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11657 000017B2 5E                      	pop	si
 11658 000017B3 1F                      	pop	ds
 11659 000017B4 72EE                    	JC	short BadPath
 11660 000017B6 1E                      	push	ds			; save pointer
 11661 000017B7 56                      	push	si
 11662 000017B8 16                      	push	ss		
 11663 000017B9 1F                      	pop	ds
 11664 000017BA E87111                  	call	GET_FILE_INFO		; grab the info
 11665 000017BD 5E                      	pop	si			; get pointer back
 11666 000017BE 1F                      	pop	ds
 11667 000017BF 72E3                    	JC	short BadPath 		; invalid something
 11668                                  	; 15/01/2024
 11669                                  	;MOV	DX,BX (*)		; get high order size
 11670                                  	;MOV	AX,DI (**)		; get low order size
 11671 000017C1 89D8                    	mov	ax,bx ; hw of file size
 11672                                  	;
 11673                                  	;mov	bx,[si+0Eh]
 11674 000017C3 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11675 000017C6 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11676 000017C8 7502                    	JNZ	short GetSize 		; not empty
 11677                                  	;MOV	BX,128
 11678 000017CA B380                    	mov	bl,128	; 15/01/2024
 11679                                  GetSize:
 11680                                  	; 15/01/2024
 11681                                  	;MOV	DI,AX			; save low order word
 11682                                  	;MOV	AX,DX			; move high order for divide
 11683                                  	;xchg	ax,dx ; (*)
 11684                                  	; ax = hw of file size
 11685                                  
 11686 000017CC 31D2                    	XOR	DX,DX			; clear out high
 11687 000017CE F7F3                    	DIV	BX			; wham
 11688 000017D0 50                      	PUSH	AX			; save dividend
 11689 000017D1 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11690 000017D3 F7F3                    	DIV	BX			; wham
 11691 000017D5 89D1                    	MOV	CX,DX			; save remainder
 11692 000017D7 5A                      	POP	DX			; get high order dividend
 11693 000017D8 E306                    	JCXZ	LengthStore		; no roundup
 11694 000017DA 83C001                  	ADD	AX,1
 11695 000017DD 83D200                  	ADC	DX,0			; 32-bit increment
 11696                                  LengthStore:
 11697                                  	;mov	[si+21h],ax
 11698 000017E0 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11699                                  	;mov	[si+23h],dl
 11700 000017E3 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11701 000017E6 08F6                    	OR	DH,DH
 11702 000017E8 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11703                                  	;mov	[si+24h],dh
 11704 000017EA 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11705                                  	; 16/12/2022
 11706                                  GoodRet:
 11707                                  	;jmp	FCB_RET_OK
 11708 000017ED EBA3                    	jmp	short GoodPath
 11709                                  
 11710                                  ;Break <$FCB_Close - close a file>
 11711                                  ;----------------------------------------------------------------------------
 11712                                  ;
 11713                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11714                                  ;	as the FCB may be used for further I/O
 11715                                  ;
 11716                                  ;   Inputs:	DS:DX point to FCB
 11717                                  ;   Outputs:	AL = FF if file was not found on disk
 11718                                  ;   Registers modified: all
 11719                                  ;
 11720                                  ;----------------------------------------------------------------------------
 11721                                  ;
 11722                                  
 11723                                  	; 16/01/2024
 11724                                  
 11725                                  _$FCB_CLOSE:		; System call 16
 11726                                  
 11727 000017EF 30C0                    	XOR	AL,AL			; default search attributes
 11728 000017F1 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11729 000017F4 7403                    	JZ	short NoAttr		; not extended
 11730 000017F6 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11731                                  NoAttr:
 11732                                  					; SS override
 11733 000017F9 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11734 000017FD E8C303                  	call	SFTFromFCB
 11735 00001800 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11736                                  
 11737                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11738                                  	; there is no need to set the SFT's attribute.
 11739                                  
 11740                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11741                                  	;;; done
 11742                                  
 11743                                  	;mov	al,[es:di+4]
 11744 00001802 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11745 00001806 30E4                    	XOR	AH,AH
 11746 00001808 50                      	PUSH	AX
 11747                                  
 11748                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11749                                  	;;; done
 11750                                  
 11751 00001809 E81F5B                  	call	CheckShare
 11752 0000180C 7508                    	JNZ	short NoStash
 11753 0000180E 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11754                                  	;mov	[es:di+4],al
 11755 00001812 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11756                                  NoStash:
 11757                                  
 11758                                  ; 16/01/2024
 11759                                  %if 0
 11760                                  	;mov	ax,[si+14h]
 11761                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11762                                  	;mov	[es:di+0Fh],ax
 11763                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11764                                  	;mov	ax,[si+16h]
 11765                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11766                                  	;mov	[es:di+0Dh],ax
 11767                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11768                                  	;mov	ax,[si+10h]
 11769                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11770                                  	;mov	[es:di+11h],ax
 11771                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11772                                  	;mov	ax,[si+12h]
 11773                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11774                                  	;mov	[es:di+13h],ax
 11775                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11776                                  	;or	word [es:di+5],4000h
 11777                                  	; 17/12/2022
 11778                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11779                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11780                                  %else
 11781                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11782 00001816 1E                      	push	ds
 11783                                  	;lds	ax,[si+14h]
 11784 00001817 C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11785                                  	;mov	[es:di+0Fh],ax
 11786 0000181A 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11787                                  	;mov	[es:di+0Dh],ds		
 11788 0000181E 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11789 00001822 1F                      	pop	ds
 11790                                  	;lds	ax,[si+10h]
 11791 00001823 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11792                                  	;mov	[es:di+11h],ax
 11793 00001826 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11794                                  	;mov	[es:di+13h],ds
 11795 0000182A 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11796                                  	; 16/01/2024
 11797                                  	;;or	word [es:di+5], 4000h
 11798                                  	;or	word [es:di+SF_ENTRY.sf_flags], sf_close_nodate
 11799 0000182E 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11800                                  %endif
 11801                                  
 11802 00001833 16                      	push	ss
 11803 00001834 1F                      	pop	ds
 11804 00001835 E8EF16                  	call	DOS_CLOSE	; wham
 11805 00001838 C43E[9E05]              	LES	DI,[THISSFT]
 11806                                  
 11807                                  	;;; 9/8/86 F.C. restore SFT attribute
 11808 0000183C 59                      	POP	CX
 11809                                  	;mov	[es:di+4],cl
 11810 0000183D 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11811                                  	;;; 9/8/86 F.C. restore SFT attribute
 11812                                  
 11813 00001841 9C                      	PUSHF
 11814                                  	;test	word [es:di],0FFFFh
 11815                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11816                                  				; zero ref count gets blasted
 11817 00001842 26833D00                	cmp	word [ES:DI],0
 11818 00001846 7507                    	jnz     short CloseOK
 11819 00001848 50                      	PUSH	AX
 11820 00001849 B04D                    	MOV	AL,'M' ; 4Dh
 11821 0000184B E8F202                  	call	BlastSFT
 11822 0000184E 58                      	POP	AX
 11823                                  CloseOK:
 11824 0000184F 9D                      	POPF
 11825 00001850 739B                    	JNC	short GoodRet
 11826                                  	;cmp	al,6
 11827 00001852 3C06                    	CMP	AL,error_invalid_handle
 11828 00001854 7497                    	JZ	short GoodRet
 11829                                  	;mov	al,2
 11830 00001856 B002                    	MOV	AL,error_file_not_found
 11831                                  fren90:
 11832                                  	; 16/12/2022
 11833                                  fcb_close_err:
 11834 00001858 E9FBED                  	jmp	FCB_RET_ERR
 11835                                  
 11836                                  ;
 11837                                  ;----------------------------------------------------------------------------
 11838                                  ;
 11839                                  ;**	$FCB_Rename - Rename a File
 11840                                  ;
 11841                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11842                                  ;	multiple files copying from the meta characters.
 11843                                  ;
 11844                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11845                                  ;		    name of the files to be renamed. Starting at offset 11h
 11846                                  ;		    in the FCB is the destination name.
 11847                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11848                                  ;		AL = FF -> some files may have been renamed but:
 11849                                  ;			rename to existing file or source file not found
 11850                                  ;	USES	ALL
 11851                                  ;
 11852                                  ;----------------------------------------------------------------------------
 11853                                  ;
 11854                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11855                                  
 11856                                  _$FCB_RENAME:		; System call 23
 11857                                  
 11858 0000185B E8F603                  	call	GetExtended		; get pointer to real FCB
 11859 0000185E 52                      	push	dx
 11860 0000185F 8A04                    	MOV	AL,[SI] 		; get drive byte
 11861 00001861 83C610                  	ADD	SI,10h			; point to destination
 11862                                  
 11863                                  					; RenBuf is in DOSDATA
 11864 00001864 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11865 00001867 FF34                    	push	word [SI]
 11866 00001869 1E                      	push	ds
 11867                                  	;push	di			; save source pointer for TransFCB
 11868                                  	; 16/01/2024 - BugFix !
 11869 0000186A 56                      	push	si
 11870 0000186B 8804                    	MOV	[SI],AL			; drop in real drive
 11871 0000186D 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11872 0000186F E88D52                  	call	TransFCB		; munch this pathname
 11873 00001872 5E                      	pop	si
 11874 00001873 1F                      	pop	ds	
 11875 00001874 8F04                    	pop	WORD [SI]		; get path back
 11876 00001876 5A                      	pop	dx			; Original FCB pointer
 11877 00001877 72DF                    	JC	short fren90		; bad path -> error
 11878                                  
 11879                                  					; SS override for WFP_Start & Ren_WFP
 11880 00001879 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11881 0000187E 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11882                                  
 11883                                  					; OpenBuf is in DOSDATA
 11884 00001883 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11885 00001886 E87652                  	call	TransFCB		; wham
 11886                                  					; NOTE that this call is pointing
 11887                                  					;  back to the ORIGINAL FCB so
 11888                                  					;  SATTRIB gets set correctly
 11889 00001889 72CD                    	JC	short fren90		; error
 11890 0000188B E86E0E                  	call	DOS_RENAME
 11891 0000188E 72C8                    	JC	short fren90
 11892                                  	; 16/12/2022
 11893 00001890 E9C0ED                  	jmp	FCB_RET_OK
 11894                                  	
 11895                                  ;	Error -
 11896                                  ;
 11897                                  ;	(al) = error code
 11898                                  
 11899                                  	; 16/12/2022
 11900                                  ;fren90:	
 11901                                  ;	;jmp	FCB_RET_ERR
 11902                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11903                                  ;	jmp	short fcb_close_err
 11904                                  
 11905                                  ;Break <Misbehavior fixers>
 11906                                  ;
 11907                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11908                                  ;   user's space so he may move them at will. Second, they have a small
 11909                                  ;   reserved area that may be used for system information. Third, there was
 11910                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11911                                  ;   usage.
 11912                                  ;
 11913                                  ;   This results in the following misbehavior:
 11914                                  ;
 11915                                  ;	infinite opens of the same file:
 11916                                  ;
 11917                                  ;	While (TRUE) {			While (TRUE) {
 11918                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11919                                  ;	    Read (FCB); 		    Write (FCB);
 11920                                  ;	    }				    }
 11921                                  ;
 11922                                  ;	infinite opens of different files:
 11923                                  ;
 11924                                  ;	While (TRUE) {			While (TRUE) {
 11925                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11926                                  ;	    Read (FCB); 		    Write (FCB);
 11927                                  ;	    }				    }
 11928                                  ;
 11929                                  ;	multiple closes of the same file:
 11930                                  ;
 11931                                  ;	FCBOpen (FCB);
 11932                                  ;	while (TRUE)
 11933                                  ;	    FCBClose (FCB);
 11934                                  ;
 11935                                  ;	I/O after closing file:
 11936                                  ;
 11937                                  ;	FCBOpen (FCB);
 11938                                  ;	while (TRUE) {
 11939                                  ;	    FCBWrite (FCB);
 11940                                  ;	    FCBClose (FCB);
 11941                                  ;	    }
 11942                                  ;
 11943                                  ;   The following is am implementation of a methodology for emulating the
 11944                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11945                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11946                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11947                                  ;   the local machine.
 11948                                  ;
 11949                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11950                                  ;   structures depending on the file itself and the state of operations of the
 11951                                  ;   OS. The information contained in this reserved field is enough to
 11952                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11953                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11954                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11955                                  ;
 11956                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11957                                  ;
 11958                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11959                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11960                                  ;   regenerated.
 11961                                  ;
 11962                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11963                                  ;   longer available. We can make up for this by using the following
 11964                                  ;   information:
 11965                                  ;
 11966                                  ;	The Drive number (from the DPB).
 11967                                  ;	The physical sector of the directory that contains the entry.
 11968                                  ;	The relative position of the entry in the sector.
 11969                                  ;	The first cluster field.
 11970                                  ;	The last used SFT.
 11971                                  ;      OR In the case of a device FCB
 11972                                  ;	The low 6 bits of sf_flags (indicating device type)
 11973                                  ;	The pointer to the device header
 11974                                  ;
 11975                                  ;   We read in the particular directory sector and examine the indicated
 11976                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11977                                  ;
 11978                                  ;   Some key items need to be remembered:
 11979                                  ;
 11980                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11981                                  ;	information. We enforce good behavior on the FCBs.
 11982                                  ;
 11983                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11984                                  ;	open VCs. The VCs may be closed only at process termination.
 11985                                  ;
 11986                                  ;	If this is not an installed version of the DOS, file sharing will
 11987                                  ;	always be present.
 11988                                  ;
 11989                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11990                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11991                                  ;
 11992                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11993                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11994                                  ;	proper OI record.
 11995                                  ;
 11996                                  ;   The test bits are:
 11997                                  ;
 11998                                  ;	00 -> local file
 11999                                  ;	40 -> sharing local
 12000                                  ;	80 -> network
 12001                                  ;	C0 -> local device
 12002                                  
 12003                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 12004                                  ;----------------------------------------------------------------------------
 12005                                  ;
 12006                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 12007                                  ;	pieces of information into the FCB to allow for subsequent
 12008                                  ;	regeneration. Poke LRU also.
 12009                                  ;
 12010                                  ;   Inputs:	ThisSFT points to a complete SFT.
 12011                                  ;		DS:SI point to the FCB (not an extended one)
 12012                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 12013                                  ;		DS:SI preserved
 12014                                  ;		ES:DI point to sft
 12015                                  ;   Registers modified: All
 12016                                  ;
 12017                                  ;
 12018                                  ;----------------------------------------------------------------------------
 12019                                  ;
 12020                                  
 12021                                  	; 20/01/2024
 12022                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12023                                  
 12024                                  SaveFCBInfo:
 12025                                  
 12026 00001893 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12027 00001898 E8C9F9                  	call	IsSFTNet
 12028 0000189B 740B                    	JZ	short SaveLocal		; if not network then save local info
 12029                                  ;
 12030                                  ;----- In net support -----
 12031                                  ;
 12032                                  	; 17/05/2019 - Retro DOS v4.0
 12033                                  
 12034                                  	; MSDOS 3.3
 12035                                  	;;mov	ax,[es:di+1Dh]
 12036                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12037                                  	;;mov	[si+1Ah],ax
 12038                                  	;mov	[si+fcb_net_handle],ax
 12039                                  	;push	es
 12040                                  	;push	di
 12041                                  	;;les	di,[es:di+19h]
 12042                                  	;LES	DI,[ES:DI+sf_netid]
 12043                                  	;;mov	[si+1Ch],di
 12044                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12045                                  	;;mov 	[si+1Eh],es
 12046                                  	;MOV	[SI+fcb_netID+2],ES
 12047                                  	;pop	di
 12048                                  	;pop	es
 12049                                  
 12050                                  	; MSDOS 6.0
 12051                                  	;mov	ax,[es:di+0Bh]
 12052 0000189D 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12053                                  	;mov	[si+1Ch],ax
 12054 000018A1 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12055                                  	
 12056                                  	;mov	bl,80h
 12057 000018A4 B380                    	MOV	BL,FCBNETWORK
 12058                                  ;
 12059                                  ;----- END In net support -----
 12060                                  ;
 12061 000018A6 EB63                    	jmp	SHORT SaveSFN
 12062                                  
 12063                                  SaveLocal:
 12064                                  	;IF	Installed
 12065 000018A8 E8805A                  	call	CheckShare
 12066                                  	;JZ	short SaveNoShare	; no sharer
 12067                                  	;JMP	short SaveShare		; sharer present
 12068                                  	; 16/12/2022
 12069                                  	; 28/07/2019
 12070 000018AB 7559                    	jnz	short SaveShare
 12071                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12072                                  	;JZ	short SaveNoShare	; no sharer
 12073                                  	;JMP	short SaveShare		; sharer present
 12074                                  
 12075                                  SaveNoShare:
 12076                                  	;;test 	word [es:di+5],80h
 12077                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12078 000018AD 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12079 000018B2 7542                    	JNZ	short SaveNoShareDev	; Device
 12080                                  
 12081                                  	; Save no sharing local file information
 12082                                  
 12083                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12084                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12085 000018B4 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12086                                  	;mov	[si+1Dh],ax
 12087 000018B8 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12088                                  
 12089                                  	; MSDOS 6.0
 12090                                  
 12091                                  	;SR; Store high byte of directory sector
 12092                                  	;mov	ax,[es:di+1Dh]
 12093 000018BB 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12094                                  	
 12095                                  	; SR;
 12096                                  	; We have to store the read-only and archive attributes of the file.
 12097                                  	; We extract it from the SFT and store it in the top two bits of the 
 12098                                  	; sector number ( sector number == 22 bits only )
 12099                                  
 12100                                  	;mov	bl,[es:di+4]
 12101 000018BF 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12102 000018C3 88DF                    	mov	bh,bl
 12103 000018C5 D0CB                    	ror	bl,1
 12104 000018C7 D0E7                    	shl	bh,1
 12105 000018C9 08FB                    	or	bl,bh
 12106 000018CB 80E3C0                  	and	bl,0C0h
 12107 000018CE 08D8                    	or	al,bl
 12108                                  	;mov	[si+18h],al ; 08/11/2022
 12109 000018D0 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12110                                  
 12111                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12112                                  	;mov	al,[es:di+1Fh]
 12113 000018D3 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12114                                  	;mov	[si+1Fh],al
 12115 000018D7 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12116                                  	;mov	ax,[es:di+0Bh]
 12117 000018DA 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12118                                  	;mov	[si+1Bh],ax
 12119 000018DE 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12120 000018E1 B300                    	MOV	BL,0
 12121                                  
 12122                                  	; Create the bits field from the dirty/device bits of the flags word 
 12123                                  	; and the mode byte
 12124                                  
 12125                                  SetFCBBits:
 12126                                  	;mov	ax,[es:di+5]
 12127 000018E3 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12128 000018E7 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12129                                  	;or	al,[es:di+2]
 12130 000018E9 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12131                                  	;mov	[si+1Ah], al
 12132 000018ED 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12133                                  
 12134                                  	; MSDOS 6.0
 12135                                  	
 12136                                  	; SR;
 12137                                  	; Check if we came here for local file or device. If for local file, 
 12138                                  	; skip setting of SFT index
 12139                                  	
 12140 000018F0 08DB                    	or	bl,bl
 12141 000018F2 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12142                                  
 12143 000018F4 EB15                    	JMP	short SaveSFN 		; go and save SFN
 12144                                  
 12145                                  	; Save no sharing local device information
 12146                                  
 12147                                  SaveNoShareDev:
 12148                                  	; 20/01/2024
 12149                                  	;;mov	ax,[es:di+7]
 12150                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12151                                  	;;mov	[si+1Ah],ax
 12152                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12153                                  	;;mov	ax,[es:di+9]
 12154                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12155                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12156                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12157 000018F6 06                      	push	es
 12158 000018F7 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12159 000018FB 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12160 000018FE 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12161 00001901 07                      	pop	es
 12162                                  	
 12163                                  	;mov	bl,40h
 12164 00001902 B340                    	MOV	BL,FCBDEVICE
 12165                                  	; 28/12/2022
 12166 00001904 EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12167                                  
 12168                                  SaveShare:
 12169                                  	;ENDIF
 12170                                  
 12171                                  ;----- In share support -----
 12172                                  
 12173                                  	;call	far [ss:ShSave]
 12174 00001906 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12175                                  
 12176                                  ;----- end in share support -----
 12177                                  
 12178                                  	; 17/05/2019
 12179                                  
 12180                                  SaveSFN:
 12181                                  	;lea	ax,[di-6]
 12182 0000190B 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12183                                  	
 12184                                  	; Adjust for offset to table.
 12185                                  	
 12186 0000190E 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12187                                  
 12188 00001913 53                      	push	bx			;bx = FCB type (net/Share or local)
 12189                                  	;;mov	bl,53 ; MSDOS 3.3
 12190                                  	;mov	bl,59 ; MSDOS 6.0
 12191 00001914 B33B                    	MOV	BL,SF_ENTRY.size
 12192 00001916 F6F3                    	DIV	BL
 12193                                  	;mov	[si+18h],al
 12194 00001918 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12195 0000191B 5B                      	pop	bx			;restore bx
 12196                                  
 12197                                  SaveNoSFN:
 12198                                  	;mov	ax,[es:di+5]
 12199 0000191C 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12200 00001920 243F                    	AND	AL,3Fh			; get real drive
 12201 00001922 08D8                    	OR	AL,BL
 12202                                  	;mov	[si+19h],al
 12203 00001924 884419                  	MOV	[SI+fcb_l_drive],AL
 12204                                  
 12205 00001927 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12206 0000192B 40                      	INC	AX
 12207                                  	;mov	[es:di+15h],ax
 12208 0000192C 26894515                	MOV	[ES:DI+sf_LRU],AX
 12209 00001930 7506                    	JNZ	short SimpleStuff
 12210                                  	
 12211                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12212                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12213                                  	
 12214                                  	;mov	bx,15h
 12215 00001932 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12216 00001935 E80500                  	call	ResetLRU
 12217                                  
 12218                                  	; Set new LRU to AX
 12219                                  SimpleStuff:
 12220 00001938 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12221 0000193C C3                      	retn
 12222                                  
 12223                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12224                                  ;----------------------------------------------------------------------------
 12225                                  ;
 12226                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12227                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12228                                  ;   at 0.
 12229                                  ;
 12230                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12231                                  ;		ES:DI point to SFT currently being updated
 12232                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12233                                  ;		AX has 8000h
 12234                                  ;   Registers modified: none
 12235                                  ;
 12236                                  ;----------------------------------------------------------------------------
 12237                                  ;
 12238                                  
 12239                                  	; 17/05/2019 - Retro DOS v4.0
 12240                                  ResetLRU:
 12241                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12242                                  	; DOSDATA
 12243                                  
 12244 0000193D B80080                  	MOV	AX,8000h
 12245 00001940 06                      	push	es
 12246 00001941 57                      	push	di
 12247                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12248 00001942 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12249                                  	;mov	cx,[es:di+4]
 12250 00001947 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12251                                  	;lea	di,[di+6]
 12252 0000194B 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12253                                  ovScan:
 12254 0000194E 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12255 00001951 7703                    	JA	short ovLoop
 12256 00001953 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12257                                  ovLoop:
 12258                                  	;;add	di,53	; MSDOS 3.3
 12259                                  	;add	di,59	; MSDOS 6.0	
 12260 00001956 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12261 00001959 E2F3                    	LOOP	ovScan
 12262 0000195B 5F                      	pop	di
 12263 0000195C 07                      	pop	es
 12264 0000195D 268901                  	MOV	[ES:DI+BX],AX
 12265 00001960 C3                      	retn
 12266                                  
 12267                                  ;IF  0  ; We dont need this routine any more.
 12268                                  ;
 12269                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12270                                  ;----------------------------------------------------------------------------
 12271                                  ;
 12272                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12273                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12274                                  ;   count here and fill in the appropriate field.
 12275                                  ;
 12276                                  ;   Inputs:	ES:DI point to SFT
 12277                                  ;   Outputs:	ES:DI has the open age field filled in.
 12278                                  ;		If open age has wraparound, we will have subtracted 8000h
 12279                                  ;		    from all open ages.
 12280                                  ;   Registers modified: AX
 12281                                  ;
 12282                                  ;----------------------------------------------------------------------------
 12283                                  ;
 12284                                  ;SetOpenAge:
 12285                                  ;	; 20/07/2018 - Retro DOS v3.0
 12286                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12287                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12288                                  ;
 12289                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12290                                  ;
 12291                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12292                                  ;	INC	AX
 12293                                  ;	;mov	[es:di+17h],ax
 12294                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12295                                  ;	JNZ	short SetDone
 12296                                  ;	;mov	bx,17h
 12297                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12298                                  ;	call	ResetLRU
 12299                                  ;SetDone:
 12300                                  ;	MOV	[CS:OpenLRU],AX
 12301                                  ;	retn
 12302                                  ;
 12303                                  ;ENDIF	; SetOpenAge no longer needed
 12304                                  
 12305                                  ; 21/07/2018 - Retro DOS v3.0
 12306                                  ; LRUFCB for MSDOS 6.0 !
 12307                                  
 12308                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12309                                  ;----------------------------------------------------------------------------
 12310                                  ;
 12311                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12312                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12313                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12314                                  ;
 12315                                  ;   Inputs:	none
 12316                                  ;   Outputs:	ES:DI point to SFT
 12317                                  ;		ThisSFT points to SFT
 12318                                  ;		SFT is zeroed
 12319                                  ;		Carry set of closes failed
 12320                                  ;   Registers modified: none
 12321                                  ;
 12322                                  ;----------------------------------------------------------------------------
 12323                                  ;
 12324                                  ; MSDOS 6.0
 12325                                  ;IF 0	; rewritten this routine
 12326                                  ;
 12327                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12328                                  ;	call	save_world
 12329                                  ;	
 12330                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12331                                  ; to find the lease recently used one that is younger than the open age.  We
 12332                                  ; operate be scanning the list n times finding the least age that is greater
 12333                                  ; or equal to the previous minimum age.
 12334                                  ;
 12335                                  ;   BP is the count of times we need to go through this loop.
 12336                                  ;   AX is the current acceptable minimum age to consider
 12337                                  ;
 12338                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12339                                  ;	XOR	AX,AX			; low = 0;
 12340                                  ;
 12341                                  ; If we've scanned the table n times, then we are done.
 12342                                  ;
 12343                                  ;lru1:
 12344                                  ;	CMP	bp,0			; while (k--) {
 12345                                  ;	JZ	short lru75
 12346                                  ;	DEC	bp
 12347                                  ;
 12348                                  ; Set up for scan.
 12349                                  ;
 12350                                  ;   AX is the minimum age for consideration
 12351                                  ;   BX is the minimum age found during the scan
 12352                                  ;   SI is the position of the entry that corresponds to BX
 12353                                  ;
 12354                                  ;	MOV	BX,-1			;     min = 0xffff;
 12355                                  ;	MOV	si,BX			;     pos = 0xffff;
 12356                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12357                                  ;	;mov	cx,[es:di+4]
 12358                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12359                                  ;	;lea	di,[di+6]
 12360                                  ;	LEA	DI,[DI+SFT.SFTable]
 12361                                  ;
 12362                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12363                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12364                                  ; are done.  In both cases, we use the found entry.
 12365                                  ;
 12366                                  ;lru2:
 12367                                  ;	cmp	word [es:di],0
 12368                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12369                                  ;	jz	short lru25
 12370                                  ;	;cmp	word [es:di],-1
 12371                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12372                                  ;	cmp	word [es:di],sf_busy
 12373                                  ;	jnz	short lru3
 12374                                  ;
 12375                                  ; The entry is usable without further scan.  Go and use it.
 12376                                  ;
 12377                                  ;lru25:
 12378                                  ;	MOV	si,DI			;	      pos = i;
 12379                                  ;	JMP	short lru11		;	      goto got;
 12380                                  ;
 12381                                  ; See if the entry is for the network or for the sharer.
 12382                                  ;
 12383                                  ;  If for the sharer or network then
 12384                                  ;	if the age < current minimum AND >= allowed minimum then
 12385                                  ;	    this entry becomes current minimum
 12386                                  ;
 12387                                  ;lru3:
 12388                                  ;	;test	word [es:di+5],8000h
 12389                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12390                                  ;					;	  if (!net[i]
 12391                                  ;	JNZ	short lru35
 12392                                  ;if installed
 12393                                  ;	call	CheckShare		;		&& !sharing)
 12394                                  ;	JZ	short lru5		;	  else
 12395                                  ;ENDIF
 12396                                  ;
 12397                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12398                                  ; current minimum.
 12399                                  ;
 12400                                  ;lru35:
 12401                                  ;	;mov	dx,[es:di+17h]
 12402                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12403                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12404                                  ;	JB	short lru5
 12405                                  ;	CMP	DX,BX
 12406                                  ;	JAE	short lru5		;	      age[i] < min) {
 12407                                  ;
 12408                                  ; entry is new minimum.  Remember his age.
 12409                                  ;
 12410                                  ;	mov	bx,DX			;	      min = age[i];
 12411                                  ;	mov	si,di			;	      pos = i;
 12412                                  ;
 12413                                  ; End of loop.	gp back for more
 12414                                  ;
 12415                                  ;lru5:
 12416                                  ;	;add	di,53
 12417                                  ;	add	di,SF_ENTRY.size
 12418                                  ;	loop	lru2			;	      }
 12419                                  ;
 12420                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12421                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12422                                  ; complete.  Go find LRU.
 12423                                  ;
 12424                                  ;lru6:	
 12425                                  ;	cmp	si,-1			; position not -1?
 12426                                  ;	jz	short lru75		; no, done with everything
 12427                                  ;	lea	ax,[bx+1]		; set new threshold age
 12428                                  ;	jmp	short lru1		; go and loop for more
 12429                                  ;lru65:	
 12430                                  ;	stc
 12431                                  ;	jmp	short LRUDead		;	  return -1;
 12432                                  ;
 12433                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12434                                  ; network entry. We now make a second pass through to find the LRU entry
 12435                                  ; that is local-no-share or has age >= AX
 12436                                  ;
 12437                                  ;lru75:
 12438                                  ;	mov	bx,-1			; min = 0xffff;
 12439                                  ;	mov	si,bx			; pos = 0xffff;
 12440                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12441                                  ;	;mov	cx,[es:di+4]
 12442                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12443                                  ;	;lea	di,[di+6]
 12444                                  ;	LEA	DI,[DI+SFT.SFTable]
 12445                                  ;
 12446                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12447                                  ; then check for lru.
 12448                                  ;
 12449                                  ;lru8:
 12450                                  ;	;test	word [es:di+5],8000h
 12451                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12452                                  ;	jnz	short lru85		; is for network, go check age
 12453                                  ;	call	CheckShare		; sharer here?
 12454                                  ;	jz	short lru86		; no, go check lru
 12455                                  ;
 12456                                  ; Network or sharer.  Check age
 12457                                  ;
 12458                                  ;lru85:
 12459                                  ;	;cmp	[es:di+17h],ax
 12460                                  ;	cmp	[es:di+sf_OpenAge],ax
 12461                                  ;	jb	short lru9		; age is before threshold, skip it
 12462                                  ;
 12463                                  ; Check LRU
 12464                                  ;
 12465                                  ;lru86:
 12466                                  ;	;cmp	[es:di+15h],bx
 12467                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12468                                  ;	jae	short lru9		; no, skip this
 12469                                  ;	mov	si,di			; remember position
 12470                                  ;	;mov	bx,[es:di+15h]
 12471                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12472                                  ;
 12473                                  ; Done with this entry, go back for more.
 12474                                  ;
 12475                                  ;lru9:
 12476                                  ;	;add	di, 53
 12477                                  ;	add	di,SF_ENTRY.size
 12478                                  ;	loop	lru8
 12479                                  ;
 12480                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12481                                  ; out. The conditions here are:
 12482                                  ;
 12483                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12484                                  ;
 12485                                  ;lru10:
 12486                                  ;	cmp	si,-1			; if no one f
 12487                                  ;	jz	short lru65		;     return -1;
 12488                                  ;lru11:
 12489                                  ;	mov	di,si
 12490                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12491                                  ;	MOV	[CS:THISSFT+2],ES
 12492                                  ;
 12493                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12494                                  ; is 0.
 12495                                  ;
 12496                                  ;	;test	word [es:di+5],8000h
 12497                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12498                                  ;	JNZ	short LRUClose
 12499                                  ;IF INSTALLED
 12500                                  ;	call	CheckShare
 12501                                  ;	JZ	short LRUDone
 12502                                  ;ENDIF
 12503                                  ;
 12504                                  ; Repeat close until ref count is 0
 12505                                  ;
 12506                                  ;LRUClose:
 12507                                  ;	push	ss
 12508                                  ;	pop	ds
 12509                                  ;	LES	DI,[THISSFT]
 12510                                  ;	cmp     word [es:di],0
 12511                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12512                                  ;	JZ	short LRUDone 		; nope, all done
 12513                                  ;	call	DOS_CLOSE
 12514                                  ;	jnc	short LRUClose		; no error => clean up
 12515                                  ;	;cmp	al,6
 12516                                  ;	cmp	al,error_invalid_handle
 12517                                  ;	jz	short LRUClose
 12518                                  ;	stc
 12519                                  ;	JMP	short LRUDead
 12520                                  ;LRUDone:
 12521                                  ;	XOR	AL,AL
 12522                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12523                                  ;
 12524                                  ;LRUDead:
 12525                                  ;	call	restore_world
 12526                                  ;	LES     DI,[CS:THISSFT]
 12527                                  ;	jnc	short LRUFCB_retn
 12528                                  ;LRUFCB_err:
 12529                                  ;	; mov	al, 23h	
 12530                                  ;	MOV	AL,error_FCB_unavailable
 12531                                  ;LRUFCB_retn:	
 12532                                  ;	retn:
 12533                                  ;
 12534                                  ;ENDIF	; LRUFCB has been rewritten below.
 12535                                  
 12536                                  ; 17/05/2019 - Retro DOS v4.0
 12537                                  ; LRUFCB for MSDOS 6.0 !
 12538                                  ;----------------------------------------------------------------------------
 12539                                  ;
 12540                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12541                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12542                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12543                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12544                                  ; optimize regeneration operations by keeping track of the current local
 12545                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12546                                  ; local SFT in the SFT Block.
 12547                                  ;
 12548                                  ; Inputs: al = 0 => Regenerate SFT operation
 12549                                  ;	    = 1 => Allocate new SFT for Open/Create
 12550                                  ;
 12551                                  ; Outputs: Carry clear
 12552                                  ;	 	es:di = Address of allocated SFT
 12553                                  ;	  	ThisSFT = Address of allocated SFT
 12554                                  ;
 12555                                  ;	  carry set if closes of net/Share files failed 
 12556                                  ;		al = error_FCB_unavailable
 12557                                  ;
 12558                                  ; Registers affected: None
 12559                                  ;
 12560                                  ;----------------------------------------------------------------------------
 12561                                  
 12562                                  ;LruFCB	PROC	NEAR
 12563                                  LRUFCB:
 12564                                  	; 17/05/2019 - Retro DOS v4.0
 12565                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12566                                  
 12567                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12568                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12569                                  
 12570                                  	; 20/01/2024
 12571                                  
 12572 00001961 06                      	push	es	; * (MSDOS 6.21)
 12573                                  	
 12574 00001962 E8FDEA                  	call	save_world
 12575                                  	
 12576                                  	;getdseg <ds>		;ds = DOSDATA
 12577 00001965 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12578                                  
 12579 0000196A 08C0                    	or	al,al		;Check if regenerate allocation
 12580 0000196C 7516                    	jnz	short lru1	;Try to find SFT to use
 12581                                  
 12582                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12583                                  	; local SFT, just return that SFT to reuse
 12584                                  
 12585                                  	; 20/01/2024
 12586                                  	;mov	di,[LocalSFT]
 12587                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12588                                  	;jz	short lru1	;invalid local SFT, find one
 12589                                  
 12590                                  	; We have found a valid local SFT. Recycle this SFT
 12591                                  
 12592 0000196E C43E[4410]              	les	di,[LocalSFT]
 12593                                  
 12594                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12595 00001972 8CC1                    	mov	cx,es
 12596 00001974 09F9                    	or	cx,di		; is address == 0?
 12597 00001976 740C                    	jz	short lru1	; invalid local SFT, find one
 12598                                  
 12599                                  gotlocalSFT:
 12600 00001978 893E[9E05]              	mov	[THISSFT],di
 12601 0000197C 8C06[A005]              	mov	[THISSFT+2],es
 12602 00001980 F8                      	clc
 12603 00001981 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12604                                  
 12605                                  lru1:
 12606 00001984 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12607                                  	;mov	cx,[es:di+4]
 12608 00001988 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12609                                  	;lea	di,[di+6]
 12610 0000198C 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12611                                  
 12612                                  	; We scan through all the SFTs scanning for a free one. It also 
 12613                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12614                                  	; bx = min. LRU for local SFTs
 12615                                  	; si = pos. of local SFT with min. LRU
 12616                                  	; dx = min. LRU for net/Share SFTs
 12617                                  	; bp = pos. of net/Share SFT with min. LRU
 12618                                  
 12619 0000198F BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12620 00001992 89DE                    	mov	si,bx
 12621 00001994 89DA                    	mov	dx,bx
 12622 00001996 89DD                    	mov	bp,bx
 12623                                  
 12624                                  findSFT:
 12625                                  	;See if this SFT is a free one. If so, return it
 12626 00001998 26830D00                	or	word [es:di],0
 12627                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12628 0000199C 744C                    	jz	short gotSFT	;yes, SFT is free
 12629                                  	;;cmp	word [es:di],-1
 12630                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12631 0000199E 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12632 000019A2 7446                    	jz	short gotSFT	;no, can use it
 12633                                  
 12634                                  	; Check if this SFT is local and store its address in LocalSFT. Can be
 12635                                  	; used for a later regen.
 12636                                  
 12637                                  	; 16/12/2022
 12638                                  	; 08/11/2022
 12639                                  	;test	byte [es:di+6],80h
 12640 000019A4 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12641                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12642                                  	;;test	word [es:di+5],8000h
 12643                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12644 000019A9 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12645                                  
 12646                                  ;IF installed
 12647 000019AB E87D59                  	call	CheckShare	;Share present?
 12648                                  ;ENDIF
 12649 000019AE 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12650                                  
 12651                                  	;Local SFT, register its address
 12652                                  
 12653                                  	; !!HACK!!!
 12654                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12655                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12656                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12657                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12658                                  	; out the code that previously existed at label 'gotSFT'
 12659                                  
 12660                                  hackpoint:
 12661 000019B0 893E[4410]              	mov	[LocalSFT],di
 12662 000019B4 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12663                                  
 12664 000019B8 08C0                    	or	al,al		;Is operation = REGEN?
 12665 000019BA 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12666                                  
 12667                                  	;Get LRU for local files
 12668                                  	
 12669                                  	;cmp	[es:di+15h],bx
 12670 000019BC 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12671 000019C0 7306                    	jae	short lru4	;no, skip 
 12672                                  
 12673                                  	;mov	bx,[es:di+15h]
 12674 000019C2 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12675 000019C6 89FE                    	mov	si,di		;store SFT position
 12676                                  lru4:
 12677                                  	;add	di,59
 12678 000019C8 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12679 000019CB E2CB                    	loop	findSFT
 12680                                  	
 12681                                  	; 20/01/2024
 12682 000019CD 49                      	dec	cx ; -1
 12683                                  
 12684                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12685                                  	; available, we will reuse it instead of net/Share LRU
 12686                                  
 12687 000019CE 89F7                    	mov	di,si
 12688                                  	;cmp	si,-1		;local SFT available?
 12689 000019D0 39CE                    	cmp	si,cx ; 20/01/2024
 12690 000019D2 7516                    	jnz	short gotSFT	;yes, return it
 12691                                  
 12692                                  	;No local SFT, see if we got a net/Share SFT
 12693                                  
 12694 000019D4 89EF                    	mov	di,bp
 12695                                  
 12696 000019D6 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12697                                  	;cmp	bp,-1		;net/Share SFT available?
 12698 000019D8 752D                    	jnz	short gotnetSFT	;yes, return it
 12699                                  noSFT:
 12700                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12701                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12702                                  	; count is not maintained properly.
 12703                                  
 12704 000019DA EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12705                                  
 12706                                  	; Handle the LRU for net/Share SFTs
 12707                                  lru5:
 12708                                  	;cmp	[es:di+15h],dx
 12709 000019DC 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12710 000019E0 73E6                    	jae	short lru4	;no, skip
 12711                                  
 12712                                  	;mov	dx,[es:di+15h]
 12713 000019E2 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12714                                  
 12715 000019E6 89FD                    	mov	bp,di		;store SFT position
 12716 000019E8 EBDE                    	jmp	short lru4	;continue with next SFT
 12717                                  
 12718                                  gotSFT:
 12719 000019EA 08C0                    	or	al,al
 12720 000019EC 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12721                                  
 12722                                  	; HACK!!!
 12723                                  	; The code here differs from the code at 'hackpoint' only in the
 12724                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12725                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12726                                  	; has been commented out below and replaced by the code just above.
 12727                                  
 12728                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12729                                  ;
 12730                                  ;	or	al,al		  ;Regen?
 12731                                  ;	jnz	short notlocaluse ;yes, register it and return
 12732                                  ;
 12733                                  ;Register this SFT as a local one
 12734                                  ;
 12735                                  ;	mov	[LocalSFT],di
 12736                                  ;	mov	[LocalSFT+2],es
 12737                                  ;	jmp	gotlocalSFT	;return to caller
 12738                                  ;
 12739                                  ;notlocaluse:
 12740                                  
 12741                                  	; The caller is probably going to use this SFT for a net/Share file.
 12742                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12743                                  	; does not really know whether it is a local file or not. We
 12744                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12745                                  	; registered as a local SFT that can be recycled.
 12746                                  
 12747 000019EE 8CC0                    	mov	ax,es
 12748 000019F0 393E[4410]              	cmp	[LocalSFT],di		;Offset same?
 12749 000019F4 750E                    	jne	short notinvalid
 12750 000019F6 3906[4610]              	cmp	[LocalSFT+2],ax		;Segments same?
 12751                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12752                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12753 000019FA 7508                    	jne	short notinvalid
 12754                                  zerolocalSFT:	
 12755 000019FC 31C0                    	xor	ax,ax ; 0
 12756 000019FE A3[4410]                	mov	[LocalSFT],ax
 12757 00001A01 A3[4610]                	mov	[LocalSFT+2],ax
 12758                                  	
 12759                                  notinvalid:
 12760 00001A04 E971FF                  	jmp	gotlocalSFT
 12761                                  
 12762                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12763                                  	; Invalidate this variable i.e LocalSFT = NULL
 12764                                  
 12765                                  ;zerolocalSFT:
 12766                                  	;xor	ax,ax ; 0
 12767                                  	;mov	[LocalSFT],ax
 12768                                  	;mov	[LocalSFT+2],ax
 12769                                  	;
 12770                                  	;jmp	gotlocalSFT
 12771                                  
 12772                                  gotnetSFT:
 12773                                  	; We have an SFT that is currently net/Share. If it is going to be
 12774                                  	; used for a regen, we know it has to be a local SFT. Update the
 12775                                  	; LocalSFT variable
 12776                                  
 12777 00001A07 08C0                    	or	al,al
 12778 00001A09 7508                    	jnz	short closenet
 12779                                  
 12780 00001A0B 893E[4410]              	mov	[LocalSFT],di
 12781 00001A0F 8C06[4610]              	mov	[LocalSFT+2],es	;store local SFT address
 12782                                  closenet:
 12783 00001A13 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12784 00001A17 8C06[A005]              	mov	[THISSFT+2],es
 12785                                  
 12786                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12787                                  	; count is 0.
 12788                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12789                                  	; recycled -- no need to check for this.
 12790                                  
 12791                                  LRUClose:
 12792 00001A1B 26833D00                	cmp	word [es:di],0
 12793                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12794 00001A1F 740C                    	jz	short LRUDone	; nope, all done
 12795                                  
 12796 00001A21 E80315                  	call	DOS_CLOSE
 12797 00001A24 73F5                    	jnc	short LRUClose	; no error => clean up
 12798                                  
 12799                                  	; Bugbug: I dont know why we are trying to close after we get an
 12800                                  	; error closing. Seems like we could have a potential infinite loop
 12801                                  	; here. This has to be verified.
 12802                                  
 12803 00001A26 3C06                    	cmp	al,error_invalid_handle ; 6
 12804 00001A28 74F1                    	je	short LRUClose
 12805                                  errorbadSFT:
 12806 00001A2A F9                      	stc
 12807 00001A2B EB05                    	JMP	short LRUDead
 12808                                  LRUDone:
 12809 00001A2D 30C0                    	XOR	AL,AL
 12810 00001A2F E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12811                                  
 12812                                  LRUDead:
 12813 00001A32 E816EA                  	call	restore_world		; use macro
 12814                                  	
 12815 00001A35 07                      	pop	es ; * (MSDOS 6.21)
 12816                                  
 12817                                  	;getdseg <es>
 12818 00001A36 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12819 00001A3B 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12820                                  
 12821                                  	;;retnc
 12822                                  	;jc	short LruFCB_err
 12823                                  	;retn
 12824                                  
 12825                                  	; 16/12/2022
 12826                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12827 00001A40 7302                    	jnc	short LruFCB_retn
 12828                                  	;jc	short LruFCB_err
 12829                                  	;retn
 12830                                  		
 12831                                  LruFCB_err:
 12832 00001A42 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12833                                  LruFCB_retn:
 12834 00001A44 C3                      	retn
 12835                                  	
 12836                                  ;LruFCB	ENDP
 12837                                  
 12838                                  ; 17/05/2019 - Retro DOS v4.0
 12839                                  
 12840                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12841                                  
 12842                                  ; --------------------------------------------------------------------------
 12843                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12844                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12845                                  ; to copy the name to different destinations
 12846                                  ;
 12847                                  ; Inputs: ds:si = source string
 12848                                  ;	 es:di = destination string
 12849                                  ;	 cx = length of string
 12850                                  ;
 12851                                  ; Outputs: String copied to destination
 12852                                  ;
 12853                                  ; Registers affected: cx,di,si
 12854                                  ; --------------------------------------------------------------------------
 12855                                  
 12856                                  RegenCopyName:
 12857                                  CopyName:
 12858 00001A45 AC                      	lodsb			;load character
 12859 00001A46 E8F035                  	call	UCase		; convert char to upper case
 12860                                  StuffChar2:
 12861 00001A49 AA                      	STOSB			;store converted character
 12862 00001A4A E2F9                    	LOOP	CopyName	;
 12863                                  DoneName:
 12864 00001A4C C3                      	retn
 12865                                  
 12866                                  ; --------------------------------------------------------------------------
 12867                                  
 12868                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12869                                  FCBRegen:
 12870                                  	; called from SFTFromFCB. SS already DOSDATA
 12871                                  
 12872                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12873                                  	; we do not fill, size we do no fill, position we do not fill,
 12874                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12875                                  
 12876                                  	;mov	al,[si+19h]
 12877 00001A4D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12878                                  
 12879                                  	; We discriminate based on the first two bits in the reserved field.
 12880                                  	
 12881                                  	;test	al,80h
 12882 00001A50 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12883 00001A52 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12884                                  
 12885                                  	; The FCB is for a network or a sharing based system. At this point 
 12886                                  	; we have already closed the SFT for this guy and reconnection is 
 12887                                  	; impossible.
 12888                                  	;
 12889                                  	; Remember that he may have given us a FCB with bogus information in
 12890                                  	; it. Check to see if sharing is present or if the redir is present.
 12891                                  	; If either is around, presume that we have cycled out the FCB and 
 12892                                  	; give the hard error. Otherwise, just return with carry set.
 12893                                  
 12894 00001A54 E8D458                  	call	CheckShare		; test for sharer
 12895 00001A57 7509                    	JNZ	short RegenFail		; yep, fail this.
 12896                                  	
 12897                                  	;mov	ax,1100h
 12898 00001A59 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12899 00001A5C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12900                                  			; Return: AL = 00h  not installed, OK to install
 12901                                  			; 01h  not installed, not OK to install
 12902                                  			; FFh  installed
 12903 00001A5E 08C0                    	OR	AL,AL			; is it there?
 12904 00001A60 740C                    	JZ	short RegenDead		; no, just fail the operation
 12905                                  RegenFail:
 12906                                  	; 17/05/2019 - Retro DOS v4.0
 12907                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12908 00001A62 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12909                                  
 12910                                  	;cmp	ah,10h
 12911 00001A66 80FC10                  	cmp	AH,FCB_CLOSE
 12912 00001A69 7403                    	jz	short RegenDead
 12913 00001A6B E88B01                  	call	FCBHardErr		; massive hard error.
 12914                                  RegenDead:
 12915 00001A6E F9                      	STC				; carry set
 12916                                  FCBRegen_retn:
 12917 00001A6F C3                      	retn
 12918                                  
 12919                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12920                                  	; so fail the operation.
 12921                                  
 12922                                  RegenNoSharing:
 12923 00001A70 E8B858                  	call	CheckShare		; Sharing around?
 12924 00001A73 75ED                    	JNZ	short RegenFail
 12925                                  	
 12926                                  	; Find an SFT for this guy.
 12927                                  	
 12928                                  	; 17/05/2019 - Retro DOS v4.0
 12929                                  
 12930                                  	; MSDOS 3.3
 12931                                  	;call	LRUFCB
 12932                                  	;jc	short FCBRegen_retn
 12933                                  	
 12934                                  	; MSDOS 6.0
 12935 00001A75 50                      	push	ax
 12936 00001A76 B000                    	mov	al,0			;indicate it is a regen operation
 12937 00001A78 E8E6FE                  	call	LRUFCB
 12938 00001A7B 58                      	pop	ax
 12939 00001A7C 72F1                    	jc	short FCBRegen_retn
 12940                                  
 12941                                  	;mov	word [es:di+2],8002h
 12942 00001A7E 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12943 00001A84 243F                    	AND	AL,3Fh			; get drive number for flags
 12944 00001A86 98                      	CBW
 12945                                  	;or	ax,4000h
 12946 00001A87 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12947                                  
 12948                                  	; The bits field consists of the upper two bits (dirty and device) 
 12949                                  	; from the SFT and the low 4 bits from the open mode.
 12950                                  
 12951                                  	;mov	cl,[si+1Ah]
 12952 00001A8A 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12953 00001A8D 88CD                    	MOV	CH,CL
 12954 00001A8F 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12955 00001A92 08E8                    	OR	AL,CH
 12956                                  	;and	cl,0Fh
 12957 00001A94 80E10F                  	AND	CL,access_mask		; get the mode bits
 12958                                  	;mov	[es:di+2],cl
 12959 00001A97 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12960                                  	;mov	[es:di+5],ax
 12961 00001A9B 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12962                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12963 00001A9F 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12964                                  	;mov	[es:di+31h],ax
 12965 00001AA3 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12966 00001AA7 1E                      	push	ds
 12967 00001AA8 56                      	push	si
 12968 00001AA9 06                      	push	es
 12969 00001AAA 57                      	push	di
 12970 00001AAB 16                      	push	ss
 12971 00001AAC 07                      	pop	es
 12972 00001AAD BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12973                                  
 12974 00001AB0 B90800                  	MOV	CX,8
 12975 00001AB3 46                      	INC	SI			; Skip past drive byte to name in FCB
 12976                                  
 12977                                  	; MSDOS 3.3
 12978                                  ;RegenCopyName:
 12979                                  	;lodsb
 12980                                  	;call	UCase
 12981                                  	;stosb
 12982                                  	;loop	RegenCopyName
 12983                                  
 12984                                  	; MSDOS 6.0
 12985 00001AB4 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12986                                  
 12987 00001AB7 16                      	push	ss	; SS is DOSDATA
 12988 00001AB8 1F                      	pop	ds
 12989                                  
 12990                                  	;mov	byte [ATTRIB],16h
 12991 00001AB9 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12992                                  					; Must set this to something interesting
 12993                                  					; to call DEVNAME.
 12994 00001ABE E80627                  	call	DEVNAME 		; check for device
 12995 00001AC1 5E                      	pop	si
 12996 00001AC2 07                      	pop	es
 12997 00001AC3 5E                      	pop	si
 12998 00001AC4 1F                      	pop	ds
 12999 00001AC5 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 13000                                  
 13001                                  	; Device found. We can ignore disk-specific info
 13002                                  
 13003                                  	;mov	[es:di+5],bh
 13004 00001AC7 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 13005                                  	;mov	byte [es:di+4],0
 13006 00001ACB 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 13007                                  					; SS override
 13008                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 13009 00001AD0 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 13010                                  	;mov	[es:di+7],si
 13011 00001AD5 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13012                                  	;mov	[es:di+9],ds
 13013 00001AD9 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13014 00001ADD C3                      	retn				; carry is clear
 13015                                  
 13016                                  RegenDeadJ:
 13017 00001ADE EB8E                    	JMP	short RegenDead
 13018                                  
 13019                                  	; File found. Just copy in the remaining pieces.
 13020                                  
 13021                                  RegenFileNoSharing:
 13022                                  	;mov	ax,[es:di+5]
 13023 00001AE0 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13024 00001AE4 83E03F                  	AND	AX,03Fh
 13025 00001AE7 1E                      	push	ds
 13026 00001AE8 56                      	push	si
 13027 00001AE9 E8CC4E                  	call	FIND_DPB
 13028                                  	;mov	[es:di+7],si
 13029 00001AEC 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13030                                  	;mov	[es:di+9],ds
 13031 00001AF0 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13032 00001AF4 5E                      	pop	si
 13033 00001AF5 1F                      	pop	ds
 13034 00001AF6 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13035                                  					; indicator was bogus
 13036                                  	;mov	ax,[si+1Dh]
 13037 00001AF8 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13038                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13039                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13040 00001AFB 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13041                                  
 13042                                  	; MSDOS 6.0
 13043                                  
 13044                                  	; SR;
 13045                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13046                                  	; number
 13047                                  
 13048                                  	;mov	al,[si+18h]
 13049 00001AFF 8A4418                  	mov	al,[si+fcb_sfn]
 13050 00001B02 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13051 00001B04 88C4                    	mov	ah,al
 13052 00001B06 D0C4                    	rol	ah,1
 13053 00001B08 D0E8                    	shr	al,1
 13054 00001B0A 08E0                    	or	al,ah
 13055 00001B0C 243F                    	and	al,03Fh		;mask off unused bits
 13056                                  	;mov	[es:di+4],al
 13057 00001B0E 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13058                                  
 13059                                  	; SR;
 13060                                  	; Update the higher word of the directory sector from the FCB
 13061                                  
 13062                                  	;;mov	al,[si+18h]
 13063 00001B12 8A4418                  	mov	al,[si+fcb_sfn]
 13064 00001B15 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13065 00001B17 28E4                    	sub	ah,ah
 13066                                  	;mov	[es:di+1Dh],ax
 13067 00001B19 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13068                                  
 13069                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13070                                  	;mov	ax,[si+1Bh]
 13071 00001B1D 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13072                                  	;mov	[es:di+0Bh],ax
 13073 00001B20 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13074                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13075                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13076 00001B24 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13077                                  	;mov	al,[si+1Fh]
 13078 00001B28 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13079                                  	;mov  	[es:di+1Fh],al
 13080 00001B2B 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13081                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13082 00001B2F 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13083                                  					; Existing FCB entries would be
 13084                                  					; flushed unnecessarily because of
 13085                                  					; check in CheckFCB of the ref_count.
 13086                                  					; July 22/85 - BAS
 13087                                  	;lea	si,[si+1]
 13088 00001B32 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13089                                  	;lea	di,[di+20h]
 13090 00001B35 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13091                                  	;mov	cx,11
 13092 00001B38 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13093                                  	
 13094                                  	; MSDOS 6.0
 13095 00001B3B E807FF                  	call	RegenCopyName	;copy name to SFT 
 13096                                  	
 13097                                  	; MSDOS 3.3
 13098                                  ;RegenCopyName2:
 13099                                  	;lodsb
 13100                                  	;call    UCase
 13101                                  	;stosb
 13102                                  	;loop    RegenCopyName2
 13103                                  
 13104 00001B3E F8                      	clc
 13105 00001B3F C3                      	retn
 13106                                  
 13107                                  ; 17/05/2019 - Retro DOS v4.0
 13108                                  
 13109                                  ;**	BlastSFT - FIll SFT with Garbage
 13110                                  ; --------------------------------------------------------------------------
 13111                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13112                                  ;	various garbage values to put into the SFT.  I don't know why,
 13113                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13114                                  ;	necessary to show that the SFT is free after filling it.
 13115                                  ;
 13116                                  ;	ENTRY	(es:di) = address of SFT
 13117                                  ;		(al) = fill character
 13118                                  ;	EXIT	(ax) = -1
 13119                                  ;		'C' clear
 13120                                  ;	USES	AX, CX, Flags
 13121                                  
 13122                                  BlastSFT:
 13123 00001B40 57                      	push	di
 13124                                  	;mov	cx,53 ; MSDOS 3.3
 13125                                  	;mov	cx,59 ; MSDOS 6.0
 13126 00001B41 B93B00                  	mov	cx,SF_ENTRY.size
 13127 00001B44 F3AA                    	rep	stosb
 13128 00001B46 5F                      	pop	di
 13129 00001B47 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13130 00001B49 268905                  	mov	[es:di],ax
 13131                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13132                                  	;mov	[es:di+15h],ax
 13133 00001B4C 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13134 00001B50 48                      	dec	ax	; -1					    ;
 13135                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13136 00001B51 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13137                                  BlastSFT_retn:
 13138 00001B55 C3                      	retn				; return with 'C' clear     ;
 13139                                  
 13140                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13141                                  ; --------------------------------------------------------------------------
 13142                                  ;
 13143                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13144                                  ;   regenerated.
 13145                                  ;
 13146                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13147                                  ;		AL is SFT index
 13148                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13149                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13150                                  ;   Registers modified: AX and BX
 13151                                  ;
 13152                                  ; --------------------------------------------------------------------------
 13153                                  
 13154                                  	; 21/01/2024
 13155                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13156                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13157                                  CheckFCB:
 13158                                  		
 13159                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13160                                  
 13161                                  	; MSDOS 3.3
 13162                                  
 13163                                  	; LES	DI,[CS:SFTFCB]
 13164                                  
 13165                                  	; MSDOS 6.0
 13166                                  	
 13167                                  	; SR;
 13168                                  	; We check if the given FCB is for a local file. If so, we return a 
 13169                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13170                                  
 13171                                  	;test	byte [si+19h],0C0h
 13172 00001B56 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13173 00001B5A 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13174 00001B5C 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13175                                  
 13176                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13177                                  	;cmp	[es:di+4],al
 13178 00001B61 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13179 00001B65 723C                    	JC	short BadSFT
 13180                                  	;;mov	bl,53 ; MSDOS 3.3
 13181                                  	;mov	bl,59 ; MSDOS 6.0
 13182 00001B67 B33B                    	MOV	BL,SF_ENTRY.size
 13183 00001B69 F6E3                    	MUL	BL
 13184                                  	;lea	di,[di+6]
 13185 00001B6B 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13186 00001B6E 01C7                    	ADD	DI,AX
 13187                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13188 00001B70 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13189                                  	;cmp	[es:di+31h],ax
 13190 00001B74 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13191 00001B78 7529                    	JNZ	short BadSFT		; must match process
 13192 00001B7A 26833D00                	cmp	word [es:di],0
 13193                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13194 00001B7E 7423                    	JZ	short BadSFT		; must also be in use
 13195                                  	;mov	al,[si+19h]
 13196 00001B80 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13197                                  	;test	al,80h
 13198 00001B83 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13199 00001B85 7428                    	JZ	short CheckNoShare	; No. try local or device
 13200                                  
 13201                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13202                                  	; FCBSHARE is a superset of FCBNETWORK.
 13203                                  
 13204 00001B87 50                      	PUSH	AX
 13205                                  	;and	al,0C0h
 13206 00001B88 24C0                    	AND	AL,FCBMASK
 13207                                  	;cmp	al,0C0h
 13208 00001B8A 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13209 00001B8C 58                      	POP	AX
 13210 00001B8D 7516                    	JNZ	short CheckNet		; yes
 13211                                  ;
 13212                                  ;----- In share support -----
 13213                                  ;
 13214                                  	;call	far [cs:JShare+(11*4)]
 13215 00001B8F 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13216 00001B94 720D                    	JC	short BadSFT
 13217                                  
 13218                                  ; 21/01/2024
 13219                                  %if 0
 13220                                  	JMP	SHORT CheckD
 13221                                  ;
 13222                                  ;----- End in share support -----
 13223                                  ;
 13224                                  	; 09/11/2022
 13225                                  	; (There is not any procedure/sub
 13226                                  	;  which calls or jumps to CheckFirClus here)
 13227                                  	;;;
 13228                                  CheckFirClus:
 13229                                  	;cmp     bx,[es:di+0Bh]
 13230                                  	; 07/12/2022
 13231                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13232                                  	JNZ	short BadSFT
 13233                                  	;;;
 13234                                  %endif
 13235                                  
 13236                                  CheckD: 
 13237 00001B96 243F                    	AND	AL,3Fh
 13238                                  	;mov	ah,[es:di+5]
 13239 00001B98 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13240 00001B9C 80E43F                  	AND	AH,3Fh
 13241 00001B9F 38C4                    	CMP	AH,AL
 13242                                  	; 16/12/2022
 13243 00001BA1 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13244                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13245                                  	;jnz	short BadSFT
 13246                                  ;CheckD_retn:
 13247                                  	;retn
 13248                                  BadSFT: 
 13249 00001BA3 F9                      	STC
 13250 00001BA4 C3                      	retn
 13251                                  				
 13252                                  CheckNet:
 13253                                  	; 17/05/2019 - Retro DOS v4.0
 13254                                  	
 13255                                  ;----- In net support -----
 13256                                  
 13257                                  	; MSDOS 3.3
 13258                                  	;;mov	ax,[si+1Ah]
 13259                                  	;mov	ax,[si+fcb_net_handle]
 13260                                  	;;cmp	ax,[es:di+1Dh]
 13261                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13262                                  	;jnz	short BadSFT
 13263                                  	;;cmp	ax,[es:di+19h]
 13264                                  	;cmp	ax,[ES:DI+sf_netid]
 13265                                  	;jnz     short BadSFT
 13266                                  	;;mov	ax,[si+1Eh]
 13267                                  	;mov	ax,[si+fcb_l_attr]
 13268                                  	;;cmp	ax,[es:di+1Bh]
 13269                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13270                                  	;jnz     short BadSFT
 13271                                  
 13272                                  	; MSDOS 6.0
 13273                                  	;mov	ax,[si+1Ch]
 13274 00001BA5 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13275                                  	; 09/11/2022
 13276                                  	;cmp	ax,[es:di+0Bh] 
 13277 00001BA8 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13278 00001BAC 75F5                    	JNZ	short BadSFT
 13279                                  
 13280                                  ;----- END In net support -----
 13281                                  
 13282                                  CheckNet_retn:
 13283 00001BAE C3                      	retn
 13284                                  
 13285                                  CheckNoShare:
 13286                                  
 13287                                  ; 16/12/2022
 13288                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13289                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13290                                  ;	;test	al,40h
 13291                                  ;	test	AL,FCBDEVICE		; Device?
 13292                                  ;	;jnz	short $+2 ; 09/11/2022
 13293                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13294                                  
 13295                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13296                                  	;;mov	bx,[si+1Dh]
 13297                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13298                                  	;;cmp	bx,[es:di+1Dh]
 13299                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13300                                  	;jnz	short BadSFT
 13301                                  	;;mov	bl,[si+1Fh]
 13302                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13303                                  	;;cmp	bl,[es:di+1Fh]
 13304                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13305                                  	;jnz	short BadSFT
 13306                                  	;;mov	bl,[si+1Ah]
 13307                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13308                                  	;;mov	bh,[es:di+5]
 13309                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13310                                  	;xor	bh,bl
 13311                                  	;and	bh,0C0h
 13312                                  	;jnz	short BadSFT
 13313                                  	;;xor	bl,[es:di+2]
 13314                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13315                                  	;and	bl,0Fh
 13316                                  	;jnz	short BadSFT
 13317                                  	;push	di
 13318                                  	;push	si
 13319                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13320                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13321                                  	;;lea	si,[si+1]
 13322                                  	;LEA	SI,[SI+SYS_FCB.name]
 13323                                  	;;mov	cx,11
 13324                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13325                                  	;repe	cmpsb
 13326                                  	;pop	si
 13327                                  	;pop	di
 13328                                  	;jnz	short BadSFT
 13329                                  	;;mov	bx,[si+1Bh]
 13330                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13331                                  	;jmp	short CheckFirClus
 13332                                  
 13333                                  	; MSDOS 6.0
 13334                                  
 13335                                  	; SR;
 13336                                  	; The code below to match a local FCB with its SFT can no longer be
 13337                                  	; used. We just return a no-match status. This check is done right
 13338                                  	; at the top.
 13339                                  
 13340                                  CheckNoShareDev:
 13341                                  	;mov	bx,[si+1Ah]
 13342 00001BAF 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13343                                  	;cmp	bx,[es:di+7]
 13344 00001BB2 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13345 00001BB6 75EB                    	JNZ	short BadSFT
 13346                                  	;mov	bx,[si+1Ch]
 13347 00001BB8 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13348                                  	;cmp	bx,[es:di+9]
 13349 00001BBB 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13350 00001BBF 75E2                    	JNZ	short BadSFT
 13351 00001BC1 EBD3                    	JMP	short CheckD
 13352                                  
 13353                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13354                                  ;----------------------------------------------------------------------------
 13355                                  ;
 13356                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13357                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13358                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13359                                  ;	with PID
 13360                                  ;
 13361                                  ;   Inputs:	DS:SI point to FCB
 13362                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13363                                  ;		Carry clear -> OK ES:DI -> SFT
 13364                                  ;		Carry set -> error in ax
 13365                                  ;   Registers modified: ES,DI, AX
 13366                                  ;
 13367                                  ;----------------------------------------------------------------------------
 13368                                  
 13369                                  SFTFromFCB:
 13370                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13371                                  
 13372                                  	; 17/05/2019 - Retro DOS v4.0
 13373                                  
 13374 00001BC3 50                      	push	ax
 13375 00001BC4 53                      	push	bx
 13376                                  	;mov	al,[si+18h]
 13377 00001BC5 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13378 00001BC8 E88BFF                  	call	CheckFCB
 13379 00001BCB 5B                      	pop	bx
 13380 00001BCC 58                      	pop	ax
 13381                                  	;MOV	[CS:THISSFT],DI		; SS override
 13382                                  	;MOV	[CS:THISSFT+2],ES
 13383 00001BCD 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13384 00001BD2 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13385 00001BD7 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13386                                  	
 13387                                  	; 09/11/2022 (MSDOS 5.0)
 13388                                  	; 31/05/2019
 13389 00001BD9 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13390 00001BDA E885E8                  	call	save_world
 13391 00001BDD E86DFE                  	call	FCBRegen
 13392 00001BE0 E868E8                  	call	restore_world		; use macro restore world
 13393 00001BE3 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13394                                  
 13395                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13396 00001BE4 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13397 00001BE8 72C4                    	jc	short CheckNet_retn
 13398                                  
 13399                                  Set_SFT: 
 13400                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13401 00001BEA 36C43E[9E05]            	les	di,[ss:THISSFT]
 13402                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13403 00001BEF 36FF36[3C03]            	push	word [ss:PROC_ID]
 13404                                  	;pop	word [es:di+31h]
 13405 00001BF4 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13406 00001BF8 C3                      	retn				; carry is clear
 13407                                  
 13408                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13409                                  ;----------------------------------------------------------------------------
 13410                                  ;
 13411                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13412                                  ;	unavailable FCB.
 13413                                  ;
 13414                                  ;   Inputs:	none.
 13415                                  ;   Outputs:	none.
 13416                                  ;   Registers modified: all
 13417                                  ;
 13418                                  ;----------------------------------------------------------------------------
 13419                                  
 13420                                  FCBHardErr:
 13421                                  	; 17/05/2019 - Retro DOS v4.0
 13422 00001BF9 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13423                                  	;
 13424                                  	;mov	ax,23h
 13425 00001BFE B82300                  	MOV	AX,error_FCB_unavailable
 13426                                  	;;mov	byte [cs:ALLOWED],8
 13427                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13428 00001C01 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13429                                  	
 13430                                  	;LES	BP,[CS:THISDPB]
 13431 00001C07 26C42E[8A05]            	les	bp,[es:THISDPB]
 13432                                  	
 13433 00001C0C BF0100                  	MOV	DI,1			; Fake some registers
 13434 00001C0F 89F9                    	MOV	CX,DI
 13435                                  	;mov	dx,[es:bp+0Bh]
 13436 00001C11 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13437 00001C15 E8DF36                  	call	HARDERR
 13438 00001C18 F9                      	STC
 13439 00001C19 C3                      	retn
 13440                                  
 13441                                  ;============================================================================
 13442                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13443                                  ;============================================================================
 13444                                  ; 21/07/2018 - Retro DOS v3.0
 13445                                  ; 17/05/2019 - Retro DOS v4.0
 13446                                  
 13447                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13448                                  ;
 13449                                  ;	GetRR
 13450                                  ;	GetExtent
 13451                                  ;	SetExtent
 13452                                  ;	GetExtended
 13453                                  ;	GetRecSize
 13454                                  ;	FCBIO
 13455                                  ;	$FCB_OPEN
 13456                                  ;	$FCB_CREATE
 13457                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13458                                  ;	$FCB_RANDOM_READ_BLOCK
 13459                                  ;	$FCB_SEQ_READ
 13460                                  ;	$FCB_SEQ_WRITE
 13461                                  ;	$FCB_RANDOM_READ
 13462                                  ;	$FCB_RANDOM_WRITE
 13463                                  ;
 13464                                  ;	Revision history:
 13465                                  ;
 13466                                  ;		Created: ARR 4 April 1983
 13467                                  ;			 MZ  6 June  1983 completion of functions
 13468                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13469                                  ;				  times.  Change so successive closes work by
 13470                                  ;				  always returning OK.	Also, detect I/O to
 13471                                  ;				  already closed FCB and return EOF.
 13472                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13473                                  ;				  out of sft into FCB for reconnection
 13474                                  ;
 13475                                  ;	    A000   version 4.00	Jan. 1988
 13476                                  
 13477                                  ; Defintions for FCBOp flags
 13478                                  
 13479                                  RANDOM	equ 2				; random operation
 13480                                  FCBREAD equ 4				; doing a read
 13481                                  BLOCK	equ 8				; doing a block I/O
 13482                                  
 13483                                  ;Break <GetRR - return the random record field in DX:AX>
 13484                                  ;---------------------------------------------------------------------------
 13485                                  ;
 13486                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13487                                  ;	from the FCB pointed to by DS:SI
 13488                                  ;
 13489                                  ;   Inputs:	DS:SI point to an FCB
 13490                                  ;		BX has record size
 13491                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13492                                  ;   Registers modified: none
 13493                                  ;---------------------------------------------------------------------------
 13494                                  
 13495                                  GetRR:
 13496                                  	;mov	ax,[si+21h]
 13497 00001C1A 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13498                                  	;mov	dx,[si+23h]
 13499 00001C1D 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13500 00001C20 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13501 00001C23 7202                    	JB	short GetRRBye
 13502                                  GetExtent_bye:	; 21/01/2024
 13503 00001C25 30F6                    	XOR	DH,DH
 13504                                  GetRRBye:
 13505 00001C27 C3                      	retn
 13506                                  
 13507                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13508                                  ;---------------------------------------------------------------------------
 13509                                  ;
 13510                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13511                                  ;	NR fields in the FCB.
 13512                                  ;
 13513                                  ;   Inputs:	DS:SI - point to FCB
 13514                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13515                                  ;   Registers modified: none
 13516                                  ;---------------------------------------------------------------------------
 13517                                  
 13518                                  GetExtent:
 13519                                  	;mov	al,[si+20h]
 13520 00001C28 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13521                                  	;mov	dx,[si+0Ch]
 13522 00001C2B 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13523 00001C2E D0E0                    	SHL	AL,1
 13524 00001C30 D1EA                    	SHR	DX,1
 13525 00001C32 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13526 00001C34 88D4                    	MOV	AH,DL
 13527 00001C36 88F2                    	MOV	DL,DH
 13528                                  	; 21/01/2024
 13529                                  	;XOR	DH,DH
 13530                                  	;retn
 13531 00001C38 EBEB                    	jmp	short GetExtent_bye
 13532                                  
 13533                                  ;Break <SetExtent - update the extent/NR field>
 13534                                  ;---------------------------------------------------------------------------
 13535                                  ;
 13536                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13537                                  ;	fields
 13538                                  ;
 13539                                  ;   Inputs:	DS:SI point to FCB
 13540                                  ;		DX:AX is a record location in file
 13541                                  ;   Outputs:	Extent/NR fields are filled in
 13542                                  ;   Registers modified: CX
 13543                                  ;---------------------------------------------------------------------------
 13544                                  
 13545                                  SetExtent:
 13546 00001C3A 50                      	push	ax
 13547 00001C3B 52                      	push	dx
 13548 00001C3C 89C1                    	MOV	CX,AX
 13549 00001C3E 247F                    	AND	AL,7FH			; next rec field
 13550                                  	;mov	[si+20h],al
 13551 00001C40 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13552 00001C43 80E180                  	AND	CL,80H			; save upper bit
 13553 00001C46 D1E1                    	SHL	CX,1
 13554 00001C48 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13555 00001C4A 88E8                    	MOV	AL,CH
 13556 00001C4C 88D4                    	MOV	AH,DL
 13557                                  	;mov	[si+0Ch], ax
 13558 00001C4E 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13559 00001C51 5A                      	pop	dx
 13560 00001C52 58                      	pop	ax
 13561 00001C53 C3                      	retn
 13562                                  
 13563                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13564                                  ;---------------------------------------------------------------------------
 13565                                  ;
 13566                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13567                                  ;
 13568                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13569                                  ;   Outputs:	DS:SI point to the FCB part
 13570                                  ;		zeroflag set if not extended fcb
 13571                                  ;   Registers modified: SI
 13572                                  ;---------------------------------------------------------------------------
 13573                                  
 13574                                  GetExtended:
 13575 00001C54 89D6                    	MOV	SI,DX			; point to Something
 13576 00001C56 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13577 00001C59 7503                    	JNZ	short GetBye		; not there
 13578 00001C5B 83C607                  	ADD	SI,7			; point to FCB
 13579                                  GetBye:
 13580 00001C5E 39D6                    	CMP	SI,DX			; set condition codes
 13581                                  getextd_retn:
 13582 00001C60 C3                      	retn
 13583                                  
 13584                                  ;Break <GetRecSize - return in BX the FCB record size>
 13585                                  ;---------------------------------------------------------------------------
 13586                                  ;
 13587                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13588                                  ;
 13589                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13590                                  ;   Outputs:	BX contains the record size
 13591                                  ;   Registers modified: None
 13592                                  ;---------------------------------------------------------------------------
 13593                                  
 13594                                  	; 22/01/2024
 13595                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13596                                  GetRecSize:
 13597                                  	;mov	bx,[si+0Eh]
 13598 00001C61 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13599 00001C64 09DB                    	OR	BX,BX			; is it nul?
 13600                                  	;jz	short getextd_retn
 13601                                  	; 22/01/2024 (BugFix)
 13602 00001C66 75F8                    	jnz	short getextd_retn
 13603                                  	;MOV	BX,128			; use default size
 13604 00001C68 B380                    	mov	bl,128
 13605                                  	;mov	[si+0Eh],bx
 13606 00001C6A 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13607 00001C6D C3                      	retn
 13608                                  
 13609                                  ;BREAK <FCBIO - do internal FCB I/O>
 13610                                  ;---------------------------------------------------------------------------
 13611                                  ;
 13612                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13613                                  ;
 13614                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13615                                  ;		DS:DX point to FCB
 13616                                  ;		CX may have count of number of records to xfer
 13617                                  ;   Outputs:	AL has error code
 13618                                  ;   Registers modified: all
 13619                                  ;---------------------------------------------------------------------------
 13620                                  
 13621                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13622                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13623                                  FCBIO:
 13624                                  
 13625                                  FEOF	EQU	1
 13626                                  FTRIM	EQU	2
 13627                                  
 13628                                  %define	FCBErr	byte [bp-1]  ; byte	
 13629                                  %define	cRec	word [bp-3]  ; word	
 13630                                  ;%define RecPos	word [bp-7]  ; dword
 13631                                  %define RecPosL	word [bp-7]  ; word
 13632                                  %define RecPosH	word [bp-5]  ; word
 13633                                  %define	RecSize	word [bp-9]  ; word
 13634                                  ;%define bPos	word [bp-13] ; dword
 13635                                  %define bPosL	word [bp-13] ; word
 13636                                  %define bPosH	word [bp-11] ; word
 13637                                  %define cByte	word [bp-15] ; word	
 13638                                  %define cResult word [bp-17] ; word	
 13639                                  %define	cRecRes	word [bp-19] ; word
 13640                                  %define	FCBOp	byte [bp-20] ; byte
 13641                                  
 13642                                  	;Enter
 13643                                  
 13644 00001C6E 55                      	push	bp
 13645 00001C6F 89E5                    	mov	bp,sp
 13646 00001C71 83EC14                  	sub	sp,20
 13647                                  	;mov	[bp-20],al
 13648 00001C74 8846EC                  	MOV	FCBOp,AL
 13649                                  	;mov	byte [bp-1],0
 13650 00001C77 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13651 00001C7B E8D6FF                  	call	GetExtended		;   FCB = GetExtended ();
 13652                                  	;test	byte [bp-20],8
 13653 00001C7E F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13654 00001C82 7503                    	JNZ	short GetPos
 13655 00001C84 B90100                  	MOV	CX,1			;	cRec = 1;
 13656                                  GetPos:
 13657                                  	;mov	[bp-3],cx
 13658 00001C87 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13659 00001C8A E89BFF                  	call	GetExtent		;   RecPos = GetExtent ();
 13660 00001C8D E8D1FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13661                                  	;mov	[bp-9],bx
 13662 00001C90 895EF7                  	MOV	RecSize,BX
 13663                                  	;test	byte [bp-20],2
 13664 00001C93 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13665 00001C97 7403                    	JZ	short GetRec
 13666 00001C99 E87EFF                  	call	GetRR			;	RecPos = GetRR ();
 13667                                  GetRec:
 13668                                  	;mov	[bp-7],ax
 13669 00001C9C 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13670                                  	;mov	[bp-5],dx
 13671 00001C9F 8956FB                  	MOV	RecPosH,DX
 13672 00001CA2 E895FF                  	call	SetExtent		;   SetExtent (RecPos);
 13673                                  	;mov	ax,[bp-5]
 13674 00001CA5 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13675 00001CA8 F7E3                    	MUL	BX
 13676 00001CAA 89C7                    	MOV	DI,AX
 13677                                  	;mov	ax,[bp-7]
 13678 00001CAC 8B46F9                  	MOV	AX,RecPosL
 13679 00001CAF F7E3                    	MUL	BX
 13680 00001CB1 01FA                    	ADD	DX,DI
 13681                                  	;mov	[bp-13],ax
 13682 00001CB3 8946F3                  	MOV	bPosL,AX
 13683                                  	;mov	[bp-11],dx
 13684 00001CB6 8956F5                  	MOV	bPosH,DX
 13685                                  	;mov	ax,[bp-3]
 13686 00001CB9 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13687 00001CBC F7E3                    	MUL	BX
 13688                                  	;mov	[bp-15],ax
 13689 00001CBE 8946F1                  	MOV	cByte,AX
 13690                                  
 13691                                  ;hkn; 	SS override
 13692 00001CC1 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13693 00001CC6 83D200                  	ADC	DX,0
 13694 00001CC9 7419                    	JZ	short DoOper
 13695                                  	;mov	byte [bp-1],2
 13696 00001CCB C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13697                                  
 13698                                  ;hkn; 	SS override
 13699 00001CCF 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13700 00001CD3 F7D8                    	NEG	AX
 13701 00001CD5 7501                    	JNZ	short DoDiv
 13702 00001CD7 48                      	DEC	AX
 13703                                  DoDiv:
 13704 00001CD8 31D2                    	XOR	DX,DX
 13705 00001CDA F7F3                    	DIV	BX
 13706                                  	;mov	[bp-3],ax
 13707 00001CDC 8946FD                  	MOV	cRec,AX
 13708 00001CDF F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13709                                  	;mov	[bp-15],ax
 13710 00001CE1 8946F1                  	MOV	cByte,AX		;	}
 13711                                  DoOper:
 13712 00001CE4 31DB                    	XOR	BX,BX
 13713                                  	;mov	[bp-17],bx
 13714 00001CE6 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13715                                  	;cmp	[bp-15],bx
 13716 00001CE9 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13717 00001CEC 7506                    	JNZ	short DoGetExt
 13718                                  	;test	byte [bp-1],2
 13719 00001CEE F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13720                                  	;JZ	short DoGetExt
 13721                                  	;JMP	short SkipOp
 13722                                  	; 16/12/2022
 13723 00001CF2 7576                    	jnz	short SkipOp
 13724                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13725                                  	;JZ	short DoGetExt
 13726                                  	;JMP	short SkipOp
 13727                                  DoGetExt:
 13728 00001CF4 E8CCFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13729 00001CF7 730F                    	JNC	short ContinueOp
 13730                                  FCBDeath:
 13731 00001CF9 E85AE9                  	call	FCB_RET_ERR		; signal error, map for extended
 13732                                  	;mov	word [bp-19],0
 13733 00001CFC C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13734                                  	;mov	byte [bp-1],1
 13735 00001D01 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13736 00001D05 E9EF00                  	JMP	FCBSave 		; bam!
 13737                                  ContinueOp:
 13738                                  	;mov	ax,[si+10h]
 13739 00001D08 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13740                                  	;mov	[es:di+11h],ax
 13741 00001D0B 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13742                                  	;mov	ax,[si+12h]
 13743 00001D0F 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13744                                  	;mov	[es:di+13h],ax
 13745 00001D12 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13746                                  	;mov	ax,[bp-13]
 13747 00001D16 8B46F3                  	MOV	AX,bPosL
 13748                                  	;mov	dx,[bp-11]
 13749 00001D19 8B56F5                  	MOV	DX,bPosH
 13750                                  	;mov	[es:di+15h],ax
 13751 00001D1C 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13752                                  	;xchg	dx,[es:di+17h]
 13753 00001D20 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13754 00001D24 52                      	PUSH	DX			; save away Open age.
 13755                                  	;mov	cx,[bp-15]
 13756 00001D25 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13757                                  
 13758                                  ;hkn; DOS_Read is in DOSCODE
 13759 00001D28 BF[CE32]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13760                                  	;test	byte [bp-20],4
 13761 00001D2B F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13762 00001D2F 7503                    	JNZ	short DoContext
 13763                                  
 13764                                  ;hkn; DOS_Write is in DOSCODE
 13765 00001D31 BF[F734]                	MOV	DI,DOS_WRITE
 13766                                  DoContext:
 13767 00001D34 55                      	push	bp
 13768 00001D35 1E                      	push	ds
 13769 00001D36 56                      	push	si
 13770                                  
 13771                                  ;hkn; SS is DOSDATA
 13772 00001D37 16                      	push	ss
 13773 00001D38 1F                      	pop	ds
 13774                                  
 13775                                  ;; Fix for disk full
 13776 00001D39 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13777                                  	
 13778 00001D3B 5E                      	pop	si
 13779 00001D3C 1F                      	pop	ds
 13780 00001D3D 5D                      	pop	bp
 13781 00001D3E 72B9                    	JC	short FCBDeath
 13782                                  	
 13783 00001D40 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13784 00001D46 740A                    	JZ	short NODSKFULL
 13785 00001D48 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13786                                  	;mov	byte [bp-1],1 
 13787 00001D4E C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13788                                  NODSKFULL:
 13789                                  ;; Fix for disk full
 13790                                  	;mov	[bp-17],cx
 13791 00001D52 894EEF                  	MOV	cResult,CX
 13792 00001D55 E83BFB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13793                                  	;pop	word [es:di+17h]	
 13794 00001D58 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13795                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13796                                  	;mov	ax,[es:di+11h]
 13797 00001D5C 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13798                                  	;mov	[si+10h],ax
 13799 00001D60 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13800                                  	;mov	ax,[es:di+13h]
 13801 00001D63 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13802                                  	;mov	[si+12h],ax
 13803 00001D67 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13804                                  					;	}
 13805                                  SkipOp:
 13806                                  	;mov	ax,[bp-17]
 13807 00001D6A 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13808 00001D6D 31D2                    	XOR	DX,DX
 13809                                  	;div	word [bp-9]
 13810 00001D6F F776F7                  	DIV	RecSize
 13811                                  	;mov	[bp-19],ax
 13812 00001D72 8946ED                  	MOV	cRecRes,AX
 13813                                  	;add	[bp-7],ax
 13814 00001D75 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13815                                  	;adc	word [bp-5],0
 13816 00001D78 8356FB00                	ADC	RecPosH,0
 13817                                  
 13818                                  ; If we have not gotten the expected number of records, we signal an EOF
 13819                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13820                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13821                                  ; do we.
 13822                                  
 13823                                  	;cmp	ax,[bp-3]
 13824 00001D7C 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13825 00001D7F 7411                    	JZ	short TryBlank
 13826                                  	;test	byte [bp-20],4
 13827 00001D81 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13828 00001D85 7507                    	JNZ	short SetEOF
 13829                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13830                                  	; MSDOS 3.3
 13831                                  	;;test	word [es:di+5],80h
 13832                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13833                                  	;JNZ	short TryBlank
 13834                                  	; MSDOS 5.0 & MSDOS 6.0
 13835                                  	;test	byte [es:di+5],80h
 13836 00001D87 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13837 00001D8C 7504                    	jnz	short TryBlank
 13838                                  
 13839                                  SetEOF:
 13840                                  	;mov	byte [bp-1],1
 13841 00001D8E C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13842                                  TryBlank:				;
 13843 00001D92 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13844 00001D94 7426                    	JZ	short SetExt
 13845                                  	;add	word [bp-7],1
 13846 00001D96 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13847                                  	;adc	word [bp-5],0
 13848 00001D9A 8356FB00                	ADC	RecPosH,0
 13849                                  	;test	byte [bp-20],4
 13850 00001D9E F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13851 00001DA2 7418                    	JZ	short SetExt
 13852                                  	;inc	word [bp-19]
 13853 00001DA4 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13854                                  	;mov	byte [bp-1],3
 13855 00001DA7 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13856                                  	;mov	cx,[bp-9]
 13857 00001DAB 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13858 00001DAE 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13859 00001DB0 30C0                    	XOR	AL,AL
 13860                                  ;hkn; 	SS override
 13861 00001DB2 36C43E[2C03]            	les     di,[ss:DMAADD]
 13862                                  	;add	di,[bp-17]
 13863 00001DB7 037EEF                  	ADD	DI,cResult
 13864 00001DBA F3AA                    	REP	STOSB			;   }	}
 13865                                  SetExt:
 13866                                  	;mov	dx,[bp-5]
 13867 00001DBC 8B56FB                  	MOV	DX,RecPosH
 13868                                  	;mov	ax,[bp-7]
 13869 00001DBF 8B46F9                  	MOV	AX,RecPosL
 13870                                  	;test	byte [bp-20],2
 13871 00001DC2 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13872 00001DC6 7406                    	JZ	short DoSetExt
 13873                                  	;test	byte [bp-20],8
 13874 00001DC8 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13875 00001DCC 7403                    	JZ	short TrySetRR
 13876                                  DoSetExt:
 13877 00001DCE E869FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13878                                  TrySetRR:
 13879                                  	;test	byte [bp-20],8
 13880 00001DD1 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13881 00001DD5 740F                    	JZ	short TryReturn
 13882                                  	;mov	[si+21h],ax
 13883 00001DD7 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13884                                  	;mov	[si+23h],dl
 13885 00001DDA 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13886                                  	;cmp	word [si+0Eh],64
 13887 00001DDD 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13888 00001DE1 7303                    	JAE	short TryReturn
 13889                                  	;mov	[si+24h],dh
 13890 00001DE3 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13891                                  TryReturn: 
 13892                                  	;test	byte [bp-20],4
 13893 00001DE6 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13894 00001DEA 750B                    	JNZ	short FCBSave
 13895 00001DEC 1E                      	push	ds			;	FCB->FDate = date;
 13896 00001DED E800ED                  	call	DATE16			;	FCB->FTime = time;
 13897 00001DF0 1F                      	pop	ds
 13898                                  	;mov	[si+14h],ax
 13899 00001DF1 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13900                                  	;mov	[si+16h],dx
 13901 00001DF4 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13902                                  FCBSave: 
 13903                                  	;test	byte [bp-20],8
 13904 00001DF7 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13905 00001DFB 7409                    	jz	short DoReturn
 13906                                  	;mov	cx,[bp-19]
 13907 00001DFD 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13908 00001E00 E87EE6                  	call    Get_User_Stack
 13909                                  	;mov	[si+4],cx
 13910 00001E03 894C04                  	MOV	[SI+user_env.user_CX],CX
 13911                                  DoReturn:
 13912                                  	;mov	al,[bp-1]
 13913 00001E06 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13914                                  	;Leave	
 13915 00001E09 89EC                    	mov     sp,bp
 13916 00001E0B 5D                      	pop     bp
 13917 00001E0C C3                      	retn
 13918                                  
 13919                                  ; 22/07/2018 - Retro DOS v3.0
 13920                                  
 13921                                  ;Break <$FCB_Open - open an old-style FCB>
 13922                                  ;---------------------------------------------------------------------------
 13923                                  ;
 13924                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13925                                  ;	for us and asked to have the rest filled in.
 13926                                  ;
 13927                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13928                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13929                                  ;		FCB has the following fields filled in:
 13930                                  ;		    Time/Date Extent/NR Size
 13931                                  ;---------------------------------------------------------------------------
 13932                                  
 13933                                  _$FCB_OPEN:			; System call 15
 13934                                  
 13935 00001E0D B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13936                                  
 13937                                  ;hkn; DOS_Open is in DOSCODE
 13938 00001E10 B9[6E2B]                	MOV	CX,DOS_OPEN
 13939                                  
 13940                                  ; The following is common code for Creation and openning of FCBs. AX is
 13941                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13942                                  ; the FCB
 13943                                  
 13944                                  DoAccess:
 13945 00001E13 1E                      	push	ds
 13946 00001E14 52                      	push	dx
 13947 00001E15 51                      	push	cx
 13948 00001E16 50                      	push	ax			; save FCB pointer away
 13949                                  
 13950                                  ;hkn; 	OpenBuf is in DOSDATA
 13951 00001E17 BF[BE03]                	MOV	DI,OPENBUF
 13952 00001E1A E8E24C                  	call	TransFCB		; crunch the fcb
 13953 00001E1D 58                      	pop	ax
 13954 00001E1E 59                      	pop	cx
 13955 00001E1F 5A                      	pop	dx
 13956 00001E20 1F                      	pop	ds			; get fcb
 13957 00001E21 7303                    	JNC	short FindFCB		; everything seems ok
 13958                                  FCBOpenErr:
 13959                                  	; AL has error code
 13960 00001E23 E930E8                  	jmp	FCB_RET_ERR
 13961                                  FindFCB:
 13962 00001E26 E82BFE                  	call	GetExtended		; DS:SI will point to FCB
 13963                                  
 13964                                  	; 17/05/2019 - Retro DOS v4.0
 13965                                  
 13966                                  	; MSDOS 3.3
 13967                                  	;call	LRUFCB
 13968                                  	;jc	short HardMessage
 13969                                  
 13970                                  	; MSDOS 6.0
 13971 00001E29 50                      	push	ax
 13972 00001E2A B001                    	mov	al,1			;indicate Open/Create operation
 13973 00001E2C E832FB                  	call	LRUFCB			; get a sft entry (no error)
 13974 00001E2F 58                      	pop	ax
 13975 00001E30 722A                    	jc	short HardMessage
 13976                                  	
 13977                                  	;mov	word [es:di+2],8000h
 13978 00001E32 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13979 00001E38 1E                      	push	ds
 13980 00001E39 56                      	push	si	
 13981 00001E3A 53                      	push	bx			; save fcb pointer
 13982 00001E3B 89CE                    	MOV	SI,CX
 13983                                  
 13984                                  ;hkn; SS is DOSDATA
 13985 00001E3D 16                      	push	ss
 13986 00001E3E 1F                      	pop	ds			    ; let DOS_Open see variables
 13987 00001E3F FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13988 00001E41 5B                      	pop	bx
 13989 00001E42 5E                      	pop	si
 13990 00001E43 1F                      	pop	ds			; get fcb
 13991                                  
 13992                                  ;hkn; SS override
 13993 00001E44 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13994 00001E49 7318                    	JNC	short FCBOK		; operation succeeded
 13995                                  failopen:
 13996 00001E4B 50                      	PUSH	AX
 13997 00001E4C B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13998 00001E4E E8EFFC                  	call	BlastSFT
 13999 00001E51 58                      	POP	AX
 14000                                  	;cmp	ax,4
 14001 00001E52 83F804                  	CMP	AX,error_too_many_open_files
 14002 00001E55 7405                    	JZ	short HardMessage
 14003                                  	;cmp	ax,24h
 14004 00001E57 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14005 00001E5A 7505                    	jnz	short DeadFCB
 14006                                  HardMessage:
 14007 00001E5C 50                      	PUSH	AX
 14008 00001E5D E899FD                  	call	FCBHardErr
 14009 00001E60 58                      	POP	AX
 14010                                  DeadFCB:
 14011                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14012                                  	;jmp	FCB_RET_ERR
 14013 00001E61 EBC0                    	jmp	short FCBOpenErr
 14014                                  FCBOK:
 14015                                  	; MSDOS 6.0
 14016 00001E63 E8FEF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14017 00001E66 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14018 00001E68 E8C054                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14019 00001E6B 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14020                                  ;SR;
 14021                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14022                                  ; LocalSFT variable to reflect this.
 14023                                  
 14024 00001E6D 36893E[4410]            	mov	[ss:LocalSFT],di
 14025 00001E72 368C06[4610]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14026                                  ;;SR;
 14027                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14028                                  ;;
 14029                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14030                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14031                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14032                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14033                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14034                                  
 14035                                  FCBOK2:
 14036                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14037 00001E77 26FF05                  	inc	word [es:di]
 14038                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14039 00001E7A E816FA                  	call	SaveFCBInfo
 14040                                  	; MSDOS 3.3
 14041                                  	;call	SetOpenAge
 14042                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14043                                  	;test	word [es:di+5],80h
 14044                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14045 00001E7D 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14046 00001E82 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14047 00001E84 8A04                    	MOV	AL,[SI]			; get drive byte
 14048 00001E86 E8014C                  	call	GETTHISDRV		; convert
 14049                                  	;INC	AL
 14050                                  	; 17/12/2022
 14051 00001E89 40                      	inc	ax
 14052 00001E8A 8804                    	MOV	[SI],AL			; stash in good drive letter
 14053                                  FCBNoDrive:
 14054                                  	;mov	word [si+0Eh],128
 14055 00001E8C C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14056                                  
 14057                                  	;mov	ax,[es:di+0Dh]
 14058 00001E91 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14059                                  	;mov	[si+16h],ax
 14060 00001E95 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 14061                                  	;mov	ax,[es:di+0Fh]
 14062 00001E98 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14063                                  	;mov	[si+14h],ax
 14064 00001E9C 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14065                                  	;mov	ax,[es:di+11h]
 14066 00001E9F 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14067                                  	;mov	[si+10h],ax
 14068 00001EA3 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 14069                                  	;mov	ax,[es:di+13h]
 14070 00001EA6 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14071                                  	;mov	[si+12h],ax
 14072 00001EAA 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14073 00001EAD 31C0                    	XOR	AX,AX			; convenient zero
 14074                                  	;mov	[si+0Ch],ax
 14075 00001EAF 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14076                                  
 14077                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14078                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14079                                  
 14080                                  ;hkn; 	SS override
 14081 00001EB2 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14082                                  	;mov	ah,[es:di+4]
 14083 00001EB7 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14084                                  OpenScan:
 14085                                  	;cmp	al,[si+18h]
 14086 00001EBB 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14087 00001EBE 7407                    	JZ	short SkipCheck
 14088 00001EC0 50                      	push	ax			; preserve count
 14089 00001EC1 E892FC                  	call	CheckFCB		; do they match
 14090 00001EC4 58                      	pop	ax			; get count back
 14091 00001EC5 7309                    	JNC	short OpenFound		; found a match!
 14092                                  SkipCheck:
 14093 00001EC7 FEC0                    	INC	AL			; advance to next FCB
 14094 00001EC9 38E0                    	CMP	AL,AH			; table full?
 14095 00001ECB 75EE                    	JNZ	short OpenScan		; no, go for more
 14096                                  OpenDone:
 14097 00001ECD 30C0                    	xor	al,al			; return success
 14098 00001ECF C3                      	retn
 14099                                  
 14100                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14101                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14102                                  ; Consider:
 14103                                  ;
 14104                                  ;   open (foo)	delete (foo) open (bar)
 14105                                  ;
 14106                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14107                                  ; foo even though foo is no longer needed; this is due to the server closing
 14108                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14109                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14110                                  ; bar and subsequent I/O would be lost to the redirector.
 14111                                  ;
 14112                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14113                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14114                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14115                                  ; around. This will allow us to access the same file through multiple network
 14116                                  ; connections and NOT prematurely terminate when the ref count on one
 14117                                  ; connection goes to zero.
 14118                                  
 14119                                  OpenFound:
 14120                                  	;mov	[si+18h],al
 14121 00001ED0 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14122 00001ED3 26FF05                  	inc	word [es:di]
 14123                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14124                                  					; remember this new invocation
 14125 00001ED6 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 14126                                  	;mov	[es:di+15h],ax
 14127 00001EDA 26894515                	MOV	[ES:DI+sf_LRU],AX
 14128                                  ;
 14129                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 14130                                  ; blast it to prevent other reuse.
 14131                                  ;
 14132 00001EDE 16                      	push	ss
 14133 00001EDF 1F                      	pop	ds
 14134 00001EE0 C43E[9E05]              	LES	DI,[THISSFT]
 14135 00001EE4 26FF0D                  	dec	word [es:di]
 14136                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14137                                  					; free the newly allocated SFT
 14138 00001EE7 E87954                  	call	ShareEnd
 14139 00001EEA B043                    	MOV	AL,'C'	 ; 43h
 14140 00001EEC E851FC                  	call	BlastSFT
 14141 00001EEF EBDC                    	JMP	short OpenDone
 14142                                  
 14143                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14144                                  ;----------------------------------------------------------------------------
 14145                                  ;
 14146                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14147                                  ;	FCB for us and asked to have the rest filled in.
 14148                                  ;
 14149                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14150                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14151                                  ;		FCB has the following fields filled in:
 14152                                  ;		    Time/Date Extent/NR Size
 14153                                  ;----------------------------------------------------------------------------
 14154                                  
 14155                                  _$FCB_CREATE:		; System call 22
 14156                                  
 14157                                  ;hkn; DOS_Create is in DOSCODE
 14158 00001EF1 B9[442A]                	MOV	CX,DOS_CREATE		; routine to call
 14159 00001EF4 31C0                    	XOR	AX,AX			; attributes to create
 14160 00001EF6 E85BFD                  	call	GetExtended		; get extended FCB
 14161 00001EF9 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14162 00001EFB 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14163                                  DoAccessJ:
 14164 00001EFE E912FF                  	JMP	DoAccess		; do dirty work
 14165                                  
 14166                                  ; 22/07/2018 - Retro DOS v3.0
 14167                                  
 14168                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 14169                                  ;----------------------------------------------------------------------------
 14170                                  ;
 14171                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 14172                                  ;	and write a number of blocks from it.
 14173                                  ;
 14174                                  ;   Inputs:	DS:DX point to an FCB
 14175                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 14176                                  ;		AL <> 0 Not enough room on disk for the output
 14177                                  ;
 14178                                  ;----------------------------------------------------------------------------
 14179                                  
 14180                                  _$FCB_RANDOM_WRITE_BLOCK:
 14181                                  	;mov	AL,0Ah	
 14182 00001F01 B00A                    	MOV	AL,RANDOM+BLOCK
 14183 00001F03 E968FD                  	JMP	FCBIO
 14184                                  
 14185                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 14186                                  ;----------------------------------------------------------------------------
 14187                                  ;
 14188                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 14189                                  ;	and read a number of blocks from it.
 14190                                  ;
 14191                                  ;   Inputs:	DS:DX point to an FCB
 14192                                  ;   Outputs:	AL = error codes defined above
 14193                                  ;
 14194                                  ;----------------------------------------------------------------------------
 14195                                  
 14196                                  _$FCB_RANDOM_READ_BLOCK:
 14197                                  	;mov	AL,0Eh	
 14198 00001F06 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 14199 00001F08 E963FD                  	JMP	FCBIO
 14200                                  
 14201                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 14202                                  ;----------------------------------------------------------------------------
 14203                                  ;
 14204                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 14205                                  ;	memory
 14206                                  ;
 14207                                  ;   Inputs:	DS:DX point to an FCB
 14208                                  ;   Outputs:	AL = error codes defined above
 14209                                  ;
 14210                                  ;----------------------------------------------------------------------------
 14211                                  
 14212                                  _$FCB_SEQ_READ:
 14213                                  	;mov	AL,4	
 14214 00001F0B B004                    	MOV	AL,FCBREAD
 14215 00001F0D E95EFD                  	JMP	FCBIO
 14216                                  
 14217                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 14218                                  ;----------------------------------------------------------------------------
 14219                                  ;
 14220                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 14221                                  ;	file
 14222                                  ;
 14223                                  ;   Inputs:	DS:DX point to an FCB
 14224                                  ;   Outputs:	AL = error codes defined above
 14225                                  ;
 14226                                  ;----------------------------------------------------------------------------
 14227                                  
 14228                                  _$FCB_SEQ_WRITE:
 14229 00001F10 B000                    	MOV	AL,0
 14230 00001F12 E959FD                  	jmp	FCBIO
 14231                                  
 14232                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 14233                                  ;----------------------------------------------------------------------------
 14234                                  ;
 14235                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 14236                                  ;	record from it.
 14237                                  ;
 14238                                  ;   Inputs:	DS:DX point to an FCB
 14239                                  ;   Outputs:	AL = error codes defined above
 14240                                  ;
 14241                                  ;----------------------------------------------------------------------------
 14242                                  
 14243                                  _$FCB_RANDOM_READ:
 14244                                  	;mov	AL,6	
 14245 00001F15 B006                    	MOV	AL,RANDOM+FCBREAD
 14246 00001F17 E954FD                  	jmp	FCBIO			; single block
 14247                                  
 14248                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 14249                                  ;----------------------------------------------------------------------------
 14250                                  ;
 14251                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 14252                                  ;	a record to it.
 14253                                  ;
 14254                                  ;   Inputs:	DS:DX point to an FCB
 14255                                  ;   Outputs:	AL = error codes defined above
 14256                                  ;
 14257                                  ;----------------------------------------------------------------------------
 14258                                  
 14259                                  _$FCB_RANDOM_WRITE:
 14260                                  	;mov	AL,2	
 14261 00001F1A B002                    	MOV	AL,RANDOM
 14262 00001F1C E94FFD                  	jmp	FCBIO
 14263                                  
 14264                                  ;============================================================================
 14265                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14266                                  ;============================================================================
 14267                                  ; 22/07/2018 - Retro DOS v3.0
 14268                                  ; 17/05/2019 - Retro DOS v4.0
 14269                                  
 14270                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14271                                  
 14272                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14273                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14274                                  
 14275                                  ;**	Search.asm
 14276                                  ;----------------------------------------------------------------------------
 14277                                  ;	Directory search system calls.
 14278                                  ;	These will be passed direct text of the pathname from the user. 
 14279                                  ;	They will need to be passed through the macro expander prior to
 14280                                  ;	being sent through the low-level stuff. 
 14281                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14282                                  ;
 14283                                  ;	$Dir_Search_First	  written
 14284                                  ;	$Dir_Search_Next	  written
 14285                                  ;	$Find_First	  written
 14286                                  ;	$Find_Next		  written
 14287                                  ;	PackName		  written
 14288                                  ;
 14289                                  ;	Modification history:
 14290                                  ;
 14291                                  ;	  Created: ARR 4 April 1983
 14292                                  
 14293                                  ;----------------------------------------------------------------------------
 14294                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14295                                  ;
 14296                                  ; Inputs:
 14297                                  ;	DS:DX Points to unopenned FCB
 14298                                  ; Function:
 14299                                  ;	Directory is searched for first matching entry and the directory
 14300                                  ;	entry is loaded at the disk transfer address
 14301                                  ; Returns:
 14302                                  ;	AL = -1 if no entries matched, otherwise 0
 14303                                  ;----------------------------------------------------------------------------
 14304                                  
 14305                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14306                                  
 14307                                  _$DIR_SEARCH_FIRST:
 14308 00001F1F 368916[A605]            	MOV	[SS:THISFCB],DX
 14309 00001F24 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14310 00001F29 89D6                    	MOV	SI,DX
 14311 00001F2B 803CFF                  	CMP	BYTE [SI],0FFH
 14312 00001F2E 7503                    	JNZ	short NORMFCB4
 14313 00001F30 83C607                  	ADD	SI,7			; Point to drive select byte
 14314                                  NORMFCB4:
 14315 00001F33 FF34                    	push	word [SI]		; Save original drive byte for later
 14316                                  
 14317 00001F35 16                      	push	ss
 14318 00001F36 07                      	pop	es			; get es to address DOSGroup
 14319                                  
 14320 00001F37 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14321 00001F3A E8C24B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14322 00001F3D 7304                    	JNC	short SearchIt		; no error, go and look
 14323 00001F3F 5B                      	pop	bx			; Clean stack
 14324                                  
 14325                                  ; Error code is in AX
 14326                                  
 14327                                  	; 09/11/2022
 14328                                  dcf_errj:
 14329 00001F40 E913E7                  	jmp	FCB_RET_ERR		; error
 14330                                  
 14331                                  SearchIt:
 14332 00001F43 16                      	push	ss
 14333 00001F44 1F                      	pop	ds			; get ready for search
 14334 00001F45 FF36[2C03]              	push	word [DMAADD]
 14335 00001F49 FF36[2E03]              	push	word [DMAADD+2]
 14336 00001F4D C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14337 00001F53 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14338                                  	; MSDOS 3.3
 14339                                  	;call	DOS_SEARCH_FIRST
 14340                                  	; MSDOS 6.0
 14341 00001F57 E88501                  	call	GET_FAST_SEARCH		; search
 14342 00001F5A 8F06[2E03]              	pop	word [DMAADD+2]
 14343 00001F5E 8F06[2C03]              	pop	word [DMAADD]
 14344 00001F62 7303                    	JNC	short SearchSet		; no error, transfer info
 14345 00001F64 5B                      	pop	bx			; Clean stack
 14346                                  
 14347                                  ; Error code is in AX
 14348                                  
 14349                                  	; 09/11/2022
 14350                                  	;jmp	FCB_RET_ERR
 14351 00001F65 EBD9                    	jmp	short dcf_errj
 14352                                  
 14353                                  ; The search was successful (or the search-next). We store the information
 14354                                  ; into the user's FCB for continuation.
 14355                                  
 14356                                  SearchSet:
 14357 00001F67 BE[BE04]                	MOV	SI,SEARCHBUF
 14358 00001F6A C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14359 00001F6E F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14360 00001F73 7403                    	JZ	short NORMFCB1
 14361 00001F75 83C707                  	ADD	DI,7			; Point past the extension
 14362                                  NORMFCB1:
 14363 00001F78 5B                      	pop	bx			; Get original drive byte
 14364 00001F79 08DB                    	OR	BL,BL
 14365 00001F7B 7506                    	JNZ	short SearchDrv
 14366 00001F7D 8A1E[3603]              	MOV	BL,[CURDRV]
 14367 00001F81 FEC3                    	INC	BL
 14368                                  SearchDrv:
 14369 00001F83 AC                      	LODSB				; Get correct search contin drive byte
 14370 00001F84 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14371 00001F86 47                      	INC	DI
 14372                                  	;STOSB				; Store the correct "user" drive byte
 14373                                  					;  at the start of the search info
 14374 00001F87 B90A00                  	MOV	CX,20/2
 14375 00001F8A F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14376 00001F8C 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14377                                  					;   byte to AL
 14378 00001F8E AA                      	STOSB				; Search contin drive byte at end of
 14379                                  					;   contin info
 14380 00001F8F C43E[2C03]              	LES	DI,[DMAADD]
 14381 00001F93 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14382 00001F98 740D                    	JZ	short NORMFCB2
 14383 00001F9A B0FF                    	MOV	AL,0FFh
 14384 00001F9C AA                      	STOSB
 14385 00001F9D FEC0                    	INC	AL
 14386                                  	;MOV	CX,5
 14387                                  	; 17/12/2022
 14388 00001F9F B105                    	mov	cl,5
 14389 00001FA1 F3AA                    	REP	STOSB
 14390 00001FA3 A0[6D05]                	MOV	AL,[SATTRIB]
 14391 00001FA6 AA                      	STOSB
 14392                                  NORMFCB2:
 14393 00001FA7 88D8                    	MOV	AL,BL			; User Drive byte
 14394 00001FA9 AA                      	STOSB
 14395                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14396                                  	; 17/12/2022
 14397 00001FAA B110                    	mov	cl,16
 14398 00001FAC F3A5                    	REP	MOVSW
 14399 00001FAE E9A2E6                  	jmp	FCB_RET_OK
 14400                                  
 14401                                  ;----------------------------------------------------------------------------
 14402                                  ;
 14403                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14404                                  ;
 14405                                  ; Inputs:
 14406                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14407                                  ; Function:
 14408                                  ;	Directory is searched for the next matching entry and the directory
 14409                                  ;	entry is loaded at the disk transfer address
 14410                                  ; Returns:
 14411                                  ;	AL = -1 if no entries matched, otherwise 0
 14412                                  ;----------------------------------------------------------------------------
 14413                                  
 14414                                  _$DIR_SEARCH_NEXT:
 14415 00001FB1 368916[A605]            	MOV	[SS:THISFCB],DX
 14416 00001FB6 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14417 00001FBB 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14418 00001FC1 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14419                                  
 14420 00001FC7 16                      	push	ss
 14421 00001FC8 07                      	pop	es
 14422                                  
 14423 00001FC9 BF[BE04]                	MOV	DI,SEARCHBUF
 14424                                  
 14425 00001FCC 89D6                    	MOV	SI,DX
 14426 00001FCE 803CFF                  	CMP	BYTE [SI],0FFh
 14427 00001FD1 750D                    	JNZ	short NORMFCB6
 14428 00001FD3 83C606                  	ADD	SI,6
 14429 00001FD6 AC                      	LODSB
 14430                                  
 14431 00001FD7 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14432 00001FDB 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14433                                  NORMFCB6:
 14434 00001FE0 AC                      	LODSB				; Get original user drive byte
 14435 00001FE1 50                      	push	ax			; Put it on stack
 14436 00001FE2 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14437 00001FE5 AA                      	STOSB				; Put in correct place
 14438 00001FE6 B90A00                  	MOV	CX,20/2
 14439 00001FE9 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14440                                  
 14441 00001FEB 16                      	push	ss
 14442 00001FEC 1F                      	pop	ds
 14443                                  
 14444 00001FED FF36[2C03]              	push	word [DMAADD]
 14445 00001FF1 FF36[2E03]              	push	word [DMAADD+2]
 14446 00001FF5 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14447 00001FFB 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14448 00001FFF E8200E                  	call	DOS_SEARCH_NEXT 	; Find it
 14449 00002002 8F06[2E03]              	pop	word [DMAADD+2]
 14450 00002006 8F06[2C03]              	pop	word [DMAADD]
 14451 0000200A 7203                    	JC	short SearchNoMore
 14452 0000200C E958FF                  	JMP	SearchSet		; Ok set return
 14453                                  
 14454                                  SearchNoMore:
 14455 0000200F C43E[A605]              	LES	DI,[THISFCB]
 14456 00002013 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14457 00002018 7403                    	JZ	short NORMFCB8
 14458 0000201A 83C707                  	ADD	DI,7			; Point past the extension
 14459                                  NORMFCB8:
 14460 0000201D 5B                      	pop	bx			; Get original drive byte
 14461 0000201E 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14462                                  					;  at the right spot
 14463                                  ; error code is in AX
 14464                                  
 14465 00002021 E932E6                  	jmp	FCB_RET_ERR
 14466                                  
 14467                                  ; 17/05/2019 - Retro DOS v4.0
 14468                                  
 14469                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14470                                  
 14471                                  ;---------------------------------------------------------------------------
 14472                                  ;
 14473                                  ;   Procedure Name : $FIND_FIRST
 14474                                  ; 
 14475                                  ;   Assembler usage:
 14476                                  ;	    MOV AH, FindFirst
 14477                                  ;	    LDS DX, name
 14478                                  ;	    MOV CX, attr
 14479                                  ;	    INT 21h
 14480                                  ;	; DMA address has datablock
 14481                                  ;
 14482                                  ;   Error Returns:
 14483                                  ;	    AX = error_path_not_found
 14484                                  ;	       = error_no_more_files
 14485                                  ;---------------------------------------------------------------------------
 14486                                  
 14487                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14488                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14489                                  
 14490                                  _$FIND_FIRST:
 14491 00002024 89D6                    	MOV	SI,DX			; get name in appropriate place
 14492 00002026 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14493                                  
 14494 0000202B BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14495                                  
 14496 0000202E E8344B                  	call	TransPathSet		; convert the path
 14497 00002031 7305                    	JNC	short Find_it 		; no error, go and look
 14498                                  FindError:
 14499                                  	;mov	al,3
 14500 00002033 B003                    	mov	al, error_path_not_found ; error and map into one.
 14501                                  	; 09/11/2022
 14502                                  FF_errj:
 14503 00002035 E908E6                  	jmp	SYS_RET_ERR
 14504                                  Find_it:
 14505 00002038 16                      	push	ss
 14506 00002039 1F                      	pop	ds
 14507                                  
 14508 0000203A FF36[2C03]              	push	word [DMAADD]
 14509 0000203E FF36[2E03]              	push	word [DMAADD+2]
 14510 00002042 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14511 00002048 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14512                                  	; MSDOS 3.3
 14513                                  	;call	DOS_SEARCH_FIRST
 14514                                  	; MSDOS 6.0
 14515 0000204C E89000                  	call	GET_FAST_SEARCH 	; search
 14516 0000204F 8F06[2E03]              	pop	word [DMAADD+2]
 14517 00002053 8F06[2C03]              	pop	word [DMAADD]
 14518                                  	
 14519                                  	; 16/12/2022
 14520                                  	;JNC	short FindSet 		; no error, transfer info
 14521 00002057 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14522                                  	;
 14523                                  	;jmp	SYS_RET_ERR
 14524                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14525                                  ;FFF_errj:
 14526                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14527                                  
 14528                                  FindSet:
 14529 00002059 BE[BE04]                	MOV	SI,SEARCHBUF
 14530 0000205C C43E[2C03]              	LES	DI,[DMAADD]
 14531 00002060 B91500                  	MOV	CX,21
 14532 00002063 F3A4                    	REP	MOVSB
 14533 00002065 56                      	PUSH	SI			; Save pointer to start of entry
 14534                                  	;mov	al,[si+0Bh]
 14535 00002066 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14536 00002069 AA                      	STOSB
 14537                                  	;add	si,16h ; 22
 14538 0000206A 83C616                  	ADD	SI,dir_entry.dir_time
 14539 0000206D A5                      	MOVSW				; dir_time
 14540 0000206E A5                      	MOVSW				; dir_date
 14541 0000206F 46                      	INC	SI
 14542 00002070 46                      	INC	SI			; Skip dir_first
 14543 00002071 A5                      	MOVSW				; dir_size (2 words)
 14544 00002072 A5                      	MOVSW
 14545 00002073 5E                      	POP	SI			; Point back to dir_name
 14546 00002074 E83500                   	CALL	PackName
 14547 00002077 E9BDE5                  	jmp	SYS_RET_OK		; bye with no errors
 14548                                  
 14549                                  ;---------------------------------------------------------------------------
 14550                                  ;
 14551                                  ;   Procedure Name : $FIND_NEXT
 14552                                  ;
 14553                                  ;   Assembler usage:
 14554                                  ;	; dma points at area returned by find_first
 14555                                  ;	    MOV AH, findnext
 14556                                  ;	    INT 21h
 14557                                  ;	; next entry is at dma
 14558                                  ;
 14559                                  ;   Error Returns:
 14560                                  ;	    AX = error_no_more_files
 14561                                  ;---------------------------------------------------------------------------
 14562                                  
 14563                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14564                                  _$FIND_NEXT:
 14565 0000207A 16                      	push	ss
 14566 0000207B 07                      	pop	es
 14567                                  
 14568 0000207C BF[BE04]                	MOV	DI,SEARCHBUF
 14569                                  
 14570 0000207F 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14571                                  
 14572 00002084 B91500                  	MOV	CX,21
 14573 00002087 F3A4                    	REP	MOVSB			; Put the search continuation info
 14574                                  					;  in the right place
 14575 00002089 16                      	push	ss
 14576 0000208A 1F                      	pop	ds			; get ready for search
 14577                                  	
 14578 0000208B FF36[2C03]              	push	word [DMAADD]
 14579 0000208F FF36[2E03]              	push	word [DMAADD+2]
 14580 00002093 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14581 00002099 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14582 0000209D E8820D                  	call	DOS_SEARCH_NEXT 	; Find it
 14583 000020A0 8F06[2E03]              	pop	word [DMAADD+2]
 14584 000020A4 8F06[2C03]              	pop	word [DMAADD]
 14585 000020A8 73AF                    	JNC	short FindSet 		; No error, set info
 14586                                  	;jmp	SYS_RET_ERR
 14587                                  	; 16/12/2022
 14588 000020AA EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14589                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14590                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14591                                  
 14592                                  ;---------------------------------------------------------------------------
 14593                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14594                                  ;
 14595                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14596                                  ;	the ASCIZ format.
 14597                                  ;
 14598                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14599                                  ;		(ES:DI) = destination area (13 bytes)
 14600                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14601                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14602                                  ;---------------------------------------------------------------------------
 14603                                  
 14604                                  PackName:
 14605                                  ;	Move over 8 characters to cover the name component, then trim it's
 14606                                  ;	trailing blanks.
 14607                                  
 14608 000020AC B90800                  	MOV	CX,8			; Pack the name
 14609 000020AF F3A4                    	REP	MOVSB			; Move all of it
 14610                                  main_kill_tail:
 14611 000020B1 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14612 000020B6 7507                    	JNZ	short find_check_dot
 14613 000020B8 4F                      	DEC	DI			; Back up over trailing space
 14614 000020B9 41                      	INC	CX
 14615 000020BA 83F908                  	CMP	CX,8
 14616 000020BD 72F2                    	JB	short main_kill_tail
 14617                                  find_check_dot:
 14618                                  	;CMP	WORD [SI],(" " << 8) | " "
 14619 000020BF 813C2020                	cmp     word [si],2020h 
 14620 000020C3 7506                    	JNZ	short got_ext 		; Some chars in extension
 14621 000020C5 807C0220                	CMP	BYTE [SI+2]," "
 14622 000020C9 7410                    	JZ	short find_done		; No extension
 14623                                  got_ext:
 14624 000020CB B02E                    	MOV	AL,"."	; 2Eh
 14625 000020CD AA                      	STOSB
 14626                                  	;MOV	CX,3
 14627                                  	; 18/12/2022
 14628                                  	;mov	cl,3
 14629                                  	;REP	MOVSB
 14630 000020CE A4                      	movsb
 14631 000020CF A4                      	movsb
 14632 000020D0 A4                      	movsb
 14633                                  ext_kill_tail:
 14634 000020D1 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14635 000020D6 7503                    	JNZ	short find_done
 14636 000020D8 4F                      	DEC	DI			; Back up over trailing space
 14637 000020D9 EBF6                    	JMP	short ext_kill_tail
 14638                                  find_done:
 14639 000020DB 31C0                    	XOR	AX,AX
 14640 000020DD AA                      	STOSB				; NUL terminate
 14641 000020DE C3                      	retn
 14642                                  
 14643                                  ;---------------------------------------------------------------------------
 14644                                  
 14645                                  	; 17/05/2019 - Retro DOS v4.0
 14646                                  GET_FAST_SEARCH:
 14647                                  	; 22/07/2018
 14648                                  	; MSDOS 6.0
 14649                                  	; 17/12/2022
 14650 000020DF 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14651                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14652                                  					;FO.trigger fastopen ;AN000;
 14653                                  	;call	DOS_SEARCH_FIRST
 14654                                  	;retn
 14655                                  	; 17/12/2022
 14656 000020E5 E94E0C                  	jmp	DOS_SEARCH_FIRST
 14657                                  
 14658                                  ;============================================================================
 14659                                  ; PATH.ASM, MSDOS 6.0, 1991
 14660                                  ;============================================================================
 14661                                  ; 06/08/2018 - Retro DOS v3.0
 14662                                  ; 17/05/2019 - Retro DOS v4.0
 14663                                  
 14664                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14665                                  
 14666                                  ;**	Directory related system calls. These will be passed direct text of the
 14667                                  ;	pathname from the user. They will need to be passed through the macro
 14668                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14669                                  ;	defined in DISPATCH. The system calls are:
 14670                                  ;
 14671                                  ;	$CURRENT_DIR  Written
 14672                                  ;	$RMDIR	  Written
 14673                                  ;	$CHDIR	  Written
 14674                                  ;	$MKDIR	  Written
 14675                                  ;
 14676                                  ;
 14677                                  ;	Modification history:
 14678                                  ;
 14679                                  ;	    Created: ARR 4 April 1983
 14680                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14681                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14682                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14683                                  ;				    current directory.
 14684                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14685                                  
 14686                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14687                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14688                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14689                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14690                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14691                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14692                                  ;	I_Need	cMeta,BYTE
 14693                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14694                                  
 14695                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14696                                  ;----------------------------------------------------------------------------
 14697                                  ;
 14698                                  ;   Procedure Name : $CURRENT_DIR
 14699                                  ;
 14700                                  ;   Assembler usage:
 14701                                  ;		LDS	SI,area
 14702                                  ;		MOV	DL,drive
 14703                                  ;		INT	21h
 14704                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14705                                  ;	    ; current directory.
 14706                                  ;   Error returns:
 14707                                  ;	    AX = error_invalid_drive
 14708                                  ;
 14709                                  ;----------------------------------------------------------------------------
 14710                                  
 14711                                  _$CURRENT_DIR:
 14712                                  	;06/08/2018 - Retro DOS v3.0
 14713                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14714 000020E8 E822F2                  	call	ECritDisk
 14715 000020EB 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14716 000020ED E87E49                  	call	GetVisDrv		; grab it
 14717 000020F0 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14718                                  CurdirErr:
 14719 000020F2 E833F2                  	call	LCritDisk
 14720                                  
 14721                                  	; MSDOS 3.3
 14722                                  	;mov	al,0Fh
 14723                                  	
 14724                                  	; MSDOS 6.0
 14725 000020F5 1E                      	push	ds
 14726 000020F6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14727 000020FB A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14728 000020FE 1F                      	pop	ds
 14729                                  
 14730                                  curdir_errj:
 14731 000020FF E93EE5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14732                                  
 14733                                  CurrentValidate:
 14734 00002102 1E                      	push	ds			; save destination
 14735 00002103 56                      	push	si
 14736                                  	
 14737                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14738                                  	
 14739                                  	; MSDOS 6.0
 14740 00002104 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14741 00002109 C536[A205]              	lds     si,[THISCDS]
 14742                                  
 14743                                  ; 16/12/2022
 14744                                  %if 0
 14745                                  	; 09/11/2022 (following test instruction is nonsense!)
 14746                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14747                                  
 14748                                  	;test	word [si+43h],8000h
 14749                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14750                                  	;jnz	short $+2  ; 09/11/2022	
 14751                                  	jnz	short DoCheck
 14752                                  %endif
 14753                                  
 14754                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14755                                  ; media check.
 14756                                  ;	CMP	word [SI+curdir.ID],0
 14757                                  ;	JZ	short GetDst
 14758                                  DoCheck:
 14759                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14760                                  
 14761                                  	; MSDOS 6.0
 14762 0000210D 1E                      	push	ds
 14763 0000210E 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14764 00002113 C606[4C03]00            	mov	byte [NoSetDir],0
 14765 00002118 1F                      	pop	ds
 14766                                  
 14767 00002119 BF[BE03]                	MOV	DI,OPENBUF
 14768 0000211C E83521                  	call	ValidateCDS		; output is ES:DI -> CDS
 14769                                  
 14770 0000211F 06                      	push	es	 		; swap source and destination
 14771 00002120 57                      	push	di
 14772 00002121 5E                      	pop	si
 14773 00002122 1F                      	pop	ds
 14774                                  GetDst:
 14775 00002123 5F                      	pop	di
 14776 00002124 07                      	pop	es			; get real destination
 14777 00002125 72CB                    	JC	short CurdirErr
 14778                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14779                                  	;
 14780                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14781                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14782                                  	; 16/12/2022
 14783                                  	;add	si,0  ; add si,curdir.text
 14784                                  	;
 14785                                  	;add	si,[si+4Fh] ; 17/05/2019
 14786 00002127 03744F                  	ADD	SI,[SI+curdir.end]
 14787 0000212A 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14788 0000212D 7501                    	JNZ	short CurrentCopy
 14789 0000212F 46                      	INC	SI
 14790                                  CurrentCopy:
 14791                                  ;	call	FStrCpy
 14792                                  ;; 10/29/86 E5 char
 14793 00002130 50                      	PUSH	AX
 14794 00002131 AC                      	LODSB				; get char
 14795 00002132 08C0                    	OR	AL,AL
 14796 00002134 7413                    	JZ	short FOK
 14797 00002136 3C05                    	CMP	AL,05H
 14798 00002138 740D                    	JZ	short FCHANGE
 14799 0000213A EB01                    	JMP	short FFF
 14800                                  FCPYNEXT:
 14801 0000213C AC                      	LODSB				; get char
 14802                                  FFF:
 14803 0000213D 3C5C                    	CMP	AL,'\'			; beginning of directory
 14804 0000213F 7508                    	JNZ	short FOK		; no
 14805 00002141 AA                      	STOSB				; put into user's buffer
 14806 00002142 AC                      	LODSB				; 1st char of dir is 05?
 14807 00002143 3C05                    	CMP	AL,05H
 14808 00002145 7502                    	JNZ	short FOK		; no
 14809                                  FCHANGE:
 14810 00002147 B0E5                    	MOV	AL,0E5H			; make it E5
 14811                                  FOK:
 14812 00002149 AA                      	STOSB				; put into user's buffer
 14813 0000214A 08C0                    	OR	AL,AL			; final char
 14814 0000214C 75EE                    	JNZ	short FCPYNEXT		; no
 14815 0000214E 58                      	POP	AX
 14816                                  
 14817                                  ;; 10/29/86 E5 char
 14818 0000214F 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14819 00002151 E8D4F1                  	call	LCritDisk
 14820 00002154 E9E0E4                  	jmp	SYS_RET_OK		; no more, bye!
 14821                                  
 14822                                  ; 17/05/2019 - Retro DOS v4.0
 14823                                  
 14824                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14825                                  
 14826                                  ;BREAK <$RmDir -- Remove a directory>
 14827                                  ;----------------------------------------------------------------------------
 14828                                  ;
 14829                                  ; Procedure Name : $RmDir
 14830                                  ;
 14831                                  ; Inputs:
 14832                                  ;	DS:DX Points to asciz name
 14833                                  ; Function:
 14834                                  ;	Delete directory if empty
 14835                                  ; Returns:
 14836                                  ;	STD XENIX Return
 14837                                  ;	AX = error_path_not_found If path bad
 14838                                  ;	AX = error_access_denied If
 14839                                  ;		Directory not empty
 14840                                  ;		Path not directory
 14841                                  ;		Root directory specified
 14842                                  ;		Directory malformed (. and .. not first two entries)
 14843                                  ;		User tries to delete a current directory
 14844                                  ;	AX = error_current_directory
 14845                                  ;
 14846                                  ;----------------------------------------------------------------------------
 14847                                  
 14848                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14849                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14850                                  
 14851                                  _$RMDIR:
 14852 00002157 52                      	push	dx			; Save ptr to name
 14853 00002158 1E                      	push	ds
 14854 00002159 89D6                    	mov	si,dx			; Load ptr into si
 14855 0000215B BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14856 0000215E 57                      	push	di
 14857 0000215F E80B4A                  	call	TransPathNoSet		; Translate the name
 14858 00002162 5F                      	pop	di			; di = ptr to buf for trans name
 14859 00002163 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14860 00002165 1F                      	pop	ds
 14861 00002166 5A                      	pop	dx			; Restore the name
 14862                                  	;mov	al,3
 14863 00002167 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14864                                  	; 16/12/2022
 14865                                  rmdir_errj: ; 10/08/2018
 14866                                  chdir_errj:
 14867 00002169 EB94                    	jmp	short curdir_errj
 14868                                  	;jmp	SYS_RET_ERR
 14869                                  rmlset:
 14870 0000216B 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14871 00002171 7512                    	Jnz	short rmerr		;	return (-1);
 14872 00002173 16                      	push	ss
 14873 00002174 07                      	pop	es
 14874 00002175 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14875                                  rmloop: 
 14876 00002177 E86549                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14877 0000217A 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14878 0000217C E832F0                  	call	StrCmp			; Are the 2 paths the same?
 14879 0000217F 7404                    	jz	short rmerr		; Yes, report error.
 14880 00002181 FEC0                    	inc	al			; No, inc al to next drive number
 14881 00002183 EBF2                    	jmp	short rmloop		; Go check next drive.
 14882                                  rmerr:
 14883 00002185 1F                      	pop	ds
 14884 00002186 5A                      	pop	dx			; Restore the name
 14885                                  	;mov	al,10h
 14886 00002187 B010                    	mov	al,error_current_directory ; error
 14887                                  	; 16/12/2022
 14888                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14889                                  ;chdir_errj:
 14890 00002189 EBDE                    	jmp	short rmdir_errj
 14891                                  rmcont:
 14892 0000218B 1F                      	pop	ds
 14893 0000218C 5A                      	pop	dx			; Restore the name
 14894 0000218D BE[F731]                	MOV	SI,DOS_RMDIR
 14895 00002190 EB7C                    	JMP	DoDirCall
 14896                                  
 14897                                  ; 17/05/2019 - Retro DOS v4.0
 14898                                  
 14899                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14900                                  
 14901                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14902                                  ;----------------------------------------------------------------------------
 14903                                  ;
 14904                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14905                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14906                                  ; several cases to consider:
 14907                                  ;
 14908                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14909                                  ;	it into a WFP.	We verify the existance of this directory and then
 14910                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14911                                  ;	directory cluster.
 14912                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14913                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14914                                  ;	WFP back into the CDS.
 14915                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14916                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14917                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14918                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14919                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14920                                  ;	to process the path but to return the logical CDS and the logical
 14921                                  ;	path.  We then copy the logical path into the logical CDS.
 14922                                  ;
 14923                                  ; Inputs:
 14924                                  ;	DS:DX Points to asciz name
 14925                                  ; Returns:
 14926                                  ;	STD XENIX Return
 14927                                  ;	AX = chdir_path_not_found if error
 14928                                  ;
 14929                                  ;----------------------------------------------------------------------------
 14930                                  
 14931                                  _$CHDIR:
 14932 00002192 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14933 00002195 89D6                    	MOV	SI,DX			; get source
 14934 00002197 E8C749                  	call	TransPath		; go munge the path and get real CDS
 14935 0000219A 7304                    	JNC	short ChDirCrack	; no errors, try path
 14936                                  ChDirErrP:
 14937                                  	;mov	al,3
 14938 0000219C B003                    	MOV	AL,error_path_not_found
 14939                                  ChDirErr:
 14940                                  	;jmp	SYS_RET_ERR 	; oops!
 14941                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14942 0000219E EBC9                    	jmp	short chdir_errj
 14943                                  
 14944                                  ChDirCrack:
 14945 000021A0 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14946 000021A5 75F5                    	JNZ	short ChDirErrP
 14947                                  
 14948                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14949                                  ; found.
 14950                                  
 14951 000021A7 C43E[A205]              	LES	DI,[THISCDS]
 14952 000021AB 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14953 000021AE 74EC                    	JZ	short ChDirErrP		;	error ();
 14954                                  
 14955                                  ; Find out if the directory exists.
 14956                                  
 14957 000021B0 E80110                  	call	DOS_CHDIR
 14958                                  	;Jc	short ChDirErr
 14959                                  	; 16/12/2022
 14960 000021B3 72B4                    	jc	short chdir_errj
 14961                                  ;
 14962                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14963                                  ; not network). If one was seen, all we need to do is copy in the text
 14964                                  ;
 14965 000021B5 C43E[A205]              	LES	DI,[THISCDS]
 14966                                  	;test	word [es:di+43h],2000h
 14967                                  	; 17/12/2022
 14968 000021B9 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14969                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14970 000021BE 7425                    	JZ	short GotCDS
 14971                                  
 14972                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14973                                  
 14974 000021C0 06                      	push	es	
 14975 000021C1 57                      	push	di
 14976 000021C2 51                      	push	cx			; save CDS and cluster...
 14977 000021C3 E8BBE2                  	call	Get_User_Stack		; get original text
 14978                                  	
 14979                                  	;mov	di,[si+6]
 14980 000021C6 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14981                                  	;mov	ds,[si+0Eh]
 14982 000021C9 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14983                                  	
 14984 000021CC BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14985 000021CF 87F7                    	XCHG	SI,DI
 14986 000021D1 30C0                    	XOR	AL,AL			; do no splicing
 14987 000021D3 57                      	push	di
 14988 000021D4 E89649                  	call	TransPathNoSet		; Munge path
 14989 000021D7 5E                      	pop	si
 14990                                  
 14991                                  ; There should NEVER be an error here.
 14992                                  
 14993                                  ;IF FALSE
 14994                                  ;	JNC SKipErr
 14995                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14996                                  ;SkipErr:
 14997                                  ;ENDIF
 14998 000021D8 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14999                                  	;mov	word [es:di+49h],-1
 15000 000021DC 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15001                                  					; no valid cluster here...
 15002 000021E2 59                      	pop	cx
 15003 000021E3 5F                      	pop	di
 15004 000021E4 07                      	pop	es
 15005                                  
 15006                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15007                                  
 15008                                  GotCDS:
 15009                                  
 15010                                  ; wfp_start points to the text. See if it is long enough
 15011                                  
 15012                                  	; MSDOS 3.3
 15013                                  	;push	ss
 15014                                  	;pop	ds
 15015                                  	;mov	si,[WFP_START]
 15016                                  	;push	cx
 15017                                  	;call	DStrLen
 15018                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15019                                  	;pop	cx
 15020                                  	;ja	short ChDirErrP
 15021                                  
 15022                                  	; MSDOS 6.0
 15023 000021E5 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15024 000021E8 77B2                    	JA	short ChDirErrP
 15025                                  	; MSDOS 3.3 & MSDOS 6.0
 15026                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15027                                  	; 17/12/2022
 15028 000021EA 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15029 000021EF 7512                    	JNZ	short SkipRecency
 15030                                  	; MSDOS 6.0
 15031                                  	;test	word [es:di+43h],2000h
 15032                                  	; 17/12/2022
 15033 000021F1 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15034                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15035                                  					;PTM. for Join and Subst ;AN000;
 15036 000021F6 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15037 000021F8 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15038                                  setdirclus:
 15039                                  	;mov	[es:di+49h],cx
 15040 000021FB 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15041 000021FF C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15042                                  SkipRecency:
 15043 00002203 E8DCEF                  	call	FStrCpy
 15044 00002206 30C0                    	XOR	AL,AL
 15045                                  mkdir_ok:
 15046 00002208 E92CE4                  	jmp	SYS_RET_OK
 15047                                  
 15048                                  ; 17/05/2019 - Retro DOS v4.0
 15049                                  
 15050                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15051                                  
 15052                                  ;BREAK <$MkDir - Make a directory entry>
 15053                                  ;---------------------------------------------------------------------------
 15054                                  ;
 15055                                  ; Procedure Name : $MkDir
 15056                                  ; Inputs:
 15057                                  ;	DS:DX Points to asciz name
 15058                                  ; Function:
 15059                                  ;	Make a new directory
 15060                                  ; Returns:
 15061                                  ;	STD XENIX Return
 15062                                  ;	AX = mkdir_path_not_found if path bad
 15063                                  ;	AX = mkdir_access_denied  If
 15064                                  ;		Directory cannot be created
 15065                                  ;		Node already exists
 15066                                  ;		Device name given
 15067                                  ;		Disk or directory(root) full
 15068                                  ;---------------------------------------------------------------------------
 15069                                  
 15070                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15071                                  
 15072                                  _$MKDIR:
 15073 0000220B BE[C430]                	MOV	SI,DOS_MKDIR
 15074                                  DoDirCall:
 15075 0000220E BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15076                                  
 15077 00002211 56                      	push	si
 15078 00002212 89D6                    	MOV	SI,DX			; get source
 15079 00002214 E84A49                  	call	TransPath		; go munge the path
 15080 00002217 5E                      	pop	si
 15081 00002218 7305                    	JNC	short MkDirCrack	; no errors, try path
 15082                                  MkErrP:
 15083 0000221A B003                    	MOV	AL,error_path_not_found	; oops!
 15084                                  MkErr:
 15085 0000221C E921E4                  	jmp	SYS_RET_ERR
 15086                                  MkDirCrack:
 15087 0000221F 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15088 00002225 75F3                    	JNZ	short MkErrP
 15089                                  
 15090                                  	; MSDOS 3.3
 15091                                  	;push	ss
 15092                                  	;pop	ds
 15093                                  	;call	si
 15094                                  	;jb	short MkErr
 15095                                  	;;jmp	short mkdir_ok
 15096                                  	;jmp	SYS_RET_OK
 15097                                  
 15098                                  	; MSDOS 6.0
 15099 00002227 56                      	PUSH	SI			;PTM.			;AN000;
 15100 00002228 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15101 0000222B 5E                      	POP	SI			;PTM.			;AN000;
 15102 0000222C 7604                    	JBE	short pathok		;PTM.			;AN000;
 15103                                  	;mov	al,5
 15104 0000222E B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15105                                  	;jmp	SYS_RET_ERR		;PTM.
 15106 00002230 EBEA                    	jmp	short MkErr
 15107                                  pathok:
 15108 00002232 FFD6                    	CALL	SI			; go get file
 15109 00002234 72E6                    	JC	short MkErr		; no errors
 15110                                  	; 16/12/2022
 15111                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15112 00002236 EBD0                    	jmp	short mkdir_ok
 15113                                  	;jmp	SYS_RET_OK
 15114                                  
 15115                                  ;----------------------------------------------------------------------------
 15116                                  ;
 15117                                  ; Procedure Name : Check_PathLen
 15118                                  ;
 15119                                  ; Inputs:
 15120                                  ;	nothing
 15121                                  ; Function:
 15122                                  ;	check if final path length greater than 67
 15123                                  ; Returns:
 15124                                  ;	Above flag set if > 67
 15125                                  ;
 15126                                  ;---------------------------------------------------------------------------
 15127                                  
 15128                                  Check_PathLen:
 15129                                  	; 09/09/2018
 15130                                  	;mov	SI,[WFP_START]
 15131 00002238 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15132                                  Check_PathLen2:
 15133 0000223D 16                      	push	ss
 15134 0000223E 1F                      	pop	ds
 15135                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15136 0000223F 51                      	push	CX	
 15137 00002240 E8B6EF                  	CALL	DStrLen
 15138 00002243 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15139 00002246 59                      	POP	CX
 15140 00002247 C3                      	retn
 15141                                  
 15142                                  ;============================================================================
 15143                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15144                                  ;============================================================================
 15145                                  ; 07/08/2018 - Retro DOS v3.0
 15146                                  ; 17/05/2019 - Retro DOS v4.0
 15147                                  
 15148                                  ;**	IOCTL system call.
 15149                                  ;----------------------------------------------------------------------------
 15150                                  ;	$IOCTL
 15151                                  ;
 15152                                  ;	  Revision history:
 15153                                  ;
 15154                                  ;		Created: ARR 4 April 1983
 15155                                  ;
 15156                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15157                                  ;
 15158                                  ;		A000	version 4.00	Jan. 1988
 15159                                  ;
 15160                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15161                                  ;
 15162                                  
 15163                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15164                                  ;---------------------------------------------------------------------------
 15165                                  ;
 15166                                  ;   Assembler usage:
 15167                                  ;	    MOV     BX, Handle
 15168                                  ;	    MOV     DX, Data
 15169                                  ;
 15170                                  ;	(or LDS     DX,BUF
 15171                                  ;	    MOV     CX,COUNT)
 15172                                  ;
 15173                                  ;	    MOV     AH, Ioctl
 15174                                  ;	    MOV     AL, Request
 15175                                  ;	    INT     21h
 15176                                  ;
 15177                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15178                                  ;	    attribute word in DX, handle in BX:
 15179                                  ;	    DH = high word of device driver attributes
 15180                                  ;	    DL = low byte of sf_flags
 15181                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15182                                  ;	    in BX.
 15183                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15184                                  ;	    into DS:DX.  Return number read in AX.
 15185                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15186                                  ;	    DS:DX.  Return bytes written in AX.
 15187                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15188                                  ;	    into DS:DX.  Return number read in AX.
 15189                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15190                                  ;	    DS:DX.  Return bytes written in AX.
 15191                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15192                                  ;	    device, AL = 0FFh, otherwise 0.
 15193                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15194                                  ;	    device, AL = 0FFh, otherwise 0.
 15195                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15196                                  ;	    removable media, 0 otherwise.
 15197                                  ;	 9  Return the contents of the device attribute word in DX for the
 15198                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15199                                  ;	    network. 8000h is the bit for local use.
 15200                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15201                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15202                                  ;	    the count and CX is the delay.
 15203                                  ;
 15204                                  ;   Error returns:
 15205                                  ;	    AX = error_invalid_handle
 15206                                  ;	       = error_invalid_function
 15207                                  ;	       = error_invalid_data
 15208                                  ;
 15209                                  ;-------------------------------------------------------------------------------
 15210                                  ;
 15211                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15212                                  ;   than the above
 15213                                  ;
 15214                                  ;	There are several basic forms of IOCTL calls:
 15215                                  ;
 15216                                  ;
 15217                                  ;	** Get/Set device information:	**
 15218                                  ;
 15219                                  ;	ENTRY	(AL) = function code
 15220                                  ;		  0 - Get device information
 15221                                  ;		  1 - Set device information
 15222                                  ;		(BX) = file handle
 15223                                  ;		(DX) = info for "Set Device Information"
 15224                                  ;	EXIT	'C' set if error
 15225                                  ;		  (AX) = error code
 15226                                  ;		'C' clear if OK
 15227                                  ;		  (DX) = info for "Get Device Information"
 15228                                  ;	USES	ALL
 15229                                  ;
 15230                                  ;
 15231                                  ;	**  Read/Write Control Data From/To Handle  **
 15232                                  ;
 15233                                  ;	ENTRY	(AL) = function code
 15234                                  ;		  2 - Read device control info
 15235                                  ;		  3 - Write device control info
 15236                                  ;		(BX) = file handle
 15237                                  ;		(CX) = transfer count
 15238                                  ;		(DS:DX) = address for data
 15239                                  ;	EXIT	'C' set if error
 15240                                  ;		  (AX) = error code
 15241                                  ;		'C' clear if OK
 15242                                  ;		  (AX) = count of bytes transfered
 15243                                  ;	USES	ALL
 15244                                  ;
 15245                                  ;
 15246                                  ;	**  Read/Write Control Data From/To Block Device  **
 15247                                  ;
 15248                                  ;	ENTRY	(AL) = function code
 15249                                  ;		  4 - Read device control info
 15250                                  ;		  5 - Write device control info
 15251                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15252                                  ;		(CX) = transfer count
 15253                                  ;		(DS:DX) = address for data
 15254                                  ;	EXIT	'C' set if error
 15255                                  ;		  (AX) = error code
 15256                                  ;		'C' clear if OK
 15257                                  ;		  (AX) = count of bytes transfered
 15258                                  ;	USES	ALL
 15259                                  ;
 15260                                  ;
 15261                                  ;	**  Get Input/Output Status  **
 15262                                  ;
 15263                                  ;	ENTRY	(AL) = function code
 15264                                  ;		  6 - Get Input status
 15265                                  ;		  7 - Get Output Status
 15266                                  ;		(BX) = file handle
 15267                                  ;	EXIT	'C' set if error
 15268                                  ;		  (AX) = error code
 15269                                  ;		'C' clear if OK
 15270                                  ;		  (AL) = 00 if not ready
 15271                                  ;		  (AL) = FF if ready
 15272                                  ;	USES	ALL
 15273                                  ;
 15274                                  ;
 15275                                  ;	**  Get Drive Information  **
 15276                                  ;
 15277                                  ;	ENTRY	(AL) = function code
 15278                                  ;		  8 - Check for removable media
 15279                                  ;		  9 - Get device attributes
 15280                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15281                                  ;	EXIT	'C' set if error
 15282                                  ;		  (AX) = error code
 15283                                  ;		'C' clear if OK
 15284                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15285                                  ;		  (DX) = device attribute word (func. 9)
 15286                                  ;	USES	ALL
 15287                                  ;
 15288                                  ;
 15289                                  ;	**  Get Redirected bit	**
 15290                                  ;
 15291                                  ;	ENTRY	(AL) = function code
 15292                                  ;		  0Ah - Network stuff
 15293                                  ;		(BX) = file handle
 15294                                  ;	EXIT	'C' set if error
 15295                                  ;		  (AX) = error code
 15296                                  ;		'C' clear if OK
 15297                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15298                                  ;	USES	ALL
 15299                                  ;
 15300                                  ;
 15301                                  ;	**  Change sharer retry parameters  **
 15302                                  ;
 15303                                  ;	ENTRY	(AL) = function code
 15304                                  ;		  0Bh - Set retry parameters
 15305                                  ;		(CX) = retry loop count
 15306                                  ;		(DX) = number of retries
 15307                                  ;	EXIT	'C' set if error
 15308                                  ;		  (AX) = error code
 15309                                  ;		'C' clear if OK
 15310                                  ;	USES	ALL
 15311                                  ;
 15312                                  ;
 15313                                  ;   =================================================================
 15314                                  ;
 15315                                  ;	**  New Standard Control  **
 15316                                  ;
 15317                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15318                                  ;	FORMS ARE OBSOLETE.
 15319                                  ;
 15320                                  ;   =================================================================
 15321                                  ;
 15322                                  ;	ENTRY	(AL) = function code
 15323                                  ;		  0Ch - Control Function subcode
 15324                                  ;		(BX) = File Handle
 15325                                  ;		(CH) = Category Indicator
 15326                                  ;		(CL) = Function within category
 15327                                  ;		(DS:DX) = address for data, if any
 15328                                  ;		(SI) = Passed to device as argument, use depends upon function
 15329                                  ;		(DI) = Passed to device as argument, use depends upon function
 15330                                  ;	EXIT	'C' set if error
 15331                                  ;		  (AX) = error code
 15332                                  ;		'C' clear if OK
 15333                                  ;		  (SI) = Return value, meaning is function dependent
 15334                                  ;		  (DI) = Return value, meaning is function dependent
 15335                                  ;		  (DS:DX) = Return address, use is function dependent
 15336                                  ;	USES	ALL
 15337                                  ;
 15338                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15339                                  ;     (See inc\ioctl.inc for more info)
 15340                                  ;
 15341                                  ;	ENTRY	(AL) = function code
 15342                                  ;		  0Dh - Control Function subcode
 15343                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15344                                  ;		(CH) = Category Indicator
 15345                                  ;		(CL) = Function within category
 15346                                  ;		(DS:DX) = address for data, if any
 15347                                  ;		(SI) = Passed to device as argument, use depends upon function
 15348                                  ;		(DI) = Passed to device as argument, use depends upon function
 15349                                  ;
 15350                                  ;	EXIT	'C' set if error
 15351                                  ;		  (AX) = error code
 15352                                  ;		'C' clear if OK
 15353                                  ;		  (DS:DX) = Return address, use is function dependent
 15354                                  ;	USES	ALL
 15355                                  ;
 15356                                  ;---------------------------------------------------------------------------
 15357                                  	
 15358                                  	; 17/05/2019 - Retro DOS v4.0
 15359                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15360                                  
 15361                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15362                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15363                                  
 15364                                  IOCTLJMPTABLE:	;label	word
 15365                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15366 00002248 [8422]                  	dw	ioctl_getset_data	; 0
 15367 0000224A [8422]                  	dw	ioctl_getset_data   	; 1
 15368 0000224C [D422]                  	dw	ioctl_control_string	; 2
 15369 0000224E [D422]                  	dw	ioctl_control_string	; 3
 15370 00002250 [2824]                  	dw	ioctl_get_dev		; 4
 15371 00002252 [2824]                  	dw	ioctl_get_dev		; 5
 15372 00002254 [EE22]                  	dw	ioctl_status		; 6
 15373 00002256 [EE22]                  	dw	ioctl_status		; 7
 15374 00002258 [8F23]                  	dw	ioctl_rem_media		; 8
 15375 0000225A [CD23]                  	dw	ioctl_drive_attr	; 9
 15376 0000225C [1A24]                  	dw	ioctl_handle_redir	; A
 15377 0000225E [0A23]                  	dw	Set_Retry_Parameters	; B
 15378 00002260 [1823]                  	dw	GENERICIOCTLHANDLE	; C
 15379 00002262 [2F23]                  	dw	GENERICIOCTL		; D
 15380                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15381 00002264 [D924]                  	dw	ioctl_drive_owner	; E
 15382 00002266 [D924]                  	dw	ioctl_drive_owner	; F
 15383                                  	; MSDOS 6.0
 15384 00002268 [1823]                  	dw	query_handle_support	; 10h
 15385 0000226A [2F23]                  	dw	query_device_support	; 11h
 15386                                  
 15387                                  	; 11/11/2022
 15388                                  _$IOCTL:
 15389 0000226C 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15390 0000226E 16                      	push	ss
 15391 0000226F 1F                      	pop	ds			;hkn; SS is DOSDATA
 15392                                  
 15393                                  	; MSDOS 3.3
 15394                                  	;cmp	al,0Fh 
 15395                                  	; MSDOS 6.0
 15396 00002270 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15397 00002272 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15398                                  
 15399                                  	; 14/01/2024
 15400                                  	; 28/05/2019
 15401                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15402 00002274 89C7                    	mov	di,ax			; di NOT a PARM
 15403 00002276 81E7FF00                	and	di,0FFh			; di = al
 15404 0000227A D1E7                    	shl	di,1			; di = index into jmp table
 15405                                  	;pop	AX			; Restore AL for generic IOCTL
 15406                                  
 15407 0000227C 2EFFA5[4822]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15408                                  
 15409                                  ioctl_bad_funj2:
 15410 00002281 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15411                                  
 15412                                  ;--------------------------------------------------------------------------
 15413                                  ;
 15414                                  ; IOCTL: AL = 0,1
 15415                                  ;
 15416                                  ; ENTRY: DS = DOSDATA
 15417                                  ;
 15418                                  ;--------------------------------------------------------------------------
 15419                                  
 15420                                  ioctl_getset_data:
 15421                                  	; MSDOS 6.0
 15422 00002284 E8DF43                  	call	SFFromHandle		; ES:DI -> SFT
 15423 00002287 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15424                                  ioctl_bad_handle:
 15425                                  	;mov	al,6
 15426 00002289 B006                    	mov	al,error_invalid_handle
 15427                                  ioctl_error:
 15428 0000228B E9B2E3                  	jmp	SYS_RET_ERR
 15429                                  
 15430                                  ioctl_check_permissions:
 15431 0000228E 3C00                    	CMP	AL,0
 15432                                  	;mov	al,[es:di+5]
 15433 00002290 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15434 00002294 741B                    	JZ	short ioctl_read	; read the byte
 15435                                  
 15436 00002296 08F6                    	or	dh,dh
 15437 00002298 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15438                                  	;mov	al,0Dh
 15439 0000229A B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15440                                  	;jmp	SYS_RET_ERR
 15441 0000229C EBED                    	jmp	short ioctl_error
 15442                                  
 15443                                  ioctl_check_device:
 15444 0000229E A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15445 000022A0 74DF                    	jz	short ioctl_bad_funj2
 15446 000022A2 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15447                                  					;   device bit!! He can muck with the
 15448                                  					;   others at will.
 15449 000022A5 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15450 000022AA 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15451                                  ioctl_ok:
 15452 000022AE E986E3                  	jmp	SYS_RET_OK
 15453                                  
 15454                                  ioctl_read:
 15455 000022B1 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15456 000022B6 30E4                    	XOR	AH,AH
 15457 000022B8 A880                    	test	AL,devid_device 	; Should I set high byte
 15458 000022BA 740D                    	JZ	short ioctl_no_high	; no
 15459 000022BC C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15460                                  	;les	di,[es:di+7]
 15461 000022C1 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15462                                  	;mov	ah,[es:di+5]
 15463 000022C5 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15464                                  ioctl_no_high:
 15465 000022C9 89C2                    	MOV	DX,AX
 15466                                  ioctl_set_dx:	; 16/12/2022
 15467 000022CB E8B3E1                  	call	Get_User_Stack
 15468                                  	;mov	[si+6],dx
 15469 000022CE 895406                  	MOV	[SI+user_env.user_DX],DX
 15470                                  	;;jmp	SYS_RET_OK
 15471                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15472                                  ioctl_ok_j:
 15473                                  	; 16/12/2022
 15474 000022D1 E966E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15475                                  	;jmp	short ioctl_ok
 15476                                  	; 26/07/2019
 15477                                  	;jmp	SYS_RET_OK_clc
 15478                                  
 15479                                  ;--------------------------------------------------------------------------
 15480                                  ;
 15481                                  ; IOCTL: AL = 2,3
 15482                                  ;
 15483                                  ; ENTRY: DS = DOSDATA
 15484                                  ;	 SI = user's DS
 15485                                  ;
 15486                                  ;--------------------------------------------------------------------------
 15487                                  
 15488                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15489                                  ioctl_control_string:
 15490 000022D4 E88F43                  	call	SFFromHandle		; ES:DI -> SFT
 15491 000022D7 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15492                                  	; 07/12/2022
 15493                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15494                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15495                                  	; MSDOS 5.0 & MSDOS 6.0
 15496 000022D9 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15497 000022DE 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15498 000022E0 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15499 000022E5 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15500 000022E9 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15501 000022EB E94201                  	JMP	ioctl_do_string
 15502                                  
 15503                                  ;--------------------------------------------------------------------------
 15504                                  ;
 15505                                  ; IOCTL: AL = 6,7
 15506                                  ;
 15507                                  ; ENTRY: DS = DOSDATA
 15508                                  ;
 15509                                  ;--------------------------------------------------------------------------
 15510                                  
 15511                                  ioctl_status:
 15512 000022EE B401                    	MOV	AH,1
 15513 000022F0 2C06                    	SUB	AL,6			; 6=0,7=1
 15514 000022F2 7402                    	JZ	short ioctl_get_status
 15515 000022F4 B403                    	MOV	AH,3
 15516                                  ioctl_get_status:
 15517 000022F6 50                      	PUSH	AX
 15518 000022F7 E85013                  	call	GET_IO_SFT
 15519 000022FA 58                      	POP	AX
 15520                                  	;JNC	short DO_IOFUNC
 15521                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15522                                  	; 16/12/2022
 15523 000022FB 728C                    	jc	short ioctl_bad_handle
 15524                                  DO_IOFUNC:
 15525 000022FD E88F21                  	call	IOFUNC
 15526 00002300 88C4                    	MOV	AH,AL
 15527 00002302 B0FF                    	MOV	AL,0FFH
 15528 00002304 7502                    	JNZ	short ioctl_status_ret
 15529 00002306 FEC0                    	INC	AL
 15530                                  ioctl_status_ret:
 15531                                  	;jmp	SYS_RET_OK
 15532                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15533                                  	;jmp	short ioctl_ok_j
 15534                                  	; 16/12/2022
 15535 00002308 EBA4                    	jmp	short ioctl_ok
 15536                                  
 15537                                  ;--------------------------------------------------------------------------
 15538                                  ;
 15539                                  ; IOCTL: AL = B
 15540                                  ;
 15541                                  ; ENTRY: DS = DOSDATA
 15542                                  ;
 15543                                  ;--------------------------------------------------------------------------
 15544                                  
 15545                                  Set_Retry_Parameters:
 15546                                  	; 09/09/2018
 15547 0000230A 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15548 0000230E 09D2                    	OR	DX,DX			; zero retries not allowed
 15549 00002310 7475                    	JZ	short ioctl_bad_fun
 15550 00002312 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15551                                  doneok:
 15552                                  	;jmp	SYS_RET_OK		; Done
 15553                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15554                                  	;jmp	short ioctl_status_ret
 15555                                  	; 16/12/2022
 15556 00002316 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15557                                  
 15558                                  ;--------------------------------------------------------------------------
 15559                                  ;
 15560                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15561                                  ;
 15562                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15563                                  ;	SI:DX -> Users Device Parameter Table
 15564                                  ;	IOCALL -> IOCTL_Req structure
 15565                                  ;
 15566                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15567                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15568                                  ;	call.
 15569                                  ;
 15570                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15571                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15572                                  ;         return address off the stack if the drive is invalid.
 15573                                  ;
 15574                                  ;--------------------------------------------------------------------------
 15575                                  
 15576                                  query_handle_support:	; Entry point for handles
 15577                                  GENERICIOCTLHANDLE:
 15578 00002318 E84B43                  	call	SFFromHandle		; Get SFT for device.
 15579 0000231B 726F                    	jc	short ioctl_bad_handlej
 15580                                  
 15581                                  	;test	word [es:di+5],8000h
 15582                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15583                                  	;test	byte [es:di+6],80h
 15584 0000231D 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15585 00002322 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15586                                  
 15587 00002324 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15588                                  	;les	di,[es:di+7]
 15589 00002329 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15590 0000232D EB0F                    	jmp	short Do_GenIOCTL
 15591                                  
 15592                                  query_device_support:	; Entry point for devices:
 15593                                  GENERICIOCTL:
 15594 0000232F C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15595 00002334 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15596 00002337 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15597                                  
 15598 00002339 E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15599 0000233C 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15600                                  
 15601                                  Do_GenIOCTL:
 15602                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15603                                  					; Can device handle Generic IOCTL funcs
 15604                                  	; 09/09/2018
 15605                                  	;test	byte [es:di+4],40h
 15606 0000233E 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15607 00002343 7442                    	jz	short ioctl_bad_fun
 15608                                  
 15609                                  	; 17/05/2019 - Retro DOS v4.0
 15610                                  
 15611                                  	; MSDOS 6.0
 15612                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15613 00002345 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15614                                  	;cmp	al,10h
 15615 0000234A 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15616 0000234C 7C0C                    	jl	short SetIOCtlBlock
 15617                                  	
 15618                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15619                                  	;test	byte [es:di+4],80h 
 15620 0000234E 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15621 00002353 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15622                                  	;
 15623                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15624 00002355 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15625                                  
 15626                                  SetIOCtlBlock:
 15627 0000235A 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15628 0000235B 57                      	PUSH	DI			; in DS:SI
 15629                                  					; Setup Generic IOCTL Request Block
 15630                                  	;mov	byte [IOCALL_REQLEN],23
 15631 0000235C C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15632                                  	; 07/09/2018 (MSDOS 3.3)
 15633                                  	;;mov	byte [IOCALL_REQFUNC],19
 15634                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15635                                  	;
 15636 00002361 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15637 00002365 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15638 00002369 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15639 0000236D 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15640 00002371 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15641 00002375 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15642 00002379 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15643                                  
 15644                                  ;hkn; IOCALL is in DOSDATA
 15645 0000237D BB[7C03]                	MOV	BX,IOCALL
 15646                                  
 15647 00002380 16                      	PUSH	SS
 15648 00002381 07                      	POP	ES
 15649                                  					; DS:SI -> Device header.
 15650 00002382 5E                      	POP	SI
 15651 00002383 1F                      	POP	DS
 15652                                  	; 10/08/2018
 15653 00002384 E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15654                                  
 15655                                  ioctl_bad_fun:
 15656 00002387 B001                    	mov	al, error_invalid_function  ; 1
 15657 00002389 E9B4E2                  	jmp	SYS_RET_ERR	
 15658                                  
 15659                                  ioctl_bad_handlej:
 15660 0000238C E9FAFE                  	jmp	ioctl_bad_handle
 15661                                  
 15662                                  ;---------------------------------------------------------------------------
 15663                                  ;
 15664                                  ; IOCTL: AL = 8
 15665                                  ;
 15666                                  ; ENTRY: DS = DOSDATA
 15667                                  ;
 15668                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15669                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15670                                  ;         return address off the stack if the drive is invalid.
 15671                                  ;
 15672                                  ;-------------------------------------------------------------------------
 15673                                  
 15674                                  ioctl_rem_media:
 15675                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15676 0000238F E82B01                  	CALL	Check_If_Net
 15677 00002392 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15678                                  					;   certainly don't know how to do this
 15679                                  					;   call.
 15680                                  	;test	word [es:di+4],800h
 15681                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15682                                  	;test	byte [es:di+5],8
 15683 00002394 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15684 00002399 74EC                    	JZ	short ioctl_bad_fun		; NO
 15685                                  
 15686                                  ;hkn; SS override for IOCALL
 15687 0000239B 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15688 000023A1 B00D                    	MOV	AL,REMHL  ; 13
 15689 000023A3 88DC                    	MOV	AH,BL			; Unit number
 15690 000023A5 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15691 000023A9 31C0                    	XOR	AX,AX
 15692 000023AB 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15693 000023AF 06                      	PUSH	ES
 15694 000023B0 1F                      	POP	DS
 15695 000023B1 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15696 000023B3 16                      	PUSH	SS
 15697 000023B4 07                      	POP	ES
 15698                                  
 15699                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15700 000023B5 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15701 000023B8 1E                      	push	ds
 15702 000023B9 56                      	push	si
 15703 000023BA E8A722                  	call	DEVIOCALL2
 15704 000023BD 5E                      	pop	si
 15705 000023BE 1F                      	pop	ds
 15706                                  
 15707                                  ;hkn; SS override
 15708 000023BF 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15709 000023C3 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15710 000023C6 B109                    	MOV	CL,9
 15711 000023C8 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15712                                  ioctl_da_ok_j:	; 11/11/2022
 15713 000023CA E96AE2                  	jmp	SYS_RET_OK
 15714                                  
 15715                                  ;-------------------------------------------------------------------------
 15716                                  ;
 15717                                  ; IOCTL: AL = 9
 15718                                  ;
 15719                                  ; ENTRY: DS = DOSDATA
 15720                                  ;
 15721                                  ;-------------------------------------------------------------------------
 15722                                  
 15723                                  ioctl_drive_attr:
 15724                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15725 000023CD 88D8                    	mov	al,bl
 15726 000023CF E8B846                  	call	GETTHISDRV
 15727 000023D2 7241                    	jc	short ioctl_drv_err
 15728 000023D4 E8B800                  	call	Get_Driver_BL
 15729                                  	; MSDOS 6.0
 15730 000023D7 723C                    	JC	short ioctl_drv_err	; drive not valid
 15731                                  
 15732                                  	;mov	dx,[es:di+4]
 15733 000023D9 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15734                                  					; get device attribute word
 15735 000023DD 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15736                                  
 15737                                  ;hkn; SS override
 15738 000023DF 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15739                                  	;test	word [es:di+43h],8000h
 15740                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15741                                  	;test	byte [es:di+44h],80h
 15742 000023E4 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15743 000023E9 7403                    	JZ	short IOCTLShare
 15744                                  
 15745                                  	;or	dx,1000h ; (MSDOS 3.3)
 15746                                  
 15747                                  ;	Net devices don't return a device attribute word.
 15748                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15749                                  
 15750 000023EB BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15751                                  IOCTLShare:
 15752 000023EE 16                      	push	ss
 15753 000023EF 1F                      	pop	ds
 15754 000023F0 BE[BE03]                	MOV	SI,OPENBUF
 15755 000023F3 80C341                  	ADD	BL,"A"	; 41h
 15756 000023F6 881C                    	MOV	[SI],BL
 15757 000023F8 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15758 000023FD B80003                  	MOV	AX,0300h
 15759 00002400 F8                      	CLC
 15760                                  	;INT	int_IBM
 15761 00002401 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15762                                  			; DS:SI -> ASCIZ disk device name 
 15763                                  			; (may be full path or only drive
 15764                                  			; specifier--must include the colon)
 15765                                  			; Return: CF clear if absolute disk access allowed
 15766 00002403 7303                    	JNC	short IOCTLLocal	; Not shared
 15767                                  	;OR	DX,0200H		; Shared, bit 9
 15768                                  	; 17/12/2022
 15769 00002405 80CE02                  	or	dh,02h
 15770                                  IOCTLLocal:
 15771                                  	;test	word [es:di+43h],1000h
 15772                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15773                                  	;test	byte [es:di+44h],10h
 15774 00002408 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15775                                  	;JZ	short ioctl_set_DX
 15776                                  	; 16/12/2022
 15777 0000240D 7403                    	jz	short _ioctl_set_DX
 15778                                  	;OR	DX,8000h
 15779                                  	; 17/12/2022
 15780 0000240F 80CE80                  	or	dh,80h
 15781                                  ;ioctl_set_DX:
 15782                                  _ioctl_set_DX:
 15783                                  	; 16/12/2022
 15784 00002412 E9B6FE                  	jmp	ioctl_set_dx
 15785                                  ; 16/12/2022
 15786                                  %if 0	
 15787                                  	call	Get_User_Stack
 15788                                  	MOV	[SI+user_env.user_DX],DX
 15789                                  	;;jmp	SYS_RET_OK
 15790                                  	;; 25/06/2019
 15791                                  	;jmp	SYS_RET_OK_clc
 15792                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15793                                  ioctl_gd_ok_j:
 15794                                  	jmp	short ioctl_da_ok_j
 15795                                  %endif
 15796                                  
 15797                                  ioctl_drv_err:
 15798 00002415 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15799                                  ioctl_gd_err_j:	; 11/11/2022
 15800 00002417 E926E2                  	jmp	SYS_RET_ERR
 15801                                  
 15802                                  ;--------------------------------------------------------------------------
 15803                                  ;
 15804                                  ; IOCTL: AL = A
 15805                                  ;
 15806                                  ; ENTRY: DS = DOSDATA
 15807                                  ;
 15808                                  ;--------------------------------------------------------------------------
 15809                                  
 15810                                  ioctl_handle_redir:
 15811 0000241A E84942                  	call	SFFromHandle		; ES:DI -> SFT
 15812 0000241D 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15813 0000241F E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15814                                  
 15815                                  ioctl_got_sft:
 15816                                  	;mov	dx,[es:di+5]
 15817 00002422 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15818                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15819                                  	; 16/12/2022
 15820 00002426 EBEA                    	jmp	short _ioctl_set_DX
 15821                                  
 15822                                  	; 16/12/2022
 15823                                  ;ioctl_bad_funj:
 15824                                  	;JMP	ioctl_bad_fun
 15825                                  
 15826                                  ;--------------------------------------------------------------------------
 15827                                  ;
 15828                                  ; IOCTL: AL= 4,5
 15829                                  ;
 15830                                  ; ENTRY: DS = DOSDATA
 15831                                  ;	 SI = user's DS
 15832                                  ;
 15833                                  ;
 15834                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15835                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15836                                  ;         return address off the stack if the drive is invalid.
 15837                                  ;
 15838                                  ;-------------------------------------------------------------------------
 15839                                  
 15840                                  ioctl_get_dev:
 15841 00002428 E89200                  	CALL	Check_If_Net
 15842                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15843                                  					; certainly don't know how to do this
 15844                                  					; call.
 15845                                  	; 16/12/2022
 15846 0000242B 7403                    	jz	short ioctl_do_string
 15847                                  ioctl_bad_funj:
 15848 0000242D E957FF                  	JMP	ioctl_bad_fun
 15849                                  
 15850                                  ioctl_do_string:
 15851                                  	;test	word [es:di+4],4000h
 15852                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15853                                  	;test	byte [es:di+5],40h
 15854 00002430 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15855 00002435 74F6                    	JZ	short ioctl_bad_funj		; NO
 15856                                  					; assume IOCTL read
 15857 00002437 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15858                                  
 15859 0000243C A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15860 0000243E 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15861                                  
 15862                                  					; it is an IOCTL write
 15863 00002440 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15864                                  
 15865                                  ioctl_control_call:
 15866 00002445 B016                    	MOV	AL,DRDWRHL ; 22
 15867                                  ioctl_setup_pkt:
 15868 00002447 88DC                    	MOV	AH,BL			; Unit number
 15869 00002449 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15870 0000244C 31C0                    	XOR	AX,AX
 15871 0000244E A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15872 00002451 A2[8903]                	MOV	[IOMED],AL
 15873 00002454 890E[8E03]              	MOV	[IOSCNT],CX
 15874 00002458 8916[8A03]              	MOV	[IOXAD],DX
 15875 0000245C 8936[8C03]              	MOV	[IOXAD+2],SI
 15876 00002460 06                      	PUSH	ES
 15877 00002461 1F                      	POP	DS
 15878 00002462 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15879 00002464 16                      	PUSH	SS
 15880 00002465 07                      	POP	ES
 15881                                  
 15882 00002466 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15883                                  ioctl_do_IO:
 15884 00002469 E8F821                  	call	DEVIOCALL2
 15885                                  
 15886                                  ;hkn; SS override for IOCALL
 15887                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15888                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15889                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15890 0000246C 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15891 00002472 7507                    	JNZ	short ioctl_string_err
 15892                                  
 15893                                  ;hkn; SS override
 15894 00002474 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15895                                  	; 16/12/2022
 15896 00002478 E9BCE1                  	jmp	SYS_RET_OK
 15897                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15898                                  	;jmp	short ioctl_gd_ok_j
 15899                                  
 15900                                  ioctl_string_err:
 15901 0000247B 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15902                                  device_err:
 15903 00002480 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15904 00002484 89F8                    	MOV	AX,DI
 15905 00002486 E86A30                  	call	SET_I24_EXTENDED_ERROR
 15906                                  
 15907                                  ;hkn; use SS override
 15908                                  ;hkn;	mov	ax,[CS:EXTERR]
 15909 00002489 36A1[2403]              	mov	ax,[SS:EXTERR]
 15910                                  	;jmp	SYS_RET_ERR
 15911                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15912 0000248D EB88                    	jmp	short ioctl_gd_err_j
 15913                                  
 15914                                  ; 17/05/2019 - Retro DOS v4.0
 15915                                  
 15916                                  ;--------------------------------------------------------------------------
 15917                                  ; Proc name : Get_Driver_BL
 15918                                  ;
 15919                                  ;	DS is DOSDATA
 15920                                  ;	BL is drive number (0=default)
 15921                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15922                                  ;	No regs modified
 15923                                  ;
 15924                                  ;---------------------------------------------------------------------------
 15925                                  
 15926                                  Get_Driver_BL:
 15927 0000248F 50                      	PUSH	AX
 15928 00002490 88D8                    	MOV	AL,BL			; Drive
 15929 00002492 E8F545                  	call	GETTHISDRV
 15930 00002495 7224                    	jc	short ioctl_bad_drv
 15931 00002497 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15932 00002499 C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15933 0000249E C43E[A205]              	LES	DI,[THISCDS]
 15934                                  	;test	word [es:di+43h],8000h
 15935                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15936                                  	;test	byte [es:di+44h],80h
 15937 000024A2 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15938                                  	;les	di,[es:di+45h]
 15939 000024A7 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15940 000024AB 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15941 000024AD C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15942                                  	;mov	bl,[es:di+1]
 15943 000024B2 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15944                                  	;les	di,[es:di+13h]
 15945 000024B6 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15946                                  got_dev_ptr:
 15947 000024BA F8                      	CLC
 15948                                  ioctl_bad_drv:
 15949 000024BB 58                      	POP	AX
 15950 000024BC C3                      	retn
 15951                                  
 15952                                  ;-------------------------------------------------------------------------
 15953                                  ; Proc Name : Check_If_Net:
 15954                                  ;
 15955                                  ;
 15956                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15957                                  ; If no device is found, the return address is popped off the stack, and a
 15958                                  ; jump is made to ioctl_drv_err.
 15959                                  ;
 15960                                  ; On Entry:
 15961                                  ; Registers same as those for Get_Driver_BL
 15962                                  ;
 15963                                  ; On Exit:
 15964                                  ; ZERO flag	- set if not a net device
 15965                                  ;		- reset if net device
 15966                                  ; ES:DI -> the device
 15967                                  ;
 15968                                  ;
 15969                                  ; BUGBUG: This function assumes the following stack setup on entry
 15970                                  ;
 15971                                  ;	  SP+2 -> Error return address
 15972                                  ;	  SP   -> Normal return address
 15973                                  ;
 15974                                  ;-------------------------------------------------------------------------
 15975                                  
 15976                                  Check_If_Net:
 15977                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15978 000024BD E8CFFF                  	CALL	Get_Driver_BL
 15979 000024C0 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15980 000024C2 06                      	PUSH	ES
 15981 000024C3 57                      	PUSH	DI
 15982 000024C4 C43E[A205]              	LES	DI,[THISCDS]
 15983                                  	;test	word [es:di+43h],8000h
 15984                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15985                                  	;test	byte [es:di+44h],80h
 15986 000024C8 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15987 000024CD 5F                      	POP	DI
 15988 000024CE 07                      	POP	ES
 15989 000024CF C3                      	retn
 15990                                  
 15991                                  ioctl_drv_err_pop:
 15992 000024D0 58                      	pop	ax			; pop off return address
 15993 000024D1 E941FF                  	jmp	ioctl_drv_err
 15994                                  
 15995                                  ioctl_bad_funj3:
 15996 000024D4 E9B0FE                  	jmp	ioctl_bad_fun
 15997                                  
 15998                                  ioctl_string_errj:
 15999 000024D7 EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 16000                                  
 16001                                  ;--------------------------------------------------------------------------
 16002                                  ;
 16003                                  ; IOCTL: AL = E, F
 16004                                  ;
 16005                                  ; ENTRY: DS = DOSDATA
 16006                                  ;
 16007                                  ;
 16008                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16009                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16010                                  ;         return address off the stack if the drive is invalid.
 16011                                  ;
 16012                                  ;--------------------------------------------------------------------------
 16013                                  
 16014                                  ioctl_drive_owner:
 16015                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16016 000024D9 E8E1FF                  	Call	Check_If_Net
 16017 000024DC 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16018                                  					;   certainly don't know how to do this
 16019                                  					;   call.
 16020                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16021                                  	; 09/09/2018
 16022                                  	;test	byte [es:di+4],40h
 16023 000024DE 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16024 000024E3 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16025                                  	;mov	byte [IOCALL_REQFUNC],23
 16026 000024E5 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16027 000024EA 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16028 000024EC 7405                    	jz	short GetOwner
 16029                                  SetOwner:
 16030 000024EE C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16031                                  GetOwner:
 16032 000024F3 B00D                    	MOV	AL,OWNHL ; 13
 16033 000024F5 88DC                    	MOV	AH,BL			; Unit number
 16034 000024F7 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16035 000024FA 31C0                    	XOR	AX,AX
 16036 000024FC A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16037 000024FF 06                      	PUSH	ES
 16038 00002500 1F                      	POP	DS
 16039 00002501 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16040 00002503 16                      	PUSH	SS
 16041 00002504 07                      	POP	ES
 16042 00002505 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16043 00002508 1E                      	push	ds
 16044 00002509 56                      	push	si
 16045 0000250A E85721                  	call	DEVIOCALL2
 16046 0000250D 5E                      	pop	si
 16047 0000250E 1F                      	pop	ds
 16048                                  ;hkn; SS override
 16049                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16050                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16051 0000250F 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16052 00002515 75C0                    	jnz	short ioctl_string_errj
 16053 00002517 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16054                                  					; owner returned is 1-based.
 16055 0000251B E919E1                  	jmp	SYS_RET_OK
 16056                                  
 16057                                  ;============================================================================
 16058                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16059                                  ;============================================================================
 16060                                  ; 07/08/2018 - Retro DOS v3.0
 16061                                  ; 17/05/2019 - Retro DOS v4.0
 16062                                  
 16063                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16064                                  ;	NAME	DOS_DELETE
 16065                                  
 16066                                  ;
 16067                                  ;	Microsoft Confidential
 16068                                  ;	Copyright (C) Microsoft Corporation 1991
 16069                                  ;	All Rights Reserved.
 16070                                  ;
 16071                                  
 16072                                  ;**	DELETE.ASM - Low level routine for deleting files
 16073                                  ;----------------------------------------------------------------------------
 16074                                  ;		DOS_DELETE
 16075                                  ;		REN_DEL_Check
 16076                                  ;		FastOpen_Delete	       ; DOS 3.3
 16077                                  ;		FastOpen_Update	       ; DOS 3.3
 16078                                  
 16079                                  ;   Revision history:
 16080                                  ;
 16081                                  ;   A000  version 4.00	Jan. 1988
 16082                                  ;   A001  Fastopen Rename fix	April 1989
 16083                                  
 16084                                  ;Installed = TRUE
 16085                                  
 16086                                  ;	i_need	NoSetDir,BYTE
 16087                                  ;	i_need	Creating,BYTE
 16088                                  ;	i_need	DELALL,BYTE
 16089                                  ;	i_need	THISDPB,DWORD
 16090                                  ;	i_need	THISSFT,DWORD
 16091                                  ;	i_need	THISCDS,DWORD
 16092                                  ;	i_need	CURBUF,DWORD
 16093                                  ;	i_need	ATTRIB,BYTE
 16094                                  ;	i_need	SATTRIB,BYTE
 16095                                  ;	i_need	WFP_START,WORD
 16096                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16097                                  ;	i_need	NAME1,BYTE			 ;BN001
 16098                                  ;	i_need	FoundDel,BYTE
 16099                                  ;	i_need	AUXSTACK,BYTE
 16100                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16101                                  ;	i_need	JShare,DWORD
 16102                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16103                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16104                                  ;
 16105                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16106                                  ;
 16107                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16108                                  ;	i_need	DMAADD,DWORD
 16109                                  ;	i_need	RENAMEDMA,BYTE
 16110                                  
 16111                                  ;----------------------------------------------------------------------------
 16112                                  ;
 16113                                  ; Procedure Name : DOS_DELETE
 16114                                  ;
 16115                                  ; Inputs:
 16116                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16117                                  ;		terminated)
 16118                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16119                                  ;		( = -1 if current dir not involved, else
 16120                                  ;		 Points to first char after last "/" of current dir part)
 16121                                  ;	[THISCDS] Points to CDS being used
 16122                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16123                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16124                                  ; Function:
 16125                                  ;	Delete the specified file(s)
 16126                                  ; Outputs:
 16127                                  ;	CARRY CLEAR
 16128                                  ;		OK
 16129                                  ;	CARRY SET
 16130                                  ;	    AX is error code
 16131                                  ;		error_file_not_found
 16132                                  ;			Last element of path not found
 16133                                  ;		error_path_not_found
 16134                                  ;			Bad path (not in curr dir part if present)
 16135                                  ;		error_bad_curr_dir
 16136                                  ;			Bad path in current directory part of path
 16137                                  ;		error_access_denied
 16138                                  ;			Attempt to delete device or directory
 16139                                  ;		***error_sharing_violation***
 16140                                  ;			Deny both access required, generates an INT 24.
 16141                                  ;			This error is NOT returned. The INT 24H is generated,
 16142                                  ;			  and the file is ignored (not deleted). Delete will
 16143                                  ;			  simply continue on looking for more files.
 16144                                  ;			  Carry will NOT be set in this case.
 16145                                  ; DS preserved, others destroyed
 16146                                  ;
 16147                                  ;----------------------------------------------------------------------------
 16148                                  
 16149                                  FILEFOUND   equ 01h
 16150                                  FILEDELETED equ 10h
 16151                                  
 16152                                  
 16153                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16154                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16155                                  
 16156                                  DOS_DELETE:
 16157                                  
 16158                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16159                                  ;hkn; appropriately at this point.
 16160                                  
 16161 0000251E E82AED                  	call	TestNet
 16162 00002521 7306                    	JNC	short LOCAL_DELETE
 16163                                  
 16164                                  ;IF NOT Installed
 16165                                  ;	transfer NET_DELETE
 16166                                  ;ELSE
 16167                                  	;MOV	AX,(MultNET SHL 8) | 19
 16168                                  	;INT	2FH
 16169                                  	;return
 16170                                  
 16171 00002523 B81311                  	mov	ax,1113h
 16172 00002526 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16173                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16174                                  			;		fully-qualified filename in DOS CS
 16175                                  			; SDA CDS pointer -> current directory structure for drive with file
 16176                                  			; Return: CF set on error
 16177 00002528 C3                      	retn
 16178                                  ;ENDIF
 16179                                  
 16180                                  LOCAL_DELETE:
 16181 00002529 C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16182 0000252E E8DCED                  	call	ECritDisk
 16183                                  	;mov	word [CREATING],0E500h
 16184 00002531 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16185 00002537 8B36[B205]              	MOV	SI,[WFP_START]
 16186                                  SKPNUL:
 16187 0000253B AC                      	LODSB
 16188 0000253C 08C0                    	OR	AL,AL
 16189 0000253E 75FB                    	JNZ	short SKPNUL		; go to end
 16190 00002540 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16191 00002543 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16192 00002547 7506                    	JNZ	short TEST_QUEST
 16193 00002549 807C022A                	CMP	BYTE [SI+2],"*"
 16194 0000254D 741F                    	JZ	short CHECK_ATTS
 16195                                  TEST_QUEST:
 16196 0000254F 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16197 00002552 87FE                    	XCHG	DI,SI
 16198                                  
 16199 00002554 16                      	push	ss
 16200                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16201 00002555 07                      	pop	es ; 17/05/2019
 16202                                  
 16203 00002556 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16204 00002559 B90400                  	MOV	CX,4		; four sets of "??"
 16205 0000255C F3AF                    	REPE	SCASW
 16206 0000255E 751C                    	JNZ	short NOT_ALL
 16207 00002560 87FE                    	XCHG	DI,SI
 16208 00002562 AD                      	LODSW
 16209 00002563 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16210 00002566 7514                    	JNZ	short NOT_ALL
 16211 00002568 AD                      	LODSW
 16212 00002569 3D3F3F                  	CMP	AX,"??"
 16213 0000256C 750E                    	JNZ	short NOT_ALL
 16214                                  CHECK_ATTS:
 16215 0000256E A0[6D05]                	MOV	AL,[SATTRIB]
 16216                                  	;and	al,1Fh
 16217 00002571 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16218                                  					; Look only at hidden bits
 16219                                  	;cmp	al,1Fh
 16220 00002573 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16221                                  					; All must be set
 16222 00002575 7505                    	JNZ	short NOT_ALL
 16223                                  
 16224                                  ; NOTE WARNING DANGER-----
 16225                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16226                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16227                                  
 16228 00002577 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16229                                  NOT_ALL:
 16230 0000257C C606[4C03]01            	MOV	byte [NoSetDir],1
 16231 00002581 E89519                  	call	GetPathNoSet
 16232 00002584 7312                    	JNC	short Del_found
 16233 00002586 750B                    	JNZ	short _bad_path
 16234 00002588 08C9                    	OR	CL,CL
 16235 0000258A 7407                    	JZ	short _bad_path
 16236                                  No_file:
 16237 0000258C B80200                  	MOV	AX,error_file_not_found
 16238                                  ErrorReturn:
 16239 0000258F F9                      	STC
 16240                                  	;call	LCritDisk
 16241                                  	;retn
 16242                                  	; 18/12/2022
 16243 00002590 E995ED                  	jmp	LCritDisk
 16244                                  
 16245                                  _bad_path:
 16246 00002593 B80300                  	MOV	AX,error_path_not_found
 16247 00002596 EBF7                    	JMP	short ErrorReturn
 16248                                  
 16249                                  Del_found:
 16250 00002598 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16251 0000259A 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16252 0000259F 7405                    	JZ	short NOT_DIR
 16253                                  Del_access_err:
 16254 000025A1 B80500                  	MOV	AX,error_access_denied
 16255 000025A4 EBE9                    	JMP	short ErrorReturn
 16256                                  
 16257                                  NOT_DIR:
 16258 000025A6 08E4                    	OR	AH,AH			; Check if device name
 16259 000025A8 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16260                                  
 16261                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16262                                  
 16263                                  DELFILE:
 16264 000025AA 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16265                                  
 16266                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16267                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16268                                  
 16269 000025AF 1E                      	PUSH	DS
 16270 000025B0 8A26[7F05]              	MOV	AH,[DELALL]
 16271 000025B4 C53E[E205]              	LDS	DI,[CURBUF]
 16272                                  	
 16273                                  ;hkn; SS override
 16274 000025B8 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16275 000025BE 7509                    	JNZ	short DoDelete		; yes
 16276                                  
 16277 000025C0 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16278 000025C4 7403                    	JZ	short DoDelete		; not read only
 16279                                  
 16280 000025C6 1F                      	POP	DS
 16281 000025C7 EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16282                                  
 16283                                  DoDelete:
 16284 000025C9 E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16285 000025CC 7303                    	JNC	short DEL_SHARE_OK
 16286 000025CE 1F                      	POP	DS
 16287 000025CF EB2A                    	JMP	SHORT DELNXT		; Skip it
 16288                                  
 16289                                  DEL_SHARE_OK:
 16290                                  	; 17/05/2019 - Retro DOS v4.0
 16291                                  	; MSDOS 6.0
 16292                                  	;test	byte [di+5],40h
 16293 000025D1 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16294                                  					;LB. if already dirty		  ;AN000;
 16295 000025D5 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16296 000025D7 E86B35                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16297                                  	;or	byte [di+5],40h
 16298 000025DA 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16299                                  yesdirty:
 16300 000025DE 8827                    	mov	[bx],ah 
 16301                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16302 000025E0 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16303 000025E2 1F                      	POP	DS
 16304 000025E3 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16305                                  
 16306 000025E8 83FB02                  	CMP	BX,2
 16307 000025EB 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16308                                  	;cmp	bx,[es:bp+0Dh]
 16309 000025ED 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16310 000025F1 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16311                                  
 16312 000025F3 E8BD28                  	call	RELEASE 		; Free file data
 16313 000025F6 7252                    	JC	short No_fileJ
 16314                                  
 16315                                  ; DOS 3.3  FastOpen
 16316                                  
 16317 000025F8 E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16318                                  
 16319                                  ; DOS 3.3  FastOpen
 16320                                  
 16321                                  DELNXT:
 16322 000025FB C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16323 000025FF E88218                  	call	GETENTRY		; Registers need to be reset
 16324 00002602 7246                    	JC	short No_fileJ
 16325 00002604 E8BB17                  	call	NEXTENT
 16326 00002607 73A1                    	JNC	short DELFILE
 16327 00002609 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16328                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16329                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16330                                  	;;mov	al,[es:bp+0]
 16331                                  	; 15/12/2022
 16332 0000260D 268A4600                	MOV	AL,[ES:BP]
 16333 00002611 E82C34                  	call	FLUSHBUF
 16334 00002614 7234                    	JC	short No_fileJ
 16335                                  ;
 16336                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16337                                  ;
 16338                                  ;   not found not deleted		file not found
 16339                                  ;   not found	  deleted		*** impossible ***
 16340                                  ;	found not deleted		access denied (read-only)
 16341                                  ;	found	  deleted		no error
 16342                                  ;
 16343 00002616 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16344 0000261B 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16345                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16346                                  ; and to force the DOS to issue a media check.
 16347 0000261D F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16348 00002622 741C                    	jz	short No_Set_Flag
 16349 00002624 50                      	PUSH	AX
 16350 00002625 06                      	PUSH	ES
 16351 00002626 57                      	PUSH	DI
 16352 00002627 C43E[A205]              	LES	DI,[THISCDS]
 16353 0000262B 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16354 0000262E 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16355 00002631 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16356                                  	
 16357                                  	; MSDOS 6.0
 16358 00002635 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16359 00002637 E8DC04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16360                                  	 
 16361 0000263A E88A30                  	call	FATREAD_CDS		; force media check
 16362 0000263D 5F                      	POP	DI
 16363 0000263E 07                      	POP	ES
 16364 0000263F 58                      	POP	AX
 16365                                  No_Set_Flag:
 16366                                  	;call	LCritDisk		; carry is clear
 16367                                  	;retn
 16368                                  	; 18/12/2022
 16369 00002640 E9E5EC                  	jmp	LCritDisk
 16370                                  DelError:
 16371 00002643 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16372 00002648 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16373                                  No_fileJ:
 16374 0000264A E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16375                                  Del_access_errJ:
 16376 0000264D E951FF                  	JMP	Del_access_err ; 10/08/2018
 16377                                  
 16378                                  ; 08/08/2018 - Retro DOS v3.0
 16379                                  
 16380                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16381                                  ;---------------------------------------------------------------------------
 16382                                  ; Procedure Name : REN_DEL_Check
 16383                                  ;
 16384                                  ; Inputs:
 16385                                  ;	[THISDPB] set
 16386                                  ;	[CURBUF+2]:BX points to entry
 16387                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16388                                  ;	[WFP_Start] points to name
 16389                                  ; Function:
 16390                                  ;	Check for Exclusive access on given file.
 16391                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16392                                  ; Outputs:
 16393                                  ;	ES:BP = [THISDPB]
 16394                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16395                                  ;		last element will be loaded from the directory entry.  This is
 16396                                  ;		so the name given to the sharer doesn't have any meta chars in
 16397                                  ;		it.
 16398                                  ;	Carry set if sharing violation, INT 24H generated
 16399                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16400                                  ;		This is because input AX is preserved.
 16401                                  ;		Caller must set the error if needed.
 16402                                  ;	Carry clear
 16403                                  ;		OK
 16404                                  ; AX,DS,BX,SI,DI preserved
 16405                                  ;---------------------------------------------------------------------------
 16406                                  
 16407                                  REN_DEL_Check:
 16408                                  
 16409 00002650 1E                      	PUSH	DS
 16410 00002651 57                      	PUSH	DI
 16411 00002652 50                      	PUSH	AX
 16412 00002653 53                      	PUSH	BX
 16413 00002654 56                      	PUSH	SI		; Save CURBUF pointers
 16414                                  	
 16415 00002655 16                      	push	ss
 16416 00002656 07                      	pop	es
 16417                                  
 16418                                  ;hkn; context ES will assume ES to DOSDATA
 16419                                  ;hkn; ASSUME	ES:DOSGROUP
 16420                                  
 16421                                  ;hkn; SS override
 16422 00002657 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16423 0000265C 89DE                    	MOV	SI,BX
 16424                                  
 16425                                  ;hkn; SS override
 16426 0000265E 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16427 00002663 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16428 00002665 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16429 00002668 E880EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16430 0000266B 49                      	DEC	CX		; Don't include nul in count
 16431 0000266C 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16432 0000266E E8D346                  	call	SkipBack	; Back up one element
 16433 00002671 47                      	INC	DI		; Point to start of last element
 16434                                  
 16435                                  	; 17/05/2019 - Retro DOS v4.0
 16436                                  ;hkn; SS override
 16437                                  	; MSDOS 6.0
 16438 00002672 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16439                                  	;
 16440 00002677 E832FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16441 0000267A 5E                      	POP	SI		; Get back entry pointers
 16442 0000267B 5B                      	POP	BX
 16443 0000267C 53                      	PUSH	BX
 16444 0000267D 56                      	PUSH	SI		; Back on stack
 16445                                  	
 16446 0000267E 16                      	push	ss
 16447 0000267F 1F                      	pop	ds
 16448                                  
 16449                                  ;hkn; context DS will assume ES to DOSDATA
 16450                                  ;hkn; ASSUME	DS:DOSGROUP
 16451                                  
 16452                                  ; Close the file if possible by us.
 16453                                  ;
 16454                                  ;if installed
 16455 00002680 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16456                                  ;else
 16457                                  ;	Call	ShCloseFile
 16458                                  ;endif
 16459 00002684 8C1E[A005]              	MOV	[THISSFT+2],DS
 16460                                  
 16461                                  ;hkn; AUXSTACK is in DOSDATA
 16462 00002688 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16463                                  				; Scratch space
 16464 0000268E 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16465 00002690 E8AA24                  	call	DOOPEN		; Fill in SFT for share check
 16466 00002693 C43E[9E05]              	LES	DI,[THISSFT]
 16467                                  	;mov	word [es:di+2],10h
 16468 00002697 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16469                                  				; requires exclusive access
 16470                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16471 0000269D 26C7050100              	mov	word [ES:DI],1
 16472 000026A2 E8C34C                  	call	ShareEnter
 16473 000026A5 720D                    	jc	short CheckDone
 16474 000026A7 C43E[9E05]              	LES	DI,[THISSFT]
 16475                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16476 000026AB 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16477                                  	
 16478 000026B0 E8B04C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16479 000026B3 F8                      	CLC
 16480                                  CheckDone:
 16481 000026B4 C42E[8A05]              	LES	BP,[THISDPB]
 16482 000026B8 5E                      	POP	SI
 16483 000026B9 5B                      	POP	BX
 16484 000026BA 58                      	POP	AX
 16485 000026BB 5F                      	POP	DI
 16486 000026BC 1F                      	POP	DS
 16487 000026BD C3                      	retn
 16488                                  
 16489                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16490                                  ;---------------------------------------------------------------------------
 16491                                  ; Procedure Name : FastOpen_Delete
 16492                                  ; Inputs:
 16493                                  ;	None
 16494                                  ; Function:
 16495                                  ;	Call FastOpen to delete the dir info.
 16496                                  ; Outputs:
 16497                                  ;	None
 16498                                  ;---------------------------------------------------------------------------
 16499                                  
 16500                                  FastOpen_Delete:
 16501 000026BE 9C                      	PUSHF			; save flag
 16502 000026BF 56                      	PUSH	SI		; save registers
 16503 000026C0 53                      	PUSH	BX
 16504 000026C1 50                      	PUSH	AX
 16505                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16506                                  ;hkn; SS override
 16507                                  	; 17/05/2019 - Retro DOS v4.0
 16508                                  	; MSDOS 6.0
 16509 000026C2 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16510                                  	
 16511 000026C7 B003                    	MOV	AL,FONC_delete	; al = 3
 16512                                  fastinvoke:
 16513                                  ;hkn; FastTable is in DOSDATA
 16514 000026C9 BB[320D]                	MOV	BX,FastTable+2
 16515 000026CC FF1F                    	CALL	far [BX]	; call fastopen
 16516 000026CE 58                      	POP	AX		; restore registers
 16517 000026CF 5B                      	POP	BX
 16518 000026D0 5E                      	POP	SI
 16519 000026D1 9D                      	POPF			; restore flag
 16520 000026D2 C3                      	retn
 16521                                  
 16522                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16523                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16524                                  
 16525                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16526                                  ;---------------------------------------------------------------------------
 16527                                  ; PROCEDURE Name : FastOpen_Rename
 16528                                  ;
 16529                                  ; Inputs:
 16530                                  ;	 REN_WFP   = Path Name
 16531                                  ;	 NAME1	   = New Name
 16532                                  ; Function:
 16533                                  ;	Call FastOpen to rename the dir entry in the cache
 16534                                  ; Outputs:
 16535                                  ;	None
 16536                                  ;---------------------------------------------------------------------------
 16537                                  
 16538                                  FastOpen_Rename:
 16539                                  	; 17/05/2019 - Retro DOS v4.0
 16540                                  	; 08/08/2018 - Retro DOS v3.0
 16541                                  	; MSDOS 6.0
 16542 000026D3 9C                      	PUSHF			;AN001 save flag
 16543 000026D4 56                      	PUSH	SI		;AN001 save registers
 16544 000026D5 57                      	PUSH	DI		;AN001
 16545 000026D6 53                      	PUSH	BX		;AN001
 16546 000026D7 50                      	PUSH	AX		;AN001
 16547                                  	;
 16548                                  ;hkn; SS override
 16549 000026D8 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16550                                  
 16551                                  ;hkn; NAME1 is in DOSDATA
 16552 000026DD BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16553                                  	;mov	al,6
 16554 000026E0 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16555                                  	
 16556                                  ;hkn; FastTable is in DOSDATA
 16557 000026E2 BB[320D]                	MOV	BX,FastTable+2
 16558 000026E5 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16559                                  	
 16560 000026E7 58                      	POP	AX		; restore registers  ;AN001
 16561 000026E8 5B                      	POP	BX				     ;AN001
 16562 000026E9 5F                      	POP	DI				     ;AN001
 16563 000026EA 5E                      	POP	SI				     ;AN001
 16564 000026EB 9D                      	POPF			; restore flag	     ;AN001
 16565 000026EC C3                      	retn					     ;AN001
 16566                                  
 16567                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16568                                  ;---------------------------------------------------------------------------
 16569                                  ; Procedure Name : FastOpen_Update
 16570                                  ;
 16571                                  ; Inputs:
 16572                                  ;	DL     drive number (A=0,B=1,,,)
 16573                                  ;	CX     first cluster #
 16574                                  ;	AH     0 updates dir entry
 16575                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16576                                  ;	ES:DI  directory entry
 16577                                  ; Function:
 16578                                  ;	Call FastOpen to update the dir info.
 16579                                  ; Outputs:
 16580                                  ;	None
 16581                                  ;---------------------------------------------------------------------------
 16582                                  
 16583                                  FastOpen_Update:
 16584 000026ED 9C                      	PUSHF			; save flag
 16585 000026EE 56                      	PUSH	SI
 16586 000026EF 53                      	PUSH	BX		; save regs
 16587 000026F0 50                      	PUSH	AX
 16588 000026F1 B004                    	MOV	AL,FONC_update	; al = 4
 16589 000026F3 EBD4                    	JMP	short fastinvoke
 16590                                  
 16591                                  	; 17/05/2019
 16592                                  
 16593                                  	; MSDOS 6.0
 16594                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16595                                  ;---------------------------------------------------------------------------
 16596                                  Fast_Dispatch:
 16597                                  ;hkn; FastTable is in DOSDATA
 16598 000026F5 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16599                                  ;hkn; use SS override
 16600 000026F8 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16601 000026FB C3                      	retn
 16602                                  
 16603                                  ;============================================================================
 16604                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16605                                  ;============================================================================
 16606                                  ; 08/08/2018 - Retro DOS v3.0
 16607                                  ; 17/05/2019 - Retro DOS v4.0
 16608                                  
 16609                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16610                                  ;	NAME	DOS_RENAME
 16611                                  
 16612                                  ;**	Low level routine for renaming files
 16613                                  ;----------------------------------------------------------------------------
 16614                                  ;	DOS_RENAME
 16615                                  ;
 16616                                  ;	Modification history:
 16617                                  ;
 16618                                  ;	    Created: ARR 30 March 1983
 16619                                  
 16620                                  ;----------------------------------------------------------------------------
 16621                                  ;
 16622                                  ; Procedure Name : DOS_RENAME
 16623                                  ;
 16624                                  ; Inputs:
 16625                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16626                                  ;		chars, NUL terminated)
 16627                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16628                                  ;		( = -1 if current dir not involved, else
 16629                                  ;		 Points to first char after last "/" of current dir part)
 16630                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16631                                  ;		chars, NUL terminated)
 16632                                  ;	[THISCDS] Points to CDS being used
 16633                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16634                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16635                                  ; Function:
 16636                                  ;	Rename the specified file(s)
 16637                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16638                                  ; Outputs:
 16639                                  ;	CARRY CLEAR
 16640                                  ;	    OK
 16641                                  ;	CARRY SET
 16642                                  ;	    AX is error code
 16643                                  ;		error_file_not_found
 16644                                  ;			No match for source, or dest path invalid
 16645                                  ;		error_not_same_device
 16646                                  ;			Source and dest are on different devices
 16647                                  ;		error_access_denied
 16648                                  ;			Directory specified (not simple rename),
 16649                                  ;			Device name given, Destination exists.
 16650                                  ;			NOTE: In third case some renames may have
 16651                                  ;			 been done if metas.
 16652                                  ;		error_path_not_found
 16653                                  ;			Bad path (not in curr dir part if present)
 16654                                  ;			SOURCE ONLY
 16655                                  ;		error_bad_curr_dir
 16656                                  ;			Bad path in current directory part of path
 16657                                  ;			SOURCE ONLY
 16658                                  ;		error_sharing_violation
 16659                                  ;			Deny both access required, generates an INT 24.
 16660                                  ; DS preserved, others destroyed
 16661                                  ;
 16662                                  ;----------------------------------------------------------------------------
 16663                                  
 16664                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16665                                  
 16666                                  DOS_RENAME:
 16667                                  
 16668                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16669                                  ;hkn; at this point to DOSDATA.
 16670                                  
 16671 000026FC E84CEB                  	call	TestNet
 16672 000026FF 7306                    	JNC	short LOCAL_RENAME
 16673                                  
 16674                                  ;IF NOT Installed
 16675                                  ;	transfer NET_RENAME
 16676                                  ;ELSE
 16677                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16678                                  	;INT	2FH
 16679                                  	;return
 16680                                  
 16681 00002701 B81111                  	mov     ax, 1111h
 16682 00002704 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16683                                  			; SS = DS = DOS CS, 
 16684                                  			; SDA first filename pointer = offset of fully-qualified old name
 16685                                  			; SDA CDS pointer -> current directory
 16686                                  			; Return: CF set on error
 16687 00002706 C3                      	retn
 16688                                  ;ENDIF
 16689                                  
 16690                                  LOCAL_RENAME:
 16691 00002707 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16692 0000270C 8B36[B205]              	MOV	SI,[WFP_START]
 16693 00002710 8B3E[B405]              	MOV	DI,[REN_WFP]
 16694 00002714 8A04                    	MOV	AL,[SI]
 16695 00002716 8A25                    	MOV	AH,[DI]
 16696 00002718 0D2020                  	OR	AX,2020H		; Lower case
 16697 0000271B 38E0                    	CMP	AL,AH
 16698 0000271D 7405                    	JZ	short SAMEDRV
 16699 0000271F B81100                  	MOV	AX,error_not_same_device ; 11h
 16700 00002722 F9                      	STC
 16701 00002723 C3                      	retn
 16702                                  
 16703                                  SAMEDRV:
 16704 00002724 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16705 00002728 FF36[2C03]              	PUSH	WORD [DMAADD]
 16706 0000272C 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16707                                  
 16708                                  ;hkn; RENAMEDMA is in DOSDATA
 16709 00002730 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16710 00002736 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16711 0000273B E8CFEB                  	call	ECritDisk
 16712 0000273E E8F505                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16713                                  					;    points to entry
 16714 00002741 7314                    	JNC	short Check_Dev
 16715 00002743 83F812                  	CMP	AX,error_no_more_files ; 12h
 16716 00002746 7503                    	JNZ	short GOTERR
 16717 00002748 B80200                  	MOV	AX,error_file_not_found ; 2
 16718                                  GOTERR:
 16719 0000274B F9                      	STC
 16720                                  RENAME_POP:
 16721 0000274C 8F06[2C03]              	POP	WORD [DMAADD]
 16722 00002750 8F06[2E03]              	POP	WORD [DMAADD+2]
 16723                                  	;call	LCritDisk
 16724                                  	;retn
 16725                                  	; 16/12/2022
 16726 00002754 E9D1EB                  	jmp	LCritDisk
 16727                                  
 16728                                  Check_Dev:
 16729                                  	; 17/05/2019 - Retro DOS v4.0
 16730                                  	;mov	ax,5
 16731 00002757 B80500                  	MOV	AX,error_access_denied	; Assume error
 16732                                  	
 16733                                  	; MSDOS 6.0
 16734 0000275A 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16735 0000275B C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16736                                  	;add	si,21
 16737 0000275F 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16738                                  	;test	byte [si+11],10h
 16739 00002762 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16740 00002766 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16741 00002768 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16742 0000276C E8CEFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16743                                  notdir:
 16744 0000276F 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16745 00002770 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16746                                  
 16747                                  	; MSDOS 3.3 & MSDOS 6.0
 16748 00002772 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16749 00002777 75D2                    	JNZ	short GOTERR
 16750                                  
 16751                                  ; At this point a source has been found. There is search continuation info (a
 16752                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16753                                  ; directory entry found.
 16754                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16755                                  ; throughout the RENAME since it is known at this point that the source and
 16756                                  ; destination are both on the same device.
 16757                                  ; [SATTRIB] is also set.
 16758                                  
 16759 00002779 89DE                    	MOV	SI,BX
 16760                                  	;add	si,26
 16761 0000277B 83C61A                  	ADD	SI,dir_entry.dir_first
 16762 0000277E E8CFFE                  	call	REN_DEL_Check
 16763 00002781 7305                    	JNC	short REN_OK1
 16764 00002783 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16765 00002786 EBC4                    	JMP	short RENAME_POP
 16766                                  
 16767                                  ;------------------------------------------------------------------------------
 16768                                  ; Check if the source is a file or directory. If file, delete the entry
 16769                                  ; from the Fastopen cache. If directory, rename it later
 16770                                  ;------------------------------------------------------------------------------
 16771                                  
 16772                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16773                                  	; MSDOS 6.0
 16774 00002788 56                      	PUSH	SI
 16775 00002789 C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16776                                  	;add	si,21
 16777 0000278D 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16778                                  	;test	byte [si+11],10h
 16779 00002790 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16780 00002794 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16781 00002796 5E                      	POP	SI			;BN00X
 16782 00002797 EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16783                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16784 00002799 5E                      	POP	SI
 16785                                  
 16786                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16787 0000279A E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16788                                  SWAP_SOURCE:
 16789                                  	; MSDOS 3.3
 16790                                  	;MOV	SI,[REN_WFP]
 16791                                  	;MOV	[WFP_START],SI
 16792                                  	; MSDOS 6.0
 16793 0000279D A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16794 000027A0 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16795 000027A4 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16796 000027A8 A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16797                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16798 000027AB C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16799                                  	;mov	word [CREATING],0E5FFh
 16800 000027B1 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16801                                  					; A rename is like a CREATE_NEW as far
 16802                                  					; as the destination is concerned.
 16803 000027B7 E85F17                  	call	GetPathNoSet
 16804                                  
 16805                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16806                                  ;   since no files match the destination name. If it fails for any other
 16807                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16808                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16809                                  ;   if the rename should fail because we haven't built an explicit name by
 16810                                  ;   substituting for the meta chars in it. In this case the destination file
 16811                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16812                                  ;   in the directory entry part.
 16813                                  	
 16814 000027BA 7223                    	JC	short NODEST
 16815                                  	
 16816                                  	; MSDOS 6.0
 16817                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16818                                  	; !! MSDOS 3.3 !!
 16819                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16820                                  
 16821 000027BC 08E4                    	OR	AH,AH			; Device?
 16822 000027BE 792C                    	JNS	short SAVEDEST		; No, continue
 16823                                  BAD_ACC:
 16824 000027C0 B80500                  	MOV	AX,error_access_denied
 16825 000027C3 F9                      	STC
 16826                                  RENAME_CLEAN:
 16827 000027C4 9C                      	PUSHF				; Save carry state
 16828 000027C5 50                      	PUSH	AX			; and error code (if carry set)
 16829 000027C6 A0[7605]                	MOV	AL,[THISDRV]
 16830 000027C9 E87432                  	call	FLUSHBUF
 16831 000027CC 58                      	POP	AX
 16832 000027CD 803E[4A03]00            	CMP	byte [FAILERR],0
 16833 000027D2 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16834 000027D4 9D                      	POPF
 16835 000027D5 E974FF                  	JMP	RENAME_POP
 16836                                  
 16837                                  BAD_ERR:
 16838 000027D8 58                      	POP	AX			; Saved flags
 16839                                  	; 16/12/202
 16840                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16841                                  BAD_PATH: ; *
 16842 000027D9 B80300                  	MOV	AX,error_path_not_found
 16843 000027DC E96CFF                  	JMP	GOTERR
 16844                                  
 16845                                  NODEST:
 16846 000027DF 75F8                    	JNZ	short BAD_PATH
 16847 000027E1 803E[4A03]00            	CMP	byte [FAILERR],0
 16848 000027E6 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16849                                  					; because user FAILed on I 24
 16850                                  	; 14/11/2022
 16851 000027E8 08C9                    	OR	CL,CL
 16852                                  	;JNZ	short SAVEDEST
 16853                                  	; 17/05/2019
 16854 000027EA 74ED                    	jz	short BAD_PATH ; *
 16855                                  ;BAD_PATH: ; *
 16856                                  ;	MOV	AX,error_path_not_found
 16857                                  ;	;STC
 16858                                  ;	;JMP	RENAME_POP
 16859                                  ;	; 17/05/2019
 16860                                  ;	jmp	GOTERR 
 16861                                  
 16862                                  ; 16/12/2022
 16863                                  %if 0
 16864                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16865                                  	or	cl,cl
 16866                                  	jnz	short SAVEDEST
 16867                                  	;jz	short BAD_PATH ; *
 16868                                  BAD_PATH: ; *
 16869                                  	;mov	ax,3
 16870                                  	mov	ax,error_path_not_found
 16871                                  	stc
 16872                                  	jmp	RENAME_POP
 16873                                  %endif
 16874                                  
 16875                                  SAVEDEST:
 16876 000027EC 16                      	push	ss
 16877 000027ED 07                      	pop	es
 16878                                  
 16879                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16880 000027EE BF[5705]                	MOV	DI,NAME2
 16881 000027F1 BE[4B05]                	MOV	SI,NAME1
 16882                                  
 16883 000027F4 B90B00                  	MOV	CX,11
 16884 000027F7 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16885 000027F9 A1[C205]                	MOV	AX,[DIRSTART]
 16886 000027FC A3[6405]                	MOV	[DESTSTART],AX
 16887                                  BUILDDEST:
 16888 000027FF 16                      	push	ss
 16889 00002800 07                      	pop	es			; needed due to JMP BUILDDEST below
 16890                                  
 16891                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16892 00002801 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16893 00002804 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16894 00002807 BE[5705]                	MOV	SI,NAME2		; Raw dest
 16895                                  
 16896 0000280A B90B00                  	MOV	CX,11
 16897                                  
 16898                                  	; 17/05/2019 - Retro DOS v4.0
 16899                                  	
 16900                                  	; MSDOS 6.0
 16901 0000280D E81201                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16902                                  
 16903                                  	; MSDOS 3.3
 16904                                  
 16905                                  ; 08/08/2018 - Retro DOS v3.0
 16906                                  ; MSDOS 6.0 
 16907                                  ;---------------------------------------------------------------------------
 16908                                  ;Procedure: NEW_RENAME
 16909                                  ;
 16910                                  ;Input: DS:SI -> raw string with ?
 16911                                  ;	ES:DI -> destination string
 16912                                  ;	DS:BX -> source string
 16913                                  ;Function: replace ? chars of raw string with chars in source string and
 16914                                  ;	   put in destination string
 16915                                  ;Output: ES:DI-> new string
 16916                                  ;---------------------------------------------------------------------------
 16917                                  ;
 16918                                  ;NEW_RENAME:
 16919                                  ;NEWNAM:
 16920                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16921                                  ;	LODSB
 16922                                  ;	CMP	AL,"?"
 16923                                  ;	JNZ	short NOCHG
 16924                                  ;	MOV	AL,[BX] 		; Get replace char
 16925                                  ;NOCHG:
 16926                                  ;	STOSB
 16927                                  ;	INC	BX			; Next replace char
 16928                                  ;	LOOP	NEWNAM
 16929                                  ;	; MSDOS 6.0
 16930                                  ;	;retn
 16931                                  
 16932                                  	; MSDOS 3.3 & MSDOS 6.0
 16933                                  	;mov	byte [ATTRIB],16h
 16934 00002810 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16935 00002815 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16936 0000281A E8AA19                  	call	DEVNAME 		; Check if we built a device name
 16937 0000281D 73A1                    	JNC	short BAD_ACC
 16938 0000281F 8B1E[6405]              	MOV	BX,[DESTSTART]
 16939 00002823 C42E[8A05]              	LES	BP,[THISDPB]
 16940 00002827 E88C16                  	call	SETDIRSRCH		; Reset search to start of dir
 16941 0000282A 7294                    	JC	short BAD_ACC 		; Screw up
 16942 0000282C E84615                  	call	FINDENTRY		; See if new name already exists
 16943 0000282F 738F                    	JNC	short BAD_ACC 		; Error if found
 16944 00002831 803E[4A03]00            	CMP	byte [FAILERR],0
 16945 00002836 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16946 00002838 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16947 0000283B 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16948 0000283F 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16949                                  
 16950                                  	;mov	al,[RENAMEDMA+32]
 16951 00002841 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16952 00002844 A810                    	TEST	AL,attr_directory ; 10h
 16953 00002846 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16954                                  					; otherwise the . and .. entries get
 16955                                  					; wiped.
 16956 00002848 A2[6B05]                	MOV	[ATTRIB],AL
 16957 0000284B 8C1E[A005]              	MOV	[THISSFT+2],DS
 16958                                  
 16959                                  ;hkn; AUXSTACK is in DOSDATA
 16960                                  	;mov	si,[RENAMEDMA+145h]
 16961 0000284F BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16962 00002852 8936[9E05]              	MOV	[THISSFT],SI
 16963                                  	;mov	word [SI+2],2
 16964 00002856 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16965 0000285B 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16966 0000285D E84521                  	call	RENAME_MAKE		; This is in mknode
 16967 00002860 7303                    	JNC	short GOT_DEST
 16968                                  BAD_ACCJ:
 16969 00002862 E95BFF                  	JMP	BAD_ACC
 16970                                  
 16971                                  GOT_DEST:
 16972 00002865 53                      	push	bx
 16973 00002866 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16974 0000286A E8F64A                  	call	ShareEnd		; we need to remove it.
 16975 0000286D 5B                      	pop	bx
 16976                                  
 16977                                  ; A zero length entry with the correct new name has now been made at
 16978                                  ;   [CURBUF+2]:BX.
 16979                                  
 16980 0000286E C43E[E205]              	LES	DI,[CURBUF]
 16981                                  
 16982                                  	; MSDOS 6.0
 16983                                  	;test	byte [es:di+5],40h
 16984 00002872 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16985                                  					;LB. if already dirty		  ;AN000;
 16986 00002877 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16987 00002879 E8C932                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16988                                  	;or	byte [es:di+5],40h
 16989 0000287C 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16990                                  yesdirty1:
 16991 00002881 89DF                    	MOV	DI,BX
 16992                                  	;add	di,11
 16993 00002883 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16994                                  
 16995                                  ;hkn; RENAMEDMA is in DOSDATA
 16996                                  	;mov	si,[RENAMEDMA+32]
 16997 00002886 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16998                                  	;mov	cx,21
 16999 00002889 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17000 0000288C F3A4                    	REP	MOVSB
 17001 0000288E E87B00                  	CALL	GET_SOURCE
 17002 00002891 7276                    	JC	short RENAME_OVER
 17003 00002893 89DF                    	MOV	DI,BX
 17004 00002895 8E06[E405]              	MOV	ES,[CURBUF+2]
 17005 00002899 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17006 0000289B AA                      	STOSB				; "free" the source
 17007 0000289C EB13                    	JMP	SHORT DIRTY_IT
 17008                                  
 17009                                  SIMPLE_RENAME:
 17010 0000289E E86B00                  	CALL	GET_SOURCE		; Get the source back
 17011 000028A1 7266                    	JC	short RENAME_OVER
 17012 000028A3 89DF                    	MOV	DI,BX
 17013 000028A5 8E06[E405]              	MOV	ES,[CURBUF+2]
 17014                                  
 17015                                  ;hkn; NAME1 is in DOSDATA
 17016 000028A9 BE[4B05]                	MOV	SI,NAME1		; New Name
 17017 000028AC B90B00                  	MOV	CX,11
 17018 000028AF F3A4                    	REP	MOVSB
 17019                                  DIRTY_IT:
 17020 000028B1 8B3E[E205]              	MOV	DI,[CURBUF]
 17021                                  
 17022                                  	; MSDOS 6.0
 17023 000028B5 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17024                                  					;LB. if already dirty		  ;AN000;
 17025 000028BA 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17026 000028BC E88632                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17027                                  	
 17028 000028BF 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17029                                  
 17030                                  ;------------------------------------------------------------------------------
 17031                                  ; Check if the source is a directory of file. If directory rename it to the
 17032                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17033                                  ; previously deleted.
 17034                                  ;------------------------------------------------------------------------------
 17035                                  
 17036                                  yesdirty2:
 17037                                  	; MSDOS 6.0
 17038 000028C4 56                      	PUSH	SI
 17039 000028C5 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17040 000028C9 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17041 000028CC F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17042 000028D0 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17043 000028D2 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17044 000028D5 5E                      	POP	SI
 17045 000028D6 EB01                    	JMP	SHORT NOT_DIRTY1
 17046                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17047 000028D8 5E                      	POP	SI
 17048                                  NOT_DIRTY1:				;;BN00X
 17049                                  NEXT_SOURCE:
 17050                                  ;hkn; RENAMEDMA is in DOSDATA
 17051 000028D9 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17052                                  
 17053                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17054                                  ; to enter it before going to RENAME_Next.
 17055                                  
 17056 000028DC E82EEA                  	call	ECritDisk
 17057 000028DF C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17058                                  				  ;  to FF when we made the prev new file).
 17059 000028E4 E88705                  	call	RENAME_NEXT
 17060                                  
 17061                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17062                                  ; we were before.
 17063                                  
 17064 000028E7 7220                    	JC	short RENAME_OVER
 17065                                  
 17066                                  	;lea	si,[bx+26]
 17067 000028E9 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17068 000028EC E861FD                  	call	REN_DEL_Check
 17069 000028EF 7306                    	JNC	short REN_OK2
 17070 000028F1 B82000                  	MOV	AX,error_sharing_violation ; 20h
 17071                                  jmp_to_rename_clean: ; 28/12/2022
 17072 000028F4 E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17073                                  
 17074                                  ;------------------------------------------------------------------------------
 17075                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17076                                  ; if directory, rename directory name in the Fastopen cache.
 17077                                  ;-----------------------------------------------------------------------------
 17078                                  
 17079                                  REN_OK2:
 17080                                  	; MSDOS 6.0
 17081                                  	;mov	al,[RERNAMEDMA+32]
 17082 000028F7 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17083                                  	;test	al,10h
 17084 000028FA A810                    	TEST	AL,attr_directory	;;BN00X directory
 17085 000028FC 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17086                                  	
 17087                                  	; MSDOS 3.3 & MSDOS 6.0
 17088 000028FE E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17089                                  jmp_to_builddest: ; 28/12/2022
 17090 00002901 E9FBFE                  	JMP	BUILDDEST		;;BN00X
 17091                                  
 17092                                  	; MSDOS 6.0
 17093                                  Ren_Directory:
 17094 00002904 E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17095                                  	;JMP	BUILDDEST
 17096                                  	; 28/12/2022
 17097 00002907 EBF8                    	jmp	short jmp_to_builddest
 17098                                  
 17099                                  RENAME_OVER:
 17100 00002909 F8                      	CLC
 17101                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17102                                  	; 28/12/2022
 17103 0000290A EBE8                    	jmp	short jmp_to_rename_clean
 17104                                  
 17105                                  ;----------------------------------------------------------------------------
 17106                                  ; Procedure: GET_SOURCE
 17107                                  ;
 17108                                  ; Inputs:
 17109                                  ;	RENAMEDMA has source info
 17110                                  ; Function:
 17111                                  ;	Re-find the source
 17112                                  ; Output:
 17113                                  ;	[CURBUF] set
 17114                                  ;	[CURBUF+2]:BX points to entry
 17115                                  ;	Carry set if error (currently user FAILed to I 24)
 17116                                  ; DS preserved, others destroyed
 17117                                  ;----------------------------------------------------------------------------
 17118                                  
 17119                                  GET_SOURCE:
 17120 0000290C 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17121 00002910 C42E[8A05]              	LES	BP,[THISDPB]
 17122 00002914 E89F15                  	call	SETDIRSRCH
 17123 00002917 7214                    	JC	short gs_ret_label	; retc
 17124 00002919 E88A18                  	call	STARTSRCH
 17125 0000291C A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17126                                  	;call	GETENT
 17127                                  	; 18/12/2022
 17128 0000291F E96515                  	jmp	GETENT
 17129                                  ;gs_ret_label:
 17130                                  	;retn
 17131                                  
 17132                                  ; MSDOS 6.0 
 17133                                  ;---------------------------------------------------------------------------
 17134                                  ;Procedure: NEW_RENAME
 17135                                  ;
 17136                                  ;Input: DS:SI -> raw string with ?
 17137                                  ;	ES:DI -> destination string
 17138                                  ;	DS:BX -> source string
 17139                                  ;Function: replace ? chars of raw string with chars in source string and
 17140                                  ;	   put in destination string
 17141                                  ;Output: ES:DI-> new string
 17142                                  ;---------------------------------------------------------------------------
 17143                                  
 17144                                  NEW_RENAME:
 17145                                  	; 17/05/2019 - Retro DOS v4.0
 17146                                  NEWNAM:
 17147                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17148 00002922 AC                      	LODSB
 17149 00002923 3C3F                    	CMP	AL,"?" ; 3Fh
 17150 00002925 7502                    	JNZ	short NOCHG
 17151 00002927 8A07                    	MOV	AL,[BX] 		; Get replace char
 17152                                  NOCHG:
 17153 00002929 AA                      	STOSB
 17154 0000292A 43                      	INC	BX			; Next replace char
 17155 0000292B E2F5                    	LOOP	NEWNAM
 17156                                  	; MSDOS 6.0
 17157                                  gs_ret_label:	; 18/12/2022
 17158 0000292D C3                      	retn
 17159                                  
 17160                                  ;============================================================================
 17161                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17162                                  ;============================================================================
 17163                                  ; 08/08/2018 - Retro DOS v3.0
 17164                                  ; 17/05/2019 - Retro DOS v4.0
 17165                                  
 17166                                  ;**	Low level routines for returning file information and setting file
 17167                                  ;	attributes
 17168                                  ;
 17169                                  ;	GET_FILE_INFO
 17170                                  ;	SET_FILE_ATTRIBUTE
 17171                                  ;
 17172                                  ;	Modification history:
 17173                                  ;
 17174                                  ;	    Created: ARR 30 March 1983
 17175                                  ;
 17176                                  ;	M025: Return access_denied if attempting to set
 17177                                  ;	      attribute of root directory.
 17178                                  ;
 17179                                  
 17180                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17181                                  
 17182                                  ;---------------------------------------------------------------------------
 17183                                  ; Procedure Name : GET_FILE_INFO
 17184                                  ;
 17185                                  ; Inputs:
 17186                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17187                                  ;		terminated)
 17188                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17189                                  ;		( = -1 if current dir not involved, else
 17190                                  ;		 Points to first char after last "/" of current dir part)
 17191                                  ;	[THISCDS] Points to CDS being used
 17192                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17193                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17194                                  ; Function:
 17195                                  ;	Get Information about a file
 17196                                  ; Returns:
 17197                                  ;	CARRY CLEAR
 17198                                  ;	    AX = Attribute of file
 17199                                  ;	    CX = Time stamp of file
 17200                                  ;	    DX = Date stamp of file
 17201                                  ;	    BX:DI = Size of file (32 bit)
 17202                                  ;	CARRY SET
 17203                                  ;	    AX is error code
 17204                                  ;		error_file_not_found
 17205                                  ;			Last element of path not found
 17206                                  ;		error_path_not_found
 17207                                  ;			Bad path (not in curr dir part if present)
 17208                                  ;		error_bad_curr_dir
 17209                                  ;			Bad path in current directory part of path
 17210                                  ; DS preserved, others destroyed
 17211                                  ;---------------------------------------------------------------------------
 17212                                  
 17213                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17214                                  
 17215                                  GET_FILE_INFO:
 17216                                  
 17217                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17218                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17219                                  
 17220 0000292E E81AE9                  	call	TestNet
 17221 00002931 7306                    	JNC	short LOCAL_INFO
 17222                                  
 17223                                  ;IF NOT Installed
 17224                                  ;	transfer NET_GET_FILE_INFO
 17225                                  ;ELSE
 17226                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17227                                  ;	INT	2FH
 17228                                  ;	return
 17229                                  
 17230 00002933 B80F11                  	mov     ax, 110Fh
 17231 00002936 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17232                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17233                                  			; SDA CDS pointer -> current directory
 17234                                  			; Return: CF set on error, AX = file attributes
 17235 00002938 C3                      	retn
 17236                                  ;ENDIF
 17237                                  
 17238                                  LOCAL_INFO:
 17239 00002939 E8D1E9                  	call	ECritDisk
 17240 0000293C C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17241                                  	; MSDOS 3.3
 17242                                  	;call	GETPATH
 17243                                  	; MSDOS 6.0
 17244 00002941 E8D800                  	call	GET_FAST_PATH
 17245                                  	; MSDOS 3.3 & MSDOS 6.0
 17246 00002944 7312                    	JNC	short info_check_dev
 17247                                  NO_PATH:
 17248 00002946 750B                    	JNZ	short bad_path1
 17249 00002948 08C9                    	OR	CL,CL
 17250 0000294A 7407                    	JZ	short bad_path1
 17251                                  info_no_file:
 17252 0000294C B80200                  	MOV	AX,error_file_not_found
 17253                                  BadRet:
 17254 0000294F F9                      	STC
 17255                                  JustRet:
 17256                                  	;call	LCritDisk
 17257                                  	;retn
 17258                                  	; 18/12/2022
 17259 00002950 E9D5E9                  	jmp	LCritDisk
 17260                                  
 17261                                  bad_path1:
 17262 00002953 B80300                  	MOV	AX,error_path_not_found
 17263 00002956 EBF7                    	jmp	short BadRet
 17264                                  
 17265                                  info_check_dev:
 17266 00002958 08E4                    	OR	AH,AH
 17267 0000295A 78F0                    	JS	short info_no_file	; device
 17268                                  
 17269                                  	; MSDOS 6.0
 17270                                  ;SR;
 17271                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17272                                  ;for a root dir
 17273                                  
 17274 0000295C 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17275 00002961 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17276                                  
 17277 00002963 30E4                    	xor	ah,ah
 17278 00002965 B010                    	mov	al,attr_directory ; 10h
 17279                                  	;clc
 17280                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17281                                  	; (DOSCODE:683Eh)
 17282                                  	; 16/12/2022
 17283                                  	;clc
 17284 00002967 EBE7                    	jmp	short JustRet
 17285                                  
 17286                                  not_root:
 17287                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17288 00002969 1E                      	PUSH	DS
 17289 0000296A 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17290 0000296E 89DE                    	MOV	SI,BX
 17291 00002970 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17292 00002972 89DF                    	MOV	DI,BX
 17293                                  	;mov	cx,[si+16h]
 17294 00002974 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17295                                  	;mov	dx,[si+18h]
 17296 00002977 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17297 0000297A 30E4                    	XOR	AH,AH
 17298                                  	;mov	al,[si+0Bh]
 17299 0000297C 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17300                                  	;test	al,10h
 17301 0000297F A810                    	TEST	AL,attr_directory
 17302 00002981 7506                    	JNZ	short NO_SIZE
 17303                                  	;mov	di,[si+1Ch]
 17304 00002983 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17305                                  	;mov	bx,[si+1Eh]
 17306 00002986 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17307                                  NO_SIZE:
 17308 00002989 1F                      	POP	DS
 17309                                  	;CLC
 17310                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17311                                  	; (DOSCODE:6864h)
 17312                                  	; 16/12/2022
 17313                                  	;clc
 17314 0000298A EBC4                    	jmp	short JustRet
 17315                                  
 17316                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17317                                  ;-------------------------------------------------------------------------------
 17318                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17319                                  ; Inputs:
 17320                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17321                                  ;		terminated)
 17322                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17323                                  ;		( = -1 if current dir not involved, else
 17324                                  ;		 Points to first char after last "/" of current dir part)
 17325                                  ;	[THISCDS] Points to CDS being used
 17326                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17327                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17328                                  ;	AX is new attributes to give to file
 17329                                  ; Function:
 17330                                  ;	Set File Attributes
 17331                                  ; Returns:
 17332                                  ;	CARRY CLEAR
 17333                                  ;	    No error
 17334                                  ;	CARRY SET
 17335                                  ;	    AX is error code
 17336                                  ;		error_file_not_found
 17337                                  ;			Last element of path not found
 17338                                  ;		error_path_not_found
 17339                                  ;			Bad path (not in curr dir part if present)
 17340                                  ;		error_bad_curr_dir
 17341                                  ;			Bad path in current directory part of path
 17342                                  ;		error_access_denied
 17343                                  ;			Attempt to set an attribute which cannot be set
 17344                                  ;			(attr_directory, attr_volume_ID)
 17345                                  ;		error_sharing_violation
 17346                                  ;			Sharing mode of file did not allow the change
 17347                                  ;			(this request requires exclusive write/read access)
 17348                                  ;			(INT 24H generated)
 17349                                  ; DS preserved, others destroyed
 17350                                  ;----------------------------------------------------------------------------
 17351                                  
 17352                                  SET_FILE_ATTRIBUTE:
 17353                                  
 17354                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17355                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17356                                  
 17357 0000298C A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17358 0000298F 7414                    	JZ	short set_look
 17359                                  _BAD_ACC:
 17360 00002991 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17361 00002996 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17362 0000299B C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17363 000029A0 B80500                  	MOV	AX,error_access_denied ; 5
 17364 000029A3 F9                      	STC
 17365 000029A4 C3                      	retn
 17366                                  
 17367                                  set_look:
 17368 000029A5 E8A3E8                  	call	TestNet
 17369 000029A8 7308                    	JNC	short LOCAL_SET
 17370                                  
 17371                                  ;IF NOT Installed
 17372                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17373                                  ;ELSE
 17374 000029AA 50                      	PUSH	AX
 17375                                  	
 17376                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17377                                  	;INT	2FH
 17378                                  
 17379 000029AB B80E11                  	mov     ax, 110Eh
 17380 000029AE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17381                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17382                                  			; SDA CDS pointer -> current directory
 17383                                  			; STACK: WORD new file attributes
 17384                                  			; Return: CF set on error
 17385                                  
 17386 000029B0 5B                      	POP	BX			; clean stack
 17387 000029B1 C3                      	retn
 17388                                  ;ENDIF
 17389                                  
 17390                                  LOCAL_SET:
 17391 000029B2 E858E9                  	call	ECritDisk
 17392 000029B5 50                      	PUSH	AX			; Save new attributes
 17393 000029B6 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17394 000029BB E85515                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17395 000029BE 7303                    	JNC	short set_check_device
 17396 000029C0 5B                      	POP	BX			; Clean stack (don't zap AX)
 17397 000029C1 EB83                    	JMP	short NO_PATH
 17398                                  
 17399                                  set_check_device:
 17400 000029C3 08E4                    	OR	AH,AH
 17401 000029C5 7906                    	JNS	short set_check_share
 17402 000029C7 58                      	POP	AX
 17403 000029C8 E85DE9                  	call	LCritDisk
 17404 000029CB EBC4                    	JMP	short _BAD_ACC 		; device
 17405                                  
 17406                                  set_check_share:
 17407 000029CD 58                      	POP	AX			; Get new attributes
 17408                                  
 17409                                  	; MSDOS 6.0
 17410 000029CE 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17411 000029D3 740A                    	je	short cannot_set_root	; M025: Y: return error
 17412                                  
 17413                                  	; MSDOS 3.3 & MSDOS 6.0
 17414 000029D5 E878FC                  	call	REN_DEL_Check
 17415 000029D8 730B                    	JNC	short set_do
 17416 000029DA B82000                  	MOV	AX,error_sharing_violation ; 32
 17417 000029DD EB3A                    	jmp	short OK_BYE
 17418                                  
 17419                                  	; MSDOS 6.0
 17420                                  cannot_set_root:			; M025:
 17421 000029DF B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17422 000029E2 F9                      	stc				; M025: to set attr. of root
 17423 000029E3 EB34                    	jmp	short OK_BYE		; M025:
 17424                                  
 17425                                  set_do:
 17426                                  	; MSDOS 3.3 & MSDOS 6.0
 17427 000029E5 C43E[E205]              	LES	DI,[CURBUF]
 17428 000029E9 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17429 000029EE 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17430                                  
 17431                                  	; MSDOS 6.0
 17432 000029F2 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17433                                  					;LB. if already dirty		  ;AN000;
 17434 000029F7 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17435 000029F9 E84931                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17436                                  	
 17437 000029FC 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17438                                  yesdirty3:
 17439 00002A01 A0[7605]                	MOV	AL,[THISDRV]
 17440                                  ;;;; 10/1/86 F.C update fastopen cache
 17441 00002A04 52                      	PUSH	DX
 17442 00002A05 57                      	PUSH	DI
 17443 00002A06 B400                    	MOV	AH,0		  ; dir entry update
 17444 00002A08 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17445 00002A0A 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17446 00002A0C E8DEFC                  	call	FastOpen_Update
 17447 00002A0F 5F                      	POP	DI
 17448 00002A10 5A                      	POP	DX
 17449                                  ;;;; 9/11/86 F.C update fastopen cache
 17450 00002A11 E82C30                  	call	FLUSHBUF
 17451 00002A14 7303                    	JNC	short OK_BYE
 17452 00002A16 B80200                  	MOV	AX,error_file_not_found
 17453                                  OK_BYE:
 17454                                  	;call	LCritDisk
 17455                                  	;retn
 17456                                  	; 16/12/2022
 17457 00002A19 E90CE9                  	jmp	LCritDisk
 17458                                  
 17459                                  	; 17/05/2019 - Retro DOS v4.0
 17460                                  
 17461                                  	; MSDOS 6.0
 17462                                  GET_FAST_PATH:
 17463                                  ;hkn; use SS override for FastOpenFlg
 17464 00002A1C 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17465                                  					;FO. trigger fastopen	;AN000;
 17466 00002A22 E8EE14                  	call	GETPATH
 17467 00002A25 9C                      	PUSHF			 	;FO.			;AN000;
 17468 00002A26 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17469                                  					;FO. clear all fastopen flags ;AN000;
 17470 00002A2C 9D                      	POPF				;FO.			;AN000;
 17471 00002A2D C3                      	retn
 17472                                  
 17473                                  ;============================================================================
 17474                                  ; DUP.ASM, MSDOS 6.0, 1991
 17475                                  ;============================================================================
 17476                                  ; 08/08/2018 - Retro DOS v3.0
 17477                                  ; 17/05/2019 - Retro DOS v4.0
 17478                                  
 17479                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17480                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17481                                  ;
 17482                                  ;	DOS_DUP
 17483                                  ;
 17484                                  ;	Modification history:
 17485                                  ;
 17486                                  ;	  Created: ARR 30 March 1983
 17487                                  
 17488                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17489                                  ;---------------------------------------------------------------------------
 17490                                  ; Procedure Name : DOS_DUP
 17491                                  ;
 17492                                  ; Inputs:
 17493                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17494                                  ;		(a non net SFT is OK, in this case the ref
 17495                                  ;		 count is simply incremented)
 17496                                  ; Function:
 17497                                  ;	Signal to the devices that a logical open is occurring
 17498                                  ; Returns:
 17499                                  ;	ES:DI point to SFT
 17500                                  ;    Carry clear
 17501                                  ;	SFT ref_count is incremented
 17502                                  ; Registers modified: None.
 17503                                  ; NOTE:
 17504                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17505                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17506                                  ;	that time.
 17507                                  ;---------------------------------------------------------------------------
 17508                                  
 17509                                  DOS_DUP:
 17510                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17511                                  
 17512                                  	; MSDOS 6.0
 17513 00002A2E 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17514 00002A33 26C43E[9E05]            	les	di,[es:THISSFT]
 17515                                  
 17516                                  	;Entry	Dos_Dup_Direct
 17517                                  DOS_Dup_Direct:
 17518 00002A38 E829E8                  	call	IsSFTNet
 17519 00002A3B 7503                    	JNZ	short DO_INC
 17520 00002A3D E8A01B                  	call	DEV_OPEN_SFT
 17521                                  DO_INC:
 17522                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17523 00002A40 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17524                                  					;   we're in big trouble anyway)
 17525 00002A43 C3                      	retn
 17526                                  
 17527                                  ;============================================================================
 17528                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17529                                  ;============================================================================
 17530                                  ; 08/08/2018 - Retro DOS v3.0
 17531                                  ; 18/05/2019 - Retro DOS v4.0
 17532                                  
 17533                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17534                                  ;NAME	DOS_CREATE
 17535                                  ;----------------------------------------------------------------------------
 17536                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17537                                  ;
 17538                                  ;	DOS_CREATE
 17539                                  ;	DOS_CREATE_NEW
 17540                                  ;	SET_MKND_ERR
 17541                                  ;	SET_Media_ID
 17542                                  ;	SET_EXT_Mode
 17543                                  ;
 17544                                  ;	Revision history:
 17545                                  ;
 17546                                  ;	    A000 version 4.00	  Jan. 1988
 17547                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17548                                  
 17549                                  ;Installed = TRUE
 17550                                  
 17551                                  ;	i_need	THISSFT,DWORD
 17552                                  ;	i_need	THISCDS,DWORD
 17553                                  ;	I_need	EXTERR,WORD
 17554                                  ;	I_Need	ExtErr_locus,BYTE
 17555                                  ;	I_need	JShare,DWORD
 17556                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17557                                  ;	I_need	SATTRIB,BYTE
 17558                                  ;	I_need	CALLVIDM,DWORD
 17559                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17560                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17561                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17562                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17563                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17564                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17565                                  
 17566                                  ;***	DOS_CREATE - Create a File
 17567                                  ;----------------------------------------------------------------------------
 17568                                  ;	DOS_Create is called to create the specified file, truncating
 17569                                  ;	the old one if it exists.
 17570                                  ;
 17571                                  ;	ENTRY	AX is Attribute to create
 17572                                  ;		(ds) = DOSDATA
 17573                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17574                                  ;			terminated)
 17575                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17576                                  ;			( = -1 if current dir not involved, else
 17577                                  ;			 Points to first char after last "/" of current dir part)
 17578                                  ;		[THISCDS] Points to CDS being used
 17579                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17580                                  ;		[THISSFT] Points to SFT to fill in if file created
 17581                                  ;			(sf_mode field set so that FCB may be detected)
 17582                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17583                                  ;
 17584                                  ;	EXIT	sf_ref_count is NOT altered
 17585                                  ;		CARRY CLEAR
 17586                                  ;		    THISSFT filled in.
 17587                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17588                                  ;		CARRY SET
 17589                                  ;		    AX is error code
 17590                                  ;			error_path_not_found
 17591                                  ;				Bad path (not in curr dir part if present)
 17592                                  ;			error_bad_curr_dir
 17593                                  ;				Bad path in current directory part of path
 17594                                  ;			error_access_denied
 17595                                  ;				Attempt to re-create read only file , or
 17596                                  ;				create a second volume id or create a dir
 17597                                  ;			error_sharing_violation
 17598                                  ;				The sharing mode was correct but not allowed
 17599                                  ;				generates an INT 24
 17600                                  ;	USES	all but DS
 17601                                  ;----------------------------------------------------------------------------
 17602                                  
 17603                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17604                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17605                                  
 17606                                  DOS_CREATE:
 17607                                  	; 18/05/2019 - Retro DOS v4.0
 17608                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17609                                  
 17610                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17611                                  ;hkn; this point.
 17612                                  
 17613 00002A44 30E4                    	XOR	AH,AH		; Truncate is OK
 17614                                  
 17615                                  ;	Enter here from Dos_Create_New
 17616                                  ;
 17617                                  ;	(ah) = 0 iff truncate OK
 17618                                  
 17619                                  Create_inter:
 17620 00002A46 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17621                                  				; Mask out any meaningless bits
 17622 00002A48 7511                    	JNZ	short AttErr
 17623 00002A4A A808                    	TEST	AL,attr_volume_id
 17624 00002A4C 7407                    	JZ	short NoReset
 17625                                  	
 17626                                  	; MSDOS 6.0
 17627                                  	; 16/12/2022
 17628 00002A4E 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17629                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17630                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17631                                  	
 17632 00002A53 B008                    	MOV	AL,attr_volume_id ; 8
 17633                                  NoReset:
 17634 00002A55 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17635 00002A57 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17636 00002A59 740A                    	JZ	short ATT_OK
 17637                                  AttErr:
 17638 00002A5B B80500                  	MOV	AX,5		; Attribute problem
 17639 00002A5E C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17640 00002A63 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17641                                  				   ;	attr_device to be set.
 17642                                  ATT_OK:
 17643 00002A65 C43E[9E05]              	LES	DI,[THISSFT]
 17644 00002A69 06                      	PUSH	ES
 17645 00002A6A C436[A205]              	LES	SI,[THISCDS]
 17646 00002A6E 83FEFF                  	CMP	SI,-1
 17647 00002A71 751D                    	JNE	short TEST_RE_NET
 17648                                  
 17649                                  ;	No CDS, it must be redirected.
 17650                                  
 17651 00002A73 07                      	POP	ES
 17652                                  
 17653                                  	; MSDOS 6.0
 17654                                  ;Extended open hooks
 17655                                  	;test	byte [EXTOPEN_ON],1
 17656 00002A74 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17657 00002A79 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17658                                  IFS_extopen:				    ;AN000;EO.
 17659 00002A7B 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17660                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17661 00002A7C B82E11                  	mov	ax,112Eh
 17662 00002A7F CD2F                    	INT	2FH			    ;AN000;EO.
 17663 00002A81 5B                      	POP	BX			    ;AN000;EO. trash bx
 17664 00002A82 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17665 00002A87 C3                      	retn				    ;AN000;EO.
 17666                                  NOEXTOP:				    ;AN000;
 17667                                  ;Extended open hooks
 17668                                  
 17669                                  ;IF NOT Installed
 17670                                  ;	transfer NET_SEQ_CREATE
 17671                                  ;ELSE
 17672 00002A88 50                      	PUSH	AX
 17673                                  
 17674                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17675                                  	;INT	2FH
 17676                                  
 17677 00002A89 B81811                  	mov     ax,1118h
 17678 00002A8C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17679                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17680                                  			; SDA first filename pointer -> fully-qualified name of file
 17681                                  			; STACK: WORD file creation mode???
 17682                                  
 17683 00002A8E 5B                      	POP	BX			; BX is trashed anyway
 17684 00002A8F C3                      	retn
 17685                                  ;ENDIF
 17686                                  
 17687                                  ;	We have a CDS. See if it's network
 17688                                  
 17689                                  TEST_RE_NET:
 17690                                  	;;test	word [es:si+43h],8000h
 17691                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17692                                  	; 07/12/2022
 17693                                  	;test	byte [es:si+44h],80h
 17694                                  	; 17/12/2022
 17695 00002A90 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17696 00002A95 07                      	POP	ES
 17697 00002A96 7419                    	JZ	short LOCAL_CREATE
 17698                                  
 17699                                  	; MSDOS 6.0
 17700 00002A98 E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17701 00002A9B 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17702                                  	;;or	word [es:di+2],2
 17703                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17704                                  	; 17/12/2022
 17705 00002A9D 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17706                                  
 17707                                  ;Extended open hooks
 17708                                  dochk:
 17709 00002AA2 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17710 00002AA7 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17711                                  ;Extended open hooks
 17712                                  
 17713                                  ;IF NOT Installed
 17714                                  ;	transfer NET_CREATE
 17715                                  ;ELSE
 17716 00002AA9 50                      	PUSH	AX
 17717                                  	
 17718                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17719                                  	;INT	2FH
 17720                                  	
 17721 00002AAA B81711                  	mov     ax,1117h
 17722 00002AAD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17723                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17724                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17725                                  			; SDA CDS pointer -> current directory
 17726                                  			; Return: CF set on error
 17727                                  
 17728 00002AAF 5B                      	POP	BX			; BX is trashed anyway
 17729                                  ;nomore:
 17730 00002AB0 C3                      	retn
 17731                                  ;ENDIF
 17732                                  
 17733                                  ;**	It's a local create. We have a local CDS for it.
 17734                                  
 17735                                  LOCAL_CREATE:
 17736                                  	; MSDOS 6.0
 17737 00002AB1 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17738 00002AB4 7205                    	JC	short setdone	;AN000;EO.
 17739                                  	
 17740                                  	; MSDOS 3.3 & MSDOS 6.0
 17741                                  	; 17/12/2022
 17742                                  	;;or	word [es:di+2],2
 17743                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17744                                  	;or	byte [es:di+2],2
 17745 00002AB6 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17746                                  setdone:
 17747 00002ABB E84FE8                  	call	ECritDisk
 17748 00002ABE E8BE1E                  	call	MakeNode
 17749 00002AC1 7317                    	JNC	short Create_ok
 17750 00002AC3 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17751 00002AC8 E85DE8                  	call	LCritDisk
 17752                                  
 17753                                  	;entry	SET_MKND_ERR
 17754                                  SET_MKND_ERR:
 17755                                  
 17756                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17757                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17758                                  
 17759                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17760 00002ACB BB[D22A]                	MOV     BX,CRTERRTAB
 17761                                  	;XLAT  ; MSDOS 3.3
 17762                                  	; 18/05/2019 - Retro DOS v4.0
 17763 00002ACE 2E                      	CS
 17764 00002ACF D7                      	XLAT
 17765                                  CreatBadRet:
 17766 00002AD0 F9                      	STC
 17767 00002AD1 C3                      	retn
 17768                                  
 17769                                  ; 13/05/2019 - Retro DOS v4.0
 17770                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17771                                  ; ---------------------------------------------------------------------------
 17772                                  
 17773                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17774                                  
 17775                                  ; 17/07/2018 - Retro DOS v3.0
 17776                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17777                                  
 17778                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17779                                  ;	db	0,5,52h,50h,3,5,20h
 17780                                  
 17781                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17782                                  ;	db	0,5,52h,50h,3,5,20h,2
 17783                                  
 17784                                  ; 08/08/2018
 17785                                  
 17786                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17787 00002AD2 00                      	DB	0			; none
 17788 00002AD3 05                      	DB	error_access_denied	; MakeNode error 1
 17789 00002AD4 52                      	DB	error_cannot_make	; MakeNode error 2
 17790 00002AD5 50                      	DB	error_file_exists	; MakeNode error 3
 17791 00002AD6 03                      	DB	error_path_not_found	; MakeNode error 4
 17792 00002AD7 05                      	DB	error_access_denied	; MakeNode error 5
 17793 00002AD8 20                      	DB	error_sharing_violation ; MakeNode error 6
 17794                                  	; MSDOS 6.0
 17795 00002AD9 02                      	DB	error_file_not_found	; MakeNode error 7
 17796                                  
 17797                                  ; ---------------------------------------------------------------------------
 17798                                  
 17799                                  ; We have just created a new file. This results in the truncation of old
 17800                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17801                                  ; file to the current size.
 17802                                  
 17803                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17804                                  ; drive number to force a Build BPB after Media Check.
 17805                                  
 17806                                  ;;; FASTOPEN 8/29/86
 17807                                  Create_ok:
 17808 00002ADA E8E1FB                  	call	FastOpen_Delete
 17809                                  ;;; FASTOPEN 8/29/86
 17810 00002ADD A0[6D05]                	mov	al,[SATTRIB]
 17811 00002AE0 A808                    	test	al,attr_volume_id
 17812 00002AE2 741C                    	jz	short NoVolLabel
 17813 00002AE4 C43E[A205]              	LES	DI,[THISCDS]
 17814                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17815 00002AE8 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17816 00002AEB 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17817 00002AEE 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17818                                  	
 17819                                  	; 18/05/2019 - Retro DOS v4.0
 17820                                  
 17821                                  	; MSDOS 6.0
 17822 00002AF2 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17823 00002AF4 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17824                                  	
 17825 00002AF7 E813E8                  	call	ECritDisk
 17826 00002AFA E8CA2B                  	call	FATREAD_CDS		; force a media check
 17827 00002AFD E828E8                  	call	LCritDisk
 17828                                  
 17829                                  NoVolLabel:
 17830 00002B00 B80200                  	MOV	ax,2
 17831 00002B03 C43E[9E05]              	LES	DI,[THISSFT]
 17832                                  ;if installed
 17833                                  	;call	JShare + 14 * 4
 17834 00002B07 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17835                                  ;else
 17836                                  ;	Call	ShSU
 17837                                  ;endif
 17838 00002B0B E81AE8                  	call	LCritDisk
 17839 00002B0E E94901                  	jmp	SET_SFT_MODE
 17840                                  
 17841                                  ;---------------------------------------------------------------------------
 17842                                  ; Procedure Name : Dos_Create_New
 17843                                  ;
 17844                                  ; Inputs:
 17845                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17846                                  ;		terminated)
 17847                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17848                                  ;		( = -1 if current dir not involved, else
 17849                                  ;		 Points to first char after last "/" of current dir part)
 17850                                  ;	[THISCDS] Points to CDS being used
 17851                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17852                                  ;	[THISSFT] Points to SFT to fill in if file created
 17853                                  ;		(sf_mode field set so that FCB may be detected)
 17854                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17855                                  ;	AX is Attribute to create
 17856                                  ; Function:
 17857                                  ;	Try to create the specified file truncating an old one that exists
 17858                                  ; Outputs:
 17859                                  ;	sf_ref_count is NOT altered
 17860                                  ;	CARRY CLEAR
 17861                                  ;	    THISSFT filled in.
 17862                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17863                                  ;	CARRY SET
 17864                                  ;	    AX is error code
 17865                                  ;		error_path_not_found
 17866                                  ;			Bad path (not in curr dir part if present)
 17867                                  ;		error_bad_curr_dir
 17868                                  ;			Bad path in current directory part of path
 17869                                  ;		error_access_denied
 17870                                  ;			Create a second volume id or create a dir
 17871                                  ;		error_file_exists
 17872                                  ;			Already a file by this name
 17873                                  ; DS preserved, others destroyed
 17874                                  ;---------------------------------------------------------------------------
 17875                                  
 17876                                  DOS_Create_New:
 17877 00002B11 B401                    	MOV	AH,1		; Truncate is NOT OK
 17878 00002B13 E930FF                  	JMP	Create_inter
 17879                                  
 17880                                  ; MSDOS 6.0
 17881                                  ;---------------------------------------------------------------------------
 17882                                  ; Procedure Name : Set_Media_ID
 17883                                  ;
 17884                                  ; Inputs:
 17885                                  ;	NAME1= Volume ID
 17886                                  ;	BH= 0, delete volume id
 17887                                  ;	    1, set new volume id
 17888                                  ;	DS= DOSGROUP
 17889                                  ; Function:
 17890                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17891                                  ; Outputs:
 17892                                  ;	CARRY CLEAR
 17893                                  ;	    volume id set
 17894                                  ;	CARRY SET
 17895                                  ;	    AX is error code
 17896                                  ;---------------------------------------------------------------------------
 17897                                  
 17898                                  	; 18/05/2019 - Retro DOS v4.0
 17899                                  Set_Media_ID:
 17900 00002B16 50                      	PUSH	AX		;AN000;;>32mb
 17901 00002B17 06                      	PUSH	ES		;AN000;;>32mb
 17902 00002B18 57                      	PUSH	DI		;AN000;;>32mb
 17903                                  
 17904 00002B19 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17905 00002B1B 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17906 00002B1D B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17907 00002B1F B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17908                                  
 17909                                  ;hkn; PACKET_TEMP is in DOSDATA
 17910 00002B22 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17911                                  
 17912 00002B25 53                      	PUSH	BX		;AN000;;>32mb
 17913 00002B26 52                      	PUSH	DX		;AN000;;>32mb
 17914 00002B27 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17915                                  
 17916                                  	;invoke	$IOCTL		;AN000;;>32mb
 17917 00002B29 E840F7                  	call	_$IOCTL	
 17918                                  
 17919 00002B2C 5A                      	POP	DX		;AN000;;>32mb
 17920 00002B2D 5B                      	POP	BX		;AN000;;>32mb
 17921 00002B2E 7224                    	JC	short geterr	;AN000;;>32mb
 17922                                  
 17923 00002B30 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17924 00002B32 7405                    	JZ	short NoName	;AN000;>32mb yes
 17925                                  
 17926                                  ;hkn; NAME1 is in DOSDATA
 17927 00002B34 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17928                                  
 17929 00002B37 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17930                                  NoName: 			;AN000;
 17931                                  
 17932                                  ;hkn; NO_NAME_ID is in DOSDATA
 17933 00002B39 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17934                                  
 17935                                  doset:				;AN000;
 17936 00002B3C 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17937                                  	;add	di,6
 17938 00002B3E 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17939                                  
 17940                                  ;hkn; ES & DS must point to SS
 17941                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17942 00002B41 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17943                                  
 17944 00002B42 1F                      	POP	DS		;AN000;;>32mb
 17945                                  
 17946                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17947 00002B43 16                      	PUSH	SS		;AN000;;>32mb
 17948                                  
 17949 00002B44 07                      	POP	ES		;AN000;;>32mb
 17950 00002B45 B90B00                  	MOV	CX,11		;AN000;;>32mb
 17951 00002B48 F3A4                    	REP	MOVSB		;AN000;;>32mb
 17952 00002B4A B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17953 00002B4D B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17954 00002B4F 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17955                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17956 00002B51 E818F7                  	call	_$IOCTL	
 17957                                  geterr: 			;AN000;
 17958                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17959 00002B54 16                      	PUSH	SS		;AN000;>32mb
 17960                                  
 17961 00002B55 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17962                                  
 17963 00002B56 5F                      	POP	DI		;AN000;;>32mb
 17964 00002B57 07                      	POP	ES		;AN000;;>32mb
 17965 00002B58 58                      	POP	AX		;AN000;;>32mb
 17966 00002B59 C3                      	retn			;AN000;>32mb
 17967                                  
 17968                                  ; MSDOS 6.0
 17969                                  ;---------------------------------------------------------------------------
 17970                                  ; Procedure Name : Set_EXT_mode
 17971                                  ;
 17972                                  ; Inputs:
 17973                                  ;	[EXTOPEN_ON]= flag for extended open
 17974                                  ;	SAVE_BX= mode specified in Extended Open
 17975                                  ; Function:
 17976                                  ;	Set mode in ThisSFT
 17977                                  ; Outputs:
 17978                                  ;	carry set,mode is set if from Extended Open
 17979                                  ;	carry clear, mode not set yet
 17980                                  ;---------------------------------------------------------------------------
 17981                                  
 17982                                  ; 13/05/2019 - Retro DOS v4.0
 17983                                  
 17984                                  Set_EXT_mode:
 17985                                  
 17986                                  ;hkn; SS override
 17987 00002B5A 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17988 00002B60 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17989 00002B62 50                      	PUSH	AX			    ;AN000;EO.
 17990                                  
 17991                                  ;hkn; SS override
 17992 00002B63 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17993                                  	;or	[es:di+2],ax
 17994 00002B67 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17995 00002B6B 58                      	POP	AX			    ;AN000;EO.
 17996 00002B6C F9                      	STC				    ;AN000;EO.
 17997                                  NOTEX:					    ;AN000;
 17998 00002B6D C3                      	retn				    ;AN000;EO.
 17999                                  
 18000                                  ;============================================================================
 18001                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18002                                  ;============================================================================
 18003                                  ; 08/08/2018 - Retro DOS v3.0
 18004                                  ; 18/05/2019 - Retro DOS v4.0
 18005                                  
 18006                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18007                                  ;	NAME	DOS_OPEN
 18008                                  
 18009                                  ;**	OPEN.ASM - File Open
 18010                                  ;----------------------------------------------------------------------------
 18011                                  ;	Low level routines for openning a file from a file spec.
 18012                                  ;	Also misc routines for sharing errors
 18013                                  ;
 18014                                  ;	DOS_Open
 18015                                  ;	Check_Access_AX
 18016                                  ;	SHARE_ERROR
 18017                                  ;	SET_SFT_MODE
 18018                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18019                                  ;
 18020                                  ;	Revision history:
 18021                                  ;
 18022                                  ;	    Created: ARR 30 March 1983
 18023                                  ;	    A000	version 4.00   Jan. 1988
 18024                                  ;
 18025                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18026                                  ; 	       remote extended opens and not save_cx.
 18027                                  ;
 18028                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18029                                  ;	       on the stack before calling off to the redir.
 18030                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18031                                  ;	       to handle open from exec. In this case set the appropriate bit
 18032                                  ;	       else do not.
 18033                                  ;----------------------------------------------------------------------------	
 18034                                  
 18035                                  ;Installed = TRUE
 18036                                  
 18037                                  ;	i_need	NoSetDir,BYTE
 18038                                  ;	i_need	THISSFT,DWORD
 18039                                  ;	i_need	THISCDS,DWORD
 18040                                  ;	i_need	CURBUF,DWORD
 18041                                  ;	i_need	CurrentPDB,WORD
 18042                                  ;	i_need	CURR_DIR_END,WORD
 18043                                  ;	I_need	RetryCount,WORD
 18044                                  ;	I_need	Open_Access,BYTE
 18045                                  ;	I_need	fSharing,BYTE
 18046                                  ;	i_need	JShare,DWORD
 18047                                  ;	I_need	FastOpenFlg,byte
 18048                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18049                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18050                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18051                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18052                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18053                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18054                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18055                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18056                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18057                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18058                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18059                                  ;
 18060                                  ;	I_need	DOS_FLAG,BYTE
 18061                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18062                                  
 18063                                  ;Break	<DOS_Open - internal file access>
 18064                                  ;---------------------------------------------------------------------------
 18065                                  ; Procedure Name : DOS_Open
 18066                                  ;
 18067                                  ; Inputs:
 18068                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18069                                  ;		terminated)
 18070                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18071                                  ;		( = -1 if current dir not involved, else
 18072                                  ;		 Points to first char after last "/" of current dir part)
 18073                                  ;	[THISCDS] Points to CDS being used
 18074                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18075                                  ;	[THISSFT] Points to SFT to fill in if file found
 18076                                  ;		(sf_mode field set so that FCB may be detected)
 18077                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18078                                  ;	AX is Access and Sharing mode
 18079                                  ;	  High NIBBLE of AL (Sharing Mode)
 18080                                  ;		sharing_compat	   file is opened in compatibility mode
 18081                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18082                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18083                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18084                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18085                                  ;	  Low NIBBLE of AL (Access Mode)
 18086                                  ;		open_for_read	file is opened for reading
 18087                                  ;		open_for_write	file is opened for writing
 18088                                  ;		open_for_both	file is opened for both reading and writing.
 18089                                  ;
 18090                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18091                                  ;		(not checked)
 18092                                  ; Function:
 18093                                  ;	Try to open the specified file
 18094                                  ; Outputs:
 18095                                  ;	sf_ref_count is NOT altered
 18096                                  ;	CARRY CLEAR
 18097                                  ;	    THISSFT filled in.
 18098                                  ;	CARRY SET
 18099                                  ;	    AX is error code
 18100                                  ;		error_file_not_found
 18101                                  ;			Last element of path not found
 18102                                  ;		error_path_not_found
 18103                                  ;			Bad path (not in curr dir part if present)
 18104                                  ;		error_bad_curr_dir
 18105                                  ;			Bad path in current directory part of path
 18106                                  ;		error_invalid_access
 18107                                  ;			Bad sharing mode or bad access mode or bad combination
 18108                                  ;		error_access_denied
 18109                                  ;			Attempt to open read only file for writting, or
 18110                                  ;			open a directory
 18111                                  ;		error_sharing_violation
 18112                                  ;			The sharing mode was correct but not allowed
 18113                                  ;			generates an INT 24 on compatibility mode SFTs
 18114                                  ; DS preserved, others destroyed
 18115                                  ;----------------------------------------------------------------------------
 18116                                  
 18117                                  ; 18/05/2019 - Retro DOS v4.0
 18118                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18119                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18120                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18121                                  
 18122                                  DOS_OPEN:
 18123                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18124                                  
 18125 00002B6E C606[4C03]00            	MOV	byte [NoSetDir],0
 18126 00002B73 E83301                  	CALL	Check_Access_AX
 18127 00002B76 722B                    	JC	short do_ret_label	    ; retc
 18128                                  
 18129 00002B78 C43E[9E05]              	LES	DI,[THISSFT]
 18130 00002B7C 30E4                    	XOR	AH,AH
 18131                                  
 18132                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18133                                  
 18134 00002B7E 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18135 00002B82 06                      	PUSH	ES
 18136 00002B83 C436[A205]              	LES	SI,[THISCDS]
 18137                                  	; 18/08/2018
 18138 00002B87 83FEFF                  	CMP	SI,-1
 18139 00002B8A 7530                    	JNZ	short TEST_RE_NET1
 18140 00002B8C 07                      	POP	ES
 18141                                  
 18142                                  	; MSDOS 6.0
 18143                                  ;Extended open hooks
 18144 00002B8D F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18145 00002B92 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18146                                  _IFS_extopen:									;AN000;
 18147 00002B94 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18148                                  					    ; with which call was made. This
 18149                                  					    ; has the open access bits. 
 18150                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18151                                  	
 18152 00002B97 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18153                                  	;mov	ax,112Eh
 18154                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18155 00002B98 B82E11                  	mov	ax,(MultNET*256)+46 
 18156 00002B9B CD2F                    	INT	2FH			    ;FT.				;AN000;
 18157 00002B9D 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18158 00002B9E C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18159                                  
 18160                                  do_ret_label:
 18161 00002BA3 C3                      	retn				    ;FT.				;AN000;
 18162                                  _NOEXTOP:
 18163                                  ;Extended open hooks
 18164                                  	;
 18165                                  ;IF NOT Installed
 18166                                  	;transfer NET_SEQ_OPEN
 18167                                  ;ELSE
 18168                                  	
 18169                                  do_net_int2f:
 18170 00002BA4 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18171 00002BA9 7409                    	jz	short not_exec_open	; N: just do net open
 18172                                  					; Y: check to see if redir is aware
 18173                                  					;    of this 
 18174                                  	
 18175                                  					; M042 - start
 18176                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18177 00002BAB F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18178                                  					; Q: does this redir know how to 
 18179                                  					;    this
 18180 00002BB0 7402                    	jz	short not_exec_open	; N: just do net open
 18181                                  					; Y: set bit 3 of access byte and 
 18182                                  					;    set sharing mode to DENY_WRITE
 18183                                  					; M042 - end
 18184                                  	
 18185                                  	; NOTE: This specific mode has not been set for the code assembled
 18186                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18187                                  	; always one.
 18188                                  					; M035 - set the bits on the stack
 18189                                  	;mov	al,23h
 18190 00002BB2 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18191                                  	
 18192                                  not_exec_open:
 18193                                  	; MSDOS 3.3 & MSDOS 6.0
 18194 00002BB4 50                      	PUSH	AX
 18195                                  
 18196                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18197                                  	;INT	2FH
 18198                                  
 18199 00002BB5 B81611                  	mov     ax,1116h
 18200 00002BB8 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18201                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18202                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18203                                  			; STACK: WORD file open mode
 18204                                  			; Return: CF set on error
 18205                                  
 18206 00002BBA 5B                      	POP	BX			; clean stack
 18207                                  ;do_ret_label: ; 09/08/2018
 18208 00002BBB C3                      	retn
 18209                                  ;ENDIF
 18210                                  
 18211                                  TEST_RE_NET1:
 18212                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18213                                  	; 17/12/2022
 18214 00002BBC 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18215 00002BC1 07                      	POP	ES
 18216                                  	; 18/05/2019
 18217 00002BC2 7409                    	JZ	short LOCAL_OPEN
 18218                                  
 18219                                  ;Extended open hooks
 18220                                  	; MSDOS 6.0
 18221 00002BC4 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18222 00002BC9 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18223                                  ;Extended open hooks
 18224                                  
 18225                                  ;IF NOT Installed
 18226                                  ;	transfer NET_OPEN
 18227                                  ;ELSE
 18228 00002BCB EBD7                    	jmp	short do_net_int2f
 18229                                  ;ENDIF
 18230                                  
 18231                                  LOCAL_OPEN:
 18232                                  	; MSDOS 3.3 & MSDOS 6.0
 18233 00002BCD E83DE7                  	call	ECritDisk
 18234                                  
 18235                                  ; DOS 3.3 FastOPen 6/16/86
 18236                                  
 18237                                  	;or	byte [FastOpenFlg],5
 18238 00002BD0 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18239                                  
 18240 00002BD5 E83B13                  	call	GETPATH
 18241                                  
 18242                                  ; DOS 3.3 FastOPen 6/16/86
 18243                                  
 18244 00002BD8 731D                    	JNC	short Open_found
 18245 00002BDA 7511                    	JNZ	short bad_path2
 18246 00002BDC 08C9                    	OR	CL,CL
 18247 00002BDE 740D                    	JZ	short bad_path2
 18248                                  OpenFNF:
 18249 00002BE0 B80200                  	MOV	AX,error_file_not_found	; 2
 18250                                  OpenBadRet:
 18251                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18252                                  	; 12/08/2018
 18253                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18254                                  	; MSDOS 6.0
 18255 00002BE3 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18256 00002BE9 F9                      	STC
 18257                                  	;call	LCritDisk
 18258                                  	; 16/12/2022
 18259 00002BEA E93BE7                  	jmp	LCritDisk
 18260                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18261                                  	;retn 	; 08/09/2018
 18262                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18263                                  	;jmp	Clear_FastOpen
 18264                                  
 18265                                  bad_path2:
 18266 00002BED B80300                  	MOV	AX,error_path_not_found	; 3
 18267 00002BF0 EBF1                    	JMP	short OpenBadRet
 18268                                  
 18269                                  Open_Bad_Access:
 18270 00002BF2 B80500                  	MOV	AX,error_access_denied	; 5
 18271 00002BF5 EBEC                    	JMP	short OpenBadRet
 18272                                  
 18273                                  Open_found:
 18274 00002BF7 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18275 00002BF9 08E4                    	OR	AH,AH
 18276 00002BFB 783E                    	JS	short open_ok		; Devices don't have attributes
 18277 00002BFD 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18278                                  	;mov	al,[es:bx+0Bh]
 18279 00002C01 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18280 00002C05 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18281 00002C07 75E9                    	JNZ	short Open_Bad_Access
 18282 00002C09 A801                    	TEST	AL,attr_read_only	; check write on read only
 18283 00002C0B 742E                    	JZ	short open_ok
 18284                                  
 18285                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18286                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18287                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18288                                  ; processing until the actual write operation:
 18289                                  ;
 18290                                  ; If FCB, then we change the mode to be read_only.
 18291                                  ; If net_FCB, then we change the mode to be read_only.
 18292                                  ; If not open for read then error.
 18293                                  
 18294 00002C0D 1E                      	push	ds
 18295 00002C0E 56                      	push	si
 18296 00002C0F C536[9E05]              	LDS	SI,[THISSFT]
 18297                                  	;mov	cx,[si+2]
 18298 00002C13 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18299                                  	; 17/12/2022
 18300                                  	;test	ch,80h
 18301 00002C16 F6C580                  	test	ch,sf_isFCB>>8
 18302                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18303 00002C19 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18304 00002C1B 88CA                    	MOV	DL,CL
 18305 00002C1D 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18306 00002C20 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18307 00002C23 7508                    	JNZ	short NormalOpen	; no
 18308                                  ResetAccess:
 18309                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18310                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18311                                  	; 16/12/2022
 18312 00002C25 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18313                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18314 00002C28 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18315 00002C2B EB0C                    	JMP	SHORT FillSFT
 18316                                  
 18317                                  ; The SFT is normal. See if the requested access is open_for_read
 18318                                  
 18319                                  NormalOpen:
 18320 00002C2D 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18321 00002C30 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18322 00002C33 7404                    	JZ	short FillSFT
 18323 00002C35 5E                      	pop	si
 18324 00002C36 1F                      	pop	ds
 18325 00002C37 EBB9                    	JMP	short Open_Bad_Access
 18326                                  ;
 18327                                  ; All done, restore registers and fill the SFT.
 18328                                  ;
 18329                                  FillSFT:
 18330 00002C39 5E                      	pop	si
 18331 00002C3A 1F                      	pop	ds
 18332                                  open_ok:
 18333 00002C3B E8FF1E                  	call	DOOPEN			; Fill in SFT
 18334                                  
 18335                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18336                                  	; 18/05/2019
 18337                                  	;and	byte [ss:FastOpenFlag],80h
 18338 00002C3E 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18339                                  	; 12/08/2018
 18340                                  	;and	byte [FastOpenFlg],Fast_yes	
 18341                                  
 18342                                  	; MSDOS 6.0
 18343 00002C44 E84300                  	CALL	DO_SHARE_CHECK
 18344 00002C47 7303                    	JNC	short SHARE_OK
 18345                                  	;call	LCritDisk
 18346                                  	; 16/12/2022
 18347 00002C49 E9DCE6                  	jmp	LCritDisk
 18348                                  	;;JMP	short Clear_FastOpen
 18349                                  	;retn	; 18/05/2019
 18350                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18351                                  	;jmp	short Clear_FastOpen	
 18352                                  
 18353                                  	; MSDOS 3.3
 18354                                  ;DO_SHARE_CHECK:
 18355                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18356                                  ;OpenShareRetry:
 18357                                  ;	push	cx			; Save number left to do
 18358                                  ;	call	SHARE_CHECK		; Final Check
 18359                                  ;	pop	cx			; CX = # left
 18360                                  ;	JNC	short SHARE_OK		; No problem with access
 18361                                  ;	call	Idle
 18362                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18363                                  ;OpenShareFail:
 18364                                  ;	LES	DI,[THISSFT]
 18365                                  ;	call	SHARE_ERROR
 18366                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18367                                  	
 18368                                  	;12/08/2018
 18369                                  	;mov	byte [ss:FastOpenFlg],0
 18370                                  	;08/09/2018
 18371                                  	;mov	byte [FastOpenFlg],0
 18372                                  	;call	LCritDisk
 18373                                  	;JMP	short Clear_FastOpen
 18374                                  	;retn
 18375                                  
 18376                                  SHARE_OK:
 18377                                  	; MSDOS 3.3 & MSDOS 6.0
 18378 00002C4C B80300                  	MOV	AX,3
 18379 00002C4F C43E[9E05]              	LES	DI,[THISSFT]
 18380                                  ;if installed
 18381                                  	;call	JShare + 14 * 4
 18382 00002C53 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18383                                  ;else
 18384                                  ;	Call	ShSU
 18385                                  ;endif
 18386 00002C57 E8CEE6                  	call	LCritDisk
 18387                                  	
 18388                                  	;FallThru Set_SFT_Mode
 18389                                  
 18390                                  ;----------------------------------------------------------------------------
 18391                                  ; Procedure Name : SET_SFT_MODE
 18392                                  ;
 18393                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18394                                  ;
 18395                                  ;   Inputs:
 18396                                  ;	ThisSFT points to SFT
 18397                                  ;
 18398                                  ;   Outputs:
 18399                                  ;	Carry clear
 18400                                  ;   Registers modified: AX.
 18401                                  ;---------------------------------------------------------------------------
 18402                                  
 18403                                  ;hkn; called from create. DS already set up to DOSDATA.
 18404                                  
 18405                                  SET_SFT_MODE:
 18406 00002C5A C43E[9E05]              	LES	DI,[THISSFT]
 18407 00002C5E E87F19                  	call	DEV_OPEN_SFT
 18408                                  	;test	word [es:di+2],8000h
 18409                                  	; 17/12/2022
 18410                                  	;test	byte [es:di+3],80h
 18411 00002C61 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18412                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18413 00002C66 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18414 00002C68 A1[3003]                	MOV	AX,[CurrentPDB]
 18415                                  	;mov	[es:di+31h],ax
 18416 00002C6B 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18417                                  
 18418                                  Clear_FastOpen:
 18419 00002C6F C3                      	retn			       ;;;;; DOS 3.3
 18420                                  
 18421                                  ;----------------------------------------------------------------------------
 18422                                  ; Procedure Name : SHARE_ERROR
 18423                                  ;
 18424                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18425                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18426                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18427                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18428                                  ;---------------------------------------------------------------------------
 18429                                  
 18430                                  SHARE_ERROR:
 18431                                  	; 17/12/2022
 18432                                  	;test	byte [es:di+3],80h
 18433 00002C70 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18434                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18435 00002C75 7509                    	JNZ	short _HARD_ERR
 18436 00002C77 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18437 00002C7B 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18438                                  	;CMP	CL,SHARING_COMPAT ; 0
 18439                                  	;JNE	short _NO_HARD_ERR
 18440                                  	; 21/09/2023
 18441 00002C7E 7505                    	jnz	short _NO_HARD_ERR
 18442                                  _HARD_ERR:
 18443 00002C80 E8BA46                  	call	SHARE_VIOLATION
 18444                                  	;retnc				; User wants retry
 18445 00002C83 73EA                    	jnc	short Clear_FastOpen
 18446                                  _NO_HARD_ERR:
 18447 00002C85 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18448 00002C88 F9                      	STC
 18449 00002C89 C3                      	retn
 18450                                  
 18451                                  ; MSDOS 6.0
 18452                                  ;----------------------------------------------------------------------------
 18453                                  ; Procedure Name : DO_SHARE_CHECK
 18454                                  ;
 18455                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18456                                  ; Functions: check file sharing mode is valid
 18457                                  ; Output: carry set, error
 18458                                  ;	  carry clear, share ok
 18459                                  ;----------------------------------------------------------------------------
 18460                                  
 18461                                  	; 18/05/2019 - Retro DOS v4.0
 18462                                  DO_SHARE_CHECK:
 18463 00002C8A E880E6                  	call	ECritDisk		; enter critical section
 18464                                  OPN_RETRY:
 18465 00002C8D 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18466                                  OpenShareRetry:
 18467 00002C91 51                      	push	cx			; Save number left to do
 18468 00002C92 E8A346                  	call	SHARE_CHECK		; Final Check
 18469 00002C95 59                      	pop	cx			; CX = # left
 18470 00002C96 730E                    	JNC	short Share_Ok2		; No problem with access
 18471 00002C98 E86BE5                  	call	Idle
 18472 00002C9B E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18473                                  OpenShareFail:
 18474 00002C9D C43E[9E05]              	LES	DI,[THISSFT]
 18475 00002CA1 E8CCFF                  	call	SHARE_ERROR
 18476 00002CA4 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18477                                  Share_Ok2:
 18478                                  	;call	LCritDisk		; leave critical section
 18479                                  	;retn
 18480                                  	; 18/12/2022
 18481 00002CA6 E97FE6                  	jmp	LCritDisk
 18482                                  
 18483                                  ;-----------------------------------------------------------------------------
 18484                                  ; Procedure Name : Check_Access
 18485                                  ;
 18486                                  ; Inputs:
 18487                                  ;	AX is mode
 18488                                  ;	  High NIBBLE of AL (Sharing Mode)
 18489                                  ;		sharing_compat	   file is opened in compatibility mode
 18490                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18491                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18492                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18493                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18494                                  ;	  Low NIBBLE of AL (Access Mode)
 18495                                  ;		open_for_read	file is opened for reading
 18496                                  ;		open_for_write	file is opened for writing
 18497                                  ;		open_for_both	file is opened for both reading and writing.
 18498                                  ; Function:
 18499                                  ;	Check this access mode for correctness
 18500                                  ; Outputs:
 18501                                  ;	[open_access] = AL input
 18502                                  ;	Carry Clear
 18503                                  ;		Mode is correct
 18504                                  ;		AX unchanged
 18505                                  ;	Carry Set
 18506                                  ;		Mode is bad
 18507                                  ;		AX = error_invalid_access
 18508                                  ; No other registers effected
 18509                                  ;----------------------------------------------------------------------------
 18510                                  
 18511                                  Check_Access_AX:
 18512 00002CA9 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18513 00002CAC 53                      	PUSH	BX
 18514                                  
 18515                                  ;	If sharing, then test for special sharing mode for FCBs
 18516                                  
 18517 00002CAD 88C3                    	MOV	BL,AL
 18518 00002CAF 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18519 00002CB2 803E[7205]FF            	CMP	byte [FSHARING],-1
 18520 00002CB7 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18521 00002CB9 80FB70                  	CMP	BL,SHARING_NET_FCB
 18522 00002CBC 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18523                                  CheckShareMode:
 18524 00002CBE 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18525 00002CC1 770D                    	JA	short Make_Bad_Access
 18526                                  CheckAccessMode:
 18527 00002CC3 88C3                    	MOV	BL,AL
 18528 00002CC5 80E30F                  	AND	BL,access_mask
 18529 00002CC8 80FB02                  	CMP	BL,2
 18530 00002CCB 7703                    	JA	short Make_Bad_Access
 18531 00002CCD 5B                      	POP	BX
 18532 00002CCE F8                      	CLC
 18533 00002CCF C3                      	retn
 18534                                  
 18535                                  Make_Bad_Access:
 18536 00002CD0 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18537 00002CD3 5B                      	POP	BX
 18538 00002CD4 F9                      	STC
 18539 00002CD5 C3                      	retn
 18540                                  
 18541                                  ;============================================================================
 18542                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18543                                  ;============================================================================
 18544                                  ; 08/08/2018 - Retro DOS v3.0
 18545                                  ; 18/05/2019 - Retro DOS v4.0
 18546                                  
 18547                                  ;**	Low level routine for returning disk drive information from a local
 18548                                  ;	  or NET device
 18549                                  ;
 18550                                  ;	DISK_INFO
 18551                                  ;
 18552                                  ;	  Modification history:
 18553                                  ;
 18554                                  ;		Created: ARR 30 March 1983
 18555                                  
 18556                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18557                                  ;---------------------------------------------------------------------------
 18558                                  ; Procedure Name : DISK_INFO
 18559                                  ;
 18560                                  ; Inputs:
 18561                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18562                                  ;		(It MAY NOT be NUL, error not detected)
 18563                                  ; Function:
 18564                                  ;	Get Interesting Drive Information
 18565                                  ; Returns:
 18566                                  ;	DX = Number of free allocation units
 18567                                  ;	BX = Total Number of allocation units on disk
 18568                                  ;	CX = Sector size
 18569                                  ;	AL = Sectors per allocation unit
 18570                                  ;	AH = FAT ID BYTE
 18571                                  ;	Carry set if error (currently user FAILed to I 24)
 18572                                  ; Segs except ES preserved, others destroyed
 18573                                  ;----------------------------------------------------------------------------
 18574                                  
 18575                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18576                                  ;hkn; DOSDATA. 
 18577                                  
 18578                                  DISK_INFO:
 18579                                  	; 08/08/2018 - Retro DOS v3.0
 18580                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18581                                  
 18582 00002CD6 E872E5                  	call	TestNet
 18583 00002CD9 7306                    	JNC	short LOCAL_DSK_INFO
 18584                                  
 18585                                  ;IF NOT Installed
 18586                                  ;	transfer NET_DISK_INFO
 18587                                  ;ELSE
 18588                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18589                                  	;INT	2FH
 18590                                  	;return
 18591                                  
 18592 00002CDB B80C11                  	mov     ax,110Ch
 18593 00002CDE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18594                                  			; ES:DI -> current directory
 18595                                  			; Return: AL = sectors per cluster, BX = total clusters
 18596                                  			; CX = bytes per sector, DX = number of available clusters
 18597 00002CE0 C3                      	retn
 18598                                  ;ENDIF
 18599                                  
 18600                                  LOCAL_DSK_INFO:
 18601 00002CE1 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18602 00002CE6 E824E6                  	call	ECritDisk
 18603 00002CE9 E8DB29                  	call	FATREAD_CDS		; perform media check.
 18604 00002CEC 7241                    	JC	short CRIT_LEAVE
 18605 00002CEE BB0200                  	MOV	BX,2
 18606 00002CF1 E83D28                  	call	UNPACK			; Get first FAT sector into CURBUF
 18607 00002CF4 7239                    	JC	short CRIT_LEAVE
 18608 00002CF6 C536[E205]              	LDS	SI,[CURBUF]
 18609                                  	;mov	ah,[si+20]
 18610 00002CFA 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18611                                  
 18612                                  ;hkn; SS is DOSDATA
 18613 00002CFD 16                      	push	ss
 18614 00002CFE 1F                      	pop	ds
 18615                                  	;mov	cx,[es:bp+0Dh]
 18616 00002CFF 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18617                                  
 18618                                  ; Examine the current free count. If it indicates that we have an invalid
 18619                                  ; count, do the expensive calculation.
 18620                                  
 18621                                  	;mov	dx,[es:bp+1Fh]
 18622 00002D03 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18623 00002D07 83FAFF                  	CMP	DX,-1			; is it valid?
 18624 00002D0A 7404                    	JZ	short DoScan
 18625                                  
 18626                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18627                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18628                                  ; the count.
 18629                                  
 18630 00002D0C 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18631 00002D0E 7222                    	JB	short GotVal		; yes, trust it.
 18632                                  DoScan:
 18633 00002D10 31D2                    	XOR	DX,DX
 18634 00002D12 49                      	DEC	CX
 18635                                  SCANFREE:
 18636 00002D13 E81B28                  	call	UNPACK
 18637 00002D16 7217                    	JC	short CRIT_LEAVE
 18638 00002D18 7501                    	JNZ	short NOTFREECLUS
 18639 00002D1A 42                      	INC	DX			; A free one
 18640                                  NOTFREECLUS:
 18641 00002D1B 43                      	INC	BX			; Next cluster
 18642 00002D1C E2F5                    	LOOP	SCANFREE
 18643 00002D1E 4B                      	DEC	BX			; BX was next cluster. Convert to
 18644                                  ReturnVals:
 18645 00002D1F 4B                      	DEC	BX			; count
 18646                                  	;mov	al,[es:bp+4]
 18647 00002D20 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18648 00002D24 FEC0                    	INC	AL			; Sectors/cluster
 18649                                  	;mov	cx,[es:bp+2]
 18650 00002D26 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18651                                  	;mov	[es:bp+1Fh],dx
 18652 00002D2A 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18653 00002D2E F8                      	CLC
 18654                                  CRIT_LEAVE:
 18655                                  	;call	LCritDisk
 18656                                  	;retn
 18657                                  	; 17/12/2022
 18658 00002D2F E9F6E5                  	jmp	LCritDisk
 18659                                  
 18660                                  ; We have correctly computed everything previously. Load up registers for
 18661                                  ; return.
 18662                                  
 18663                                  GotVal: 
 18664 00002D32 89CB                    	MOV	BX,CX			; get cluster count
 18665 00002D34 EBE9                    	JMP	short ReturnVals
 18666                                  
 18667                                  ;============================================================================
 18668                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18669                                  ;============================================================================
 18670                                  ; 22/07/2018 - Retro DOS v3.0
 18671                                  
 18672                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18673                                  ;	NAME	DOS_SEARCH
 18674                                  
 18675                                  ;**	Low level routines for doing local and NET directory searches
 18676                                  ;
 18677                                  ;	DOS_SEARCH_FIRST
 18678                                  ;	DOS_SEARCH_NEXT
 18679                                  ;	RENAME_NEXT
 18680                                  ;
 18681                                  ;	Revision history:
 18682                                  ;
 18683                                  ;	    Created: ARR 30 March 1983
 18684                                  ;	    A000	version 4.00  Jan. 1988
 18685                                  ;	    A001	PTM 3564 -- search for fastopen
 18686                                  
 18687                                  ;Installed = TRUE
 18688                                  
 18689                                  ;--------------------------------------------------------------------------
 18690                                  ;
 18691                                  ; Procedure Name : DOS_SEARCH_FIRST
 18692                                  ;
 18693                                  ; Inputs:
 18694                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18695                                  ;		terminated)
 18696                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18697                                  ;		( = -1 if current dir not involved, else
 18698                                  ;		 Points to first char after last "/" of current dir part)
 18699                                  ;	[THISCDS] Points to CDS being used
 18700                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18701                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18702                                  ;	[DMAADD] Points to 53 byte buffer
 18703                                  ; Function:
 18704                                  ;	Initiate a search for the given file spec
 18705                                  ; Outputs:
 18706                                  ;	CARRY CLEAR
 18707                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18708                                  ;
 18709                                  ;	LOCAL
 18710                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18711                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18712                                  ;	    11 byte search name with Meta chars in it
 18713                                  ;	    Search Attribute Byte, attribute of search
 18714                                  ;	    WORD LastEnt value
 18715                                  ;	    WORD DirStart
 18716                                  ;	    4 byte pad
 18717                                  ;	    32 bytes of the directory entry found
 18718                                  ;	NET
 18719                                  ;	    21 bytes First byte has high bit set
 18720                                  ;	    32 bytes of the directory entry found
 18721                                  ;
 18722                                  ;	CARRY SET
 18723                                  ;	    AX = error code
 18724                                  ;		error_no_more_files
 18725                                  ;			No match for this file
 18726                                  ;		error_path_not_found
 18727                                  ;			Bad path (not in curr dir part if present)
 18728                                  ;		error_bad_curr_dir
 18729                                  ;			Bad path in current directory part of path
 18730                                  ; DS preserved, others destroyed
 18731                                  ;---------------------------------------------------------------------------
 18732                                  
 18733                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18734                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18735                                  
 18736                                  DOS_SEARCH_FIRST:
 18737                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18738                                  
 18739 00002D36 C43E[A205]              	LES	DI,[THISCDS]
 18740 00002D3A 83FFFF                  	CMP	DI,-1
 18741 00002D3D 7506                    	JNZ	short TEST_RE_NET2
 18742                                  
 18743                                  ;IF NOT Installed
 18744                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18745                                  ;ELSE
 18746                                  	;mov	ax,1119h
 18747 00002D3F B81911                  	MOV	AX,(MultNET<<8)|25
 18748 00002D42 CD2F                    	INT	2Fh
 18749 00002D44 C3                      	retn
 18750                                  ;ENDIF
 18751                                  
 18752                                  TEST_RE_NET2:
 18753                                  	;test	word [es:di+43h],8000h
 18754                                  	; 17/12/2022
 18755                                  	;test	byte [es:di+44h],80h
 18756                                  	; 28/12/2022
 18757 00002D45 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18758                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18759 00002D4A 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18760                                  
 18761                                  ;IF NOT Installed
 18762                                  ;	transfer NET_SEARCH_FIRST
 18763                                  ;ELSE
 18764                                  	;mov	ax,111Bh
 18765 00002D4C B81B11                  	MOV	AX,(MultNET<<8)|27
 18766 00002D4F CD2F                    	INT	2FH
 18767 00002D51 C3                      	retn
 18768                                  ;ENDIF
 18769                                  	; 18/05/2019 - Retro DOS v4.0
 18770                                  LOCAL_SEARCH_FIRST:
 18771 00002D52 E8B8E5                  	call	ECritDisk
 18772                                  	; MSDOS 6.0
 18773                                  	;;test	word [DOS34_FLAG],400h
 18774                                  	; 17/12/2022
 18775                                  	;test	byte [DOS34_FLAG+1],04h
 18776 00002D55 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18777                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18778 00002D5A 7405                    	JZ	short NOFN			;AN000;
 18779                                  	;or	byte [FastOpenFlg],1
 18780 00002D5C 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18781                                  NOFN:						;AN000;
 18782 00002D61 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18783                                  	; MSDOS 6.0
 18784 00002D66 E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18785 00002D69 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18786                                  	;and	byte [FastOpenFlg],80h
 18787 00002D6B 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18788                                  norm_GETPATH:
 18789 00002D70 E8A011                  	call	GETPATH
 18790                                  	; BX = offset NAME1
 18791                                  ;_getdone:
 18792 00002D73 7318                    	JNC	short find_check_dev
 18793 00002D75 7511                    	JNZ	short bad_path3
 18794 00002D77 08C9                    	OR	CL,CL
 18795 00002D79 740D                    	JZ	short bad_path3
 18796                                  find_no_more:
 18797                                  	;mov	ax,12h
 18798 00002D7B B81200                  	MOV	AX,error_no_more_files
 18799                                  BadBye:
 18800                                  	; MSDOS 6.0
 18801 00002D7E 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18802                                  
 18803 00002D84 F9                      	STC
 18804                                  	;call	LCritDisk
 18805                                  	;retn
 18806                                  	; 18/12/2022
 18807 00002D85 E9A0E5                  	jmp	LCritDisk
 18808                                  
 18809                                  bad_path3:
 18810                                  	;mov	ax,3
 18811 00002D88 B80300                  	MOV	AX,error_path_not_found
 18812 00002D8B EBF1                    	JMP	short BadBye
 18813                                  
 18814                                  find_check_dev:
 18815 00002D8D 08E4                    	OR	AH,AH
 18816 00002D8F 790A                    	JNS	short found_entry
 18817 00002D91 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18818 00002D97 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18819                                  found_entry:
 18820                                  
 18821                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18822                                  ; a search-next may not have wfp_start set correctly
 18823                                  
 18824 00002D9B C43E[2C03]              	LES	DI,[DMAADD]
 18825 00002D9F 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18826 00002DA3 AC                      	LODSB
 18827 00002DA4 2C40                    	SUB	AL,'A'-1                ; logical drive
 18828 00002DA6 AA                      	STOSB				; High bit not set (local)
 18829                                  found_it:
 18830 00002DA7 C43E[2C03]              	LES	DI,[DMAADD]
 18831 00002DAB 47                      	INC	DI
 18832                                  
 18833                                  	; MSDOS 6.0
 18834 00002DAC 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18835                                  	;test	byte [FastOpenFlg],10h
 18836 00002DAD F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18837 00002DB2 7408                    	JZ	short notfast			  ;FO.;AN001;
 18838 00002DB4 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18839 00002DB6 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18840 00002DBA EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18841                                  
 18842                                  notfast:
 18843 00002DBC BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18844                                  movmov:
 18845                                  ; Special E5 code
 18846 00002DBF A4                      	MOVSB
 18847 00002DC0 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18848 00002DC5 7505                    	JNZ	short NOTKANJB
 18849 00002DC7 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18850                                  NOTKANJB:
 18851 00002DCC B90A00                  	MOV	CX,10
 18852 00002DCF F3A4                    	REP	MOVSB
 18853                                  
 18854                                  	; 08/09/2018
 18855 00002DD1 1F                      	POP	DS			;FO.;AN001; restore ds
 18856                                  
 18857 00002DD2 A0[6B05]                	MOV	AL,[ATTRIB]
 18858 00002DD5 AA                      	STOSB
 18859 00002DD6 50                      	PUSH	AX			; Save AH device info
 18860 00002DD7 A1[4803]                	MOV	AX,[LASTENT]
 18861 00002DDA AB                      	STOSW
 18862 00002DDB A1[C205]                	MOV	AX,[DIRSTART]
 18863 00002DDE AB                      	STOSW
 18864                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18865 00002DDF 83C704                  	ADD	DI,4
 18866 00002DE2 58                      	POP	AX			; Recover AH device info
 18867 00002DE3 08E4                    	OR	AH,AH
 18868 00002DE5 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18869 00002DE7 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18870 00002DEC 7510                    	JNZ	short OKSTORE
 18871                                  
 18872                                  	; MSDOS 6.0
 18873 00002DEE F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18874                                  					;AN000;;FO. from fastopen and is good
 18875 00002DF3 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18876                                  
 18877                                  	; The user has specified the root directory itself, rather than some
 18878                                  	; contents of it. We can't "find" that.
 18879                                  
 18880 00002DF5 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18881                                  					;   stuffing a -1 at Lastent
 18882 00002DFB E97DFF                  	JMP	find_no_more
 18883                                  
 18884                                  OKSTORE:
 18885 00002DFE 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18886                                  DOSREL:
 18887                                  	; BX = offset NAME1 (from GETPATH)
 18888 00002E02 89DE                    	MOV	SI,BX			; SI-> start of entry
 18889                                  
 18890                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18891                                  
 18892                                  	;mov	cx,32
 18893 00002E04 B92000                  	MOV	CX,dir_entry.size
 18894                                  ;;;;; 7/29/86
 18895 00002E07 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18896 00002E09 F3A4                    	REP	MOVSB
 18897 00002E0B 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18898 00002E0D 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18899 00002E11 7504                    	JNZ	short NO05
 18900 00002E13 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18901                                  NO05:
 18902                                  
 18903                                  ;;;;; 7/29/86
 18904                                  
 18905                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18906                                  	; 16/12/2022
 18907                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18908                                  	; MSDOS 6.0
 18909                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18910                                  	; 18/05/2019 - Retro DOS v4.0
 18911 00002E17 16                      	push	ss
 18912 00002E18 1F                      	pop	ds
 18913                                  	; 16/12/2022
 18914 00002E19 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18915                                  
 18916                                  ;hkn; SS is DOSDATA
 18917                                  	;push	ss
 18918                                  	;pop	ds
 18919 00002E1E F8                      	CLC
 18920                                  	;call	LCritDisk
 18921                                  	;retn
 18922                                  	; 16/12/2022
 18923 00002E1F E906E5                  	jmp	LCritDisk
 18924                                  
 18925                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18926                                  ;----------------------------------------------------------------------------
 18927                                  ;
 18928                                  ; Procedure Name : DOS_SEARCH_NEXT
 18929                                  ;
 18930                                  ; Inputs:
 18931                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18932                                  ;	    (only first 21 bytes must have valid information)
 18933                                  ; Function:
 18934                                  ;	Look for subsequent matches
 18935                                  ; Outputs:
 18936                                  ;	CARRY CLEAR
 18937                                  ;	    The 53 bytes at DMAADD are updated for next call
 18938                                  ;		(see DOS_SEARCH_FIRST)
 18939                                  ;	CARRY SET
 18940                                  ;	    AX = error code
 18941                                  ;		error_no_more_files
 18942                                  ;			No more files to find
 18943                                  ; DS preserved, others destroyed
 18944                                  ;---------------------------------------------------------------------------
 18945                                  
 18946                                  ;hkn; called from search.asm. DS already set up at this point.
 18947                                  
 18948                                  DOS_SEARCH_NEXT:
 18949 00002E22 C43E[2C03]              	LES	DI,[DMAADD]
 18950 00002E26 268A05                  	MOV	AL,[ES:DI]
 18951 00002E29 A880                    	TEST	AL,80H			; Test for NET
 18952 00002E2B 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18953                                  ;IF NOT Installed
 18954                                  ;	transfer NET_SEARCH_NEXT
 18955                                  ;ELSE
 18956                                  	;mov	ax,111Ch
 18957 00002E2D B81C11                  	MOV	AX,(MultNET<<8)|28
 18958 00002E30 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18959                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18960                                  		     ; Return: CF set on error, AX = DOS error code
 18961                                  		     ; CF clear if successful
 18962 00002E32 C3                      	retn
 18963                                  ;ENDIF
 18964                                  
 18965                                  LOCAL_SEARCH_NEXT:
 18966                                  	;AL is drive A=1
 18967                                  	;mov	byte [EXTERR_LOCUS],2
 18968 00002E33 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18969 00002E38 E8D2E4                  	call	ECritDisk
 18970                                  
 18971                                  ;hkn; DummyCDS is in DOSDATA
 18972 00002E3B C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18973                                  ;hkn; Segment address is DOSDATA - use ds
 18974                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18975 00002E41 8C1E[A405]              	mov	[THISCDS+2],DS
 18976                                  
 18977 00002E45 0440                    	ADD	AL,'A'-1
 18978 00002E47 E8833B                  	call	InitCDS
 18979                                  
 18980                                  ;	call	GETTHISDRV		; Set CDS pointer
 18981                                  
 18982 00002E4A 7236                    	JC	short No_files		; Bogus drive letter
 18983 00002E4C C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18984                                  	;les	bp,[es:di+45h]
 18985 00002E50 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18986 00002E54 E8D7D7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18987                                  
 18988                                  	 ;16/12/2022
 18989 00002E57 268A4600                	mov	al,[ES:BP]
 18990                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18991                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18992 00002E5B A2[7605]                	mov	[THISDRV],AL
 18993                                  	;mov	word [CREATING],0E500h
 18994 00002E5E C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18995 00002E64 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18996 00002E69 C536[2C03]              	LDS	SI,[DMAADD]
 18997 00002E6D AC                      	LODSB				; Drive Byte
 18998                                  
 18999                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19000                                  RENAME_NEXT:
 19001                                  	;context ES
 19002 00002E6E 16                      	push	ss
 19003 00002E6F 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19004                                  
 19005                                  ;hkn; NAME1 is in DOSDATA
 19006 00002E70 BF[4B05]                	MOV	DI,NAME1
 19007                                  
 19008 00002E73 B90B00                  	MOV	CX,11
 19009 00002E76 F3A4                    	REP	MOVSB			; Search name
 19010 00002E78 AC                      	LODSB				; Attribute
 19011                                  
 19012                                  ;hkn; SS override
 19013 00002E79 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19014 00002E7D AD                      	LODSW				; LastEnt
 19015 00002E7E 09C0                    	OR	AX,AX
 19016 00002E80 7903                    	JNS	short cont_load
 19017                                  No_files:
 19018 00002E82 E9F6FE                  	JMP	find_no_more
 19019                                  
 19020                                  cont_load:
 19021 00002E85 50                      	PUSH	AX			; Save LastEnt
 19022 00002E86 AD                      	LODSW				; DirStart
 19023 00002E87 89C3                    	MOV	BX,AX
 19024                                  
 19025                                  ;hkn; SS is DOSDATA
 19026                                  	;context DS
 19027 00002E89 16                      	push	ss
 19028 00002E8A 1F                      	pop	ds
 19029 00002E8B C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19030                                  	;invoke	SetDirSrch
 19031 00002E8F E82410                  	call	SETDIRSRCH
 19032 00002E92 7303                    	JNC	short SEARCH_GOON
 19033 00002E94 58                      	POP	AX			; Clean stack
 19034 00002E95 EBEB                    	JMP	short No_files
 19035                                  
 19036                                  SEARCH_GOON:
 19037 00002E97 E80C13                  	call	STARTSRCH
 19038 00002E9A 58                      	POP	AX
 19039 00002E9B E8E90F                  	call	GETENT
 19040 00002E9E 72E2                    	JC	short No_files
 19041 00002EA0 E81F0F                  	call	NEXTENT
 19042 00002EA3 72DD                    	JC	short No_files
 19043 00002EA5 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19044 00002EA7 E9FDFE                  	JMP	found_it ; 10/08/2018
 19045                                  
 19046                                  ; MSDOS 6.0
 19047                                  ;---------------------------------------------------------------------------
 19048                                  ;
 19049                                  ; Procedure Name : CHECK_QUESTION
 19050                                  ;
 19051                                  ; Input: [WFP_START]= pointer to final path
 19052                                  ; Function: check '?' char
 19053                                  ; Output: carry clear, if no '?'
 19054                                  ;	 carry set, if '?' exists
 19055                                  ;---------------------------------------------------------------------------
 19056                                  
 19057                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19058                                  CHECK_QUESTION:
 19059                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19060                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19061 00002EAA 16                      	push	ss
 19062 00002EAB 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 19063                                  	; 16/12/2022
 19064                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19065 00002EAC 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 19066                                  	;mov	si,[ss:WFP_START]
 19067                                  getnext:				;AN000;
 19068 00002EB0 AC                      	LODSB				;AN000;;FO. get char
 19069 00002EB1 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 19070 00002EB3 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 19071 00002EB5 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19072 00002EB7 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 19073 00002EB9 F9                      	STC				;AN000;;FO.
 19074                                  NO_Question:				;AN000;
 19075 00002EBA C3                      	retn				;AN000;;FO.
 19076                                  
 19077                                  ;============================================================================
 19078                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19079                                  ;============================================================================
 19080                                  ; 23/07/2018 - Retro DOS v3.0
 19081                                  ; 18/05/2019 - Retro DOS v4.0
 19082                                  
 19083                                  ;**
 19084                                  ;
 19085                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19086                                  ;  If process has NET resources a close all is sent out over the net.
 19087                                  ;
 19088                                  ;   DOS_ABORT
 19089                                  ;
 19090                                  ;   Modification history:
 19091                                  ;
 19092                                  ;       Created: ARR 30 March 1983
 19093                                  ;
 19094                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19095                                  ;				being terminated only if it is busy.
 19096                                  ;
 19097                                  
 19098                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19099                                  ;--------------------------------------------------------------------------
 19100                                  ;
 19101                                  ; Procedure Name : DOS_ABORT
 19102                                  ;
 19103                                  ; Inputs:
 19104                                  ;       [CurrentPDB] set to PID of process aborting
 19105                                  ; Function:
 19106                                  ;       Close all files and free all SFTs for this PID
 19107                                  ; Returns:
 19108                                  ;       None
 19109                                  ; All destroyed except stack
 19110                                  ;---------------------------------------------------------------------------
 19111                                  
 19112                                  DOS_ABORT:
 19113 00002EBB 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19114 00002EC0 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19115                                  reset_free_jfn:
 19116 00002EC5 89CB                    	MOV     BX,CX
 19117 00002EC7 51                      	PUSH    CX
 19118 00002EC8 4B                      	DEC     BX                      ; get jfn (start with last one)
 19119                                  
 19120 00002EC9 E83538                  	CALL	_$CLOSE
 19121 00002ECC 59                      	POP     CX
 19122 00002ECD E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19123                                  
 19124                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19125                                  ; are running in the no-sharing no-network environment, we are simulating the
 19126                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19127                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19128                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19129                                  ;
 19130                                  ; If sharing is loaded, then the following call to close process will
 19131                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19132                                  ;
 19133                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19134                                  ; known network resources. These resources are then responsible for cleaning
 19135                                  ; up after this process.
 19136                                  ;
 19137                                  ; Sleazy, eh?
 19138                                  
 19139                                  	;context DS			; SS is DOSDATA
 19140 00002ECF 16                      	push	ss
 19141 00002ED0 1F                      	pop	ds  ; 09/09/2018
 19142                                  
 19143                                  	;CallInstall Net_Abort, MultNET, 29
 19144 00002ED1 B81D11                  	mov	ax, 111Dh
 19145 00002ED4 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19146                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19147                                  			; DS???, SS = DOS CS
 19148                                  ;if installed
 19149 00002ED6 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19150                                  ;else
 19151                                  ;	call 	MFTCloseP
 19152                                  ;endif
 19153                                  
 19154                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19155                                  ; counts.
 19156                                  					; SS override
 19157 00002EDA 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19158                                  	;mov	cx,[es:di+4]
 19159 00002EDF 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19160 00002EE3 E317                    	jcxz    FCBScanDone
 19161                                  	;lea	di,[di+6]
 19162 00002EE5 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19163 00002EE8 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19164                                  FCBTest:
 19165                                  	;cmp	[es:di+31h],ax
 19166 00002EEC 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19167 00002EF0 7505                    	jnz	short FCBNext		; no, skip it
 19168 00002EF2 26C7050000              	mov	word [es:di],0
 19169                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19170                                  FCBNext:
 19171 00002EF7 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19172 00002EFA E2F0                    	loop    FCBTest
 19173                                  FCBScanDone:
 19174                                  
 19175                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19176                                  
 19177 00002EFC 31DB                    	XOR     BX,BX
 19178                                  Scan:
 19179 00002EFE 53                      	push    bx
 19180 00002EFF E87A37                  	call	SFFromSFN
 19181 00002F02 5B                      	pop     bx
 19182                                  	;jnc	short Scan1
 19183                                  	;retn
 19184                                  	; 18/12/2022
 19185 00002F03 72B5                    	jc	short NO_Question ; retn
 19186                                  
 19187                                  ;M038
 19188                                  ; Do what the comment above says, check for busy state
 19189                                  
 19190                                  Scan1:
 19191                                  	;cmp	word [es:di],0
 19192                                  	;jz	short scan_next  ; MSDOS 3.3
 19193                                  	; MSDOS 6.0
 19194 00002F05 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19195                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19196                                  				; Is Sft busy? ;M038
 19197 00002F09 7519                    	jnz	short scan_next
 19198                                  ;
 19199                                  ; we have a SFT that is busy. See if it is for the current process
 19200                                  ;
 19201 00002F0B 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19202                                  	;cmp	[es:di+31h],ax
 19203 00002F0F 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19204 00002F13 750F                    	jnz	short scan_next
 19205 00002F15 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19206                                  	;cmp	[es:di+2Fh],ax
 19207 00002F19 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19208 00002F1D 7505                    	jnz	short scan_next
 19209                                  
 19210                                  ; This SFT is labelled as ours.
 19211                                  
 19212 00002F1F 26C7050000              	mov	word [es:di],0
 19213                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19214                                  scan_next:
 19215 00002F24 43                      	inc     bx
 19216 00002F25 EBD7                    	jmp     short Scan
 19217                                  
 19218                                  ;============================================================================
 19219                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19220                                  ;============================================================================
 19221                                  ; 23/07/2018 - Retro DOS v3.0
 19222                                  ; 18/05/2019 - Retro DOS v4.0
 19223                                  
 19224                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19225                                  ;
 19226                                  ;	DOS_CLOSE
 19227                                  ;	DOS_COMMIT
 19228                                  ;	FREE_SFT
 19229                                  ;	SetSFTTimes
 19230                                  ;
 19231                                  ;	Revision history:
 19232                                  ;
 19233                                  ;	   AN000  version 4.00	Jan. 1988
 19234                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19235                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19236                                  
 19237                                  ;Installed = TRUE
 19238                                  
 19239                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19240                                  ;---------------------------------------------------------------------------
 19241                                  ;
 19242                                  ; Procedure Name : DOS_CLOSE
 19243                                  ;
 19244                                  ; Inputs:
 19245                                  ;	[THISSFT] set to the SFT for the file being used
 19246                                  ; Function:
 19247                                  ;	Close the indicated file via the SFT
 19248                                  ; Returns:
 19249                                  ;	sf_ref_count decremented otherwise
 19250                                  ;	ES:DI point to SFT
 19251                                  ;	Carry set if error
 19252                                  ;	    AX has error code
 19253                                  ; DS preserved, others destroyed
 19254                                  ;---------------------------------------------------------------------------
 19255                                  
 19256                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 19257                                  
 19258                                  ; 18/05/2019 - Retro DOS v4.0
 19259                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19260                                  
 19261                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19262                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19263                                  
 19264                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19265                                  
 19266                                  DOS_CLOSE:
 19267 00002F27 C43E[9E05]              	LES	DI,[THISSFT]
 19268                                  	;mov	bx,[ES:DI+5]
 19269 00002F2B 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19270                                  
 19271                                  ; Network closes are handled entirely by the net code.
 19272                                  
 19273                                  	;;test	bx,8000h
 19274                                  	;TEST	BX,sf_isnet
 19275                                  	; 17/12/2022
 19276                                  	;test	bh,80h
 19277 00002F2F F6C780                  	test	bh,(sf_isnet>>8)
 19278 00002F32 7406                    	JZ	short LocalClose
 19279                                  
 19280                                  	;CallInstall Net_Close,MultNET,6
 19281 00002F34 B80611                  	mov     ax,1106h
 19282 00002F37 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19283                                  			; ES:DI -> SFT
 19284                                  			; SFT DPB field -> DPB of drive containing file
 19285                                  			; Return: CF set on error, AX = DOS error code
 19286                                  			; CF clear if successful
 19287 00002F39 C3                      	retn
 19288                                  
 19289                                  ; All closes release the sharing information.
 19290                                  ; No commit releases sharing information
 19291                                  ;
 19292                                  ; All closes decrement the ref count.
 19293                                  ; No commit decrements the ref count.
 19294                                  
 19295                                  LocalClose:
 19296 00002F3A E8D0E3                  	call	ECritDisk
 19297 00002F3D E86401                  	CALL	SetSFTTimes
 19298 00002F40 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19299                                  
 19300                                  ;hkn; SS is DOSDATA
 19301                                  	;Context DS
 19302 00002F43 16                      	push	ss
 19303 00002F44 1F                      	pop	ds
 19304                                  
 19305 00002F45 50                      	push	ax
 19306 00002F46 53                      	push	bx
 19307 00002F47 E81944                  	call	ShareEnd
 19308 00002F4A 5B                      	pop	bx
 19309 00002F4B 58                      	pop	ax
 19310                                  
 19311                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19312                                  
 19313                                  CloseEntry:
 19314 00002F4C 50                      	PUSH	AX
 19315                                  
 19316                                  ; File clean or device does not get stamped nor disk looked at.
 19317                                  
 19318                                  	;test	bx,0C0h
 19319                                  	; 17/12/2022
 19320 00002F4D F6C3C0                  	test	bl,devid_file_clean+devid_device
 19321                                  	;TEST	BX,devid_file_clean+devid_device
 19322 00002F50 7403                    	JZ	short rdir
 19323                                  	; 14/11/2022
 19324 00002F52 E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 19325                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19326                                  
 19327                                  ; Retrieve the directory entry for the file
 19328                                  
 19329                                  rdir:
 19330 00002F55 E8DA00                  	CALL	DirFromSFT
 19331                                  	;mov	al,5
 19332 00002F58 B005                    	MOV	AL,error_access_denied
 19333 00002F5A 7303                    	JNC	short clook
 19334                                  	; 14/11/2022
 19335 00002F5C E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19336                                  	;jc	short CloseFinish ; 24/07/2019
 19337                                  clook:
 19338                                  
 19339                                  ; ES:DI points to entry
 19340                                  ; DS:SI points to SFT
 19341                                  ; ES:BX points to buffer header
 19342                                  
 19343 00002F5F 57                      	push	di
 19344 00002F60 56                      	push	si
 19345                                  	;lea	si,[si+20h]
 19346 00002F61 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19347                                  
 19348                                  ; ES:DI point to directory entry
 19349                                  ; DS:SI point to unpacked name
 19350                                  
 19351 00002F64 E898E2                  	call	XCHGP
 19352                                  
 19353                                  ; ES:DI point to unpacked name
 19354                                  ; DS:SI point to directory entry
 19355                                  
 19356 00002F67 E8B60E                  	call	MetaCompare
 19357 00002F6A E892E2                  	call	XCHGP
 19358 00002F6D 5E                      	pop	si
 19359 00002F6E 5F                      	pop	di
 19360 00002F6F 740C                    	JZ	short CLOSE_GO		; Name OK
 19361                                  Bye:	
 19362 00002F71 89F7                    	MOV	DI,SI
 19363 00002F73 1E                      	PUSH	DS
 19364 00002F74 07                      	POP	ES			; ES:DI points to SFT
 19365 00002F75 16                      	PUSH	SS
 19366 00002F76 1F                      	POP	DS
 19367 00002F77 F9                      	STC
 19368                                  	;mov	al,2
 19369 00002F78 B002                    	MOV	AL,error_file_not_found
 19370 00002F7A E99600                  	JMP	CloseFinish ; 24/07/2019
 19371                                  
 19372                                  	; 18/05/2019 - Retro DOS v4.0
 19373                                  CLOSE_GO:
 19374                                  	; MSDOS 6.0
 19375                                  	;test	word [si+2],8000h
 19376                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19377                                  	; 17/12/2022
 19378                                  	;test	byte [si+3],80h
 19379 00002F7D F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19380 00002F81 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19381                                  	; MSDOS 3.3 & MSDOS 6.0
 19382                                  	;mov	ch,[es:di+0Bh]
 19383 00002F83 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19384                                  	;mov	al,[si+4]
 19385 00002F87 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19386                                  
 19387                                  ;hkn; SS override
 19388 00002F8A 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19389                                  	; MSDOS 3.3
 19390                                  	;;call	MatchAttributes
 19391                                  	;;JNZ	short Bye		; attributes do not match
 19392                                  	; 18/05/2019
 19393 00002F8E EB07                    	JMP	SHORT setattr		;FT.
 19394                                  nofcb:
 19395                                  	; MSDOS 6.0
 19396                                  	;mov	al,[si+4]
 19397 00002F90 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19398 00002F93 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19399                                  setattr:
 19400                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19401                                  	;or	byte [es:di+0Bh],20h
 19402 00002F97 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19403                                  	; MSDOS 6.0
 19404                                  	;mov	ax,[es:di+1Ah]
 19405 00002F9C 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19406                                  					;F.O. save old first cluster
 19407                                  ;hkn; SS override
 19408 00002FA0 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19409                                  
 19410                                  	;mov	ax,[si+0Bh]
 19411 00002FA4 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19412                                  	;mov	[es:di+1Ah],ax
 19413 00002FA7 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19414                                  	;mov	ax,[si+11h]
 19415 00002FAB 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19416                                  	;mov	[es:di+1Ch],ax
 19417 00002FAE 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19418                                  	;mov	ax,[si+13h]
 19419 00002FB2 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19420                                  	;mov	[es:di+1Eh],ax
 19421 00002FB5 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19422                                  	;mov	ax,[si+0Fh]
 19423 00002FB9 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19424                                  	;mov	[es:di+18h],ax
 19425 00002FBC 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19426                                  	;mov	ax,[si+0Dh]
 19427 00002FC0 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19428                                  	;mov	[es:di+16h],ax
 19429 00002FC3 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19430                                  
 19431                                  	; MSDOS 6.0
 19432                                  ;; File Tagging
 19433 00002FC7 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19434                                  				  ;LB. if already dirty		    ;AN000;
 19435 00002FCC 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19436                                  	; 02/06/2019
 19437 00002FCE E8742B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19438                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19439                                  	;or	byte [es:bx+5],40h
 19440 00002FD1 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19441                                  yesdirty4:
 19442 00002FD6 1E                      	push	ds
 19443 00002FD7 56                      	push	si
 19444                                  	; MSDOS 6.0
 19445                                  	;mov	cx,[si+0Bh]
 19446                                  	; 07/12/2022
 19447 00002FD8 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19448                                  ;hkn; SS override
 19449 00002FDB 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19450                                  	; MSDOS 3.3 
 19451                                  	;push	ss
 19452                                  	;pop	ds
 19453                                  	;MOV	AL,[THISDRV]
 19454                                  ;;; 10/1/86  update fastopen cache
 19455                                  	; MSDOS 3.3 & MSDOS 6.0
 19456 00002FDF 52                      	PUSH	DX
 19457 00002FE0 B400                    	MOV	AH,0			; dir entry update
 19458 00002FE2 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19459                                  	; MSDOS 6.0
 19460 00002FE4 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19461 00002FE6 750D                    	JNZ	short do_update2	;AN005; no, do update
 19462 00002FE8 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19463                                  	;mov	di,[si+1Bh]
 19464 00002FEA 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19465                                  	;mov	cx,[si+1Dh]
 19466 00002FED 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19467                                  	;mov	dh,[si+1Fh]
 19468 00002FF0 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19469 00002FF3 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19470                                  do_update2:				;AN011;F.O.
 19471                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19472                                  	; 
 19473 00002FF5 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19474 00002FFA 7407                    	JZ	short do_update		;AN011;F.O. yes
 19475 00002FFC B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19476 00002FFE 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19477                                  do_update:				;AN005;
 19478                                  ;hkn; SS is DOSDATA
 19479                                  	;Context DS
 19480 00003003 16                      	push	ss
 19481 00003004 1F                      	pop	ds	
 19482                                  	; MSDOS 3.3 & MSDOS 6.0
 19483 00003005 E8E5F6                  	call	FastOpen_Update 	; invoke fastopen
 19484 00003008 5A                      	POP	DX
 19485                                  
 19486                                  ;;; 10/1/86  update fastopen cache
 19487 00003009 E8342A                  	call	FLUSHBUF		; flush all relevant buffers
 19488 0000300C 5F                      	pop	di
 19489 0000300D 07                      	pop	es
 19490                                  	;mov	al,5
 19491 0000300E B005                    	MOV	AL,error_access_denied
 19492 00003010 7201                    	JC	short CloseFinish
 19493                                  FREE_SFT_OK:
 19494 00003012 F8                      	CLC				; signal no error.
 19495                                  CloseFinish:
 19496                                  
 19497                                  ; Indicate to the device that the SFT is being closed.
 19498                                  
 19499                                  ;;;; 7/21/86
 19500 00003013 9C                      	PUSHF				; save flag from DirFromSFT
 19501 00003014 E8D115                  	call	DEV_CLOSE_SFT
 19502 00003017 9D                      	POPF
 19503                                  ;;;; 7/21/86
 19504                                  ;
 19505                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19506                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19507                                  ; going to be moving from busy to free.
 19508                                  ;
 19509 00003018 59                      	POP	CX			; get old ref count
 19510 00003019 9C                      	PUSHF
 19511 0000301A 49                      	DEC	CX			; if cx != 1
 19512 0000301B 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19513 0000301D 26890D                  	mov	[es:di],cx
 19514                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19515                                  NoFree:
 19516 00003020 E805E3                  	call	LCritDisk
 19517 00003023 9D                      	POPF
 19518 00003024 C3                      	retn
 19519                                  
 19520                                  ;---------------------------------------------------------------------------
 19521                                  ;
 19522                                  ; Procedure Name : FREE_SFT
 19523                                  ;
 19524                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19525                                  ; Flags preserved. Return old ref count in AX
 19526                                  ;
 19527                                  ; Note that busy is indicated by the SFT ref count being -1.
 19528                                  ;
 19529                                  ;---------------------------------------------------------------------------
 19530                                  
 19531                                  FREE_SFT:
 19532 00003025 9C                      	PUSHF		; Save carry state
 19533 00003026 268B05                  	mov	ax,[es:di]
 19534                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19535 00003029 48                      	DEC	AX
 19536 0000302A 7501                    	JNZ	short SetCount
 19537 0000302C 48                      	DEC	AX
 19538                                  SetCount:
 19539 0000302D 268705                  	xchg	ax,[es:di]
 19540                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19541 00003030 9D                      	POPF
 19542 00003031 C3                      	retn
 19543                                  
 19544                                  	; 18/05/2019 - Retro DOS v4.0
 19545                                  
 19546                                  ;----------------------------------------------------------------------------
 19547                                  ;
 19548                                  ; Procedure Name : DirFromSFT
 19549                                  ;
 19550                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19551                                  ;
 19552                                  ;   Inputs:	ES:DI point to SFT
 19553                                  ;		DS = DOSDATA
 19554                                  ;   Outputs:
 19555                                  ;		EXTERR_LOCUS = errLOC_Disk
 19556                                  ;		CurBuf points to buffer
 19557                                  ;		Carry Clear -> operation OK
 19558                                  ;		    ES:DI point to entry
 19559                                  ;		    ES:BX point to buffer
 19560                                  ;		    DS:SI point to SFT
 19561                                  ;		Carry SET   -> operation failed
 19562                                  ;		    registers trashified
 19563                                  ;   Registers modified: ALL
 19564                                  ;----------------------------------------------------------------------------
 19565                                  
 19566                                  DirFromSFT:
 19567                                  	;mov	byte [EXTERR_LOCUS],2
 19568 00003032 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19569 00003037 06                      	push	es
 19570 00003038 57                      	push	di
 19571                                  	; MSDOS 3.3
 19572                                  	;;mov	dx,[es:di+1Dh]
 19573                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19574                                  	; MSDOS 6.0
 19575                                  	;mov	dx,[es:[di+1Dh]
 19576 00003039 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19577 0000303D 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19578                                  	;mov	dx,[es:di+1Bh]
 19579 00003041 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19580                                  	; 19/05/2019
 19581 00003045 FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19582                                  	; MSDOS 3.3 & MSDOS 6.0
 19583 00003049 52                      	PUSH	DX
 19584 0000304A E86A26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19585                                  					; [THISDPB] set
 19586 0000304D 5A                      	POP	DX
 19587 0000304E 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19588 00003052 721E                    	JC	short PopDone
 19589                                  	; 22/09/2023
 19590                                  	;XOR	AL,AL	; *		; Pre read
 19591                                  	;;mov	byte [ALLOWED],18h
 19592                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19593                                  	;call	GETBUFFR
 19594                                  	; 22/09/2023
 19595 00003054 E8E528                  	call	GETBUFFER ; * 		; Pre read
 19596 00003057 7219                    	JC	short PopDone
 19597 00003059 5E                      	pop	si
 19598 0000305A 1F                      	pop	ds			; Get back SFT pointer
 19599                                  
 19600                                  ;hkn; SS override
 19601 0000305B 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19602                                  	;or	byte [es:di+5],4
 19603 00003060 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19604 00003065 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19605                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19606                                  	;lea	di,[di+20] ; MSDOS 6.0
 19607 00003067 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19608                                  	;mov	al,32
 19609 0000306A B020                    	MOV	AL,dir_entry.size
 19610                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19611 0000306C F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19612 0000306F 01C7                    	ADD	DI,AX			; Point at the entry
 19613 00003071 C3                      	retn				; carry is clear
 19614                                  PopDone:
 19615 00003072 5F                      	pop	di
 19616 00003073 07                      	pop	es
 19617                                  PopDone_retn:
 19618 00003074 C3                      	retn
 19619                                  
 19620                                  ;----------------------------------------------------------------------------
 19621                                  ;
 19622                                  ;**	DOS_Commit - UPdate Directory Entries
 19623                                  ;
 19624                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19625                                  ;		(DS) = DOSGROUP
 19626                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19627                                  ;	USES	all but DS
 19628                                  ;
 19629                                  ;----------------------------------------------------------------------------
 19630                                  
 19631                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19632                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19633                                  
 19634                                  DOS_COMMIT:
 19635                                  	;hkn; called from srvcall. DS already set up.
 19636 00003075 C43E[9E05]              	LES	DI,[THISSFT]
 19637                                  	;mov	bx,[es:di+5]
 19638 00003079 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19639                                  	;test	bx,0C0h
 19640                                  	; 17/12/2022
 19641 0000307D F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19642                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19643 00003080 75F2                    	jnz	short PopDone_retn
 19644                                  	;test	bx,8000h
 19645                                  	; 17/12/2022
 19646                                  	;test	bh,80h
 19647 00003082 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19648                                  	;TEST	BX,sf_isnet ; 8000h
 19649 00003085 7406                    	JZ	short LOCAL_COMMIT
 19650                                  
 19651                                  ;IF NOT Installed
 19652                                  ;	transfer NET_COMMIT
 19653                                  ;ELSE
 19654                                  	;mov	ax,1107h
 19655 00003087 B80711                  	MOV	AX,(MultNET<<8)|7
 19656 0000308A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19657                                  			; ES:DI -> SFT
 19658                                  			; SFT DPB field -> DPB of drive containing file
 19659                                  			; Return: CF set on error, AX = DOS error code
 19660                                  			; CF clear if successful
 19661                                  localcommit_retn: ; 18/12/2022	
 19662 0000308C C3                      	retn
 19663                                  ;ENDIF
 19664                                  
 19665                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19666                                  ; There are three ways we can do this. One is to enter a critical section to
 19667                                  ; protect a potential free. The second is to increment the ref count to mask
 19668                                  ; the close decrementing.
 19669                                  ;
 19670                                  ; The proper way is to let the caller's of close decide if a decrement should
 19671                                  ; be done. We do this by providing another entry into close after the
 19672                                  ; decrement and after the share information release.
 19673                                  
 19674                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19675                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19676                                  
 19677                                  LOCAL_COMMIT:
 19678 0000308D E87DE2                  	call	ECritDisk
 19679                                  	; MSDOS 6.0
 19680 00003090 E87AE2                  	call	ECritDisk	;PTM.
 19681 00003093 E80E00                  	call	SetSFTTimes
 19682 00003096 B8FFFF                  	MOV	AX,-1
 19683 00003099 E8B0FE                  	call	CloseEntry
 19684                                  	; MSDOS 6.0
 19685 0000309C 9C                      	PUSHF			;PTM.				;AN000;
 19686 0000309D E84015                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19687 000030A0 9D                      	POPF			;PTM.				;AN000;
 19688                                  	;call	LCritDisk	;PTM.				;AN000;
 19689                                  	; 18/12/2022
 19690 000030A1 E984E2                  	jmp	LCritDisk
 19691                                  ;localcommit_retn:
 19692                                  ;	retn
 19693                                  
 19694                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19695                                  ;----------------------------------------------------------------------------
 19696                                  ;
 19697                                  ; Procedure Name : SetSFTTimes
 19698                                  ;
 19699                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19700                                  ;   Reflect these times in other SFT's for the same file.
 19701                                  ;
 19702                                  ;   Inputs:	ES:DI point to SFT
 19703                                  ;		BX = sf_flags set apprpriately
 19704                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19705                                  ;   Registers modified: All except ES:DI, BX, AX
 19706                                  ;
 19707                                  ;----------------------------------------------------------------------------
 19708                                  
 19709                                  SetSFTTimes:
 19710                                  ;	File clean or device does not get stamped nor disk looked at.
 19711                                  	
 19712                                  	;test	bx,0C0h
 19713                                  	; 17/12/2022
 19714 000030A4 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19715                                  	;TEST	BX,devid_file_clean+devid_device
 19716                                  	;retnz				; clean or device => no timestamp
 19717 000030A7 75E3                    	jnz	short localcommit_retn
 19718                                  
 19719                                  ;	file and dirty. See if date is good
 19720                                  
 19721                                  	;test	bx,4000h
 19722                                  	; 17/12/2022
 19723                                  	;test	bh,40h
 19724 000030A9 F6C740                  	test	bh,(sf_close_nodate>>8)
 19725                                  	;TEST	BX,sf_close_nodate
 19726                                  	;retnz				; nodate => no timestamp
 19727 000030AC 75DE                    	jnz	short localcommit_retn
 19728                                  
 19729 000030AE 50                      	push	ax
 19730 000030AF 53                      	push	bx
 19731 000030B0 E83DDA                  	call	DATE16			; Date/Time to AX/DX
 19732                                  	;mov	[es:di+0Fh],ax
 19733 000030B3 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19734                                  	;mov	[es:di+0Dh],dx
 19735 000030B7 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19736 000030BB 31C0                    	XOR	AX,AX
 19737                                  ;if installed
 19738                                  	;call	JShare + 14 * 4
 19739 000030BD FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19740                                  ;else
 19741                                  ;	call	ShSU
 19742                                  ;endif
 19743 000030C1 5B                      	pop	bx
 19744 000030C2 58                      	pop	ax
 19745 000030C3 C3                      	retn
 19746                                  
 19747                                  ;============================================================================
 19748                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19749                                  ;============================================================================
 19750                                  ; 23/07/2018 - Retro DOS v3.0
 19751                                  ; 18/05/2019 - Retro DOS v4.0
 19752                                  
 19753                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19754                                  
 19755                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19756                                  ;NAME  DIRCALL
 19757                                  
 19758                                  ;**	Low level directory manipulation routines for making removing and
 19759                                  ;	  verifying local or NET directories
 19760                                  ;
 19761                                  ;	DOS_MKDIR
 19762                                  ;	DOS_CHDIR
 19763                                  ;	DOS_RMDIR
 19764                                  ;
 19765                                  ;	Modification history:
 19766                                  ;
 19767                                  ;		Created: ARR 30 March 1983
 19768                                  
 19769                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19770                                  ;---------------------------------------------------------------------------
 19771                                  ;
 19772                                  ; Procedure Name : DOS_MkDir
 19773                                  ;
 19774                                  ; Inputs:
 19775                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19776                                  ;		terminated)
 19777                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19778                                  ;		( = -1 if current dir not involved, else
 19779                                  ;		 Points to first char after last "/" of current dir part)
 19780                                  ;	[THISCDS] Points to CDS being used
 19781                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19782                                  ; Function:
 19783                                  ;	Make a new directory
 19784                                  ; Returns:
 19785                                  ;	Carry Clear
 19786                                  ;		No error
 19787                                  ;	Carry Set
 19788                                  ;	    AX is error code
 19789                                  ;		error_path_not_found
 19790                                  ;			Bad path (not in curr dir part if present)
 19791                                  ;		error_bad_curr_dir
 19792                                  ;			Bad path in current directory part of path
 19793                                  ;		error_access_denied
 19794                                  ;			Already exists, device name
 19795                                  ; DS preserved, Others destroyed
 19796                                  ;---------------------------------------------------------------------------
 19797                                  
 19798                                  ;hkn; called from path.asm. DS already set up.
 19799                                  
 19800                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19801                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19802                                  
 19803                                  DOS_MKDIR:
 19804 000030C4 E884E1                  	call	TestNet
 19805 000030C7 7313                    	JNC	short LOCAL_MKDIR
 19806                                  
 19807                                  ;IF NOT Installed
 19808                                  ;	transfer NET_MKDIR
 19809                                  ;ELSE
 19810                                  	;mov	ax,1103h
 19811 000030C9 B80311                  	MOV	AX,(MultNET<<8)|3
 19812 000030CC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19813                                  			; SS = DOS CS
 19814                                  			; SDA first filename pointer -> fully-qualified directory name
 19815                                  			; SDA CDS pointer -> current directory
 19816                                  			; Return: CF set on error, AX = DOS error code
 19817                                  			; CF clear if successful
 19818 000030CE C3                      	retn
 19819                                  ;ENDIF
 19820                                  
 19821                                  NODEACCERRJ:
 19822                                  	;mov	ax,5
 19823 000030CF B80500                  	MOV	AX,error_access_denied
 19824                                  _BadRet:
 19825 000030D2 F9                      	STC
 19826                                  	;call	LCritDisk
 19827                                  	;retn
 19828                                  	; 18/12/2022
 19829 000030D3 E952E2                  	jmp	LCritDisk
 19830                                  
 19831                                  PATHNFJ:
 19832 000030D6 E84FE2                  	call	LCritDisk
 19833 000030D9 E9EFF9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19834                                  
 19835                                  LOCAL_MKDIR:
 19836 000030DC E82EE2                  	call	ECritDisk
 19837                                  
 19838                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19839                                  
 19840 000030DF 8C16[A005]              	MOV	[THISSFT+2],SS
 19841                                  
 19842                                  ;hkn; DOSDATA
 19843 000030E3 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19844                                  
 19845                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19846                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19847                                  
 19848                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19849 000030E9 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19850                                  				; make sure SHARER won't complain.
 19851                                  	;mov	al,10h
 19852 000030EF B010                    	MOV	AL,attr_directory
 19853 000030F1 E88B18                  	call	MakeNode
 19854 000030F4 72E0                    	JC	short PATHNFJ
 19855 000030F6 83F803                  	CMP	AX,3
 19856 000030F9 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19857 000030FB C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19858 000030FF C53E[E205]              	LDS	DI,[CURBUF]
 19859 00003103 29FE                    	SUB	SI,DI
 19860 00003105 56                      	PUSH	SI		; Pointer to dir_first
 19861                                  	; MSDOS 6.0
 19862                                  	;push	word [DI+8]
 19863 00003106 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19864                                  	; MSDOS 3.3 & MSDOS 6.0
 19865                                  	;push	word [di+6]
 19866 00003109 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19867 0000310C 16                      	push	ss
 19868 0000310D 1F                      	pop	ds
 19869 0000310E FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19870 00003112 31C0                    	XOR	AX,AX
 19871 00003114 A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19872 00003117 E8A117                  	call	NEWDIR
 19873 0000311A 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 19874 0000311C E8680D                  	call	GETENT		; First entry
 19875 0000311F 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19876 00003121 C43E[E205]              	LES	DI,[CURBUF]
 19877                                  
 19878                                  	; MSDOS 6.0
 19879 00003125 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19880                                  				 ;LB. if already dirty		    ;AN000;
 19881 0000312A 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19882 0000312C E8162A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19883                                  	
 19884                                  	; MSDOS 3.3 & MSDOS 6.0
 19885                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19886 0000312F 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19887                                  yesdirty5:
 19888                                  	;;add	di,16 ; MSDOS 3.3
 19889                                  	;add	di,20 ; MSDOS 6.0
 19890 00003134 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19891 00003137 B82E20                  	MOV	AX,202EH	; ". "
 19892 0000313A 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19893 0000313E E81A18                  	call	SETDOTENT
 19894 00003141 B82E2E                  	MOV	AX,2E2EH	; ".."
 19895 00003144 5A                      	POP	DX		; Parent
 19896 00003145 E81318                  	call	SETDOTENT
 19897 00003148 C42E[8A05]              	LES	BP,[THISDPB]
 19898                                  	; 22/09/2023
 19899                                  	;;mov	byte [ALLOWED],18h
 19900                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19901 0000314C 5A                      	POP	DX		; Entry sector
 19902                                  	; MSDOS 6.0
 19903 0000314D 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19904                                  
 19905                                  	;XOR	AL,AL ; *	; Pre read
 19906                                  	;call	GETBUFFR
 19907                                  	; 22/09/2023
 19908 00003151 E8E827                  	call	GETBUFFER ; *	; Pre read
 19909 00003154 725B                    	JC	short NODEEXISTSP
 19910 00003156 8B16[C205]              	MOV	DX,[DIRSTART]
 19911 0000315A C53E[E205]              	LDS	DI,[CURBUF]
 19912                                  	;or	byte [di+5],4
 19913 0000315E 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19914 00003162 5E                      	POP	SI		; dir_first pointer
 19915 00003163 01FE                    	ADD	SI,DI
 19916 00003165 8914                    	MOV	[SI],DX
 19917 00003167 31D2                    	XOR	DX,DX
 19918 00003169 895402                  	MOV	[SI+2],DX	; Zero size
 19919 0000316C 895404                  	MOV	[SI+4],DX
 19920                                  DIRUP:
 19921                                  	; MSDOS 6.0
 19922 0000316F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19923                                  	;			 ;LB. if already dirty 		   ;AN000;
 19924 00003173 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19925 00003175 E8CD29                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19926                                  	
 19927                                  	; MSDOS 3.3 & MSDOS 6.0
 19928                                  	;or	byte [di+5],40h
 19929 00003178 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19930                                  yesdirty6:
 19931 0000317C 16                      	push	ss
 19932 0000317D 1F                      	pop	ds
 19933 0000317E 268A4600                	mov	al,[es:bp]
 19934                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19935 00003182 E8BB28                  	call	FLUSHBUF
 19936                                  	;mov	ax,5
 19937 00003185 B80500                  	MOV	AX,error_access_denied
 19938                                  	;call	LCritDisk
 19939                                  	;retn
 19940                                  	; 18/12/2022
 19941 00003188 E99DE1                  	jmp	LCritDisk
 19942                                  
 19943                                  NODEEXISTSPOPDEL:
 19944 0000318B 5A                      	POP	DX		; Parent
 19945 0000318C 5A                      	POP	DX		; Entry sector
 19946                                  	; MSDOS 6.0 
 19947 0000318D 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19948 00003191 C42E[8A05]              	LES	BP,[THISDPB]
 19949                                  	; 22/09/2023
 19950                                  	;;mov	byte [ALLOWED],18h
 19951                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19952                                  	;XOR	AL,AL ; *	; Pre read
 19953                                  	;call	GETBUFFR
 19954                                  	; 22/09/2023
 19955 00003195 E8A427                  	call	GETBUFFER ; *	; Pre read
 19956 00003198 7217                    	JC	short NODEEXISTSP
 19957 0000319A C53E[E205]              	LDS	DI,[CURBUF]
 19958                                  	;or	byte [di+5],4
 19959 0000319E 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19960 000031A2 5E                      	POP	SI		; dir_first pointer
 19961 000031A3 01FE                    	ADD	SI,DI
 19962                                  	;sub	si,1Ah ; 26
 19963 000031A5 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19964 000031A8 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19965 000031AB E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19966                                  NODEEXISTS:
 19967 000031AE E91EFF                  	JMP	NODEACCERRJ ; 10/08/2018
 19968                                  
 19969                                  NODEEXISTSP:
 19970 000031B1 5E                      	POP	SI		; Clean stack
 19971 000031B2 EBFA                    	JMP	short NODEEXISTS
 19972                                  
 19973                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19974                                  
 19975                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19976                                  ;----------------------------------------------------------------------------
 19977                                  ;
 19978                                  ; Procedure Name : DOS_ChDir
 19979                                  ;
 19980                                  ; Inputs:
 19981                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19982                                  ;		terminated)
 19983                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19984                                  ;		( = -1 if current dir not involved, else
 19985                                  ;		 Points to first char after last "/" of current dir part)
 19986                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19987                                  ; Function:
 19988                                  ;	Validate the path for potential new current directory
 19989                                  ; Returns:
 19990                                  ;	NOTE:
 19991                                  ;	    [SATTRIB] is modified by this call
 19992                                  ;	Carry Clear
 19993                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19994                                  ;		Caller must NOT set ID fields on a NET CDS.
 19995                                  ;	Carry Set
 19996                                  ;	    AX is error code
 19997                                  ;		error_path_not_found
 19998                                  ;			Bad path
 19999                                  ;		error_access_denied
 20000                                  ;			device or file name
 20001                                  ; DS preserved, Others destroyed
 20002                                  ;----------------------------------------------------------------------------
 20003                                  
 20004                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20005                                  
 20006                                  ; 18/05/2019 - Retro DOS v4.0
 20007                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20008                                  
 20009                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20010                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20011                                  
 20012                                  DOS_CHDIR:
 20013 000031B4 E894E0                  	call	TestNet
 20014 000031B7 7306                    	JNC	short LOCAL_CHDIR
 20015                                  
 20016                                  ;IF NOT Installed
 20017                                  ;	transfer NET_CHDIR
 20018                                  ;ELSE
 20019                                  	;mov	ax,1105h
 20020 000031B9 B80511                  	MOV	AX,(MultNET<<8)|5
 20021 000031BC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20022                                  			; SS = DOS CS
 20023                                  			; SDA first filename pointer -> fully-qualified directory name
 20024                                  			; SDA CDS pointer -> current directory
 20025                                  			; Return: CF set on error, AX = DOS error code
 20026                                  			; CF clear if successful
 20027 000031BE C3                      	retn
 20028                                  ;ENDIF
 20029                                  
 20030                                  LOCAL_CHDIR:
 20031 000031BF E84BE1                  	call	ECritDisk
 20032                                  	; MSDOS 6.0
 20033                                  	;;test	word [es:di+43h],2000h
 20034                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20035                                  	; 17/12/2022
 20036                                  	;test	byte [es:di+44h],20h
 20037 000031C2 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20038 000031C7 7406                    	JZ	short nojoin		   ;PTM.
 20039                                  	;mov	word [es:di+49h], 0FFFFh
 20040 000031C9 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20041                                  nojoin:
 20042                                  	; MSDOS 3.3 & MSDOS 6.0
 20043 000031CF C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20044                                  	;mov	byte [SATTRIB],16h
 20045 000031D4 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20046                                  				; Dir calls can find these
 20047                                  ; DOS 3.3  6/24/86 FastOpen
 20048 000031D9 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20049 000031DE E8320D                  	call	GETPATH
 20050 000031E1 9C                      	PUSHF						;AN000;
 20051 000031E2 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20052 000031E7 9D                      	POPF						;AN000;
 20053                                  ; DOS 3.3  6/24/86 FastOpen
 20054                                  
 20055                                  	; MSDOS 3.3
 20056                                  	;mov	byte [FastOpenFlg],0
 20057                                  	
 20058                                  	;mov	ax,3
 20059 000031E8 B80300                  	MOV	AX,error_path_not_found
 20060 000031EB 7207                    	JC	short ChDirDone
 20061 000031ED 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20062 000031EF 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20063 000031F3 F8                      	CLC
 20064                                  ChDirDone:
 20065                                  	;call	LCritDisk
 20066                                  	;retn
 20067                                  	; 18/12/2022
 20068 000031F4 E931E1                  	jmp	LCritDisk
 20069                                  
 20070                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20071                                  ;----------------------------------------------------------------------------
 20072                                  ;
 20073                                  ; Procedure Name : DOS_RmDir
 20074                                  ;
 20075                                  ; Inputs:
 20076                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20077                                  ;		terminated)
 20078                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20079                                  ;		( = -1 if current dir not involved, else
 20080                                  ;		 Points to first char after last "/" of current dir part)
 20081                                  ;	[THISCDS] Points to CDS being used
 20082                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20083                                  ; Function:
 20084                                  ;	Remove a directory
 20085                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20086                                  ; Returns:
 20087                                  ;	NOTE:
 20088                                  ;	    [SATTRIB] is modified by this call
 20089                                  ;	Carry Clear
 20090                                  ;		No error
 20091                                  ;	Carry Set
 20092                                  ;	    AX is error code
 20093                                  ;		error_path_not_found
 20094                                  ;			Bad path (not in curr dir part if present)
 20095                                  ;		error_bad_curr_dir
 20096                                  ;			Bad path in current directory part of path
 20097                                  ;		error_access_denied
 20098                                  ;			device or file name, root directory
 20099                                  ;			Bad directory ('.' '..' messed up)
 20100                                  ; DS preserved, Others destroyed
 20101                                  ;----------------------------------------------------------------------------
 20102                                  
 20103                                  ;hkn; called from path.asm. DS already set up.
 20104                                  
 20105                                  ; 18/05/2019 - Retro DOS v4.0
 20106                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20107                                  
 20108                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20109                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20110                                  
 20111                                  DOS_RMDIR:
 20112 000031F7 E851E0                  	call	TestNet
 20113 000031FA 7306                    	JNC	short LOCAL_RMDIR
 20114                                  
 20115                                  ;IF NOT Installed
 20116                                  ;	transfer NET_RMDIR
 20117                                  ;ELSE
 20118                                  	;mov	ax,1101h
 20119 000031FC B80111                  	MOV	AX,(MultNET<<8)|1
 20120 000031FF CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20121                                  			; SS = DOS CS
 20122                                  			; SDA first filename pointer -> fully-qualified directory name
 20123                                  			; SDA CDS pointer -> current directory
 20124                                  			; Return: CF set on error, AX = DOS error code
 20125                                  			; CF clear if successful
 20126 00003201 C3                      	retn
 20127                                  ;ENDIF
 20128                                  
 20129                                  LOCAL_RMDIR:
 20130 00003202 E808E1                  	call	ECritDisk
 20131 00003205 C606[4C03]00            	MOV	byte [NoSetDir],0
 20132                                  	;mov	byte [SATTRIB],16h
 20133 0000320A C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20134                                  					; Dir calls can find these
 20135 0000320F E8010D                  	call	GETPATH
 20136 00003212 720C                    	JC	short NOPATH		; Path not found
 20137 00003214 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20138 00003216 8B3E[C205]              	MOV	DI,[DIRSTART]
 20139 0000321A 09FF                    	OR	DI,DI			; Root ?
 20140 0000321C 750E                    	JNZ	short rmdir_get_buf	; No
 20141 0000321E EB09                    	JMP	SHORT NOTDIRPATH
 20142                                  
 20143                                  NOPATH:
 20144                                  	;mov	ax,3
 20145 00003220 B80300                  	MOV	AX,error_path_not_found
 20146 00003223 E9ACFE                  	JMP	_BadRet
 20147                                  
 20148                                  NOTDIRPATHPOP:
 20149 00003226 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20150 00003227 58                      	POP	AX
 20151                                  NOTDIRPATHPOP2:
 20152 00003228 58                      	POP	AX
 20153                                  NOTDIRPATH:
 20154 00003229 E9A3FE                  	JMP	NODEACCERRJ
 20155                                  
 20156                                  rmdir_get_buf:
 20157 0000322C C53E[E205]              	LDS	DI,[CURBUF]
 20158 00003230 29FB                    	SUB	BX,DI		; Compute true offset
 20159 00003232 53                      	PUSH	BX		; Save entry pointer
 20160                                  	
 20161                                  	; MSDOS 6.0
 20162                                  	;push	word [di+8]
 20163 00003233 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20164                                  	
 20165                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20166                                  	;push	word [di+6]
 20167 00003236 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20168                                  
 20169                                  ;hkn; SS is DOSDATA
 20170                                  	;context DS
 20171 00003239 16                      	push	ss
 20172 0000323A 1F                      	pop	ds
 20173                                  	;context ES
 20174 0000323B 16                      	push	ss
 20175 0000323C 07                      	pop	es
 20176                                  
 20177                                  ;hkn; NAME1 is in DOSDATA
 20178 0000323D BF[4B05]                	MOV	DI,NAME1
 20179 00003240 B03F                    	MOV	AL,'?'
 20180 00003242 B90B00                  	MOV	CX,11
 20181 00003245 F3AA                    	REP	STOSB
 20182 00003247 30C0                    	XOR	AL,AL
 20183 00003249 AA                      	STOSB				; Nul terminate it
 20184 0000324A E8590F                  	call	STARTSRCH		; Set search
 20185 0000324D E8340C                  	call	GETENTRY		; Get start of directory
 20186 00003250 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20187 00003252 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20188 00003256 89DE                    	MOV	SI,BX
 20189 00003258 AD                      	LODSW
 20190                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20191 00003259 3D2E20                  	cmp	ax,202Eh ; ". "
 20192 0000325C 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20193                                  	;add	si,30
 20194 0000325E 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20195 00003261 AD                      	LODSW
 20196                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20197                                  	;cmp	ax, '..'
 20198 00003262 3D2E2E                  	cmp	ax,2E2Eh
 20199 00003265 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20200                                  
 20201                                  ;hkn; SS is DOSDATA
 20202                                  	;context DS
 20203 00003267 16                      	push	ss
 20204 00003268 1F                      	pop	ds
 20205 00003269 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20206 0000326F E8120C                  	call	GETENTRY		; Get next entry
 20207 00003272 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20208                                  	;mov	byte [ATTRIB],16h
 20209 00003274 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20210 00003279 E8100B                  	call	SRCH			; Do a search
 20211 0000327C 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20212 0000327E 803E[4A03]00            	CMP	byte [FAILERR],0
 20213 00003283 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20214 00003285 C42E[8A05]              	LES	BP,[THISDPB]
 20215 00003289 8B1E[C205]              	MOV	BX,[DIRSTART]
 20216 0000328D E8231C                  	call	RELEASE 		; Release data in sub dir
 20217 00003290 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20218 00003292 5A                      	POP	DX			; Sector # of entry
 20219 00003293 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20220                                  	; 22/09/2023
 20221                                  	;;mov	byte [ALLOWED],18h
 20222                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20223                                  	;XOR	AL,AL ; *		; Pre read
 20224                                  	;call	GETBUFFR		; Get sector back
 20225 00003297 E8A226                  	call	GETBUFFER ; *		; Pre Read
 20226 0000329A 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20227 0000329C C53E[E205]              	LDS	DI,[CURBUF]
 20228                                  	;or	byte [di+5],4
 20229 000032A0 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20230 000032A4 5B                      	POP	BX			; Pointer to start of entry
 20231 000032A5 01FB                    	ADD	BX,DI			; Corrected
 20232 000032A7 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20233                                  
 20234                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20235 000032AA 1E                      	PUSH	DS
 20236                                  
 20237                                  ;hkn; SS is DOSDATA
 20238                                  	;context DS
 20239 000032AB 16                      	push	ss
 20240 000032AC 1F                      	pop	ds
 20241                                  
 20242                                  	; MSDOS 6.0
 20243 000032AD E80EF4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20244                                  
 20245                                  ;	; MSDOS 3.3
 20246                                  ;_FastOpen_Delete:
 20247                                  ;	push	ax
 20248                                  ;	mov	si,[WFP_START]
 20249                                  ;	mov	bx,FastTable
 20250                                  ;	;mov	al,3  ; FONC_delete
 20251                                  ;	mov	al,FONC_delete
 20252                                  ;	call	far [BX+2]  ; FastTable+2
 20253                                  ;	pop	ax
 20254                                  
 20255 000032B0 1F                      	POP	DS
 20256                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20257                                  
 20258 000032B1 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20259                                  
 20260                                  ;============================================================================
 20261                                  ; DISK.ASM, MSDOS 6.0, 1991
 20262                                  ;============================================================================
 20263                                  ; 23/07/2018 - Retro DOS v3.0 
 20264                                  ; 04/05/2019 - Retro DOS v4.0
 20265                                  
 20266                                  ;	TITLE	DISK - Disk utility routines
 20267                                  ;	NAME	Disk
 20268                                  
 20269                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20270                                  ;
 20271                                  ;	SWAPCON
 20272                                  ;	SWAPBACK
 20273                                  ;	DOS_READ
 20274                                  ;	DOS_WRITE
 20275                                  ;	get_io_sft
 20276                                  ;	DirRead
 20277                                  ;	FIRSTCLUSTER
 20278                                  ;	SET_BUF_AS_DIR
 20279                                  ;	FATSecRd
 20280                                  ;	DREAD
 20281                                  ;	CHECK_WRITE_LOCK
 20282                                  ;	CHECK_READ_LOCK
 20283                                  ;
 20284                                  ;	Revision history:
 20285                                  ;
 20286                                  ;		A000   version 4.00  Jan. 1988
 20287                                  ;
 20288                                  ;----------------------------------------------------------------------------
 20289                                  ;
 20290                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20291                                  ;		error happens, DOS retries the entire block assuming that
 20292                                  ;		zero characters were transferred. Modified the code to take
 20293                                  ;		into account the number of characters transfered before
 20294                                  ;		retrying the operation.
 20295                                  ;
 20296                                  ;----------------------------------------------------------------------------
 20297                                  ;
 20298                                  
 20299                                  ;Installed = TRUE
 20300                                  
 20301                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20302                                  
 20303                                  ; **** Drivers for file input from devices ****
 20304                                  ;----------------------------------------------------------------------------
 20305                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20306                                  ;   of handles 0 and 1
 20307                                  ;
 20308                                  ;   Inputs:	DS is DOSDATA
 20309                                  ;   Outputs:	CONSWAP is set to false.
 20310                                  ;   Registers modified: none
 20311                                  ;----------------------------------------------------------------------------
 20312                                  
 20313                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20314                                  
 20315                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20316                                  ; 04/05/2019 - Retro DOS v4.0
 20317                                  
 20318                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20319                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20320                                  
 20321                                  SWAPBACK:
 20322 000032B4 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20323 000032B9 C3                      	retn
 20324                                  
 20325                                  ;----------------------------------------------------------------------------
 20326                                  ;
 20327                                  ; Procedure Name : SWAPCON
 20328                                  ;
 20329                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20330                                  ;
 20331                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20332                                  ;		DS is DOSDATA
 20333                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20334                                  ;   Registers modified: none
 20335                                  ;--------------------------------------------------------------------------
 20336                                  
 20337                                  SWAPCON:
 20338                                  	; MSDOS 3.3
 20339                                  	;push	es
 20340                                  	;push	di
 20341                                  	;mov	byte [CONSWAP],1
 20342                                  	;les	di,[THISSFT]
 20343                                  	;mov	word [CONSFT],di
 20344                                  	;mov	word [CONSFT+2],es
 20345                                  	;pop	di
 20346                                  	;pop	es
 20347                                  	;retn
 20348                                  
 20349                                  	; MSDOS 6.0
 20350 000032BA C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20351 000032BF 50                      	push	ax
 20352 000032C0 A1[9E05]                	mov	ax,[THISSFT]
 20353 000032C3 A3[E605]                	mov	[CONSFT],ax
 20354 000032C6 A1[A005]                	mov	ax,[THISSFT+2]
 20355 000032C9 A3[E805]                	mov	[CONSFT+2],ax
 20356 000032CC 58                      	pop	ax
 20357 000032CD C3                      	retn
 20358                                  
 20359                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20360                                  ; 04/05/2019 - Retro DOS v4.0
 20361                                  
 20362                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20363                                  ;-----------------------------------------------------------------------------
 20364                                  ;
 20365                                  ; Inputs:
 20366                                  ;	ThisSFT set to the SFT for the file being used
 20367                                  ;	[DMAADD] contains transfer address
 20368                                  ;	CX = No. of bytes to read
 20369                                  ;	DS = DOSDATA
 20370                                  ; Function:
 20371                                  ;	Perform read operation
 20372                                  ; Outputs:
 20373                                  ;    Carry clear
 20374                                  ;	SFT Position and cluster pointers updated
 20375                                  ;	CX = No. of bytes read
 20376                                  ;	ES:DI point to SFT
 20377                                  ;    Carry set
 20378                                  ;	AX is error code
 20379                                  ;	CX = 0
 20380                                  ;	ES:DI point to SFT
 20381                                  ; DS preserved, all other registers destroyed
 20382                                  ;
 20383                                  ;-----------------------------------------------------------------------------
 20384                                  
 20385                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20386                                  
 20387                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20388                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20389                                  
 20390                                  DOS_READ:
 20391 000032CE C43E[9E05]              	LES	DI,[THISSFT]
 20392                                  
 20393                                  ; Verify that the sft has been opened in a mode that allows reading.
 20394                                  
 20395                                  	;mov	al,[es:di+2]
 20396 000032D2 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20397                                  	;and	al,0Fh
 20398 000032D6 240F                    	AND	AL,access_mask
 20399                                  	;cmp	al,1
 20400 000032D8 3C01                    	CMP	AL,open_for_write
 20401 000032DA 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20402 000032DC E90306                  	jmp	SET_ACC_ERR
 20403                                  
 20404                                  READ_NO_MODE:
 20405 000032DF E8E104                  	call	SETUP
 20406 000032E2 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20407 000032E4 E87DDF                  	call	IsSFTNet
 20408 000032E7 7408                    	JZ	short LOCAL_READ
 20409                                  
 20410                                  ;IF NOT Installed
 20411                                  ;	transfer NET_READ
 20412                                  ;ELSE
 20413                                  	;mov	ax,1108h
 20414 000032E9 B80811                  	MOV	AX,(MultNET<<8)|8
 20415 000032EC CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20416                                  			; ES:DI -> SFT
 20417                                  			; SFT DPB field -> DPB of drive containing file
 20418                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20419                                  			; Return: CF set on error, CX = bytes read
 20420 000032EE C3                      	retn
 20421                                  ;ENDIF
 20422                                  
 20423                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20424                                  ; except return immediately.
 20425                                  
 20426                                  NoIORet:
 20427 000032EF F8                      	CLC
 20428 000032F0 C3                      	retn
 20429                                  
 20430                                  LOCAL_READ:
 20431                                  	;test	word [es:di+5],80h
 20432                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20433 000032F1 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20434 000032F6 750E                    	JNZ	short READDEV
 20435                                  
 20436                                  	;mov	byte [EXTERR_LOCUS],2
 20437 000032F8 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20438 000032FD E80DE0                  	call	ECritDisk
 20439 00003300 E89B05                  	call	DISKREAD
 20440                                  
 20441                                  critexit:
 20442                                  	;call	LCritDisk
 20443                                  	;retn
 20444                                  	; 16/12/2022
 20445 00003303 E922E0                  	jmp	LCritDisk
 20446                                  
 20447                                  ; We are reading from a device. Examine the status of the device to see if we
 20448                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20449                                  ; null device, we can safely indicate no transfer.
 20450                                  
 20451                                  READDEV:
 20452                                  	;mov	byte [EXTERR_LOCUS],4
 20453 00003306 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20454                                  	;mov	bl,[es:di+5]
 20455 0000330B 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20456 0000330F C43E[2C03]              	LES	DI,[DMAADD]
 20457                                  	;test	bl,40h
 20458 00003313 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20459 00003316 7407                    	JZ	short ENDRDDEVJ3
 20460                                  	;test	bl,4
 20461 00003318 F6C304                  	test	BL,devid_device_null	; NUL device?
 20462 0000331B 7405                    	JZ	short TESTRAW 		; NO
 20463 0000331D 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20464                                  ENDRDDEVJ3:
 20465                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20466                                  	;JMP	short ENDRDDEVJ2
 20467                                  	; 16/12/2022
 20468 0000331F E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20469                                  
 20470                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20471                                  ; bizarre std_con_string_input.
 20472                                  
 20473                                  TESTRAW:
 20474                                  	;test	bl,20h
 20475 00003322 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20476 00003325 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20477                                  	;test	bl,1
 20478 00003327 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20479 0000332A 7461                    	JZ	short NOTRDCON
 20480 0000332C E98F01                  	JMP	READCON
 20481                                  
 20482                                  DVRDRAW:
 20483 0000332F 06                      	PUSH	ES
 20484 00003330 1F                      	POP	DS			; Xaddr to DS:DI
 20485                                  
 20486                                  	; 04/05/2019 - Retro DOS v4.0
 20487                                  
 20488                                  	; MSDOS 6.0
 20489                                  ;SR;
 20490                                  ;Check for win386 presence -- if present, do polled read of characters
 20491                                  
 20492 00003331 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20493 00003337 7408                    	jz	short ReadRawRetry	;not present
 20494 00003339 F6C301                  	test	bl,devid_device_con_in	;is it console device
 20495 0000333C 7403                    	jz	short ReadRawRetry	;no, do normal read
 20496 0000333E E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20497                                  
 20498                                  ReadRawRetry:
 20499 00003341 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20500 00003343 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20501 00003345 89C2                    	MOV	DX,AX			; Start at 0
 20502 00003347 E89013                  	call	SETREAD
 20503 0000334A 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20504                                  
 20505                                  ;hkn; SS override
 20506 0000334B 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20507 00003350 E80E13                  	call	DEVIOCALL
 20508 00003353 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20509 00003355 B486                    	MOV	AH,86H			; Read error
 20510                                  
 20511                                  ;hkn; SS override
 20512 00003357 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20513                                  	; MSDOS 3.3
 20514                                  	;test	di,8000h
 20515                                  	;jz	short CRDROK
 20516                                  	; MSDOS 6.0
 20517 0000335C 09FF                    	or	di,di
 20518 0000335E 7923                    	jns	short CRDROK		; no errors
 20519                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20520 00003360 E8631F                  	call	CHARHARD
 20521 00003363 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20522                                  
 20523                                  	; 04/05/2019
 20524                                  
 20525                                  	; MSDOS 6.0
 20526 00003365 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20527 0000336A 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20528                                  
 20529                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20530 0000336F 08C0                    	OR	AL,AL
 20531 00003371 7410                    	JZ	short CRDROK		; Ignore
 20532 00003373 3C03                    	CMP	AL,3
 20533 00003375 7403                    	JZ	short CRDFERR 		; fail.
 20534 00003377 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20535 00003378 EBC7                    	JMP	short ReadRawRetry	; Retry
 20536                                  
 20537                                  ; We have encountered a device-driver error. We have informed the user of it
 20538                                  ; and he has said for us to fail the system call.
 20539                                  
 20540                                  CRDFERR:
 20541 0000337A 5F                      	POP	DI			; Clean stack
 20542                                  DEVIOFERR:
 20543                                  
 20544                                  ;hkn; SS override
 20545 0000337B 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20546 00003380 E95D05                  	jmp	SET_ACC_ERR_DS
 20547                                  
 20548                                  CRDROK:
 20549 00003383 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20550 00003384 89D7                    	MOV	DI,DX
 20551                                  
 20552                                  ;hkn; SS override
 20553 00003386 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20554                                  	;JMP	SHORT ENDRDDEVJ3
 20555                                  	; 16/12/2022
 20556 0000338B EB6B                    	jmp	short ENDRDDEVJ2
 20557                                  
 20558                                  ; We are going to do a cooked read on some character device. There is a
 20559                                  ; problem here, what does the data look like? Is it a terminal device, line
 20560                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20561                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20562                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20563                                  ; included in data). this "simulates" the way con works in cooked mode
 20564                                  ; reading one line at a time. With file data, however, the lines will look
 20565                                  ; like, LF line CR. This is a little weird.
 20566                                  
 20567                                  NOTRDCON:
 20568 0000338D 8CC0                    	MOV	AX,ES
 20569 0000338F 8ED8                    	MOV	DS,AX
 20570 00003391 89FB                    	MOV	BX,DI
 20571 00003393 31D2                    	XOR	DX,DX
 20572 00003395 89D0                    	MOV	AX,DX
 20573 00003397 51                      	PUSH	CX
 20574 00003398 B90100                  	MOV	CX,1
 20575 0000339B E83C13                  	call	SETREAD
 20576 0000339E 59                      	POP	CX
 20577                                  
 20578                                  ;hkn; SS override
 20579 0000339F 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20580                                  	;lds	si,[si+7]
 20581 000033A4 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20582                                  DVRDLP:
 20583 000033A7 E8FD1C                  	call	DSKSTATCHK
 20584 000033AA E8B712                  	call	DEVIOCALL2
 20585 000033AD 57                      	PUSH	DI		; Save "count" done
 20586 000033AE B486                    	MOV	AH,86H
 20587                                  
 20588                                  ;hkn; SS override
 20589 000033B0 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20590                                  	
 20591                                  	; MSDOS 3.3
 20592                                  	;test	di,8000h
 20593                                  	;jz	short CRDOK
 20594                                  	; MSDOS 6.0
 20595 000033B5 09FF                    	or	di,di
 20596 000033B7 7917                    	jns	short CRDOK
 20597                                  	
 20598 000033B9 E80A1F                  	call	CHARHARD
 20599 000033BC 5F                      	POP	DI
 20600                                  
 20601                                  ;hkn; SS override
 20602 000033BD 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20603 000033C4 3C01                    	CMP	AL,1
 20604 000033C6 74DF                    	JZ	short DVRDLP		;Retry
 20605 000033C8 3C03                    	CMP	AL,3
 20606 000033CA 74AF                    	JZ	short DEVIOFERR		; FAIL
 20607 000033CC 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20608 000033CE EB12                    	JMP	SHORT DVRDIGN
 20609                                  
 20610                                  CRDOK:
 20611 000033D0 5F                      	POP	DI
 20612                                  
 20613                                  ;hkn; SS override
 20614 000033D1 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20615                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20616 000033D7 751F                    	JNZ	short ENDRDDEVJ2
 20617                                  	; 16/12/2022
 20618                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20619                                  
 20620 000033D9 1E                      	PUSH	DS
 20621                                  
 20622                                  ;hkn; SS override
 20623 000033DA 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20624 000033DF 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20625 000033E1 1F                      	POP	DS
 20626                                  DVRDIGN:
 20627                                  
 20628                                  ;hkn; SS override
 20629 000033E2 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20630 000033E7 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20631 000033EE 47                      	INC	DI			; Next character
 20632 000033EF 3C1A                    	CMP	AL,1Ah			; ^Z?
 20633                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20634 000033F1 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20635                                  	; 16/12/2022
 20636                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20637 000033F3 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20638 000033F5 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20639 000033F7 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20640                                  					;  AX=FFFF which is not likely
 20641                                  ENDRDDEVJ2:
 20642                                  	; 16/12/2022
 20643                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20644                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20645 000033F8 E98E00                  	jmp	ENDRDDEV
 20646                                  
 20647                                  	; 04/05/2019
 20648                                  
 20649                                  	; MSDOS 6.0
 20650                                  ;SR;
 20651                                  ;Polling code for raw read on CON when WIN386 is present
 20652                                  ;
 20653                                  ;At this point -- ds:di is transfer address
 20654                                  ;		  cx is count
 20655                                  
 20656                                  do_polling:
 20657 000033FB 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20658 000033FD 31C0                    	xor	ax,ax
 20659 000033FF 89C2                    	mov	dx,ax
 20660 00003401 E8D612                  	call	SETREAD			;prepare device packet
 20661                                  
 20662                                  do_io:
 20663                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20664                                  
 20665 00003404 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20666 00003409 1E                      	push	ds
 20667 0000340A 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20668 0000340F E84F12                  	call	DEVIOCALL		;call device driver
 20669 00003412 1F                      	pop	ds
 20670                                  	
 20671                                  	;test	word [es:bx+3],8000h
 20672                                  	; 16/12/2022
 20673                                  	;test	byte [es:bx+4],80h
 20674 00003413 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20675                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20676 00003418 7413                    	jz	short check_busy	;no
 20677                                  
 20678 0000341A 1E                      	push	ds
 20679 0000341B 89FA                    	mov	dx,di
 20680                                  	;invoke charhard		;invoke int 24h handler
 20681 0000341D E8A61E                  	call	CHARHARD
 20682 00003420 89D7                    	mov	di,dx
 20683 00003422 08C0                    	or	al,al
 20684 00003424 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20685 00003426 3C03                    	cmp	al,3
 20686 00003428 7448                    	jz	short devrderr		;user asked to fail
 20687 0000342A 1F                      	pop	ds
 20688 0000342B EBD7                    	jmp	short do_io		;user asked to retry
 20689                                  
 20690                                  check_busy:
 20691                                  	;test	word [es:bx+3],200h
 20692                                  	; 16/12/2022
 20693 0000342D 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20694                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20695 00003432 7547                    	jnz	short no_char		;yes, no character available
 20696                                  
 20697                                  ;Character is available. Read in 1 character at a time until all characters
 20698                                  ;are read in or no character is available
 20699                                  
 20700 00003434 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20701 00003439 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20702 0000343F 1E                      	push	ds
 20703 00003440 36C536[9E05]            	lds	si,[ss:THISSFT]
 20704 00003445 E81912                  	call	DEVIOCALL
 20705                                  
 20706 00003448 89FA                    	mov	dx,di
 20707 0000344A B486                    	mov	ah,86h
 20708                                  	;mov	di,[es:bx+3]
 20709 0000344C 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20710 00003450 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20711 00003454 7410                    	jz	short next_char		;no,read next character
 20712                                  
 20713                                  	;invoke	charhard		;invoke int 24h handler
 20714 00003456 E86D1E                  	call	CHARHARD
 20715 00003459 89D7                    	mov	di,dx			;restore di
 20716 0000345B 08C0                    	or	al,al			;
 20717 0000345D 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20718 0000345F 3C03                    	cmp	al,3
 20719 00003461 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20720 00003463 1F                      	pop	ds
 20721 00003464 EB9E                    	jmp	short do_io		;user issued a retry
 20722                                  
 20723                                  next_char:
 20724 00003466 1F                      	pop	ds
 20725 00003467 89D7                    	mov	di,dx
 20726 00003469 49                      	dec	cx			;decrement count
 20727 0000346A E318                    	jcxz	done_read		;all characters read in
 20728 0000346C 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20729 00003470 EB92                    	jmp	short do_io			;read next character in
 20730                                  
 20731                                  devrderr:
 20732 00003472 5F                      	pop	di			;discard segment address
 20733 00003473 36C43E[9E05]            	les	di,[ss:THISSFT]
 20734                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20735 00003478 E96504                  	jmp     SET_ACC_ERR_DS
 20736                                  
 20737                                  no_char:
 20738                                  ;Since no character is available, we let win386 switch the VM out
 20739                                  
 20740 0000347B 50                      	push	ax
 20741 0000347C B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20742 0000347E CD2A                    	int	2Ah			;indicate idle to WIN386
 20743                                  
 20744                                  ;When control returns from WIN386, we continue the raw read
 20745                                  
 20746 00003480 58                      	pop	ax
 20747 00003481 EB81                    	jmp	do_io
 20748                                  
 20749                                  pop_done_read:
 20750 00003483 1F                      	pop	ds
 20751                                  done_read:
 20752 00003484 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20753                                  
 20754                                  	; 16/12/2022
 20755                                  
 20756                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20757                                  	;jmp	ENDRDDEV ; 04/05/2019
 20758                                  
 20759                                  	; 04/05/2019 - Retro DOS v4.0
 20760                                  ENDRDDEV:
 20761 00003489 16                      	push	ss
 20762 0000348A 1F                      	pop	ds
 20763 0000348B EB1F                    	jmp	short endrddev1
 20764                                  
 20765                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20766                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20767                                  
 20768                                  TRANBUF:
 20769 0000348D AC                      	LODSB
 20770 0000348E AA                      	STOSB
 20771 0000348F 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20772 00003491 7503                    	JNZ	short NORMCH
 20773 00003493 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20774                                  NORMCH:
 20775 00003496 3C0A                    	CMP	AL,c_LF ; 0Ah
 20776 00003498 E0F3                    	LOOPNZ	TRANBUF
 20777 0000349A 7507                    	JNZ	short ENDRDCON
 20778 0000349C 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20779 0000349E E8C0E1                  	call	OUTT		; Transmit linefeed
 20780 000034A1 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20781                                  ENDRDCON:
 20782                                  ;hkn; SS is DOSDATA
 20783 000034A3 16                      	push	ss
 20784 000034A4 1F                      	pop	ds
 20785 000034A5 E80CFE                  	CALL	SWAPBACK
 20786 000034A8 8936[2200]              	MOV	[CONTPOS],SI
 20787                                  
 20788                                  	; 16/12/2022
 20789                                  ;ENDRDDEV:
 20790                                  ;;hkn; SS is DOSDATA
 20791                                  ;	push	ss
 20792                                  ;	pop	ds
 20793                                  endrddev1:	; 04/05/2019
 20794 000034AC 893E[B805]              	MOV	[NEXTADD],DI
 20795 000034B0 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20796 000034B2 C43E[9E05]              	LES	DI,[THISSFT]
 20797                                  	;and	byte [es:di+5],0BFh
 20798 000034B6 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20799                                  				; Mark as no more data available
 20800                                  SETSFTC:
 20801                                  	; 31/07/2019
 20802                                  	;call	SETSFT
 20803                                  	;retn
 20804 000034BB E9B604                  	jmp	SETSFT
 20805                                  
 20806                                  ; 16/12/2022
 20807                                  %if 0
 20808                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20809                                  ENDRDDEV:
 20810                                  ;hkn; SS is DOSDATA
 20811                                  	push	ss
 20812                                  	pop	ds
 20813                                  	MOV	[NEXTADD],DI
 20814                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20815                                  	LES	DI,[THISSFT]
 20816                                  	;and	byte [es:di+5],0BFh
 20817                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20818                                  				; Mark as no more data available
 20819                                  SETSFTC:
 20820                                  	;call	SETSFT
 20821                                  	;retn
 20822                                  	jmp	SETSFT	
 20823                                  %endif
 20824                                  
 20825                                  READCON:
 20826 000034BE E8F9FD                  	CALL	SWAPCON
 20827 000034C1 8B36[2200]              	MOV	SI,[CONTPOS]
 20828 000034C5 09F6                    	OR	SI,SI
 20829 000034C7 75C4                    	JNZ	short TRANBUF
 20830 000034C9 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20831 000034CE 7406                    	JZ	short GETBUF
 20832 000034D0 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20833                                  GETBUF:
 20834 000034D6 51                      	PUSH	CX
 20835 000034D7 06                      	PUSH	ES
 20836 000034D8 57                      	PUSH	DI
 20837                                  
 20838                                  ;hkn; CONBUF is in DOSDATA
 20839 000034D9 BA[7B02]                	MOV	DX,CONBUF
 20840                                  
 20841 000034DC E8FDDE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20842 000034DF 5F                      	POP	DI
 20843 000034E0 07                      	POP	ES
 20844 000034E1 59                      	POP	CX
 20845                                  
 20846                                  ;hkn; CONBUF is in DOSDATA
 20847 000034E2 BE[7D02]                	MOV	SI,CONBUF+2
 20848                                  
 20849 000034E5 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20850 000034E8 75A3                    	JNZ	short TRANBUF
 20851 000034EA B01A                    	MOV	AL,1AH
 20852 000034EC AA                      	STOSB
 20853 000034ED 4F                      	DEC	DI
 20854 000034EE B00A                    	MOV	AL,c_LF
 20855 000034F0 E86EE1                  	call	OUTT		; Send linefeed
 20856 000034F3 31F6                    	XOR	SI,SI
 20857 000034F5 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20858                                  
 20859                                  ; 24/07/2018 - Retro DOS v3.0
 20860                                  
 20861                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20862                                  ;---------------------------------------------------------------------------
 20863                                  ;
 20864                                  ; Procedure Name : DOS_WRITE
 20865                                  ;
 20866                                  ; Inputs:
 20867                                  ;	ThisSFT set to the SFT for the file being used
 20868                                  ;	[DMAADD] contains transfer address
 20869                                  ;	CX = No. of bytes to write
 20870                                  ; Function:
 20871                                  ;	Perform write operation
 20872                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20873                                  ;		to current sf_position
 20874                                  ; Outputs:
 20875                                  ;    Carry clear
 20876                                  ;	SFT Position and cluster pointers updated
 20877                                  ;	CX = No. of bytes written
 20878                                  ;	ES:DI point to SFT
 20879                                  ;    Carry set
 20880                                  ;	AX is error code
 20881                                  ;	CX = 0
 20882                                  ;	ES:DI point to SFT
 20883                                  ; DS preserved, all other registers destroyed
 20884                                  ;---------------------------------------------------------------------------
 20885                                  
 20886                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20887                                  ;hkn; point to DOSDATA.
 20888                                  
 20889                                  ; 04/05/2019 - Retro DOS v4.0
 20890                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20891                                  
 20892                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20893                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20894                                  
 20895                                  DOS_WRITE:
 20896 000034F7 C43E[9E05]              	LES	DI,[THISSFT]
 20897                                  	;mov	al,[ES:DI+2]
 20898 000034FB 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20899                                  	;and	al,0Fh
 20900 000034FF 240F                    	AND	AL,access_mask
 20901                                  	;cmp	al,0
 20902 00003501 3C00                    	CMP	AL,open_for_read
 20903 00003503 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20904                                  BadMode:
 20905 00003505 E9DA03                  	jmp	SET_ACC_ERR
 20906                                  
 20907                                  ; NOTE: The following check for writting to a Read Only File is performed
 20908                                  ;	    ONLY on FCBs!!!!
 20909                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20910                                  ;	    of a read only file which can then be written to.
 20911                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20912                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20913                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20914                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20915                                  ;	    to a read-only file.
 20916                                  
 20917                                  Check_FCB_RO:
 20918                                  	;;test	word [es:di+2],8000h
 20919                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20920                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20921                                  	
 20922                                  	;test	byte [es:di+3],80h
 20923 00003508 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20924 0000350D 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20925                                  
 20926                                  	;test	byte [es:di+4],1
 20927 0000350F 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20928 00003514 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20929                                  WRITE_NO_MODE:
 20930 00003516 E8AA02                  	call	SETUP
 20931 00003519 E848DD                  	call	IsSFTNet
 20932 0000351C 7406                    	JZ	short LOCAL_WRITE
 20933                                  
 20934                                  ;IF NOT Installed
 20935                                  ;	transfer NET_WRITE
 20936                                  ;ELSE
 20937                                  	;mov	ax,1109h
 20938 0000351E B80911                  	MOV	AX,(MultNET<<8)|9
 20939 00003521 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20940                                  			; ES:DI -> SFT
 20941                                  			; SFT DPB field -> DPB of drive containing file
 20942                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20943                                  			; Return: CF set on error, CX = bytes written
 20944 00003523 C3                      	retn
 20945                                  ;ENDIF
 20946                                  
 20947                                  LOCAL_WRITE:
 20948                                  	;;test	word [es:di+5],80h
 20949                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20950                                  	;jnz	short WRTDEV
 20951                                  
 20952                                  	;test	byte [es:di+5],80h
 20953 00003524 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20954 00003529 756E                    	jnz	short WRTDEV
 20955                                  
 20956                                  	;mov	byte [EXTERR_LOCUS],2
 20957 0000352B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20958 00003530 E8DADD                  	call	ECritDisk
 20959                                  
 20960 00003533 E8F404                  	call	DISKWRITE
 20961                                  
 20962                                  	; 04/05/2019 - Retro DOS v4.0
 20963                                  
 20964                                  	; MSDOS 6.0
 20965                                  ; Extended Open
 20966 00003536 7210                    	JC	short nocommit
 20967                                  	
 20968 00003538 C43E[9E05]              	LES	DI,[THISSFT]
 20969                                  	
 20970                                  	;;test	word [ES:DI+2],4000h
 20971                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20972                                  	;JZ	short nocommit
 20973                                  	
 20974                                  	;test	byte [ES:DI+3],40h
 20975 0000353C 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20976 00003541 7405                    	JZ	short nocommit
 20977                                  	
 20978 00003543 51                      	PUSH	CX
 20979 00003544 E82EFB                  	call	DOS_COMMIT
 20980 00003547 59                      	POP	CX
 20981                                  nocommit:
 20982                                  ; Extended Open
 20983                                  	;call	LCritDisk
 20984                                  	;retn
 20985                                  	; 18/12/2022
 20986 00003548 E9DDDD                  	jmp	LCritDisk
 20987                                  
 20988                                  DVWRTRAW:
 20989 0000354B 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20990 0000354D E8BD11                  	call	SETWRITE
 20991 00003550 1E                      	PUSH	DS			; Save seg of transfer
 20992                                  
 20993                                  ;hkn; SS override
 20994 00003551 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20995 00003556 E80811                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20996                                  
 20997 00003559 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20998 0000355B B487                    	MOV	AH,87H
 20999                                  
 21000                                  ;hkn; SS override
 21001 0000355D 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21002                                  
 21003                                  	; MSDOS 3.3
 21004                                  	;test	di,8000h
 21005                                  	;jz	short CWRTROK
 21006                                  
 21007                                  	; MSDOS 6.0
 21008 00003562 09FF                    	or	di,di
 21009 00003564 7920                    	jns	short CWRTROK
 21010                                  	
 21011                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21012 00003566 E85D1D                  	call	CHARHARD
 21013                                  
 21014                                  	; 04/05/2019  - Retro DOS v4.0
 21015                                  
 21016                                  	; MSDOS 6.0
 21017 00003569 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21018 0000356E 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21019 00003570 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 21020 00003575 89DF                    	mov	di,bx			;				M065
 21021                                  	
 21022                                  	; MSDOS 3.3
 21023                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21024                                  
 21025                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21026 00003577 08C0                    	OR	AL,AL
 21027 00003579 740B                    	JZ	short CWRTROK 		; Ignore
 21028 0000357B 3C03                    	CMP	AL,3
 21029 0000357D 7403                    	JZ	short CWRFERR
 21030 0000357F 1F                      	POP	DS			; Recover saved seg of transfer
 21031 00003580 EBC9                    	JMP	short DVWRTRAW		; Try again
 21032                                  CWRFERR:
 21033 00003582 58                      	POP	AX			; Chuck saved seg of transfer
 21034 00003583 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 21035                                  CWRTROK:
 21036 00003586 58                      	POP	AX			; Chuck saved seg of transfer
 21037 00003587 1F                      	POP	DS
 21038 00003588 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21039                                  ENDWRDEV:
 21040 0000358B C43E[9E05]              	LES	DI,[THISSFT]
 21041 0000358F 89C1                    	MOV	CX,AX
 21042                                  	;call	ADDREC
 21043                                  	;retn
 21044                                  	; 16/12/2022
 21045                                  	; 10/06/2019
 21046 00003591 E90104                  	jmp	ADDREC
 21047                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21048                                  	;call	ADDREC
 21049                                  	;retn
 21050                                  	
 21051                                  WRTNUL:
 21052 00003594 89CA                    	MOV	DX,CX			; Entire transfer done
 21053                                  WRTCOOKJ:
 21054 00003596 E98D00                  	JMP	WRTCOOKDONE
 21055                                  WRTDEV:
 21056                                  	;mov	byte [EXTERR_LOCUS],4
 21057 00003599 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21058                                  	;or	byte [es:di+5],40h
 21059 0000359E 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21060                                  					; Reset EOF for input
 21061                                  	;mov	bl,[es:di+5]
 21062 000035A3 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21063 000035A7 31C0                    	XOR	AX,AX
 21064 000035A9 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21065 000035AB 1E                      	PUSH	DS
 21066 000035AC 88D8                    	MOV	AL,BL
 21067 000035AE C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21068 000035B2 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21069 000035B4 31D2                    	XOR	DX,DX			; Set starting point
 21070                                  	;test	al,20h
 21071 000035B6 A820                    	test	AL,devid_device_raw	; Raw?
 21072                                  	;JZ	short TEST_DEV_CON
 21073                                  	;JMP	DVWRTRAW
 21074                                  	; 16/12/2022
 21075 000035B8 7591                    	jnz	short DVWRTRAW
 21076                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21077                                  	;JZ	short TEST_DEV_CON
 21078                                  	;JMP	short DVWRTRAW
 21079                                  
 21080                                  TEST_DEV_CON:
 21081                                  	;test	al,2
 21082 000035BA A802                    	test	AL,devid_device_con_out ; Console output device?
 21083 000035BC 756E                    	jnz	short WRITECON
 21084                                  	;test	al,4
 21085 000035BE A804                    	test	AL,devid_device_null
 21086 000035C0 75D2                    	JNZ	short WRTNUL
 21087 000035C2 89D0                    	MOV	AX,DX
 21088 000035C4 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21089 000035C7 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21090 000035C9 51                      	PUSH	CX
 21091 000035CA B90100                  	MOV	CX,1
 21092 000035CD E83D11                  	call	SETWRITE
 21093 000035D0 59                      	POP	CX
 21094                                  
 21095                                  ;hkn; SS override
 21096 000035D1 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21097                                  ;
 21098                                  ;SR; Removed X25 support from here
 21099                                  ;
 21100                                  	;lds	si,[si+7]
 21101 000035D6 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21102                                  DVWRTLP:
 21103 000035D9 E8CB1A                  	call	DSKSTATCHK
 21104 000035DC E88510                  	call	DEVIOCALL2
 21105 000035DF 57                      	PUSH	DI
 21106 000035E0 B487                    	MOV	AH,87H
 21107                                  
 21108                                  ;hkn; SS override
 21109 000035E2 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21110                                  	
 21111                                  	; MSDOS 3.3
 21112                                  	;test	di,8000h
 21113                                  	;jz	short CWROK
 21114                                  
 21115                                  	; MSDOS 6.0
 21116 000035E7 09FF                    	or	di,di
 21117 000035E9 7916                    	jns	short CWROK
 21118                                  	
 21119                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21120 000035EB E8D81C                  	call	CHARHARD
 21121 000035EE 5F                      	POP	DI
 21122                                  
 21123                                  ;hkn; SS override
 21124 000035EF 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21125 000035F6 3C01                    	CMP	AL,1
 21126 000035F8 74DF                    	JZ	short DVWRTLP 	; Retry
 21127 000035FA 08C0                    	OR	AL,AL
 21128 000035FC 740C                    	JZ	short DVWRTIGN	; Ignore
 21129                                  	; 10/08/2018
 21130 000035FE E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21131                                  CWROK:
 21132 00003601 5F                      	POP	DI
 21133                                  
 21134                                  ;hkn; SS override
 21135 00003602 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21136 00003608 741C                    	JZ	short WRTCOOKDONE
 21137                                  DVWRTIGN:
 21138 0000360A 42                      	INC	DX
 21139                                  
 21140                                  ;hkn; SS override for CALLXAD
 21141 0000360B 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21142 00003610 47                      	INC	DI
 21143 00003611 1E                      	PUSH	DS
 21144 00003612 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21145 00003617 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21146 0000361A 1F                      	POP	DS
 21147 0000361B 7409                    	JZ	short WRTCOOKDONE
 21148                                  
 21149                                  ;hkn; SS override
 21150 0000361D 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21151 00003624 E2B3                    	LOOP	DVWRTLP
 21152                                  WRTCOOKDONE:
 21153 00003626 89D0                    	MOV	AX,DX
 21154 00003628 1F                      	POP	DS
 21155 00003629 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21156                                  
 21157                                  WRITECON:
 21158 0000362C 1E                      	PUSH	DS
 21159                                  
 21160                                  ;hkn; SS is DOSDATA
 21161 0000362D 16                      	push	ss
 21162 0000362E 1F                      	pop	ds
 21163 0000362F E888FC                  	CALL	SWAPCON
 21164 00003632 1F                      	POP	DS
 21165 00003633 89DE                    	MOV	SI,BX
 21166 00003635 51                      	PUSH	CX
 21167                                  WRCONLP:
 21168 00003636 AC                      	LODSB
 21169 00003637 3C1A                    	CMP	AL,1Ah		; ^Z?
 21170 00003639 7405                    	JZ	short CONEOF
 21171 0000363B E823E0                  	call	OUTT
 21172 0000363E E2F6                    	LOOP	WRCONLP
 21173                                  CONEOF:
 21174 00003640 58                      	POP	AX			; Count
 21175 00003641 29C8                    	SUB	AX,CX			; Amount actually written
 21176 00003643 1F                      	POP	DS
 21177 00003644 E86DFC                  	CALL	SWAPBACK
 21178 00003647 E941FF                  	JMP	ENDWRDEV
 21179                                  
 21180                                  ;---------------------------------------------------------------------------
 21181                                  ;
 21182                                  ; Procedure Name : get_io_sft
 21183                                  ;
 21184                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21185                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21186                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21187                                  ;
 21188                                  ;---------------------------------------------------------------------------
 21189                                  
 21190                                  ; 04/05/2019 - Retro DOS v4.0
 21191                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21192                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21193                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21194                                  
 21195                                  GET_IO_SFT:
 21196                                  	;test	byte [SS:CONSWAP],0FFh
 21197 0000364A 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21198 00003650 7512                    	JNZ	short GetRedir
 21199                                  GetNormal:
 21200 00003652 16                      	push	ss
 21201 00003653 1F                      	pop	ds
 21202 00003654 06                      	PUSH	ES
 21203 00003655 57                      	PUSH	DI
 21204 00003656 E80D30                  	call	SFFromHandle
 21205 00003659 7206                    	JC	short RET44P
 21206 0000365B 8CC6                    	MOV	SI,ES
 21207 0000365D 8EDE                    	MOV	DS,SI
 21208 0000365F 89FE                    	MOV	SI,DI
 21209                                  RET44P:
 21210 00003661 5F                      	POP	DI
 21211 00003662 07                      	POP	ES
 21212 00003663 C3                      	retn
 21213                                  GetRedir:
 21214 00003664 83FB01                  	CMP	BX,1
 21215 00003667 77E9                    	JA	short GetNormal
 21216 00003669 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21217 0000366E F8                      	CLC
 21218                                  get_io_sft_retn:
 21219 0000366F C3                      	retn
 21220                                  
 21221                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21222                                  ;---------------------------------------------------------------------------
 21223                                  ;
 21224                                  ; Procedure Name : DIRREAD
 21225                                  ;
 21226                                  ; Inputs:
 21227                                  ;	AX = Directory block number (relative to first block of directory)
 21228                                  ;	ES:BP = Base of drive parameters
 21229                                  ;	[DIRSEC] = First sector of first cluster of directory
 21230                                  ;	[CLUSNUM] = Next cluster
 21231                                  ;	[CLUSFAC] = Sectors/Cluster
 21232                                  ; Function:
 21233                                  ;	Read the directory block into [CURBUF].
 21234                                  ; Outputs:
 21235                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21236                                  ;	[SECCLUSPOS] Set
 21237                                  ;	ES:BP unchanged
 21238                                  ;	[CURBUF] Points to Buffer with dir sector
 21239                                  ;	Carry set if error (user said FAIL to I 24)
 21240                                  ; DS preserved, all other registers destroyed.
 21241                                  ;---------------------------------------------------------------------------
 21242                                  
 21243                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21244                                  
 21245                                  DIRREAD:
 21246                                  
 21247                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21248                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21249                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21250                                  ; by DIRStart = 0.
 21251                                  
 21252 00003670 31D2                    	XOR	DX,DX
 21253                                  	;CMP	word [DIRSTART],0
 21254                                  	; 21/09/2023
 21255 00003672 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21256 00003676 7503                    	jnz	short SubDir
 21257 00003678 92                      	XCHG	AX,DX
 21258 00003679 EB0C                    	JMP	short DoRead
 21259                                  
 21260                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21261                                  
 21262                                  SubDir:
 21263 0000367B 88C2                    	MOV	DL,AL
 21264                                  	;and	dl,[es:bp+4]
 21265 0000367D 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21266                                  
 21267                                  ;	(DX) = sector-in-cluster
 21268                                  
 21269                                  	;mov	cl,[es:bp+5]
 21270 00003681 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21271 00003685 D3E8                    	SHR	AX,CL
 21272                                  
 21273                                  ;	(DX) = position in cluster
 21274                                  ;	(AX) = number of clusters to skip
 21275                                  
 21276                                  DoRead:
 21277 00003687 8816[7305]              	MOV	[SECCLUSPOS],DL
 21278 0000368B 89C1                    	MOV	CX,AX
 21279 0000368D 88D4                    	MOV	AH,DL
 21280                                  
 21281                                  ;	(CX) = number of clusters to skip.
 21282                                  ;	(AH) = remainder
 21283                                  
 21284                                  	; 04/05/2019 - Retro DOS v4.0
 21285                                  	 
 21286                                  	; MSDOS 6.0
 21287                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21288                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21289                                  	;MOV	DX,[DIRSEC]
 21290                                  	;ADD	DL,AH
 21291                                  	;ADC	DH,0
 21292                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21293                                  	; 21/09/2023
 21294 0000368F 31DB                    	xor	bx,bx ; 0
 21295 00003691 8B16[BE05]              	mov	dx,[DIRSEC]
 21296 00003695 00E2                    	add	dl,ah
 21297 00003697 10DE                    	adc	dh,bl ; 0
 21298 00003699 131E[C005]              	adc	bx,[DIRSEC+2]
 21299 0000369D 891E[0706]              	mov	[HIGH_SECTOR],bx
 21300                                  
 21301 000036A1 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21302 000036A5 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21303 000036A9 E319                    	JCXZ	FIRSTCLUSTER
 21304                                  SKPCLLP:
 21305 000036AB E8831E                  	call	UNPACK
 21306 000036AE 72BF                    	jc	short get_io_sft_retn
 21307 000036B0 87DF                    	XCHG	BX,DI
 21308 000036B2 E8651E                  	call	IsEOF			; test for eof based on fat size
 21309 000036B5 7302                    	JAE	short HAVESKIPPED
 21310 000036B7 E2F2                    	LOOP	SKPCLLP
 21311                                  HAVESKIPPED:
 21312 000036B9 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21313 000036BD 89FA                    	MOV	DX,DI
 21314 000036BF 88E3                    	MOV	BL,AH
 21315 000036C1 E81617                  	call	FIGREC
 21316                                  
 21317                                  	;entry	FIRSTCLUSTER
 21318                                  
 21319                                  FIRSTCLUSTER:
 21320                                  	; 22/09/2023
 21321                                  	;;mov	byte [ALLOWED],18h
 21322                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21323                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21324                                  	;call	GETBUFFR
 21325 000036C4 E87522                  	call	GETBUFFER ; *	; pre-read
 21326 000036C7 72A6                    	jc	short get_io_sft_retn
 21327                                  
 21328                                  	;entry	SET_BUF_AS_DIR
 21329                                  
 21330                                  SET_BUF_AS_DIR:
 21331                                  
 21332                                  ;	Set the type of CURBUF to be a directory sector.
 21333                                  ;	Only flags are modified.
 21334                                  
 21335 000036C9 1E                      	PUSH	DS
 21336 000036CA 56                      	PUSH	SI
 21337 000036CB C536[E205]              	LDS	SI,[CURBUF]
 21338                                  	;or	byte [si+5],4
 21339 000036CF 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21340 000036D3 5E                      	POP	SI
 21341 000036D4 1F                      	POP	DS
 21342                                  dirread_retn:
 21343 000036D5 C3                      	retn
 21344                                  
 21345                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21346                                  ;----------------------------------------------------------------------------
 21347                                  ;
 21348                                  ; Procedure Name : FATSECRD
 21349                                  ; Inputs:
 21350                                  ;	Same as DREAD
 21351                                  ;	DS:BX = Transfer address
 21352                                  ;	CX = Number of sectors
 21353                                  ;	DX = Absolute record number
 21354                                  ;	ES:BP = Base of drive parameters
 21355                                  ; Function:
 21356                                  ;	Calls BIOS to perform FAT read.
 21357                                  ; Outputs:
 21358                                  ;	Same as DREAD
 21359                                  ;---------------------------------------------------------------------------
 21360                                  
 21361                                  	; 04/05/2019 - Retro DOS v4.0
 21362                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21363                                  
 21364                                  FATSECRD:
 21365                                  ;hkn; SS override
 21366                                  	;mov	byte [ss:ALLOWED],18h
 21367 000036D6 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21368 000036DC 89CF                    	MOV	DI,CX
 21369                                  	;mov	cl,[es:bp+8]
 21370 000036DE 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21371                                  	; MSDOS 3.3
 21372                                  	;;mov	al,[es:bp+0Fh]
 21373                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21374                                  	;XOR	AH,AH
 21375                                  	; MSDOS 6.0
 21376                                  	;mov	ax,[es:bp+0Fh]
 21377 000036E2 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21378 000036E6 30ED                    	XOR	CH,CH	
 21379 000036E8 52                      	PUSH	DX
 21380                                  NXTFAT:
 21381                                  	; MSDOS 6.0
 21382                                  ;hkn; SS override
 21383 000036E9 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21384 000036F0 51                      	PUSH	CX			;32mb
 21385 000036F1 50                      	PUSH	AX
 21386 000036F2 89F9                    	MOV	CX,DI
 21387 000036F4 E85B00                  	call	DSKREAD
 21388 000036F7 58                      	POP	AX
 21389 000036F8 59                      	POP	CX
 21390 000036F9 7420                    	JZ	short RET41P		; Carry clear
 21391 000036FB 01C2                    	ADD	DX,AX
 21392 000036FD E2EA                    	LOOP	NXTFAT
 21393 000036FF 5A                      	POP	DX
 21394 00003700 89F9                    	MOV	CX,DI
 21395                                  
 21396                                  ; NOTE FALL THROUGH
 21397                                  
 21398                                  ;Break	<DREAD -- DO A DISK READ>
 21399                                  ;---------------------------------------------------------------------------
 21400                                  ;
 21401                                  ; Procedure Name : DREAD
 21402                                  ;
 21403                                  ; Inputs:
 21404                                  ;	DS:BX = Transfer address
 21405                                  ;	CX = Number of sectors
 21406                                  ;	DX = Absolute record number	      (LOW)
 21407                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21408                                  ;	ES:BP = Base of drive parameters
 21409                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21410                                  ; Function:
 21411                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21412                                  ;	errors, will call HARDERRRW for further action.
 21413                                  ; Outputs:
 21414                                  ;	Carry set if error (currently user FAILED to INT 24)
 21415                                  ; DS,ES:BP preserved. All other registers destroyed.
 21416                                  ;---------------------------------------------------------------------------
 21417                                  
 21418                                  	;entry	DREAD
 21419                                  DREAD:
 21420 00003702 E84D00                  	call	DSKREAD
 21421 00003705 74CE                    	jz	short dirread_retn	; Carry clear
 21422                                  ;hkn; SS override
 21423 00003707 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21424 0000370D E89A00                  	call	HARDERRRW
 21425 00003710 3C01                    	CMP	AL,1			; Check for retry
 21426 00003712 74EE                    	JZ	short DREAD
 21427 00003714 3C03                    	CMP	AL,3			; Check for FAIL
 21428 00003716 F8                      	CLC
 21429 00003717 7501                    	JNZ	short NO_CAR		; Ignore
 21430 00003719 F9                      	STC
 21431                                  NO_CAR:
 21432 0000371A C3                      	retn
 21433                                  RET41P: 
 21434 0000371B 5A                      	POP	DX
 21435 0000371C C3                      	retn
 21436                                  
 21437                                  ; 24/07/2018 - Retro DOS v3.0
 21438                                  
 21439                                  ;Break	<CHECK_WRITE_LOCK>
 21440                                  ;---------------------------------------------------------------------------
 21441                                  ;
 21442                                  ; Procedure Name : CHECK_WRITE_LOCK
 21443                                  ;
 21444                                  ; Inputs:
 21445                                  ;	output of SETUP
 21446                                  ;	ES:DI -> SFT
 21447                                  ; Function:
 21448                                  ;	check write lock
 21449                                  ; Outputs:
 21450                                  ;	Carry set if error
 21451                                  ;	Carry clear if ok
 21452                                  ;
 21453                                  ;----------------------------------------------------------------------------
 21454                                  
 21455                                  	; 04/05/2019 - Retro DOS v4.0
 21456                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21457                                  
 21458                                  CHECK_WRITE_LOCK:
 21459                                  	; MSDOS 6.0
 21460                                  	;test	byte [es:di+4],8
 21461 0000371D 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21462                                  	;JZ	short write_cont			     ;no
 21463                                  	;;call	SET_ACC_ERR_DS
 21464                                  	;;retn
 21465                                  	;;jnz	SET_ACC_ERR_DS
 21466                                  	; 19/08/2018
 21467                                  	;jz	short write_cont
 21468                                  	;jmp	SET_ACC_ERR_DS
 21469                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21470 00003722 7403                    	JZ	short write_cont
 21471                                  	;call	SET_ACC_ERR_DS
 21472                                  	;retn
 21473                                  	; 16/12/2022
 21474 00003724 E9B901                  	jmp	SET_ACC_ERR_DS
 21475                                  
 21476                                  write_cont:				;
 21477 00003727 51                      	PUSH	CX			;save reg
 21478 00003728 09C9                    	OR	CX,CX			;
 21479 0000372A 7501                    	JNZ	short Not_Truncate	;
 21480 0000372C 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21481                                  Not_Truncate:				;
 21482 0000372D B080                    	MOV	AL,80H			;check write access
 21483 0000372F E8BD3B                  	call	LOCK_CHECK		;check lock
 21484 00003732 59                      	POP	CX			;restore reg
 21485 00003733 7305                    	JNC	short WRITE_OK		;lock ok
 21486 00003735 E85F01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21487 00003738 73ED                    	JNC	short write_cont	;retry
 21488                                  WRITE_OK:				;
 21489 0000373A C3                      	retn				;
 21490                                  
 21491                                  ;Break	<CHECK_READ_LOCK>
 21492                                  ;---------------------------------------------------------------------------
 21493                                  ;
 21494                                  ; Procedure Name : CHECK_READ_LOC
 21495                                  ;
 21496                                  ; Inputs:
 21497                                  ;	ES:DI -> SFT
 21498                                  ;	output of SETUP
 21499                                  ; Function:
 21500                                  ;	check read lock
 21501                                  ; Outputs:
 21502                                  ;	Carry set if error
 21503                                  ;	Carry clear if ok
 21504                                  ;----------------------------------------------------------------------------
 21505                                  
 21506                                  CHECK_READ_LOCK:
 21507                                  	; MSDOS 6.0
 21508                                  	;test	byte [es:di+4],8
 21509 0000373B 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21510                                  	;JZ	short do_retry			   	     ; no
 21511                                  	;;call	SET_ACC_ERR
 21512                                  	;;retn
 21513                                  	;;jnz	SET_ACC_ERR
 21514                                  	; 16/12/2022
 21515                                  	; 28/07/2019
 21516 00003740 7403                    	jz	short do_retry
 21517 00003742 E99D01                  	jmp	SET_ACC_ERR
 21518                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21519                                  	;JZ	short do_retry
 21520                                  	;call	SET_ACC_ERR
 21521                                  	;retn
 21522                                  do_retry:				;
 21523 00003745 30C0                    	xor	al,al			;check read access
 21524 00003747 E8A53B                  	call	LOCK_CHECK		;check lock
 21525 0000374A 7305                    	JNC	short READLOCK_OK 	;lock ok
 21526 0000374C E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21527 0000374F 73F4                    	JNC	short do_retry		;retry
 21528                                  READLOCK_OK:				;
 21529 00003751 C3                      	retn				;
 21530                                  
 21531                                  ;============================================================================
 21532                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21533                                  ;============================================================================
 21534                                  ; 24/07/2018 - Retro DOS v3.0
 21535                                  ; 04/05/2019 - Retro DOS v4.0
 21536                                  
 21537                                  ;	TITLE	DISK2 - Disk utility routines
 21538                                  ;	NAME	Disk2
 21539                                  
 21540                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21541                                  ;
 21542                                  ;	DskRead
 21543                                  ;	DWRITE
 21544                                  ;	DSKWRITE
 21545                                  ;	HarderrRW
 21546                                  ;	SETUP
 21547                                  ;	BREAKDOWN
 21548                                  ;	READ_LOCK_VIOLATION
 21549                                  ;	WRITE_LOCK_VIOLATION
 21550                                  ;	DISKREAD
 21551                                  ;	SET_ACC_ERR_DS
 21552                                  ;	SET_ACC_ERR
 21553                                  ;	SETSFT
 21554                                  ;	SETCLUS
 21555                                  ;	AddRec
 21556                                  ;
 21557                                  ;	Revision history:
 21558                                  ;
 21559                                  ;		AN000 version 4.00 Jan. 1988
 21560                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21561                                  
 21562                                  ; 04/05/2019 - Retro DOS v4.0
 21563                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21564                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21565                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21566                                  
 21567                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21568                                  ;---------------------------------------------------------------------------
 21569                                  ;
 21570                                  ; Procedure Name : DSKREAD
 21571                                  ;
 21572                                  ; Inputs:
 21573                                  ;	DS:BX = Transfer addr
 21574                                  ;	CX = Number of sectors
 21575                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21576                                  ;	DX = Absolute record number	       (LOW)
 21577                                  ;	ES:BP = Base of drive parameters
 21578                                  ; Function:
 21579                                  ;	Call BIOS to perform disk read
 21580                                  ; Outputs:
 21581                                  ;	DI = CX on entry
 21582                                  ;	CX = Number of sectors unsuccessfully transfered
 21583                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21584                                  ;	Zero set if OK (from BIOS) (carry clear)
 21585                                  ;	Zero clear if error (carry clear)
 21586                                  ; SI Destroyed, others preserved
 21587                                  ;---------------------------------------------------------------------------
 21588                                  
 21589                                  DSKREAD:
 21590 00003752 51                      	PUSH	CX
 21591                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21592 00003753 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21593                                  	;mov	al,[es:bp+1]
 21594 00003757 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21595 0000375B 53                      	PUSH	BX
 21596 0000375C 06                      	PUSH	ES
 21597 0000375D E87A0F                  	call	SETREAD
 21598 00003760 EB27                    	JMP	short DODSKOP
 21599                                  
 21600                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21601                                  ;--------------------------------------------------------------------------
 21602                                  ;
 21603                                  ; Procedure Name : DWRITE
 21604                                  ;
 21605                                  ; Inputs:
 21606                                  ;	DS:BX = Transfer address
 21607                                  ;	CX = Number of sectors
 21608                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21609                                  ;	DX = Absolute record number	       (LOW)
 21610                                  ;	ES:BP = Base of drive parameters
 21611                                  ;	[ALLOWED] must be set in case HARDERR called
 21612                                  ; Function:
 21613                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21614                                  ;	errors, will call HARDERRRW for further action.
 21615                                  ; Output:
 21616                                  ;	Carry set if error (currently, user FAILed to I 24)
 21617                                  ; BP preserved. All other registers destroyed.
 21618                                  ;----------------------------------------------------------------------------
 21619                                  
 21620                                  	;entry	DWRITE
 21621                                  DWRITE:
 21622 00003762 E81600                  	CALL	DSKWRITE
 21623 00003765 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21624                                  
 21625                                  ;hkn; SS override
 21626 00003767 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21627 0000376D E83A00                  	call	HARDERRRW
 21628 00003770 3C01                    	CMP	AL,1		; Check for retry
 21629 00003772 74EE                    	JZ	short DWRITE
 21630 00003774 3C03                    	CMP	AL,3		; Check for FAIL
 21631 00003776 F8                      	CLC
 21632 00003777 7501                    	JNZ	short NO_CAR2 	; Ignore
 21633 00003779 F9                      	STC
 21634                                  NO_CAR2:
 21635                                  dw_ret_label:
 21636 0000377A C3                      	retn
 21637                                  
 21638                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21639                                  ;---------------------------------------------------------------------------
 21640                                  ;
 21641                                  ; Procedure Name : DSKWRITE
 21642                                  ;
 21643                                  ; Inputs:
 21644                                  ;	DS:BX = Transfer addr
 21645                                  ;	CX = Number of sectors
 21646                                  ;	DX = Absolute record number	       (LOW)
 21647                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21648                                  ;	ES:BP = Base of drive parameters
 21649                                  ; Function:
 21650                                  ;	Call BIOS to perform disk read
 21651                                  ; Outputs:
 21652                                  ;	DI = CX on entry
 21653                                  ;	CX = Number of sectors unsuccessfully transfered
 21654                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21655                                  ;	Zero set if OK (from BIOS) (carry clear)
 21656                                  ;	Zero clear if error (carry clear)
 21657                                  ; SI Destroyed, others preserved
 21658                                  ;
 21659                                  ;----------------------------------------------------------------------------
 21660                                  
 21661                                  	;entry	DSKWRITE
 21662                                  DSKWRITE:
 21663 0000377B 51                      	PUSH	CX
 21664                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21665 0000377C 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21666                                  	;mov	al,[es:bp+1]
 21667 00003780 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21668 00003784 53                      	PUSH	BX
 21669 00003785 06                      	PUSH	ES
 21670 00003786 E8840F                  	call	SETWRITE
 21671                                  DODSKOP:
 21672 00003789 8CD9                    	MOV	CX,DS		; Save DS
 21673 0000378B 1F                      	POP	DS		; DS:BP points to DPB
 21674 0000378C 1E                      	PUSH	DS
 21675                                  
 21676                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21677 0000378D 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21678 00003791 E8D00E                  	call	DEVIOCALL2
 21679                                  
 21680 00003794 8ED9                    	MOV	DS,CX		; Restore DS
 21681 00003796 07                      	POP	ES		; Restore ES
 21682 00003797 5B                      	POP	BX
 21683                                  
 21684                                  ;hkn; SS override
 21685 00003798 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21686 0000379D 5F                      	POP	DI
 21687 0000379E 29F9                    	SUB	CX,DI
 21688 000037A0 F7D9                    	NEG	CX		; Number of sectors not transferred
 21689                                  
 21690                                  ;hkn; SS override
 21691 000037A2 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21692                                  	;test	ax,8000h
 21693                                  	; 17/12/2022
 21694                                  	;test	ah,80h
 21695 000037A6 F6C480                  	test	ah,(STERR>>8)
 21696                                  	;test	AX,STERR
 21697 000037A9 C3                      	retn
 21698                                  
 21699                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21700                                  ;---------------------------------------------------------------------------
 21701                                  ;
 21702                                  ; Procedure Name : HardErrRW
 21703                                  ;
 21704                                  ; Inputs:
 21705                                  ;	AX is error code from read or write
 21706                                  ;	Other registers set as per HARDERR
 21707                                  ; Function:
 21708                                  ;	Checks the error code for special extended
 21709                                  ;	errors and maps them if needed. Then invokes
 21710                                  ;	Harderr
 21711                                  ; Outputs:
 21712                                  ;	Of HARDERR
 21713                                  ; AX may be modified prior to call to HARDERR.
 21714                                  ; No other registers altered.
 21715                                  ;
 21716                                  ;---------------------------------------------------------------------------
 21717                                  
 21718                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21719                                  HARDERRRW:
 21720                                  	;cmp	al,0Fh
 21721 000037AA 3C0F                    	CMP	AL,error_I24_wrong_disk
 21722 000037AC 7512                    	JNZ	short DO_ERR				; Nothing to do
 21723                                  
 21724                                  	; MSDOS 3.3
 21725                                  	;push	ds
 21726                                  	;push	si
 21727                                  	;lds	si,[ss:CALLVIDRW]
 21728                                  	;mov	[ss:EXTERRPT+2], ds
 21729                                  	;mov	[ss:EXTERRPT], si
 21730                                  	;pop	si
 21731                                  	;pop	ds
 21732                                  
 21733                                  	; MSDOS 6.0
 21734 000037AE 50                      	push	ax
 21735 000037AF 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21736 000037B3 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21737 000037B7 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21738 000037BB 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21739 000037BF 58                      	pop	ax
 21740                                  DO_ERR:
 21741                                  	;;call	HARDERR
 21742                                  	;;retn
 21743                                  	; 16/12/2022
 21744                                  	; 10/06/2019
 21745 000037C0 E9341B                  	jmp	HARDERR	
 21746                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21747                                  	;call	HARDERR
 21748                                  	;retn
 21749                                  
 21750                                  ; 24/07/2018 - Retro DOS v3.0
 21751                                  
 21752                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21753                                  ;----------------------------------------------------------------------------
 21754                                  ;
 21755                                  ; Procedure Name : SETUP
 21756                                  ;
 21757                                  ; Inputs:
 21758                                  ;	ES:DI point to SFT (value also in THISSFT)
 21759                                  ;	DMAAdd contains transfer address
 21760                                  ;	CX = Byte count
 21761                                  ;	DS = DOSDATA
 21762                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21763                                  ;		2nd of caller of caller.
 21764                                  ; Outputs:
 21765                                  ;	    CX = byte count
 21766                                  ;	    [THISDPB] = Base of drive parameters if file
 21767                                  ;		      = Pointer to device header if device or NET
 21768                                  ;	    ES:DI Points to SFT
 21769                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21770                                  ;	    [TRANS] = 0 (No transfers yet)
 21771                                  ;	    BytPos = Byte position in file
 21772                                  ;
 21773                                  ;	The following fields are relevant to local files (not devices) only:
 21774                                  ;
 21775                                  ;	    SecPos = Position of first sector (local files only)
 21776                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21777                                  ;	    [CLUSNUM] = First cluster (local files only)
 21778                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21779                                  ;	    [THISDRV] = Physical unit number (local files only)
 21780                                  ;
 21781                                  ;      RETURNS ONE LEVEL UP WITH:
 21782                                  ;	   CX = 0
 21783                                  ;	   CARRY = Clear
 21784                                  ;	IF AN ERROR IS DETECTED
 21785                                  ; All other registers destroyed
 21786                                  ;----------------------------------------------------------------------------
 21787                                  
 21788                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21789                                  
 21790                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21791                                  
 21792                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21793                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21794                                  
 21795                                  SETUP:
 21796                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21797                                  
 21798                                  	;lds 	si,[es:di+7]
 21799 000037C3 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21800                                  
 21801                                  ;hkn; SS override
 21802 000037C7 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21803                                  
 21804                                  ;hkn; SS is DOSDATA
 21805 000037CC 16                      	push	ss
 21806 000037CD 1F                      	pop	ds
 21807                                  
 21808 000037CE 8936[8A05]              	MOV	[THISDPB],SI
 21809                                  
 21810 000037D2 8B1E[2C03]              	MOV	BX,[DMAADD]
 21811 000037D6 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21812 000037DA C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21813                                  	;mov	ax,[es:di+15h]
 21814 000037DF 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21815                                  	;mov	dx,[es:di+17h]
 21816 000037E3 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21817 000037E7 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21818 000037EB A3[CE05]                	MOV	[BYTPOS],AX
 21819                                  	;test	word [es:di+5],8080h
 21820 000037EE 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21821 000037F4 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21822 000037F6 06                      	PUSH	ES
 21823 000037F7 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21824                                  
 21825                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21826                                  	;;mov	bl,[es:bp+0]
 21827                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21828                                  	; 05/12/2022
 21829 000037FB 268A5E00                	mov	bl,[es:bp]
 21830                                  	
 21831 000037FF 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21832                                  	;mov	bx,[es:bp+2]
 21833 00003803 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21834                                  
 21835                                  	;; MSDOS 3.3
 21836                                  	;cmp	dx,bx
 21837                                  	;jnb	short EOFERR
 21838                                  	;div	bx
 21839                                  	;mov	[SECPOS],ax
 21840                                  	;mov	[BYTSECPOS],dx
 21841                                  	;mov	dx,ax
 21842                                  	;;and	al,[es:bp+4]
 21843                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21844                                  	;mov	[SECCLUSPOS],al
 21845                                  	;mov	ax,cx
 21846                                  	;;mov	cl,[es:bp+5]
 21847                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21848                                  	;shr	dx,cl
 21849                                  	;mov	[CLUSNUM],dx
 21850                                  	;pop	es
 21851                                  	;mov	cx,ax
 21852                                  
 21853                                  	; 04/05/2019 - Retro DOS v4.0
 21854                                  
 21855                                  	; MSDOS 6.0
 21856                                  ;M039: Optimized this section.
 21857 00003807 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21858 00003808 E83405                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21859 0000380B 8916[CC05]              	MOV	[BYTSECPOS],DX
 21860 0000380F A3[C405]                	MOV	[SECPOS],AX
 21861 00003812 890E[C605]              	MOV	[SECPOS+2],CX
 21862 00003816 89CA                    	MOV	DX,CX
 21863                                  
 21864 00003818 89C3                    	MOV	BX,AX
 21865                                  	;and	bl,[es:bp+4]
 21866 0000381A 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21867 0000381E 881E[7305]              	MOV	[SECCLUSPOS],BL
 21868                                  
 21869 00003822 E84105                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21870 00003825 59                      	POP	CX			;CX = byte count.
 21871 00003826 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21872                                  	;cmp	ax,[es:bp+0Dh]
 21873 00003828 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21874 0000382C 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21875                                  
 21876 0000382E A3[BC05]                	MOV	[CLUSNUM],AX
 21877 00003831 07                      	POP	ES			; ES:DI point to SFT
 21878                                  ;M039
 21879                                  
 21880                                  NOSETSTUFF:
 21881 00003832 89C8                    	MOV	AX,CX		; AX = Byte count.
 21882 00003834 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21883 00003838 730C                    	JNC	short setup_OK	; Must be less than 64
 21884 0000383A A1[2C03]                	MOV	AX,[DMAADD]
 21885 0000383D F7D8                    	NEG	AX		; Amount of room left in segment (know
 21886                                  				;    less than 64K since max value of CX
 21887                                  				;    is FFFF).
 21888 0000383F 7501                    	JNZ	short NoDec
 21889 00003841 48                      	DEC	AX
 21890                                  NoDec:
 21891 00003842 89C1                    	MOV	CX,AX		; Can do this much
 21892 00003844 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21893                                  setup_OK:
 21894 00003846 C3                      	retn
 21895                                  
 21896                                  EOFERR:
 21897 00003847 07                      	POP	ES		; ES:DI point to SFT
 21898 00003848 31C9                    	XOR	CX,CX		; No bytes read
 21899                                  ;;;;;;;;;;; 7/18/86
 21900                                  	; MSDOS 3.3
 21901                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21902                                  ;;;;;;;;;;;
 21903                                  NOROOM:
 21904 0000384A 5B                      	POP	BX		; Kill return address
 21905 0000384B F8                      	CLC
 21906 0000384C C3                      	retn			; RETURN TO CALLER OF CALLER
 21907                                  
 21908                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21909                                  ;---------------------------------------------------------------------------
 21910                                  ;
 21911                                  ; Procedure Name : BREAKDOWN
 21912                                  ;
 21913                                  ; Inputs:
 21914                                  ;	CX = Length of disk transfer in bytes
 21915                                  ;	ES:BP = Base of drive parameters
 21916                                  ;	[BYTSECPOS] = Byte position within first sector
 21917                                  ;	DS = DOSDATA
 21918                                  ; Outputs:
 21919                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21920                                  ;	[SECCNT] = No. of whole sectors to transfer
 21921                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21922                                  ; AX, BX, DX destroyed. No other registers affected.
 21923                                  ;---------------------------------------------------------------------------
 21924                                  
 21925                                  BREAKDOWN:
 21926 0000384D A1[CC05]                	MOV	AX,[BYTSECPOS]
 21927 00003850 89CB                    	MOV	BX,CX
 21928 00003852 09C0                    	OR	AX,AX
 21929 00003854 740E                    	JZ	short SAVFIR	; Partial first sector?
 21930                                  	;sub	ax,[es:bp+2]
 21931 00003856 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21932 0000385A F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21933 0000385C 29C3                    	SUB	BX,AX		; Subtract from total length
 21934 0000385E 7304                    	JAE	short SAVFIR
 21935 00003860 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21936 00003862 31DB                    	XOR	BX,BX		; And no bytes are left
 21937                                  SAVFIR:
 21938 00003864 A3[D205]                	MOV	[BYTCNT1],AX
 21939 00003867 89D8                    	MOV	AX,BX
 21940 00003869 31D2                    	XOR	DX,DX
 21941                                  	;div	word [ES:BP+2]
 21942 0000386B 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21943 0000386F A3[D605]                	MOV	[SECCNT],AX
 21944 00003872 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21945                                  	; MSDOS 3.3
 21946                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21947                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21948                                  	;CMP	AX,1
 21949                                  	;retnz
 21950                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21951                                  	;MOV	[BYTCNT2],AX
 21952                                  	;MOV	[SECCNT],DX	; DX = 0
 21953                                  _RET45:
 21954 00003876 C3                      	retn
 21955                                  
 21956                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21957                                  
 21958                                  ;----------------------------------------------------------------------------
 21959                                  ;
 21960                                  ; Procedure Name : READ_LOCK_VIOLATION
 21961                                  ;
 21962                                  ; ES:DI points to SFT. This entry used by NET_READ
 21963                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21964                                  ; Else do retrys.
 21965                                  ; ES:DI,DS,CX preserved
 21966                                  ;
 21967                                  ;----------------------------------------------------------------------------
 21968                                  
 21969                                  READ_LOCK_VIOLATION:
 21970 00003877 C606[7505]00            	MOV	byte [READOP],0
 21971                                  ERR_ON_CHECK:
 21972                                  	;;test	word [es:di+2],8000h
 21973                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21974                                  	;JNZ	short HARD_ERR
 21975                                  
 21976                                  	; 04/05/2019
 21977                                  	;test	byte [es:di+3],80h
 21978 0000387C 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21979 00003881 7508                    	JNZ	short HARD_ERR
 21980                                  
 21981                                  	;PUSH	CX
 21982                                  	;;mov	cl,[es:di+2]
 21983                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21984                                  	;;and	cl,0F0h
 21985                                  	;AND	CL,SHARING_MASK
 21986                                  	;;cmp	cl,0
 21987                                  	;CMP	CL,SHARING_COMPAT
 21988                                  	;POP	CX
 21989                                  	;JNE	short NO_HARD_ERR
 21990                                  	; 21/09/2023
 21991 00003883 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 21992 00003887 24F0                    	and	al,SHARING_MASK
 21993                                  	;cmp	al,SHARING_COMPAT
 21994                                  	;jne	short NO_HARD_ERR
 21995 00003889 7505                    	jnz	short NO_HARD_ERR
 21996                                  HARD_ERR:
 21997 0000388B E8773A                  	call	LOCK_VIOLATION
 21998 0000388E 73E6                    	jnc	short _RET45		; User wants Retrys
 21999                                  NO_HARD_ERR:
 22000 00003890 31C9                    	XOR	CX,CX			;No bytes transferred
 22001                                  	;mov	ax,21h
 22002 00003892 B82100                  	MOV	AX,error_lock_violation
 22003 00003895 F9                      	STC
 22004 00003896 C3                      	retn
 22005                                  
 22006                                  ;----------------------------------------------------------------------------
 22007                                  ;
 22008                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22009                                  ;
 22010                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22011                                  ; This entry used by NET_WRITE
 22012                                  ;
 22013                                  ;----------------------------------------------------------------------------
 22014                                  
 22015                                  WRITE_LOCK_VIOLATION:
 22016 00003897 C606[7505]01            	MOV	byte [READOP],1
 22017 0000389C EBDE                    	JMP	short ERR_ON_CHECK
 22018                                  
 22019                                  ; 04/05/2019 - Retro DOS v4.0
 22020                                  
 22021                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22022                                  
 22023                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22024                                  ;----------------------------------------------------------------------------
 22025                                  ;
 22026                                  ; Procedure Name : DISKREAD
 22027                                  ;
 22028                                  ; Inputs:
 22029                                  ;	Outputs of SETUP
 22030                                  ; Function:
 22031                                  ;	Perform disk read
 22032                                  ; Outputs:
 22033                                  ;    Carry clear
 22034                                  ;	CX = No. of bytes read
 22035                                  ;	ES:DI point to SFT
 22036                                  ;	SFT offset and cluster pointers updated
 22037                                  ;    Carry set
 22038                                  ;	CX = 0
 22039                                  ;	ES:DI point to SFT
 22040                                  ;	AX has error code
 22041                                  ;----------------------------------------------------------------------------
 22042                                  
 22043                                  ;hkn; called from disk.asm. DS already set up.
 22044                                  
 22045                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22046                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22047                                  
 22048                                  DISKREAD:
 22049                                  	;mov	ax,[es:di+11h]
 22050 0000389E 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22051                                  	;mov	bx,[es:di+13h]
 22052 000038A2 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22053 000038A6 2B06[CE05]              	SUB	AX,[BYTPOS]
 22054 000038AA 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22055 000038AE 7226                    	JB	short RDERR		;Read starts past EOF
 22056 000038B0 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22057 000038B2 09C0                    	OR	AX,AX
 22058 000038B4 7420                    	JZ	short RDERR		;Read starts at EOF
 22059 000038B6 39C8                    	CMP	AX,CX
 22060 000038B8 7302                    	JAE	short ENUF		;I/O fits
 22061 000038BA 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22062                                  ENUF:
 22063                                  	; MSDOS 3.3
 22064                                  	;test	byte [es:di+4],8
 22065                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22066                                  	;jnz	short SET_ACC_ERR
 22067                                  	;call	LOCK_CHECK
 22068                                  	;jnb	short _READ_OK
 22069                                  	;call	READ_LOCK_VIOLATION
 22070                                  	;jnb	short ENUF
 22071                                  	;retn
 22072                                  
 22073                                  	; MSDOS 6.0
 22074 000038BC E87CFE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22075 000038BF 7301                    	JNC	short _READ_OK 		; There are no locks
 22076 000038C1 C3                      	retn
 22077                                  
 22078                                  _READ_OK:
 22079 000038C2 C42E[8A05]              	LES	BP,[THISDPB]
 22080 000038C6 E884FF                  	CALL	BREAKDOWN
 22081 000038C9 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 22082                                  
 22083 000038CD E87013                  	call	FNDCLUS
 22084                                       	; MSDOS 6.0			;M022 conditional removed here
 22085 000038D0 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22086                                  					; migrated from 330a - HKN
 22087 000038D2 09C9                    	OR	CX,CX
 22088 000038D4 7413                    	JZ	short SKIPERR
 22089                                  RDERR:
 22090 000038D6 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22091 000038D8 E92102                  	jmp	WRTERR22
 22092                                  
 22093                                  ;RDLASTJ: 
 22094                                  	;JMP	RDLAST                  ;M039
 22095                                  
 22096                                  SETSFTJ2: 
 22097 000038DB E99600                  	JMP	SETSFT
 22098                                  
 22099                                  CANOT_READ:
 22100                                  	; MSDOS 3.3
 22101                                  	;POP	CX		;M039.
 22102                                  	; MSDOS 3.3 & MSDOS 6.0
 22103 000038DE 59                      	POP	CX              ;Clean stack.
 22104 000038DF 5B                      	POP	BX
 22105                                  
 22106                                  	;entry	SET_ACC_ERR_DS
 22107                                  SET_ACC_ERR_DS:
 22108                                  
 22109                                  ;hkn; SS is DOSDATA
 22110                                  	;Context DS
 22111 000038E0 16                      	push	ss
 22112 000038E1 1F                      	pop	ds
 22113                                  
 22114                                  	;entry	SET_ACC_ERR
 22115                                  SET_ACC_ERR:
 22116 000038E2 31C9                    	XOR	CX,CX
 22117                                  	;mov	ax,5
 22118 000038E4 B80500                  	MOV	AX,error_access_denied
 22119 000038E7 F9                      	STC
 22120 000038E8 C3                      	retn
 22121                                  
 22122                                  SKIPERR:
 22123 000038E9 8916[BA05]              	MOV	[LASTPOS],DX
 22124 000038ED 891E[BC05]              	MOV	[CLUSNUM],BX
 22125 000038F1 833E[D205]00            	CMP	word [BYTCNT1],0
 22126 000038F6 7405                    	JZ	short RDMID
 22127                                  
 22128 000038F8 E8BB13                  	call	BUFRD
 22129 000038FB 72E3                    	JC	short SET_ACC_ERR_DS
 22130                                  
 22131                                  RDMID:
 22132 000038FD 833E[D605]00            	CMP	word [SECCNT],0
 22133                                  	;JZ	RDLAST ; 10/08/2018
 22134 00003902 7453                    	jz	short RDLAST
 22135                                  
 22136 00003904 E84414                  	call	NEXTSEC
 22137 00003907 72D2                    	JC	short SETSFTJ2
 22138                                  
 22139 00003909 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22140                                  ONSEC:
 22141 0000390E 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22142 00003912 8B0E[D605]              	MOV	CX,[SECCNT]
 22143 00003916 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22144                                  RDLP:
 22145 0000391A E85F14                  	call	OPTIMIZE
 22146 0000391D 72C1                    	JC	short SET_ACC_ERR_DS
 22147                                  
 22148 0000391F 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22149 00003920 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22150 00003921 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22151                                  	;mov	byte [ALLOWED],38h
 22152 00003922 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22153 00003927 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22154                                  
 22155 0000392B 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22156 0000392C 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22157                                  
 22158                                  	; 04/05/2019 - Retro DOS v4.0
 22159                                  
 22160                                  	; MSDOS 6.0
 22161 0000392D E80222                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22162                                  
 22163                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22164 00003930 E8CFFD                  	call	DREAD
 22165                                  
 22166                                  	; MSDOS 3.3 
 22167                                  	;pop	bx
 22168                                  	;pop	dx
 22169                                  	;jc	short CANOT_READ
 22170                                  	;add	bx,dx	; (bx = Extent end)
 22171                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22172                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22173                                  	;call	SETVISIT
 22174                                  	; ->***
 22175                                  ;M039
 22176                                  	; MSDOS 6.0 
 22177 00003933 59                      	pop	cx
 22178 00003934 5A                      	pop	dx
 22179 00003935 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22180 0000393A 72A2                    	jc	short CANOT_READ
 22181                                  
 22182 0000393C 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22183                                  
 22184                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22185                                  ;            sectors, also termed an "Extent".)
 22186                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22187                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22188                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22189                                  ;
 22190                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22191                                  ;	buffers must be "read" into the transfer memory block, so that the
 22192                                  ;       transfer memory reflects the most recent data.
 22193                                  
 22194 00003941 E85E00                  	call	DskRdBufScan
 22195                                  
 22196                                  	;Context DS
 22197 00003944 16                      	push	ss
 22198 00003945 1F                      	pop	ds
 22199                                          
 22200 00003946 59                      	pop	cx
 22201 00003947 5B                              pop	bx
 22202                                  
 22203                                  ;       CX = # of sector remaining.
 22204                                  ;       BX = Next physical cluster.
 22205                                  
 22206                                  ;M039
 22207                                  
 22208                                  ;;;;;;;;
 22209                                  ;	; 25/07/2018 - Retro DOS v3.0
 22210                                  ;	; ***->
 22211                                  ;	; MSDOS 3.3
 22212                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22213                                  ;bufq:
 22214                                  ;;	DX = Extent start.
 22215                                  ;;	BX = Extent end.
 22216                                  ;;	 AL = Drive #.
 22217                                  ;;     DS:DI-> 1st buffer in queue.
 22218                                  ;
 22219                                  ;	;or	byte [di+5],20h
 22220                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22221                                  ;	;cmp	al,[di+4]	
 22222                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22223                                  ;	jnz	short bufq3
 22224                                  ;	;cmp	[di+6],dx
 22225                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22226                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22227                                  ;	;cmp	[di+6],bx
 22228                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22229                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22230                                  ;	
 22231                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22232                                  ;
 22233                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22234                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22235                                  ;;      as MRU (Most Recently Used).
 22236                                  ;
 22237                                  ;	;test	byte [di+5],40h
 22238                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22239                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22240                                  ;	pop	ax ; transfer address
 22241                                  ;	push	ax
 22242                                  ;	push	di
 22243                                  ;	push	dx
 22244                                  ;	;sub	dx,[di+6]
 22245                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22246                                  ;	neg	dx
 22247                                  ;
 22248                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22249                                  ;;           block.
 22250                                  ;
 22251                                  ;	mov	si,di
 22252                                  ;	mov	di,ax
 22253                                  ;	mov	ax,dx
 22254                                  ;	;mov	cx,[es:bp+6]	
 22255                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22256                                  ;	mul	cx
 22257                                  ;	add	di,ax
 22258                                  ;
 22259                                  ;	lea	si,[si+16]
 22260                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22261                                  ;	shr	cx,1
 22262                                  ;	push	es
 22263                                  ;	mov	es,[SS:DMAADD+2]
 22264                                  ;
 22265                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22266                                  ;;      DS:SI-> Buffer sector data.
 22267                                  ;;      ES:DI-> Destination within Transfer memory block.
 22268                                  ;
 22269                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22270                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22271                                  ;	;rep	movsb                   ;Copy last byte.
 22272                                  ;	jnc	short bufq1
 22273                                  ;	movsb
 22274                                  ;bufq1:
 22275                                  ;	pop	es
 22276                                  ;	pop	dx
 22277                                  ;	pop	di
 22278                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22279                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22280                                  ;bufq2:
 22281                                  ;	call	SCANPLACE
 22282                                  ;bufq3:
 22283                                  ;	call	SKIPVISIT
 22284                                  ;	jnz	short bufq
 22285                                  ;	
 22286                                  ;	push	ss
 22287                                  ;	pop	ds
 22288                                  ;	pop	cx
 22289                                  ;	pop	cx
 22290                                  ;	pop	bx	
 22291                                  ;bufq4:
 22292                                  ;;;;;;;
 22293 00003948 E30D                    	JCXZ	RDLAST
 22294                                  
 22295 0000394A E8CD1B                  	call	IsEOF			; test for eof on fat size
 22296 0000394D 7325                    	JAE	short SETSFT
 22297                                  
 22298 0000394F B200                    	MOV	DL,0
 22299 00003951 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22300 00003955 EBC3                    	JMP	short RDLP ; 19/05/2019
 22301                                  
 22302                                  RDLAST:
 22303 00003957 A1[D405]                	MOV	AX,[BYTCNT2]
 22304 0000395A 09C0                    	OR	AX,AX
 22305 0000395C 7416                    	JZ	short SETSFT
 22306 0000395E A3[D205]                	MOV	[BYTCNT1],AX
 22307                                  
 22308 00003961 E8E713                  	call	NEXTSEC
 22309 00003964 720E                    	JC	short SETSFT
 22310                                  
 22311 00003966 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22312 0000396C E84713                  	call	BUFRD
 22313                                  	; 10/08/2018
 22314                                  
 22315 0000396F 7303                    	JNC	short SETSFT
 22316 00003971 E96CFF                  	JMP	SET_ACC_ERR_DS
 22317                                  
 22318                                  ;------------------------------------------------------------------------------
 22319                                  ;
 22320                                  ; Procedure Name : SETSFT
 22321                                  ; Inputs:
 22322                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22323                                  ;		and set cluster fields
 22324                                  ; Function:
 22325                                  ;	Update [THISSFT] based on the transfer
 22326                                  ; Outputs:
 22327                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22328                                  ;	ES:DI points to [THISSFT]
 22329                                  ;	CX No. of bytes transferred
 22330                                  ;	Carry clear
 22331                                  ;
 22332                                  ;----------------------------------------------------------------------------
 22333                                  
 22334                                  	;entry	SETSFT
 22335                                  
 22336                                  ; 26/07/2018 - Retro DOS v3.0
 22337                                  SETSFT:
 22338 00003974 C43E[9E05]              	LES	DI,[THISSFT]
 22339                                  
 22340                                  ; Same as SETSFT except ES:DI already points to SFT
 22341                                  	;entry	SETCLUS
 22342                                  SETCLUS:	
 22343 00003978 8B0E[B805]              	MOV	CX,[NEXTADD]
 22344 0000397C 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22345                                  	;;test	word [es:di+5],80h
 22346                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22347                                  	;JNZ	short ADDREC		; don't set clusters if device
 22348                                  
 22349                                  	; 04/05/2019 - Retro DOS v4.0
 22350                                  	;test	byte [es:di+5],80h
 22351 00003980 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22352 00003985 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22353                                  
 22354 00003987 A1[BC05]                	MOV	AX,[CLUSNUM]
 22355                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22356                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22357 0000398A 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22358 0000398E A1[BA05]                	MOV	AX,[LASTPOS]
 22359                                  	;mov	[es:di+19h],ax
 22360 00003991 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22361                                  
 22362                                  ;----------------------------------------------------------------------------
 22363                                  ;
 22364                                  ; Procedure : AddRec
 22365                                  ; Inputs:
 22366                                  ;	ES:DI points to SFT
 22367                                  ;	CX is No. Bytes transferred
 22368                                  ; Function:
 22369                                  ;	Update the SFT offset based on the transfer
 22370                                  ; Outputs:
 22371                                  ;	sf_position updated to point to first byte after transfer
 22372                                  ;	ES:DI points to SFT
 22373                                  ;	CX No. of bytes transferred
 22374                                  ;	Carry clear
 22375                                  ;----------------------------------------------------------------------------
 22376                                  
 22377                                  	;entry	AddRec
 22378                                  ADDREC:
 22379 00003995 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22380                                  	;add	[es:di+15h],cx
 22381 00003997 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22382                                  	;adc	word [es:di+17h], 0
 22383 0000399B 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22384                                  RET28:	
 22385 000039A0 F8                      	CLC
 22386 000039A1 C3                      	retn
 22387                                  
 22388                                  ; 25/07/2018
 22389                                  ; MSDOS 6.0
 22390                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22391                                  ;----------------------------------------------------------------------------
 22392                                  ;
 22393                                  ; Procedure Name : DskRdBufScan
 22394                                  ;
 22395                                  ; Inputs:
 22396                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22397                                  ;            sectors, also termed an "Extent".)
 22398                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22399                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22400                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22401                                  ;
 22402                                  ; Function:
 22403                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22404                                  ;	"read" into the transfer memory block, so that the transfer memory
 22405                                  ;	reflects the most recent data.
 22406                                  ;
 22407                                  ; Outputs:
 22408                                  ;       Transfer memory updated as required.
 22409                                  ;
 22410                                  ; Uses:
 22411                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22412                                  ;       SS override for all global variables.
 22413                                  ;
 22414                                  ; Notes:
 22415                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22416                                  ;	than the FIRST.
 22417                                  ;----------------------------------------------------------------------------
 22418                                  ;M039: Created
 22419                                  
 22420                                  ; 04/05/2019 - Retro DOS v4.0
 22421                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22422                                  
 22423                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22424                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22425                                  
 22426                                  ;procedure DskRdBufScan,NEAR
 22427                                  ;
 22428                                  ;ASSUME  DS:NOTHING
 22429                                  
 22430                                  DskRdBufScan:
 22431 000039A2 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22432 000039A8 743C                    	je	short bufx		     ; -no, skip all work.
 22433                                  
 22434 000039AA 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22435 000039AF 89DE                    	mov     si,bx
 22436 000039B1 01D1                    	add     cx,dx
 22437 000039B3 83D600                  	adc     si,0
 22438                                  
 22439 000039B6 E8111F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22440                                  	;mov	ax,[di+2]
 22441 000039B9 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22442 000039BC 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22443                                  		
 22444                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22445                                  	;;mov	al,[es:bp+0]
 22446                                  	;mov	al,[es:bp+DPB.DRIVE]
 22447                                  	; 15/12/2022
 22448 000039C0 268A4600                	mov	al,[es:bp]
 22449                                  
 22450                                  ;       BX:DX = Extent start.
 22451                                  ;       SI:CX = Extent end + 1.
 22452                                  ;          AL = Drive #.
 22453                                  ;       DS:DI-> 1st buffer in queue.
 22454                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22455                                  
 22456                                  bufq:	
 22457                                  	;cmp	al,[di+4]
 22458 000039C4 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22459 000039C7 7514                    	jne	short bufq1        	;  -no, jump.
 22460                                  
 22461                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22462                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22463                                  
 22464                                  	;cmp	bx,[di+8]
 22465 000039C9 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22466 000039CC 7503                    	jne	short bufq01
 22467                                  	;cmp	dx,[di+6]
 22468 000039CE 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22469                                  bufq01:
 22470 000039D1 770A                    	ja	short bufq1
 22471                                  
 22472                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22473                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22474                                  
 22475                                  	;cmp	si,[di+8]
 22476 000039D3 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22477 000039D6 7503                    	jne	short bufq02
 22478                                  	;cmp	cx,[di+6]
 22479 000039D8 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22480                                  bufq02:
 22481 000039DB 770A                    	ja	short bufq2
 22482                                  bufq1:	
 22483 000039DD 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22484 000039E2 8B3D                    	mov	di,[di]
 22485                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22486 000039E4 75DE                    	jne	short bufq		; -no, do next buffer
 22487                                  bufx:
 22488 000039E6 C3                      	retn				;Exit.
 22489                                  
 22490                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22491                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22492                                  ;       as MRU (Most Recently Used).
 22493                                  
 22494                                  bufq2:	
 22495 000039E7 50                      	push	ax
 22496                                  	;test	byte [di+5],40h
 22497 000039E8 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22498 000039EC 742D                    	jz	short bufq3                    ; -no, jump.
 22499                                  
 22500                                  ;       SaveReg <cx,dx,si,di,es>
 22501 000039EE 51                      	push	cx
 22502 000039EF 52                      	push	dx
 22503 000039F0 56                      	push	si
 22504 000039F1 57                      	push	di
 22505 000039F2 06                      	push	es
 22506                                  
 22507 000039F3 89D0                    	mov     ax,dx
 22508                                  	;sub	ax,[di+6]
 22509 000039F5 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22510 000039F8 F7D8                    	neg	ax
 22511                                  
 22512                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22513                                  ;            block. (Note: the upper word of the sector # may be ignored
 22514                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22515                                  ;            is imposed by the input parameters of the disk read operation.)
 22516                                  
 22517                                  	;lea	si,[di+20]
 22518 000039FA 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22519                                  	;mov	cx,[es:bp+2]
 22520 000039FD 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22521 00003A01 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22522 00003A03 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22523 00003A08 01C7                    	add	di,ax
 22524 00003A0A 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22525 00003A0F D1E9                    	shr	cx,1
 22526                                  
 22527                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22528                                  ;       DS:SI-> Buffer sector data.
 22529                                  ;       ES:DI-> Destination within Transfer memory block.
 22530                                  
 22531 00003A11 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22532                                  	;; 04/05/2019
 22533                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22534                                  	;;rep	movsb                   ;Copy last byte.
 22535                                  	;jnc	short bufq03	
 22536                                  	;movsb
 22537                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22538                                  	;adc	cx,0
 22539                                  	;rep	movsb
 22540                                  	; 22/09/2023
 22541 00003A13 7301                    	jnc	short bufq03
 22542 00003A15 A4                      	movsb
 22543                                  bufq03:
 22544                                  	;RestoreReg <es,di,si,dx,cx>
 22545 00003A16 07                      	pop	es
 22546 00003A17 5F                      	pop	di
 22547 00003A18 5E                      	pop	si
 22548 00003A19 5A                      	pop	dx
 22549 00003A1A 59                      	pop	cx
 22550                                  
 22551                                  ;       DS:DI -> current buffer.
 22552                                  bufq3:	
 22553 00003A1B 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22554                                          ;invoke SCANPLACE
 22555 00003A1D E8BC1E                  	call	SCANPLACE
 22556 00003A20 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22557 00003A25 58                      	pop	ax
 22558                                  	;jne	short bufq		; -no, jump.
 22559                                  	;;jmp	short bufx		; -yes, exit.
 22560                                  	;; 12/06/2019
 22561                                  	;retn
 22562                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22563 00003A26 759C                    	jne	short bufq
 22564 00003A28 EBBC                    	jmp	short bufx
 22565                                  
 22566                                  ;EndProc DskRdBufScan
 22567                                  
 22568                                  ;============================================================================
 22569                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22570                                  ;============================================================================
 22571                                  ; 04/05/2019 - Retro DOS v4.0
 22572                                  ; 24/07/2018 - Retro DOS v3.0
 22573                                  
 22574                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22575                                  ;----------------------------------------------------------------------------
 22576                                  ;
 22577                                  ; Procedure Name : DISKWRITE
 22578                                  ;
 22579                                  ; Inputs:
 22580                                  ;       Outputs of SETUP
 22581                                  ; Function:
 22582                                  ;       Perform disk write
 22583                                  ; Outputs:
 22584                                  ;    Carry clear
 22585                                  ;       CX = No. of bytes written
 22586                                  ;       ES:DI point to SFT
 22587                                  ;       SFT offset and cluster pointers updated
 22588                                  ;    Carry set
 22589                                  ;       CX = 0
 22590                                  ;       ES:DI point to SFT
 22591                                  ;       AX has error code
 22592                                  ;----------------------------------------------------------------------------
 22593                                  
 22594                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22595                                  
 22596                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22597                                  
 22598                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22599                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22600                                  
 22601                                  DISKWRITE:
 22602                                  	; MSDOS 3.3
 22603                                  	; IBMDOS.COM - Offset 436Dh
 22604                                  	;;test	byte [es:di+4],8
 22605                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22606                                  	;jz	short write_cont
 22607                                  	;jmp	SET_ACC_ERR_DS
 22608                                  ;write_cont:
 22609                                  	;push	cx
 22610                                  	;or	cx,cx
 22611                                  	;jnz	short Not_Truncate
 22612                                  	;;mov	cx,-1
 22613                                  	;dec	cx
 22614                                  ;Not_Truncate:
 22615                                  	;call	LOCK_CHECK
 22616                                  	;pop	cx
 22617                                  	;jnb	short _WRITE_OK
 22618                                  	;call	WRITE_LOCK_VIOLATION
 22619                                  	;jnb	short DISKWRITE
 22620                                  	;retn
 22621                                  
 22622                                  	; MSDOS 6.0
 22623 00003A2A E8F0FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22624                                  	; 19/08/2018
 22625 00003A2D 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22626 00003A2F C3                      	retn
 22627                                  
 22628                                  WRTEOFJ:
 22629 00003A30 E9DC01                  	JMP     WRTEOF
 22630                                  
 22631                                  _WRITE_OK:
 22632                                   	; 27/07/2018
 22633                                  	; IBMDOS.COM - Offset 438Eh
 22634                                  	
 22635                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22636                                  	;and	word [es:di+5],0BFBFh
 22637 00003A33 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22638                                  				; Mark file as dirty, clear no date on close
 22639                                  
 22640                                  	; 04/05/2019 - Retro DOS v4.0	
 22641                                  
 22642                                  	; MSDOS 6.0
 22643                                  	; mov 	ax,[es:di+11h]
 22644 00003A39 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22645 00003A3D A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22646                                  	;mov	ax,[es:di+13h]
 22647 00003A40 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22648 00003A44 A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22649                                  
 22650                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22651                                  
 22652                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22653 00003A47 C42E[8A05]              	LES     BP,[THISDPB]
 22654                                  
 22655 00003A4B E8FFFD                  	call	BREAKDOWN
 22656                                  
 22657 00003A4E A1[CE05]                	MOV     AX,[BYTPOS]
 22658 00003A51 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22659 00003A55 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22660 00003A57 01C8                    	ADD     AX,CX
 22661 00003A59 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22662                                  
 22663                                  	;mov	bx,[es:bp+2]
 22664 00003A5C 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22665                                  
 22666                                  	; MSDOS 3.3
 22667                                  	;cmp	dx,bx
 22668                                  	;jnb	short WRTERR33
 22669                                  	;div	bx
 22670                                  	;mov	bx,ax
 22671                                  	;OR	DX,DX
 22672                                  	;JNZ	short CALCLUS
 22673                                  	;dec	ax
 22674                                  ;CALCLUS:
 22675                                  	; MSDOS 3.3
 22676                                  	;mov	cl,[es:bp+5]
 22677                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22678                                  	;shr	ax,cl
 22679                                  	;push	ax
 22680                                  	;push	dx
 22681                                  	;push	es
 22682                                  	;les	di,[THISSFT]
 22683                                  	;;mov	ax,[es:di+11h]
 22684                                  	;;mov	dx,[es:di+13h]
 22685                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22686                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22687                                  	;pop	es
 22688                                  	;;DX:AX = current file size (in bytes).
 22689                                  	;;div	word [es:bp+2]
 22690                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22691                                  	;mov	cx,ax
 22692                                  	;or	dx,dx
 22693                                  	;jz	short NORND
 22694                                  	;inc	ax
 22695                                  ;NORND:
 22696                                  	; MSDOS 6.0
 22697 00003A60 E8DC02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22698 00003A63 89C6                    	MOV	SI,AX
 22699 00003A65 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22700                                  
 22701                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22702                                  
 22703 00003A69 09D2                    	OR	DX,DX
 22704 00003A6B 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22705 00003A6C 89CA                    	MOV	DX,CX			;M039
 22706 00003A6E 7506                    	JNZ	short CALCLUS
 22707 00003A70 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22708 00003A73 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22709                                  
 22710                                  CALCLUS:
 22711                                  	; MSDOS 6.0
 22712 00003A76 E8ED02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22713 00003A79 5A                      	POP	DX
 22714                                  
 22715                                  ;       AX = Last cluster to write.
 22716                                  ;       DX = # of bytes in last sector to write (the "tail").
 22717                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22718                                  
 22719 00003A7A 50                      	PUSH	AX
 22720 00003A7B 52                      	PUSH	DX
 22721                                  ;M039
 22722 00003A7C 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22723 00003A80 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22724 00003A83 E8B902                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22725 00003A86 890E[0E06]              	mov	[TEMP_VAR2],cx
 22726 00003A8A 890E[CA05]              	mov	[VALSEC+2],cx
 22727 00003A8E 89C1                    	mov	cx,ax
 22728 00003A90 89F3                    	mov	bx,si
 22729                                  
 22730                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22731                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22732                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22733                                  ;                     DX = # of bytes in last sector of current file.
 22734                                  ;M039
 22735 00003A92 09D2                    	OR	DX,DX
 22736 00003A94 7407                    	JZ	short NORND
 22737                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 22738                                  	;ADC	word [VALSEC+2],0
 22739                                  	; 22/09/2023
 22740 00003A96 40                      	inc	ax  ; 0FFFFh -> 0
 22741 00003A97 7504                    	jnz	short NORND
 22742 00003A99 FF06[CA05]              	inc	word [VALSEC+2]
 22743                                  NORND:	
 22744                                  	; MSDOS 3.3 & MSDOS 6.0
 22745 00003A9D A3[C805]                	MOV     [VALSEC],AX
 22746                                  
 22747                                  ;       [VALSEC] = Last sector of current file.
 22748                                  
 22749 00003AA0 31C0                    	XOR     AX,AX
 22750 00003AA2 A3[DE05]                	MOV     [GROWCNT],AX
 22751 00003AA5 A3[E005]                	MOV     [GROWCNT+2],AX
 22752 00003AA8 58                      	POP     AX
 22753                                  
 22754                                  	; MSDOS 6.0
 22755 00003AA9 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22756 00003AAD 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22757 00003AB1 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22758 00003AB3 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22759 00003AB5 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22760 00003AB7 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22761 00003ABB EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22762                                  lowsec:
 22763                                  	;MOV	DI,0			;F.C. >32mb
 22764                                  	; 22/09/2023
 22765 00003ABD 31FF                    	xor	di,di
 22766                                  	; MSDOS 3.3 & MSDOS 6.0
 22767 00003ABF 29CB                    	SUB	BX,CX			; Number of full sectors
 22768 00003AC1 7253                    	JB	short NOGROW
 22769 00003AC3 7444                    	JZ	short TESTTAIL
 22770                                  yesgrow:
 22771                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22772 00003AC5 89D1                    	MOV     CX,DX
 22773 00003AC7 93                      	XCHG    AX,BX
 22774                                  	;mul	word [es:bp+2]
 22775 00003AC8 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22776                                  	
 22777                                  	; MSDOS 6.0
 22778 00003ACC 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22779 00003AD0 A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22780 00003AD3 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22781                                  	;mul	word [es:bp+2]
 22782 00003AD5 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22783                                  	
 22784 00003AD9 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22785 00003ADD 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22786 00003ADF A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22787                                  
 22788                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22789 00003AE2 29C8                    	SUB     AX,CX			; Take off current "tail"
 22790 00003AE4 83DA00                  	SBB     DX,0			; 32-bit extension
 22791 00003AE7 01D8                    	ADD     AX,BX			; Add on new "tail"
 22792 00003AE9 83D200                  	ADC     DX,0			; ripple tim's head off
 22793 00003AEC EB21                    	JMP     SHORT SETGRW
 22794                                  
 22795                                  HAVSTART:
 22796                                  	;int 3
 22797 00003AEE 89C1                    	MOV     CX,AX
 22798 00003AF0 E86D11                  	call	SKPCLP
 22799                                  	;JCXZ	DOWRTJ
 22800                                  	; 16/12/2022
 22801 00003AF3 E357                    	jcxz	DOWRT
 22802                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22803                                  	;jcxz	DOWRTJ
 22804                                  
 22805 00003AF5 E80F13                  	call	ALLOCATE
 22806                                  	;JNC	short DOWRTJ
 22807                                  	; 16/12/2022
 22808 00003AF8 7352                    	jnc	short DOWRT
 22809                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22810                                  	;jnc	short DOWRTJ
 22811                                  
 22812                                  	;entry   WRTERR
 22813                                  WRTERR:
 22814 00003AFA B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22815                                  
 22816                                  	;entry WRTERR22
 22817                                  WRTERR22:
 22818 00003AFC A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22819                                  
 22820                                  	; 27/07/2018
 22821                                  WRTERR33:
 22822                                  	;MOV	CX,0			;No bytes transferred
 22823 00003AFF 31C9                    	XOR     CX,CX
 22824                                  					
 22825 00003B01 C43E[9E05]              	LES     DI,[THISSFT]
 22826                                  	;CLC ; 19/05/2019
 22827                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22828                                  	; 16/12/2022
 22829                                  	;clc
 22830 00003B05 C3                      	retn
 22831                                  
 22832                                  	; 16/12/2022
 22833                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22834                                  ;DOWRTJ:
 22835                                  	;JMP	short DOWRT
 22836                                  
 22837                                  ACC_ERRWJ:
 22838                                  	; 10/08/2018
 22839                                  	;JMP	SET_ACC_ERRW
 22840                                  	; 16/12/2022
 22841 00003B06 E9D7FD                  	jmp	SET_ACC_ERR_DS
 22842                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22843                                  	;jmp	SET_ACC_ERRW	
 22844                                  
 22845                                  TESTTAIL:
 22846 00003B09 29D0                    	SUB     AX,DX
 22847 00003B0B 7609                    	JBE	short NOGROW
 22848 00003B0D 31D2                    	XOR     DX,DX
 22849                                  SETGRW:
 22850 00003B0F A3[DE05]                	MOV	[GROWCNT],AX
 22851 00003B12 8916[E005]              	MOV	[GROWCNT+2],DX
 22852                                  NOGROW:
 22853 00003B16 58                      	POP     AX
 22854 00003B17 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22855 00003B1B E82211                  	call	FNDCLUS
 22856 00003B1E 72E6                    	JC	short ACC_ERRWJ
 22857 00003B20 891E[BC05]              	MOV     [CLUSNUM],BX
 22858 00003B24 8916[BA05]              	MOV     [LASTPOS],DX
 22859                                  
 22860 00003B28 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22861 00003B2A 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22862 00003B2C E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22863 00003B2E 51                      	PUSH    CX              ; No. of clusters short of first
 22864 00003B2F 89C1                    	MOV     CX,AX
 22865 00003B31 E8D312                  	call	ALLOCATE
 22866 00003B34 59                      	POP     CX
 22867 00003B35 72C3                    	JC	short WRTERR
 22868 00003B37 8B16[BA05]              	MOV     DX,[LASTPOS]
 22869 00003B3B 42                      	INC     DX
 22870 00003B3C 49                      	DEC     CX
 22871 00003B3D 7405                    	JZ	short NOSKIP
 22872 00003B3F E81E11                  	call	SKPCLP
 22873 00003B42 72C2                    	JC	short ACC_ERRWJ
 22874                                  NOSKIP:
 22875 00003B44 891E[BC05]              	MOV     [CLUSNUM],BX
 22876 00003B48 8916[BA05]              	MOV     [LASTPOS],DX
 22877                                  DOWRT:
 22878 00003B4C 833E[D205]00            	CMP     word [BYTCNT1],0
 22879 00003B51 7409                    	JZ	short WRTMID
 22880 00003B53 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22881 00003B57 E89511                  	call	BUFWRT
 22882 00003B5A 72AA                    	JC	short ACC_ERRWJ
 22883                                  WRTMID:
 22884 00003B5C A1[D605]                	MOV     AX,[SECCNT]
 22885 00003B5F 09C0                    	OR      AX,AX
 22886                                  	; 20/11/2022
 22887 00003B61 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22888 00003B63 0106[C405]              	ADD     [SECPOS],AX
 22889                                  	; 19/05/2019
 22890                                  	; MSDOS 6.0
 22891 00003B67 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22892 00003B6C E8DC11                  	call	NEXTSEC
 22893                                  	; 16/12/2022
 22894 00003B6F 7295                    	JC	short ACC_ERRWJ
 22895                                  	;JC	short SET_ACC_ERRW	;M039
 22896 00003B71 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22897 00003B76 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22898 00003B7A 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22899 00003B7E 8B0E[D605]              	MOV     CX,[SECCNT]
 22900                                  WRTLP:
 22901 00003B82 E8F711                  	call	OPTIMIZE
 22902 00003B85 7248                    	JC	short SET_ACC_ERRW
 22903                                  	; 16/12/2022
 22904                                  	;JC	short ACC_ERRWJ
 22905                                  
 22906                                  ;M039
 22907                                  ;       DI = Next physical cluster.
 22908                                  ;       AX = # sectors remaining.
 22909                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22910                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22911                                  ;	     sectors, also termed an "Extent".)
 22912                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22913                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22914                                  ;
 22915                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22916                                  ;	are in Extent; they are being over-written.
 22917                                  
 22918 00003B87 57                      	push    di
 22919 00003B88 50                      	push    ax
 22920                                  
 22921                                  	; MSDOS 3.3
 22922                                  	; IBMDOS.COM (1987) - Offset 4497h
 22923                                  	;push	dx
 22924                                  	;push	bx
 22925                                  	;mov	al,[es:bp]
 22926                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22927                                  	;mov	bx,cx
 22928                                  	;add	bx,dx	; (bx = Extent end)
 22929                                  
 22930                                  ;	DX = Extent start.
 22931                                  ;	BX = Extent end.
 22932                                  ;	AL = Drive #.
 22933                                  
 22934                                  	;call	SETVISIT
 22935                                  
 22936                                  ;wbufq1:
 22937                                  	;;or	byte [di+5],20h
 22938                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22939                                  	;;cmp	al,[di+4]	
 22940                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22941                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22942                                  	;;cmp	[di+6],dx
 22943                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22944                                  	;jb	short wbufq2
 22945                                  	;;cmp	[di+6],bx
 22946                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22947                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22948                                  
 22949                                  	;; Buffer sector is in the Extent
 22950                                  
 22951                                  	;;mov	word [di+4],20FFh
 22952                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22953                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22954                                  	;				; .buf_flags, AH = 0, reset/clear
 22955                                  	;call	SCANPLACE
 22956                                  ;wbufq2:
 22957                                  	;call	SKIPVISIT
 22958                                  	;jnz	short wbufq1
 22959                                  	;pop	bx
 22960                                  	;pop	dx
 22961                                  
 22962                                          ; MSDOS 6.0
 22963 00003B89 E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22964                                  
 22965                                  ;ASSUME DS:NOTHING
 22966                                  ;M039
 22967                                  	; MSDOS 3.3 & MSDOS 6.0
 22968                                  ;hkn; SS override for DMAADD and ALLOWED
 22969 00003B8C 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22970                                  	;mov	byte [ss:ALLOWED],38h
 22971 00003B91 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22972                                  
 22973                                  ;	put logic from DWRITE in-line here so we can modify it
 22974                                  ;	for DISK FULL conditions.
 22975                                  
 22976                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22977                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22978                                  
 22979                                  	; 16/12/2022
 22980                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22981                                  	;call	DWRITE
 22982                                  
 22983                                  ;DWRITE_OKAY:
 22984                                  
 22985                                  	; 16/12/2022
 22986                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22987                                  	;pop     cx
 22988                                  	;pop     bx
 22989                                  	;push    ss
 22990                                  	;pop     ds
 22991                                  	;jc      short SET_ACC_ERRW
 22992                                  	;jcxz    WRTLAST
 22993                                  	;mov     dl, 0
 22994                                  	;inc     word [LASTPOS]
 22995                                  	;jmp     short WRTLP
 22996                                  
 22997                                  	; 16/12/2022
 22998                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22999                                  DWRITE_LUP:
 23000                                  	; 23/07/2019 - Retro DOS v3.2
 23001                                  
 23002                                  	; MSDOS 6.0
 23003 00003B97 E8E1FB                  	call	DSKWRITE
 23004 00003B9A 7417                    	jz	short DWRITE_OKAY
 23005                                  
 23006                                  ;;	int	3
 23007                                  
 23008 00003B9C 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23009 00003B9E 7423                    	jz	short DWRITE_DISK_FULL
 23010                                  
 23011                                  	; 16/12/2022
 23012                                  
 23013                                  ;;hkn; SS override
 23014 00003BA0 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23015 00003BA6 E801FC                  	call	HARDERRRW
 23016 00003BA9 3C01                    	CMP	AL,1		; Check for retry
 23017 00003BAB 74EA                    	JZ	short DWRITE_LUP
 23018                                  
 23019                                  	; 16/12/2022
 23020                                  	; 23/07/2019
 23021                                  	;POP	CX ; *4*
 23022                                  	;POP	BX ; *5*
 23023                                  	;
 23024                                  	;push	ss
 23025                                  	;pop	ds
 23026                                  	;
 23027                                  
 23028                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23029                                  
 23030                                  	; 16/12/2022
 23031 00003BAD 3C03                    	CMP	AL,3		; Check for FAIL
 23032 00003BAF F8                      	CLC
 23033 00003BB0 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23034 00003BB2 F9                      	STC
 23035                                  
 23036                                  DWRITE_OKAY:
 23037                                  	; 16/12/2022
 23038                                  	; 23/07/2019
 23039                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23040 00003BB3 59                      	POP	CX ; *4*
 23041 00003BB4 5B                      	POP	BX ; *5*
 23042                                  
 23043                                  ;       CX = # sectors remaining.
 23044                                  ;       BX = Next physical cluster.
 23045                                  
 23046                                  ;hkn; SS override
 23047                                          ;Context DS
 23048                                  	; 16/12/2022
 23049                                  	;push	ss
 23050                                  	;pop	ds
 23051                                  
 23052                                  	; 16/12/2022
 23053 00003BB5 7218                    	jc	short SET_ACC_ERRW
 23054                                  
 23055                                  	; 16/12/2022
 23056 00003BB7 16                      	push	ss
 23057 00003BB8 1F                      	pop	ds
 23058                                  
 23059 00003BB9 E317                    	JCXZ    WRTLAST
 23060                                  
 23061                                  	;MOV	DL,0
 23062 00003BBB 30D2                    	xor	dl,dl ; 23/07/2019
 23063 00003BBD FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23064 00003BC1 EBBF                    	JMP     short WRTLP
 23065                                  
 23066                                  	; 23/07/2019 - Retro DOS v3.2
 23067                                  	; 09/08/2018
 23068                                  	; MSDOS 6.0
 23069                                  DWRITE_DISK_FULL:
 23070                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23071                                  	; 16/12/2022
 23072 00003BC3 16                      	push	ss
 23073 00003BC4 1F                      	pop	ds
 23074 00003BC5 59                      	pop	cx		; unjunk stack
 23075 00003BC6 5B                      	pop	bx
 23076 00003BC7 C606[0B06]01            	mov	byte [DISK_FULL],1
 23077                                  	;stc
 23078 00003BCC E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23079                                  
 23080                                  	; 16/12/2022
 23081                                  SET_ACC_ERRW:
 23082 00003BCF E90EFD                  	jmp	SET_ACC_ERR_DS
 23083                                  
 23084                                  WRTLAST:
 23085 00003BD2 A1[D405]                	MOV     AX,[BYTCNT2]
 23086 00003BD5 09C0                    	OR      AX,AX
 23087 00003BD7 7413                    	JZ	short FINWRT
 23088 00003BD9 A3[D205]                	MOV     [BYTCNT1],AX
 23089 00003BDC E86C11                  	call	NEXTSEC
 23090 00003BDF 72EE                    	JC	short SET_ACC_ERRW
 23091 00003BE1 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23092 00003BE7 E80511                  	call	BUFWRT
 23093 00003BEA 72E3                    	JC	short SET_ACC_ERRW
 23094                                  FINWRT:
 23095 00003BEC C43E[9E05]              	LES     DI,[THISSFT]
 23096 00003BF0 A1[DE05]                	MOV     AX,[GROWCNT]
 23097 00003BF3 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23098 00003BF7 09C0                    	OR      AX,AX
 23099 00003BF9 7502                    	JNZ	short UPDATE_size
 23100 00003BFB E30F                    	JCXZ    SAMSIZ
 23101                                  UPDATE_size:
 23102                                  	;add	[es:di+11h],ax
 23103 00003BFD 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23104                                  	;adc	[es:di+13h],cx
 23105 00003C01 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23106                                  
 23107                                  ; Make sure that all other SFT's see this growth also.
 23108                                  
 23109 00003C05 B80100                  	MOV     AX,1
 23110                                  ;if installed
 23111                                  	;Call	JShare + 14 * 4
 23112 00003C08 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23113                                  ;else
 23114                                  ;	Call    ShSU
 23115                                  ;endif
 23116                                  
 23117                                  SAMSIZ:
 23118 00003C0C E969FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23119                                  
 23120                                  	; 16/12/2022
 23121                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23122                                  ;SET_ACC_ERRW:
 23123                                  	;jmp	SET_ACC_ERR_DS
 23124                                  
 23125                                  WRTEOF:
 23126 00003C0F 89C1                    	MOV     CX,AX
 23127 00003C11 09D1                    	OR      CX,DX
 23128 00003C13 746C                    	JZ	short KILLFIL
 23129 00003C15 83E801                  	SUB     AX,1
 23130 00003C18 83DA00                  	SBB     DX,0
 23131                                  
 23132                                  	; MSDOS 3.3
 23133                                  	;;div	word [es:bp+2]
 23134                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23135                                  	;;mov	cl,[es:bp+5]
 23136                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 23137                                  	;shr	ax,cl
 23138                                  
 23139                                  	; MSDOS 6.0
 23140 00003C1B 53                      	PUSH	BX
 23141                                  	;mov	bx,[es:bp+2]
 23142 00003C1C 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23143 00003C20 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23144 00003C23 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23145 00003C24 89CA                    	MOV	DX,CX			      ;M039
 23146 00003C26 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23147 00003C2A E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23148                                  
 23149 00003C2D 89C1                    	MOV     CX,AX
 23150 00003C2F E80E10                  	call	FNDCLUS
 23151                                  SET_ACC_ERRWJ2:
 23152 00003C32 729B                    	JC	short SET_ACC_ERRW
 23153                                  
 23154 00003C34 E326                    	JCXZ    RELFILE
 23155 00003C36 E8CE11                  	call	ALLOCATE
 23156                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23157                                  	; 16/12/2022
 23158 00003C39 7303                    	jnc	short UPDATE
 23159 00003C3B E9BCFE                  	JMP	WRTERR
 23160                                  UPDATE:
 23161 00003C3E C43E[9E05]              	LES	DI,[THISSFT]
 23162 00003C42 A1[CE05]                	MOV	AX,[BYTPOS]
 23163                                  	;mov	[es:di+11h],ax
 23164 00003C45 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23165 00003C49 A1[D005]                	MOV	AX,[BYTPOS+2]
 23166                                  	;mov	[es:di+13h],ax
 23167 00003C4C 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23168                                  ;
 23169                                  ; Make sure that all other SFT's see this growth also.
 23170                                  ;
 23171 00003C50 B80200                  	MOV     AX,2
 23172                                  ;if installed
 23173                                  	;Call	JShare + 14 * 4
 23174 00003C53 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23175                                  ;else
 23176                                  ;	Call    ShSU
 23177                                  ;endif
 23178 00003C57 31C9                    	XOR     CX,CX
 23179 00003C59 E939FD                  	jmp	ADDREC
 23180                                  
 23181                                  	; 16/12/2022
 23182                                  ;WRTERRJ: 
 23183                                  	;JMP	WRTERR
 23184                                  
 23185                                  ;;;;;;;;;;;;;;;; 7/18/86
 23186                                  ;;;;;;;;;;;;;;;;
 23187                                  
 23188                                  RELFILE:
 23189                                  	; MSDOS 6.0
 23190 00003C5C 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23191 00003C5D C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23192                                  	;cmp	dx,[es:di+19h]
 23193 00003C61 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23194 00003C65 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23195                                  	;mov	[es:di+19h],0
 23196 00003C67 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23197                                  	;mov	dx,[es:di+0Bh]
 23198 00003C6D 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23199                                  	;mov	[es:di+35h],dx
 23200 00003C71 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23201                                  SKIPRESET:                            		;AN002; BL
 23202 00003C75 07                      	POP     ES                    		;AN002; BL
 23203                                  ;
 23204 00003C76 BAFFFF                  	MOV     DX,0FFFFH
 23205 00003C79 E83912                  	call	RELBLKS
 23206                                  	; 16/12/2022
 23207                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23208 00003C7C 73C0                    	jnc	short UPDATE
 23209                                  SET_ACC_ERRWJ:
 23210                                  	;JC	short SET_ACC_ERRWJ2
 23211                                  	;JMP	SHORT UPDATE
 23212                                  	; 16/12/2022
 23213 00003C7E E95FFC                  	jmp	SET_ACC_ERR_DS
 23214                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23215                                  	;JC	short SET_ACC_ERRWJ2
 23216                                  	;JMP	SHORT UPDATE
 23217                                  
 23218                                  KILLFIL:
 23219 00003C81 31DB                    	XOR     BX,BX
 23220 00003C83 06                      	PUSH    ES
 23221 00003C84 C43E[9E05]              	LES     DI,[THISSFT]
 23222                                  	;mov	[es:di+19h],bx
 23223 00003C88 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23224                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23225 00003C8C 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23226                                  	;xchg	bx,[es:di+0Bh]
 23227 00003C90 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23228 00003C94 07                      	POP	ES
 23229                                  
 23230 00003C95 09DB                    	OR	BX,BX
 23231                                  	;JZ	short UPDATEJ
 23232                                  	; 16/12/2022
 23233 00003C97 74A5                    	jz	short UPDATE
 23234                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23235                                  	;jz	short UPDATEJ
 23236                                  
 23237                                  ;; 10/23/86 FastOpen update
 23238 00003C99 06                      	PUSH	ES              ; since first cluster # is 0
 23239 00003C9A 55                      	PUSH	BP              ; we must delete the old cache entry
 23240 00003C9B 50                      	PUSH	AX
 23241 00003C9C 51                      	PUSH	CX
 23242 00003C9D 52                      	PUSH	DX
 23243 00003C9E C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23244                                  	; 15/12/2022
 23245 00003CA2 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23246                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23247                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23248 00003CA6 89D9                    	MOV	CX,BX                    ; first cluster #
 23249 00003CA8 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23250 00003CAA E840EA                  	call	FastOpen_Update          ; call fastopen
 23251 00003CAD 5A                      	POP	DX
 23252 00003CAE 59                      	POP	CX
 23253 00003CAF 58                      	POP	AX
 23254 00003CB0 5D                      	POP	BP
 23255 00003CB1 07                      	POP	ES
 23256                                  ;; 10/23/86 FastOpen update
 23257                                  
 23258 00003CB2 E8FE11                  	call	RELEASE
 23259 00003CB5 72C7                    	JC	short SET_ACC_ERRWJ
 23260                                  UPDATEJ:
 23261                                  	; 20/11/2022
 23262 00003CB7 EB85                    	JMP	short UPDATE ; 10/08/2018
 23263                                  
 23264                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23265                                  ;----------------------------------------------------------------------------
 23266                                  ;
 23267                                  ; Procedure Name : DskWrtBufPurge
 23268                                  ;
 23269                                  ; Inputs:
 23270                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23271                                  ;	     sectors, also termed an "Extent".)
 23272                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23273                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23274                                  ;
 23275                                  ; Function:
 23276                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23277                                  ;	are in Extent; they are being over-written.
 23278                                  ;
 23279                                  ; Outputs:
 23280                                  ;       (Same as Input.)
 23281                                  ; Uses:
 23282                                  ;       All registers except DS,AX,SI,DI preserved.
 23283                                  ;       SS override for all global variables.
 23284                                  ;----------------------------------------------------------------------------
 23285                                  ;M039: Created
 23286                                  
 23287                                  ;procedure   DskWrtBufPurge,NEAR
 23288                                  ;
 23289                                  ;ASSUME  DS:NOTHING
 23290                                  
 23291                                  ; 04/05/2019 - Retro DOS v4.0
 23292                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23293                                  
 23294                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23295                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23296                                  
 23297                                  DskWrtBufPurge:
 23298                                  	;SaveReg <bx,cx>
 23299 00003CB9 53                      	push	bx
 23300 00003CBA 51                      	push	cx
 23301                                  
 23302 00003CBB 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23303 00003CC0 89DE                    	mov	si,bx
 23304 00003CC2 01D1                    	add	cx,dx
 23305 00003CC4 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23306                                  
 23307                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23308                                  	;;mov	al,[es:bp+0]
 23309                                  	;mov	al,[es:bp+DPB.DRIVE]
 23310                                  	; 15/12/2022
 23311 00003CC7 268A4600                	mov	al,[es:bp]
 23312                                  
 23313                                  ;	BX:DX = Extent start.
 23314                                  ;	SI:CX = Extent end + 1.
 23315                                  ;	AL = Drive #
 23316                                  
 23317 00003CCB 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23318 00003CD1 7431                    	je	short nosc		; -no, jump.
 23319                                  
 23320                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23321                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23322                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23323                                  
 23324 00003CD3 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23325 00003CD8 752A                    	jne	short nosc		; -no, jump.
 23326                                  
 23327 00003CDA 50                      	push    ax
 23328 00003CDB 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23329 00003CDF 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23330                                  
 23331                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23332                                  	;jbe	short sc5		; -yes, jump.
 23333                                  
 23334 00003CE4 39FE                    	cmp	si,di
 23335 00003CE6 7502                    	jne	short sc01
 23336 00003CE8 39C1                    	cmp	cx,ax
 23337                                  sc01: 
 23338 00003CEA 7617                    	jbe	short sc5	
 23339                                  
 23340 00003CEC 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23341 00003CF1 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23342                                  	
 23343                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23344                                  	;jae	short sc5		; -yes, jump.
 23345                                  
 23346 00003CF4 39FB                    	cmp	bx,di
 23347 00003CF6 7502                    	jne	short sc02
 23348 00003CF8 39C2                    	cmp	dx,ax
 23349                                  sc02:
 23350 00003CFA 7307                    	jnb	short sc5
 23351                                  
 23352 00003CFC 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23353                                  sc5:	
 23354 00003D03 58                      	pop     ax
 23355                                  
 23356                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23357                                  ;	written.
 23358                                  
 23359                                  nosc:	
 23360 00003D04 E8C31B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23361                                  
 23362                                  _bufq:	
 23363                                  	;cmpo	al,[di+4]
 23364 00003D07 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23365 00003D0A 7527                    	jne	short bufq5		; -no, jump.
 23366                                  
 23367                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23368                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23369                                  
 23370                                  	;cmp	bx,[di+8]
 23371 00003D0C 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23372 00003D0F 7503                    	jne	short bufq04
 23373                                  	;cmp	dx,[di+6]
 23374 00003D11 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23375                                  bufq04:
 23376 00003D14 771D                    	ja	short bufq5
 23377                                  
 23378                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23379                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23380                                  
 23381                                  	;cmp	si,[di+8]
 23382 00003D16 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23383 00003D19 7503                    	jne	short bufq05
 23384                                  	;cmp	cx,[di+6]
 23385 00003D1B 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23386                                  bufq05:
 23387 00003D1E 7613                    	jbe	short bufq5
 23388                                  
 23389                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23390                                  
 23391                                  	;test	byte [di+5],40h
 23392 00003D20 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23393 00003D24 7403                    	jz	short bufq4		; -no, jump.
 23394 00003D26 E8221E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23395                                  bufq4:
 23396                                  	;mov	word [di+4],20FFh
 23397 00003D29 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23398                                  
 23399 00003D2E E8AB1B                  	call	SCANPLACE
 23400 00003D31 EB02                    	jmp     short bufq6
 23401                                  bufq5: 
 23402 00003D33 8B3D                    	mov     di,[di]
 23403                                  	;mov	di,[di+BUFFINFO.buf_next]
 23404                                  bufq6: 
 23405 00003D35 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23406 00003D3A 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23407                                  	
 23408                                  	;RestoreReg <cx,bx>
 23409 00003D3C 59                      	pop	cx
 23410 00003D3D 5B                      	pop	bx
 23411 00003D3E C3                      	retn
 23412                                  
 23413                                  ;EndProc DskWrtBufPurge
 23414                                  
 23415                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23416                                  ;----------------------------------------------------------------------------
 23417                                  ;
 23418                                  ; Procedure Name : DIV32
 23419                                  ;
 23420                                  ; Inputs:
 23421                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23422                                  ; Function:
 23423                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23424                                  ; Outputs:
 23425                                  ;       CX:AX = quotient , DX= remainder
 23426                                  ; Uses:
 23427                                  ;       All registers except AX,CX,DX preserved.
 23428                                  ;----------------------------------------------------------------------------
 23429                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23430                                  
 23431                                  ; 04/05/2019 - Retro DOS v4.0
 23432                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23433                                  
 23434                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23435                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23436                                  
 23437                                  DIV32:
 23438 00003D3F 81FB0002                	cmp	bx,512
 23439 00003D43 7515                    	jne	short div5
 23440                                  
 23441 00003D45 89D1                    	mov	cx,dx
 23442 00003D47 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23443 00003D49 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23444 00003D4D 88E0                    	mov	al,ah
 23445 00003D4F 88CC                    	mov	ah,cl
 23446 00003D51 88E9                    	mov	cl,ch
 23447 00003D53 30ED                    	xor	ch,ch
 23448 00003D55 D1E9                    	shr	cx,1
 23449 00003D57 D1D8                    	rcr	ax,1
 23450 00003D59 C3                      	retn
 23451                                  div5:	
 23452 00003D5A 89C1                    	mov	cx,ax
 23453 00003D5C 89D0                    	mov	ax,dx
 23454 00003D5E 31D2                    	xor	dx,dx
 23455 00003D60 F7F3                    	div	bx              ; 0:AX/BX
 23456 00003D62 91                      	xchg	cx,ax
 23457 00003D63 F7F3                    	div	bx              ; DX:AX/BX
 23458 00003D65 C3                      	retn
 23459                                  
 23460                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23461                                  ;----------------------------------------------------------------------------
 23462                                  ;
 23463                                  ; Procedure Name : SHR32
 23464                                  ;
 23465                                  ; Inputs:
 23466                                  ;	DX:AX = 32 bit sector number
 23467                                  ; Function:
 23468                                  ;       Perform 32 bit shift right
 23469                                  ; Outputs:
 23470                                  ;	AX = cluster number
 23471                                  ;	ZF = 1 if no error
 23472                                  ;	   = 0 if error (cluster number > 64k)
 23473                                  ; Uses:
 23474                                  ;       DX,CX
 23475                                  ;---------------------------------------------------------------------------
 23476                                  ; M017	- SHR32 rewritten for better performance
 23477                                  ; M039	- Additional optimization
 23478                                  
 23479                                  ; 04/05/2019 - Retro DOS v4.0
 23480                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23481                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23482                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23483                                  
 23484                                  SHR32:
 23485                                  	;mov	cl,[es:bp+5]
 23486 00003D66 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23487 00003D6A 30ED                    	xor	ch,ch	    ;ZF=1
 23488 00003D6C E306                    	jcxz	norota
 23489                                  
 23490                                  rotashft2:
 23491 00003D6E D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23492 00003D70 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23493 00003D72 E2FA                    	loop	rotashft2
 23494                                  norota:
 23495 00003D74 C3                      	retn
 23496                                  
 23497                                  ;============================================================================
 23498                                  ; DIR.ASM, MSDOS 6.0, 1991
 23499                                  ;============================================================================
 23500                                  ; 27/07/2018 - Retro DOS v3.0
 23501                                  ; 19/05/2019 - Retro DOS v4.0 
 23502                                  
 23503                                  ;	TITLE	DIR - Directory and path cracking
 23504                                  ;	NAME	Dir
 23505                                  
 23506                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23507                                  ;---------------------------------------------------------------------------
 23508                                  ;
 23509                                  ; Procedure Name : FINDENTRY,SEARCH
 23510                                  ;
 23511                                  ; Inputs:
 23512                                  ;	[THISDPB] set
 23513                                  ;	[SECCLUSPOS] = 0
 23514                                  ;	[DIRSEC] = Starting directory sector number
 23515                                  ;	[CLUSNUM] = Next cluster of directory
 23516                                  ;	[CLUSFAC] = Sectors/Cluster
 23517                                  ;	[NAME1] = Name to look for
 23518                                  ; Function:
 23519                                  ;	Find file name in disk directory.
 23520                                  ;	"?" matches any character.
 23521                                  ; Outputs:
 23522                                  ;	Carry set if name not found
 23523                                  ;	ELSE
 23524                                  ;	Zero set if attributes match (always except when creating)
 23525                                  ;	AH = Device ID (bit 7 set if not disk)
 23526                                  ;	[THISDPB] = Base of drive parameters
 23527                                  ;	DS = DOSGROUP
 23528                                  ;	ES = DOSGROUP
 23529                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23530                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23531                                  ;	[CURBUF] has directory record with match
 23532                                  ;	[NAME1] has file name
 23533                                  ;	[LASTENT] is entry number of the entry
 23534                                  ; All other registers destroyed.
 23535                                  ;----------------------------------------------------------------------------
 23536                                  
 23537                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23538                                  ;hkn; this point.
 23539                                  
 23540                                  SEARCH:
 23541                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23542                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23543                                  
 23544                                  	; 19/05/2019 - Retro DOS v4.0
 23545                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23546                                  
 23547                                  	; 27/07/2018 - Retro DOS v3.0
 23548                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23549                                  	; 15/03/2018 - Retro DOS v2.0
 23550                                  
 23551                                  	;entry	FindEntry
 23552                                  FINDENTRY:
 23553 00003D75 E82E04                  	call	STARTSRCH
 23554 00003D78 A0[6B05]                	MOV	AL,[ATTRIB]
 23555                                  	;and	al,9Eh
 23556 00003D7B 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23557                                  	;cmp	al,8
 23558 00003D7D 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23559 00003D7F 7503                    	JNZ	short NOTVOLSRCH	; No
 23560 00003D81 E86D01                  	CALL	SETROOTSRCH		; Yes force search of root
 23561                                  NOTVOLSRCH:
 23562 00003D84 E8FD00                  	CALL	GETENTRY
 23563 00003D87 7303                    	JNC	short SRCH
 23564 00003D89 E99100                  	JMP	SETESRET
 23565                                  
 23566                                  	;entry	Srch
 23567                                  SRCH:
 23568 00003D8C 1E                      	PUSH	DS
 23569 00003D8D 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23570                                  
 23571                                  ;	(DS:BX) = directory entry address
 23572                                  
 23573 00003D91 8A27                    	mov	ah,[BX]
 23574                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23575 00003D93 08E4                    	OR	AH,AH			; End of directory?
 23576 00003D95 7436                    	JZ	short FREE
 23577                                  
 23578                                  ;hkn; SS override
 23579 00003D97 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23580 00003D9C 742F                    	JZ	short FREE
 23581                                  	;test	byte [bx+0Bh],8
 23582 00003D9E F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23583                                  					; Volume ID file?
 23584 00003DA2 7405                    	JZ	short CHKFNAM 		; NO
 23585                                  
 23586                                  ;hkn; SS override
 23587 00003DA4 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23588                                  CHKFNAM:
 23589                                  ;	Context ES
 23590 00003DA9 8CD6                    	MOV	SI,SS
 23591 00003DAB 8EC6                    	MOV	ES,SI
 23592 00003DAD 89DE                    	MOV	SI,BX
 23593                                  
 23594                                  ;hkn; NAME1 is in DOSDATA
 23595 00003DAF BF[4B05]                	MOV	DI,NAME1
 23596                                  ;;;;; 7/29/86
 23597                                  
 23598                                  ;hkn; SS override for NAME1
 23599                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 23600                                  	;JNZ	short NO_E5
 23601                                  	;MOV	BYTE [SS:NAME1],05H
 23602                                  	; 22/09/2023
 23603 00003DB2 26803DE5                	cmp	byte [es:di],0E5h
 23604 00003DB6 7504                    	jnz	short NO_E5
 23605 00003DB8 26C60505                	mov	byte [es:di],05h
 23606                                  NO_E5:
 23607                                  ;;;;; 7/29/86
 23608 00003DBC E86100                  	CALL	MetaCompare
 23609 00003DBF 7428                    	JZ	short FOUND
 23610 00003DC1 1F                      	POP	DS
 23611                                  
 23612                                  	;entry	NEXTENT
 23613                                  NEXTENT:
 23614 00003DC2 C42E[8A05]              	LES	BP,[THISDPB]
 23615 00003DC6 E86600                  	CALL	NEXTENTRY
 23616 00003DC9 73C1                    	JNC	short SRCH
 23617 00003DCB EB50                    	JMP	SHORT SETESRET
 23618                                  
 23619                                  FREE:
 23620 00003DCD 1F                      	POP	DS
 23621 00003DCE 8B0E[4803]              	MOV	CX,[LASTENT]
 23622 00003DD2 3B0E[D805]              	CMP	CX,[ENTFREE]
 23623 00003DD6 7304                    	JAE	short TSTALL
 23624 00003DD8 890E[D805]              	MOV	[ENTFREE],CX
 23625                                  TSTALL:
 23626 00003DDC 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23627                                  NEXTENTJ:
 23628 00003DE0 74E0                    	je	short NEXTENT 		; No - continue search
 23629 00003DE2 890E[DA05]              	MOV	[ENTLAST],CX
 23630 00003DE6 F9                      	STC
 23631 00003DE7 EB34                    	JMP	SHORT SETESRET
 23632                                  
 23633                                  FOUND:
 23634                                  ; We have a file with a matching name. We must now consider the attributes:
 23635                                  ; ATTRIB	Action
 23636                                  ; ------	------
 23637                                  ; Volume_ID	Is Volume_ID in test?
 23638                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23639                                  ;		If create then Is ATTRIB equal to test?
 23640                                  
 23641 00003DE9 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23642 00003DEB 1F                      	POP	DS
 23643 00003DEC 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23644                                  	;and	ah,9Eh
 23645 00003DF0 80E4DE                  	AND	AH,~attr_ignore
 23646                                  	;lea	si,[si+15]
 23647 00003DF3 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23648                                  					; point to first cluster field
 23649                                  	;test	ch,8
 23650 00003DF6 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23651 00003DF9 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23652                                  	;test	ah,8
 23653 00003DFB F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23654                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23655                                  	; 16/12/2022
 23656 00003DFE 74C2                    	jz	short NEXTENT ; 19/05/2019
 23657                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23658                                  	;JZ	short NEXTENTJ
 23659 00003E00 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23660 00003E02 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23661                                  check_one_volume_id:
 23662                                  	;CMP	ah,8
 23663 00003E04 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23664                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23665                                  	; 16/12/2022
 23666 00003E07 74B9                    	je	short NEXTENT ; 19/05/2019
 23667                                  	;JZ	short NEXTENTJ
 23668 00003E09 E8AE03                  	CALL	MatchAttributes
 23669 00003E0C 7407                    	JZ	SHORT RETFF
 23670 00003E0E F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23671                                  	; 16/12/2022
 23672                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23673 00003E13 74AD                    	jz	short NEXTENT ; 19/05/2019
 23674                                  RETFF:
 23675 00003E15 C42E[8A05]              	LES	BP,[THISDPB]
 23676                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23677                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23678                                  	; 15/12/2022
 23679 00003E19 268A6600                	MOV	AH,[ES:BP]
 23680                                  SETESRET:
 23681 00003E1D 16                      	PUSH	SS
 23682 00003E1E 07                      	POP	ES
 23683 00003E1F C3                      	retn
 23684                                  
 23685                                  ;----------------------------------------------------------------------------
 23686                                  ;
 23687                                  ; Procedure Name : MetaCompare
 23688                                  ;
 23689                                  ; Inputs:
 23690                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23691                                  ;	    Typically this is a directory entry. It MUST be in upper case
 23692                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23693                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 23694                                  ; Function:
 23695                                  ;	Compare FCB style names allowing for ? match to any char
 23696                                  ; Outputs:
 23697                                  ;	Zero if match else NZ
 23698                                  ; Destroys CX,SI,DI all others preserved
 23699                                  ;----------------------------------------------------------------------------
 23700                                  
 23701                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23702                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23703                                  
 23704                                  MetaCompare:
 23705 00003E20 B90B00                  	MOV	CX,11
 23706                                  WILDCRD:
 23707 00003E23 F3A6                    	REPE	CMPSB
 23708 00003E25 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23709                                  CHECK_META:
 23710 00003E27 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23711 00003E2C 74F5                    	JZ	short WILDCRD
 23712                                  MetaRet:
 23713 00003E2E C3                       	retn				; Zero set, Match
 23714                                  
 23715                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23716                                  ;----------------------------------------------------------------------------
 23717                                  ;
 23718                                  ; Procedure Name : NEXTENTRY
 23719                                  ;
 23720                                  ; Inputs:
 23721                                  ;	Same as outputs of GETENTRY, above
 23722                                  ; Function:
 23723                                  ;	Update BX, and [LASTENT] for next directory entry.
 23724                                  ;	Carry set if no more.
 23725                                  ;----------------------------------------------------------------------------
 23726                                  
 23727                                  NEXTENTRY:
 23728                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23729                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23730                                  
 23731                                  	; 19/05/2019 - Retro DOS v4.0
 23732                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23733                                  
 23734                                  	; 27/07/2018 - Retro DOS v3.0
 23735                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23736                                  	; 15/03/2018 - Retro DOS v2.0
 23737                                  
 23738 00003E2F A1[4803]                	MOV	AX,[LASTENT]
 23739 00003E32 3B06[DA05]              	CMP	AX,[ENTLAST]
 23740 00003E36 7422                    	JZ	short NONE
 23741 00003E38 40                      	INC	AX
 23742                                  	;ADD	BX,32
 23743 00003E39 8D5F20                  	LEA	BX,[BX+32]
 23744 00003E3C 39D3                    	CMP	BX,DX
 23745                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23746                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23747                                  	; 16/12/2022
 23748 00003E3E 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23749 00003E40 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23750 00003E44 FEC3                    	INC	BL
 23751 00003E46 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23752 00003E4A 7215                    	JB	short SAMECLUS
 23753 00003E4C 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23754 00003E50 E8C716                  	call	IsEOF
 23755 00003E53 7305                    	JAE	short NONE
 23756                                  	; 23/07/2019
 23757 00003E55 83FB02                  	CMP	BX,2
 23758                                  	;JB	short NONE
 23759                                  	;JMP	short GETENT
 23760                                  	; 16/12/2022
 23761 00003E58 732D                    	jnb	short GETENT
 23762                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23763                                  	;JB	short NONE
 23764                                  	;JMP	short GETENT
 23765                                  NONE:
 23766 00003E5A F9                      	STC
 23767 00003E5B C3                      	retn
 23768                                  HAVIT:
 23769 00003E5C A3[4803]                	MOV	[LASTENT],AX
 23770 00003E5F F8                      	CLC
 23771                                  nextentry_retn:
 23772 00003E60 C3                      	retn
 23773                                  SAMECLUS:
 23774 00003E61 881E[7305]              	MOV	[SECCLUSPOS],BL
 23775 00003E65 A3[4803]                	MOV	[LASTENT],AX
 23776 00003E68 1E                      	PUSH	DS
 23777 00003E69 C53E[E205]              	LDS	DI,[CURBUF]
 23778                                  	; 19/05/2019
 23779                                  	; MSDOS 6.0
 23780                                  	;;mov	dx,[di+8]
 23781                                  	; 23/09/2023
 23782                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23783                                  ;hkn; SS override
 23784                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23785                                  	; 23/09/2023
 23786 00003E6D 8B7508                  	mov	si,[di+BUFFINFO.buf_sector+2]	
 23787                                  	
 23788                                  	;mov	dx,[di+6]
 23789 00003E70 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23790                                  	;inc	dx ; MSDOS 3.3
 23791                                  	; MSDOS 6.0
 23792                                  	;ADD	DX,1				;AN000; >32mb
 23793                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23794                                  	; 23/09/2023
 23795 00003E73 42                      	inc	dx
 23796 00003E74 7501                    	jnz	short nextexntry_fc
 23797 00003E76 46                      	inc	si
 23798                                  	;inc	word [SS:HIGH_SECTOR]
 23799                                  nextexntry_fc:
 23800                                  	; 23/09/2023
 23801 00003E77 368936[0706]            	mov	[SS:HIGH_SECTOR],si
 23802                                  	; MSDOS 3.3 & MSDOS 6.0
 23803 00003E7C 1F                      	POP	DS
 23804 00003E7D E844F8                  	call	FIRSTCLUSTER
 23805 00003E80 31DB                    	XOR	BX,BX
 23806 00003E82 EB23                    	JMP	short SETENTRY
 23807                                  
 23808                                  ;----------------------------------------------------------------------------
 23809                                  ;
 23810                                  ; Procedure Name : GETENTRY
 23811                                  ;
 23812                                  ; Inputs:
 23813                                  ;	[LASTENT] has directory entry
 23814                                  ;	ES:BP points to drive parameters
 23815                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23816                                  ; Function:
 23817                                  ;	Locates directory entry in preparation for search
 23818                                  ;	GETENT provides entry for passing desired entry in AX
 23819                                  ; Outputs:
 23820                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23821                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23822                                  ;	[LASTENT] = New directory entry number
 23823                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23824                                  ;	Carry set if error (currently user FAILed to I 24)
 23825                                  ;----------------------------------------------------------------------------
 23826                                  
 23827                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23828                                  GETENTRY:
 23829                                  	; 27/07/2018 - Retro DOS v3.0
 23830 00003E84 A1[4803]                	MOV	AX,[LASTENT]
 23831                                  
 23832                                  	;entry	GETENT
 23833                                  GETENT:
 23834 00003E87 A3[4803]                	MOV	[LASTENT],AX
 23835                                  ;
 23836                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23837                                  ; directory.
 23838                                  ;
 23839 00003E8A B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23840 00003E8C D3C0                    	rol	ax,cl			; keep hight order bits
 23841 00003E8E 89C2                    	mov	dx,ax
 23842                                  	; 19/05/2019 - Retro DOS v4.0
 23843                                  	;and	ax,0FFE0h
 23844                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23845                                  	;and	ax,~(32-1)		; mask off high order bits
 23846                                  	; 16/12/2022
 23847 00003E90 24E0                    	and	al,0E0h ; ~31
 23848 00003E92 83E21F                  	and	dx,1Fh
 23849                                  	;and	dx,32-1			; mask off low order bits
 23850                                  ;
 23851                                  ; DX:AX contain the byte offset of the required directory entry from the
 23852                                  ; beginning of the directory. Convert this to a sector number. Round the
 23853                                  ; sector size down to a multiple of 32.
 23854                                  ;
 23855                                  	;mov	bx,[es:bp+2]
 23856 00003E95 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23857 00003E99 80E3E0                  	and	bl,0E0h
 23858                                  	;AND	BL,255-31		; Must be multiple of 32
 23859 00003E9C F7F3                    	DIV	BX
 23860 00003E9E 89D3                    	MOV	BX,DX			; Position within sector
 23861 00003EA0 53                      	PUSH	BX
 23862 00003EA1 E8CCF7                  	call	DIRREAD
 23863 00003EA4 5B                      	POP	BX
 23864                                  	;retc
 23865 00003EA5 72B9                    	jc	short nextentry_retn	
 23866                                  SETENTRY:
 23867 00003EA7 8B16[E205]              	MOV	DX,[CURBUF]
 23868                                  	;add	dx,16 ; MSDOS 3.3
 23869                                  	;add	dx,20 ; MSDOS 6.0 
 23870 00003EAB 83C214                  	ADD	DX,BUFINSIZ
 23871 00003EAE 01D3                    	ADD	BX,DX
 23872                                  	;add	dx,[es:bp+2]
 23873 00003EB0 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23874                                  	; 29/12/2022
 23875                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 23876 00003EB4 F8                      	clc
 23877 00003EB5 C3                      	retn
 23878                                  
 23879                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23880                                  ;----------------------------------------------------------------------------
 23881                                  ;
 23882                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23883                                  ;
 23884                                  ; Inputs:
 23885                                  ;	BX cluster number of start of directory
 23886                                  ;	ES:BP Points to DPB
 23887                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23888                                  ; Function:
 23889                                  ;	Set up a directory search
 23890                                  ; Outputs:
 23891                                  ;	[DIRSTART] = BX
 23892                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23893                                  ;	Carry set if error (currently user FAILed to I 24)
 23894                                  ; destroys AX,DX,BX
 23895                                  ;----------------------------------------------------------------------------
 23896                                  
 23897                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23898                                  SETDIRSRCH:
 23899 00003EB6 09DB                    	OR	BX,BX
 23900 00003EB8 7437                    	JZ	short SETROOTSRCH
 23901 00003EBA 891E[C205]              	MOV	[DIRSTART],BX
 23902                                  	;mov	al,[es:bp+4]
 23903 00003EBE 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23904 00003EC2 FEC0                    	INC	AL
 23905 00003EC4 A2[7705]                	MOV	[CLUSFAC],AL
 23906                                  
 23907                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23908                                  	;SAVE	<SI>
 23909 00003EC7 56                      	push	si
 23910                                  	;test	byte [FastOpenFlg],2
 23911 00003EC8 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23912 00003ECD 7507                    	JNZ	short UNP_OK
 23913                                  
 23914                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23915                                  	;invoke	UNPACK
 23916 00003ECF E85F16                  	call	UNPACK
 23917 00003ED2 7302                    	JNC	short UNP_OK
 23918                                  	;RESTORE <SI>
 23919 00003ED4 5E                      	pop	si
 23920                                  	;return
 23921 00003ED5 C3                      	retn
 23922                                  
 23923                                  UNP_OK:
 23924 00003ED6 893E[BC05]              	MOV	[CLUSNUM],DI
 23925 00003EDA 89DA                    	MOV	DX,BX
 23926 00003EDC 30DB                    	XOR	BL,BL
 23927 00003EDE 881E[7305]              	MOV	[SECCLUSPOS],BL
 23928                                  	;invoke	FIGREC
 23929 00003EE2 E8F50E                  	call	FIGREC
 23930                                  	;RESTORE <SI>
 23931 00003EE5 5E                      	pop	si
 23932                                  	
 23933                                  	; 19/05/2019 - Retro DOS v4.0
 23934                                  
 23935                                  	; MSDOS 6.0
 23936                                  	;PUSH	DX			   ;AN000; >32mb
 23937                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23938                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23939                                  	;POP	DX			   ;AN000; >32mb
 23940                                  
 23941                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23942                                  	;push	dx
 23943                                  	;mov	dx,[HIGH_SECTOR]
 23944                                  	;mov	[DIRSEC+2],dx
 23945                                  	;pop	dx
 23946                                  	;MOV	[DIRSEC],dx
 23947                                  	; 16/12/2022
 23948 00003EE6 A1[0706]                	mov	ax,[HIGH_SECTOR]
 23949 00003EE9 A3[C005]                	mov	[DIRSEC+2],AX
 23950 00003EEC 8916[BE05]              	MOV	[DIRSEC],DX
 23951                                  
 23952                                  	; 16/12/2022
 23953                                  	; cf=0 (at the return of FIGREC)
 23954                                  	;CLC
 23955 00003EF0 C3                      	retn
 23956                                  
 23957                                  	;entry	SETROOTSRCH
 23958                                  SETROOTSRCH:
 23959 00003EF1 31C0                    	XOR	AX,AX
 23960 00003EF3 A3[C205]                	MOV	[DIRSTART],AX
 23961                                  	; 22/09/2023
 23962 00003EF6 A3[C005]                	mov	[DIRSEC+2],ax ; 0
 23963 00003EF9 A2[7305]                	MOV	[SECCLUSPOS],AL
 23964 00003EFC 48                      	DEC	AX
 23965 00003EFD A3[BC05]                	MOV	[CLUSNUM],AX
 23966                                  	;mov	ax,[es:bp+0Bh]
 23967 00003F00 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23968                                  	; 19/05/2019
 23969                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23970                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23971 00003F04 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23972 00003F08 29D0                    	SUB	AX,DX
 23973 00003F0A A2[7705]                	MOV	[CLUSFAC],AL
 23974 00003F0D 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23975                                  	; 22/09/2023
 23976                                  	; MSDOS 6.0
 23977                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23978 00003F11 F8                      	CLC
 23979 00003F12 C3                      	retn
 23980                                  
 23981                                  ;============================================================================
 23982                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23983                                  ;============================================================================
 23984                                  ; 27/07/2018 - Retro DOS v3.0
 23985                                  ; 19/05/2019 - Retro DOS v4.0 
 23986                                  
 23987                                  ;	TITLE	DIR2 - Directory and path cracking
 23988                                  ;	NAME	Dir2
 23989                                  
 23990                                  ;Break	<GETPATH -- PARSE A WFP>
 23991                                  ;----------------------------------------------------------------------------
 23992                                  ;
 23993                                  ; Procedure Name : GETPATH
 23994                                  ;
 23995                                  ; Inputs:
 23996                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23997                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23998                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23999                                  ;		( = -1 if current dir not involved, else
 24000                                  ;		 Points to first char after last "/" of current dir part)
 24001                                  ;	[THISCDS] Points to CDS being used
 24002                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24003                                  ;	[NoSetDir] set
 24004                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24005                                  ; Function:
 24006                                  ;	Crack the path
 24007                                  ; Outputs:
 24008                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24009                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24010                                  ;	ID1 field of [THISCDS] updated appropriately
 24011                                  ;	[ATTRIB] = [SATTRIB]
 24012                                  ;	ES:BP Points to DPB
 24013                                  ;	Carry set if bad path
 24014                                  ;	   SI Points to path element causing failure
 24015                                  ;	   Zero set
 24016                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24017                                  ;	      start a search on the last directory
 24018                                  ;	      CL is zero if there is a bad name in the path
 24019                                  ;	      CL is non-zero if the name was simply not found
 24020                                  ;		 [ENTFREE] may have free spot in directory
 24021                                  ;		 [NAME1] is the name.
 24022                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24023                                  ;	   Zero reset
 24024                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24025                                  ;		or path too long or malformed path
 24026                                  ;	ELSE
 24027                                  ;	   [CurBuf] = -1 if root directory
 24028                                  ;	   [CURBUF] contains directory record with match
 24029                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24030                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24031                                  ;	   AH = device ID
 24032                                  ;	      bit 7 of AH set if device SI and BX
 24033                                  ;	      will point DOSGROUP relative The firclus
 24034                                  ;	      field of the device entry contains the device pointer
 24035                                  ;	   [NAME1] Has name looked for
 24036                                  ;	   If last element is a directory zero is set and:
 24037                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24038                                  ;	      are set up to start a search on it.
 24039                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24040                                  ;	      like that for a file (except for zero flag)
 24041                                  ;	   If last element is a file zero is reset
 24042                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24043                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24044                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24045                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24046                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24047                                  ; DS preserved, Others destroyed
 24048                                  ;---------------------------------------------------------------------------
 24049                                  
 24050                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24051                                  ;hkn; DS already set up at this point.
 24052                                  
 24053                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24054                                  GETPATH:
 24055                                  	;mov	word [CREATING],0E500h
 24056 00003F13 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24057                                  
 24058                                  ; Same as GetPath only CREATING and DELALL already set
 24059                                  
 24060                                  	;entry	GetPathNoSet
 24061                                  GetPathNoSet:
 24062                                  	;mov	byte [EXTERR_LOCUS],2	
 24063 00003F19 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24064 00003F1E C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24065                                  
 24066                                  ; See if the input indicates a device that has already been detected. If so,
 24067                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24068                                  
 24069 00003F24 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24070                                  	;cmp	word [DI+1],5C3Ah
 24071                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24072 00003F28 817D013A5C              	cmp	word [DI+1],':\'
 24073 00003F2D 7438                    	JZ	short CrackIt
 24074                                  
 24075                                  ; Let ChkDev find it in the device list
 24076                                  
 24077 00003F2F 83C703                  	ADD	DI,3
 24078                                  	; 18/08/2018
 24079                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24080                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24081                                  	; 16/12/2022
 24082                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24083 00003F32 E8AB00                  	CALL	CHKDEV
 24084 00003F35 722E                    	JC	short InternalError
 24085                                  
 24086                                  Build_devJ:
 24087 00003F37 A0[6D05]                	MOV	AL,[SATTRIB]
 24088 00003F3A A2[6B05]                	MOV	[ATTRIB],AL
 24089                                  	;mov	byte [EXTERR_LOCUS],1
 24090 00003F3D C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24091                                  					; "finding" a char device
 24092                                  					; set LOCUS to Unknown. This makes
 24093                                  					; certain idiotic problems reported
 24094                                  					; by a certain 3 letter OEM go away.
 24095                                  
 24096                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24097                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24098                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24099                                  ; wfp into the share set.
 24100                                  ;
 24101                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24102                                  ; non-space seen +1.  This position is kept in DX.
 24103                                  
 24104                                  ;hkn; SS is DOSDATA
 24105 00003F42 16                      	push	ss
 24106 00003F43 07                      	pop	es
 24107                                  
 24108                                  ;hkn; NAME1 is in DOSDATA
 24109 00003F44 BE[4B05]                	mov	si,NAME1
 24110 00003F47 8B3E[B205]              	mov	di,[WFP_START]
 24111 00003F4B 89FA                    	mov	dx,di
 24112 00003F4D B90800                  	mov	cx,8			; 8 chars in device name
 24113                                  MoveLoop:
 24114 00003F50 AC                      	lodsb
 24115 00003F51 AA                      	stosb
 24116 00003F52 3C20                    	cmp	al," "
 24117 00003F54 7402                    	jz	short NoSave
 24118                                  
 24119 00003F56 89FA                    	mov	dx,di
 24120                                  NoSave:
 24121 00003F58 E2F6                    	loop	MoveLoop
 24122                                  
 24123                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24124                                  ; at this point.
 24125                                  
 24126 00003F5A 89D7                    	mov	di,dx
 24127 00003F5C C60500                  	mov	byte [di],0		; end of string
 24128 00003F5F E8C402                  	call	Build_device_ent	; Clears carry sets zero
 24129 00003F62 FEC0                    	INC	AL			; reset zero
 24130 00003F64 C3                      	retn
 24131                                  
 24132                                  InternalError:
 24133                                  InternalError_loop:
 24134 00003F65 EBFE                    	JMP	short InternalError_loop	; freeze
 24135                                  
 24136                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24137                                  
 24138                                  CrackIt:
 24139 00003F67 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24140 00003F6B 83FEFF                  	CMP	SI,-1			; valid?
 24141 00003F6E 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 24142 00003F70 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 24143                                  LOOK_SING:
 24144                                  	;mov	byte [ATTRIB],16h
 24145 00003F73 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24146                                  					; Attributes to search through Dirs
 24147 00003F78 C43E[A205]              	LES	DI,[THISCDS]
 24148 00003F7C B8FFFF                  	MOV	AX,-1
 24149                                  	;mov	bx,[es:di+73]
 24150 00003F7F 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24151 00003F83 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24152                                  
 24153                                  ; AX = -1
 24154                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24155                                  ;      has been uncertainly changed.
 24156                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24157                                  ;      may be -1 if no current directory part has been used.
 24158                                  
 24159 00003F87 39C6                    	CMP	SI,AX			; if Current directory is not part
 24160 00003F89 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24161 00003F8B 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24162                                  
 24163                                  ; DOS 3.3  6/25/86
 24164 00003F8D 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 24165                                  	;test	byte [FastOpenFlg],1
 24166 00003F8F F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24167 00003F94 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24168 00003F96 06                      	PUSH	ES			; save registers
 24169 00003F97 57                      	PUSH	DI
 24170 00003F98 51                      	PUSH	CX
 24171 00003F99 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24172 00003F9C 56                      	PUSH	SI
 24173 00003F9D 53                      	PUSH	BX
 24174                                  
 24175 00003F9E C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24176 00003FA2 8B36[B205]              	MOV	SI,[WFP_START]
 24177                                  
 24178                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24179 00003FA6 BB[300D]                	MOV	BX,FastOpenTable
 24180 00003FA9 BF[460D]                	MOV	DI,Dir_Info_Buff
 24181 00003FAC B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24182                                  	;mov	al,1
 24183 00003FAF B001                    	MOV	AL,FONC_Look_up
 24184 00003FB1 1E                      	PUSH	DS
 24185 00003FB2 07                      	POP	ES
 24186                                  	;call	far [BX+2]
 24187 00003FB3 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24188 00003FB6 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24189                                  					; Go to Got_Srch_cluster
 24190                                  	; 29/12/2022
 24191                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24192                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24193                                  	;stc
 24194                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24195                                  
 24196 00003FB8 803C01                  	cmp	byte [si],1
 24197                                  GO_Chk_end1:	; 29/12/2022
 24198 00003FBB F5                      	cmc 
 24199                                  	; [si] = 0 -> cf = 0
 24200                                  	; [si] > 0 -> cf = 1
 24201                                  
 24202                                  ;GO_Chk_end1:
 24203                                  	; 29/12/2022
 24204                                  	;clc
 24205                                  
 24206                                  GO_Chk_end:				; restore registers
 24207 00003FBC 5B                      	POP	BX
 24208 00003FBD 5E                      	POP	SI
 24209 00003FBE 8F44FF                  	POP	word [SI-1]
 24210 00003FC1 59                      	POP	CX
 24211 00003FC2 5F                      	POP	DI
 24212 00003FC3 07                      	POP	ES
 24213 00003FC4 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24214                                  
 24215                                  ; DOS 3.3  6/25/86
 24216                                  ;
 24217                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24218                                  ; of path and go crack from root.
 24219                                  
 24220                                  NO_CURR_D:
 24221 00003FC6 8B36[B205]              	MOV	SI,[WFP_START]
 24222 00003FCA 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 24223 00003FCD C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24224 00003FD1 EB3B                    	JMP	short ROOTPATH
 24225                                  
 24226                                  ; We are able to crack from the current directory part. Go set up for search
 24227                                  ; of specified cluster.
 24228                                  
 24229                                  GOT_SEARCH_CLUSTER:
 24230 00003FD3 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24231 00003FD7 E8DCFE                  	call	SETDIRSRCH
 24232                                  	;JC	short SETFERR
 24233                                  	;JMP	short FINDPATH
 24234                                  	; 16/12/2022
 24235 00003FDA 7342                    	jnc	short FINDPATH ; 17/08/2018
 24236                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24237                                  	;JC	short SETFERR
 24238                                  	;JMP	short FINDPATH
 24239                                  SETFERR:
 24240 00003FDC 30C9                    	XOR	CL,CL			; set zero
 24241 00003FDE F9                      	STC
 24242 00003FDF C3                      	retn
 24243                                  
 24244                                  ;---------------------------------------------------------------------------
 24245                                  ;
 24246                                  ; Procedure Name : ChkDev
 24247                                  ;
 24248                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24249                                  ;   device.
 24250                                  ; Blasts CX,SI,DI,AX,BX
 24251                                  ;---------------------------------------------------------------------------
 24252                                  
 24253                                  CHKDEV:
 24254 00003FE0 89FE                    	MOV	SI,DI
 24255 00003FE2 8CD7                    	MOV	DI,SS
 24256 00003FE4 8EC7                    	MOV	ES,DI
 24257                                  
 24258 00003FE6 BF[4B05]                	MOV	DI,NAME1
 24259 00003FE9 B90900                  	MOV	CX,9
 24260                                  TESTLOOP:
 24261 00003FEC E84910                  	call	GETLET
 24262                                  
 24263 00003FEF 3C2E                    	CMP	AL,'.'
 24264 00003FF1 740E                    	JZ	short TESTDEVICE
 24265 00003FF3 E89810                  	call	PATHCHRCMP
 24266 00003FF6 7407                    	JZ	short NOTDEV
 24267 00003FF8 08C0                    	OR	AL,AL
 24268 00003FFA 7405                    	JZ	short TESTDEVICE
 24269                                  
 24270 00003FFC AA                      	STOSB
 24271 00003FFD E2ED                    	LOOP	TESTLOOP
 24272                                  NOTDEV:
 24273 00003FFF F9                      	STC
 24274 00004000 C3                      	retn
 24275                                  
 24276                                  TESTDEVICE:
 24277                                  	;ADD	CX,2
 24278                                  	; 24/09/2023
 24279 00004001 41                      	inc	cx
 24280 00004002 41                      	inc	cx
 24281 00004003 B020                    	MOV	AL,' '
 24282 00004005 F3AA                    	REP	STOSB
 24283 00004007 8CD0                    	MOV	AX,SS
 24284 00004009 8ED8                    	MOV	DS,AX
 24285                                  	;call	DEVNAME
 24286                                  	;retn
 24287                                  	; 18/12/2022
 24288 0000400B E9B901                  	jmp	DEVNAME
 24289                                  
 24290                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24291                                  ;----------------------------------------------------------------------------
 24292                                  ;
 24293                                  ; Procedure Name : ROOTPATH,FINDPATH
 24294                                  ;
 24295                                  ; Inputs:
 24296                                  ;	Same as FINDPATH but,
 24297                                  ;	SI Points to asciz string of path which is assumed to start at
 24298                                  ;		the root (no leading '/').
 24299                                  ; Function:
 24300                                  ;	Search from root for path
 24301                                  ; Outputs:
 24302                                  ;	Same as FINDPATH but:
 24303                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24304                                  ;	[NoSetDir] is ignored.
 24305                                  ;----------------------------------------------------------------------------
 24306                                  
 24307                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24308                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24309                                  
 24310                                  ROOTPATH:
 24311 0000400E E8E0FE                  	call	SETROOTSRCH
 24312                                  	; 24/09/2023
 24313 00004011 30E4                    	xor	ah,ah
 24314                                  	;CMP	BYTE [SI],0
 24315 00004013 3824                    	cmp	[si],ah ; 0
 24316 00004015 7507                    	JNZ	short FINDPATH
 24317                                  
 24318                                  ; Root dir specified
 24319 00004017 A0[6D05]                	MOV	AL,[SATTRIB]
 24320 0000401A A2[6B05]                	MOV	[ATTRIB],AL
 24321                                  	; 24/09/2023
 24322                                  	;XOR	AH,AH			; Sets "device ID" byte, sets zero
 24323                                  					; (dir), clears carry.
 24324 0000401D C3                      	retn
 24325                                  
 24326                                  ; Inputs:
 24327                                  ;	[ATTRIB] Set to get through directories
 24328                                  ;	[SATTRIB] Set to find last element
 24329                                  ;	ES:BP Points to DPB
 24330                                  ;	SI Points to asciz string of path (no leading '/').
 24331                                  ;	[SECCLUSPOS] = 0
 24332                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24333                                  ;	[CLUSNUM] = Cluster # of next cluster
 24334                                  ;	[CLUSFAC] = Sectors per cluster
 24335                                  ;	[NoSetDir] set
 24336                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24337                                  ;		( = -1 if current dir not involved, else
 24338                                  ;		 Points to first char after last "/" of current dir part)
 24339                                  ;	[THISCDS] Points to CDS being used
 24340                                  ;	[CREATING] and [DELALL] set
 24341                                  ; Function:
 24342                                  ;	Parse path name
 24343                                  ; Outputs:
 24344                                  ;	ID1 field of [THISCDS] updated appropriately
 24345                                  ;	[ATTRIB] = [SATTRIB]
 24346                                  ;	ES:BP Points to DPB
 24347                                  ;	[THISDPB] = ES:BP
 24348                                  ;	Carry set if bad path
 24349                                  ;	   SI Points to path element causing failure
 24350                                  ;	   Zero set
 24351                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24352                                  ;	      start a search on the last directory
 24353                                  ;	      CL is zero if there is a bad name in the path
 24354                                  ;	      CL is non-zero if the name was simply not found
 24355                                  ;		 [ENTFREE] may have free spot in directory
 24356                                  ;		 [NAME1] is the name.
 24357                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24358                                  ;	   Zero reset
 24359                                  ;	      File in middle of path or bad name in path
 24360                                  ;		or path too long or malformed path
 24361                                  ;	ELSE
 24362                                  ;	   [CURBUF] contains directory record with match
 24363                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24364                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24365                                  ;	   [NAME1] Has name looked for
 24366                                  ;	   AH = device ID
 24367                                  ;	      bit 7 of AH set if device SI and BX
 24368                                  ;	      will point DOSGROUP relative The firclus
 24369                                  ;	      field of the device entry contains the device pointer
 24370                                  ;	   If last element is a directory zero is set and:
 24371                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24372                                  ;	      are set up to start a search on it,
 24373                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24374                                  ;	      like that for a file (except for zero flag)
 24375                                  ;	   If last element is a file zero is reset
 24376                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24377                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24378                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24379                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24380                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24381                                  ; Destroys all other registers
 24382                                  
 24383                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24384                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24385                                  
 24386                                      	;entry	FINDPATH
 24387                                  FINDPATH:
 24388 0000401E 06                      	PUSH	ES			; Save ES:BP
 24389 0000401F 56                      	PUSH	SI
 24390 00004020 89F7                    	MOV	DI,SI
 24391 00004022 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24392 00004026 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24393 0000402B 740E                    	JZ	short NOIDS		; No current dir part
 24394 0000402D 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24395 00004031 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24396 00004033 C43E[A205]              	LES	DI,[THISCDS]
 24397                                  	;mov	[es:di+73],cx
 24398 00004037 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24399                                  NOIDS:
 24400                                  
 24401                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24402                                  ; character in the string. CX,DI may be destroyed.
 24403                                  ;
 24404                                  ;	invoke	NAMETRANS
 24405                                  ;	MOV	CL,AL
 24406                                  ;
 24407                                  ; The above is the slow method. The name has *already* been munged by
 24408                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24409                                  ; the name until ., \ or 0 is hit.
 24410                                  
 24411 0000403B 8CD0                    	MOV	AX,SS
 24412 0000403D 8EC0                    	MOV	ES,AX
 24413                                  
 24414                                  ;hkn; Name1 is in DOSDATA
 24415 0000403F BF[4B05]                	MOV	DI,NAME1
 24416 00004042 B82020                  	MOV	AX,'  ' ; 2020h
 24417 00004045 AA                      	STOSB
 24418 00004046 AB                      	STOSW
 24419 00004047 AB                      	STOSW
 24420 00004048 AB                      	STOSW
 24421 00004049 AB                      	STOSW
 24422 0000404A AB                      	STOSW
 24423                                  
 24424                                  ;hkn; Name1 is in DOSDATA
 24425 0000404B BF[4B05]                	MOV	DI,NAME1
 24426 0000404E 30E4                    	XOR	AH,AH			; bits for CL
 24427                                  GetNam:
 24428                                  	; 19/05/2019 - Retro DOS v4.0
 24429                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24430                                  
 24431                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24432                                  	; 16/12/2022
 24433                                  	;inc	cl ; not required !	
 24434                                  	
 24435 00004050 AC                      	LODSB
 24436 00004051 3C2E                    	CMP	AL,'.'	; 2Eh
 24437 00004053 7412                    	JZ	short _SetExt
 24438 00004055 08C0                    	OR	AL,AL
 24439 00004057 7424                    	JZ	short _GetDone
 24440 00004059 3C5C                    	CMP	AL,'\'	; 5Ch
 24441 0000405B 7420                    	JZ	short _GetDone
 24442 0000405D 3C3F                    	CMP	AL,'?'	; 3Fh
 24443 0000405F 7503                    	JNZ	short StoNam
 24444 00004061 80CC01                  	OR	AH,1
 24445                                  StoNam: 
 24446 00004064 AA                      	STOSB
 24447 00004065 EBE9                    	JMP	short GetNam
 24448                                  _SetExt:
 24449 00004067 BF[5305]                	MOV	DI,NAME1+8
 24450                                  GetExt:
 24451 0000406A AC                      	LODSB
 24452 0000406B 08C0                    	OR	AL,AL
 24453 0000406D 740E                    	JZ	short _GetDone
 24454 0000406F 3C5C                    	CMP	AL,'\'
 24455 00004071 740A                    	JZ	short _GetDone
 24456 00004073 3C3F                    	CMP	AL,'?'
 24457 00004075 7503                    	JNZ	short StoExt
 24458 00004077 80CC01                  	OR	AH,1
 24459                                  StoExt: 
 24460 0000407A AA                      	STOSB
 24461 0000407B EBED                    	JMP	short GetExt
 24462                                  _GetDone:
 24463 0000407D 4E                      	DEC	SI
 24464 0000407E 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24465 00004080 80C980                  	OR	CL,80H
 24466 00004083 5F                      	POP	DI			; Start of this element
 24467 00004084 07                      	POP	ES			; Restore ES:BP
 24468 00004085 39FE                    	CMP	SI,DI
 24469 00004087 7503                    	JNZ	short check_device
 24470 00004089 E9E200                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24471                                  check_device:
 24472 0000408C 56                      	PUSH	SI			; Start of next element
 24473                                  	;MOV	AL,[SI]
 24474                                  	;OR	AL,AL
 24475                                  	; 23/09/2023
 24476 0000408D 803C00                  	cmp	byte [si],0
 24477 00004090 7508                    	JNZ	short NOT_LAST
 24478                                  
 24479                                  ; for last element of the path switch to the correct search attributes
 24480                                  
 24481 00004092 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24482 00004096 883E[6B05]              	MOV	[ATTRIB],BH
 24483                                  
 24484                                  NOT_LAST:
 24485                                  
 24486                                  ; check name1 to see if we have a device...
 24487                                  
 24488 0000409A 06                      	PUSH	ES			; Save ES:BP
 24489                                  
 24490                                  ;hkn; SS is DOSDATA
 24491                                  	;context ES
 24492 0000409B 16                      	push	ss
 24493 0000409C 07                      	pop	es
 24494 0000409D E82701                  	call	DEVNAME 		; blast BX
 24495 000040A0 07                      	POP	ES			; Restore ES:BP
 24496 000040A1 720B                    	JC	short FindFile		; Not a device
 24497 000040A3 08C0                    	OR	AL,AL			; Test next char again
 24498 000040A5 7403                    	JZ	short GO_BDEV
 24499 000040A7 E9C800                  	JMP	FILEINPATH		; Device name in middle of path
 24500                                  
 24501                                  GO_BDEV:
 24502 000040AA 5E                      	POP	SI			; Points to NUL at end of path
 24503 000040AB E989FE                  	JMP	Build_devJ
 24504                                  
 24505                                  FindFile:
 24506                                  ;;;; 7/28/86
 24507 000040AE 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24508 000040B3 7505                    	JNZ	short NOE5		; no
 24509 000040B5 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24510                                  NOE5:
 24511                                  ;;;; 7/28/86
 24512 000040BA 57                      	PUSH	DI			; Start of this element
 24513 000040BB 06                      	PUSH	ES			; Save ES:BP
 24514 000040BC 51                      	PUSH	CX			; CL return from NameTrans
 24515                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24516                                  
 24517 000040BD E89502                  	CALL	LookupPath		; call fastopen to get dir entry
 24518 000040C0 7303                    	JNC	short DIR_FOUND		; found dir entry
 24519                                  
 24520                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24521 000040C2 E8B0FC                  	call	FINDENTRY
 24522                                  DIR_FOUND:
 24523 000040C5 59                      	POP	CX
 24524 000040C6 07                      	POP	ES
 24525 000040C7 5F                      	POP	DI
 24526 000040C8 7303                    	JNC	short LOAD_BUF
 24527 000040CA E9CA00                  	JMP	BADPATHPOP
 24528                                  
 24529                                  LOAD_BUF:
 24530 000040CD C53E[E205]              	LDS	DI,[CURBUF]
 24531                                  	;test	byte [bx+0Bh],10h
 24532 000040D1 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24533 000040D5 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24534 000040D7 E99800                  	JMP	FILEINPATH		; Error or end of path
 24535                                  
 24536                                  ; if we are not setting the directory, then check for end of string
 24537                                  
 24538                                  GO_NEXT:
 24539                                  ;hkn; SS override
 24540 000040DA 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24541 000040E0 7423                    	JZ	short SetDir
 24542 000040E2 89FA                    	MOV	DX,DI			; Save pointer to entry
 24543 000040E4 8CD9                    	MOV	CX,DS
 24544                                  
 24545                                  ;hkn; SS is DOSDATA
 24546                                  	;context DS
 24547 000040E6 16                      	push	ss
 24548 000040E7 1F                      	pop	ds
 24549 000040E8 5F                      	POP	DI			; Start of next element
 24550                                  	; 19/05/2019 - Retro DOS v4.0
 24551                                  	; MSDOS 6.0
 24552 000040E9 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24553 000040EE 740B                    	JZ	short _nofast			; the FastOpen
 24554 000040F0 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24555 000040F5 7404                    	JZ	short _nofast			; no
 24556 000040F7 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24557                                  _nofast:
 24558 000040FB 803D00                  	CMP	BYTE [DI],0
 24559                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24560                                  	;;JMP	_SETRET  ; retn		; Got it
 24561                                  	;retn	; 05/09/2018
 24562                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24563                                  	;jmp	_SETRET
 24564                                  	; 16/12/2022
 24565 000040FE 7421                    	jz	short _SETRET
 24566                                  
 24567                                  NEXT_ONE:
 24568 00004100 57                      	PUSH	DI			; Put start of next element back on stack
 24569 00004101 89D7                    	MOV	DI,DX
 24570 00004103 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24571                                  SetDir:
 24572 00004105 8B14                    	MOV	DX,[SI] 		; Dir_first
 24573                                  
 24574                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24575 00004107 1E                      	PUSH	DS		      ; save [curbuf+2]
 24576                                  ;hkn; SS is DOSDATA
 24577 00004108 16                      	push	ss
 24578 00004109 1F                      	pop	ds		      ; set DS Dosgroup
 24579                                  	;test	byte [FastOpenFlg],2
 24580 0000410A F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24581 0000410F 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24582 00004111 89D3                    	MOV	BX,DX		      ; not found
 24583 00004113 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24584 00004117 50                      	PUSH	AX		      ; save device id (AH)
 24585 00004118 E89BFD                  	call	SETDIRSRCH
 24586 0000411B 58                      	POP	AX		      ; restore device id (AH)
 24587 0000411C 83C402                  	ADD	SP,2		      ; pop ds in stack
 24588 0000411F EB37                    	JMP	short FAST_OPEN_SKIP
 24589                                  
 24590                                  	; 16/12/2022
 24591                                  _SETRET:
 24592 00004121 C3                      	retn
 24593                                  
 24594                                  DO_NORMAL:
 24595 00004122 1F                      	POP	DS			; DS = [curbuf + 2]
 24596                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24597                                  
 24598 00004123 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24599 00004125 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24600 00004127 53                      	PUSH	BX
 24601 00004128 50                      	PUSH	AX
 24602 00004129 56                      	PUSH	SI
 24603 0000412A 51                      	PUSH	CX
 24604                                  	;push	word [di+6]
 24605 0000412B FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24606                                  	; 19/05/2019
 24607                                  	; MSDOS 6.0
 24608                                  	;push	word [di+8]
 24609 0000412E FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24610 00004131 89D3                    	MOV	BX,DX
 24611                                  
 24612                                  ;hkn; SS is DOSDATA
 24613                                  	;context DS
 24614 00004133 16                      	push	ss
 24615 00004134 1F                      	pop	ds
 24616                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24617 00004135 E87EFD                  	call	SETDIRSRCH		; the entry sector buffer
 24618                                  	; 19/05/2019
 24619                                  	; MSDOS 6.0
 24620 00004138 8F06[0706]              	POP	word [HIGH_SECTOR]
 24621 0000413C 5A                      	POP	DX
 24622 0000413D 7203                    	JC	short SKIP_GETB
 24623                                  	; 22/09/2023
 24624                                  	;;mov	byte [ALLOWED],18h
 24625                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 24626                                  	;XOR	AL,AL ; *
 24627                                  	;;invoke GETBUFFR		; Get the entry buffer back
 24628                                  	;call	GETBUFFR
 24629 0000413F E8FA17                  	call	GETBUFFER ; * ; pre-read
 24630                                  SKIP_GETB:
 24631 00004142 59                      	POP	CX
 24632 00004143 5E                      	POP	SI
 24633 00004144 58                      	POP	AX
 24634 00004145 5B                      	POP	BX
 24635 00004146 7305                    	JNC	short SET_THE_BUF
 24636 00004148 5F                      	POP	DI			; Start of next element
 24637 00004149 89FE                    	MOV	SI,DI			; Point with SI
 24638 0000414B EB21                    	JMP	SHORT _BADPATH
 24639                                  
 24640                                  SET_THE_BUF:
 24641 0000414D E879F5                  	call	SET_BUF_AS_DIR
 24642 00004150 8B3E[E205]              	MOV	DI,[CURBUF]
 24643 00004154 01FE                    	ADD	SI,DI			; Get the offsets back
 24644 00004156 01FB                    	ADD	BX,DI
 24645                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24646                                  FAST_OPEN_SKIP:
 24647 00004158 5F                      	POP	DI			; Start of next element
 24648 00004159 E89D02                  	CALL	InsertPath		; insert dir entry info
 24649                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24650 0000415C 8A05                    	MOV	AL,[DI]
 24651 0000415E 08C0                    	OR	AL,AL
 24652 00004160 74BF                    	JZ	short _SETRET		; At end
 24653 00004162 47                      	INC	DI			; Skip over "/"
 24654 00004163 89FE                    	MOV	SI,DI			; Point with SI
 24655 00004165 E8260F                  	call	PATHCHRCMP
 24656 00004168 7503                    	JNZ	short find_bad_name	; oops
 24657 0000416A E9B1FE                  	JMP	FINDPATH		; Next element
 24658                                  
 24659                                  find_bad_name:
 24660 0000416D 4E                      	DEC	SI			; Undo above INC to get failure point
 24661                                  _BADPATH:
 24662 0000416E 30C9                    	XOR	CL,CL			; Set zero
 24663 00004170 EB2C                    	JMP	SHORT BADPRET
 24664                                  
 24665                                  FILEINPATH:
 24666 00004172 5F                      	POP	DI			; Start of next element
 24667                                  
 24668                                  ;hkn; SS is DOSDATA
 24669                                  	;context DS			; Got to from one place with DS gone
 24670 00004173 16                      	push	ss
 24671 00004174 1F                      	pop	ds
 24672                                  
 24673                                  ; DOS 3.3 FastOpen
 24674                                  	;test	byte [FastOpenFlg],1
 24675 00004175 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24676 0000417A 740B                    	JZ	short NO_FAST		; device info to fastopen
 24677                                  	;test	byte [FastOpenFlg],2
 24678 0000417C F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24679 00004181 7404                    	JZ	short NO_FAST
 24680 00004183 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24681                                  					 ; success
 24682                                  NO_FAST:
 24683                                  ; DOS 3.3 FastOpen
 24684 00004187 8A05                    	MOV	AL,[DI]
 24685 00004189 08C0                    	OR	AL,AL
 24686 0000418B 7404                    	JZ	short INCRET
 24687 0000418D 89FE                    	MOV	SI,DI			; Path too long
 24688 0000418F EB0D                    	JMP	SHORT BADPRET
 24689                                  
 24690                                  INCRET:
 24691                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24692                                  
 24693 00004191 E86502                  	CALL   InsertPath		; insert dir entry info
 24694                                  
 24695                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24696 00004194 FEC0                    	INC	AL			; Reset zero
 24697                                  	; 16/12/2022	
 24698                                  ;_SETRET:
 24699 00004196 C3                      	retn
 24700                                  
 24701                                  BADPATHPOP:
 24702 00004197 5E                      	POP	SI			; Start of next element
 24703 00004198 8A04                    	MOV	AL,[SI]
 24704 0000419A 89FE                    	MOV	SI,DI			; Start of bad element
 24705 0000419C 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24706                                  BADPRET:
 24707 0000419E A0[6D05]                	MOV	AL,[SATTRIB]
 24708 000041A1 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24709 000041A4 F9                      	STC
 24710 000041A5 C3                      	retn
 24711                                  
 24712                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24713                                  ;---------------------------------------------------------------------------
 24714                                  ;
 24715                                  ; Procedure Name : STARTSRCH
 24716                                  ;
 24717                                  ; Inputs:
 24718                                  ;	[THISDPB] Set
 24719                                  ; Function:
 24720                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24721                                  ; Outputs:
 24722                                  ;	ES:BP = Drive parameters
 24723                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24724                                  ; Destroys ES,BP,AX
 24725                                  ;--------------------------------------------------------------------------
 24726                                  
 24727                                  STARTSRCH:
 24728 000041A6 C42E[8A05]              	LES	BP,[THISDPB]
 24729 000041AA 31C0                    	XOR	AX,AX
 24730 000041AC A3[4803]                	MOV	[LASTENT],AX
 24731 000041AF A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24732 000041B2 48                      	DEC	AX
 24733 000041B3 A3[D805]                	MOV	[ENTFREE],AX
 24734 000041B6 A3[DA05]                	MOV	[ENTLAST],AX
 24735 000041B9 C3                      	retn
 24736                                  
 24737                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24738                                  ;----------------------------------------------------------------------------
 24739                                  ; Procedure Name : MatchAttributes
 24740                                  ;
 24741                                  ; Input:    [Attrib] = attribute to search for
 24742                                  ;	    CH = found attribute
 24743                                  ; Output:   JZ <match>
 24744                                  ;	    JNZ <nomatch>
 24745                                  ; Registers modified: noneski
 24746                                  ;----------------------------------------------------------------------------
 24747                                  
 24748                                  MatchAttributes:
 24749 000041BA 50                      	PUSH	AX
 24750                                  
 24751                                  ;hkn; SS override
 24752 000041BB 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24753 000041BF F6D0                    	NOT	AL			; AL <- SearchSet'
 24754 000041C1 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24755                                  	;and	al,16h
 24756 000041C3 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24757                                  ;
 24758                                  ; the result is non-zero if an attribute is not in the search set
 24759                                  ; and in the found set and in the important set. This means that we do not
 24760                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24761                                  ;
 24762 000041C5 58                      	POP	AX
 24763 000041C6 C3                      	retn
 24764                                  
 24765                                  ; 19/05/2019 - Retro DOS v4.0
 24766                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24767                                  
 24768                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24769                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24770                                  
 24771                                  ;Break <DevName - Look for name of device>
 24772                                  ;---------------------------------------------------------------------------
 24773                                  ;
 24774                                  ; Procedure Name : DevName
 24775                                  ;
 24776                                  ; Inputs:
 24777                                  ;	DS,ES:DOSDATA
 24778                                  ;	Filename in NAME1
 24779                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24780                                  ; Function:
 24781                                  ;	Determine if file is in list of I/O drivers
 24782                                  ; Outputs:
 24783                                  ;	Carry set if not a device
 24784                                  ;	ELSE
 24785                                  ;	Zero flag set
 24786                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24787                                  ;	     bits 0-4 set from low byte of attribute word
 24788                                  ;	DEVPT = DWORD pointer to Device header of device
 24789                                  ; BX destroyed, others preserved
 24790                                  ;---------------------------------------------------------------------------
 24791                                  
 24792                                  DEVNAME:
 24793                                  	; 28/07/2018 - Retro DOS v3.0
 24794                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24795                                  
 24796 000041C7 56                      	PUSH	SI
 24797 000041C8 57                      	PUSH	DI
 24798 000041C9 51                      	PUSH	CX
 24799 000041CA 50                      	PUSH	AX
 24800                                  
 24801                                  ; E5 special code
 24802 000041CB FF36[4B05]              	PUSH	WORD [NAME1]
 24803 000041CF 803E[4B05]05            	CMP	byte [NAME1],5
 24804 000041D4 7505                    	JNZ	short NOKTR
 24805 000041D6 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24806                                  NOKTR:
 24807                                  	;test	byte [ATTRIB],8
 24808 000041DB F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24809                                  					; If looking for VOL id don't find devs
 24810 000041E0 7521                    	JNZ	short RET31
 24811                                  
 24812                                  ;hkn; NULDEV is in DOSDATA
 24813 000041E2 BE[4800]                	MOV	SI,NULDEV
 24814                                  LOOKIO:
 24815                                  	; 21/11/2022
 24816                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24817                                  	; 17/12/2022
 24818                                  	;test	byte [si+5],80h
 24819 000041E5 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24820                                  	;;test	word [si+4],8000h
 24821                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24822 000041E9 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24823 000041EB 89F0                    	MOV	AX,SI
 24824                                  	;add	si,10
 24825 000041ED 83C60A                  	ADD	SI,SYSDEV.NAME
 24826                                  
 24827                                  ;hkn; NAME1 is in DOSDATA
 24828 000041F0 BF[4B05]                	MOV	DI,NAME1
 24829 000041F3 B90400                  	MOV	CX,4			; All devices are 8 letters
 24830 000041F6 F3A7                    	REPE	CMPSW			; Check for name in list
 24831 000041F8 89C6                    	MOV	SI,AX
 24832 000041FA 7415                    	JZ	short IOCHK		; Found it?
 24833                                  SKIPDEV:
 24834 000041FC C534                    	LDS	SI,[SI]			; Get address of next device
 24835 000041FE 83FEFF                  	CMP	SI,-1			; At end of list?
 24836 00004201 75E2                    	JNZ	short LOOKIO
 24837                                  RET31:	
 24838 00004203 F9                      	STC				; Not found
 24839                                  RETNV:	
 24840 00004204 8CD1                    	MOV	CX,SS
 24841 00004206 8ED9                    	MOV	DS,CX
 24842                                  
 24843 00004208 8F06[4B05]              	POP	WORD [NAME1]
 24844 0000420C 58                      	POP	AX
 24845 0000420D 59                      	POP	CX
 24846 0000420E 5F                      	POP	DI
 24847 0000420F 5E                      	POP	SI
 24848 00004210 C3                      	RETN
 24849                                  
 24850                                  IOCHK:
 24851                                  ;hkn; SS override for DEVPT
 24852 00004211 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24853                                  	;mov	bh,[si+4]
 24854 00004216 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24855 00004219 80CFC0                  	OR	BH,0C0h
 24856 0000421C 80E7DF                  	and	bh,0DFh
 24857                                  	;AND	BH,~(020h)		; Clears Carry
 24858 0000421F 368936[9A05]            	MOV	[SS:DEVPT],SI
 24859 00004224 EBDE                    	JMP	short RETNV
 24860                                  
 24861                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24862                                  ;---------------------------------------------------------------------------
 24863                                  ; Procedure Name : Build_device_ent
 24864                                  ;
 24865                                  ; Inputs:
 24866                                  ;	[NAME1] has name
 24867                                  ;	BH is attribute field (supplied by DEVNAME)
 24868                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24869                                  ; Function:
 24870                                  ;	Build a directory entry for a device at DEVFCB
 24871                                  ; Outputs:
 24872                                  ;	BX points to DEVFCB
 24873                                  ;	SI points to dir_first field
 24874                                  ;	AH = input BH
 24875                                  ;	AL = 0
 24876                                  ;	dir_first = DEVPT
 24877                                  ;	Zero Set, Carry Clear
 24878                                  ; DS,ES,BP preserved, others destroyed
 24879                                  ;--------------------------------------------------------------------------
 24880                                  
 24881                                  Build_device_ent:
 24882 00004226 B82020                  	MOV	AX,"  " ; 2020h
 24883                                  
 24884                                  ;hkn; DEVFCB is in DOSDATA
 24885 00004229 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24886                                  
 24887                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 24888                                  
 24889 0000422C AB                      	STOSW
 24890 0000422D AA                      	STOSB				; Blank out extent field
 24891                                  	;mov	al,40h
 24892 0000422E B040                    	MOV	AL,attr_device
 24893                                  
 24894                                  ;	Fill Dir_attr
 24895                                  
 24896 00004230 AA                      	STOSB				; Set attribute field
 24897 00004231 31C0                    	XOR	AX,AX
 24898 00004233 B90A00                  	MOV	CX,10
 24899                                  
 24900                                  ; Fill dir_pad
 24901                                  
 24902 00004236 F3AB                    	REP	STOSW			; Fill rest with zeros
 24903 00004238 E8B5C8                  	call	DATE16
 24904                                  
 24905                                  ;hkn; DEVFCB is in DOSDATA
 24906 0000423B BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24907 0000423E 92                      	XCHG	AX,DX
 24908                                  
 24909                                  ; Fill dir_time
 24910                                  
 24911 0000423F AB                      	STOSW
 24912 00004240 92                      	XCHG	AX,DX
 24913                                  
 24914                                  ; Fill dir_date
 24915                                  
 24916 00004241 AB                      	STOSW
 24917 00004242 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24918 00004244 A1[9A05]                	MOV	AX,[DEVPT]
 24919                                  
 24920                                  ; Fill dir_first
 24921                                  
 24922 00004247 AB                      	STOSW				; Dir_first points to device
 24923 00004248 A1[9C05]                	MOV	AX,[DEVPT+2]
 24924                                  ;
 24925                                  ; Fill dir_size_l
 24926                                  ;
 24927 0000424B AB                      	STOSW
 24928 0000424C 88FC                    	MOV	AH,BH			; Put device atts in AH
 24929                                  
 24930                                  ;hkn; DEVFCB is in DOSDATA
 24931 0000424E BB[4B05]                	MOV	BX,DEVFCB
 24932 00004251 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24933 00004253 C3                      	retn
 24934                                  
 24935                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24936                                  ;----------------------------------------------------------------------------
 24937                                  ;
 24938                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24939                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24940                                  ;   If invalid, reset original CDS to root.
 24941                                  ;
 24942                                  ;   Inputs:	ThisCDS points to CDS of interest
 24943                                  ;		SS:DI points to temp buffer
 24944                                  ;   Outputs:	The current directory string is validated on the appropriate
 24945                                  ;		    drive
 24946                                  ;		ThisDPB changed
 24947                                  ;		ES:DI point to CDS
 24948                                  ;		Carry set if error (currently user FAILed to I 24)
 24949                                  ;   Registers modified: all
 24950                                  ;----------------------------------------------------------------------------
 24951                                  
 24952                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24953                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24954                                  
 24955                                  ValidateCDS:
 24956                                  	; 19/05/2019 - Retro DOS v4.0
 24957                                  	; 28/07/2018 - Retro DOS v3.0
 24958                                  
 24959                                     %define  Temp	[bp-2]	; word
 24960                                     %define  SaveCDS	[bp-6]	; dword
 24961                                     %define  SaveCDSL	[bp-6]	; word
 24962                                     %define  SaveCDSH	[bp-4]	; word
 24963                                  
 24964                                  	;Enter
 24965 00004254 55                      	push	bp
 24966 00004255 89E5                    	mov	bp,sp
 24967 00004257 83EC06                  	sub	sp,6
 24968                                  
 24969 0000425A 897EFE                  	MOV	Temp,DI
 24970                                  
 24971                                  ;hkn; SS override
 24972 0000425D 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24973 00004262 8976FA                  	MOV	SaveCDSL,SI
 24974 00004265 8C5EFC                  	MOV	SaveCDSH,DS
 24975                                  	;EnterCrit critDisk
 24976 00004268 E8A2D0                  	call	ECritDisk
 24977                                  	; 21/11/2022
 24978                                  	;test	byte [SI+curdir.flags+1],80h
 24979                                  	;test	word [si+67],8000h
 24980                                  	; 17/12/2022
 24981                                  	;test	byte [SI+68],80h
 24982 0000426B F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24983                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24984 0000426F 7403                    	JZ	short _DoSplice
 24985 00004271 E99200                  	JMP	FatFail
 24986                                  _DoSplice:
 24987 00004274 30D2                    	XOR	DL,DL
 24988 00004276 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24989                                  
 24990                                  ;hkn; SS is DOSDATA
 24991                                  	;Context ES
 24992 0000427B 16                      	push	ss
 24993 0000427C 07                      	pop	es
 24994                                  	;Invoke	FStrcpy
 24995 0000427D E862CF                  	call	FStrCpy
 24996 00004280 8B76FE                  	MOV	SI,Temp
 24997                                  
 24998                                  ;hkn; SS is DOSDATA
 24999                                  	;Context DS
 25000 00004283 16                      	push	ss
 25001 00004284 1F                      	pop	ds	
 25002                                  	;Invoke	Splice
 25003 00004285 E85D2B                  	call	Splice
 25004                                  
 25005                                   ;hkn; SS is DOSDATA
 25006                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25007 00004288 16                      	push	ss
 25008 00004289 1F                      	pop	ds
 25009 0000428A 8816[4C03]              	MOV	[NoSetDir],DL
 25010 0000428E C43E[A205]              	LES	DI,[THISCDS]
 25011                                  	;SAVE	<BP>
 25012 00004292 55                      	push	bp
 25013                                  	;Invoke	FATREAD_CDS
 25014 00004293 E83114                  	call	FATREAD_CDS	
 25015                                  	;RESTORE <BP>
 25016 00004296 5D                      	pop	bp
 25017 00004297 726D                    	JC	short FatFail
 25018                                  
 25019 00004299 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25020                                  	;cmp	word [si+73],-1
 25021 0000429D 837C49FF                	CMP	word [SI+curdir.ID],-1
 25022 000042A1 7555                    	JNZ	short RestoreCDS
 25023                                  
 25024                                  ;hkn; SS is DOSDATA
 25025                                  	;Context ES
 25026 000042A3 16                      	push	ss
 25027 000042A4 07                      	pop	es
 25028                                  
 25029                                  ;hkn; SS override
 25030                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25031 000042A5 36FF36[B205]            	push	word [SS:WFP_START]
 25032                                  	;cmp	si,[bp-6]
 25033 000042AA 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25034 000042AD 750B                    	JNZ	short DoChdir
 25035                                  	;mov	di,[bp-2]
 25036 000042AF 8B7EFE                  	MOV	DI,Temp
 25037                                  
 25038                                  ;hkn; SS override
 25039 000042B2 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25040                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25041 000042B7 E828CF                  	call	FStrCpy
 25042                                  DoChdir:
 25043                                  ;hkn; SS is DOSDATA
 25044                                  	;Context DS
 25045 000042BA 16                      	push	ss
 25046 000042BB 1F                      	pop	ds
 25047                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25048 000042BC FF36[6D05]              	push	word [SATTRIB]
 25049 000042C0 55                      	push	bp
 25050                                  	;Invoke	DOS_ChDir
 25051 000042C1 E8F0EE                  	call	DOS_CHDIR
 25052                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25053 000042C4 5D                      	pop	bp
 25054 000042C5 5B                      	pop	bx
 25055 000042C6 8F06[B205]              	pop	word [WFP_START]
 25056 000042CA 881E[6D05]              	MOV	[SATTRIB],BL
 25057 000042CE C576FA                  	LDS	SI,SaveCDS
 25058 000042D1 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25059                                  
 25060                                  ;hkn; SS override for THISCDS
 25061 000042D3 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25062 000042D8 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25063 000042DD 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25064 000042DF 884C03                  	MOV	[SI+3],CL		;	    }
 25065                                  SetCluster:
 25066                                  	;mov	word [si+73],0FFFFh
 25067 000042E2 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25068 000042E7 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25069                                  	; 21/11/2022
 25070                                  	;test	byte [si+curdir.flags+1],20h
 25071                                  	; 19/05/2019
 25072                                  	; MSDOS 6.0
 25073                                  	; 17/12/2022
 25074                                  	;test	byte [si+68],20h
 25075 000042EC F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25076                                  	;;test	word [si+67],2000h
 25077                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25078 000042F0 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25079 000042F2 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25080                                  _setdirclus:
 25081                                  	;mov	[si+73],cx
 25082 000042F5 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25083                                  RestoreCDS:
 25084 000042F8 C47EFA                  	LES	DI,SaveCDS
 25085 000042FB 36893E[A205]            	MOV	[SS:THISCDS],DI
 25086 00004300 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25087 00004305 F8                      	CLC
 25088                                  FatFail:
 25089                                  	;LeaveCrit critDisk
 25090 00004306 E81FD0                  	call	LCritDisk
 25091                                  
 25092                                  	;les	di,[bp-6]
 25093 00004309 C47EFA                  	LES	DI,SaveCDS
 25094                                  	;Leave
 25095 0000430C 89EC                    	mov	sp,bp
 25096 0000430E 5D                      	pop	bp
 25097 0000430F C3                      	retn
 25098                                  
 25099                                  ; 28/07/2018 - Retro DOS v3.0
 25100                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25101                                  
 25102                                  ;Break	<CheckThisDevice - Check for being a device>
 25103                                  ;---------------------------------------------------------------------------
 25104                                  ;
 25105                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25106                                  ;   device specified. We will return carry if there is a device present. 
 25107                                  ;   The forms of devices we will recognize are:
 25108                                  ;
 25109                                  ;	[path]device
 25110                                  ;
 25111                                  ;   Note that the drive letter has *already* been removed. All other forms
 25112                                  ;   are not considered to be devices. If such a device is found we change
 25113                                  ;   the source pointer to point to the device component.
 25114                                  ;
 25115                                  ;   Inputs:	ES is DOSDATA
 25116                                  ;		DS:SI contains name
 25117                                  ;   Outputs:	ES is DOSDATA
 25118                                  ;		DS:SI point to name or device
 25119                                  ;		Carry flag set if device was found
 25120                                  ;		Carry flag reset otherwise
 25121                                  ;   Registers Modified: all except ES:DI, DS
 25122                                  ;----------------------------------------------------------------------------
 25123                                  
 25124                                  CheckThisDevice:
 25125 00004310 57                      	push	di
 25126 00004311 56                      	push	si
 25127 00004312 89F7                    	MOV	DI,SI
 25128                                  
 25129                                  ; Check for presence of \dev\ (Dam multiplan!)
 25130                                  
 25131 00004314 8A04                    	MOV	AL,[SI]
 25132 00004316 E8750D                  	call	PATHCHRCMP		; is it a path char?
 25133 00004319 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25134 0000431B 46                      	INC	SI			; simulate LODSB
 25135                                  
 25136                                  ; We have the leading path separator. Look for DEV part.
 25137                                  
 25138 0000431C AD                      	LODSW
 25139 0000431D 0D2020                  	OR	AX,2020h
 25140 00004320 3D6465                  	cmp	ax,"de"
 25141                                  	;CMP	AX,"e"<< 8 + "d"
 25142 00004323 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25143 00004325 AC                      	LODSB
 25144 00004326 0C20                    	OR	AL,20h
 25145 00004328 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25146 0000432A 7526                    	JNZ	short NotDevice
 25147 0000432C AC                      	LODSB
 25148 0000432D E85E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25149 00004330 7520                    	JNZ	short NotDevice		; no. go for it.
 25150                                  
 25151                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25152                                  ; SI and DevName may destroy DS.
 25153                                  
 25154                                  ParseDev:
 25155 00004332 1E                      	push	ds
 25156 00004333 56                      	push	si			; preserve the source pointer
 25157 00004334 E8950C                  	call	NameTrans		; advance DS:SI
 25158 00004337 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25159 0000433A F9                      	STC				; simulate a Carry return from DevName
 25160 0000433B 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25161                                  
 25162                                  ;hkn; SS is DOSDATA
 25163 0000433D 16                      	push	ss
 25164 0000433E 1F                      	pop	ds
 25165                                  
 25166                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25167                                  ;
 25168                                  ; SR;
 25169                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25170                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25171                                  ; old call set the volume attribute bit.
 25172                                  
 25173 0000433F A0[6D05]                	mov	al,[SATTRIB]
 25174 00004342 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25175                                  
 25176                                  ; M026 - end
 25177                                  
 25178 00004345 E87FFE                  	call	DEVNAME
 25179                                  
 25180                                  SkipSearch:
 25181 00004348 5E                      	pop	si
 25182 00004349 1F                      	pop	ds
 25183                                  
 25184                                  ; SI points to the beginning of the potential device. If we have a device
 25185                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25186                                  ; original value. At this point Carry set indicates FILE.
 25187                                  
 25188                                  CheckReturn:
 25189 0000434A 5F                      	pop	di			; get original SI
 25190 0000434B 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25191 0000434D 89FE                    	MOV	SI,DI
 25192                                  Check_Done:
 25193 0000434F 5F                      	pop	di
 25194 00004350 F5                      	CMC				; invert carry. Carry => device
 25195 00004351 C3                      	retn
 25196                                  NotDevice:
 25197 00004352 F9                      	STC
 25198 00004353 EBF5                    	JMP	short CheckReturn
 25199                                  
 25200                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25201                                  ;-----------------------------------------------------------------------------
 25202                                  ;
 25203                                  ; Procedure Name : LookupPath
 25204                                  ;
 25205                                  ; Output  DS:SI -> path name,
 25206                                  ;	  ES:DI -> dir entry info buffer
 25207                                  ;	  ES:CX -> extended dir info buffer
 25208                                  ;
 25209                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25210                                  ;			     FastOpen, DS:SI points to char just one after
 25211                                  ;			     the last char of path name which is fully or
 25212                                  ;			     partially found in FastOPen
 25213                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25214                                  ;
 25215                                  ;----------------------------------------------------------------------------
 25216                                  
 25217                                  LookupPath:
 25218                                  ;	PUSH	AX
 25219                                  
 25220                                  ;hkn; SS override
 25221                                  	;test	byte [ss:FastOpenFlg],1
 25222 00004355 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25223 0000435B 7503                    	JNZ	short FASTINST			    ; and this routine is
 25224                                  NOLOOK:
 25225 0000435D E99700                  	JMP	NOLOOKUP			    ; executed once
 25226                                  
 25227                                  FASTINST:
 25228                                  ;hkn; SS override
 25229                                  	;test	byte [ss:FastOpenFlg],8
 25230 00004360 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25231 00004366 75F5                    	JNZ	short NOLOOK			    ; yes
 25232                                  
 25233 00004368 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25234                                  
 25235                                  ;hkn; SS override
 25236 0000436B 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25237 00004370 BF[460D]                	MOV	DI,Dir_Info_Buff
 25238 00004373 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25239 00004376 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25240 00004378 1E                      	PUSH	DS
 25241 00004379 07                      	POP	ES
 25242                                  
 25243                                  ;hkn; SS override
 25244                                  	;call	far [bx+2]
 25245 0000437A FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25246 0000437D 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25247                                  
 25248 0000437F 8D5CFE                  	LEA	BX,[SI-2]
 25249                                  
 25250                                  ;hkn; SS override
 25251 00004382 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25252 00004387 745D                    	JZ	short NOTFOUND			    ; no
 25253                                  
 25254                                  	; 19/05/2019 - Retro DOS v4.0
 25255                                  
 25256                                  	; MSDOS 6.0				    ; fully or partially found
 25257 00004389 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25258 0000438C 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25259 0000438E 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25260                                  
 25261                                  ;hkn; SS override for attrib/sattrib
 25262 0000438F 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25263 00004394 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25264 00004399 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25265                                  	;mov	ch,[es:di+0Bh]
 25266 0000439E 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25267 000043A2 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 25268                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25269 000043A5 59                      	POP	CX				    ;AN000;FO.;
 25270 000043A6 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25271                                  parfnd:
 25272                                  
 25273                                  ;hkn; SS override
 25274 000043A8 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25275 000043AD 89CB                    	MOV	BX,CX
 25276                                  	; MSDOS 6.0
 25277                                  	;mov	ax,[bx+7]
 25278 000043AF 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25279                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25280 000043B2 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25281 000043B6 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25282 000043B9 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25283                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25284                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25285                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25286 000043BD 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25287 000043C0 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25288                                  
 25289 000043C4 06                      	PUSH	ES				    ; save ES
 25290                                  ;hkn; SS override
 25291 000043C5 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25292 000043CA 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25293                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25294 000043CD 07                      	POP	ES				    ; pop ES
 25295                                  ;SR;
 25296                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25297                                  ;indicate it is not a root dir
 25298                                  
 25299 000043CE 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25300 000043D5 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25301 000043DA 89FB                    	MOV	BX,DI				    ; start of entry
 25302                                  	;lea	si,[di+1Ah]
 25303 000043DC 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25304                                  						    ; dir_first field in the
 25305                                  						    ; dir entry
 25306                                  ;hkn; SS override for FastOpenFlg
 25307                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25308 000043DF 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25309                                  ;	POP	AX
 25310 000043E5 C3                      	RETN
 25311                                  NOTFOUND:
 25312 000043E6 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25313 000043E9 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25314 000043EB 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25315                                  Partial_Success:
 25316                                  	;and	byte [SS:FastOpenFlg],0FBh
 25317 000043F1 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25318                                  NOLOOKUP:
 25319                                  ;	POP	AX
 25320 000043F7 F9                      	STC
 25321 000043F8 C3                      	RETN
 25322                                  
 25323                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25324                                  ;-----------------------------------------------------------------------------
 25325                                  ;
 25326                                  ; Procedure Name : InsertPath
 25327                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25328                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25329                                  ;	  DS = DOSDATA
 25330                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25331                                  ;
 25332                                  ;-----------------------------------------------------------------------------
 25333                                  
 25334                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25335                                  
 25336                                  InsertPath:
 25337 000043F9 9C                      	PUSHF
 25338                                  ;hkn; SS override for FastOpenFlag
 25339                                  	;test	byte [SS:FastOpenFlg], 1
 25340 000043FA 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25341 00004400 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25342                                  	;test	byte [ss:FastOpenFlg],2
 25343 00004402 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25344 00004408 740D                    	JZ	short INSERT_DIR_INFO		; no
 25345                                  	;and	byte [ss:FastOpenFlg],0FDh
 25346 0000440A 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25347 00004410 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25348 00004415 EB5E                    	JMP	short GET_NEXT2
 25349                                  INSERT_DIR_INFO:				; save registers
 25350 00004417 1E                      	PUSH	DS
 25351 00004418 06                      	PUSH	ES
 25352 00004419 53                      	PUSH	BX
 25353 0000441A 56                      	PUSH	SI
 25354 0000441B 57                      	PUSH	DI
 25355 0000441C 51                      	PUSH	CX
 25356 0000441D 50                      	PUSH	AX
 25357                                  
 25358                                  ;hkn; SS override
 25359 0000441E 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25360 00004423 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25361                                  	;mov	ax,[di+6]
 25362 00004426 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25363                                  	; MSDOS 6.0
 25364                                  	;mov	[ss:si+1],ax
 25365 00004429 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25366                                  	; 19/05/2019 - Retro DOS v4.0
 25367 0000442D 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25368                                  
 25369                                  ;hkn; SS is DOSDATA
 25370 00004430 16                      	push	ss
 25371 00004431 1F                      	pop	ds
 25372                                  	; MSDOS 3.3	
 25373                                  	;;mov	[si+1],ax	
 25374                                  	;MOV	[SI+FEI.dirsec],AX
 25375                                  	; MSDOS 6.0
 25376                                  	;mov	[si+3],ax
 25377 00004432 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25378                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25379 00004435 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25380                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25381                                  	;mov	[si+3],ax ; MSDOS 3.3
 25382 00004438 894405                  	MOV	[SI+FEI.clusnum],AX
 25383                                  	; MSDOS 6.0
 25384 0000443B A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25385                                  	;mov	[si+7],ax
 25386 0000443E 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25387 00004441 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25388                                  	;mov	[si+9],ax
 25389 00004444 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25390                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25391 00004447 89D8                    	MOV	AX,BX
 25392                                  	;;add	di,16  ; MSDOS 3.3
 25393                                  	;add	di,20  ; MSDOS 6.0
 25394 00004449 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25395 0000444C 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25396                                  	;mov	cl,32
 25397 0000444E B120                    	MOV	CL,dir_entry.size
 25398 00004450 F6F1                    	DIV	CL
 25399                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25400 00004452 8804                    	mov	[si],al
 25401                                  
 25402 00004454 1E                      	PUSH	DS
 25403 00004455 07                      	POP	ES
 25404                                  
 25405 00004456 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25406 0000445A 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25407                                  	;cmp	word [di+1Ah],0
 25408 0000445C 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25409                                  					; never insert info when file is empty
 25410 00004460 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25411                                  
 25412 00004462 56                      	PUSH	SI			; ES:BX -> extended info
 25413 00004463 5B                      	POP	BX
 25414                                  
 25415                                  	;mov	al,2
 25416 00004464 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25417 00004466 BE[300D]                	MOV	SI,FastOpenTable
 25418                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25419                                  	; 07/12/2022
 25420 00004469 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25421                                  
 25422 0000446D F8                      	CLC
 25423                                  SKIP_INSERT:
 25424 0000446E 58                      	POP	AX
 25425 0000446F 59                      	POP	CX			; restore registers
 25426 00004470 5F                      	POP	DI
 25427 00004471 5E                      	POP	SI
 25428 00004472 5B                      	POP	BX
 25429 00004473 07                      	POP	ES
 25430 00004474 1F                      	POP	DS
 25431                                  GET_NEXT2:
 25432                                  	;or	[ss:FastOpenFlg],8
 25433 00004475 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25434                                  					; we got dir info from fastopen so
 25435                                  GET_NEXT_ELEMENT:
 25436 0000447B 9D                      	POPF
 25437 0000447C C3                      	RETN
 25438                                  
 25439                                  ;============================================================================
 25440                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25441                                  ;============================================================================
 25442                                  ; 17/07/2018 - Retro DOS v3.0
 25443                                  ; 30/04/2019 - Retro DOS v4.0
 25444                                  
 25445                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25446                                  
 25447                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25448                                  
 25449                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25450                                  
 25451                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25452                                  ;DEV001s:
 25453                                  ;		length of packets
 25454 0000447D 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25455                                  ;LenTab: db	22,14,22,13,15,14
 25456                                  
 25457                                  ;	Error Function
 25458                                  
 25459                                  CmdTab:
 25460 00004483 8604                    	DB	86h, DEVRD	; 0 input
 25461 00004485 8605                    	DB	86h, DEVRDND	; 1 input status
 25462 00004487 8708                    	DB	87h, DEVWRT	; 2 output
 25463 00004489 870A                    	DB	87h, DEVOST	; 3 output status
 25464 0000448B 8607                    	DB	86h, DEVIFL	; 4 input flush
 25465 0000448D 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25466                                  
 25467                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25468                                  
 25469                                  ;CmdTab:
 25470                                  ;	db	86h, 4
 25471                                  ;	db	86h, 5
 25472                                  ;	db	87h, 8
 25473                                  ;	db	87h, 10
 25474                                  ;	db	86h, 7
 25475                                  ;	db	86h, 5
 25476                                  
 25477                                  ;DEV001E:
 25478                                  
 25479                                  ; 30/04/2019 - Retro DOS v4.0
 25480                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25481                                  
 25482                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25483                                  ;----------------------------------------------------------------------------
 25484                                  ;
 25485                                  ; Procedure Name : IOFUNC
 25486                                  ;
 25487                                  ; Inputs:
 25488                                  ;	DS:SI Points to SFT
 25489                                  ;	AH is function code
 25490                                  ;		= 0 Input
 25491                                  ;		= 1 Input Status
 25492                                  ;		= 2 Output
 25493                                  ;		= 3 Output Status
 25494                                  ;		= 4 Flush
 25495                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25496                                  ;				   present.
 25497                                  ;	AL = character if output
 25498                                  ; Function:
 25499                                  ;	Perform indicated I/O to device or file
 25500                                  ; Outputs:
 25501                                  ;	AL is character if input
 25502                                  ;	If a status call
 25503                                  ;		zero set if not ready
 25504                                  ;		zero reset if ready (character in AL for input status)
 25505                                  ; For regular files:
 25506                                  ;	Input Status
 25507                                  ;		Gets character but restores position
 25508                                  ;		Zero set on EOF
 25509                                  ;	Input
 25510                                  ;		Gets character advances position
 25511                                  ;		Returns ^Z on EOF
 25512                                  ;	Output Status
 25513                                  ;		Always ready
 25514                                  ; AX altered, all other registers preserved
 25515                                  ;----------------------------------------------------------------------------
 25516                                  
 25517                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25518                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25519                                  
 25520                                  IOFUNC:
 25521 0000448F 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25522                                  					; DEVIOBUF
 25523 00004494 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25524 0000449B 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25525 000044A2 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25526                                  	;test	byte [si+6],80h
 25527                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25528 000044A6 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25529 000044AA 7403                    	JZ	short IOTO22		;AN000;
 25530 000044AC E9A500                  	JMP	IOTOFILE		;AN000;
 25531                                  IOTO22:
 25532                                  	;test	word [si+5],80h
 25533                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25534 000044AF F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25535 000044B3 7503                    	JNZ	short IOTO33		;AN000;
 25536 000044B5 E99C00                  	JMP	IOTOFILE		;AN000;
 25537                                  IOTO33:
 25538 000044B8 06                      	push	es ; * (MSDOS 6.21)
 25539 000044B9 E8A6BF                  	call	save_world
 25540 000044BC 8CDA                    	MOV	DX,DS
 25541 000044BE 8CD3                    	MOV	BX,SS
 25542 000044C0 8EDB                    	MOV	DS,BX
 25543 000044C2 8EC3                    	MOV	ES,BX
 25544 000044C4 31DB                    	XOR	BX,BX
 25545 000044C6 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25546 000044C9 7503                    	jnz	short _no_sys_wait
 25547                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25548                                  	; 16/12/2022
 25549 000044CB 80CF04                  	or	bh,04h
 25550                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25551                                  				    ; It is up to device driver to carry out
 25552                                  				    ; appropriate action.
 25553                                  _no_sys_wait:
 25554 000044CE 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25555 000044D2 31DB                    	XOR	BX,BX
 25556 000044D4 881E[8903]              	MOV	[IOMED],BL
 25557                                  
 25558 000044D8 88E3                    	MOV	BL,AH		 	; get function
 25559 000044DA 2E8AA7[7D44]            	MOV	AH,[cs:BX+LenTab]
 25560 000044DF D1E3                    	SHL	BX,1
 25561 000044E1 2E8B8F[8344]            	MOV	CX,[cs:BX+CmdTab]
 25562 000044E6 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25563 000044E9 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25564 000044ED 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25565                                  
 25566 000044F1 8EDA                    	MOV	DS,DX
 25567 000044F3 E86B01                  	CALL	DEVIOCALL
 25568 000044F6 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25569 000044FB 21FF                    	and	di,di
 25570 000044FD 7834                    	js	short DevErr
 25571                                  OKDevIO:
 25572 000044FF 8CD0                    	MOV	AX,SS
 25573 00004501 8ED8                    	MOV	DS,AX
 25574                                  
 25575                                  	;cmp	ch,5
 25576 00004503 80FD05                  	CMP	CH,DEVRDND
 25577 00004506 7506                    	JNZ	short DNODRD
 25578 00004508 A0[8903]                	MOV	AL,[IORCHR]
 25579 0000450B A2[BC03]                	MOV	[DEVIOBUF],AL
 25580                                  
 25581                                  DNODRD: 
 25582 0000450E 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25583 00004512 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25584                                  	;and	ah,2
 25585 00004514 80E402                  	AND	AH,STBUI>>8
 25586                                  
 25587                                  QuickReturn:				;AN000; 2/13/KK
 25588 00004517 E831BF                  	call	restore_world
 25589 0000451A 07                      	pop	es ; * (MSDOS 6.21)
 25590                                  
 25591                                  	; SR;
 25592                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25593                                  	; IoStatFail = -1 (set after return from the I24)
 25594                                  
 25595                                  	; MSDOS 6.0
 25596 0000451B 9C                      	pushf
 25597 0000451C 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25598 00004520 98                      	cbw				;sign extend to word
 25599 00004521 83F8FF                  	cmp	ax,-1
 25600 00004524 7507                    	jne	short not_fail_ret
 25601 00004526 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25602 0000452B 9D                      	popf
 25603 0000452C C3                      	retn
 25604                                  
 25605                                  not_fail_ret:
 25606 0000452D 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25607 00004531 9D                      	popf
 25608 00004532 C3                      	retn
 25609                                  
 25610                                  DevErr:
 25611 00004533 88CC                    	MOV	AH,CL
 25612 00004535 E88E0D                  	call	CHARHARD
 25613 00004538 3C01                    	CMP	AL,1
 25614 0000453A 7507                    	JNZ	short NO_RETRY
 25615 0000453C E80CBF                  	call	restore_world
 25616                                  	; 12/05/2019
 25617 0000453F 07                      	pop	es ; * (MSDOS 6.21)		
 25618 00004540 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25619                                  
 25620                                  NO_RETRY:
 25621                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25622                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25623                                  	; simply wants to ignore the error.
 25624                                  	;
 25625                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25626                                  	; should be checked by the caller on return
 25627                                  
 25628                                  					; SS override
 25629 00004543 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25630                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25631                                  
 25632                                  	; SR;
 25633                                  	; Check if user failed
 25634                                  
 25635                                  	; MSDOS 6.0
 25636 00004549 3C03                    	cmp	al,3
 25637 0000454B 7505                    	jnz	short not_fail
 25638 0000454D 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25639                                  not_fail:
 25640 00004552 EBAB                    	JMP	short OKDevIO
 25641                                  
 25642                                  IOTOFILE:
 25643 00004554 08E4                    	OR	AH,AH
 25644 00004556 7421                    	JZ	short IOIN
 25645 00004558 FECC                    	DEC	AH
 25646 0000455A 7405                    	JZ	short IOIST
 25647 0000455C FECC                    	DEC	AH
 25648 0000455E 7411                    	JZ	short IOUT
 25649                                  IOUT_retn:	; 18/12/2022
 25650 00004560 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25651                                  IOIST:
 25652                                  	;push	word [si+15h]
 25653 00004561 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25654                                  	;push	word [si+17h]
 25655 00004564 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25656 00004567 E80F00                  	CALL	IOIN
 25657                                  	;pop	word [si+17h]
 25658 0000456A 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25659                                  	;pop	word [si+15h]
 25660 0000456D 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25661 00004570 C3                      	retn
 25662                                  IOUT:
 25663 00004571 E82500                  	CALL	SETXADDR
 25664 00004574 E880EF                  	call	DOS_WRITE
 25665                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25666                                  	; 18/12/2022
 25667 00004577 EB52                    	jmp	RESTXADDR
 25668                                  ;IOUT_retn:
 25669                                  	;retn			; come crying to me when things don't
 25670                                  				; work ARR
 25671                                  IOIN:
 25672 00004579 E81D00                  	CALL	SETXADDR
 25673                                  					; SS override for DOS34_FLAG
 25674                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25675                                  	;or	word [ss:DOS34_FLAG],40h
 25676                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25677                                  	; 16/12/2022
 25678 0000457C 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25679 00004582 E849ED                  	CALL	DOS_READ
 25680                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25681                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25682                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25683                                  	; 16/12/2022
 25684 00004585 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25685 0000458B 09C9                    	OR	CX,CX			; Check EOF
 25686 0000458D E83B00                  	CALL	RESTXADDR
 25687                                  					; SS override
 25688 00004590 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25689 00004594 75CA                    	jnz	short IOUT_retn	
 25690 00004596 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25691 00004598 C3                      	retn
 25692                                  
 25693                                  SETXADDR:
 25694                                  					; SS override
 25695 00004599 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25696                                  
 25697 0000459E 06                      	push	es ; * (MSDOS 6.21)
 25698                                  
 25699 0000459F E8C0BE                  	call	save_world
 25700                                  					; SS override for DMAADD and THISSFT
 25701                                  	; 24/09/2023
 25702                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25703                                  	;PUSH	WORD [SS:DMAADD+2]
 25704 000045A2 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25705                                  
 25706 000045A7 16                      	push	ss
 25707 000045A8 1F                      	pop	ds
 25708                                  
 25709                                  	; 24/09/2023
 25710 000045A9 FF36[2C03]              	push	word [DMAADD]
 25711 000045AD FF36[2E03]              	push	word [DMAADD+2]
 25712                                  
 25713 000045B1 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25714 000045B5 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25715 000045B9 890E[2E03]              	MOV	[DMAADD+2],CX
 25716 000045BD 8B0E[8A03]              	MOV	CX,[IOXAD]
 25717 000045C1 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25718 000045C5 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25719 000045C9 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25720                                  
 25721                                  RESTXADDR:
 25722 000045CB 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25723 000045CF 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25724 000045D3 8F06[2C03]              	POP	WORD [DMAADD]
 25725                                  
 25726 000045D7 E871BE                  	call	restore_world
 25727                                  
 25728 000045DA 07                      	pop	es ; * (MSDOS 6.21)
 25729                                  					; SS override
 25730                                  RESTRET:
 25731 000045DB 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25732                                  
 25733                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25734                                  ; 21/11/2022
 25735                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25736                                  
 25737                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25738                                  
 25739                                  ;----------------------------------------------------------------------------
 25740                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25741                                  ;
 25742                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25743                                  ;	the SFT.
 25744                                  ;
 25745                                  ;	ENTRY	(ES:DI) = SFT
 25746                                  ;	EXIT	none
 25747                                  ;	USES	all
 25748                                  ;----------------------------------------------------------------------------
 25749                                  
 25750                                  DEV_OPEN_SFT:
 25751 000045E0 06                      	push	es ; * (MSDOS 6.21)
 25752 000045E1 E87EBE                  	call	save_world
 25753                                  	;mov	al,0Dh	
 25754 000045E4 B00D                    	MOV	AL,DEVOPN
 25755 000045E6 EB06                    	JMP	SHORT DO_OPCLS
 25756                                  
 25757                                  ;----------------------------------------------------------------------------
 25758                                  ; Procedure Name : DEV_CLOSE_SFT
 25759                                  ;
 25760                                  ; Inputs:
 25761                                  ;	ES:DI Points to SFT
 25762                                  ; Function:
 25763                                  ;	Issue a CLOSE call to the correct device
 25764                                  ; Outputs:
 25765                                  ;	None
 25766                                  ; ALL preserved
 25767                                  ;----------------------------------------------------------------------------
 25768                                  
 25769                                  DEV_CLOSE_SFT:
 25770 000045E8 06                      	push	es ; * (MSDOS 6.21)
 25771 000045E9 E876BE                  	call	save_world
 25772                                  	;mov	al,0Eh	
 25773 000045EC B00E                    	MOV	AL,DEVCLS
 25774                                  
 25775                                  	; Main entry for device open and close. AL contains the function 
 25776                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25777                                  	; open/close to block devices. This allows networks to function but 
 25778                                  	; does NOT hang up with bogus change-line code.
 25779                                  
 25780                                  	;entry	DO_OPCLS
 25781                                  DO_OPCLS:
 25782                                  	; Is the SFT for the net? If so, no action necessary.
 25783                                  
 25784                                  	; MSDOS 6.0
 25785                                  	;test	word [es:di+5],8000h
 25786                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25787 000045EE 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25788 000045F3 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25789 000045F5 30E4                    	XOR	AH,AH			; Unit
 25790                                  	;test	byte [es:di+5],80h
 25791 000045F7 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25792                                  	;les	di,[es:di+7]
 25793 000045FC 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25794 00004600 7513                    	JNZ	short GOT_DEV_ADDR
 25795                                  
 25796                                  	; We are about to call device open/close on a block driver. If no 
 25797                                  	; sharing then just short circuit to done.
 25798                                  	
 25799                                  	; MSDOS 6.0
 25800                                  					; SS override
 25801 00004602 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25802 00004608 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25803                                  
 25804                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25805                                  	;mov	ah,[es:di+1]
 25806 0000460A 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25807 0000460E 268A0D                  	mov	cl,[es:di]
 25808                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25809                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25810                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25811 00004611 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25812                                  GOT_DEV_ADDR:				; ES:DI -> device
 25813                                  	;test	word [es:di+4],800h
 25814                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25815 00004615 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25816 0000461A 7440                    	JZ	short OPCLS_DONE	; Device can't
 25817 0000461C 06                      	PUSH	ES
 25818 0000461D 1F                      	POP	DS
 25819 0000461E 89FE                    	MOV	SI,DI			; DS:SI -> device
 25820                                  
 25821                                  OPCLS_RETRY:
 25822                                  	;Context ES
 25823 00004620 16                      	push	ss
 25824 00004621 07                      	pop	es
 25825                                  					; DEVCALL is in DOSDATA
 25826 00004622 BF[5A03]                	MOV	DI,DEVCALL
 25827                                  
 25828 00004625 89FB                    	MOV	BX,DI
 25829 00004627 50                      	PUSH	AX
 25830                                  	;mov	al,13
 25831 00004628 B00D                    	MOV	AL,DOPCLHL
 25832 0000462A AA                      	STOSB				; Length
 25833 0000462B 58                      	POP	AX
 25834 0000462C 86E0                    	XCHG	AH,AL
 25835 0000462E AA                      	STOSB				; Unit
 25836 0000462F 86E0                    	XCHG	AH,AL
 25837 00004631 AA                      	STOSB				; Command
 25838 00004632 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25839 00004637 50                      	PUSH	AX			; Save Unit,Command
 25840                                  	;invoke	DEVIOCALL2
 25841 00004638 E82900                  	call	DEVIOCALL2
 25842                                  
 25843                                  	;mov	di,[es:bx+3]
 25844 0000463B 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25845                                  	;test	di,8000h
 25846                                  	;jz	short OPCLS_DONEP	
 25847 0000463F 21FF                    	and	di,di
 25848 00004641 7918                    	jns	short OPCLS_DONEP	; No error
 25849                                  	; 21/11/2022
 25850                                  	;test	word [si+4],8000h
 25851                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25852                                  	;test	word [si+5],80h
 25853 00004643 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25854 00004647 7404                    	JZ	short BLKDEV
 25855 00004649 B486                    	MOV	AH,86H			; Read error in data, Char dev
 25856 0000464B EB04                    	JMP	SHORT HRDERR
 25857                                  BLKDEV:
 25858 0000464D 88C8                    	MOV	AL,CL			; Drive # in AL
 25859 0000464F B406                    	MOV	AH,6			; Read error in data, Blk dev
 25860                                  HRDERR:
 25861                                  	;invoke	CHARHARD
 25862 00004651 E8720C                  	call	CHARHARD
 25863 00004654 3C01                    	cmp	al,1
 25864 00004656 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25865                                  					;  Note that FAIL is essentually IGNORED
 25866 00004658 58                      	POP	AX			; Get back Unit, Command
 25867 00004659 EBC5                    	JMP	short OPCLS_RETRY
 25868                                  OPCLS_DONEP:
 25869 0000465B 58                      	POP	AX			; Clean stack
 25870                                  OPCLS_DONE:
 25871 0000465C E8ECBD                  	call	restore_world
 25872 0000465F 07                      	pop	es ; * (MSDOS 6.21)
 25873 00004660 C3                      	retn
 25874                                  
 25875                                  ; 30/04/2019 - Retro DOS v4.0
 25876                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25877                                  
 25878                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25879                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25880                                  
 25881                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25882                                  ;----------------------------------------------------------------------------
 25883                                  ;**	DevIoCall  - Call Device
 25884                                  ;
 25885                                  ;	ENTRY	DS:SI Points to device SFT
 25886                                  ;		ES:BX Points to request data
 25887                                  ;	EXIT	DS:SI -> Device driver
 25888                                  ;	USES	DS:SI,AX
 25889                                  ;----------------------------------------------------------------------------
 25890                                  ;**	DevIoCall2 - Call Device
 25891                                  ;
 25892                                  ;	ENTRY	DS:SI Points to DPB
 25893                                  ;		ES:BX Points to request data
 25894                                  ;	EXIT	DS:SI -> Device driver
 25895                                  ;	USES	DS:SI,AX
 25896                                  ;----------------------------------------------------------------------------
 25897                                  
 25898                                  DEVIOCALL:
 25899                                  					; SS override for CALLSSEC, 
 25900                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25901 00004661 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25902                                  
 25903                                  	;entry	DEVIOCALL2
 25904                                  DEVIOCALL2:
 25905                                  	;EnterCrit critDevice
 25906 00004664 E8DBCC                  	call	ECritDevice
 25907                                  
 25908                                  	; MSDOS 6.0
 25909                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25910                                  	;test	byte [si+5],80h
 25911 00004667 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25912 0000466B 7548                    	jnz	short chardev2		;AN000; >32mb no
 25913                                  
 25914                                  	; 16/12/2022
 25915                                  	; 22/11/2022
 25916 0000466D 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25917 00004671 3C04                    	cmp	al,DEVRD	; 4
 25918 00004673 7408                    	je	short chkext	
 25919 00004675 3C08                    	cmp	al,DEVWRT	; 8
 25920 00004677 7404                    	je	short chkext
 25921 00004679 3C09                    	cmp	al,DEVWRTV	; 9
 25922 0000467B 7538                    	jne	short chardev2
 25923                                  
 25924                                  	; 16/12/2022
 25925                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25926                                  	;;cmp	byte [es:bx+2],4
 25927                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25928                                  	;JZ	short chkext		;AN000; >32mb   yes
 25929                                  	;;cmp	byte [es:bx+2],8
 25930                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25931                                  	;JZ	short chkext		;AN000; >32mb   yes
 25932                                  	;;cmp	byte [es:bx+2],9
 25933                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25934                                  	;				;AN000; >32mb write/verify ?
 25935                                  	;JNZ	short chardev2		;AN000; >32mb no
 25936                                  chkext:
 25937 0000467D E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25938 00004680 7255                    	JC	short dev_exit		;AN000;LB. done
 25939                                  
 25940                                  	;test	byte [si+4],2
 25941 00004682 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25942 00004686 741D                    	JZ	short chksector		;AN000;>32mb   no
 25943 00004688 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25944 0000468C 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25945 00004690 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25946 00004697 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25947 0000469B 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25948 0000469F 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25949 000046A3 EB10                    	JMP	short chardev2		;AN000; >32mb
 25950                                  chksector:				;AN000; >32mb
 25951 000046A5 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25952 000046AB 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25953                                  	;mov	word [es:bx+3],8107h
 25954 000046AD 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25955                                  					;AN000; >32mb
 25956 000046B3 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25957                                  
 25958                                  chardev2:				;AN000;
 25959                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25960                                  	; preserved
 25961                                  
 25962                                  	;mov	ax,[si+6]
 25963 000046B5 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25964 000046B8 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25965 000046BC 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25966 000046C1 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25967                                  
 25968                                  	;mov	ax,[si+8]
 25969 000046C6 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25970 000046C9 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25971 000046CD 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25972                                  
 25973                                  	; MSDOS 6.0
 25974 000046D2 E83A01                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25975 000046D5 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25976                                  
 25977                                  dev_exit:
 25978                                  	;LeaveCrit critDevice
 25979                                  	;call	LCritDevice
 25980                                  	;retn
 25981                                  	; 18/12/2022
 25982 000046D7 E983CC                  	jmp	LCritDevice
 25983                                  
 25984                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25985                                  ; 22/11/2022
 25986                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25987                                  
 25988                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25989                                  ;---------------------------------------------------------------------------
 25990                                  ;
 25991                                  ; Procedure Name : SETREAD, SETWRITE
 25992                                  ;
 25993                                  ; Inputs:
 25994                                  ;	DS:BX = Transfer Address
 25995                                  ;	CX = Record Count
 25996                                  ;	DX = Starting Record
 25997                                  ;	AH = Media Byte
 25998                                  ;	AL = Unit Code
 25999                                  ; Function:
 26000                                  ;	Set up the device call header at DEVCALL
 26001                                  ; Output:
 26002                                  ;	ES:BX Points to DEVCALL
 26003                                  ; No other registers effected
 26004                                  ;
 26005                                  ;---------------------------------------------------------------------------
 26006                                  
 26007                                  SETREAD:
 26008 000046DA 57                      	PUSH	DI
 26009 000046DB 51                      	PUSH	CX
 26010 000046DC 50                      	PUSH	AX
 26011 000046DD B104                    	MOV	CL,DEVRD ; mov cl,4
 26012                                  SETCALLHEAD:
 26013 000046DF B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26014 000046E1 16                      	PUSH	SS
 26015 000046E2 07                      	POP	ES
 26016                                  					; DEVCALL is in DOSDATA
 26017 000046E3 BF[5A03]                	MOV	DI,DEVCALL
 26018                                  
 26019 000046E6 AA                      	STOSB				; length
 26020 000046E7 58                      	POP	AX			; 
 26021 000046E8 AA                      	STOSB				; Unit
 26022 000046E9 50                      	PUSH	AX
 26023 000046EA 88C8                    	MOV	AL,CL
 26024 000046EC AA                      	STOSB				; Command code
 26025 000046ED 31C0                    	XOR	AX,AX
 26026 000046EF AB                      	STOSW				; Status
 26027 000046F0 83C708                  	ADD	DI,8			; Skip link fields
 26028 000046F3 58                      	POP	AX
 26029 000046F4 86E0                    	XCHG	AH,AL
 26030 000046F6 AA                      	STOSB				; Media byte
 26031 000046F7 86C4                    	XCHG	AL,AH
 26032 000046F9 50                      	PUSH	AX
 26033 000046FA 89D8                    	MOV	AX,BX
 26034 000046FC AB                      	STOSW
 26035                                  
 26036 000046FD 8CD8                    	MOV	AX,DS
 26037 000046FF AB                      	STOSW				; Transfer addr
 26038                                  
 26039 00004700 59                      	POP	CX			; Real AX
 26040 00004701 58                      	POP	AX			; Real CX
 26041 00004702 AB                      	STOSW				; Count
 26042                                  
 26043 00004703 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26044 00004704 AB                      	STOSW				; Start
 26045 00004705 91                      	XCHG	AX,CX
 26046 00004706 87D1                    	XCHG	DX,CX
 26047 00004708 5F                      	POP	DI
 26048                                  					; DEVCALL is in DOSDATA
 26049 00004709 BB[5A03]                	MOV	BX,DEVCALL
 26050 0000470C C3                      	retn
 26051                                  
 26052                                  	;entry	SETWRITE
 26053                                  SETWRITE:
 26054                                  
 26055                                  ; Inputs:
 26056                                  ;	DS:BX = Transfer Address
 26057                                  ;	CX = Record Count
 26058                                  ;	DX = Starting Record
 26059                                  ;	AH = Media Byte
 26060                                  ;	AL = Unit Code
 26061                                  ; Function:
 26062                                  ;	Set up the device call header at DEVCALL
 26063                                  ; Output:
 26064                                  ;	ES:BX Points to DEVCALL
 26065                                  ; No other registers effected
 26066                                  
 26067 0000470D 57                      	PUSH	DI
 26068 0000470E 51                      	PUSH	CX
 26069 0000470F 50                      	PUSH	AX
 26070 00004710 B108                    	MOV	CL,DEVWRT ; mov cl,8
 26071 00004712 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26072 00004717 EBC6                    	JMP	SHORT SETCALLHEAD
 26073                                  
 26074                                  ; 30/04/2019 - Retro DOS v4.0
 26075                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26076                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26077                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26078                                  
 26079                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26080                                  ;---------------------------------------------------------------------------
 26081                                  ;
 26082                                  ; Procedure Name : RW_SC
 26083                                  ;
 26084                                  ; Inputs:
 26085                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26086                                  ;	 [SC_STATUS]= SC validity status
 26087                                  ;	 [SEQ_SECTOR]= last sector read
 26088                                  ; Function:
 26089                                  ;	Read from or write through secondary cache
 26090                                  ; Output:
 26091                                  ;	ES:BX Points to DEVCALL
 26092                                  ;	carry clear, I/O is not done
 26093                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26094                                  ;	carry set, I/O is done
 26095                                  ;
 26096                                  ;----------------------------------------------------------------------------
 26097                                  
 26098                                  RW_SC:
 26099                                  	; SS override for all variables used.
 26100                                  	
 26101 00004719 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26102 0000471F 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26103 00004721 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26104 00004727 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26105 00004729 51                      	PUSH	CX			    ;AN000;LB.
 26106 0000472A 52                      	PUSH	DX			    ;AN000;LB. yes
 26107 0000472B 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26108 0000472C 56                      	PUSH	SI			    ;AN000;LB.
 26109 0000472D 06                      	PUSH	ES			    ;AN000;LB.
 26110 0000472E 57                      	PUSH	DI			    ;AN000;LB.
 26111                                  
 26112 0000472F 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26113 00004734 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26114 0000473A 7408                    	JZ	short doread		    ;AN000;LB. yes
 26115 0000473C E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26116 0000473F E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26117                                  scexit4:				    ;AN000;
 26118 00004742 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26119 00004743 C3                      	retn				    ;AN000;LB.
 26120                                  doread: 				    ;AN000;
 26121 00004744 E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26122 00004747 720A                    	JC	short readSC		    ;AN000;LB.
 26123 00004749 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26124 00004750 F9                      	STC				    ;AN000;LB. set carry
 26125 00004751 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26126                                  readSC: 				    ;AN000;
 26127 00004753 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26128 00004757 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26129 0000475C 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26130 00004761 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26131                                  	; 24/09/2023
 26132                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26133 00004766 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26134                                  chklow: 						
 26135 00004768 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26136 0000476B 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26137 0000476D 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26138 00004774 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26139 00004778 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26140                                  readsr:
 26141 0000477C 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26142 00004780 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26143 00004784 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26144 00004788 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26145                                  
 26146 0000478C 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26147 00004790 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26148 00004794 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26149 00004798 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26150 0000479C 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26151 000047A2 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26152 000047A6 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26153 000047AA 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26154 000047AE 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26155 000047B2 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26156 000047B6 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26157                                  saveseq2:				    ;AN000;
 26158 000047BA F8                      	CLC				    ;AN000;LB. clear carry
 26159                                  saveseq:				    ;AN000;	
 26160 000047BB 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26161 000047BF 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26162 000047C3 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26163 000047C7 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26164 000047CB EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26165                                  scexit2:				    ;AN000;LB.
 26166 000047CD F8                      	CLC				    ;AN000;LB.	clear carry
 26167                                  scexit: 				    ;AN000;		
 26168 000047CE 5F                      	POP	DI			    ;AN000;LB.
 26169 000047CF 07                      	POP	ES			    ;AN000;LB. restore registers
 26170 000047D0 5E                      	POP	SI			    ;AN000;LB.
 26171 000047D1 1F                      	POP	DS			    ;AN000;LB.
 26172 000047D2 5A                      	POP	DX			    ;AN000;LB.
 26173 000047D3 59                      	POP	CX			    ;AN000;LB.
 26174 000047D4 C3                      	retn				    ;AN000;LB.
 26175                                  
 26176                                  ;Break	<IN_SC -- check if in secondary cache>
 26177                                  ;--------------------------------------------------------------------------
 26178                                  ;
 26179                                  ; Procedure Name : IN_SC
 26180                                  ;
 26181                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26182                                  ;	   [CURSC_DRIVE]= current SC drive
 26183                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26184                                  ;	   [SC_CACHE_COUNT]= SC count
 26185                                  ;	   [HIGH_SECTOR]:DX= sector number
 26186                                  ; Function:
 26187                                  ;	Check if the sector is in secondary cache
 26188                                  ; Output:
 26189                                  ;	carry clear, in SC
 26190                                  ;	   CX= the index in the secondary cache
 26191                                  ;	carry set, not in SC
 26192                                  ;
 26193                                  ;---------------------------------------------------------------------------
 26194                                  
 26195                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26196                                  IN_SC:
 26197                                  	; SS override for all variables used
 26198 000047D5 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26199 000047D9 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26200 000047DE 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26201 000047E0 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26202 000047E4 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26203 000047E6 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26204 000047EB 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26205                                  	; 24/09/2023
 26206                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26207 000047F0 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26208 000047F2 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26209 000047F7 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26210 000047F9 F8                      	CLC				    ;AN000;;LB. clear carry
 26211                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26212                                  	; 16/12/2022
 26213 000047FA C3                      	retn	; 30/04/2019
 26214                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26215                                  	;jmp	short inexit
 26216                                  
 26217                                  outrange2:				    ;AN000;;LB. set carry
 26218 000047FB F9                      	STC				    ;AN000;;LB.
 26219                                  inexit: 				    ;AN000;;LB.
 26220 000047FC C3                      	retn				    ;AN000;;LB.
 26221                                  
 26222                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26223                                  ;---------------------------------------------------------------------------
 26224                                  ;
 26225                                  ; Procedure Name : Invalidate_Sc
 26226                                  ;
 26227                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26228                                  ;	   [CURSC_DRIVE]= current SC drive
 26229                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26230                                  ;	   [SC_CACHE_COUNT]= SC count
 26231                                  ;	   [SC_STATUS]= SC status word
 26232                                  ;	   [HIGH_SECTOR]:DX= sector number
 26233                                  ;
 26234                                  ; Function:
 26235                                  ;	invalidate secondary cache if in there
 26236                                  ; Output:
 26237                                  ;	[SC_STATUS] is updated
 26238                                  ;---------------------------------------------------------------------------
 26239                                  
 26240                                  INVALIDATE_SC:
 26241                                  	; SS override for all variables used
 26242                                  
 26243 000047FD E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26244 00004800 720C                    	JC	short outrange		    ;AN000;;LB. no
 26245 00004802 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26246 00004805 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26247 00004807 F7D0                    	NOT	AX			    ;AN000;;LB.
 26248 00004809 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26249                                  outrange:				    ;AN000;;LB.
 26250 0000480E C3                      	retn				    ;AN000;;LB.
 26251                                  
 26252                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26253                                  ; 22/11/2022
 26254                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26255                                  
 26256                                  ;Break	<VIRREAD- virtually read data into buffer>
 26257                                  ;--------------------------------------------------------------------------
 26258                                  ;
 26259                                  ; Procedure Name : SC_FLAG
 26260                                  ;
 26261                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26262                                  ;		     1, continuous sectors were read into SC
 26263                                  ; Function:
 26264                                  ;	   Move data from SC to buffer
 26265                                  ; Output:
 26266                                  ;	 carry clear, data is moved to buffer
 26267                                  ;	 carry set, bad sector or exceeds maximum sector
 26268                                  ;	   SC_FLAG =0
 26269                                  ;	   CALLSCNT=1
 26270                                  ;	   SC_STATUS= -1 if succeeded
 26271                                  ;     
 26272                                  ;		       0 if failed
 26273                                  ;--------------------------------------------------------------------------
 26274                                  
 26275                                  VIRREAD:
 26276                                  	; SS override for all variables used
 26277                                  
 26278 0000480F 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26279 00004815 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26280 00004817 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26281 0000481B 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26282 0000481F 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26283 00004823 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26284 00004827 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26285 0000482D 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26286                                  
 26287                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26288 00004834 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26289 0000483A 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26290 0000483C 1E                      	PUSH	DS			    ;AN000;;LB.
 26291 0000483D 56                      	PUSH	SI			    ;AN000;;LB.
 26292 0000483E 06                      	PUSH	ES			    ;AN000;;LB.
 26293 0000483F 57                      	PUSH	DI			    ;AN000;;LB.
 26294 00004840 52                      	PUSH	DX			    ;AN000;;LB.
 26295 00004841 51                      	PUSH	CX			    ;AN000;;LB.
 26296 00004842 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26297 00004844 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26298 00004847 59                      	POP	CX
 26299 00004848 5A                      	POP	DX			    ;AN000;;LB.
 26300 00004849 5F                      	POP	DI			    ;AN000;;LB.
 26301 0000484A 07                      	POP	ES			    ;AN000;;LB.
 26302 0000484B 5E                      	POP	SI			    ;AN000;;LB.
 26303 0000484C 1F                      	POP	DS			    ;AN000;;LB.
 26304 0000484D EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26305                                  scerror:				    ;AN000;
 26306 0000484F 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26307 00004856 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26308 0000485D 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26309 00004863 F9                      	STC				    ;AN000;;LB. carry set
 26310 00004864 C3                      	retn				    ;AN000;;LB.
 26311                                  sc2end: 				    ;AN000;
 26312 00004865 F8                      	CLC				    ;AN000;;LB. carry clear
 26313 00004866 C3                      	retn				    ;AN000;;LB.
 26314                                  
 26315                                  ; 30/04/2019 - Retro  DOS v4.0
 26316                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26317                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26318                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26319                                  
 26320                                  ;Break	<SC2BUF- move data from SC to buffer>
 26321                                  ;----------------------------------------------------------------------------
 26322                                  ;
 26323                                  ; Procedure Name : SC2BUF
 26324                                  ;
 26325                                  ; Inputs:  [SC_STATUS] = SC validity status
 26326                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26327                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26328                                  ; Function:
 26329                                  ;	   Move data from SC to buffer
 26330                                  ; Output:
 26331                                  ;	   carry clear, in SC  and data is moved
 26332                                  ;	   carry set, not in SC and data is not moved
 26333                                  ;---------------------------------------------------------------------------
 26334                                  
 26335                                  SC2BUF:
 26336                                  	; SS override for all variables used
 26337 00004867 E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26338                                  	;JC	short noSC		    ;AN000;LB. no
 26339                                  	; 24/09/2023
 26340 0000486A 723D                    	jc	short sexit
 26341 0000486C B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26342 0000486F D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26343 00004871 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26344 00004876 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26345                                  ;entry SC2BUF2
 26346                                  SC2BUF2:				    ;AN000;
 26347                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26348                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26349                                  	; 24/09/2023
 26350 00004878 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26351 0000487C 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26352 0000487D F7E1                    	mul	cx
 26353 0000487F 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26354 00004884 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26355 00004889 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26356 0000488B 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26357 0000488D 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26358 00004892 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26359                                  	; 24/09/2023
 26360                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26361 00004897 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26362                                  ;entry MOVWORDS
 26363                                  MOVWORDS:				    ;AN000;
 26364 00004899 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26365 0000489F 7403                    	JZ	short nodd		    ;AN000;LB. no
 26366 000048A1 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26367 000048A3 66                      	DB	66H			    ;AN000;LB. use double word move
 26368                                  nodd:
 26369 000048A4 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26370 000048A6 F8                      	CLC				    ;AN000;LB. clear carry
 26371 000048A7 C3                      	retn				    ;AN000;LB. exit
 26372                                  noSC:					    ;AN000;
 26373 000048A8 F9                      	STC				    ;AN000;LB. set carry
 26374                                  sexit:					    ;AN000;
 26375 000048A9 C3                      	retn				    ;AN000;LB.
 26376                                  
 26377                                  ;============================================================================
 26378                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26379                                  ;============================================================================
 26380                                  ; 29/07/2018 - Retro DOS v3.0
 26381                                  ; 19/05/2019 - Retro DOS v4.0
 26382                                  
 26383                                  ;	TITLE	MKNODE - Node maker
 26384                                  ;	NAME	MKNODE
 26385                                  
 26386                                  ;**	MKNODE.ASM
 26387                                  ;----------------------------------------------------------------------------
 26388                                  ;	Low level routines for making a new local file system node
 26389                                  ;	and filling in an SFT from a directory entry
 26390                                  ;
 26391                                  ;	BUILDDIR
 26392                                  ;	SETDOTENT
 26393                                  ;	MakeNode
 26394                                  ;	NEWENTRY
 26395                                  ;	FREEENT
 26396                                  ;	NEWDIR
 26397                                  ;	DOOPEN
 26398                                  ;	RENAME_MAKE
 26399                                  ;	CHECK_VIRT_OPEN
 26400                                  ;
 26401                                  ;	Revision history:
 26402                                  ;
 26403                                  ;	 AN000	version 4.0  Jan. 1988
 26404                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26405                                  
 26406                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26407                                  ;----------------------------------------------------------------------------
 26408                                  ;
 26409                                  ; Procedure Name : BUILDDIR,NEWDIR
 26410                                  ;
 26411                                  ; Inputs:
 26412                                  ;       ES:BP Points to DPB
 26413                                  ;       [THISSFT] Set if using NEWDIR entry point
 26414                                  ;               (used by ALLOCATE)
 26415                                  ;       [LASTENT] current last valid entry number in directory if no free
 26416                                  ;               entries
 26417                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26418                                  ; Function:
 26419                                  ;       Grow directory if no free entries and not root
 26420                                  ; Outputs:
 26421                                  ;       CARRY SET IF FAILURE
 26422                                  ;       ELSE
 26423                                  ;          AX entry number of new entry
 26424                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26425                                  ;               AX = first entry of new dir
 26426                                  ;       GETENT should be called to set [LASTENT]
 26427                                  ;
 26428                                  ;----------------------------------------------------------------------------
 26429                                  
 26430                                  ; 19/05/2019 - Retro DOS v4.0
 26431                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26432                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26433                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26434                                  
 26435                                  ; 24/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 MSDOS.SYS)
 26436                                  ; DOSCODE:8845h (MSDOS 6.22, MSDOS.SYS)
 26437                                  
 26438                                  BUILDDIR:
 26439                                  	; 29/07/2018 - Retro DOS v3.0
 26440                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26441                                  
 26442 000048AA A1[D805]                        MOV     AX,[ENTFREE]
 26443 000048AD 83F8FF                          CMP     AX,-1 ; 0FFFFh
 26444                                  	;JZ	short CHECK_IF_ROOT
 26445                                          ;CLC
 26446                                          ;retn
 26447                                  	; 24/09/2023
 26448 000048B0 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 26449                                  
 26450                                  CHECK_IF_ROOT:
 26451 000048B2 833E[C205]00                    CMP     word [DIRSTART],0
 26452 000048B7 7502                            JNZ	short NEWDIR
 26453                                          ;STC
 26454                                  	; 24/09/2023
 26455                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 26456                                  builddir_cmc_retn:
 26457                                  	; 24/09/2023
 26458 000048B9 F5                      	cmc	; cf=1 <-> cf=0
 26459                                  builddir_retn:
 26460 000048BA C3                              retn				; Can't grow root
 26461                                  
 26462                                  	;entry   NEWDIR
 26463                                  NEWDIR: 
 26464 000048BB 8B1E[C205]              	MOV     BX,[DIRSTART]
 26465 000048BF 09DB                            OR      BX,BX
 26466 000048C1 7405                            JZ	short NULLDIR
 26467 000048C3 E82806                  	call	GETEOF
 26468 000048C6 72F2                            jc	short builddir_retn	; Screw up
 26469                                  NULLDIR:
 26470 000048C8 B90100                          MOV     CX,1
 26471 000048CB E83905                  	call	ALLOCATE
 26472 000048CE 72EA                            jc	short  builddir_retn
 26473 000048D0 8B16[C205]                      MOV     DX,[DIRSTART]
 26474 000048D4 09D2                            OR      DX,DX
 26475 000048D6 750D                            JNZ	short ADDINGDIR
 26476 000048D8 E8DBF5                  	call	SETDIRSRCH
 26477 000048DB 72DD                            jc	short  builddir_retn
 26478 000048DD C706[4803]FFFF                  MOV     word [LASTENT],-1
 26479 000048E3 EB29                            JMP     SHORT GOTDIRREC
 26480                                  ADDINGDIR:
 26481 000048E5 53                              PUSH    BX
 26482 000048E6 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26483 000048EA E82D0C                          call	IsEOF
 26484 000048ED 5B                              POP     BX
 26485 000048EE 7217                            JB	short NOTFIRSTGROW
 26486                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26487 000048F0 891E[BC05]                      MOV     [CLUSNUM],BX
 26488                                  	; 24/09/2023
 26489                                  	;PUSH	CX ; (not necessary)
 26490 000048F4 50                      	PUSH	AX
 26491 000048F5 55                      	PUSH	BP
 26492 000048F6 B401                            MOV     AH,1			; CLUSNUM update
 26493                                  	; 15/12/2022
 26494 000048F8 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26495                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26496                                  	;;mov	dl,[es:bp+0]
 26497                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26498 000048FC 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26499 00004900 89DD                            MOV     BP,BX 			; CLUSNUM
 26500 00004902 E8E8DD                  	call	FastOpen_Update
 26501 00004905 5D                              POP     BP
 26502 00004906 58                              POP     AX
 26503                                  	; 24/09/2023
 26504                                          ;POP	CX
 26505                                  
 26506                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26507                                  NOTFIRSTGROW:
 26508 00004907 89DA                            MOV     DX,BX
 26509 00004909 30DB                            XOR     BL,BL
 26510 0000490B E8CC04                  	call	FIGREC
 26511                                  GOTDIRREC:
 26512                                  	;mov	cl,[es:bp+4]
 26513 0000490E 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26514 00004912 FEC1                            INC     CL
 26515 00004914 30ED                            XOR     CH,CH
 26516                                  ZERODIR:
 26517 00004916 51                              PUSH    CX
 26518                                  	; 22/09/2023
 26519                                  	;;mov	byte [ALLOWED],18h
 26520                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 26521 00004917 B0FF                            MOV     AL,0FFH
 26522                                          ;call	GETBUFFR
 26523 00004919 E82210                          call	GETBUFFRD ; *
 26524 0000491C 7302                    	JNC	short GET_SSIZE
 26525 0000491E 59                              POP     CX
 26526 0000491F C3                              retn
 26527                                  
 26528                                  GET_SSIZE:
 26529                                  	;mov	cx,[es:bp+2]
 26530 00004920 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26531 00004924 06                              PUSH    ES
 26532 00004925 C43E[E205]                      LES     DI,[CURBUF]
 26533                                  	;or	byte [es:di+5],4
 26534 00004929 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26535 0000492E 57                              PUSH    DI
 26536                                  	;;add	di,16	; MSDOS 3.3
 26537                                  	;add	di,20	; MSDOS 6.0	
 26538 0000492F 83C714                          ADD     DI,BUFINSIZ
 26539 00004932 31C0                            XOR     AX,AX
 26540 00004934 D1E9                            SHR     CX,1
 26541 00004936 F3AB                            REP     STOSW
 26542 00004938 7301                            JNC	short EVENZ
 26543 0000493A AA                              STOSB
 26544                                  EVENZ:
 26545 0000493B 5F                              POP     DI
 26546                                  
 26547                                  	; MSDOS 6.0
 26548 0000493C 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26549                                  					;LB. if already dirty		  ;AN000;
 26550 00004941 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26551 00004943 E8FF11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26552                                          
 26553                                  	;or	byte [es:di+5],40h
 26554 00004946 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26555                                  yesdirty7:
 26556 0000494B 07                              POP	ES
 26557 0000494C 59                              POP	CX
 26558                                  
 26559                                  	; 19/05/2019 - Retro DOS v4.0
 26560                                  
 26561                                  	; MSDOS 3.3
 26562                                  	;INC	DX
 26563                                  
 26564                                  	; MSDOS 6.0
 26565                                  	; 24/09/2023
 26566                                  	;add	dx,1
 26567                                  	;;adc	word [HIGH_SECTOR],0
 26568                                  	;; 24/09/2023
 26569                                  	;; ax=0
 26570                                  	;adc	[HIGH_SECTOR],ax ; 0
 26571                                  	; 24/09/2023
 26572 0000494D 42                      	inc	dx
 26573 0000494E 7504                    	jnz	short loop_zerodir
 26574 00004950 FF06[0706]              	inc	word [HIGH_SECTOR]
 26575                                  loop_zerodir:
 26576 00004954 E2C0                            LOOP    ZERODIR
 26577                                  
 26578 00004956 A1[4803]                        MOV     AX,[LASTENT]
 26579 00004959 40                              INC     AX
 26580                                  	; 24/09/2023
 26581                                  	; cf=0
 26582                                  	;CLC
 26583 0000495A C3                              retn
 26584                                  
 26585                                  ;--------------------------------------------------------------------------
 26586                                  ;
 26587                                  ; Procedure Name : SETDOTENT
 26588                                  ;
 26589                                  ; set up a . or .. directory entry for a directory.
 26590                                  ;
 26591                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26592                                  ;               AX contains ". " or ".."
 26593                                  ;               DX contains first cluster of entry
 26594                                  ;
 26595                                  ;----------------------------------------------------------------------------
 26596                                  
 26597                                  SETDOTENT:
 26598                                  ;	Fill in name field
 26599 0000495B AB                              STOSW
 26600 0000495C B90400                          MOV     CX,4
 26601 0000495F B82020                          MOV     AX,"  " ; 2020h
 26602 00004962 F3AB                            REP     STOSW
 26603 00004964 AA                              STOSB
 26604                                  
 26605                                  ;	Set up attribute
 26606                                  	;mov	al, 10h
 26607 00004965 B010                            MOV     AL,attr_directory
 26608 00004967 AA                              STOSB
 26609                                  
 26610                                  ;	Initialize time and date of creation
 26611 00004968 83C70A                          ADD     DI,10
 26612 0000496B 8B36[9E05]                      MOV     SI,[THISSFT]
 26613                                  	;mov	ax,[si+0Dh]
 26614 0000496F 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26615 00004972 AB                              STOSW
 26616                                  	;mov	ax,[si+0Fh]
 26617 00004973 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26618 00004976 AB                      	STOSW
 26619                                  
 26620                                  ;	Set up first cluster field
 26621 00004977 89D0                            MOV     AX,DX
 26622 00004979 AB                              STOSW
 26623                                  
 26624                                  ;	0 file size
 26625 0000497A 31C0                            XOR     AX,AX
 26626 0000497C AB                              STOSW
 26627 0000497D AB                              STOSW
 26628 0000497E C3                              retn
 26629                                  
 26630                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26631                                  ;---------------------------------------------------------------------------
 26632                                  ;
 26633                                  ; Procedure Name : MakeNode
 26634                                  ;
 26635                                  ; Inputs:
 26636                                  ;       AL - attribute to create
 26637                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26638                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26639                                  ;               (AH ignored on dirs and devices)
 26640                                  ;
 26641                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26642                                  ;               a name already existant is ALWAYS an error in these cases.
 26643                                  ;
 26644                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26645                                  ;               terminated)
 26646                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26647                                  ;               ( = -1 if current dir not involved, else
 26648                                  ;                Points to first char after last "/" of current dir part)
 26649                                  ;       [THISCDS] Points to CDS being used
 26650                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26651                                  ; Function:
 26652                                  ;       Make a new node
 26653                                  ; Outputs:
 26654                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26655                                  ;       CARRY SET IF ERROR
 26656                                  ;          AX = 1 A node by this name exists and is a directory
 26657                                  ;          AX = 2 A new node could not be created
 26658                                  ;          AX = 3 A node by this name exists and is a disk file
 26659                                  ;               (AH was NZ on input)
 26660                                  ;          AX = 4 Bad Path
 26661                                  ;               SI return from GetPath maintained
 26662                                  ;          AX = 5 Attribute mismatch
 26663                                  ;          AX = 6 Sharing Violation
 26664                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26665                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26666                                  ;       ELSE
 26667                                  ;          AX = 0 Disk Node
 26668                                  ;          AX = 3 Device Node (error in some cases)
 26669                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26670                                  ;               containing new node.
 26671                                  ;          [CURBUF+2]:BX Points to entry
 26672                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26673                                  ;          [THISSFT] is filled in
 26674                                  ;               sf_mode = unchanged.
 26675                                  ;          Attribute byte in entry is input AL
 26676                                  ; DS preserved, others destroyed
 26677                                  ;
 26678                                  ;-------------------------------------------------------------------------
 26679                                  
 26680                                  ; 19/05/2019 - Retro DOS v4.0
 26681                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26682                                  
 26683                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26684                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26685                                  
 26686                                  MakeNode:
 26687                                  	;mov	word [CREATING],0E5FFh
 26688 0000497F C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26689 00004985 50                              PUSH    AX              ; Save AH value
 26690 00004986 C606[4C03]00            	MOV	byte [NoSetDir],0
 26691 0000498B A2[6D05]                	MOV	[SATTRIB],AL
 26692 0000498E E888F5                  	call	GetPathNoSet
 26693 00004991 88CA                            MOV     DL,CL           ; Save CL info
 26694 00004993 89C1                            MOV     CX,AX           ; Device ID to CH
 26695 00004995 58                              POP     AX              ; Get back AH
 26696 00004996 732E                            JNC	short make_exists ; File existed
 26697 00004998 7505                            JNZ	short make_err_4 ; Path bad
 26698 0000499A 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26699 0000499D 7406                            JZ	short make_type	; Name simply not found, and no metas
 26700                                  make_err_4:
 26701 0000499F B004                            MOV     AL,4            ; case 1 bad path
 26702                                  make_err_ret:
 26703 000049A1 30E4                            XOR     AH,AH
 26704 000049A3 F9                              STC
 26705                                  ;make_retn:	; 22/11/2022
 26706 000049A4 C3                              retn
 26707                                  
 26708                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26709                                  RENAME_MAKE:
 26710                                  make_type:
 26711                                  ;Extended Open hooks
 26712                                  	; MSDOS 6.0
 26713                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26714 000049A5 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26715 000049AA 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26716 000049AC 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26717                                  					;FT. set for extended open ;AN000;
 26718                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26719 000049B1 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26720 000049B6 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26721 000049B8 F9                      	STC				;FT. set carry			;AN000;
 26722 000049B9 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26723                                  	; 22/11/2022
 26724                                  make_retn:
 26725                                  	;return
 26726 000049BC C3                      	retn				;FT.				;AN000;
 26727                                  
 26728                                  ;	Extended Open hooks
 26729                                  
 26730                                  make_type2:
 26731 000049BD C43E[9E05]                      LES     DI,[THISSFT]
 26732 000049C1 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26733 000049C3 F9                              STC                     ; Not found
 26734 000049C4 EB5A                            JMP     short make_new
 26735                                  
 26736                                  ; The node exists. It may be either a device, directory or file:
 26737                                  ;   Zero set => directory
 26738                                  ;   High bit of CH on => device
 26739                                  ;   else => file
 26740                                  
 26741                                  make_exists:
 26742 000049C6 7448                            JZ	short make_exists_dir
 26743 000049C8 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26744                                  	;test	byte [ATTRIB],18h
 26745 000049CA F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26746 000049CF 753B                            JNZ	short make_err_ret_5
 26747                                  				; Cannot already exist as Disk or Device Node
 26748                                                                  ;       if making DIR or Volume ID
 26749 000049D1 08ED                            OR      CH,CH
 26750 000049D3 781A                            JS	short make_share ; No further checks on attributes if device
 26751 000049D5 08E4                            OR      AH,AH
 26752 000049D7 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26753 000049D9 51                              PUSH    CX              ; Save device ID
 26754 000049DA 8E06[E405]                      MOV     ES,[CURBUF+2]
 26755                                  	;mov	ch,[es:bx+0Bh]
 26756 000049DE 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26757                                  	;test	ch,1
 26758 000049E2 F6C501                  	test	CH,attr_read_only
 26759 000049E5 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26760 000049E7 E8D0F7                  	call	MatchAttributes
 26761 000049EA 59                              POP     CX              ; Devid back in CH
 26762 000049EB 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26763 000049ED 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26764                                  make_share:
 26765 000049EF 30E4                            XOR     AH,AH
 26766 000049F1 50                              PUSH    AX              ; Save Disk or Device node
 26767 000049F2 51                              PUSH    CX              ; Save Device ID
 26768 000049F3 88EC                            MOV     AH,CH           ; Device ID to AH
 26769 000049F5 E84501                          CALL    DOOPEN          ; Fill in SFT for share check
 26770 000049F8 C43E[9E05]                      LES     DI,[THISSFT]
 26771 000049FC 56                      	push	si
 26772 000049FD 53                      	push	bx		; Save CURBUF pointers
 26773 000049FE E86729                  	call	ShareEnter
 26774 00004A01 735A                            jnc	short MakeEndShare
 26775                                  
 26776                                  ; User failed request.
 26777 00004A03 5B                      	pop	bx
 26778 00004A04 5E                      	pop	si
 26779 00004A05 59                      	pop	cx
 26780 00004A06 58                      	pop	ax
 26781                                  
 26782                                  Make_Share_ret:
 26783 00004A07 B006                            MOV     AL,6
 26784 00004A09 EB96                            JMP	short make_err_ret
 26785                                  
 26786                                  make_err_ret_5P:
 26787 00004A0B 59                              POP     CX              ; Get back device ID
 26788                                  make_err_ret_5:
 26789 00004A0C B005                            MOV     AL,5            ; Attribute mismatch
 26790                                          ; 22/11/2022
 26791 00004A0E EB91                    	JMP     short make_err_ret
 26792                                  
 26793                                  make_exists_dir:
 26794 00004A10 B001                            MOV     AL,1            ; exists as directory, always an error
 26795                                  	; 22/11/2022
 26796 00004A12 EB8D                    	JMP     short make_err_ret
 26797                                  
 26798                                  make_save:
 26799 00004A14 50                              PUSH    AX              ; Save whether Disk or File
 26800 00004A15 89C8                            MOV     AX,CX           ; Device ID to AH
 26801 00004A17 E87400                          CALL    NEWENTRY
 26802 00004A1A 58                              POP     AX              ; 0 if Disk, 3 if File
 26803 00004A1B 739F                            jnc	short make_retn
 26804 00004A1D B002                            MOV     AL,2            ; create failed case 2
 26805                                  make_save_retn:
 26806 00004A1F C3                              retn
 26807                                  
 26808                                  make_new:
 26809 00004A20 E8F1FF                          call    make_save
 26810 00004A23 72FA                            jc	short make_save_retn	; case 2 fail
 26811                                  	;test	byte [ATTRIB],10h
 26812 00004A25 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26813 00004A2A 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26814                                  					; so don't tell the sharer about them
 26815 00004A2C 50                      	push	ax
 26816 00004A2D 53                      	push	bx
 26817 00004A2E 56                      	push	si		
 26818 00004A2F E83629                          call	ShareEnter
 26819 00004A32 5E                      	pop	si
 26820 00004A33 5B                      	pop	bx
 26821 00004A34 58                      	pop	ax
 26822 00004A35 73E8                    	jnc	short make_save_retn
 26823                                  
 26824                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26825                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26826                                  ; possible: delete the newly created directory entry and return share_error.
 26827                                  
 26828 00004A37 50                              PUSH    AX
 26829 00004A38 C43E[E205]                      LES     DI,[CURBUF]
 26830                                  	;mov	byte [es:bx],0E5h
 26831 00004A3C 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26832                                  	
 26833                                  	; MSDOS 6.0
 26834                                  	;test	byte [es:di+5],40h
 26835 00004A40 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26836                                  					;LB. if already dirty		  ;AN000;
 26837 00004A45 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26838                                  	; 22/11/2022
 26839 00004A47 E8FB10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26840                                  	;or	byte [es:di+5],40h
 26841 00004A4A 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26842                                  yesdirty8:
 26843 00004A4F C42E[8A05]                      LES     BP,[THISDPB]
 26844                                  	; 15/12/2022
 26845 00004A53 268A4600                        mov	al,[ES:BP]
 26846                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26847                                  	;;mov	al,[es:bp+0]
 26848                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26849 00004A57 E8E60F                          call	FLUSHBUF		; write out buffer.
 26850 00004A5A 58                              POP     AX
 26851 00004A5B EBAA                            jmp	short Make_Share_ret
 26852                                  
 26853                                  ; We have found an existing file. We have also entered it into the share set.
 26854                                  ; At this point we need to call newentry to correctly address the problem of
 26855                                  ; getting rid of old data (create an existing file) or creating a new
 26856                                  ; directory entry (create a new file). Unfortunately, this operation may
 26857                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26858                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26859                                  ; the share set now, do the operation and then reassert the share access.
 26860                                  ;
 26861                                  ; We are allowed to do this! There is no window! After all, we are in
 26862                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26863                                  
 26864                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26865                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26866                                  
 26867                                  MakeEndShare:
 26868 00004A5D C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26869 00004A61 31C0                            XOR     AX,AX
 26870 00004A63 E8A7C8                  	call	ECritSFT
 26871 00004A66 268705                  	xchg	AX,[ES:DI]
 26872                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26873 00004A69 50                      	push	ax
 26874 00004A6A 57                      	push	di
 26875 00004A6B 06                      	push	es
 26876 00004A6C 9C                              PUSHF
 26877 00004A6D E8F328                          call	ShareEnd                ; remove sharing
 26878 00004A70 9D                              POPF
 26879 00004A71 07                      	pop	es
 26880 00004A72 5F                      	pop	di
 26881 00004A73 268F05                          pop	word [ES:DI]	
 26882                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26883 00004A76 E8AFC8                  	call	LCritSFT
 26884                                  	; 22/11/2022
 26885                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26886 00004A79 5B                      	pop	bx
 26887 00004A7A 5E                      	pop	si
 26888 00004A7B 59                      	pop	cx
 26889 00004A7C 58                      	pop	ax
 26890 00004A7D E894FF                          CALL    make_save
 26891                                  
 26892                                  ; If the user failed, we do not reenter into the sharing set.
 26893                                  
 26894 00004A80 729D                            jc	short make_save_retn	; bye if error
 26895 00004A82 50                      	push	ax
 26896 00004A83 53                      	push	bx
 26897 00004A84 56                      	push	si
 26898 00004A85 9C                              PUSHF
 26899 00004A86 E8DF28                          call	ShareEnter
 26900 00004A89 9D                              POPF
 26901 00004A8A 5E                      	pop	si
 26902 00004A8B 5B                      	pop	bx
 26903 00004A8C 58                      	pop	ax
 26904                                  
 26905                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26906                                  
 26907                                  makeendshare_retn:
 26908 00004A8D C3                              retn
 26909                                  
 26910                                  ;---------------------------------------------------------------------------
 26911                                  ;
 26912                                  ; Procedure Name : NEWENTRY
 26913                                  ;
 26914                                  ; Inputs:
 26915                                  ;       [THISSFT] set
 26916                                  ;       [THISDPB] set
 26917                                  ;       [LASTENT] current last valid entry number in directory if no free
 26918                                  ;               entries
 26919                                  ;       [VOLID] set if a volume ID was found during search
 26920                                  ;	Attrib Contains attributes for new file
 26921                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26922                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26923                                  ;               NC means file existed (device)
 26924                                  ;               C  means file did not exist
 26925                                  ;       AH = Device ID byte
 26926                                  ;       If FILE
 26927                                  ;           [CURBUF+2]:BX points to start of directory entry
 26928                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26929                                  ;       If device
 26930                                  ;           DS:BX points to start of "fake" directory entry
 26931                                  ;           DS:SI points to dir_first of "fake" directory entry
 26932                                  ;               (has DWORD pointer to device header)
 26933                                  ; Function:
 26934                                  ;       Make a new directory entry
 26935                                  ;       If an old one existed it is truncated first
 26936                                  ; Outputs:
 26937                                  ;       Carry set if error
 26938                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26939                                  ;               vol ID, user FAILed to I 24
 26940                                  ;       else
 26941                                  ;               outputs of DOOPEN
 26942                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26943                                  ;
 26944                                  ;----------------------------------------------------------------------------
 26945                                  
 26946                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26947                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26948                                  
 26949                                  NEWENTRY:
 26950 00004A8E C42E[8A05]                      LES     BP,[THISDPB]
 26951 00004A92 7315                            JNC	short EXISTENT	
 26952 00004A94 803E[4A03]00                    CMP     byte [FAILERR],0
 26953                                  	;STC
 26954                                          ;jnz	short makeendshare_retn	; User FAILed, node might exist
 26955                                          ; 24/09/2023
 26956 00004A99 750C                    	jnz	short ERRRET3
 26957 00004A9B E80CFE                  	CALL    BUILDDIR        ; Try to build dir
 26958 00004A9E 72ED                            jc	short makeendshare_retn	; Failed
 26959 00004AA0 E8E4F3                          call	GETENT          ; Point at that free entry
 26960 00004AA3 72E8                            jc	short makeendshare_retn	; Failed
 26961 00004AA5 EB0E                            JMP     SHORT FREESPOT
 26962                                  
 26963                                  ERRRET3:
 26964 00004AA7 F9                              STC
 26965                                  newentry_retn:
 26966 00004AA8 C3                              retn
 26967                                  
 26968                                  EXISTENT:
 26969 00004AA9 08E4                            OR      AH,AH           ; Check if file is I/O device
 26970 00004AAB 7903                            JNS	short NOT_DEV1
 26971 00004AAD E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26972                                  
 26973                                  NOT_DEV1:
 26974 00004AB0 E82901                          call	FREEENT		; Free cluster chain
 26975 00004AB3 72F3                            jc	short newentry_retn ; Failed
 26976                                  FREESPOT:
 26977                                  	;test	byte [ATTRIB],8
 26978 00004AB5 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26979 00004ABA 7407                            JZ	short NOTVOLID
 26980 00004ABC 803E[7B05]00                    CMP     BYTE [VOLID],0
 26981 00004AC1 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26982                                  NOTVOLID:
 26983 00004AC3 8E06[E405]                      MOV     ES,[CURBUF+2]
 26984 00004AC7 89DF                            MOV     DI,BX
 26985                                  
 26986 00004AC9 BE[4B05]                        MOV     SI,NAME1
 26987                                  
 26988 00004ACC B90500                          MOV     CX,5
 26989 00004ACF F3A5                            REP     MOVSW
 26990 00004AD1 A4                              MOVSB                   ; Move name into dir entry
 26991 00004AD2 A0[6B05]                	MOV	AL,[ATTRIB]
 26992 00004AD5 AA                      	STOSB                   ; Attributes
 26993                                  
 26994                                  ;; File Tagging for Create DOS 4.00
 26995 00004AD6 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26996                                  ;; File Tagging for Create DOS 4.00
 26997                                  
 26998 00004AD8 31C0                            XOR     AX,AX
 26999 00004ADA F3AB                            REP     STOSW           ; Zero pad
 27000 00004ADC E811C0                          call	DATE16
 27001 00004ADF 92                              XCHG    AX,DX
 27002 00004AE0 AB                              STOSW                   ; dir_time
 27003 00004AE1 92                              XCHG    AX,DX
 27004 00004AE2 AB                              STOSW                   ; dir_date
 27005 00004AE3 31C0                            XOR     AX,AX
 27006 00004AE5 57                              PUSH    DI              ; Correct SI input value
 27007                                  				; 	(recomputed for new buffer)
 27008 00004AE6 AB                              STOSW                   ; Zero dir_first and size
 27009 00004AE7 AB                              STOSW
 27010 00004AE8 AB                              STOSW
 27011                                  updnxt:
 27012 00004AE9 8B36[E205]              	MOV	SI,[CURBUF]
 27013                                  
 27014                                  	; 19/05/2019 - Retro DOS v4.0
 27015                                  
 27016                                  	; MSDOS 6.0
 27017 00004AED 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27018                                  				;LB. if already dirty		  ;AN000;
 27019 00004AF2 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27020 00004AF4 E84E10                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27021                                          
 27022                                  	;or	byte [es:si+5],40h
 27023 00004AF7 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27024                                  yesdirty9:
 27025 00004AFC C42E[8A05]                      LES     BP,[THISDPB]
 27026                                  	; 15/12/2022
 27027 00004B00 268A4600                	MOV	AL,[ES:BP]
 27028                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27029                                  	;;mov	al,[es:bp+0]
 27030                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27031 00004B04 50                              PUSH    AX
 27032 00004B05 53                              PUSH    BX
 27033                                  
 27034                                  ; If we have a file, we need to increment the open ref. count so that
 27035                                  ; we have some protection against invalid media changes if an Int 24
 27036                                  ; error occurs.
 27037                                  ; Do nothing for a device.
 27038                                  
 27039 00004B06 06                      	push	es
 27040 00004B07 57                      	push	di
 27041 00004B08 C43E[9E05]                      LES     DI,[THISSFT]
 27042                                  	;test	word [es:di+5],80h
 27043                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27044 00004B0C 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27045 00004B11 751A                            jnz	short GotADevice
 27046 00004B13 1E                      	push	ds
 27047 00004B14 53                      	push	bx
 27048 00004B15 C51E[8A05]                      LDS     BX,[THISDPB]
 27049                                  	;mov	[es:di+7],bx
 27050 00004B19 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 27051 00004B1D 8CDB                            MOV     BX,DS
 27052                                  	;mov	[es:di+9],bx
 27053 00004B1F 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 27054 00004B23 5B                      	pop	bx
 27055 00004B24 1F                      	pop	ds ; need to use DS for segment later on
 27056 00004B25 E8B8FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 27057 00004B28 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 27058                                  GotADevice:
 27059 00004B2D 5F                      	pop	di
 27060 00004B2E 07                      	pop	es
 27061                                  
 27062 00004B2F E80E0F                          call	FLUSHBUF
 27063 00004B32 E8EF00                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 27064 00004B35 5B                              POP     BX
 27065 00004B36 58                              POP     AX
 27066 00004B37 5E                              POP     SI              ; Get SI input back
 27067 00004B38 88C4                            MOV     AH,AL           ; Get I/O driver number back
 27068 00004B3A 7301                    	jnc	short DOOPEN    ; Failed
 27069 00004B3C C3                      	retn
 27070                                  	
 27071                                  ;NOTE FALL THROUGH
 27072                                  
 27073                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27074                                  
 27075                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27076                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27077                                  
 27078                                  ; DOOPEN
 27079                                  ;----------------------------------------------------------------------------
 27080                                  ;
 27081                                  ; Inputs:
 27082                                  ;       [THISDPB] points to DPB if file
 27083                                  ;       [THISSFT] points to SFT being used
 27084                                  ;       AH = Device ID byte
 27085                                  ;       If FILE
 27086                                  ;           [CURBUF+2]:BX points to start of directory entry
 27087                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 27088                                  ;       If device
 27089                                  ;           DS:BX points to start of "fake" directory entry
 27090                                  ;           DS:SI points to dir_first of "fake" directory entry
 27091                                  ;               (has DWORD pointer to device header)
 27092                                  ; Function:
 27093                                  ;       Fill in SFT from dir entry
 27094                                  ; Outputs:
 27095                                  ;       CARRY CLEAR
 27096                                  ;       sf_ref_count and sf_mode fields not altered
 27097                                  ;       sf_flags high byte = 0
 27098                                  ;       sf_flags low byte = AH except
 27099                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 27100                                  ;       sf_attr sf_date sf_time sf_name set from entry
 27101                                  ;       sf_position = 0
 27102                                  ;       If device
 27103                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 27104                                  ;           sf_size = 0
 27105                                  ;       If file
 27106                                  ;           sf_firclus sf_size set from entry
 27107                                  ;           sf_devptr = [THISDPB]
 27108                                  ;           sf_cluspos = 0
 27109                                  ;           sf_lstclus = sf_firclus
 27110                                  ;           sf_dirsec sf_dirpos set
 27111                                  ; DS,SI,BX preserved, others destroyed
 27112                                  ;
 27113                                  ;----------------------------------------------------------------------------
 27114                                  
 27115                                  	;entry	DOOPEN
 27116                                  DOOPEN:
 27117                                  ;	Generate and store attribute
 27118                                  
 27119 00004B3D 88E6                            MOV     DH,AH           ; AH to different place
 27120 00004B3F C43E[9E05]                      LES     DI,[THISSFT]
 27121                                  	;add	di,4
 27122 00004B43 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27123                                  	; 24/09/2023
 27124 00004B46 31C0                    	xor	ax,ax
 27125                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27126                                  				;   attribute of 0 (for R/O testing etc).
 27127 00004B48 08F6                            OR      DH,DH           ; See if our assumption good.
 27128 00004B4A 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 27129 00004B4C 8E1E[E405]                      MOV     DS,[CURBUF+2]
 27130                                  	;mov	al,[BX+0Bh]
 27131 00004B50 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 27132                                  				; If file, get attrib from dir entry
 27133                                  DEV_SFT1:
 27134 00004B53 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 27135                                  
 27136                                  ;	Generate and store flags word
 27137                                  
 27138                                  	; 24/09/2023
 27139                                  	;XOR	AX,AX
 27140                                          ; ah=0
 27141 00004B54 88F0                    	MOV     AL,DH
 27142                                  	;or	al,40h
 27143 00004B56 0C40                            OR      AL,devid_file_clean
 27144 00004B58 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 27145                                  
 27146                                  ;	Generate and store device pointer
 27147                                  
 27148 00004B59 1E                              PUSH    DS
 27149                                  	;lds	ax,[bx+1Ah]
 27150 00004B5A C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 27151 00004B5D 08F6                            OR      DH,DH
 27152 00004B5F 7805                            JS	short DEV_SFT2
 27153                                  
 27154                                  ;hkn; SS override
 27155 00004B61 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 27156                                  DEV_SFT2:
 27157 00004B66 AB                              STOSW 			; store offset
 27158 00004B67 8CD8                            MOV     AX,DS
 27159 00004B69 1F                              POP     DS
 27160 00004B6A AB                      	STOSW			; store segment
 27161                                  				; ES:DI -> sf_firclus
 27162                                  
 27163                                  ;	Generate pointer to, generate and store first cluster 
 27164                                  ;	(irrelevant for devices)
 27165                                  
 27166 00004B6B 56                              PUSH    SI              ; Save pointer to dir_first
 27167 00004B6C A5                              MOVSW                   ; dir_first -> sf_firclus
 27168                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 27169                                  
 27170                                  ;	Copy time/date of last modification
 27171                                  
 27172                                  	;sub	si,6
 27173 00004B6D 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27174                                  				; DS:SI->dir_time
 27175 00004B70 A5                              MOVSW                   ; dir_time -> sf_time
 27176                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 27177 00004B71 A5                              MOVSW                   ; dir_date -> sf_date
 27178                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 27179                                  
 27180                                  ;	Generate and store file size (0 for devices)
 27181                                  
 27182 00004B72 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 27183 00004B73 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 27184 00004B74 89C1                            MOV     CX,AX           ; dir_size_l in CX
 27185 00004B76 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 27186 00004B77 08F6                            OR      DH,DH
 27187 00004B79 7904                            JNS	short FILE_SFT1
 27188 00004B7B 31C0                            XOR     AX,AX
 27189 00004B7D 89C1                            MOV     CX,AX           ; Devices are open ended
 27190                                  FILE_SFT1:
 27191 00004B7F 91                              XCHG    AX,CX
 27192 00004B80 AB                              STOSW                   ; Low word of sf_size
 27193 00004B81 91                              XCHG    AX,CX
 27194 00004B82 AB                              STOSW                   ; High word of sf_size
 27195                                                                  ; ES:DI -> sf_position
 27196                                  ; Initialize position to 0
 27197                                  
 27198 00004B83 31C0                            XOR     AX,AX
 27199 00004B85 AB                              STOSW
 27200 00004B86 AB                              STOSW                   ; sf_position
 27201                                                                  ; ES:DI -> sf_cluspos
 27202                                  
 27203                                  ; Generate cluster optimizations for files
 27204                                  
 27205 00004B87 08F6                            OR      DH,DH
 27206 00004B89 7843                            JS	short DEV_SFT3
 27207 00004B8B AB                              STOSW                   ; sf_cluspos ; 19h
 27208                                  	;mov	ax,[bx+1Ah]
 27209 00004B8C 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 27210                                  	; 19/05/2019
 27211                                  	; MSDOS 3.3
 27212                                  	;STOSW 			; sf_lstclus ; 1Bh
 27213                                  	; MSDOS 6.0
 27214 00004B8F 57                              PUSH	DI              ;AN004; save dirsec offset
 27215                                  	;sub	di,1Bh
 27216 00004B90 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27217                                  	;mov	[es:di+35h],ax
 27218 00004B93 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27219 00004B97 5F                              POP	DI              ;AN004; restore dirsec offset
 27220                                  
 27221                                  ; DOS 3.3  FastOpen  6/13/86
 27222                                  
 27223 00004B98 1E                      	PUSH	DS
 27224                                  
 27225                                  ;hkn; SS is DOSDATA
 27226 00004B99 16                      	push	ss
 27227 00004B9A 1F                      	pop	ds
 27228                                  	;test	byte [FastOpenFlg],4
 27229 00004B9B F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27230 00004BA0 7411                    	JZ	short Not_FastOpen
 27231                                  
 27232                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27233 00004BA2 BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 27234                                  
 27235                                  	;mov	ax,[si+1]
 27236 00004BA5 8B4401                          MOV     AX,[SI+FEI.dirsec]
 27237 00004BA8 AB                              STOSW                   ; sf_dirsec
 27238                                  	; MSDOS 6.0
 27239                                  	;mov	ax,[si+3]
 27240 00004BA9 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 27241                                  				;;; changed for >32mb
 27242 00004BAC AB                              STOSW                   ; sf_dirsec
 27243                                  	; 19/08//2018
 27244 00004BAD 8A04                    	mov	al,[SI]
 27245                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27246 00004BAF AA                              STOSB                   ; sf_dirpos
 27247 00004BB0 1F                              POP	DS
 27248                                          ;JMP	short Next_Name
 27249                                  	; 24/09/2023
 27250 00004BB1 EB1E                    	jmp	short FILE_SFT2  ; cf=0 (after 'test' instruction)
 27251                                  
 27252                                  ; DOS 3.3  FastOpen  6/13/86
 27253                                  
 27254                                  Not_FastOpen:
 27255                                          ;POP     DS		; normal path
 27256                                  
 27257                                  ;hkn; SS override
 27258                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27259                                  	; 16/12/2022
 27260                                  	; 28/07/2019
 27261 00004BB3 8B36[E205]              	mov	si,[CURBUF]
 27262 00004BB7 1F                      	pop	ds
 27263                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27264                                  	;pop	ds
 27265                                  	;mov	si,[ss:CURBUF]
 27266                                  	
 27267                                  	;mov	ax,[si+6]
 27268 00004BB8 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 27269 00004BBB AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27270                                  	; 19/05/2019        
 27271                                  	; MSDOS 6.0
 27272                                  	;mov	ax,[si+8]
 27273 00004BBC 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27274 00004BBF AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 27275                                          
 27276 00004BC0 89D8                    	MOV     AX,BX
 27277                                  	;;add	si,16	; MSDOS 3.3	
 27278                                  	;add	si,20	; MSDOS 6.0
 27279 00004BC2 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 27280 00004BC5 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 27281                                          ;mov	cl,32
 27282 00004BC7 B120                    	MOV     CL,dir_entry.size
 27283 00004BC9 F6F1                            DIV     CL
 27284 00004BCB AA                              STOSB                   ; sf_dirpos
 27285                                  Next_Name:
 27286 00004BCC EB03                            JMP     SHORT FILE_SFT2
 27287                                  
 27288                                  	; 24/09/2023
 27289                                  	; cf=0 (after 'or' instruction)
 27290                                  DEV_SFT3:
 27291                                  	;add	di,7
 27292 00004BCE 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27293                                  FILE_SFT2:
 27294                                  
 27295                                  ; Copy in the object's name
 27296                                  
 27297 00004BD1 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 27298 00004BD3 B90B00                          MOV     CX,11
 27299 00004BD6 F3A4                            REP     MOVSB           ; sf_name
 27300 00004BD8 5E                              POP     SI              ; recover DS:SI -> dir_first
 27301                                  
 27302                                  ;hkn; SS is DOSDATA
 27303 00004BD9 16                              push	ss
 27304 00004BDA 1F                      	pop	ds
 27305                                  	; 24/09/2023
 27306                                  	; cf=0
 27307                                          ;CLC
 27308 00004BDB C3                              retn
 27309                                  
 27310                                  ;---------------------------------------------------------------------------
 27311                                  ;
 27312                                  ; Procedure Name : FREEENT
 27313                                  ;
 27314                                  ; Inputs:
 27315                                  ;       ES:BP -> DPB
 27316                                  ;       [CURBUF] Set
 27317                                  ;       [CURBUF+2]:BX points to directory entry
 27318                                  ;       [CURBUF+2]:SI points to above dir_first
 27319                                  ; Function:
 27320                                  ;       Free the cluster chain for the entry if present
 27321                                  ; Outputs:
 27322                                  ;       Carry set if error (currently user FAILed to I 24)
 27323                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 27324                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27325                                  ;---------------------------------------------------------------------------
 27326                                  
 27327                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27328                                  FREEENT:
 27329 00004BDC 1E                              PUSH    DS
 27330 00004BDD C53E[E205]                      LDS     DI,[CURBUF]
 27331 00004BE1 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27332                                  	; 19/05/2019 - Retro DOS v4.0
 27333                                  	; MSDOS 6.0
 27334 00004BE3 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 27335                                  ;hkn; SS override
 27336 00004BE6 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27337 00004BEB 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27338 00004BEE 1F                              POP     DS
 27339 00004BEF 83F902                  	CMP	CX,2
 27340 00004BF2 722E                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27341                                  	;cmp	cx,[es:bp+0Dh]
 27342 00004BF4 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27343 00004BF8 7728                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27344 00004BFA 29FB                            SUB     BX,DI
 27345 00004BFC 53                              PUSH    BX              ; Save offset
 27346 00004BFD FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27347 00004C01 52                              PUSH    DX              ; Save sector number
 27348 00004C02 89CB                            MOV     BX,CX
 27349 00004C04 E8AC02                          call	RELEASE         ; Free any data allocated
 27350 00004C07 5A                              POP     DX
 27351 00004C08 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27352 00004C0C 7302                            JNC	short GET_BUF_BACK
 27353 00004C0E 5B                              POP     BX
 27354                                  freeent_retn:
 27355 00004C0F C3                              retn			; Screw up
 27356                                  
 27357                                  GET_BUF_BACK:
 27358                                  	; 22/09/2023
 27359                                  	;;mov	byte [ALLOWED],18h
 27360                                          ;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27361                                          ;XOR	AL,AL ; *
 27362                                  	;call	GETBUFFR        ; Get sector back
 27363 00004C10 E8290D                  	call	GETBUFFER ; * ; pre read      
 27364                                  
 27365 00004C13 5B                      	POP     BX              ; Get offset back
 27366 00004C14 72F9                            jc	short freeent_retn
 27367 00004C16 E8B0EA                  	call	SET_BUF_AS_DIR
 27368 00004C19 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27369 00004C1D 89DE                            MOV     SI,BX
 27370                                  	;add	si,1Ah
 27371 00004C1F 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27372                                  RET1:
 27373 00004C22 F8                              CLC
 27374 00004C23 C3                              retn
 27375                                  
 27376                                  ;---------------------------------------------------------------------------
 27377                                  ;
 27378                                  ; Procedure Name : CHECK_VIRT_OPEN
 27379                                  ;
 27380                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27381                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27382                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27383                                  ; flag [VIRTUAL_OPEN].
 27384                                  ; No registers affected (including flags).
 27385                                  ; On input, [THISSFT] points to current SFT.
 27386                                  ;
 27387                                  ;---------------------------------------------------------------------------
 27388                                  
 27389                                  CHECK_VIRT_OPEN:
 27390 00004C24 50                      	PUSH    AX
 27391 00004C25 9F                              lahf                    ; preserve flags
 27392 00004C26 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27393 00004C2B 7410                            JZ	short ALL_CLOSED
 27394 00004C2D C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27395 00004C32 06                      	push	es
 27396 00004C33 57                      	push	di
 27397 00004C34 C43E[9E05]                      LES     DI,[THISSFT]
 27398 00004C38 E8ADF9                          call	DEV_CLOSE_SFT
 27399 00004C3B 5F                      	pop	di
 27400 00004C3C 07                      	pop	es
 27401                                  
 27402                                  ALL_CLOSED:
 27403 00004C3D 9E                              sahf                    ; restore flags
 27404 00004C3E 58                              POP     AX
 27405 00004C3F C3                              retn
 27406                                  
 27407                                  ;============================================================================
 27408                                  ; ROM.ASM, MSDOS 6.0, 1991
 27409                                  ;============================================================================
 27410                                  ; 29/07/2018 - Retro DOS v3.0
 27411                                  ; 20/05/2019 - Retro DOS v4.0
 27412                                  
 27413                                  ;	TITLE	ROM - Miscellaneous routines
 27414                                  ;	NAME	ROM
 27415                                  
 27416                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27417                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27418                                  ;
 27419                                  ;	SKPCLP
 27420                                  ;	FNDCLUS
 27421                                  ;	BUFSEC
 27422                                  ;	BUFRD
 27423                                  ;	BUFWRT
 27424                                  ;	NEXTSEC
 27425                                  ;	OPTIMIZE
 27426                                  ;	FIGREC
 27427                                  ;	ALLOCATE
 27428                                  ;	RESTFATBYT
 27429                                  ;	RELEASE
 27430                                  ;	RELBLKS
 27431                                  ;	GETEOF
 27432                                  ;
 27433                                  ;	Modification history:
 27434                                  ;
 27435                                  ;		Created: ARR 30 March 1983
 27436                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27437                                  
 27438                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27439                                  ;--------------------------------------------------------------------------
 27440                                  ;
 27441                                  ; Procedure Name : FNDCLUS
 27442                                  ;
 27443                                  ; Inputs:
 27444                                  ;       CX = No. of clusters to skip
 27445                                  ;       ES:BP = Base of drive parameters
 27446                                  ;       [THISSFT] point to SFT
 27447                                  ; Outputs:
 27448                                  ;       BX = Last cluster skipped to
 27449                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27450                                  ;       DX = Position of last cluster
 27451                                  ;       Carry set if error (currently user FAILed to I 24)
 27452                                  ; DI destroyed. No other registers affected.
 27453                                  ;--------------------------------------------------------------------------
 27454                                  
 27455                                  ; 20/05/2019 - Retro DOS v4.0
 27456                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27457                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27458                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27459                                  
 27460                                  FNDCLUS:
 27461 00004C40 06                      	PUSH	ES
 27462 00004C41 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27463                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27464                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27465 00004C45 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27466                                  	;mov	dx,[es:di+19h]
 27467 00004C49 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27468 00004C4D 09DB                    	OR	BX,BX
 27469 00004C4F 7424                    	JZ	short NOCLUS
 27470                                  
 27471 00004C51 29D1                            SUB     CX,DX
 27472 00004C53 7308                            JNB	short FINDIT
 27473                                  
 27474 00004C55 01D1                            ADD     CX,DX
 27475 00004C57 31D2                            XOR     DX,DX
 27476                                  	;mov	bx,[es:di+0Bh]
 27477 00004C59 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27478                                  FINDIT:
 27479 00004C5D 07                              POP	ES
 27480 00004C5E E313                    	JCXZ	RET9
 27481                                  
 27482                                  	;entry	SKPCLP
 27483                                  SKPCLP:
 27484 00004C60 E8CE08                  	call	UNPACK
 27485 00004C63 7214                            jc	short fndclus_retn	; retc
 27486                                  
 27487                                  	; 09/09/2018
 27488                                  
 27489                                  	; MSDOS 3.3
 27490                                  	;push	bx
 27491                                  	;mov	bx,di
 27492                                  	;call	IsEOF
 27493                                  	;pop	bx	
 27494                                  	;jae	short RET9
 27495                                  
 27496                                  	; 20/05/2019 - Retro DOS v4.0
 27497                                  
 27498                                  	; MSDOS 6.0
 27499 00004C65 87DF                    	xchg	bx,di
 27500 00004C67 E8B008                  	call	IsEOF
 27501 00004C6A 87DF                    	xchg	bx,di
 27502 00004C6C 7305                    	jae	short RET9
 27503                                  
 27504 00004C6E 87DF                            XCHG    BX,DI
 27505 00004C70 42                              INC     DX
 27506                                  
 27507 00004C71 E2ED                    	LOOP	SKPCLP			; RMFS
 27508                                  RET9:	
 27509 00004C73 F8                      	CLC
 27510 00004C74 C3                              retn
 27511                                  NOCLUS:
 27512 00004C75 07                              POP	ES
 27513 00004C76 41                              INC	CX
 27514 00004C77 4A                              DEC	DX
 27515 00004C78 F8                              CLC
 27516                                  
 27517                                  fndclus_retn:
 27518 00004C79 C3                              retn
 27519                                  
 27520                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27521                                  ;--------------------------------------------------------------------------
 27522                                  ;
 27523                                  ; Procedure Name : BUFSEC
 27524                                  ;
 27525                                  ; Inputs:
 27526                                  ;       AH = priority of buffer
 27527                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27528                                  ;       ES:BP = Base of drive parameters
 27529                                  ;       [CLUSNUM] = Physical cluster number
 27530                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27531                                  ;       [BYTCNT1] = Size of transfer
 27532                                  ; Function:
 27533                                  ;       Insure specified sector is in buffer, flushing buffer before
 27534                                  ;       read if necessary.
 27535                                  ; Outputs:
 27536                                  ;       ES:DI = Pointer to buffer
 27537                                  ;       SI = Pointer to transfer address
 27538                                  ;       CX = Number of bytes
 27539                                  ;       [NEXTADD] updated
 27540                                  ;       [TRANS] set to indicate a transfer will occur
 27541                                  ;       Carry set if error (user FAILed to I 24)
 27542                                  ;--------------------------------------------------------------------------
 27543                                  
 27544                                  BUFSEC:
 27545 00004C7A 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27546 00004C7E 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27547                                  	;mov	byte [ALLOWED],38h
 27548 00004C82 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27549 00004C87 E85001                          CALL    FIGREC
 27550 00004C8A E8B60C                  	call	GETBUFFR
 27551 00004C8D 72EA                            jc	short fndclus_retn
 27552                                  
 27553 00004C8F C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27554 00004C94 8B36[B805]                      MOV     SI,[NEXTADD]
 27555 00004C98 89F7                            MOV     DI,SI
 27556 00004C9A 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27557 00004C9E 01CF                            ADD     DI,CX
 27558 00004CA0 893E[B805]                      MOV     [NEXTADD],DI
 27559 00004CA4 C43E[E205]                      LES     DI,[CURBUF]
 27560                                  	;or	byte [es:di+5],8
 27561 00004CA8 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27562                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27563                                  	;lea	di,[di+20] ; MSDOS 6.0
 27564 00004CAD 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27565 00004CB0 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27566 00004CB4 F8                              CLC
 27567 00004CB5 C3                              retn
 27568                                  
 27569                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27570                                  
 27571                                  ;---------------------------------------------------------------------------
 27572                                  ;
 27573                                  ; Procedure Name : BUFRD
 27574                                  ;
 27575                                  ; Do a partial sector read via one of the system buffers
 27576                                  ; ES:BP Points to DPB
 27577                                  ; Carry set if error (currently user FAILed to I 24)
 27578                                  ;
 27579                                  ; DS - set to DOSDATA
 27580                                  ;
 27581                                  ;----------------------------------------------------------------------------
 27582                                  
 27583                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27584                                  	; 20/05/2019 - Retro DOS v4.0
 27585                                  BUFRD:
 27586 00004CB6 06                              PUSH	ES
 27587 00004CB7 31C0                            xor	ax, ax			; pre-read sector
 27588 00004CB9 E8BEFF                          CALL    BUFSEC
 27589 00004CBC 7303                            JNC	short BUF_OK
 27590                                  
 27591                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27592 00004CBE 07                              POP	ES
 27593 00004CBF EB2B                            JMP     SHORT RBUFPLACED
 27594                                  
 27595                                  BUF_OK:
 27596 00004CC1 8CC3                            MOV     BX,ES
 27597 00004CC3 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27598 00004CC7 8EDB                            MOV     DS,BX
 27599 00004CC9 87FE                    	XCHG    DI,SI
 27600 00004CCB D1E9                            SHR     CX,1
 27601                                  ;M039
 27602                                  	; MSDOS 3.3
 27603                                  	;JNC	short EVENRD
 27604                                  	;MOVSB
 27605                                  ;EVENRD:
 27606                                  	;REP     MOVSW
 27607                                  
 27608                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27609                                  ;       DS:SI-> Source within Buffer.
 27610                                  ;       ES:DI-> Destination within Transfer memory block.
 27611                                  
 27612                                  	; MSDOS 6.0
 27613 00004CCD F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27614                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27615                                  	;rep	movsb                   ;Copy last byte.
 27616                                  	; 16/12/2022
 27617 00004CCF 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27618 00004CD1 A4                      	movsb ; ****
 27619                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27620                                  	;adc	cx,0
 27621                                  	;rep	movsb
 27622                                  ;M039
 27623                                  EVENRD: ; ****
 27624 00004CD2 07                              POP	ES
 27625                                  ;hkn; SS override
 27626 00004CD3 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27627                                  	;;lea	bx,[di+16]
 27628                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27629 00004CD8 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27630 00004CDB 29DE                            SUB     SI,BX                   ; Position in buffer
 27631 00004CDD E8030C                          call	PLACEBUF
 27632                                  	;cmp	si,[es:bp+2]
 27633 00004CE0 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27634 00004CE4 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27635                                  ;M039
 27636                                  	; MSDOS 3.3
 27637                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27638                                                                          ;  even though it is MRU.
 27639                                          ; MSDOS 6.0
 27640 00004CE6 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27641                                  ;M039					; chucking even though it is MRU.
 27642                                  
 27643                                  RBUFPLACEDC:
 27644 00004CEB F8                              CLC
 27645                                  RBUFPLACED:
 27646 00004CEC 16                      	push	ss
 27647 00004CED 1F                      	pop	ds
 27648 00004CEE C3                              retn
 27649                                  
 27650                                  ;----------------------------------------------------------------------------
 27651                                  ;
 27652                                  ; Procedure : BUFWRT
 27653                                  ;
 27654                                  ; Do a partial sector write via one of the system buffers
 27655                                  ; ES:BP Points to DPB
 27656                                  ; Carry set if error (currently user FAILed to I 24)
 27657                                  ;
 27658                                  ; DS - set to DOSDATA
 27659                                  ;
 27660                                  ;----------------------------------------------------------------------------
 27661                                  
 27662                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27663                                  	; 20/05/2019 - Retro DOS v4.0
 27664                                  BUFWRT:
 27665                                          ;MOV     AX,[SECPOS]
 27666                                          ; MSDOS 6.0
 27667                                  	;ADD	AX,1            	; Set for next sector
 27668                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27669                                          ;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27670                                          ; 24/09/2023
 27671 00004CEF FF06[C405]              	inc	word [SECPOS]
 27672 00004CF3 7504                    	jnz	short bufw_secpos
 27673 00004CF5 FF06[C605]              	inc	word [SECPOS+2]
 27674                                  bufw_secpos:
 27675 00004CF9 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27676 00004CFC 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27677 00004D00 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27678 00004D02 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27679 00004D04 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27680 00004D06 A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27681                                  
 27682                                  	; MSDOS 3.3
 27683                                  	;INC	AX
 27684                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27685                                  
 27686                                  	; 20/05/2019
 27687                                  	; MSDOS 3.3 & MSDOS 6.0
 27688 00004D09 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27689 00004D0D B001                            MOV     AL,1
 27690 00004D0F 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27691                                  _doread:
 27692 00004D11 30C0                            XOR     AL,AL
 27693                                  NOREAD:
 27694 00004D13 06                              PUSH	ES
 27695 00004D14 E863FF                          CALL    BUFSEC
 27696 00004D17 72A5                    	JC	short BUF_IO_FAIL
 27697 00004D19 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27698 00004D1D D1E9                            SHR     CX,1
 27699                                  ;M039
 27700                                  	; MSDOS 3.3
 27701                                  	;JNC	short EVENWRT ; 09/09/2018
 27702                                  	;MOVSB
 27703                                  ;EVENWRT:
 27704                                  	;REP	MOVSW
 27705                                  
 27706                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27707                                  ;       DS:SI-> Source within Transfer memory block.
 27708                                  ;       ES:DI-> Destination within Buffer.
 27709                                  
 27710                                  	; MSDOS 6.0
 27711 00004D1F F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27712                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27713                                  	;rep	movsb                   ;Copy last byte.
 27714                                  	; 16/12/2022
 27715 00004D21 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27716 00004D23 A4                      	movsb ; ****
 27717                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27718                                  	;adc	cx,0
 27719                                  	;rep	movsb
 27720                                  ;M039
 27721                                  EVENWRT: ; ****
 27722 00004D24 07                              POP	ES
 27723                                  
 27724                                  ;hkn; SS override
 27725 00004D25 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27726                                  
 27727                                  	; MSDOS 6.0
 27728 00004D2A F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27729                                  					;LB. if already dirty		  ;AN000;
 27730 00004D2E 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27731 00004D30 E8120E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27732                                  	
 27733                                  	;or	byte [bx+5],40h
 27734 00004D33 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27735                                  yesdirty10:
 27736                                  	;;lea	si,[bx+16]
 27737                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27738 00004D37 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27739 00004D3A 29F7                            SUB     DI,SI                   ; Position in buffer
 27740                                  ;M039
 27741                                  	; MSDOS 3.3
 27742                                  	;MOV	SI,DI
 27743                                  	;MOV	DI,BX
 27744                                  	;call	PLACEBUF
 27745                                  	;;cmp	si,[es:bp+2]
 27746                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27747                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27748                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27749                                                                          ;  even though it is MRU.
 27750                                  	; MSDOS 6.0
 27751                                  	;cmp	di,[es:bp+2]
 27752 00004D3C 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27753 00004D40 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27754 00004D42 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27755                                  					; chucking even though it is MRU.
 27756                                  ;M039
 27757                                  
 27758                                  WBUFPLACED:
 27759 00004D47 F8                              CLC
 27760 00004D48 16                      	push	ss
 27761 00004D49 1F                      	pop	ds
 27762 00004D4A C3                              retn
 27763                                  
 27764                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27765                                  ;---------------------------------------------------------------------------
 27766                                  ;
 27767                                  ; Procedure Name : NEXTSEC
 27768                                  ;
 27769                                  ; Compute the next sector to read or write
 27770                                  ; ES:BP Points to DPB
 27771                                  ;
 27772                                  ;---------------------------------------------------------------------------
 27773                                  
 27774                                  NEXTSEC:
 27775 00004D4B F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27776 00004D50 7426                            JZ	short CLRET
 27777                                  
 27778 00004D52 A0[7305]                        MOV     AL,[SECCLUSPOS]
 27779 00004D55 FEC0                            INC     AL
 27780                                  	;cmp	al,[es:bp+4]
 27781 00004D57 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27782 00004D5B 7618                            JBE	short SAVPOS
 27783                                  
 27784 00004D5D 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27785 00004D61 E8B607                          call	IsEOF
 27786 00004D64 7314                            JAE	short NONEXT
 27787                                  
 27788 00004D66 E8C807                          call	UNPACK
 27789 00004D69 720F                            JC	short NONEXT
 27790                                  clusgot:
 27791 00004D6B 893E[BC05]                      MOV     [CLUSNUM],DI
 27792 00004D6F FF06[BA05]                      INC     word [LASTPOS]
 27793 00004D73 B000                            MOV     AL,0
 27794                                  SAVPOS:
 27795 00004D75 A2[7305]                        MOV     [SECCLUSPOS],AL
 27796                                  CLRET:
 27797 00004D78 F8                              CLC
 27798 00004D79 C3                              retn
 27799                                  NONEXT:
 27800 00004D7A F9                              STC
 27801 00004D7B C3                              retn
 27802                                  
 27803                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27804                                  ;----------------------------------------------------------------------------
 27805                                  ;
 27806                                  ; Procedure Name : OPTIMIZE
 27807                                  ;
 27808                                  ; Inputs:
 27809                                  ;       BX = Physical cluster
 27810                                  ;       CX = No. of records
 27811                                  ;       DL = sector within cluster
 27812                                  ;       ES:BP = Base of drive parameters
 27813                                  ;       [NEXTADD] = transfer address
 27814                                  ; Outputs:
 27815                                  ;       AX = No. of records remaining
 27816                                  ;       BX = Transfer address
 27817                                  ;       CX = No. or records to be transferred
 27818                                  ;       DX = Physical sector address            (LOW)
 27819                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27820                                  ;       DI = Next cluster
 27821                                  ;       [CLUSNUM] = Last cluster accessed
 27822                                  ;       [NEXTADD] updated
 27823                                  ;       Carry set if error (currently user FAILed to I 24)
 27824                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27825                                  ;
 27826                                  ;---------------------------------------------------------------------------
 27827                                  
 27828                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27829                                  OPTIMIZE:
 27830 00004D7C 52                      	PUSH    DX
 27831 00004D7D 53                              PUSH    BX
 27832                                  	;mov	al,[es:bp+4]
 27833 00004D7E 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27834 00004D82 FEC0                            INC     AL              ; Number of sectors per cluster
 27835 00004D84 88C4                            MOV     AH,AL
 27836 00004D86 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27837 00004D88 89CA                            MOV     DX,CX
 27838                                  	;MOV	CX,0
 27839                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27840                                  	; 16/12/2022
 27841 00004D8A 31C9                    	xor	cx,cx	; sub cx,cx
 27842                                  OPTCLUS:
 27843                                  ; AL has number of sectors available in current cluster
 27844                                  ; AH has number of sectors available in next cluster
 27845                                  ; BX has current physical cluster
 27846                                  ; CX has number of sequential sectors found so far
 27847                                  ; DX has number of sectors left to transfer
 27848                                  ; ES:BP Points to DPB
 27849                                  ; ES:SI has FAT pointer
 27850                                  
 27851                                  do_norm3:
 27852 00004D8C E8A207                          call	UNPACK
 27853 00004D8F 7236                            JC	short OP_ERR
 27854                                  clusgot2:
 27855 00004D91 00C1                    	ADD	CL,AL
 27856 00004D93 80D500                          ADC     CH,0
 27857 00004D96 39D1                            CMP     CX,DX
 27858 00004D98 7332                            JAE	short BLKDON
 27859 00004D9A 88E0                            MOV     AL,AH
 27860 00004D9C 43                              INC     BX
 27861 00004D9D 39DF                            CMP     DI,BX
 27862 00004D9F 74EB                            JZ	short OPTCLUS
 27863 00004DA1 4B                              DEC     BX
 27864                                  FINCLUS:
 27865 00004DA2 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27866 00004DA6 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27867 00004DA8 52                              PUSH    DX
 27868 00004DA9 89C8                            MOV     AX,CX
 27869                                  	;mul	word[ES:BP+2]
 27870 00004DAB 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27871                                  				; Number of sectors times sector size
 27872 00004DAF 8B36[B805]                      MOV     SI,[NEXTADD]
 27873 00004DB3 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27874 00004DB5 A3[B805]                        MOV     [NEXTADD],AX
 27875 00004DB8 58                              POP     AX              ; Number of sectors still needed
 27876 00004DB9 5A                              POP     DX              ; Starting cluster
 27877 00004DBA 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27878 00004DBC 011E[BA05]                      ADD     [LASTPOS],BX
 27879 00004DC0 5B                              POP     BX              ; BL = sector position within cluster
 27880 00004DC1 E81600                  	call	FIGREC
 27881 00004DC4 89F3                            MOV     BX,SI
 27882                                  	; 24/09/2023
 27883                                  	; cf=0 (at the return of FIGREC)
 27884                                  	;CLC
 27885 00004DC6 C3                              retn
 27886                                  OP_ERR:
 27887 00004DC7 83C404                          ADD     SP,4
 27888 00004DCA F9                      	STC
 27889 00004DCB C3                              retn
 27890                                  BLKDON:
 27891 00004DCC 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27892 00004DCE 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27893 00004DD0 FECC                            DEC     AH              ; Adjust to mean position within cluster
 27894 00004DD2 8826[7305]                      MOV     [SECCLUSPOS],AH
 27895 00004DD6 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27896 00004DD8 EBC8                            JMP     SHORT FINCLUS
 27897                                  
 27898                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27899                                  ;---------------------------------------------------------------------------
 27900                                  ;
 27901                                  ; Procedure Name : FIGREC
 27902                                  ;
 27903                                  ; Inputs:
 27904                                  ;       DX = Physical cluster number
 27905                                  ;       BL = Sector position within cluster
 27906                                  ;       ES:BP = Base of drive parameters
 27907                                  ; Outputs:
 27908                                  ;       DX = physical sector number           (LOW)
 27909                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27910                                  ; No other registers affected.
 27911                                  ;
 27912                                  ;---------------------------------------------------------------------------
 27913                                  
 27914                                  	; 10/06/2019
 27915                                  	; 20/05/2019 - Retro DOS v4.0
 27916                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27917                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27918                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27919                                  FIGREC:
 27920 00004DDA 51                              PUSH    CX
 27921                                  	;mov	cl,[es:bp+5]
 27922 00004DDB 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27923 00004DDF 4A                              DEC     DX
 27924 00004DE0 4A                              DEC     DX
 27925                                  
 27926                                  	; MSDOS 3.3
 27927                                  	;SHL	DX,CL
 27928                                  
 27929                                  ;hkn; SS override HIGH_SECTOR
 27930                                  	; MSDOS 6.0
 27931 00004DE1 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27932                                  	; 24/09/2023
 27933 00004DE8 30ED                    	xor	ch,ch				;F.C. >32mb
 27934 00004DEA 08C9                    	OR	CL,CL				;F.C. >32mb
 27935 00004DEC 740C                    	JZ	short noshift			;F.C. >32mb
 27936 00004DEE 30ED                    	XOR	CH,CH				;F.C. >32mb
 27937                                  rotleft:					;F.C. >32mb
 27938 00004DF0 F8                      	CLC					;F.C. >32mb
 27939 00004DF1 D1D2                    	RCL	DX,1				;F.C. >32mb
 27940                                  	; 10/06/2019
 27941 00004DF3 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27942 00004DF8 E2F6                    	LOOP	rotleft				;F.C. >32mb
 27943                                  noshift:
 27944                                  	; MSDOS 3.3 & MSDOS 6.0
 27945 00004DFA 08DA                            OR      DL,BL
 27946                                  	;add	dx,[es:bp+0Bh]
 27947 00004DFC 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27948                                  	; MSDOS 6.0
 27949                                  	; 10/06/2019
 27950                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27951                                  	; 24/09/2023
 27952                                  	; cx=0
 27953 00004E00 36110E[0706]            	ADC	word [ss:HIGH_SECTOR],cx ; 0
 27954                                  
 27955                                  	; MSDOS 3.3 & MSDOS 6.0
 27956 00004E05 59                      	POP     CX
 27957                                  figrec_retn:
 27958 00004E06 C3                              retn
 27959                                  
 27960                                  ; 20/05/2019 - Retro DOS v4.0
 27961                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27962                                  
 27963                                  ; 30/07/2018 - Retro DOS v3.0
 27964                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27965                                  
 27966                                  ;Break   <ALLOCATE -- Assign disk space>
 27967                                  ;---------------------------------------------------------------------------
 27968                                  ;
 27969                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27970                                  ;
 27971                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27972                                  ;   FAT-chained onto the end of the existing file.
 27973                                  ;
 27974                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27975                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27976                                  ;   numbered clusters, looking for the necessary free blocks.
 27977                                  ;
 27978                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27979                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27980                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27981                                  ;
 27982                                  ;       If we get to the end of the disk without satisfaction:
 27983                                  ;
 27984                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27985                                  ;               return (insufficient_disk_space)
 27986                                  ;           ELSE
 27987                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27988                                  ;
 27989                                  ;   Note that there is no multitasking interlock. There is no race when
 27990                                  ;   examining the entrys in an in-core FAT block since there will be no
 27991                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27992                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27993                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27994                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27995                                  ;   satisfied. We can't allow another activation to think this cluster is
 27996                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27997                                  ;   allocated.
 27998                                  ;
 27999                                  ;   Note that when we run out of space this algorithem will scan from
 28000                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28001                                  ;   redundantly scanning the later part of the disk. This only happens when
 28002                                  ;   we run out of space, so sue me.
 28003                                  ;
 28004                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28005                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28006                                  ;                                                                          ;
 28007                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28008                                  ;   explanation:
 28009                                  ;
 28010                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28011                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28012                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28013                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28014                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28015                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28016                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28017                                  ;   the
 28018                                  ;           LOOP   findfre         ; alloc more if needed
 28019                                  ;   instruction when the first cluster is allocated to the nul file. The
 28020                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28021                                  ;
 28022                                  ;   This method is obviously useless (because it is non-reentrant) for
 28023                                  ;   multitasking, and will have to be changed. Storing the required value on
 28024                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28025                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28026                                  ;   problems with INT 24 well.
 28027                                  ;
 28028                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28029                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28030                                  ;                                                                          ;
 28031                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28032                                  ;               CX = No. of clusters to allocate
 28033                                  ;               ES:BP = Base of drive parameters
 28034                                  ;               [THISSFT] = Points to SFT
 28035                                  ;
 28036                                  ;       EXIT    'C' set if insufficient space
 28037                                  ;                 [FAILERR] can be tested to see the reason for failure
 28038                                  ;                 CX = max. no. of clusters that could be added to file
 28039                                  ;               'C' clear if space allocated
 28040                                  ;                 BX = First cluster allocated
 28041                                  ;                 FAT is fully updated
 28042                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28043                                  ;
 28044                                  ;       USES    ALL but SI, BP
 28045                                  
 28046                                  ;callmagic  proc near
 28047                                  ;       push    ds                             ;push segment of routine 
 28048                                  ;       push    Offset MagicPatch              ;push offset for routine
 28049                                  ;       retf                                   ;simulate jmp far
 28050                                  ;                                              ;far return address is on
 28051                                  ;                                              ;stack, so far return from
 28052                                  ;                                              ;call will return this routine
 28053                                  ;callmagic  endp
 28054                                  
 28055                                  
 28056                                  ; 25/09/2023
 28057                                  %if 0
 28058                                  callmagic:
 28059                                  	push	ds
 28060                                  	push	MagicPatch
 28061                                  	retf	
 28062                                  %endif
 28063                                  
 28064                                  ALLOCATE:
 28065                                  	; 10/09/2018
 28066                                  ;BEGIN MAGICDRV MODIFICATIONS
 28067                                  ;
 28068                                  ;7/5/92 scottq
 28069                                  ;
 28070                                  ;This is the disk compression patch location which allows
 28071                                  ;the disk compression software to fail allocations if the
 28072                                  ;FAT would allows allocation, but the free space for compressed
 28073                                  ;data would not.
 28074                                  ;        
 28075                                  ;;;	call    far ptr MAGICPATCH
 28076                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28077                                  ;;; but we do know the segment and offset of the routine
 28078                                  ;;; so simulate a far call to dosdata:magicpatch
 28079                                  ;;; note dosassume above, so DS -> dosdata
 28080                                  
 28081                                  	; MSDOS 6.0
 28082                                          ;clc				;clear carry so we fall through
 28083                                  	;				;if no patch is present
 28084                                  	;push	cs			;push segment for far return
 28085                                          ;call	callmagic		;this is a near call
 28086                                          ;jnc	short Regular_Allocate_Path
 28087                                  	;jmp	Disk_Full_Return
 28088                                  
 28089                                  ; 25/09/2023
 28090                                  %if 0
 28091                                  	clc
 28092                                  	push	cs
 28093                                  	call	callmagic
 28094                                  	jnc	short Regular_Allocate_Path
 28095                                  	jmp	Disk_Full_Return
 28096                                  Regular_Allocate_Path:
 28097                                  %endif
 28098                                  
 28099                                  	; 20/05/2019 - Retro DOS v4.0
 28100                                  ;END MAGICDRV MODIFICATIONS
 28101                                  
 28102                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28103                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28104                                  
 28105 00004E07 53                              PUSH    BX                      ; save (bx)
 28106 00004E08 31DB                            XOR     BX,BX
 28107 00004E0A E82407                  	call	UNPACK
 28108 00004E0D 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28109 00004E11 5B                              POP     BX
 28110 00004E12 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28111                                  
 28112 00004E14 51                              PUSH    CX
 28113 00004E15 53                              PUSH    BX
 28114                                  
 28115 00004E16 89DA                            MOV     DX,BX
 28116                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28117                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28118 00004E18 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28119 00004E1C 83FB02                          cmp     bx,2
 28120 00004E1F 7709                            ja	short FINDFRE
 28121                                  
 28122                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28123                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28124                                  
 28125                                  ads1:
 28126                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28127                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28128 00004E21 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28129 00004E27 BB0100                          mov     bx,1                    ; Counter next instruction so first
 28130                                                                          ;       cluster examined is 2
 28131                                  
 28132                                  ;   Scanning both forwards and backwards for a free cluster
 28133                                  ;
 28134                                  ;       (BX) = forwards scan pointer
 28135                                  ;       (CX) = clusters remaining to be allocated
 28136                                  ;       (DX) = current last cluster in file
 28137                                  ;       (TOS) = last cluster of file
 28138                                  
 28139                                  FINDFRE:
 28140 00004E2A 43                              INC     BX
 28141                                  	;cmp	bx,[es:bp+0Dh]
 28142 00004E2B 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28143 00004E2F 7757                    	ja	short ads7	; at end of disk
 28144 00004E31 E8FD06                          call	UNPACK          ; check out this cluster
 28145 00004E34 722F                            jc	short ads4	; FAT error             [INTERR?]
 28146 00004E36 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28147                                  
 28148                                  ;   Have found a free cluster. Chain it to the file
 28149                                  ;
 28150                                  ;       (BX) = found free cluster #
 28151                                  ;       (DX) = current last cluster in file
 28152                                  
 28153                                  	;;mov	[es:bp+1Ch],bx
 28154                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28155 00004E38 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28156 00004E3C 92                              xchg    ax,dx           ; save (dx) in ax
 28157 00004E3D BA0100                          mov     dx,1            ; mark this free guy as "1"
 28158 00004E40 E84207                  	call	PACK            ; set special "temporary" mark
 28159 00004E43 7220                            jc	short ads4	; FAT error             [INTERR?]
 28160                                  	;;cmp	word [es:bp+1Eh],-1
 28161                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28162 00004E45 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28163 00004E4A 7404                            JZ	short NO_ALLOC	; No
 28164                                  	;;dec	word [es:bp+1Eh]
 28165                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28166 00004E4C 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28167                                  NO_ALLOC:
 28168 00004E50 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28169 00004E51 87DA                            XCHG    BX,DX
 28170 00004E53 89D0                            MOV     AX,DX
 28171 00004E55 E82D07                  	call	PACK            ; link free cluster onto file
 28172                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28173                                                                  ;    cluster 0 with FIRCLUS value.
 28174 00004E58 720B                            jc	short ads4	; FAT error [INTERR?]
 28175 00004E5A 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28176 00004E5B 89DA                            mov     dx,bx           ; (dx) = current end of file
 28177 00004E5D E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28178                                  
 28179                                  ;   We've successfully extended the file. Clean up and exit
 28180                                  ;
 28181                                  ;       (BX) = last cluster in file
 28182                                  
 28183 00004E5F BAFFFF                          MOV     DX,0FFFFH
 28184 00004E62 E82007                  	call	PACK            ; mark last cluster EOF
 28185                                  
 28186                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28187                                  ;   2 whole bytes. Hope its worth it...
 28188                                  ;
 28189                                  ;       'C' set if error
 28190                                  ;       calling (BX) and (CX) pushed on stack
 28191                                  
 28192                                  ads4:   
 28193 00004E65 5B                      	POP     BX
 28194 00004E66 59                              POP     CX              ; Don't need this stuff since we're successful
 28195 00004E67 729D                            jc	short figrec_retn
 28196 00004E69 E8C506                          call	UNPACK          ; Get first cluster allocated for return
 28197                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28198 00004E6C 7298                            jc	short figrec_retn
 28199 00004E6E E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28200 00004E71 7293                            jc	short figrec_retn
 28201 00004E73 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28202 00004E75 09FF                            OR      DI,DI           ; clear 'C'
 28203 00004E77 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28204                                  
 28205                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28206                                  ;   info
 28207                                  dofastk:
 28208                                  	; 20/05/2019
 28209                                  	; MSDOS 6.0
 28210                                  	;push	dx ; * MSDOS 6.0
 28211                                  	;;mov	dl,[es:bp+0]
 28212                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28213                                  	;mov	dl,[es:bp]
 28214                                  
 28215                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28216                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28217                                  	
 28218                                  	; 16/12/2022
 28219                                  	;push	dx ; *
 28220                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28221                                  	; 15/12/2022
 28222                                  	;mov	dl,[es:bp]
 28223                                  	
 28224                                  	; MSDOS 3.3 & MSDOS 6.0
 28225 00004E79 06                      	PUSH	ES
 28226 00004E7A C43E[9E05]              	LES     DI,[THISSFT]
 28227                                  	;mov	[es:di+0Bh],bx
 28228 00004E7E 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28229                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28230                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28231 00004E82 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28232 00004E86 07                      	POP	ES
 28233                                  	;retn
 28234                                  
 28235                                  	;pop	dx ; * MSDOS 6.0
 28236                                  
 28237                                  	; 16/12/2022
 28238                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28239                                  	;pop	dx ; *
 28240                                  
 28241 00004E87 C3                      	retn	
 28242                                  
 28243                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28244                                  ;   of the disk...
 28245                                  
 28246                                  ads7:   
 28247 00004E88 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28248 00004E8D 7592                    	jnz	short ads1	; start scan from front of disk
 28249                                  
 28250                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28251                                  ;   the space back to the free list and tell the caller how much he could have
 28252                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28253                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28254                                  ;
 28255                                  ;       (CX) = clusters remaining to be allocated
 28256                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28257                                  ;       (TOS+1) = # of clusters wanted to allocate
 28258                                  
 28259 00004E8F 5B                              POP     BX              ; (BX) = last cluster of file
 28260 00004E90 BAFFFF                          MOV     DX,0FFFFH
 28261 00004E93 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28262 00004E96 58                              POP     AX              ; No. of clusters requested
 28263                                                                  ; Don't "retc". We are setting Carry anyway,
 28264                                                                  ;   Alloc failed, so proceed with return CX
 28265                                                                  ;   setup.
 28266 00004E97 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28267 00004E99 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28268                                                                  ;   Alloc failed.
 28269                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28270                                          ; MSDOS 6.0
 28271 00004E9C C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28272 00004EA1 F9                              STC
 28273 00004EA2 C3                              retn
 28274                                  
 28275                                  ;-----------------------------------------------------------------------
 28276                                  ;
 28277                                  ; Procedure Name : RESTFATBYT
 28278                                  ;
 28279                                  ; SEE ALLOCATE CAVEAT
 28280                                  ;       Carry set if error (currently user FAILed to I 24)
 28281                                  ;-----------------------------------------------------------------------
 28282                                  
 28283                                  RESTFATBYT:
 28284 00004EA3 53                              PUSH    BX
 28285 00004EA4 52                              PUSH    DX
 28286 00004EA5 57                              PUSH    DI
 28287 00004EA6 31DB                            XOR     BX,BX
 28288 00004EA8 8B16[9605]                      MOV     DX,[FATBYT]
 28289 00004EAC E8D606                  	call	PACK
 28290 00004EAF 5F                              POP     DI
 28291 00004EB0 5A                              POP     DX
 28292 00004EB1 5B                              POP     BX
 28293                                  ; 16/12/2022
 28294                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28295                                  ;RELEASE_flush:
 28296 00004EB2 C3                      	retn
 28297                                  
 28298                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28299                                  ;---------------------------------------------------------------------------
 28300                                  ;
 28301                                  ; Procedure Name : RELEASE
 28302                                  ;
 28303                                  ; Inputs:
 28304                                  ;       BX = Cluster in file
 28305                                  ;       ES:BP = Base of drive parameters
 28306                                  ; Function:
 28307                                  ;       Frees cluster chain starting with [BX]
 28308                                  ;       Carry set if error (currently user FAILed to I 24)
 28309                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 28310                                  ;
 28311                                  ;-----------------------------------------------------------------------------
 28312                                  
 28313                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28314                                  	; 20/05/2019 - Retro DOS v4.0
 28315                                  RELEASE:
 28316 00004EB3 31D2                            XOR     DX,DX
 28317                                  
 28318                                  	;entry	RELBLKS
 28319                                  RELBLKS:
 28320                                  
 28321                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 28322                                  ;   and free the rest in the chain.
 28323                                  
 28324 00004EB5 E87906                  	call	UNPACK
 28325 00004EB8 7224                    	jc	short RELEASE_flush
 28326 00004EBA 7422                    	jz	short RELEASE_flush
 28327 00004EBC 89F8                            MOV     AX,DI
 28328 00004EBE 52                              PUSH    DX
 28329 00004EBF E8C306                  	call	PACK
 28330 00004EC2 5A                              POP     DX
 28331 00004EC3 7219                    	jc	short RELEASE_flush
 28332 00004EC5 09D2                            OR      DX,DX
 28333 00004EC7 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28334                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28335                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28336 00004EC9 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28337 00004ECE 7404                            JZ	short NO_DEALLOC	; No
 28338 00004ED0 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28339                                  NO_DEALLOC:
 28340 00004ED4 89C3                            MOV     BX,AX
 28341 00004ED6 48                              dec     ax              ; check for "1"
 28342 00004ED7 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28343 00004ED9 E83E06                  	call	IsEOF
 28344 00004EDC 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28345                                  
 28346                                  	; 16/12/2022
 28347                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28348                                  ;%if 0
 28349                                  RELEASE_flush:
 28350                                  	; MSDOS 6.0
 28351 00004EDE 268A4600                	mov	al,[es:bp]
 28352                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28353 00004EE2 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28354 00004EE3 51                      	push	cx		;  them to be preserved.
 28355 00004EE4 06                      	push	es
 28356 00004EE5 55                      	push	bp
 28357 00004EE6 E8570B                  	call	FLUSHBUF	; commit buffers for this drive
 28358 00004EE9 5D                      	pop	bp
 28359 00004EEA 07                      	pop	es
 28360 00004EEB 59                      	pop	cx
 28361 00004EEC 5E                      	pop	si
 28362                                  ;%endif
 28363                                  RET12:
 28364 00004EED C3                      	retn
 28365                                  
 28366                                  ;Break	<GETEOF -- Find the end of a file>
 28367                                  ;------------------------------------------------------------------------
 28368                                  ;
 28369                                  ; Procedure Name : GETEOF
 28370                                  ;
 28371                                  ; Inputs:
 28372                                  ;       ES:BP Points to DPB
 28373                                  ;       BX = Cluster in a file
 28374                                  ;       DS = CS
 28375                                  ; Outputs:
 28376                                  ;       BX = Last cluster in the file
 28377                                  ;       Carry set if error (currently user FAILed to I 24)
 28378                                  ; DI destroyed. No other registers affected.
 28379                                  ;
 28380                                  ;--------------------------------------------------------------------------
 28381                                  
 28382                                  GETEOF:
 28383 00004EEE E84006                  	call	UNPACK
 28384 00004EF1 72FA                            jc	short RET12
 28385 00004EF3 53                              PUSH    BX
 28386 00004EF4 89FB                            MOV     BX,DI
 28387 00004EF6 E82106                  	call	IsEOF
 28388 00004EF9 5B                              POP     BX
 28389 00004EFA 73F1                            JAE     short RET12
 28390 00004EFC 89FB                            MOV     BX,DI
 28391 00004EFE EBEE                            JMP     short GETEOF
 28392                                  
 28393                                  ;============================================================================
 28394                                  ; FCB.ASM, MSDOS 6.0, 1991
 28395                                  ;============================================================================
 28396                                  ; 30/07/2018 - Retro DOS v3.0
 28397                                  ; 20/05/2019 - Retro DOS v4.0
 28398                                  
 28399                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28400                                  ;	NAME	FCB
 28401                                  
 28402                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28403                                  ;		  filename characters
 28404                                  ;
 28405                                  ;	MakeFcb
 28406                                  ;	NameTrans
 28407                                  ;	PATHCHRCMP
 28408                                  ;	GetLet
 28409                                  ;	UCase
 28410                                  ;	GetLet3
 28411                                  ;	GetCharType
 28412                                  ;	TESTKANJ
 28413                                  ;	NORMSCAN
 28414                                  ;	DELIM
 28415                                  ;
 28416                                  ;	Revision history:
 28417                                  ;
 28418                                  ;		A000  version 4.00  Jan. 1988
 28419                                  ;	
 28420                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28421                                  
 28422                                  TableLook	EQU	-1
 28423                                  
 28424                                  SCANSEPARATOR	EQU	1
 28425                                  DRVBIT		EQU	2
 28426                                  NAMBIT		EQU	4
 28427                                  EXTBIT		EQU	8
 28428                                  
 28429                                  ;----------------------------------------------------------------------------
 28430                                  ;
 28431                                  ; Procedure : MakeFcb
 28432                                  ;
 28433                                  ;----------------------------------------------------------------------------
 28434                                  
 28435                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28436                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28437                                  MAKEFCB:
 28438                                  ;hkn; SS override
 28439 00004F00 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28440 00004F06 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28441                                  	;test	al,2
 28442 00004F08 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28443 00004F0A 7504                    	JNZ	short DEFDRV
 28444 00004F0C 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28445                                  DEFDRV:
 28446 00004F10 47                      	INC	DI
 28447 00004F11 B90800                  	MOV	CX,8
 28448                                  	;test	al,4
 28449 00004F14 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28450 00004F16 93                      	XCHG	AX,BX		; Save bits in BX
 28451 00004F17 B020                    	MOV	AL," "
 28452 00004F19 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28453 00004F1B 01CF                    	ADD	DI,CX
 28454 00004F1D 31C9                    	XOR	CX,CX		; Don't fill any
 28455                                  FILLB:
 28456 00004F1F F3AA                    	REP	STOSB
 28457 00004F21 B103                    	MOV	CL,3
 28458 00004F23 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28459 00004F26 7404                    	JZ	short FILLB2
 28460 00004F28 01CF                    	ADD	DI,CX
 28461 00004F2A 31C9                    	XOR	CX,CX
 28462                                  FILLB2:
 28463 00004F2C F3AA                    	REP	STOSB
 28464 00004F2E 91                      	XCHG	AX,CX		; Put zero in AX
 28465 00004F2F AB                      	STOSW
 28466 00004F30 AB                      	STOSW			; Initialize two words after to zero
 28467 00004F31 83EF10                  	SUB	DI,16		; Point back at start
 28468                                  	;test	bl,1
 28469 00004F34 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28470 00004F37 7409                    	JZ	short SKPSPC
 28471 00004F39 E88800                  	CALL	SCANB		; Peel off blanks and tabs
 28472 00004F3C E82201                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28473 00004F3F 7504                    	JNZ	short NOSCAN
 28474 00004F41 46                      	INC	SI		; Skip over the delimiter
 28475                                  SKPSPC:
 28476 00004F42 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28477                                  NOSCAN:
 28478 00004F45 E8F000                  	CALL	GETLET
 28479 00004F48 761E                    	JBE	short NODRV	; Quit if termination character
 28480 00004F4A 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28481 00004F4D 7519                    	JNZ	short NODRV
 28482 00004F4F 46                      	INC	SI		; Skip over colon
 28483 00004F50 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28484 00004F52 760F                    	JBE	short BADDRV	; Drive letter out of range
 28485                                  
 28486 00004F54 50                      	PUSH	AX
 28487 00004F55 E8161B                  	call	GetVisDrv
 28488 00004F58 58                      	POP	AX
 28489 00004F59 730A                    	JNC	short HAVDRV
 28490                                  
 28491                                  	; 20/05/2019 - Retro DOS v4.0
 28492                                  	; MSDOS 6.0
 28493                                  ;hkn; SS override
 28494 00004F5B 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28495                                  					; if not FAT drive ;AN000;
 28496 00004F61 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28497                                  BADDRV:
 28498 00004F63 B2FF                    	MOV	DL,-1
 28499                                  HAVDRV:
 28500 00004F65 AA                      	STOSB			; Put drive specifier in first byte
 28501 00004F66 46                      	INC	SI
 28502 00004F67 4F                      	DEC	DI		; Counteract next two instructions
 28503                                  NODRV:
 28504 00004F68 4E                      	DEC	SI		; Back up
 28505 00004F69 47                      	INC	DI		; Skip drive byte
 28506                                  
 28507                                  	;entry	NORMSCAN
 28508                                  NORMSCAN:
 28509 00004F6A B90800                  	MOV	CX,8
 28510 00004F6D E82200                  	CALL	GETWORD 	; Get 8-letter file name
 28511 00004F70 803C2E                  	CMP	BYTE [SI],"."
 28512 00004F73 7510                    	JNZ	short NODOT
 28513 00004F75 46                      	INC	SI		; Skip over dot if present
 28514                                  
 28515                                  	; 24/09/2023
 28516                                  	;mov	cx,3
 28517 00004F76 B103                    	mov	cl,3	; ch=0
 28518                                  
 28519                                  	; MSDOS 6.0
 28520                                  ;hkn; SS override
 28521                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28522                                  	; 10/06/2019
 28523 00004F78 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28524 00004F7E 7402                    	JZ	short VOLOK				;AN000;
 28525 00004F80 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28526                                  	; 24/09/2023
 28527                                  	;MOV	CX,2					;AN000;
 28528 00004F81 49                      	dec	cx  ; cx=2
 28529                                  	;JMP	SHORT contvol				;AN000;
 28530                                  VOLOK:
 28531                                  	;MOV	CX,3		; Get 3-letter extension
 28532                                  contvol:
 28533 00004F82 E81300                  	CALL	MUSTGETWORD
 28534                                  NODOT:
 28535 00004F85 88D0                    	MOV	AL,DL
 28536                                  
 28537                                  	; MSDOS 6.0
 28538                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28539                                  	; 18/12/2022
 28540 00004F87 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28541                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28542                                  
 28543 00004F8D C3                      	retn
 28544                                  
 28545                                  NONAM:
 28546 00004F8E 01CF                    	ADD	DI,CX
 28547 00004F90 4E                      	DEC	SI
 28548 00004F91 C3                      	retn
 28549                                  
 28550                                  GETWORD:
 28551 00004F92 E8A300                  	CALL	GETLET		
 28552 00004F95 76F7                    	JBE	short NONAM	; Exit if invalid character
 28553 00004F97 4E                      	DEC	SI
 28554                                  
 28555                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28556                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28557                                  
 28558                                  MUSTGETWORD:
 28559 00004F98 E89D00                  	CALL	GETLET
 28560                                  
 28561                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28562                                  
 28563                                  ;IF NOT TABLELOOK
 28564                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28565                                  ;ENDIF
 28566 00004F9B 750C                    	JNZ	short MustCheckCX
 28567                                  
 28568                                  ;hkn; SS override
 28569 00004F9D 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28570 00004FA3 7419                    	JZ	short FILLNAM
 28571 00004FA5 3C20                    	CMP	AL," "
 28572 00004FA7 7515                    	JNZ	short FILLNAM
 28573                                  
 28574                                  MustCheckCX:
 28575 00004FA9 E3ED                    	JCXZ	MUSTGETWORD
 28576 00004FAB 49                      	DEC	CX
 28577 00004FAC 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28578 00004FAE 7504                    	JNZ	short NOSTAR
 28579 00004FB0 B03F                    	MOV	AL,"?"
 28580 00004FB2 F3AA                    	REP	STOSB
 28581                                  NOSTAR:
 28582 00004FB4 AA                      	STOSB
 28583 00004FB5 3C3F                    	CMP	AL,"?"
 28584 00004FB7 75DF                    	JNZ	short MUSTGETWORD
 28585 00004FB9 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28586 00004FBC EBDA                    	JMP	short MUSTGETWORD
 28587                                  FILLNAM:
 28588 00004FBE B020                    	MOV	AL," "
 28589 00004FC0 F3AA                    	REP	STOSB
 28590 00004FC2 4E                      	DEC	SI
 28591 00004FC3 C3                      	retn
 28592                                  
 28593                                  SCANB:
 28594 00004FC4 AC                      	LODSB
 28595 00004FC5 E8A100                  	CALL	SPCHK
 28596 00004FC8 74FA                    	JZ	short SCANB
 28597 00004FCA 4E                      	DEC	SI
 28598                                  scanb_retn:
 28599 00004FCB C3                      	retn
 28600                                  
 28601                                  ;----------------------------------------------------------------------------
 28602                                  ;
 28603                                  ; Procedure Name : NameTrans
 28604                                  ;
 28605                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28606                                  ; allow spaces in pathnames
 28607                                  ;
 28608                                  ;   Inputs:	DS:SI points to start of path element
 28609                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28610                                  ;		ES = DOSGroup
 28611                                  ;		DS:SI advanced after name
 28612                                  ;   Registers modified: DI,AX,DX,CX
 28613                                  ;
 28614                                  ;----------------------------------------------------------------------------
 28615                                  
 28616                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28617                                  	; 20/05/2019 - Retro DOS v4.0
 28618                                  NameTrans:
 28619                                  ;hkn; SS override
 28620 00004FCC 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28621 00004FD2 16                      	push	ss
 28622 00004FD3 07                      	pop	es
 28623                                  
 28624                                  ;hkn; NAME1 is in DOSDATA
 28625 00004FD4 BF[4B05]                	MOV	DI,NAME1
 28626 00004FD7 57                      	PUSH	DI
 28627 00004FD8 B82020                  	MOV	AX,'  '
 28628 00004FDB B90500                  	MOV	CX,5
 28629 00004FDE AA                      	STOSB
 28630 00004FDF F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28631 00004FE1 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28632 00004FE3 88C2                    	MOV	DL,AL
 28633 00004FE5 AA                      	STOSB
 28634 00004FE6 5F                      	POP	DI
 28635                                  
 28636 00004FE7 E880FF                  	CALL	NORMSCAN
 28637                                  
 28638                                  ;hkn; SS override for NAME1
 28639 00004FEA 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28640 00004FF0 75D9                    	jnz	short scanb_retn
 28641 00004FF2 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28642 00004FF8 C3                      	retn
 28643                                  
 28644                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28645                                  ;============================================================================
 28646                                  
 28647                                  ; 20/05/2019 - Retro DOS v4.0
 28648                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28649                                  
 28650                                  ;If TableLook
 28651                                  
 28652                                  ;hkn; Table	SEGMENT
 28653                                  ;	PUBLIC	CharType
 28654                                  ;----------------------------------------------------------------------------
 28655                                  
 28656                                  ; Character type table for file name scanning
 28657                                  ; Table provides a mapping of characters to validity bits.
 28658                                  ; Four bits are provided for each character. Values 7Dh and above
 28659                                  ; have all bits set, so that part of the table is chopped off, and
 28660                                  ; the translation routine is responsible for screening these values.
 28661                                  ; The bit values are defined in DOSSYM.INC
 28662                                  
 28663                                  ;	      ; ^A and NUL
 28664                                  ;CharType:
 28665                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28666                                  ;	      ; ^C and ^B
 28667                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28668                                  ;	      ; ^E and ^D
 28669                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28670                                  ;	      ; ^G and ^F
 28671                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28672                                  ;	      ; TAB and BS
 28673                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28674                                  ;	      ; ^K and ^J
 28675                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28676                                  ;	      ; ^M and ^L
 28677                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28678                                  ;	      ; ^O and ^N
 28679                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28680                                  ;	      ; ^Q and ^P
 28681                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28682                                  ;	      ; ^S and ^R
 28683                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28684                                  ;	      ; ^U and ^T
 28685                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28686                                  ;	      ; ^W and ^V
 28687                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28688                                  ;	      ; ^Y and ^X
 28689                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28690                                  ;	      ; ESC and ^Z
 28691                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28692                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28694                                  ;	      ; ^_ and ^^
 28695                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28696                                  ;	      ; ! and SPACE
 28697                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28698                                  ;	      ; # and "
 28699                                  ;	 db   LOW (NOT FFCB+FCHK)
 28700                                  ;	      ; $ - )
 28701                                  ;	 db   3 dup (0FFh)
 28702                                  ;	      ; + and *
 28703                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28704                                  ;	      ; - and '
 28705                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28706                                  ;	      ; / and .
 28707                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28708                                  ;	      ; 0 - 9
 28709                                  ;	 db   5 dup (0FFh)
 28710                                  ;	      ; ; and :
 28711                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28712                                  ;	      ; = and <
 28713                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28714                                  ;	      ; ? and >
 28715                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28716                                  ;	      ; A - Z
 28717                                  ;	 db   13 dup (0FFh)
 28718                                  ;	      ; \ and [
 28719                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28720                                  ;	      ; ^ and ]
 28721                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28722                                  ;	      ; _ - {
 28723                                  ;	 db   15 dup (0FFh)
 28724                                  ;	      ; } and |
 28725                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28726                                  
 28727                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28728                                  ;					; character in the table
 28729                                  
 28730                                  ;FCHK	equ 1		; normal name char, no chks needed
 28731                                  ;FDELIM	equ 2		; is a delimiter
 28732                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28733                                  ;FFCB	equ 8		; is valid in an FCB
 28734                                  
 28735                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28736                                  ;----------------------------------------------------------------------------
 28737                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28738                                  
 28739                                  CharType: ; 63 bytes
 28740 00004FF9 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28741 00005001 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28742 00005009 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28743 00005011 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28744 00005019 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28745 00005021 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28746 00005029 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28747 00005031 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28748                                  
 28749                                  CharType_last equ ($ - CharType) * 2
 28750                                  
 28751                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28752                                  ;----------------------------------------------------------------------------
 28753                                  ;CharType:
 28754                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28755                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28756                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28757                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28758                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28759                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28760                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28761                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28762                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28763                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28764                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28765                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28766                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28767                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28768                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28769                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28770                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28771                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28772                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28773                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28774                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28775                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28776                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28777                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28778                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28779                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28780                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28781                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28782                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28783                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28784                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28785                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28786                                  
 28787                                  ;hkn; Table	ENDS
 28788                                  
 28789                                  ;ENDIF
 28790                                  
 28791                                  ; 20/05/2019 - Retro DOS v4.0
 28792                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28793                                  
 28794                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28795                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28796                                  
 28797                                  ;----------------------------------------------------------------------------
 28798                                  ;
 28799                                  ; Procedure Names : GetLet, UCase, GetLet3
 28800                                  ;
 28801                                  ; These routines take a character, convert it to upper case, and check
 28802                                  ; for delimiters.  Three different entry points:
 28803                                  ;	GetLet -  DS:[SI] = character to convert
 28804                                  ;	UCase  -  AL = character to convert
 28805                                  ;	GetLet3 - AL = character
 28806                                  ;		  [BX] = translation table to use
 28807                                  ;
 28808                                  ;	Exit (in all cases) : AL = upper case character
 28809                                  ;			      CY set if char is control char other than TAB
 28810                                  ;			      ZF set if char is a delimiter
 28811                                  ;	Uses : AX, flags
 28812                                  ;
 28813                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28814                                  ; inline version.  Return with carry set is only possible in the inline
 28815                                  ; version. The table lookup version is the one in use.
 28816                                  ;
 28817                                  ;----------------------------------------------------------------------------
 28818                                  
 28819                                  ; This entry point has character at [SI]
 28820                                  
 28821                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28822                                  GETLET:	
 28823 00005038 AC                      	LODSB
 28824                                  
 28825                                  ; This entry point has character in AL
 28826                                  
 28827                                  	;entry	UCase
 28828                                  UCase:	
 28829                                  	; 09/08/2018
 28830                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28831                                  _UCase:
 28832 00005039 53                      	PUSH	BX
 28833 0000503A BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28834                                  
 28835                                  ; Convert the character in AL to upper case
 28836                                  
 28837                                  gl_0:
 28838 0000503D 3C61                    	CMP	AL,"a"
 28839 0000503F 7214                    	JB	short gl_2	; Already upper case, go check type
 28840 00005041 3C7A                    	CMP	AL,"z"
 28841 00005043 7702                    	JA	short gl_1
 28842 00005045 2C20                    	SUB	AL,20H		; Convert to upper case
 28843                                  
 28844                                  ; Map European character to upper case
 28845                                  
 28846                                  gl_1:
 28847 00005047 3C80                    	CMP	AL,80H
 28848 00005049 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28849 0000504B 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28850                                  
 28851                                  	; M048 - Start 
 28852                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28853                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28854                                  	; preserve it.
 28855                                  
 28856                                  	; 09/08/2018 - Retro DOS v3.0
 28857                                  	; MSDOS 3.3
 28858                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28859                                  	;CS	XLAT
 28860                                  
 28861                                  	; 20/05/2019 - Retro DOS v4.0
 28862                                  
 28863                                  	; MSDOS 6.0
 28864 0000504D 1E                      	push	ds
 28865                                  	;getdseg <ds>
 28866 0000504E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28867 00005053 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28868 00005054 1F                      	pop	ds
 28869                                  
 28870                                  	; M048 - End
 28871                                  
 28872                                  ; Now check the type
 28873                                  
 28874                                  ;If TableLook
 28875                                  gl_2:
 28876                                  	; 20/05/2019 - Retro DOS v4.0
 28877 00005055 50                      	PUSH	AX
 28878                                  
 28879                                  	; MSDOS 3.3
 28880                                  	;mov	bx,CharType
 28881                                  	;; 09/08/2018
 28882                                  	;;xlat	byte [cs:bx]
 28883                                  	;cs	xlat	
 28884                                  	
 28885                                  	; MSDOS 6.0
 28886 00005056 E81800                  	CALL	GetCharType	; returns type flags in AL
 28887                                  	
 28888                                  	;test	al,1	
 28889 00005059 A801                    	TEST	AL,FCHK 	; test for normal character
 28890 0000505B 58                      	POP	AX
 28891                                  
 28892 0000505C 5B                      	POP	BX
 28893 0000505D C3                      	RETN
 28894                                  
 28895                                  ; This entry has character in AL and lookup table in BX
 28896                                  
 28897                                  	; MSDOS 6.0
 28898                                  ;	;entry GetLet3
 28899                                  GETLET3: ; 10/08/2018
 28900 0000505E 53                      	PUSH	BX
 28901 0000505F EBDC                    	JMP	short gl_0
 28902                                  ;ELSE
 28903                                  ;
 28904                                  ;gl_2:
 28905                                  ;	POP	BX
 28906                                  ;	CMP	AL,"."
 28907                                  ;	retz
 28908                                  ;	CMP	AL,'"'
 28909                                  ;	retz
 28910                                  ;	CALL	PATHCHRCMP
 28911                                  ;	retz
 28912                                  ;	CMP	AL,"["
 28913                                  ;	retz
 28914                                  ;	CMP	AL,"]"
 28915                                  ;	retz
 28916                                  ;ENDIF
 28917                                  
 28918                                  ;---------------------------------------------------------------------
 28919                                  ;
 28920                                  ; DELIM - check if character is a delimiter
 28921                                  ;	Entry : AX = character to check
 28922                                  ;	Exit  : ZF set if character is not a delimiter
 28923                                  ;	Uses  : Flags
 28924                                  ;
 28925                                  ;--------------------------------------------------------------------
 28926                                  
 28927                                  	;entry	DELIM
 28928                                  DELIM:
 28929                                  ;IF TableLook
 28930                                  	; 20/05/2019 - Retro DOS v4.0
 28931 00005061 50                      	PUSH	AX
 28932                                  
 28933                                  	; MSDOS 3.3
 28934                                  	;push	bx
 28935                                  	;mov	bx,CharType
 28936                                  	;;09/08/2018
 28937                                  	;;xlat	byte [cs:bx]
 28938                                  	;cs	xlat
 28939                                  	;pop	bx
 28940                                  
 28941                                  	; MSDOS 6.0
 28942 00005062 E80C00                  	CALL	GetCharType
 28943                                  	
 28944                                  	;test	al,2
 28945 00005065 A802                    	TEST	AL,FDELIM
 28946 00005067 58                      	POP	AX
 28947 00005068 C3                      	RETN
 28948                                  ;ELSE
 28949                                  ;	CMP	AL,":"
 28950                                  ;	retz
 28951                                  ;
 28952                                  ;	CMP	AL,"<"
 28953                                  ;	retz
 28954                                  ;	CMP	AL,"|"
 28955                                  ;	retz
 28956                                  ;	CMP	AL,">"
 28957                                  ;	retz
 28958                                  ;
 28959                                  ;	CMP	AL,"+"
 28960                                  ;	retz
 28961                                  ;	CMP	AL,"="
 28962                                  ;	retz
 28963                                  ;	CMP	AL,";"
 28964                                  ;	retz
 28965                                  ;	CMP	AL,","
 28966                                  ;	retz
 28967                                  ;ENDIF
 28968                                  
 28969                                  ;-------------------------------------------------------------------------
 28970                                  ;
 28971                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28972                                  ;	Entry : AL = character to check
 28973                                  ;	Exit  : ZF set if character is a space
 28974                                  ;	Uses  : flags
 28975                                  ;
 28976                                  ;-------------------------------------------------------------------------
 28977                                  
 28978                                  	;entry SPCHK
 28979                                  SPCHK:
 28980                                  ;IF TableLook
 28981                                  	; 20/05/2019 - Retro DOS v4.0
 28982 00005069 50                      	PUSH	AX
 28983                                  
 28984                                  	; MSDOS 3.3
 28985                                  	;push	bx
 28986                                  	;mov	bx,CharType
 28987                                  	;; 09/08/2018
 28988                                  	;;xlat	byte [cs:bx]
 28989                                  	;cs	xlat
 28990                                  	;pop	bx
 28991                                  
 28992                                  	; MSDOS 6.0
 28993 0000506A E80400                  	CALL	GetCharType
 28994                                  	
 28995                                  	;test	al,4
 28996 0000506D A804                    	TEST	AL,FSPCHK
 28997 0000506F 58                      	POP	AX
 28998 00005070 C3                      	RETN
 28999                                  ;ELSE
 29000                                  ;	CMP	AL,9		; Filter out tabs too
 29001                                  ;	retz
 29002                                  ;; WARNING! " " MUST be the last compare
 29003                                  ;	CMP	AL," "
 29004                                  ;	return
 29005                                  ;ENDIF
 29006                                  
 29007                                  ;-------------------------------------------------------------------------
 29008                                  ;
 29009                                  ;  GetCharType - return flag bits indicating character type
 29010                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29011                                  ;	defined above at label CharType.
 29012                                  ;
 29013                                  ;	Entry : AL = character to return type flags for
 29014                                  ;	Exit  : AL = type flags
 29015                                  ;	Uses  : AL, flags
 29016                                  ;
 29017                                  ;-------------------------------------------------------------------------
 29018                                  
 29019                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29020                                  
 29021                                  	; 20/05/2019 - Retro DOS v4.0
 29022                                  	; MSDOS 6.0
 29023                                  GetCharType:
 29024                                  	;cmp	al,7Eh
 29025 00005071 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29026 00005073 7316                    	jae	short gct_90		; return standard value
 29027                                  
 29028 00005075 53                      	push	bx
 29029 00005076 BB[F94F]                	mov	bx,CharType		; load lookup table
 29030 00005079 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29031                                  	;xlat	cs:[bx] 		; get flags
 29032 0000507B 2ED7                    	cs	xlat	
 29033 0000507D 5B                      	pop	bx
 29034                                  
 29035                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29036                                  ; we have to shift the flags down to the low nibble
 29037                                  
 29038 0000507E 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29039                                  
 29040 00005080 D0E8                    	shr	al,1			; we want high nibble, shift it down
 29041 00005082 D0E8                    	shr	al,1
 29042 00005084 D0E8                    	shr	al,1
 29043 00005086 D0E8                    	shr	al,1
 29044                                  gct_80:
 29045 00005088 240F                    	and	al,0Fh			; clear the unused nibble
 29046 0000508A C3                      	retn
 29047                                  gct_90:
 29048 0000508B B00F                    	mov	al,0Fh			; set all flags
 29049 0000508D C3                      	retn
 29050                                  
 29051                                  ;----------------------------------------------------------------------------
 29052                                  ;
 29053                                  ; Procedure : PATHCHRCMP
 29054                                  ;
 29055                                  ;----------------------------------------------------------------------------
 29056                                  
 29057                                  PATHCHRCMP:
 29058 0000508E 3C2F                    	CMP	AL,'/'
 29059 00005090 7606                    	JBE	short PathRet
 29060 00005092 3C5C                    	CMP	AL,'\'
 29061 00005094 C3                      	retn
 29062                                  GotFor:
 29063 00005095 B05C                    	MOV	AL,'\'
 29064 00005097 C3                      	retn
 29065                                  PathRet:
 29066 00005098 74FB                    	JZ	short GotFor
 29067 0000509A C3                      	retn
 29068                                  
 29069                                  ;============================================================================
 29070                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29071                                  ;============================================================================
 29072                                  ; 30/07/2018 - Retro DOS v3.0
 29073                                  ; 29/04/2019 - Retro DOS v4.0
 29074                                  
 29075                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29076                                  
 29077                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29078                                  
 29079                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29080                                  ;	NAME	IBMCTRLC
 29081                                  
 29082                                  ;**	Low level routines for detecting special characters on CON input,
 29083                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29084                                  ;	process termination code, and the INT 0 divide overflow handler.
 29085                                  ;
 29086                                  ;	FATAL
 29087                                  ;	FATAL1
 29088                                  ;	reset_environment
 29089                                  ;	DSKSTATCHK
 29090                                  ;	SPOOLINT
 29091                                  ;	STATCHK
 29092                                  ;	CNTCHAND
 29093                                  ;	DIVOV
 29094                                  ;	CHARHARD
 29095                                  ;	HardErr
 29096                                  ;
 29097                                  ;	Revision history:
 29098                                  ;
 29099                                  ;	    AN000	version 4.0   Jan 1988
 29100                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29101                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29102                                  ;
 29103                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29104                                  ;	      flags register. In order to return to user normally DOS used to
 29105                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29106                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29107                                  ;
 29108                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29109                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29110                                  ;	      charhard.
 29111                                  
 29112                                  ; 29/04/2019 - Retro DOS v4.0
 29113                                  	; MSDOS 6.0
 29114                                  ;		public	LowInt23Addr		
 29115                                  LowInt23Addr: ;	LABEL	DWORD
 29116 0000509B [CD10]0000              	DW	LowInt23, 0
 29117                                  
 29118                                  ;		public	LowInt24Addr
 29119                                  LowInt24Addr: ;	LABEL	DWORD
 29120 0000509F [E110]0000              	DW	LowInt24, 0
 29121                                  
 29122                                  ;		public	LowInt28Addr
 29123                                  LowInt28Addr: ;	LABEL	DWORD
 29124 000050A3 [F510]0000              	DW	LowInt28, 0
 29125                                  
 29126                                  ;Break	<Checks for ^C in CON I/O>
 29127                                  
 29128                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29129                                  ; 05/05/2019 - Retro DOS v4.0
 29130                                  
 29131                                  ;---------------------------------------------------------------------------
 29132                                  ;
 29133                                  ; Procedure Name : DSKSTATCHK
 29134                                  ;
 29135                                  ; Check for ^C if only one level in
 29136                                  ;
 29137                                  ;---------------------------------------------------------------------------
 29138                                  
 29139                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29140                                  
 29141                                  DSKSTATCHK:        
 29142                                  	;CMP	BYTE [INDOS],1
 29143 000050A7 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 29144                                  	;retnz			; Do NOTHING
 29145                                  	; 16/12/2022
 29146 000050AD 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 29147                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29148                                  	;jz	short _RET37 ; dskstatchk1
 29149                                  	;retn
 29150                                  ;_RET37:
 29151                                  ;dskstatchk1:
 29152 000050AF 51                      	PUSH    CX
 29153 000050B0 06                              PUSH    ES
 29154 000050B1 53                              PUSH    BX
 29155 000050B2 1E                              PUSH    DS
 29156 000050B3 56                              PUSH    SI
 29157                                          
 29158                                  	;PUSH	CS
 29159                                          ;POP	ES
 29160                                          ;PUSH	CS
 29161                                          ;POP	DS
 29162                                  
 29163 000050B4 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29164 000050B6 8EC3                    	MOV	ES,BX		; for deviocall2
 29165 000050B8 8EDB                    	MOV	DS,BX
 29166                                  
 29167                                  	; 16/12/2022
 29168                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29169                                  
 29170                                  	; 05/05/2019
 29171                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29172                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29173                                  	;mov	word [ss:DSKSTST],0
 29174                                  
 29175                                  	; 16/12/2022
 29176                                  	; 25/06/2019
 29177 000050BA C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29178 000050BF C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29179 000050C4 C706[9503]0000          	mov	word [DSKSTST],0
 29180                                  
 29181 000050CA BB[9203]                        MOV     BX,DSKSTCALL
 29182                                  
 29183                                  	;LDS	SI,[ss:BCON]
 29184                                          ; 25/062019
 29185 000050CD C536[3200]              	lds	si,[BCON]
 29186                                  
 29187                                  ; 16/12/2022
 29188                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29189                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29190                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29191                                  ;	mov	word [ss:DSKSTST],0
 29192                                  ;	mov	bx,DSKSTCALL
 29193                                  ;	lds	si,[ss:BCON]
 29194                                  
 29195 000050D1 E890F5                  	CALL	DEVIOCALL2
 29196                                   	; 15/03/2018
 29197                                  	;;test	word [ss:DSKSTST],200h
 29198                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29199                                  	; 05/05/2019
 29200 000050D4 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29201 000050DA 7408                    	jz	short _GotCh		; No characters available
 29202                                  
 29203 000050DC 30C0                            XOR     AL,AL                   ; Set zero
 29204                                  RET36:
 29205 000050DE 5E                              POP     SI
 29206 000050DF 1F                              POP     DS
 29207 000050E0 5B                              POP     BX
 29208 000050E1 07                              POP     ES
 29209 000050E2 59                              POP     CX
 29210                                  	; 16/12/2022
 29211                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29212                                  _RET37:
 29213 000050E3 C3                              RETN
 29214                                  
 29215                                  _GotCh:
 29216 000050E4 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 29217                                  
 29218 000050E8 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 29219 000050EA 75F2                            JNZ     SHORT RET36
 29220 000050EC 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 29221 000050F2 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 29222 000050F8 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 29223                                  	; 09/09/2018
 29224 000050FD 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 29225 00005104 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 29226 0000510B E856F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29227 0000510E 5E                              POP     SI
 29228 0000510F 1F                              POP     DS
 29229 00005110 5B                              POP     BX                      ; Clean stack
 29230 00005111 07                              POP     ES
 29231 00005112 59                              POP     CX
 29232 00005113 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29233                                  
 29234                                  	; 05/05/2019
 29235                                  NOSTOP:
 29236                                  	; MSDOS 6.0
 29237 00005116 3C10                    	CMP	AL,"P"-"@"
 29238 00005118 7509                    	JNZ	short check_next
 29239                                  				    	; SS override
 29240 0000511A 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29241 00005120 7405                    	JZ	short INCHKJ		; no
 29242                                  check_end:	; 24/09/2023
 29243 00005122 C3                      	retn
 29244                                  check_next:
 29245                                  	;IF	NOT TOGLPRN
 29246                                  	;CMP	AL,"N"-"@"
 29247                                  	;JZ	short INCHKJ
 29248                                  	;ENDIF
 29249                                  
 29250 00005123 3C03                    	CMP	AL,"C"-"@"
 29251                                  	; 24/09/2023
 29252                                  	;JZ	short INCHKJ
 29253                                  ;check_end:
 29254                                  	;retn
 29255 00005125 75FB                    	jnz	short check_end
 29256                                  
 29257                                  	; 24/09/2023
 29258                                  	; 08/09/2018
 29259                                  INCHKJ:	; 10/08/2018
 29260 00005127 E9A500                  	jmp	INCHK
 29261                                  
 29262                                  	; MSDOS 3.3
 29263                                          ;CMP     AL,"P"-"@"  ; cmp al,16
 29264                                          ;JZ	short INCHKJ
 29265                                  
 29266                                  	; 15/04/2018
 29267                                          ;;IF	NOT TOGLPRN
 29268                                          ;CMP	AL,"N"-"@"
 29269                                          ;JZ	SHORT INCHKJ
 29270                                          ;;ENDIF
 29271                                  	
 29272                                  	;CMP     AL,"C"-"@"  ; cmp al,3
 29273                                          ;JZ	short INCHKJ
 29274                                  	;RETN
 29275                                  
 29276                                  ;	; 08/09/2018
 29277                                  ;INCHKJ:; 10/08/2018
 29278                                  ;	JMP	INCHK
 29279                                  
 29280                                  ;----------------------------------------------------------------------------
 29281                                  ;
 29282                                  ; Procedure Name : SpoolInt
 29283                                  ;
 29284                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 29285                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 29286                                  ; the middle of an INT 24.
 29287                                  ;
 29288                                  ;----------------------------------------------------------------------------
 29289                                  
 29290                                  SPOOLINT:
 29291 0000512A 9C                              PUSHF
 29292                                  	; 15/03/2018
 29293 0000512B 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 29294 00005131 7423                            JZ      SHORT POPFRET
 29295 00005133 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 29296 00005139 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 29297                                  
 29298                                  	; 30/07/2018
 29299                                  
 29300                                  	; Note that we are going to allow an external program to issue system 
 29301                                  	; calls at this time. We MUST preserve IdleInt across this.
 29302                                  
 29303 0000513B 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 29304                                  
 29305                                  	; 05/05/2019 - Retro DOS v4.0
 29306                                   
 29307                                  	; MSDOS 6.0
 29308 00005140 36803E[F211]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 29309 00005146 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 29310 00005148 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 29311 0000514A EB05                    	jmp	short spool_ret_addr
 29312                                  
 29313                                  do_low_int28:
 29314                                  	;call	far [ss:LowInt28Addr]
 29315 0000514C 2EFF1E[A350]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 29316                                  
 29317                                  spool_ret_addr:
 29318                                  	;INT	int_spooler		; INT 28h
 29319                                  
 29320 00005151 368F06[5803]            	POP	WORD [SS:IDLEINT]
 29321                                  POPFRET:
 29322 00005156 9D                              POPF
 29323                                  _RET18:  
 29324 00005157 C3                      	RETN
 29325                                  
 29326                                  ; 05/05/2019 - Retro DOS v4.0
 29327                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29328                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29329                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29330                                  
 29331                                  ;----------------------------------------------------------------------------
 29332                                  ;
 29333                                  ; Procedure Name : STATCHK
 29334                                  ;
 29335                                  ;----------------------------------------------------------------------------
 29336                                  
 29337                                  STATCHK:
 29338 00005158 E84CFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 29339                                                                          ; input redirection
 29340 0000515B 53                              PUSH    BX
 29341 0000515C 31DB                            XOR     BX,BX
 29342 0000515E E8E9E4                          CALL	GET_IO_SFT
 29343 00005161 5B                              POP     BX
 29344 00005162 72F3                            JC      SHORT _RET18
 29345                                  
 29346 00005164 B401                            MOV     AH,1
 29347 00005166 E826F3                          CALL	IOFUNC
 29348 00005169 74BF                            JZ      SHORT SPOOLINT
 29349 0000516B 3C13                            CMP     AL,'S'-'@'
 29350 0000516D 75A7                            JNZ     SHORT NOSTOP
 29351                                  
 29352                                  	; 05/05/2019
 29353                                  	; MSDOS 6.0			; SS override
 29354 0000516F 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 29355 00005175 75AB                    	JNZ	short check_end		; AN000; yes
 29356                                  
 29357 00005177 30E4                            XOR     AH,AH
 29358 00005179 E813F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 29359 0000517C EB4A                            JMP     SHORT PAUSOSTRT
 29360                                  PRINTOFF:
 29361                                  PRINTON:
 29362 0000517E 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29363                                  
 29364                                  	; 30/07/2018 - Retro DOS v3.0
 29365 00005183 53                      	PUSH	BX
 29366 00005184 BB0400                  	MOV	BX,4
 29367 00005187 E8C0E4                  	call	GET_IO_SFT
 29368 0000518A 5B                      	POP	BX
 29369 0000518B 72CA                    	jc	short _RET18
 29370 0000518D 06                      	PUSH	ES
 29371 0000518E 57                      	PUSH	DI
 29372 0000518F 1E                      	PUSH	DS
 29373 00005190 07                      	POP	ES
 29374 00005191 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29375                                  	;test	word [es:di+5],800h
 29376                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29377                                  	; 05/05/2019
 29378 00005193 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29379 00005198 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29380                                  
 29381                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29382                                  					; See if allowed
 29383 0000519A 50                      	push	ax
 29384 0000519B B82611                  	mov	ax,1126h
 29385 0000519E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29386                                  			; Return: CF set on error, AX = error code
 29387                                  			; STACK unchanged
 29388 000051A0 58                      	pop	ax
 29389                                  
 29390 000051A1 730F                    	JNC	short NORM_PR 		; Echo is OK
 29391                                  
 29392                                  					; SS override
 29393 000051A3 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29394                                  
 29395                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29396                                  
 29397 000051A9 50                      	push    ax
 29398 000051AA B82411                  	mov     ax,1124h
 29399 000051AD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29400                                  			; ES:DI -> SFT, SS = DOS CS
 29401 000051AF 58                      	pop     ax
 29402                                  
 29403 000051B0 EB10                    	JMP	SHORT RETP6
 29404                                  NORM_PR:
 29405 000051B2 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29406 000051B8 7505                    	JNZ	short PRNOPN
 29407 000051BA E82BF4                  	call	DEV_CLOSE_SFT
 29408 000051BD EB03                    	JMP	SHORT RETP6
 29409                                  PRNOPN:
 29410 000051BF E81EF4                  	call	DEV_OPEN_SFT
 29411                                  RETP6:
 29412 000051C2 5F                      	POP	DI
 29413 000051C3 07                      	POP	ES
 29414                                  STATCHK_RETN:
 29415 000051C4 C3                              RETN
 29416                                  PAUSOLP:
 29417 000051C5 E862FF                          CALL    SPOOLINT
 29418                                  PAUSOSTRT:
 29419 000051C8 B401                            MOV     AH,1
 29420 000051CA E8C2F2                          CALL	IOFUNC
 29421 000051CD 74F6                            JZ      SHORT PAUSOLP
 29422                                  INCHK:
 29423 000051CF 53                              PUSH    BX
 29424 000051D0 31DB                            XOR     BX,BX
 29425 000051D2 E875E4                          CALL	GET_IO_SFT
 29426 000051D5 5B                              POP     BX
 29427 000051D6 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29428 000051D8 30E4                            XOR     AH,AH
 29429 000051DA E8B2F2                          CALL	IOFUNC
 29430                                  	; 30/07/2018
 29431                                  	; MSDOS 3.3
 29432                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29433                                          ;JNZ	SHORT NOPRINT
 29434                                  
 29435                                  	;cmp	byte [SS:SCAN_FLAG],0
 29436                                  	;JZ	SHORT PRINTON	
 29437                                  	;mov	byte [ss:SCAN_FLAG],0
 29438                                  
 29439                                  	; 05/05/2019
 29440                                  	; MSDOS 6.0
 29441 000051DD 3C10                    	CMP	AL,"P"-"@"
 29442                                  	;;;;  7/14/86	ALT_Q key fix
 29443 000051DF 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29444                                  ;NOPRINT:	
 29445                                  	;IF	NOT TOGLPRN
 29446                                  	;CMP	AL,"N"-"@"
 29447                                  	;JZ	short PRINTOFF
 29448                                  	;ENDIF
 29449 000051E1 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29450                                  	;retnz
 29451 000051E3 75DF                    	jnz	short STATCHK_RETN
 29452                                  
 29453                                  	; !! NOTE: FALL THROUGH !!
 29454                                  
 29455                                  ;---------------------------------------------------------------------------
 29456                                  ;
 29457                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29458                                  ;
 29459                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29460                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29461                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29462                                  ; processing to continue; 2) the original interrupt return address to the code
 29463                                  ; that performed the function call in the first place. If the user CTRL-C
 29464                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29465                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29466                                  ; is simulated.
 29467                                  ;
 29468                                  ;---------------------------------------------------------------------------
 29469                                  
 29470                                  CNTCHAND:
 29471                                  	; MSDOS 6.0			; SS override
 29472                                  					; AN002; from RAWOUT
 29473                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29474                                  	;JNZ	short around_deadlock 	; AN002;
 29475                                  
 29476                                  	; 05/05/2019 - Retro DOS v4.0
 29477                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 29478 000051E5 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29479 000051EB 7508                    	JNZ	short around_deadlock 	; AN002;
 29480                                  
 29481 000051ED B003                            MOV     AL,3			; Display "^C"
 29482 000051EF E803C5                          CALL	BUFOUT
 29483 000051F2 E89EC3                          CALL	CRLF
 29484                                  around_deadlock:
 29485 000051F5 16                              PUSH    SS
 29486 000051F6 1F                              POP     DS
 29487 000051F7 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29488 000051FC 7403                            JZ      SHORT NOSWAP
 29489 000051FE E8B3E0                          CALL	SWAPBACK
 29490                                  NOSWAP:
 29491 00005201 FA                      	CLI				; Prepare to play with stack
 29492 00005202 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29493 00005206 8B26[8405]              	MOV	SP,[USER_SP]
 29494 0000520A E83EB2                          CALL	restore_world       ; User registers now restored
 29495                                  
 29496                                  	; 30/07/2018 - Retro DOS v3.0 
 29497                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29498                                          ; 14/03/2018 - Retro DOS v2.0
 29499                                  	;MOV	BYTE [CS:INDOS],0	
 29500                                          ;MOV	BYTE [CS:ERRORMODE],0
 29501                                          ;MOV	[CS:ConC_Spsave],SP
 29502                                  	;clc	;30/07/2018
 29503                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29504                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29505                                  			; Return: return via RETF 2 with CF set
 29506                                  			; DOS will abort program with errorlevel 0
 29507                                  			; else
 29508                                  			; interrupted DOS call continues
 29509                                  
 29510                                  	; 05/05/2019 - Retro DOS v4.0
 29511                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29512                                  
 29513                                  	; CS was used to address these variables. We have to use DOSDATA
 29514                                  	
 29515 0000520D 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29516                                  			; (pop es, after 'call restore_world')	
 29517 0000520E 1E                      	push	ds
 29518                                  	;getdseg <ds>			; ds -> dosdata
 29519 0000520F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29520 00005214 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29521 00005219 C606[2003]00            	mov	byte [ERRORMODE],0
 29522 0000521E 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29523                                  	; User SP has changed because of push. Adjust for it
 29524 00005222 8306[3203]02            	add	word [ConC_Spsave],2
 29525                                  
 29526 00005227 803E[F211]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29527 0000522C 1F                       	pop	ds	; restore ds
 29528 0000522D 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29529 0000522F F8                      	CLC				
 29530 00005230 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29531 00005232 EB06                    	jmp	short ctrlc_ret_addr
 29532                                  
 29533                                  	; 05/05/2019
 29534                                  do_low_int23:
 29535 00005234 F8                      	clc
 29536 00005235 2EFF1E[9B50]            	call	far [cs:LowInt23Addr]	
 29537                                  
 29538                                  	; 30/07/2018 
 29539                                  
 29540                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29541                                  
 29542                                  ; The user has returned to us. The circumstances we allow are:
 29543                                  ;
 29544                                  ;   IRET	We retry the operation by redispatching the system call
 29545                                  ;   CLC/RETF	POP the stack and retry
 29546                                  ;   ... 	Exit the current process with ^C exit
 29547                                  ;
 29548                                  ; User's may RETURN to us and leave interrupts on. 
 29549                                  ; Turn 'em off just to be sure
 29550                                  
 29551                                  ctrlc_ret_addr: ; 05/05/2019
 29552                                  
 29553 0000523A FA                      	CLI
 29554                                  
 29555                                  	; MSDOS 3.3 
 29556                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29557                                  	;PUSHF				; and the flags (maybe new call)
 29558                                  	;POP	AX
 29559                                  
 29560                                  	; 05/05/2019
 29561                                  	; MSDOS 6.0
 29562                                  
 29563                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29564                                  
 29565 0000523B 50                      	push	ax
 29566 0000523C 8CD8                    	mov	ax,ds
 29567                                  	;getdseg <ds>			; ds -> dosdata
 29568 0000523E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29569 00005243 A3[0A0D]                	mov	[TEMPSEG],ax
 29570 00005246 58                      	pop	ax
 29571 00005247 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29572 0000524A 9C                      	pushf				; and the flags (maybe new call)
 29573 0000524B 58                      	pop	ax
 29574                                  
 29575                                  ; See if the input stack is identical to the output stack
 29576                                  
 29577                                  	; MSDOS 3.3
 29578                                  	;CMP	SP,[CS:ConC_Spsave]
 29579                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29580                                  
 29581                                  	; MSDOS 6.0
 29582 0000524C 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29583 00005250 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29584                                  
 29585                                  ; Repeat the operation by redispatching the system call.
 29586                                  
 29587                                  ctrlc_repeat:
 29588                                  	; MSDOS 3.3
 29589                                  	;MOV	AX,[CS:USER_IN_AX]
 29590                                  	; 05/05/2019
 29591                                  	; MSDOS 6.0
 29592 00005252 A1[3A03]                	mov	ax,[USER_IN_AX]
 29593 00005255 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29594                                  	; MSDOS 3.3 & MSDOS 6.0 
 29595                                  	;transfer COMMAND
 29596                                  COMMANDJ:
 29597 00005259 E9ACB0                  	JMP	COMMAND
 29598                                  
 29599                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29600                                  ; RETF'd leaving some flags on the stack and examine the input
 29601                                  
 29602                                  ctrlc_try_new:
 29603 0000525C 83C402                  	ADD	SP,2			; pop those flags
 29604                                  	;;test	ax,1
 29605                                  	;TEST	AX,f_Carry		; did he return with carry?
 29606 0000525F A801                    	test	al,f_Carry ; test al,1
 29607 00005261 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29608                                  
 29609                                  	; MSDOS 6.0
 29610 00005263 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29611                                  
 29612                                  	; Well...  time to abort the user.  
 29613                                  	; Signal a ^C exit and use the EXIT system call..
 29614                                  
 29615                                  ctrlc_abort:
 29616                                  	; MSDOS 3.3
 29617                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29618                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29619                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29620                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29621                                  	;;JMP	SHORT COMMANDJ
 29622                                  	;JMP	COMMAND
 29623                                  
 29624                                  	; 05/05/2019 - Retro DOS v4.0
 29625                                  	; MSDOS 6.0
 29626 00005267 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29627 0000526A 1E                      	push	ds
 29628                                  	;getdseg <ds>			; ds -> dosdata
 29629 0000526B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29630 00005270 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29631 00005275 1F                      	pop	ds
 29632                                  	;transfer COMMAND		; give up by faking $EXIT
 29633 00005276 EBE1                    	JMP	SHORT COMMANDJ
 29634                                  	;JMP	COMMAND
 29635                                  
 29636                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29637                                  ;----------------------------------------------------------------------------
 29638                                  ;
 29639                                  ; Procedure Name : DIVOV
 29640                                  ;
 29641                                  ; Default handler for division overflow trap
 29642                                  ;
 29643                                  ;----------------------------------------------------------------------------
 29644                                  
 29645                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29646                                  DIVOV: 
 29647                                  	; 05/05/2019 - Retro DOS v4.0
 29648                                  	; 30/07/2018
 29649                                  	; 07/07/2018 - Retro DOS v3.0
 29650 00005278 BE[9D09]                	mov	si,DIVMES
 29651 0000527B 2E8B1E[B009]            	mov	bx,[cs:DivMesLen]
 29652                                  	;mov	ax,cs
 29653                                  	;mov	ss,ax
 29654                                  	; 05/05/2019
 29655                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29656 00005280 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29657 00005285 BC[A007]                	mov     sp,AUXSTACK
 29658                                  	;call	RealDivOv ; MSDOS 3.3
 29659 00005288 E80200                  	call	_OUTMES ; MSDOS 6.0
 29660 0000528B EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29661                                  
 29662                                  ; 30/07/2018
 29663                                  
 29664                                  ; MSDOS 6.0
 29665                                  ;---------------------------------------------------------------------------
 29666                                  ;
 29667                                  ; Procedure Name : OutMes
 29668                                  ;
 29669                                  ;
 29670                                  ; OutMes: perform message output
 29671                                  ; Inputs:   SS:SI points to message
 29672                                  ;	    BX has message length
 29673                                  ; Outputs:  message to BCON
 29674                                  ;
 29675                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29676                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29677                                  ;NB. This procedure is called only from DIVOV. -SR
 29678                                  ;
 29679                                  ;---------------------------------------------------------------------------
 29680                                  
 29681                                  ;MSDOS 3.3
 29682                                  ;---------------------------------------------------------------------------
 29683                                  ; RealDivOv: perform actual divide overflow stuff.
 29684                                  ; Inputs:   none
 29685                                  ; Outputs:  message to BCON
 29686                                  ;---------------------------------------------------------------------------
 29687                                  
 29688                                  	; 05/05/2019 - Retro DOS v4.0
 29689                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29690                                  
 29691                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29692                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29693                                  
 29694                                  ;---------------------------------------------------------------------------
 29695                                  ;
 29696                                  ; Procedure Name : OutMes
 29697                                  ;
 29698                                  ; OutMes: perform message output
 29699                                  ; Inputs:   SS:SI points to message
 29700                                  ;	    BX has message length
 29701                                  ; Outputs:  message to BCON
 29702                                  ;
 29703                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29704                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29705                                  ;NB. This procedure is called only from DIVOV. -SR
 29706                                  ;
 29707                                  ;---------------------------------------------------------------------------
 29708                                  
 29709                                  	; 30/07/2018
 29710                                  	; MSDOS 6.0
 29711                                  _OUTMES:
 29712                                  	; MSDOS 3.3
 29713                                  ;RealDivOv:
 29714                                  	; 07/07/2018 - Retro DOS v3.0
 29715                                          ;Context ES
 29716 0000528D 16                      	push	ss ; 05/05/2019
 29717                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29718 0000528E 07                      	POP	ES
 29719                                          ;Context DS
 29720 0000528F 16                      	push	ss ; 05/05/2019	
 29721                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29722 00005290 1F                      	POP	DS
 29723 00005291 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29724 00005296 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29725 0000529B C706[9503]0000                  MOV     WORD [DSKSTST],0
 29726                                  	; BX = [DivMesLen] = 19
 29727 000052A1 891E[A403]                      MOV     [DSKSTCNT],BX
 29728 000052A5 BB[9203]                        MOV     BX,DSKSTCALL
 29729 000052A8 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29730                                  	; 08/09/2018
 29731                                  	;mov	[DEVIOBUF_PTR],si
 29732                                  	; MSDOS 6.0
 29733                                  					; CS is used for string, fill in 
 29734                                  					; segment address 
 29735 000052AC 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29736                                  
 29737 000052B0 C536[3200]                      LDS     SI,[BCON]
 29738 000052B4 E8ADF3                          CALL	DEVIOCALL2
 29739                                  
 29740                                  	;; 14/03/2018
 29741                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29742                                  	;; 08/09/2018
 29743                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29744                                          ;MOV	WORD [CS:DSKSTCNT],1
 29745                                          
 29746                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29747                                  
 29748                                  	; ES still points to DOSDATA. ES is
 29749                                  					; not destroyed by deviocall2. So use
 29750                                  					; ES override.
 29751                                  
 29752 000052B7 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29753 000052BE 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29754                                  
 29755 000052C5 C3                      	RETN
 29756                                  
 29757                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29758                                  ;---------------------------------------------------------------------------
 29759                                  ;
 29760                                  ; Procedure Name : CHARHARD
 29761                                  ;
 29762                                  ;
 29763                                  ; Character device error handler
 29764                                  ; Same function as HARDERR
 29765                                  ;
 29766                                  ;---------------------------------------------------------------------------
 29767                                  
 29768                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29769                                  CHARHARD:
 29770                                  	; 05/05/2019 - Retro DOS v4.0
 29771                                  	; 30/07/2018
 29772                                  	; 08/07/2018 - Retro DOS v3.0
 29773                                  
 29774                                  	; MSDOS 6.0
 29775                                  		   			; M024 - start
 29776 000052C6 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29777                                  	;jne	short @f		; Y: allow fail
 29778 000052CC 750B                    	jne	short chard1
 29779                                  
 29780 000052CE 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29781                                  
 29782 000052D1 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29783 000052D7 7503                    	jnz	short ctrlp		; Y: 
 29784                                  ;@@:
 29785                                  chard1:					; M024 - end
 29786                                  	; MSDOS 6.0 & MSDOS 3.3
 29787                                  
 29788                                  ; Character device error handler
 29789                                  ; Same function as HARDERR
 29790                                  
 29791                                  	;or	ah,38h
 29792 000052D9 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29793                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29794 000052DC 368826[4B03]            	mov	[SS:ALLOWED],ah
 29795                                  
 29796                                  	; 15/03/2018
 29797 000052E1 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29798 000052E6 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29799 000052EB 56                              PUSH    SI
 29800                                  	;and	di,0FFh
 29801 000052EC 81E7FF00                        AND     DI,STECODE
 29802 000052F0 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29803 000052F2 E86400                          CALL    FATALC
 29804 000052F5 5E                              POP     SI
 29805                                  	;return
 29806 000052F6 C3                              RETN
 29807                                  
 29808                                  ;---------------------------------------------------------------------------
 29809                                  ;
 29810                                  ; Procedure Name : HardErr
 29811                                  ;
 29812                                  ; Hard disk error handler. Entry conditions:
 29813                                  ;	DS:BX = Original disk transfer address
 29814                                  ;	DX = Original logical sector number
 29815                                  ;	CX = Number of sectors to go (first one gave the error)
 29816                                  ;	AX = Hardware error code
 29817                                  ;	DI = Original sector transfer count	
 29818                                  ;	ES:BP = Base of drive parameters
 29819                                  ;	[READOP] = 0 for read, 1 for write
 29820                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29821                                  ; Output:
 29822                                  ;	[FAILERR] will be set if user responded FAIL
 29823                                  ;
 29824                                  ;--------------------------------------------------------------------------
 29825                                  
 29826                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29827                                  HARDERR:
 29828                                  	; 05/05/2019 - Retro DOS v4.0
 29829                                  	; 30/07/2018
 29830                                  	; 08/07/2018 - Retro DOS v3.0
 29831 000052F7 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29832                                          ;and	di,0FFh
 29833 000052F8 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29834                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29835                                  	;cmp	di,0
 29836 000052FC 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29837 000052FF 750A                            JNZ     short NOSETWRPERR
 29838 00005301 50                              PUSH    AX
 29839                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29840                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29841                                          ;;MOV	AL,[ES:BP+0]
 29842                                  	; 15/12/2022
 29843 00005302 268A4600                	mov	al,[ES:BP]
 29844                                          	; 15/03/2018
 29845 00005306 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29846 0000530A 58                              POP     AX
 29847                                  NOSETWRPERR:
 29848 0000530B 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29849 0000530D 01C2                            ADD     DX,AX                   ; First sector number to retry
 29850 0000530F 52                              PUSH    DX
 29851                                  	; 08/07/2018
 29852                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29853 00005310 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29854 00005314 5A                              POP     DX
 29855 00005315 01C3                            ADD     BX,AX                   ; First address for retry
 29856 00005317 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29857                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29858 00005319 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29859 0000531D 721A                            JB      SHORT ERRINT
 29860 0000531F FEC4                            INC     AH                      ; Flag for FAT
 29861                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29862                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29863 00005321 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29864 00005325 7308                    	JAE	short TESTDIR 		; No
 29865                                  		 ; Err in FAT must force recomp of freespace
 29866                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29867                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29868 00005327 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29869 0000532D EB0A                    	JMP	SHORT ERRINT
 29870                                  TESTDIR:
 29871 0000532F FEC4                            INC     AH
 29872                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29873 00005331 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29874 00005335 7202                            JB      SHORT ERRINT
 29875 00005337 FEC4                            INC     AH                      ; Must be in data area
 29876                                  ERRINT:
 29877 00005339 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29878 0000533B 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29879                                  
 29880                                  	; 15/08/2018
 29881                                  					; SS override for allowed and EXITHOLD
 29882 00005340 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29883                                  
 29884                                          ;entry   FATAL
 29885                                  FATAL:
 29886                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29887                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29888                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29889                                  	; 15/12/2022
 29890 00005345 268A4600                	MOV	AL,[ES:BP]        
 29891                                  
 29892                                  	;entry   FATAL1
 29893                                  FATAL1:  
 29894                                  	; 15/03/2018      
 29895 00005349 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29896 0000534E 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29897                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29898                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29899 00005353 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29900 00005357 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29901                                  
 29902                                  	; DI has the INT-24-style extended error. We now map the error code 
 29903                                  	; for this into the normalized get extended error set by using the 
 29904                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29905                                  	; the device returned codes and leave all others beyond the look up 
 29906                                  	; table alone.
 29907                                  
 29908                                  	; 08/07/2018 - Retro DOS v3.0
 29909                                  FATALC:
 29910 00005359 E89701                  	call	SET_I24_EXTENDED_ERROR
 29911                                  	;cmp	di,0Ch
 29912 0000535C 83FF0C                  	CMP	DI,error_I24_gen_failure
 29913 0000535F 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29914 00005361 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29915                                  					;  Only come via GetExtendedError
 29916                                  ;** ----------------------------------------------------------------
 29917                                  ;
 29918                                  ; Entry point used by REDIRector on Network I 24 errors.
 29919                                  ;
 29920                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29921                                  ;
 29922                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29923                                  ;     EXITHOLD set for restore of ES:BP.
 29924                                  ; ------------------------------------------------------------------
 29925                                  	;entry	NET_I24_ENTRY
 29926                                  NET_I24_ENTRY:
 29927                                  GOT_RIGHT_CODE:
 29928 00005364 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29929 0000536A 7404                            JZ	SHORT NoSetFail
 29930 0000536C B003                    	MOV	AL,3
 29931 0000536E EB6C                    	JMP	short FailRet
 29932                                  NoSetFail:
 29933 00005370 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29934 00005375 16                              PUSH	SS
 29935 00005376 07                              POP	ES
 29936                                      
 29937                                  	; Wango!!! We may need to free some user state info... In 
 29938                                  	; particular, we may have locked down a JFN for a user and he may 
 29939                                  	; NEVER return to us. Thus,we need to free it here and then 
 29940                                  	; reallocate it when we come back.
 29941                                  
 29942 00005377 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29943 0000537D 740C                    	JZ	short _NoFree
 29944 0000537F 1E                      	push	ds
 29945 00005380 56                      	push	si
 29946 00005381 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29947 00005386 C604FF                  	MOV	BYTE [SI],0FFH
 29948 00005389 5E                      	pop	si
 29949 0000538A 1F                      	pop	ds
 29950                                  
 29951                                  _NoFree:
 29952 0000538B FA                      	CLI
 29953                                  					; Prepare to play with stack
 29954 0000538C 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29955 00005391 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29956                                  
 29957                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29958                                  
 29959                                  	;; Extended Open hooks
 29960                                  					; AN000;IFS.I24 error disabled
 29961                                  	;test	byte [ss:EXTOPEN_ON],2
 29962 00005396 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29963 0000539C 7404                    	JZ	short i24yes		; AN000;IFS.no
 29964                                  faili24:				; AN000;
 29965 0000539E B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29966 000053A0 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29967                                  i24yes: 				; AN000;
 29968                                  	;; Extended Open hooks
 29969                                  
 29970 000053A2 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29971 000053A7 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29972                                  
 29973                                  	;;int	24h	
 29974                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29975                                  					; must preserve ES
 29976                                  	; 05/05/2019
 29977 000053AC 26803E[F211]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29978 000053B2 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29979 000053B4 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29980                                  					; must preserve ES
 29981 000053B6 EB05                    	jmp	short criterr_ret_addr
 29982                                  
 29983                                  do_low_int24:
 29984                                  	; 05/05/2019
 29985                                  	; MSDOS 6.0
 29986 000053B8 2EFF1E[9F50]            	call    far [cs:LowInt24Addr]
 29987                                  criterr_ret_addr:
 29988 000053BD 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29989 000053C2 268C16[8605]                    MOV     [ES:USER_SS],SS
 29990 000053C7 8CC5                            MOV     BP,ES
 29991 000053C9 8ED5                            MOV     SS,BP
 29992                                  passi24:
 29993 000053CB 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29994 000053D0 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29995 000053D5 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29996 000053DB FB                              STI
 29997                                  FailRet:
 29998 000053DC 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29999                                  	
 30000                                  	; 08/07/2018
 30001                                  
 30002                                  	; Triage the user's reply.
 30003                                  
 30004 000053E1 3C01                    	CMP	AL,1
 30005 000053E3 723D                    	JB	short CheckIgnore	; 0 => ignore
 30006 000053E5 7445                    	JZ	short CheckRetry	; 1 => retry
 30007 000053E7 3C03                    	CMP	AL,3			; 3 => fail
 30008 000053E9 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 30009                                  
 30010                                  	; The reply was fail. See if we are allowed to fail.
 30011                                  
 30012                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 30013                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30014                                  	;test	byte [ss:ALLOWED],8
 30015 000053EB 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30016 000053F1 7443                    	jz	short DoAbort	; No, do abort
 30017                                  DoFail:
 30018 000053F3 B003                    	MOV	AL,3		; just in case...
 30019                                  				; AN000;EO. I24 error disabled
 30020                                  	; 05/05/2019
 30021                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30022 000053F5 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30023 000053FB 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30024                                  	
 30025 000053FD 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30026                                  CleanUp:
 30027 00005402 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30028 00005408 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30029                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30030                                  	;jnz	short CleanUp2
 30031                                  	;retn
 30032                                  	; 17/12/2022
 30033 0000540E 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30034                                  CleanUp2:
 30035 00005410 1E                      	push	ds
 30036 00005411 56                      	push	si
 30037 00005412 50                      	push	ax
 30038 00005413 36A1[AA05]              	MOV	AX,[ss:SFN]
 30039 00005417 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30040 0000541C 8804                    	MOV	[SI],AL
 30041 0000541E 58                      	pop	ax
 30042 0000541F 5E                      	pop	si
 30043 00005420 1F                      	pop	ds
 30044                                  Cleanup_retn:
 30045 00005421 C3                      	retn
 30046                                  
 30047                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30048                                  
 30049                                  CheckIgnore:
 30050                                  	;test	byte [ss:ALLOWED],20h
 30051 00005422 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30052 00005428 74C9                    	jz	short DoFail			 ; No, do fail
 30053 0000542A EBD6                    	jmp	short CleanUp
 30054                                  
 30055                                  	; The reply was RETRY. See if we are allowed to retry.
 30056                                  
 30057                                  CheckRetry:
 30058                                  	;test	byte [ss:ALLOWED],10h
 30059 0000542C 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30060 00005432 74BF                    	jz	short DoFail			; No, do fail
 30061 00005434 EBCC                    	JMP	short CleanUp
 30062                                  
 30063                                  	; The reply was ABORT.
 30064                                  DoAbort:
 30065 00005436 16                      	push	ss
 30066 00005437 1F                      	pop	ds
 30067                                  
 30068 00005438 803E[5703]00            	CMP	byte [CONSWAP],0
 30069 0000543D 7403                    	JZ	short NOSWAP2
 30070 0000543F E872DE                  	call	SWAPBACK
 30071                                  NOSWAP2:
 30072                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30073                                  	; turn this abort into a fail.
 30074                                  
 30075                                  	;test	[fAborting],0FFh
 30076                                  	;jnz	short DoFail
 30077                                  
 30078 00005442 803E[5903]00            	cmp	byte [fAborting],0
 30079 00005447 75AA                    	JNZ	short DoFail
 30080                                  
 30081                                  	; Set return code
 30082                                  
 30083 00005449 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30084 0000544E 30C0                    	XOR	AL,AL
 30085                                  
 30086                                  	; we are truly aborting the process. Go restore information from 
 30087                                  	; the PDB as necessary.
 30088                                  
 30089 00005450 E9850D                  	jmp	exit_inner
 30090                                  
 30091                                  ;** --------------------------------------------------------------------------
 30092                                  ;
 30093                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30094                                  ; different, then an old-style return is performed. If they are the same,
 30095                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30096                                  ; the source of the terminate addresses.
 30097                                  ;
 30098                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30099                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30100                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30101                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30102                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30103                                  ; operation. In essence, we dis-allow the abort response.
 30104                                  ;
 30105                                  ; output:   none.
 30106                                  ; ----------------------------------------------------------------------------
 30107                                  
 30108                                  	;entry	reset_environment
 30109                                  	
 30110                                  reset_environment:
 30111                                  	; 30/07/2018 - Retro DOS v3.0
 30112                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30113                                  
 30114                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30115                                  
 30116 00005453 1E                      	PUSH	DS			; save PDB of process
 30117                                  
 30118                                  	; There are no critical sections in force. Although we may enter 
 30119                                  	; here with critical sections locked down, they are no longer 
 30120                                  	; relevant. We may safely free all allocated resources.
 30121                                  
 30122 00005454 B482                    	MOV	AH,82h
 30123                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30124                                  	;int	2Ah 	
 30125 00005456 CD2A                    	INT	int_IBM
 30126                                  
 30127                                  					; SS override
 30128 00005458 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30129                                  
 30130                                  					; DOS 4.00 doesn't need it
 30131                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30132                                  					; Allow REDIR to clear some stuff
 30133                                  					; On process exit.
 30134 0000545E B82211                  	mov     ax, 1122h
 30135 00005461 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30136                                  			; SS = DOS CS
 30137                                  	;mov	al,22h	
 30138 00005463 B022                    	MOV	AL,int_terminate
 30139 00005465 E82CBA                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30140                                  
 30141 00005468 59                      	POP	CX			; get ThisPDB
 30142 00005469 06                      	push	es
 30143 0000546A 53                      	push	bx			; save return address
 30144                                  
 30145 0000546B 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30146 00005470 8EDB                    	MOV	DS,BX
 30147 00005472 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30148                                  
 30149                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30150                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 30151                                  	; is not Exit_keep_process
 30152                                  	
 30153 00005475 39D8                    	CMP	AX,BX
 30154 00005477 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30155 00005479 39CB                    	CMP	BX,CX
 30156 0000547B 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30157 0000547D 50                      	PUSH	AX			; save parent
 30158                                  
 30159                                  					; SS override
 30160                                  	;cmp	byte [SS:EXIT_TYPE],3
 30161 0000547E 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30162 00005484 7406                    	JZ	short reset_to_parent 	; keeping this process
 30163                                  
 30164                                  	; We are truly removing a process. Free all allocation blocks 
 30165                                  	; belonging to this PDB
 30166                                  
 30167                                  	;invoke	arena_free_process
 30168 00005486 E8870D                  	call	arena_free_process
 30169                                  
 30170                                  	; Kill off remainder of this process. Close file handles and signal 
 30171                                  	; to relevant network folks that this process is dead. Remember that 
 30172                                  	; CurrentPDB is STILL the current process!
 30173                                  
 30174                                  	;invoke	DOS_ABORT
 30175 00005489 E82FDA                  	call	DOS_ABORT
 30176                                  
 30177                                  reset_to_parent:
 30178                                  					; SS override
 30179 0000548C 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30180                                  
 30181                                  reset_return:				; come here for normal return
 30182                                  	;Context DS			; DS is used to refer to DOSDATA  
 30183 00005491 16                      	push	ss
 30184 00005492 1F                      	pop	ds	
 30185                                  
 30186 00005493 B0FF                    	MOV	AL,-1
 30187                                  
 30188                                  	; make sure that everything is clean In this case ignore any errors, 
 30189                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30190                                  
 30191                                  	;EnterCrit critDisk
 30192 00005495 E875BE                  	call	ECritDisk
 30193                                  	;invoke	FLUSHBUF
 30194 00005498 E8A505                  	call	FLUSHBUF
 30195                                  	;LeaveCrit critDisk
 30196 0000549B E88ABE                  	call	LCritDisk
 30197                                  
 30198                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30199                                  
 30200 0000549E E883F7                  	call	CHECK_VIRT_OPEN
 30201 000054A1 FA                      	CLI
 30202 000054A2 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30203 000054A7 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30204 000054AC C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30205 000054B1 8F06[8005]              	POP	WORD [EXITHOLD]
 30206 000054B5 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30207                                  
 30208                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30209                                  
 30210 000054B9 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30211 000054BD 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30212 000054C1 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30213                                  
 30214 000054C5 E883AF                  	call	restore_world
 30215                                  
 30216                                  	; 05/05/2019
 30217 000054C8 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30218                                  
 30219                                  	; MSDOS 6.0
 30220 000054C9 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 30221 000054CA 8CD8                    	mov	ax,ds			; and not on stack.
 30222                                  	;getdseg <ds>			; ds -> dosdata
 30223 000054CC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30224 000054D1 A3[0A0D]                	mov	[TEMPSEG],ax
 30225 000054D4 58                      	pop	ax
 30226                                  					; set up ds to DOSDATA
 30227                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30228 000054D5 A3[8405]                	mov	[USER_SP],ax
 30229                                  
 30230 000054D8 58                      	POP	AX			; suck off CS:IP of interrupt...
 30231 000054D9 58                      	POP	AX
 30232 000054DA 58                      	POP	AX
 30233                                  
 30234                                  ; M011 : BEGIN
 30235                                  
 30236                                  	; MSDOS 3.3
 30237                                  ;	MOV	AX,0F202h	; STI
 30238                                  
 30239                                  	; MSDOS 6.0
 30240 000054DB 9F                      	LAHF
 30241 000054DC 86E0                    	XCHG	AH,AL
 30242 000054DE 2402                    	AND	AL,2
 30243 000054E0 B4F2                    	MOV	AH,0F2h
 30244                                  
 30245                                  ; M011 : END
 30246                                  
 30247                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30248 000054E2 50                      	PUSH	AX
 30249                                   
 30250                                  	;PUSH	word [CS:EXITHOLD+2]
 30251                                  	;PUSH	word [CS:EXITHOLD]
 30252                                  	
 30253                                  	; MSDOS 6.0
 30254 000054E3 FF36[8205]              	PUSH	word [EXITHOLD+2]
 30255 000054E7 FF36[8005]              	PUSH	word [EXITHOLD]
 30256                                  
 30257                                  	;MOV	AX,[CS:USER_SP]
 30258                                  
 30259                                  	; MSDOS 6.0
 30260 000054EB A1[8405]                	MOV	AX,[USER_SP]
 30261 000054EE 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 30262                                  
 30263 000054F2 CF                      	IRET			; Long return back to user terminate address
 30264                                  
 30265                                  ;---------------------------------------------------------------------------
 30266                                  ;
 30267                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 30268                                  ;
 30269                                  ; This routine handles extended error codes.
 30270                                  ; Input : DI = error code from device
 30271                                  ; Output: All EXTERR fields are set
 30272                                  ;
 30273                                  ;--------------------------------------------------------------------------
 30274                                  
 30275                                  SET_I24_EXTENDED_ERROR:
 30276 000054F3 50                      	PUSH	AX
 30277                                  					; ErrMap24End is in DOSDATA
 30278 000054F4 B8[BB0E]                	MOV	AX,ErrMap24End
 30279 000054F7 2D[AB0E]                	SUB	AX,ErrMap24
 30280                                  					; Change to dosdata to access 
 30281                                  					; ErrMap24 and EXTERR -SR
 30282                                  	; 05/05/2019 - Retro DOS v4.0
 30283                                  	
 30284                                  	; MSDOS 6.0
 30285 000054FA 1E                      	push	ds
 30286                                  	;getdseg <ds>			; ds ->dosdata
 30287 000054FB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30288                                  
 30289                                  	; AX is the index of the first unavailable error. Do not translate 
 30290                                  	; if greater or equal to AX.
 30291                                  
 30292 00005500 39C7                    	CMP	DI,AX
 30293 00005502 89F8                    	MOV	AX,DI
 30294 00005504 7306                    	JAE	short NoTrans
 30295                                  
 30296                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 30297 00005506 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 30298 0000550A 30E4                    	XOR	AH,AH
 30299                                  NoTrans:
 30300                                  	;MOV	[CS:EXTERR],AX
 30301 0000550C A3[2403]                	mov	[EXTERR],AX
 30302 0000550F 1F                      	pop	ds
 30303                                  	;assume	ds:nothing
 30304 00005510 58                      	POP	AX
 30305                                  
 30306                                  	; Now Extended error is set correctly. Translate it to get correct 
 30307                                  	; error locus class and recommended action.
 30308                                  
 30309 00005511 56                      	PUSH	SI
 30310                                  					; ERR_TABLE_24 is in DOSCODE 
 30311 00005512 BE[5B0E]                	MOV	SI,ERR_TABLE_24
 30312 00005515 E862B1                  	call	CAL_LK			; Set other extended error fields
 30313 00005518 5E                      	POP	SI
 30314 00005519 C3                      	retn
 30315                                  
 30316                                  ;============================================================================
 30317                                  ; FAT.ASM, MSDOS 6.0, 1991
 30318                                  ;============================================================================
 30319                                  ; 30/07/2018 - Retro DOS v3.0
 30320                                  ; 20/05/2019 - Retro DOS v4.0
 30321                                  
 30322                                  ;	TITLE	FAT - FAT maintenance routines
 30323                                  ;	NAME	FAT
 30324                                  
 30325                                  ;**	FAT.ASM
 30326                                  ;----------------------------------------------------------------------------
 30327                                  ;	Low level local device routines for performing disk change sequence,
 30328                                  ;	setting cluster validity, and manipulating the FAT
 30329                                  ;
 30330                                  ;	IsEof
 30331                                  ;	UNPACK
 30332                                  ;	PACK
 30333                                  ;	MAPCLUSTER
 30334                                  ;	FATREAD_SFT
 30335                                  ;	FATREAD_CDS
 30336                                  ;	FAT_operation
 30337                                  ;
 30338                                  ;	Revision history:
 30339                                  ;
 30340                                  ;	  AN000  version Jan. 1988
 30341                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 30342                                  ;
 30343                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 30344                                  ;	       from CL0FATENTRY rather than disk.
 30345                                  
 30346                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 30347                                  
 30348                                  ;Break <IsEOF - check the quantity in BX for EOF>
 30349                                  ;----------------------------------------------------------------------------
 30350                                  ;
 30351                                  ; Procedure Name : IsEOF
 30352                                  ;
 30353                                  ; IsEOF - check the fat value in BX for eof.
 30354                                  ;
 30355                                  ;   Inputs:	ES:BP point to DPB
 30356                                  ;		BX has fat value
 30357                                  ;   Outputs:	JAE eof
 30358                                  ;   Registers modified: none
 30359                                  ;
 30360                                  ;---------------------------------------------------------------------------
 30361                                  
 30362                                  IsEOF:
 30363                                  	;cmp	word [es:bp+0Dh],0FF6h
 30364 0000551A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30365 00005520 730B                    	JAE	short EOF16			; yes, check for eof there
 30366                                  
 30367                                  ;J.K. 8/27/86
 30368                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30369                                  ;of any media that has "F0"(Other) as a MediaByte.
 30370                                  ;Hopely, this does not create any side effect for those who may use any value
 30371                                  ;other than "FF8-FFF" as an EOF for their own file.
 30372                                  
 30373 00005522 81FBF00F                	cmp	bx,0FF0h
 30374 00005526 7404                    	je	short IsEOF_other
 30375                                  
 30376 00005528 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30377                                  IsEOF_other:
 30378 0000552C C3                      	retn
 30379                                  EOF16:
 30380 0000552D 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30381 00005530 C3                      	retn
 30382                                  
 30383                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30384                                  
 30385                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30386                                  ;---------------------------------------------------------------------------
 30387                                  ;
 30388                                  ; Procedur Name : UNPACK
 30389                                  ;
 30390                                  ; Inputs:
 30391                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30392                                  ;	ES:BP = Base of drive parameters
 30393                                  ; Outputs:
 30394                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30395                                  ;	Zero set means DI=0 (free cluster)
 30396                                  ;	Carry set means error (currently user FAILed to I 24)
 30397                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30398                                  ;
 30399                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30400                                  ;
 30401                                  ;----------------------------------------------------------------------------
 30402                                  	
 30403                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30404                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30405                                  
 30406                                  	; 20/05/2019 - Retro DOS v4.0
 30407                                  UNPACK:
 30408                                  	; MSDOS 6.0			; M014 - Start
 30409 00005531 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 30410 00005533 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30411 00005535 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30412 00005539 09FF                    	or	di,di 			; return z if di=0
 30413 0000553B C3                      	retn				; done
 30414                                  up_cont:				; M014 - End
 30415                                  	; MSDOS 3.3 & MSDOS 6.0
 30416                                  	;cmp	bx,[es:bp+0Dh]
 30417 0000553C 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30418 00005540 7726                    	JA	short HURTFAT
 30419 00005542 E8D600                  	CALL	MAPCLUSTER
 30420 00005545 721E                    	jc	short _DoContext
 30421 00005547 8B3D                    	MOV	DI,[DI]
 30422 00005549 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30423 0000554B 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30424 0000554F 81FEF60F                	CMP	SI,4096-10
 30425 00005553 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30426 00005555 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30427 00005557 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30428                                  High12:
 30429 00005559 D1EF                    	SHR	DI,1
 30430 0000555B D1EF                    	SHR	DI,1
 30431 0000555D D1EF                    	SHR	DI,1
 30432 0000555F D1EF                    	SHR	DI,1
 30433                                  Unpack12:
 30434 00005561 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30435                                  _DoContext:
 30436 00005565 16                      	PUSH	SS
 30437 00005566 1F                      	POP	DS
 30438 00005567 C3                      	retn
 30439                                  HURTFAT:
 30440                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30441                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30442 00005568 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30443 0000556E 50                      	PUSH	AX
 30444 0000556F B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30445                                  
 30446                                  ;hkn; SS override
 30447 00005571 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30448                                  ;
 30449                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30450                                  ;
 30451 00005577 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30452 0000557A E8C8FD                  	call	FATAL
 30453 0000557D 3C03                    	CMP	AL,3
 30454 0000557F F8                      	CLC
 30455 00005580 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30456 00005582 F9                      	STC				; User said FAIL
 30457                                  OKU_RET:
 30458 00005583 58                      	POP	AX
 30459                                  hurtfat_retn:
 30460 00005584 C3                      	retn
 30461                                  
 30462                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30463                                  
 30464                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30465                                  ;----------------------------------------------------------------------------
 30466                                  ;
 30467                                  ; Procedure Name : PACK
 30468                                  ;
 30469                                  ; Inputs:
 30470                                  ;	BX = Cluster number
 30471                                  ;	DX = Data
 30472                                  ;	ES:BP = Pointer to drive DPB
 30473                                  ; Outputs:
 30474                                  ;	The data is stored in the FAT at the given cluster.
 30475                                  ;	SI,DX,DI all destroyed
 30476                                  ;	Carry set means error (currently user FAILed to I 24)
 30477                                  ;	No other registers affected
 30478                                  ;
 30479                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 30480                                  ;
 30481                                  ;---------------------------------------------------------------------------
 30482                                  
 30483                                  	; 02/01/2024
 30484                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30485                                  	; 20/05/2019 - Retro DOS v4.0
 30486                                  PACK:
 30487                                  	; MSDOS 6.0			; M014 - start
 30488 00005585 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30489 00005587 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30490 00005589 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30491 0000558D C3                      	retn				; done
 30492                                  p_cont:					; M014 - end
 30493                                  	; MSDOS 3.3 & MSDOS 6.0
 30494 0000558E E88A00                  	CALL	MAPCLUSTER
 30495 00005591 72D2                    	JC	short _DoContext
 30496 00005593 8B35                    	MOV	SI,[DI]
 30497 00005595 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30498 00005597 51                      	PUSH	CX			; move data to upper 12 bits
 30499 00005598 B104                    	MOV	CL,4
 30500 0000559A D3E2                    	SHL	DX,CL
 30501 0000559C 59                      	POP	CX
 30502 0000559D 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30503 000055A0 EB14                    	JMP	SHORT PACKIN
 30504                                  ALIGNED:
 30505                                  	;cmp	word [es:bp+0Dh],0FF6h
 30506 000055A2 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30507 000055A8 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30508 000055AA 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30509 000055AE 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30510 000055B2 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30511                                  Pack16:
 30512 000055B4 31F6                    	XOR	SI,SI			; MZ no original data
 30513                                  PACKIN:
 30514 000055B6 09D6                    	OR	SI,DX
 30515 000055B8 8935                    	MOV	[DI],SI
 30516                                  
 30517                                  ;hkn; SS override
 30518 000055BA 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30519                                  	; MSDOS 6.0
 30520 000055BF F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30521                                  					;LB. if already dirty		  ;AN000;
 30522 000055C3 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30523                                  	; 10/06/2019
 30524 000055C5 E87D05                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30525                                  	
 30526                                  	;or	byte [si+5],40h
 30527 000055C8 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30528                                  yesdirty11:				;LB.				;AN000;
 30529                                  ;hkn; SS override
 30530 000055CC 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30531                                  ;hkn; SS is DOSDATA
 30532 000055D2 16                      	push	ss
 30533 000055D3 1F                      	pop	ds
 30534 000055D4 74AE                    	jz	short hurtfat_retn	; Carry clear
 30535 000055D6 50                      	PUSH	AX
 30536 000055D7 53                      	PUSH	BX
 30537 000055D8 51                      	PUSH	CX
 30538 000055D9 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30539 000055DC 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30540                                  	;;add	si,16 ; MSDOS 3.3
 30541                                  	;add	si,20 ; MSDOS 6.0
 30542 000055E0 83C614                  	ADD	SI,BUFINSIZ
 30543 000055E3 8824                    	MOV	[SI],AH
 30544                                  ;hkn; SS is DOSDATA
 30545                                  	;Context DS
 30546 000055E5 16                      	push	ss
 30547 000055E6 1F                      	pop	ds
 30548                                  	
 30549 000055E7 50                      	PUSH	AX
 30550                                  	
 30551                                  	; MSDOS 6.0
 30552 000055E8 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30553 000055EC 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30554                                  
 30555                                  	; MSDOS 3.3 & MSDOS 6.0
 30556 000055F0 8B16[9005]              	MOV	DX,[CLUSSEC]
 30557                                  
 30558                                  	;MOV	SI,1	  ; *
 30559                                  	;XOR	AL,AL     ; *
 30560                                  	;call	GETBUFFRB ; *
 30561                                  	; 22/09/2023
 30562 000055F4 E83E03                  	call	GETBUFFRA ; *
 30563                                  
 30564 000055F7 58                      	POP	AX
 30565 000055F8 721B                    	JC	short POPP_RET
 30566 000055FA C53E[E205]              	LDS	DI,[CURBUF]
 30567                                  	
 30568                                  	; MSDOS 6.0
 30569 000055FE F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30570                                  					;LB. if already dirty		  ;AN000;
 30571 00005602 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30572 00005604 E83E05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30573                                  	
 30574                                  	;or	byte [di+5],40h
 30575 00005607 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30576                                  yesdirty12:
 30577                                  	;;add	di,16
 30578                                  	;add	di,20 ; MSDOS 6.0
 30579                                  	; 02/01/2024
 30580                                  	;ADD	DI,BUFINSIZ
 30581                                  	;DEC	DI
 30582 0000560B 83C713                  	add	di,BUFINSIZ-1 ; 19
 30583                                  
 30584                                  	;add	di,[es:bp+2]
 30585 0000560E 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30586 00005612 8805                    	MOV	[DI],AL
 30587 00005614 F8                      	CLC
 30588                                  POPP_RET:
 30589 00005615 16                      	PUSH	SS
 30590 00005616 1F                      	POP	DS
 30591 00005617 59                      	POP	CX
 30592 00005618 5B                      	POP	BX
 30593 00005619 58                      	POP	AX
 30594 0000561A C3                      	retn
 30595                                  
 30596                                  ; 31/07/2018 - Retro DOS v3.0
 30597                                  
 30598                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30599                                  ;---------------------------------------------------------------------------
 30600                                  ;
 30601                                  ; Procedure Name : MAPCLUSTER
 30602                                  ;
 30603                                  ; Inputs:
 30604                                  ;	ES:BP Points to DPB
 30605                                  ;	BX Is cluster number
 30606                                  ; Function:
 30607                                  ;	Get a pointer to the cluster
 30608                                  ; Outputs:
 30609                                  ;	DS:DI Points to contents of FAT for given cluster
 30610                                  ;	DS:SI Points to start of buffer
 30611                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30612                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30613                                  ;	Carry set if failed.
 30614                                  ; SI is destroyed.
 30615                                  ;
 30616                                  ;---------------------------------------------------------------------------
 30617                                  
 30618                                  	; 20/05/2019 - Retro DOS v4.0
 30619                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30620                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30621                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30622                                  
 30623                                  MAPCLUSTER:
 30624                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30625 0000561B C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30626                                  	;SAVE	<AX,BX,CX,DX>
 30627 00005620 50                      	push	ax
 30628 00005621 53                      	push	bx
 30629 00005622 51                      	push	cx
 30630 00005623 52                      	push	dx
 30631 00005624 89D8                    	MOV	AX,BX			; AX = BX
 30632 00005626 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30633 0000562C 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30634 0000562E D1E8                    	SHR	AX,1			; AX = BX/2
 30635                                  Map16:	
 30636                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30637 00005630 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30638                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30639 00005632 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30640 00005634 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30641 00005636 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30642                                  
 30643                                  ;IF FastDiv
 30644                                  ;
 30645                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30646                                  ; case and apply a really fast algorithm to get the desired results
 30647                                  ;
 30648                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30649                                  ; Fast method takes 39+20*4=119
 30650                                  ;
 30651                                  ; This saves a bunch.
 30652                                  
 30653 0000563A 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30654 0000563E 7510                    	jne	short _DoDiv		; 4  for no jump
 30655 00005640 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30656 00005642 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30657 00005646 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30658                                  	; MDOS 3.3
 30659                                  	;shr	al,1	
 30660                                  	; MDOS 6.0
 30661 00005648 D1EF                    	shr	di,1			; 2
 30662 0000564A D0D8                    	rcr	al,1			; 2
 30663                                  	; MDOS 3.3 (& MSDOS 6.0)
 30664 0000564C 30E4                    	xor	ah,ah			; 3
 30665 0000564E EB04                    	jmp	short DivDone		; 16
 30666                                  _DoDiv:
 30667                                  ;ENDIF
 30668                                  	; MSDOS 3.3
 30669                                  	;xor	dx,dx
 30670                                  	; MSDOS 6.0
 30671 00005650 89FA                    	mov	dx,di			; 2
 30672                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30673 00005652 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30674                                  ;IF FastDiv
 30675                                  DivDone:
 30676                                  ;ENDIF
 30677                                  	;add	ax,[es:bp+6]
 30678 00005654 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30679 00005658 49                      	DEC	CX			; CX is sector size - 1
 30680                                  	;SAVE	<AX,DX,CX>
 30681 00005659 50                      	push	ax
 30682 0000565A 52                      	push	dx
 30683 0000565B 51                      	push	cx
 30684 0000565C 89C2                    	MOV	DX,AX
 30685                                  
 30686                                  	; MSDOS 6.0
 30687                                  	; 22/09/2023
 30688                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 30689                                  	;
 30690                                  	; MDOS 3.3 (& MSDOS 6.0)
 30691                                  	;XOR	AL,AL	   ; *
 30692                                  	;MOV	SI,1	   ; *
 30693                                  	;;invoke GETBUFFRB ; *
 30694                                  	;call	GETBUFFRB  ; *
 30695                                  	; 22/09/2023
 30696 0000565E E8CE02                  	call	GETBUFFRC  ; *!
 30697                                  
 30698                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30699 00005661 59                      	pop	cx
 30700 00005662 58                      	pop	ax
 30701 00005663 5A                      	pop	dx
 30702 00005664 724C                    	JC	short MAP_POP
 30703                                  
 30704 00005666 C536[E205]              	LDS	SI,[CURBUF]
 30705                                  	;;lea	di,[si+16]
 30706                                  	;lea	di,[si+20] ; MSDOS 6.0
 30707 0000566A 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30708 0000566D 01C7                    	ADD	DI,AX
 30709 0000566F 39C8                    	CMP	AX,CX
 30710 00005671 752C                    	JNZ	short MAPRET
 30711 00005673 8A05                    	MOV	AL,[DI]
 30712                                  	;Context DS		 	;hkn; SS is DOSDATA
 30713 00005675 16                      	push	ss
 30714 00005676 1F                      	pop	ds	
 30715 00005677 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30716 0000567B A2[8E05]                	MOV	[CLUSSAVE],AL
 30717 0000567E 8916[9005]              	MOV	[CLUSSEC],DX
 30718                                  	; MSDOS 6.0
 30719 00005682 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 30720 00005688 42                      	INC	DX
 30721                                  
 30722                                  	; 22/09/2023
 30723                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 30724                                  	;
 30725                                  	; MDOS 3.3 (& MSDOS 6.0)
 30726                                  	;XOR	AL,AL	   ; *
 30727                                  	;MOV	SI,1	   ; *
 30728                                  	;;invoke GETBUFFRB ; *
 30729                                  	;call	GETBUFFRB  ; *
 30730                                  	; 22/09/2023
 30731 00005689 E8A302                  	call	GETBUFFRC  ; *!
 30732 0000568C 7224                    	JC	short MAP_POP
 30733                                  
 30734 0000568E C536[E205]              	LDS	SI,[CURBUF]
 30735 00005692 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30736 00005695 8A05                    	MOV	AL,[DI]
 30737                                  	;Context DS			;hkn; SS is DOSDATA
 30738 00005697 16                      	push	ss
 30739 00005698 1F                      	pop	ds
 30740 00005699 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30741                                  
 30742                                  ;hkn; CLUSSAVE is in DOSDATA
 30743 0000569C BF[8E05]                	MOV	DI,CLUSSAVE
 30744                                  MAPRET:
 30745                                  	;RESTORE <DX,CX,BX>
 30746 0000569F 5A                      	pop	dx
 30747 000056A0 59                      	pop	cx
 30748 000056A1 5B                      	pop	bx
 30749 000056A2 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30750 000056A4 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30751 000056AA 7302                    	JAE	short MapSet		; MZ no, set flags
 30752 000056AC 89D8                    	MOV	AX,BX
 30753                                  MapSet:
 30754 000056AE A801                    	TEST	AL,1			; set zero flag if not on boundary
 30755                                  	;RESTORE <AX>
 30756 000056B0 58                      	pop	ax
 30757 000056B1 C3                      	retn
 30758                                  
 30759                                  MAP_POP:
 30760                                  	;RESTORE <DX,CX,BX,AX>
 30761 000056B2 5A                      	pop	dx
 30762 000056B3 59                      	pop	cx
 30763 000056B4 5B                      	pop	bx
 30764 000056B5 58                      	pop	ax
 30765                                  fatread_sft_retn: ; 17/12/2022
 30766 000056B6 C3                      	retn
 30767                                  
 30768                                  ; 20/05/2019 - Retro DOS v4.0
 30769                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30770                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30771                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30772                                  
 30773                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30774                                  ;----------------------------------------------------------------------------
 30775                                  ;
 30776                                  ; Procedure Name : FATREAD_SFT
 30777                                  ;
 30778                                  ; Inputs:
 30779                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30780                                  ;		giving a NET SFT will produce system crashing results).
 30781                                  ;	DS DOSDATA
 30782                                  ; Function:
 30783                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30784                                  ;	if disk changed.
 30785                                  ;	In other respects, same as FATREAD_CDS.
 30786                                  ;	(note ES:DI destroyed!)
 30787                                  ; Outputs:
 30788                                  ;	Carry set if error (currently user FAILed to I 24)
 30789                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30790                                  ;	as far as invalidating curdir_ID is concerned.
 30791                                  ;	Since getting a true disk changed on this call is a screw up
 30792                                  ;	anyway, that's the way it goes.
 30793                                  ;
 30794                                  ;---------------------------------------------------------------------------
 30795                                  
 30796                                  FATREAD_SFT:
 30797 000056B7 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30798                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30799                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30800                                  	; 15/12/2022
 30801 000056BB 268A4600                	mov	AL,[ES:BP]
 30802 000056BF A2[7605]                	MOV	[THISDRV],AL
 30803 000056C2 E869AF                  	call	GOTDPB			;Set THISDPB
 30804                                  	;CALL	FAT_GOT_DPB
 30805                                  	; 17/12/2022
 30806 000056C5 EB78                    	jmp	FAT_GOT_DPB
 30807                                  ;fatread_sft_retn:
 30808                                  	;retn
 30809                                  
 30810                                  ;----------------------------------------------------------------------------
 30811                                  ;
 30812                                  ; Procedure Name : FATREAD_CDS
 30813                                  ;
 30814                                  ; Inputs:
 30815                                  ;	DS:DOSDATA
 30816                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30817                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30818                                  ; Function:
 30819                                  ;	If disk may have been changed, media is determined and buffers are
 30820                                  ;	flagged invalid. If not, no action is taken.
 30821                                  ; Outputs:
 30822                                  ;	ES:BP = Drive parameter block
 30823                                  ;	THISDPB = ES:BP
 30824                                  ;	THISDRV set
 30825                                  ;	Carry set if error (currently user FAILed to I 24)
 30826                                  ; DS preserved , all other registers destroyed
 30827                                  ;
 30828                                  ;---------------------------------------------------------------------------
 30829                                  
 30830                                  	; 20/05/2019 - Retro DOS v4.0
 30831                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30832                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30833                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30834                                  
 30835                                  FATREAD_CDS:
 30836 000056C7 06                      	PUSH	ES
 30837 000056C8 57                      	PUSH	DI
 30838                                  	;les	bp,[es:di+45h]
 30839 000056C9 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30840                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30841                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30842                                  	; 15/12/2022
 30843 000056CD 268A4600                	mov	AL,[ES:BP]
 30844 000056D1 A2[7605]                	MOV	[THISDRV],AL
 30845 000056D4 E857AF                  	call	GOTDPB			;Set THISDPB
 30846 000056D7 E86500                  	CALL	FAT_GOT_DPB
 30847 000056DA 5F                      	POP	DI			;Get back CDS pointer
 30848 000056DB 07                      	POP	ES
 30849 000056DC 72D8                    	jc	short fatread_sft_retn
 30850 000056DE 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30851                                  
 30852                                  ;	Media changed. We now need to find all CDS structures which use this
 30853                                  ;	DPB and invalidate their ID pointers.
 30854                                  
 30855                                  MED_CHANGE:
 30856 000056E0 31C0                    	XOR	AX,AX
 30857 000056E2 48                      	DEC	AX			; AX = -1
 30858 000056E3 1E                      	PUSH	DS
 30859 000056E4 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30860 000056E8 30ED                    	XOR	CH,CH			; CX is number of structures
 30861                                  	;lds	si,[es:di+45h]
 30862 000056EA 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30863                                  
 30864                                  ;hkn; SS override
 30865                                  
 30866                                  ;	Find all CDSs with this DevPtr
 30867                                  ;
 30868                                  ;	(ax) = -1
 30869                                  ;	(ds:si) = DevPtr
 30870                                  
 30871 000056EE 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30872                                  frcd20: 
 30873                                  	;;test	word [es:di+43h],8000h
 30874                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30875 000056F3 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30876 000056F8 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30877                                  
 30878                                  	; MSDOS 3.3
 30879                                  	;push	es
 30880                                  	;push	di
 30881                                  	;les	di,[es:di+45h]
 30882                                  	;;les	di,[ES:DI+curdir.devptr]
 30883                                  	;call	POINTCOMP
 30884                                  	;pop	di
 30885                                  	;pop	es
 30886                                  	;jnz	short frcd25
 30887                                  
 30888                                  	; MSDOS 6.0
 30889 000056FA 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30890 000056FE 7512                    	jne	short frcd25		; no match
 30891 00005700 8CDB                    	mov	bx,ds
 30892 00005702 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30893 00005706 750A                    	jne	short frcd25		; CDS not for this drive
 30894                                  
 30895                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30896                                  	;test	[es:di+49h],ax
 30897 00005708 26854549                	test	[ES:DI+curdir.ID],AX
 30898 0000570C 7404                    	JZ	short frcd25		; If root (0), leave root
 30899                                  	;mov	[es:di+49h],ax
 30900 0000570E 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30901                                  frcd25:	
 30902                                  	;;add	di,81  ; MSDOS 3.3
 30903                                  	;add	di,88  ; MSDOS 6.0	 
 30904 00005712 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30905 00005715 E2DC                    	LOOP	frcd20
 30906 00005717 1F                      	POP	DS
 30907                                  NO_CHANGE:
 30908 00005718 C42E[8A05]              	LES	BP,[THISDPB]
 30909 0000571C F8                      	CLC
 30910 0000571D C3                      	retn
 30911                                  
 30912                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30913                                  ;----------------------------------------------------------------------------
 30914                                  ;
 30915                                  ; Procedure Name : FAT_operation
 30916                                  ;
 30917                                  ;----------------------------------------------------------------------------
 30918                                  
 30919                                  	; 03/01/2024
 30920                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30921                                  
 30922                                  FAT_operation:
 30923                                  	; 31/07/2018 - Retro DOS v3.0
 30924                                  FATERR:
 30925                                  	;mov	word [es:bp+1Eh],-1
 30926                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30927 0000571E 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30928                                  					; Err in FAT must force recomp of freespace
 30929                                  	;and	di,0FFh
 30930 00005724 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30931                                  	;mov	byte [ALLOWED],18h
 30932 00005728 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30933                                  	;mov	ah,1Ah
 30934 0000572D B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30935 0000572F A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30936 00005732 E814FC                  	call	FATAL1
 30937 00005735 C42E[8A05]              	LES	BP,[THISDPB]
 30938 00005739 3C03                    	CMP	AL,3
 30939 0000573B 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30940 0000573D F9                      	STC				; User said FAIL
 30941 0000573E C3                      	retn
 30942                                  
 30943                                  FAT_GOT_DPB:
 30944                                  	;Context DS			;hkn; SS is DOSDATA
 30945 0000573F 16                      	push	ss			
 30946 00005740 1F                      	pop	ds
 30947                                  	;mov	al,0Fh
 30948 00005741 B00F                    	MOV	AL,DMEDHL
 30949                                  	;mov	ah,[es:bp+1]
 30950 00005743 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30951 00005747 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30952 0000574A C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30953 0000574F C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30954                                  	;;mov	al,[es:bp+16h]
 30955                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30956 00005755 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30957 00005759 A2[6703]                	MOV	[CALLMED],AL
 30958 0000575C 06                      	PUSH	ES
 30959 0000575D 1E                      	PUSH	DS
 30960                                  
 30961                                  ;hkn; DEVCALL is in DOSDATA
 30962 0000575E BB[5A03]                	MOV	BX,DEVCALL
 30963                                  	;;lds	si,[es:bp+12h]
 30964                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30965 00005761 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30966 00005765 07                      	POP	ES			; ES:BX Points to call header
 30967 00005766 E8FBEE                  	call	DEVIOCALL2
 30968                                  	;Context DS		 	;hkn; SS is DOSDATA
 30969 00005769 16                      	push	ss
 30970 0000576A 1F                      	pop	ds
 30971 0000576B 07                      	POP	ES			; Restore ES:BP
 30972 0000576C 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30973                                  	;test	di,8000h
 30974                                  	;jnz	short FATERR
 30975 00005770 09FF                    	or	di,di
 30976 00005772 78AA                    	js	short FATERR		; have error
 30977 00005774 30E4                    	XOR	AH,AH
 30978                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30979                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30980 00005776 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30981 0000577A A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30982                                  ; See if we had changed volume id by creating one on the diskette
 30983 0000577D 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30984 00005781 7508                    	jnz	short CHECK_BYT
 30985 00005783 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30986 00005788 E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 30987                                  					; new volume label.
 30988                                  CHECK_BYT:
 30989 0000578B 0A26[6803]              	OR	AH,[CALLRBYT]
 30990                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30991                                  	;JMP	short NEWDSK
 30992                                  	; 17/12/2022
 30993 0000578F 7863                    	js	short NEWDSK
 30994                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30995                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30996                                  	;JMP	short NEWDSK
 30997                                  
 30998                                  CHECK_ZR:
 30999 00005791 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31000                                  	; 24/09/2023
 31001                                  	; cf=0 (after 'or' instruction)
 31002                                  	;CLC
 31003 00005793 C3                      	retn				; If Media not changed (NZ)
 31004                                  
 31005                                  DISK_CHNG_ERR:
 31006 00005794 06                      	PUSH	ES
 31007 00005795 55                      	PUSH	BP
 31008                                  	;;les	bp,[es:bp+12h]
 31009                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31010 00005796 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31011                                  	;;test	word [es:bp+4],800h
 31012                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31013 0000579A 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31014 0000579F 5D                      	POP	BP
 31015 000057A0 07                      	POP	ES
 31016 000057A1 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 31017 000057A3 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31018 000057A4 57                      	PUSH	DI
 31019 000057A5 16                      	push	ss			;hkn; SS is DOSDATA
 31020 000057A6 1F                      	pop	ds
 31021                                  	;mov	byte [ALLOWED],18h
 31022 000057A7 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31023 000057AC 06                      	PUSH	ES
 31024 000057AD C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31025 000057B1 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31026 000057B5 07                      	POP	ES
 31027 000057B6 893E[2803]              	MOV	[EXTERRPT],DI
 31028                                  	;mov	ax,0Fh
 31029 000057BA B80F00                  	MOV	AX,error_I24_wrong_disk
 31030 000057BD C606[7505]01            	MOV	byte [READOP],1		; Write
 31031                                  	;invoke	HARDERR
 31032 000057C2 E832FB                  	call	HARDERR
 31033 000057C5 5F                      	POP	DI			; Get back buffer for ignore
 31034 000057C6 1F                      	POP	DS
 31035 000057C7 3C03                    	CMP	AL,3
 31036                                  FAIL_OPJ2:
 31037 000057C9 741C                    	JZ	short FAIL_OP
 31038 000057CB E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31039                                  
 31040                                  CHKBUFFDIRT:
 31041                                  	; 20/05/2019 - Retro DOS v4.0
 31042                                  
 31043                                  	; MSDOS 3.3
 31044                                  	;lds	di,[BUFFHEAD]
 31045                                  
 31046                                  	; MSDOS 6.0
 31047 000057CE 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31048 000057D4 741E                    	je	short NEWDSK			; no, skip the check
 31049 000057D6 E8F100                  	call	GETCURHEAD			; get pointer to first buffer
 31050                                  nbuffer:
 31051                                  	;cmp	al,[di+4]
 31052 000057D9 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31053 000057DC 750D                    	jne	short lfnxt			; no, go for next buffer
 31054                                  	;test   byte [di+5],40h
 31055 000057DE F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31056 000057E2 7407                    	jz	short lfnxt			; no, go for next buffer
 31057                                  	;Context DS
 31058 000057E4 16                      	push	ss
 31059 000057E5 1F                      	pop	ds
 31060                                  	; 24/09/2023
 31061                                  	; cf=0 (after 'test' instruction)
 31062                                  	;clc
 31063 000057E6 C3                      	retn
 31064                                  
 31065                                  FAIL_OP:					; This label & code is here
 31066                                  	;Context DS				;  for reachability
 31067 000057E7 16                      	push	ss
 31068 000057E8 1F                      	pop	ds
 31069 000057E9 F9                      	STC
 31070 000057EA C3                      	retn
 31071                                  
 31072                                  lfnxt:
 31073                                  	; 15/08/2018 - Retro DOS v3.0
 31074                                  	; MSDOS 3.3
 31075                                  	;lds	di,[di]
 31076                                  
 31077                                  	; 20/05/2019 - Retro DOS v4.0
 31078 000057EB 8B3D                    	mov	di,[di]
 31079                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31080                                  	
 31081                                  	; MSDOS 3.3
 31082                                  	;cmp	di,-1
 31083                                  	;jne	short nbuffer
 31084                                  	
 31085                                  	; MSDOS 6.0
 31086 000057ED 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31087 000057F2 75E5                    	jne	short nbuffer			; no, check this guy also
 31088                                  
 31089                                  ; If no dirty buffers, assume Media changed
 31090                                  NEWDSK:
 31091                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31092                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31093 000057F4 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31094                                  						;  recompute
 31095                                  	; MSDOS 3.3
 31096                                  	;call	SETVISIT
 31097                                  	; MSDOS 6.0
 31098 000057FA E8CD00                  	call	 GETCURHEAD
 31099                                  nxbuffer:
 31100                                  	; MSDOS 3.3
 31101                                  	;or 	byte [di+5],20h
 31102                                  	; MSDOS 3.3 & MSDOS 6.0
 31103                                  	;cmp	[di+4],al
 31104 000057FD 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31105 00005800 7510                    	jne	short lfnxt2
 31106                                  	;test	byte [di+5],40h
 31107 00005802 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31108 00005806 758C                    	jnz	short DISK_CHNG_ERR
 31109                                  	;mov	word [di+4],20FFh
 31110 00005808 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31111 0000580D E8CC00                  	call	SCANPLACE
 31112                                  	; MSDOS 6.0
 31113 00005810 EB02                    	jmp	short skpbuff
 31114                                  lfnxt2:
 31115 00005812 8B3D                    	mov	di,[di]
 31116                                  	;mov	di,[di+BUFFINFO.buf_next]
 31117                                  skpbuff:
 31118                                  	; MSDOS 6.0
 31119 00005814 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31120 00005819 75E2                    	jne	short nxbuffer
 31121                                  
 31122 0000581B 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31123 00005821 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31124 00005823 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31125 00005828 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31126 0000582A 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31127                                  ;lfnxt2:
 31128                                  	; MSDOS 3.3
 31129                                  	;call	SKIPVISIT
 31130                                  	;jnz	short nxbuffer
 31131                                  GOGETBPB:
 31132                                  	; MSDOS 3.3 & MSDOS 6.0
 31133                                  	;;lds	di,[es:bp+12h]
 31134                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31135 00005830 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31136                                  	; 20/05/2019
 31137                                  	;test	word [di+4],2000h
 31138                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31139 00005834 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31140 00005838 7510                    	JNZ	short GETFREEBUF
 31141                                  	;context DS	    		;hkn; SS is DOSDATA
 31142 0000583A 16                      	push	ss
 31143 0000583B 1F                      	pop	ds
 31144 0000583C BB0200                  	MOV	BX,2
 31145 0000583F E8EFFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31146                                  FAIL_OPJ:
 31147 00005842 72A3                    	JC	short FAIL_OP
 31148 00005844 C53E[E205]              	LDS	DI,[CURBUF]
 31149 00005848 EB13                    	JMP	SHORT GOTGETBUF
 31150                                  
 31151                                  GETFREEBUF:
 31152 0000584A 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31153 0000584B 55                      	PUSH	BP
 31154                                  	; MSDOS 3.3
 31155                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31156                                  	; MSDOS 6.0
 31157 0000584C 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31158                                  ;hkn; SS override
 31159 0000584E 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX ; 0	;LB.  buffer addr	  ;AN000;
 31160 00005853 E87400                  	call	GETCURHEAD		;LB.			  ;AN000;
 31161                                  	; MSDOS 3.3 & MSDOS 6.0
 31162 00005856 E84F02                  	call	BUFWRITE
 31163 00005859 5D                      	POP	BP
 31164 0000585A 07                      	POP	ES
 31165                                  	;JC	short FAIL_OPJ
 31166 0000585B 728A                    	jc	short FAIL_OP
 31167                                  GOTGETBUF:
 31168                                  	;;add	di,16
 31169                                  	;add	di,20 ; MSDOS 6.0
 31170 0000585D 83C714                  	ADD	DI,BUFINSIZ
 31171                                  
 31172                                  ;hkn; SS override
 31173 00005860 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31174                                  	;Context DS			;hkn; SS is DOSDATA
 31175 00005865 16                      	push	ss
 31176 00005866 1F                      	pop	ds
 31177 00005867 893E[6803]              	MOV	[CALLXAD],DI
 31178                                  	;mov	al,16h
 31179 0000586B B016                    	MOV	AL,DBPBHL
 31180                                  	;mov	ah,[es:bp+1]
 31181 0000586D 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31182 00005871 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31183 00005874 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31184 00005879 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31185                                  	;;mov	al,[es:bp+16h]
 31186                                  	;mov	al,[es:bp+17h]
 31187 0000587F 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31188 00005883 A2[6703]                	MOV	[CALLMED],AL
 31189 00005886 06                      	PUSH	ES ; **
 31190 00005887 1E                      	PUSH	DS ; *
 31191                                  	;;
 31192                                  ; 03/01/2023
 31193                                  %if 0
 31194                                  	;;push	word [es:bp+14h]
 31195                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31196                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31197                                  	;;push	word [es:bp+12h]
 31198                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31199                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31200                                  
 31201                                  ;hkn; DEVCALL is in DOSDATA
 31202                                  	MOV	BX,DEVCALL
 31203                                  	POP	SI
 31204                                  	POP	DS			; DS:SI Points to device header
 31205                                  %endif
 31206                                  	; 03/01/2024
 31207 00005888 BB[5A03]                	mov	bx,DEVCALL
 31208                                  	;lds	si,[es:bp+13h]
 31209 0000588B 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31210                                  					; DS:SI Points to device header
 31211                                  	;;
 31212 0000588F 07                      	POP	ES ; *			; ES:BX Points to call header
 31213                                  	;invoke	DEVIOCALL2
 31214 00005890 E8D1ED                  	call	DEVIOCALL2
 31215 00005893 07                      	POP	ES ; **			; Restore ES:BP
 31216                                  	;Context DS
 31217 00005894 16                      	push	ss		 	;hkn; SS is DOSDATA
 31218 00005895 1F                      	pop	ds
 31219 00005896 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31220                                  	; MSDOS 3.3
 31221                                  	;test	di,8000h
 31222                                  	;jnz	short FATERRJ
 31223                                  	; MSDOS 6.0
 31224 0000589A 09FF                    	or	di,di
 31225 0000589C 7829                    	js	short FATERRJ 		; have error
 31226                                  	;;mov	al,[es:bp+16h]
 31227                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 31228 0000589E 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31229 000058A2 C536[6C03]              	LDS	SI,[CALLBPB]
 31230                                  	;;mov	word [es:bp+1Ch],0
 31231                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 31232 000058A6 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 31233                                  	;invoke	$SETDPB
 31234 000058AC E821B7                  	call	_$SETDPB
 31235                                  
 31236                                  ;hkn; SS override
 31237 000058AF 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 31238                                  	;mov	al,[es:bp+8]
 31239 000058B4 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 31240                                  
 31241                                  	; MSDOS 3.3
 31242                                  	;;mov	ah,[es:bp+0Fh]
 31243                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31244                                  	;;mov	[DI-8],ax
 31245                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 31246                                  
 31247                                  	; MSDOS 6.0
 31248                                  	;mov	[di-0Ah],al
 31249 000058B8 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 31250                                  						;>32mb		  ;AN000;
 31251                                  	;mov	ax,[es:bp+0Fh]
 31252 000058BB 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 31253                                  	;mov	[di-9h],ax			  ;AC000;
 31254 000058BF 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 31255                                  					;>32mb Correct buffer info ;AC000;
 31256                                  	;Context DS			;hkn; SS is DOSDATA
 31257 000058C2 16                      	push	ss
 31258 000058C3 1F                      	pop	ds
 31259 000058C4 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 31260 000058C6 C3                      	retn
 31261                                  
 31262                                  FATERRJ: 
 31263 000058C7 E954FE                  	JMP	FATERR
 31264                                  
 31265                                  ;============================================================================
 31266                                  ; STDBUF.ASM
 31267                                  ;============================================================================
 31268                                  ; Retro DOS v2.0 - 12/03/2018
 31269                                  
 31270                                  ;
 31271                                  ; Standard buffer management for MSDOS
 31272                                  ;
 31273                                  
 31274                                  ;.xlist
 31275                                  ;.xcref
 31276                                  ;INCLUDE STDSW.ASM
 31277                                  ;.cref
 31278                                  ;.list
 31279                                  
 31280                                  ;TITLE	STDBUF - MSDOS buffer management
 31281                                  ;NAME	STDBUF
 31282                                  
 31283                                  ;INCLUDE BUF.ASM
 31284                                  
 31285                                  ;============================================================================
 31286                                  ; BUF.ASM
 31287                                  ;============================================================================
 31288                                  ; 31/07/2018 - Retro DOS v3.0
 31289                                  ; Retro DOS v2.0 - 12/03/2018
 31290                                  ;
 31291                                  ; buffer management for MSDOS
 31292                                  ;
 31293                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 31294                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 31295                                  ;
 31296                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 31297                                  ;
 31298                                  ;SETVISIT:
 31299                                  ;	; 31/07/2018 - Retro DOS v3.0
 31300                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 31301                                  ;; Inputs:
 31302                                  ;;      None
 31303                                  ;; Function:
 31304                                  ;;      Set up a scan of I/O buffers
 31305                                  ;; Outputs:
 31306                                  ;;      All visit flags = 0
 31307                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 31308                                  ;;                    may cause a scan to stop in the middle leaving some
 31309                                  ;;                    visit flags set, and some not set.
 31310                                  ;;      DS:DI Points to [BUFFHEAD]
 31311                                  ;; No other registers altered
 31312                                  ;
 31313                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31314                                  ;	PUSH    AX
 31315                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 31316                                  ;	;mov	al,0DFh
 31317                                  ;	mov	al,~buf_visit
 31318                                  ;SETLOOP:
 31319                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 31320                                  ;	;and	[DI+5],al
 31321                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 31322                                  ;       LDS     DI,[DI]
 31323                                  ;       CMP     DI,-1
 31324                                  ;       JNZ     SHORT SETLOOP
 31325                                  ;       POP     AX ; 09/09/2018
 31326                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 31327                                  ;SVISIT_RETN:
 31328                                  ;       RETN
 31329                                  ;
 31330                                  ;SKIPVISIT:
 31331                                  ;	; 31/07/2018 - Retro DOS v3.0
 31332                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 31333                                  ;
 31334                                  ;; Inputs:
 31335                                  ;;      DS:DI Points to a buffer
 31336                                  ;; Function:
 31337                                  ;;      Skip visited buffers
 31338                                  ;; Outputs:
 31339                                  ;;      DS:DI Points to next unvisited buffer
 31340                                  ;;      Zero is set if skip to LAST buffer
 31341                                  ;; No other registers altered
 31342                                  ;
 31343                                  ;       CMP     DI,-1
 31344                                  ;       ;retz
 31345                                  ;       JZ	SHORT SVISIT_RETN
 31346                                  ;
 31347                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 31348                                  ;       ;;;retnz
 31349                                  ;       ;;JNZ	SHORT SVISIT_RETN
 31350                                  ;
 31351                                  ;	;test	byte [di+5],20h
 31352                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 31353                                  ;	JNZ	short SKIPLOOP
 31354                                  ;	
 31355                                  ;	push	ax
 31356                                  ;	or	al,1
 31357                                  ;	pop	ax
 31358                                  ;	retn	
 31359                                  ;
 31360                                  ;SKIPLOOP:
 31361                                  ;	LDS     DI,[DI]
 31362                                  ;       JMP     SHORT SKIPVISIT
 31363                                  
 31364                                  ;============================================================================
 31365                                  ; BUF.ASM, MSDOS 6.0, 1991
 31366                                  ;============================================================================
 31367                                  ; 31/07/2018 - Retro DOS v3.0
 31368                                  ; 04/05/2019 - Retro DOS v4.0
 31369                                  
 31370                                  ;	TITLE	BUF - MSDOS buffer management
 31371                                  ;	NAME	BUF
 31372                                  
 31373                                  ;**	BUF.ASM - Low level routines for buffer cache management
 31374                                  ;
 31375                                  ;	GETCURHEAD
 31376                                  ;	ScanPlace
 31377                                  ;	PLACEBUF
 31378                                  ;	PLACEHEAD
 31379                                  ;	PointComp
 31380                                  ;	GETBUFFR
 31381                                  ;	GETBUFFRB
 31382                                  ;	FlushBuf
 31383                                  ;	BufWrite
 31384                                  ;	SET_RQ_SC_PARMS
 31385                                  ;
 31386                                  ;	Revision history:
 31387                                  ;
 31388                                  ;		AN000  version 4.00  Jan. 1988
 31389                                  ;		A004   PTM 3765 -- Disk reset failed
 31390                                  ;		M039 DB 10/17/90 - Disk write optimization
 31391                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31392                                  
 31393                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31394                                  ;----------------------------------------------------------------------------
 31395                                  ; Procedure Name : GetCurHead
 31396                                  ; Inputs:
 31397                                  ;	 No Inputs
 31398                                  ; Function:
 31399                                  ;	Returns the pointer to the first buffer in Queue
 31400                                  ;	and updates FIRST_BUFF_ADDR
 31401                                  ;       and invalidates LASTBUFFER (recency pointer)
 31402                                  ; Outputs:
 31403                                  ;	DS:DI = pointer to the first buffer in Queue
 31404                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31405                                  ;       LASTBUFFER = -1
 31406                                  ; No other registers altered
 31407                                  ;----------------------------------------------------------------------------
 31408                                  
 31409                                  ; 04/05/2019 - Retro DOS v4.0
 31410                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31411                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31412                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31413                                  
 31414                                  GETCURHEAD:
 31415 000058CA 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31416 000058CF 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31417 000058D6 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31418 000058DB C3                      	retn
 31419                                  
 31420                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31421                                  ;----------------------------------------------------------------------------
 31422                                  ; Procedure Name : ScanPlace
 31423                                  ; Inputs:
 31424                                  ;	Same as PLACEBUF
 31425                                  ; Function:
 31426                                  ;	Save scan location and call PLACEBUF
 31427                                  ; Outputs:
 31428                                  ;	DS:DI Points to saved scan location
 31429                                  ; All registers, except DS:DI, preserved.
 31430                                  ;----------------------------------------------------------------------------
 31431                                  ;M039: Rewritten to preserve registers.
 31432                                  
 31433                                  ;SCANPLACE:
 31434                                  ;	; 31/07/2018 - Retro DOS v3.0
 31435                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31436                                  ;	push	es
 31437                                  ;	les	si,[di]
 31438                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31439                                  ;	call	PLACEBUF
 31440                                  ;	push	es
 31441                                  ;	pop	ds
 31442                                  ;	mov	di,si
 31443                                  ;	pop	es
 31444                                  ;scanplace_retn:
 31445                                  ;	retn	
 31446                                  	
 31447                                  	; MSDOS 6.0
 31448                                  SCANPLACE:
 31449 000058DC FF35                    	push	word [di]
 31450                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31451 000058DE E80200                  	call	PLACEBUF
 31452 000058E1 5F                      	pop	di
 31453 000058E2 C3                      	retn
 31454                                  
 31455                                  ;----------------------------------------------------------------------------
 31456                                  ; Procedure Name : PlaceBuf
 31457                                  ; Input:
 31458                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31459                                  ; Function:
 31460                                  ;	Remove buffer from queue and re-insert it in proper place.
 31461                                  ; NO registers altered
 31462                                  ;----------------------------------------------------------------------------
 31463                                  
 31464                                  ;procedure PLACEBUF,NEAR
 31465                                  
 31466                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31467                                  	; 20/05/2019 - Retro DOS v4.0
 31468                                  PLACEBUF:
 31469                                  	; 31/07/2018 - Retro DOS v3.0
 31470                                  
 31471                                  	; MSDOS 6.0
 31472 000058E3 50                      	push	AX			;Save only regs we modify	;AN000;
 31473 000058E4 53                      	push	BX							;AN000;
 31474                                  	; 23/09/2023
 31475                                  	;push	SI							;AN000;
 31476                                  	
 31477 000058E5 8B05                    	mov	ax,[di]
 31478                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31479 000058E7 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31480                                  	
 31481 000058EC 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31482 000058EE 7422                    	je	short nret			;Yes, special case	;AN000;
 31483 000058F0 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31484 000058F2 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31485 000058F4 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31486 000058F8 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 31487                                  not_first:
 31488                                  	; 23/09/2023
 31489 000058FA 56                      	push	si
 31490                                  	;mov	si,[di+2]
 31491 000058FB 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31492 000058FE 8904                    	mov	[si],ax
 31493                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31494 00005900 96                      	xchg	si,ax
 31495                                  	;mov	[si+2],ax
 31496 00005901 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31497                                  	
 31498 00005904 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31499 00005907 893C                    	mov	[si],di
 31500                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31501 00005909 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31502 0000590C 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31503 0000590F 891D                    	mov	[di],bx
 31504                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31505                                  	; 23/09/2023
 31506 00005911 5E                      	pop	si
 31507                                  nret:	
 31508                                  	; 23/09/2023							;AN000;
 31509                                  	;pop	SI							;AN000;
 31510 00005912 5B                      	pop	BX							;AN000;
 31511 00005913 58                      	pop	AX							;AN000;
 31512                                  									;AN000;
 31513                                  	;cmp	byte [di+4],0FFh
 31514 00005914 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31515 00005918 7505                            jne	short pbx			; M039: -no, jump.
 31516 0000591A 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31517                                  pbx:	
 31518 0000591F C3                      	retn								;AN000;
 31519                                  
 31520                                  	; 31/07/2018 - Retro DOS v3.0
 31521                                  
 31522                                  	; MSDOS 3.3
 31523                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31524                                  
 31525                                  ;PLACEBUF:
 31526                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31527                                  ;	
 31528                                  ;       CALL	save_world
 31529                                  ;       LES     CX,[DI]
 31530                                  ;       CMP     CX,-1           	; Buf is LAST?
 31531                                  ;       JZ      SHORT NRET		; Buffer already last
 31532                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31533                                  ;       PUSH    DS
 31534                                  ;       POP     ES              	; Buf is ES:DI
 31535                                  ;	; 15/03/2018
 31536                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31537                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31538                                  ;       JNZ     SHORT BUFLOOP
 31539                                  ;       MOV     [SS:BUFFHEAD],CX
 31540                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31541                                  ;       JMP     SHORT LOOKEND
 31542                                  ;BUFLOOP:
 31543                                  ;	; 31/07/2018
 31544                                  ;	mov	ax,ds
 31545                                  ;	mov	bx,si
 31546                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31547                                  ;       LDS     SI,[SI]
 31548                                  ;       CALL    POINTCOMP
 31549                                  ;       jnz	short BUFLOOP
 31550                                  ;	;
 31551                                  ;	mov	ds,ax
 31552                                  ;	mov	si,bx
 31553                                  ;	mov	[SI],cx
 31554                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31555                                  ;	mov	[SI+2],bp
 31556                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31557                                  ;LOOKEND:
 31558                                  ;	mov	ax,ds
 31559                                  ;	mov	bx,si
 31560                                  ;       LDS     SI,[SI]
 31561                                  ;       CMP     SI,-1
 31562                                  ;       jnz     short LOOKEND
 31563                                  ;GOTHEEND:
 31564                                  ;       mov	ds,ax
 31565                                  ;	mov	[BX],di
 31566                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31567                                  ;       MOV     WORD [ES:DI],-1
 31568                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31569                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31570                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31571                                  ;NRET:
 31572                                  ;       CALL	restore_world
 31573                                  ;	
 31574                                  ;	;cmp	byte [di+4],-1
 31575                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31576                                  ;	jnz     short scanplace_retn
 31577                                  ;	call    PLACEHEAD
 31578                                  ;	retn
 31579                                  
 31580                                  ;EndProc PLACEBUF
 31581                                  
 31582                                  ;M039 - Removed PLACEHEAD.
 31583                                  ;----------------------------------------------------------------------------
 31584                                  ; places buffer at head
 31585                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31586                                  ;	ONE IN THE LIST!!!!!!!
 31587                                  ; BUGBUG ---- this routine can be removed because it has only
 31588                                  ; BUGBUG ---- one instruction. This routine is called from
 31589                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31590                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31591                                  ; BUGBUG ---- But kept as it is for modularity
 31592                                  ;----------------------------------------------------------------------------
 31593                                  ;procedure   PLACEHEAD,NEAR
 31594                                  ;	mov	word ptr [BufferQueue], di
 31595                                  ;	ret
 31596                                  ;EndProc PLACEHEAD
 31597                                  ;M039
 31598                                  
 31599                                  ;----------------------------------------------------------------------------
 31600                                  ; Procedure Name : PLACEHEAD
 31601                                  ;
 31602                                  ; SAME AS PLACEBUF except places buffer at head
 31603                                  ;----------------------------------------------------------------------------
 31604                                  
 31605                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31606                                  	; 05/09/2018
 31607                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31608                                  ;PLACEHEAD:
 31609                                  ;	; 31/07/2018 - Retro DOS v3.0
 31610                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31611                                  ;
 31612                                  ;       CALL	save_world
 31613                                  ;       PUSH	DS
 31614                                  ;       POP	ES
 31615                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31616                                  ;       LDS     SI,[SS:BUFFHEAD]
 31617                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31618                                  ;	CALL    POINTCOMP
 31619                                  ;       JZ      SHORT GOTHEEND2
 31620                                  ;	MOV	[ES:DI],SI
 31621                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31622                                  ;       MOV	[ES:DI+2],DS
 31623                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31624                                  ;       MOV	[SS:BUFFHEAD],DI
 31625                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31626                                  ;LOOKEND2:
 31627                                  ;       mov	ax,ds
 31628                                  ;	mov	bx,si
 31629                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31630                                  ;       LDS     SI,[SI]
 31631                                  ;       CALL    POINTCOMP
 31632                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31633                                  ;       mov	ds,ax
 31634                                  ;	mov	word [bx],-1
 31635                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31636                                  ;	mov	word [bx+2],-1
 31637                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31638                                  ;GOTHEEND2:
 31639                                  ;      	call	restore_world
 31640                                  ;placehead_retn:
 31641                                  ;	retn
 31642                                  
 31643                                  ; 20/05/2019 - Retro DOS v4.0
 31644                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31645                                  
 31646                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31647                                  ;----------------------------------------------------------------------------
 31648                                  ;
 31649                                  ; Procedure Name : PointComp
 31650                                  ; Inputs:
 31651                                  ;         DS:SI & ES:DI
 31652                                  ; Function:
 31653                                  ;          Checks for ((SI==DI) && (ES==DS))
 31654                                  ;	   Assumes that pointers are normalized for the
 31655                                  ;	   same segment
 31656                                  ;
 31657                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31658                                  ; DO NOT USE FOR < or >
 31659                                  ; No Registers altered
 31660                                  ;
 31661                                  ;----------------------------------------------------------------------------
 31662                                  
 31663                                  POINTCOMP:
 31664                                  	; 31/07/2018 - Retro DOS v3.0
 31665                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31666 00005920 39FE                    	CMP	SI,DI
 31667 00005922 750A                    	jnz	short _ret_label	; return if nz
 31668                                  	;jnz	short placehead_retn 
 31669 00005924 51                      	PUSH	CX
 31670 00005925 52                      	PUSH	DX
 31671 00005926 8CD9                    	MOV	CX,DS
 31672 00005928 8CC2                    	MOV	DX,ES
 31673 0000592A 39D1                    	CMP	CX,DX
 31674 0000592C 5A                      	POP	DX
 31675 0000592D 59                      	POP	CX
 31676                                  _ret_label:
 31677 0000592E C3                      	retn
 31678                                  
 31679                                  ; 01/08/2018 - Retro DOS v3.0
 31680                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31681                                  
 31682                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31683                                  
 31684                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31685                                  ;----------------------------------------------------------------------------
 31686                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31687                                  ;	It gets the specified local sector into one of the I/O buffers
 31688                                  ;	and shuffles the queue
 31689                                  ; 
 31690                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31691                                  ;		       ELSE no pre-read
 31692                                  ;		(DX) = Desired physical sector number	      (LOW)
 31693                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31694                                  ;		(ES:BP) = Pointer to drive parameters
 31695                                  ;		ALLOWED set in case of INT 24
 31696                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31697                                  ;		'C' clear if OK
 31698                                  ;		CURBUF Points to the Buffer for the sector
 31699                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31700                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31701                                  ;----------------------------------------------------------------------------
 31702                                  
 31703                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31704                                  ;----------------------------------------------------------------------------
 31705                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 31706                                  ;	It gets the specified sector into one of the I/O buffers
 31707                                  ;	and shuffles the queue. We need a special entry point so that
 31708                                  ;	we can read the alternate FAT sector if the first read fails, also
 31709                                  ;	so we can mark the buffer as a FAT sector.
 31710                                  ; 
 31711                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31712                                  ;		       ELSE no pre-read
 31713                                  ;		(DX) = Desired physical sector number	     (LOW)
 31714                                  ;		(SI) != 0
 31715                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31716                                  ;		(ES:BP) = Pointer to drive parameters
 31717                                  ;		ALLOWED set in case of INT 24
 31718                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31719                                  ;		'C' clear if OK
 31720                                  ;		CUR ddBUF Points to the Buffer for the sector
 31721                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31722                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31723                                  ;----------------------------------------------------------------------------
 31724                                  
 31725                                  	; 22/09/2023 - RetroDOS v4.2 MSDOS.SYS (optimization)
 31726                                  GETBUFFRC:
 31727 0000592F C706[0706]0000          	mov	word [HIGH_SECTOR],0
 31728                                  GETBUFFRA:
 31729 00005935 30C0                    	xor	al,al
 31730 00005937 BE0100                  	mov	si,1
 31731 0000593A EB09                    	jmp	short GETBUFFRB
 31732                                  
 31733                                  	; 22/09/2023
 31734                                  GETBUFFER:
 31735 0000593C 30C0                    	xor	al,al
 31736                                  GETBUFFRD:
 31737                                  	;mov	byte [ALLOWED],18h
 31738 0000593E C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31739                                  
 31740                                  	; 20/05/2019 - Retro DOS v4.0
 31741                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31742                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31743                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31744                                  GETBUFFR:
 31745 00005943 31F6                    	XOR	SI,SI
 31746                                  
 31747                                  ;	This entry point is called for FAT buffering with SI != 0
 31748                                  
 31749                                  GETBUFFRB:
 31750 00005945 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31751                                  	; 15/12/2022
 31752 00005948 268A4600                	mov	al,[ES:BP]
 31753                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31754                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31755 0000594C C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31756                                  	; MSDOS 6.0
 31757                                  ;hkn; SS override
 31758 00005950 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 31759                                  
 31760                                  ;	See if this is the buffer that was most recently returned.
 31761                                  ;	A big performance win if it is.
 31762                                  
 31763 00005955 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31764 00005958 7412                    	je	short getb5			; No
 31765                                  	;cmp	dx,[di+6]
 31766 0000595A 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31767 0000595D 750D                    	JNZ	short getb5			; Wrong sector
 31768                                  	
 31769                                  	; MSDOS 6.0
 31770                                  	;cmp	cx,[di+8]
 31771 0000595F 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 31772 00005962 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 31773                                  	
 31774                                  	;cmp	al,[di+4]
 31775 00005964 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31776                                  	;JZ	getb35				; Just asked for same buffer
 31777 00005967 7503                    	jnz	short getb5
 31778                                  	;jmp	getb35
 31779                                  	; 17/12/2022
 31780                                  	; 28/07/2019
 31781 00005969 E9C700                  	jmp	getb35x
 31782                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31783                                  	;jmp	getb35
 31784                                  
 31785                                  ;	It's not the buffer most recently returned. See if it's in the
 31786                                  ;	cache.
 31787                                  ;
 31788                                  ;	(cx:dx) = sector #
 31789                                  ;	(al) = drive #
 31790                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31791                                  ;	??? list may be incomplete ???
 31792                                  
 31793                                  getb5:	
 31794                                  	; MSDOS 3.3
 31795                                  	;lds	di,[SS:BUFFHEAD]
 31796                                  	; MSDOS 6.0
 31797 0000596C E85BFF                  	CALL	GETCURHEAD			; get Q Head
 31798                                  getb10:	
 31799                                  	;cmp	dx,[di+6]
 31800 0000596F 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31801 00005972 750D                    	jne	short getb12			; wrong sector lo
 31802                                  	
 31803                                  	; MSDOS 6.0
 31804                                  	;cmp	cx,[di+8]
 31805 00005974 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31806 00005977 7508                    	jne	short getb12			; wrong sector hi
 31807                                  	
 31808                                  	;cmp	al,[di+4]
 31809 00005979 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31810                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31811 0000597C 7503                    	jne	short getb12
 31812 0000597E E98C00                  	jmp	getb25
 31813                                  getb12:	
 31814                                  	; MSDOS 3.3
 31815                                  	;;mov	di,[DI]
 31816                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31817                                  	;
 31818                                  	; 15/08/2018
 31819                                  	;lds	di,[di]
 31820                                  
 31821                                  	;cmp	di,-1 ; 0FFFFh
 31822                                  	;jne	short getb10
 31823                                  	;lds	di,[SS:BUFFHEAD]
 31824                                  
 31825                                  	; MSDOS 6.0
 31826 00005981 8B3D                    	mov	di,[di]
 31827                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31828 00005983 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31829 00005988 75E5                    	jne	short getb10			; no, continue looking
 31830                                  
 31831                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31832                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31833                                  ;	new sector into it.
 31834                                  ;
 31835                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31836                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31837                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31838                                  ;	down a chain, but should be hashed.
 31839                                  ;
 31840                                  ;	(DS:DI) = first buffer in the queue
 31841                                  ;	(CX:DX) = sector # we want
 31842                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31843                                  
 31844                                  	; MSDOS 3.3 & MSDOS 6.0
 31845                                  ;hkn; SS override
 31846 0000598A 51                      	PUSH	CX  ; MSDOS 6.0
 31847 0000598B 56                      	push	si
 31848 0000598C 52                      	push	dx
 31849 0000598D 55                      	push	bp
 31850 0000598E 06                      	push	es
 31851 0000598F E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 31852 00005992 07                      	pop	es
 31853 00005993 5D                      	pop	bp
 31854 00005994 5A                      	pop	dx
 31855 00005995 5E                      	pop	si
 31856 00005996 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31857                                  	;jc	short getbx			; if got hard error
 31858 0000599B 7303                    	jnc	short getb13
 31859 0000599D E99D00                  	jmp	getbx
 31860                                  
 31861                                  getb13:
 31862                                  	; MSDOS 6.0
 31863 000059A0 E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31864                                  
 31865                                  ;	We're ready to read in the buffer, if need be. If the caller
 31866                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31867                                  
 31868 000059A3 30E4                    	XOR	AH,AH				; initial flags
 31869                                  ;hkn; SS override
 31870                                  	;test	byte [ss:PREREAD],0FFh
 31871                                  	;jnz	short getb20
 31872 000059A5 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31873 000059AA 7549                    	JNZ	short getb20			; no, we're done
 31874                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31875                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31876 000059AC 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31877                                  	;MOV	CX,1
 31878                                  	; 22/09/2023
 31879 000059AF 29C9                    	sub	cx,cx ; 0
 31880 000059B1 56                      	push	si
 31881 000059B2 57                      	push	di
 31882 000059B3 52                      	push	dx
 31883                                  	; MSDOS 6.0
 31884 000059B4 06                      	push	es ; ***
 31885                                  
 31886                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31887                                  ;	this point. -mrw 10/88
 31888                                  	
 31889                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31890                                  	; 22/09/2023
 31891 000059B5 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 31892 000059BA 7407                    	jz	short getb14
 31893 000059BC 1E                      	push	ds ; **
 31894 000059BD 53                      	push	bx ; *
 31895 000059BE 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31896                                  getb14:
 31897                                  ;M039: Eliminated redundant HMA code.
 31898                                  
 31899                                  	; 22/09/2023
 31900 000059C3 41                      	inc	cx ; cx = 1
 31901                                  
 31902                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31903 000059C4 09F6                    	OR	SI,SI			; FAT sector ?
 31904 000059C6 7407                    	JZ	short getb15		
 31905                                  
 31906 000059C8 E80BDD                  	call	FATSECRD
 31907                                  	;mov	ah,2
 31908 000059CB B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31909                                  
 31910 000059CD EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31911                                  
 31912                                  getb15:
 31913 000059CF E830DD                  	call	DREAD			; Buffer is marked free if read barfs
 31914 000059D2 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31915                                  getb17:
 31916                                  	; 17/12/2022	
 31917                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31918                                  ;%if 0
 31919                                  	; MSDOS 6.0							  ;I001
 31920 000059D4 9C                      	pushf								  ;I001
 31921 000059D5 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31922 000059DB 7411                    	jz	short not_in_hma	; no				  ;I001
 31923                                  	;mov	cx,[es:bp+2]
 31924 000059DD 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31925 000059E1 D1E9                    	shr	cx,1							  ;I001
 31926 000059E3 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31927 000059E4 89DE                    	mov	si,bx							  ;I001
 31928 000059E6 5F                      	pop	di ; *							  ;I001
 31929 000059E7 07                      	pop	es ; **							  ;I001
 31930 000059E8 FC                      	cld								  ;I001
 31931 000059E9 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31932 000059EA F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31933 000059EC 06                      	push	es							  ;I001
 31934 000059ED 1F                      	pop	ds							  ;I001
 31935                                  ;%endif
 31936                                  
 31937                                  ; 17/12/2022
 31938                                  %if 0
 31939                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31940                                  	; MSDOS 5.0
 31941                                  	pushf
 31942                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31943                                  	jz	short not_in_hma	; no
 31944                                  	popf
 31945                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31946                                  	shr	cx,1
 31947                                  	mov	si,bx
 31948                                  	pop	di ; *
 31949                                  	pop	es ; **
 31950                                  	cld
 31951                                  	rep	movsw
 31952                                  	push	es
 31953                                  	pop	ds
 31954                                  	jmp	short getb19 ; 27/11/2022
 31955                                  %endif
 31956                                  
 31957                                  not_in_hma:								  ;I001
 31958 000059EE 9D                      	popf							 	  ;I001
 31959                                  getb19:
 31960 000059EF 07                      	pop	es ; ***
 31961 000059F0 5A                      	pop	dx
 31962 000059F1 5F                      	pop	di
 31963 000059F2 5E                      	pop	si
 31964 000059F3 7248                    	JC	short getbx
 31965                                  
 31966                                  ;	The buffer has the data setup in it (if we were to read)
 31967                                  ;	Setup the various buffer fields
 31968                                  ;
 31969                                  ;	(ds:di) = buffer address
 31970                                  ;	(es:bp) = DPB address
 31971                                  ;	(HIGH_SECTOR:DX) = sector #
 31972                                  ;	(ah) = BUF_FLAGS value
 31973                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31974                                  
 31975                                  ;hkn; SS override
 31976                                  getb20:	; MSDOS 6.0
 31977 000059F5 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31978                                  	;mov	[di+8],cx
 31979 000059FA 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31980                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31981                                   	;mov	[di+6],dx
 31982 000059FD 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31983                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31984                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31985 00005A00 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31986                                  	;;mov	[di+0Ch],es
 31987                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31988 00005A03 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31989                                  	; 15/12/2022
 31990 00005A06 268A4600                	mov	al,[es:bp]
 31991                                  	;mov	al,[es:bp+0]
 31992                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31993                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31994                                  	;mov	[di+4],ax
 31995 00005A0A 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31996                                  getb25:	
 31997                                  	; MSDOS 3.3
 31998                                  	;mov     ax,1
 31999                                  
 32000                                  	; MSDOS 6.0
 32001                                  	;mov	byte [di+0Ah],1
 32002 00005A0D C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32003 00005A11 31C0                    	XOR	AX,AX
 32004                                  
 32005                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32006 00005A13 09F6                    	OR	SI,SI				; FAT sector ?
 32007 00005A15 740B                    	JZ	short getb30
 32008                                  
 32009                                  	;mov	al,[es:bp+8]
 32010 00005A17 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32011                                  	
 32012                                  	; MSDOS 6.0
 32013 00005A1B 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32014                                  	;mov	ax,[es:bp+0Fh]
 32015 00005A1E 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32016                                  						;  sectors
 32017                                  	; MSDOS 3.3
 32018                                  	;;mov	ah,[es:bp+0Fh]
 32019                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32020                                  
 32021                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32022                                  ;		is set
 32023                                  
 32024                                  getb30:	
 32025                                  	; MSDOS 6.0
 32026                                  	;mov	[di+0Bh],ax
 32027 00005A22 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32028                                  
 32029                                  	; MSDOS 3.3
 32030                                  	;;mov	[di+8],ax ; 15/08/2018	
 32031                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32032                                  
 32033 00005A25 E8BBFE                  	CALL	PLACEBUF
 32034                                  
 32035                                  ;hkn; SS override for next 4
 32036                                  getb35: 
 32037                                  	; 17/12/2022
 32038                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32039                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32040                                  	;MOV	[SS:CURBUF+2],DS
 32041                                  	;MOV	[SS:LastBuffer+2],DS
 32042                                  	;MOV	[SS:CURBUF],DI
 32043                                  	;MOV	[SS:LastBuffer],DI
 32044                                  	;CLC
 32045                                  
 32046                                  	; 17/12/2022
 32047                                  	; 07/12/2022
 32048                                  	; Retro DOS v4.0
 32049 00005A28 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32050 00005A2D 36893E[1E00]            	mov	[ss:LastBuffer],di
 32051 00005A32 F8                      	clc
 32052                                  getb35x: ; 28/07/2019
 32053 00005A33 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32054 00005A38 36893E[E205]            	MOV	[ss:CURBUF],di
 32055                                  
 32056                                  ;	Return with 'C' set appropriately
 32057                                  ;	(dx) = caller's original value
 32058                                  
 32059                                  getbx:	
 32060 00005A3D 16                      	push	ss
 32061 00005A3E 1F                      	pop	ds
 32062                                  	;retn
 32063                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32064                                  getbuffrb_retn:
 32065                                  ;flushbuf_retn:	; 17/12/2022
 32066 00005A3F C3                      	retn
 32067                                  
 32068                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32069                                  ;----------------------------------------------------------------------------
 32070                                  ; Input:
 32071                                  ;	DS = DOSGROUP
 32072                                  ;	AL = Physical unit number local buffers only
 32073                                  ;	   = -1 for all units and all remote buffers
 32074                                  ; Function:
 32075                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32076                                  ;	Carry set if error (user FAILed to I 24)
 32077                                  ;	    Flush operation completed.
 32078                                  ; DS Preserved, all others destroyed (ES too)
 32079                                  ;----------------------------------------------------------------------------
 32080                                  
 32081                                  	; 20/05/2019 - Retro DOS v4.0
 32082                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32083                                  
 32084                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32085                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32086                                  FLUSHBUF:
 32087                                  	; MSDOS 3.3
 32088                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32089                                  	;lds	di,[BUFFHEAD]
 32090                                  
 32091                                  	; MSDOS 6.0
 32092 00005A40 E887FE                  	call	GETCURHEAD
 32093                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32094 00005A43 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32095 00005A49 7508                    	jnz	short scan_buf_queue
 32096 00005A4B 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32097 00005A51 7423                    	je	short end_scan
 32098                                  	
 32099                                  scan_buf_queue:
 32100 00005A53 E82900                  	call	CHECKFLUSH
 32101                                  	;push	ax  ; MSDOS 3.3
 32102                                  	; MSDOS 6.0
 32103                                  	;mov	ah,[di+4]
 32104 00005A56 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32105 00005A59 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32106 00005A5E 7408                    	je	short free_the_buf
 32107                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32108 00005A60 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32109 00005A66 7405                    	jz	short dont_free_the_buf
 32110                                  	; MSDOS 3.3
 32111                                  	;;mov	al,[di+4]
 32112                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32113                                  	;cmp	[SS:WPERR],al					;hkn;
 32114                                  	; 15/08/2018
 32115                                  	;jne	short dont_free_the_buf	
 32116                                  free_the_buf:
 32117                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32118 00005A68 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32119                                  dont_free_the_buf:
 32120                                  	;pop	ax  ; MSDOS 3.3 	   	
 32121                                  
 32122                                  	; MSDOS 3.3
 32123                                  	;mov	di,[DI]
 32124                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32125                                  	;
 32126                                  	; 15/08/2018
 32127                                  	;lds	di,[di]
 32128                                  	;
 32129                                  	;cmp	di,-1 ; 0FFFFh
 32130                                  	;jnz	short scan_buf_queue 
 32131                                  	
 32132                                  	; MSDOS 6.0
 32133 00005A6D 8B3D                    	mov	di,[di]
 32134                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32135 00005A6F 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32136 00005A74 75DD                    	jne	short scan_buf_queue
 32137                                  
 32138                                  end_scan:
 32139 00005A76 16                      	push	ss
 32140 00005A77 1F                      	pop	ds
 32141                                  	; 01/08/2018 - Retro DOS v3.0
 32142                                  	;cmp	byte [FAILERR],0
 32143                                  	;jne	short bad_flush
 32144                                  	;retn
 32145                                  ;bad_flush:
 32146                                  	;stc
 32147                                  	;retn
 32148                                  
 32149                                  	; 17/12/2022
 32150                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32151                                  	; 01/08/2018 - Retro DOS v3.0
 32152 00005A78 803E[4A03]01            	cmp	byte [FAILERR],1
 32153 00005A7D F5                      	cmc
 32154                                  flushbuf_retn:
 32155 00005A7E C3                      	retn
 32156                                  	
 32157                                  	; 17/12/2022
 32158                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32159                                  	;cmp	byte [FAILERR],0
 32160                                  	;jne	short bad_flush
 32161                                  	;retn
 32162                                  ;bad_flush:
 32163                                  	;stc
 32164                                  	;retn
 32165                                  
 32166                                  ;----------------------------------------------------------------------------
 32167                                  ;
 32168                                  ; Procedure Name : CHECKFLUSH
 32169                                  ;
 32170                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32171                                  ;	   DS:DI - pointer to buffer
 32172                                  ;
 32173                                  ; Function : Write out a buffer if it is dirty
 32174                                  ;
 32175                                  ; Carry set if problem (currently user FAILed to I 24)
 32176                                  ;
 32177                                  ;----------------------------------------------------------------------------
 32178                                  
 32179                                  CHECKFLUSH:
 32180                                  	; MSDOS 6.0
 32181 00005A7F B4FF                    	mov	ah,-1	; 01/08/2018 Retro DOS v3.0
 32182                                  	;cmp	[di+4],ah
 32183 00005A81 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32184 00005A84 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32185 00005A86 38C4                    	CMP	AH,AL			; 
 32186 00005A88 7406                    	JZ	short DOBUFFER		; do this buffer
 32187                                  	;cmp	al,[di+4]
 32188 00005A8A 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32189 00005A8D F8                      	CLC
 32190 00005A8E 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32191                                  DOBUFFER:
 32192                                  	;test	byte [di+5],40h
 32193 00005A90 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32194 00005A94 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32195 00005A96 50                      	PUSH	AX
 32196                                  	;push	word [di+4]
 32197 00005A97 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32198 00005A9A E80B00                  	CALL	BUFWRITE
 32199 00005A9D 58                      	POP	AX
 32200 00005A9E 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32201                                  	;and	ah,0BFh
 32202 00005AA0 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32203                                  	;mov	[di+4],ax
 32204 00005AA3 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32205                                  LEAVE_BUF:
 32206 00005AA6 58                      	POP	AX			; Search info
 32207                                  checkflush_retn:
 32208 00005AA7 C3                      	retn
 32209                                  
 32210                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32211                                  ;----------------------------------------------------------------------------
 32212                                  ;
 32213                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32214                                  ;
 32215                                  ;	ENTRY	DS:DI Points to the buffer
 32216                                  ;
 32217                                  ;	EXIT	Buffer marked free
 32218                                  ;		Carry set if error (currently user FAILed to I 24)
 32219                                  ;
 32220                                  ;	USES	All buf DS:DI
 32221                                  ;		HIGH_SECTOR
 32222                                  ;----------------------------------------------------------------------------
 32223                                  
 32224                                  	; 20/05/2019 - Retro DOS v4.0
 32225                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 32226                                  
 32227                                  
 32228                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32229                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 32230                                  
 32231                                  BUFWRITE:
 32232                                  	; 10/09/2018
 32233                                  	; 01/08/2018 - Retro DOS v3.0
 32234                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 32235 00005AA8 B8FF00                  	MOV	AX,00FFH
 32236                                  	;xchg	ax,[di+4]
 32237 00005AAB 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 32238 00005AAE 3CFF                    	CMP	AL,0FFH
 32239 00005AB0 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 32240                                  	;test	ah,40h
 32241 00005AB2 F6C440                  	test	AH,buf_dirty
 32242 00005AB5 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 32243                                  	; MSDOS 6.0
 32244 00005AB7 E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 32245                                  
 32246                                  ;hkn; SS override
 32247 00005ABA 363A06[2203]            	CMP	AL,[SS:WPERR]
 32248 00005ABF 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 32249                                  
 32250                                  ;hkn; SS override
 32251                                  	; MSDOS 6.0
 32252 00005AC1 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 32253                                  	
 32254                                  	;;les	bp,[di+10] ; MSDOS 3.3
 32255                                  	;les	bp,[di+13] ; MSDOS 6.0
 32256 00005AC5 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 32257                                  	;;lea	bx,[di+16]
 32258                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32259 00005AC8 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 32260                                  	;mov	dx,[di+6]
 32261 00005ACB 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 32262                                  	
 32263                                  	; MSDOS 6.0
 32264                                  	;mov	cx,[di+8]
 32265 00005ACE 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 32266                                  
 32267                                  ;hkn; SS override
 32268 00005AD1 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 32269 00005AD6 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 32270                                  	; MSDOS 3.3
 32271                                  	;; mov	cx,[DI+8]
 32272                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 32273                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 32274 00005AD9 30ED                    	XOR	CH,CH
 32275                                  	;;mov	ah,ch ; MSDOS 3.3
 32276                                  
 32277                                  ;hkn; SS override for ALLOWED
 32278                                  	;mov	byte [SS:ALLOWED],18h
 32279 00005ADB 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 32280                                  	;test	byte [di+5],8
 32281                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 32282                                  	;test	ah,8
 32283 00005AE1 F6C408                  	test	AH,buf_isDATA
 32284 00005AE4 7406                    	JZ	short NO_IGNORE
 32285                                  	;or	byte [SS:ALLOWED],20h
 32286 00005AE6 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 32287                                  NO_IGNORE:
 32288                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 32289                                  	; MSDOS 6.0
 32290                                  	;mov	ax,[di+11]
 32291 00005AEC 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 32292                                  
 32293 00005AEF 57                      	PUSH	DI		; Save buffer pointer
 32294 00005AF0 31FF                    	XOR	DI,DI		; Indicate failure
 32295                                  
 32296 00005AF2 1E                      	push	ds ; *
 32297 00005AF3 53                      	push	bx ; **
 32298                                  WRTAGAIN:
 32299 00005AF4 57                      	push	di ; ***
 32300 00005AF5 51                      	push	cx ; ****
 32301 00005AF6 50                      	push	ax ; *****
 32302                                  	;MOV	CX,1
 32303                                  	; 17/12/2022
 32304                                  	; ch = 0
 32305 00005AF7 B101                    	mov	cl,1 ; 24/07/2019
 32306                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32307                                  	;mov	cx,1
 32308 00005AF9 53                      	push	bx ; ******
 32309 00005AFA 52                      	push	dx ; *******
 32310 00005AFB 1E                      	push	ds ; ********
 32311                                  
 32312                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 32313                                  
 32314                                  	; MSDOS 6.0
 32315                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 32316                                  	; 22/09/2023
 32317 00005AFC 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 32318 00005B01 7418                    	jz	short NBUFFINHMA
 32319 00005B03 51                      	push	cx
 32320 00005B04 06                      	push	es
 32321 00005B05 89DE                    	mov	si,bx
 32322 00005B07 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 32323 00005B0B D1E9                    	shr	cx,1
 32324 00005B0D 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 32325 00005B12 89FB                    	mov	bx,di
 32326 00005B14 FC                      	cld
 32327 00005B15 F3A5                    	rep	movsw
 32328 00005B17 06                      	push	es
 32329 00005B18 1F                      	pop	ds
 32330 00005B19 07                      	pop	es
 32331 00005B1A 59                      	pop	cx
 32332                                  NBUFFINHMA:
 32333 00005B1B E844DC                  	call	DWRITE		; Write out the dirty buffer
 32334 00005B1E 1F                      	pop	ds ; ********
 32335 00005B1F 5A                      	pop	dx ; *******
 32336 00005B20 5B                      	pop	bx ; ******
 32337 00005B21 58                      	pop	ax ; *****
 32338 00005B22 59                      	pop	cx ; ****
 32339 00005B23 5F                      	pop	di ; ***
 32340 00005B24 7201                    	JC	short NOSET
 32341 00005B26 47                      	INC	DI		; If at least ONE write succeedes, the operation
 32342                                  NOSET:				;	succeedes.
 32343 00005B27 01C2                    	ADD	DX,AX
 32344 00005B29 E2C9                    	LOOP	WRTAGAIN
 32345 00005B2B 5B                      	pop	bx ; **
 32346 00005B2C 1F                      	pop	ds ; *
 32347                                  	;OR	DI,DI		; Clears carry
 32348                                  	;JNZ	short BWROK	; At least one write worked
 32349                                  	;STC			; DI never got INCed, all writes failed.
 32350                                  	; 22/09/2023
 32351 00005B2D 83FF01                  	cmp	di,1
 32352                                  BWROK:	
 32353 00005B30 5F                      	POP	DI
 32354 00005B31 C3                      	retn
 32355                                  
 32356                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 32357                                  ;----------------------------------------------------------------------------
 32358                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 32359                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 32360                                  ;	SC_DRIVE even if SC is disabled to save the testing
 32361                                  ;	code and time
 32362                                  ;
 32363                                  ;	ENTRY	ES:BP = drive parameter block
 32364                                  ;
 32365                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 32366                                  ;		[SC_DRIVE]= drive #
 32367                                  ;
 32368                                  ;	USES	Flags
 32369                                  ;----------------------------------------------------------------------------
 32370                                  
 32371                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32372                                  ; 04/05/2019 - Retro DOS v4.0
 32373                                  
 32374                                  SET_RQ_SC_PARMS:
 32375                                  ;hkn; SS override for all variables used in this procedure.
 32376 00005B32 50                      	push	ax
 32377                                  	;mov	ax,[es:bp+2]
 32378 00005B33 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 32379 00005B37 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 32380                                  	;;mov	al,[es:bp+0]
 32381                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32382                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 32383                                  	; 15/12/2022
 32384 00005B3B 268A4600                	mov	al,[ES:BP]
 32385 00005B3F 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 32386 00005B43 58                      	pop	ax
 32387                                  srspx:	
 32388 00005B44 C3                      	retn					;LB. return
 32389                                  
 32390                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 32391                                  ;----------------------------------------------------------------------------
 32392                                  ; Input:
 32393                                  ;	none
 32394                                  ; Function:
 32395                                  ;	increment dirty buffers count
 32396                                  ; Output:
 32397                                  ;	dirty buffers count is incremented
 32398                                  ;
 32399                                  ; All registers preserved
 32400                                  ;----------------------------------------------------------------------------
 32401                                  
 32402                                  INC_DIRTY_COUNT:
 32403                                  ;; BUGBUG  ---- remove this routine
 32404                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 32405 00005B45 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 32406 00005B4A C3                      	retn
 32407                                  
 32408                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 32409                                  ;----------------------------------------------------------------------------
 32410                                  ; Input:
 32411                                  ;	none
 32412                                  ; Function:
 32413                                  ;	decrement dirty buffers count
 32414                                  ; Output:
 32415                                  ;	dirty buffers count is decremented
 32416                                  ;
 32417                                  ; All registers preserved
 32418                                  ;----------------------------------------------------------------------------
 32419                                  
 32420                                  DEC_DIRTY_COUNT:
 32421 00005B4B 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32422 00005B51 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32423 00005B53 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32424                                  					; error condition to underflow here? ;hkn;
 32425                                  ddcx:	
 32426 00005B58 C3                      	retn
 32427                                  
 32428                                  ;============================================================================
 32429                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32430                                  ;============================================================================
 32431                                  ; 02/08/2018 - Retro DOS v3.0
 32432                                  ; 29/04/2019 - Retro DOS v4.0
 32433                                  
 32434                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32435                                  
 32436                                  ; Pseudo EXEC system call for DOS
 32437                                  
 32438                                  ;	TITLE	MSPROC - process maintenance
 32439                                  ;	NAME	MSPROC
 32440                                  
 32441                                  ; =========================================================================
 32442                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32443                                  ;	I/O specs are defined in DISPATCH.
 32444                                  ;
 32445                                  ;	$WAIT
 32446                                  ;	$EXEC
 32447                                  ;	$Keep_process
 32448                                  ;	Stay_resident
 32449                                  ;	$EXIT
 32450                                  ;	$ABORT
 32451                                  ;	abort_inner
 32452                                  ;
 32453                                  ;	Modification history:
 32454                                  ;
 32455                                  ;		Created: ARR 30 March 1983
 32456                                  ;		AN000	version 4.0 jan. 1988
 32457                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32458                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32459                                  ;
 32460                                  ;		M000	added support for loading programs into UMBs 7/9/90
 32461                                  ;
 32462                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 32463                                  ;		       dossym.inc. 7/30/90
 32464                                  ;		M005 - Support for EXE programs with out STACK segment and 
 32465                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 32466                                  ;		       stack is provided at the end of the program. Note that
 32467                                  ;		       only SP is changed.
 32468                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 32469                                  ;
 32470                                  ;		M028 - 4b04 implementation
 32471                                  ;
 32472                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 32473                                  ;			in memory block >= 64K, sp = 0. If memory block
 32474                                  ;			obtained is <64K, point sp at the end of the memory
 32475                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 32476                                  ;			added for a stack segment which may be needed if it
 32477                                  ;			is loaded in low memory situations.
 32478                                  ;
 32479                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 32480                                  ;
 32481                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 32482                                  ;			a bad environment if it reached 32767 bytes. Changed
 32483                                  ;			to allow 32768 bytes of environment.
 32484                                  ;
 32485                                  ;		M047 - Release the allocated UMB when we failed to load a 
 32486                                  ;		       COM file high. Also ensure that if the biggest block
 32487                                  ;		       into which we load the com file is less than 64K then
 32488                                  ;		       we provide atleast 256 bytes of stack to the user.
 32489                                  ;
 32490                                  ;		M050 - Made Lie table search CASE insensitive
 32491                                  ;
 32492                                  ;		M060 - Removed special version table from the kernal and
 32493                                  ;                      put it in a device drive which puts the address
 32494                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 32495                                  ;		       as a DWORD.
 32496                                  ;
 32497                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 32498                                  ;		       entry do not try to load low if there is no space in
 32499                                  ;		       UMBs.
 32500                                  ;
 32501                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 32502                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 32503                                  ;		       change return address to LeaveDos if AL=5.
 32504                                  ;
 32505                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 32506                                  ;                      controls building a version of MSDOS.SYS that only
 32507                                  ;                      runs programs from a fixed list (defined in the
 32508                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 32509                                  ;                      for details.  This feature is used to build a
 32510                                  ;                      "special" version of DOS that can be handed out to
 32511                                  ;                      OEM/ISV customers as part of a "service" disk.
 32512                                  ;
 32513                                  ; =========================================================================
 32514                                  
 32515                                  ;SAVEXIT  EQU  10
 32516                                  
 32517                                  ;BREAK	<$WAIT - return previous process error code>
 32518                                  ; =========================================================================
 32519                                  ;	$WAIT - Return previous process error code.
 32520                                  ;
 32521                                  ;	Assembler usage:
 32522                                  ;
 32523                                  ;	    MOV     AH, WaitProcess
 32524                                  ;	    INT     int_command
 32525                                  ;
 32526                                  ;	ENTRY	none
 32527                                  ;	EXIT	(ax) = exit code
 32528                                  ;	USES	all
 32529                                  ; =========================================================================
 32530                                  
 32531                                  	; 20/05/2019 - Retro DOS v4.0
 32532                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32533                                  
 32534                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32535                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32536                                  _$WAIT:
 32537                                  	; 02/08/2018 - Retro DOS v3.0
 32538                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32539                                  
 32540 00005B59 31C0                    	xor	AX,AX
 32541 00005B5B 368706[3403]            	xchg	AX,[ss:exit_code]
 32542 00005B60 E9D4AA                  	jmp	SYS_RET_OK
 32543                                  
 32544                                  ; =========================================================================
 32545                                  ;BREAK <$exec - load/go a program>
 32546                                  ;	EXEC.ASM - EXEC System Call
 32547                                  ;
 32548                                  ;
 32549                                  ; Assembler usage:
 32550                                  ;	    lds     DX, Name
 32551                                  ;	    les     BX, Blk
 32552                                  ;	    mov     AH, Exec
 32553                                  ;	    mov     AL, FUNC
 32554                                  ;	    int     INT_COMMAND
 32555                                  ;
 32556                                  ;	AL  Function
 32557                                  ;	--  --------
 32558                                  ;	 0  Load and execute the program.
 32559                                  ;	 1  Load, create the program header but do not
 32560                                  ;	    begin execution.
 32561                                  ;	 3  Load overlay. No header created.
 32562                                  ;
 32563                                  ;	    AL = 0 -> load/execute program
 32564                                  ;
 32565                                  ;	    +---------------------------+
 32566                                  ;	    | WORD segment address of	|
 32567                                  ;	    | environment.		|
 32568                                  ;	    +---------------------------+
 32569                                  ;	    | DWORD pointer to ASCIZ	|
 32570                                  ;	    | command line at 80h	|
 32571                                  ;	    +---------------------------+
 32572                                  ;	    | DWORD pointer to default	|
 32573                                  ;	    | FCB to be passed at 5Ch	|
 32574                                  ;	    +---------------------------+
 32575                                  ;	    | DWORD pointer to default	|
 32576                                  ;	    | FCB to be passed at 6Ch	|
 32577                                  ;	    +---------------------------+
 32578                                  ;
 32579                                  ;	    AL = 1 -> load program
 32580                                  ;
 32581                                  ;	    +---------------------------+
 32582                                  ;	    | WORD segment address of	|
 32583                                  ;	    | environment.		|
 32584                                  ;	    +---------------------------+
 32585                                  ;	    | DWORD pointer to ASCIZ	|
 32586                                  ;	    | command line at 80h	|
 32587                                  ;	    +---------------------------+
 32588                                  ;	    | DWORD pointer to default	|
 32589                                  ;	    | FCB to be passed at 5Ch	|
 32590                                  ;	    +---------------------------+
 32591                                  ;	    | DWORD pointer to default	|
 32592                                  ;	    | FCB to be passed at 6Ch	|
 32593                                  ;	    +---------------------------+
 32594                                  ;	    | DWORD returned value of	|
 32595                                  ;	    | CS:IP			|
 32596                                  ;	    +---------------------------+
 32597                                  ;	    | DWORD returned value of	|
 32598                                  ;	    | SS:IP			|
 32599                                  ;	    +---------------------------+
 32600                                  ;
 32601                                  ;	    AL = 3 -> load overlay
 32602                                  ;
 32603                                  ;	    +---------------------------+
 32604                                  ;	    | WORD segment address where|
 32605                                  ;	    | file will be loaded.	|
 32606                                  ;	    +---------------------------+
 32607                                  ;	    | WORD relocation factor to |
 32608                                  ;	    | be applied to the image.	|
 32609                                  ;	    +---------------------------+
 32610                                  ;
 32611                                  ; Returns:
 32612                                  ;	    AX = error_invalid_function
 32613                                  ;	       = error_bad_format
 32614                                  ;	       = error_bad_environment
 32615                                  ;	       = error_not_enough_memory
 32616                                  ;	       = error_file_not_found
 32617                                  ; =========================================================================
 32618                                  ;
 32619                                  ;   Revision history:
 32620                                  ;
 32621                                  ;	 A000	version 4.00  Jan. 1988
 32622                                  ;
 32623                                  ; =========================================================================
 32624                                  
 32625                                  Exec_Internal_Buffer		EQU	OPENBUF
 32626                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32627                                  
 32628                                  ; =========================================================================
 32629                                  
 32630                                  ;IF1		; warning message on buffers
 32631                                  ;%out	Please make sure that the following are contiguous and of the
 32632                                  ;%out	following sizes:
 32633                                  ;%out
 32634                                  ;%out	OpenBuf     128
 32635                                  ;%out	RenBuf	    128
 32636                                  ;%out	SearchBuf    53
 32637                                  ;%out	DummyCDS    curdirLen
 32638                                  ;ENDIF
 32639                                  
 32640                                  ; =========================================================================
 32641                                  
 32642                                  ; =========================================================================
 32643                                  ;
 32644                                  ; =========================================================================
 32645                                  
 32646                                  	; 20/05/2019 - Retro DOS v4.0
 32647                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32648                                  
 32649                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32650                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32651                                  	
 32652                                  _$EXEC:
 32653                                  	; 02/08/2018 - Retro DOS v3.0
 32654                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32655                                  
 32656                                  EXEC001S:
 32657                                  	;LocalVar    Exec_Blk		,DWORD
 32658                                  	;LocalVar    Exec_Func		,BYTE
 32659                                  	;LocalVar    Exec_Load_High	,BYTE
 32660                                  	;LocalVar    Exec_FH		,WORD
 32661                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32662                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32663                                  	;LocalVar    Exec_Environ	,WORD
 32664                                  	;LocalVar    Exec_Size		,WORD
 32665                                  	;LocalVar    Exec_Load_Block	,WORD
 32666                                  	;LocalVar    Exec_DMA		,WORD
 32667                                  	;LocalVar    ExecNameLen 	,WORD
 32668                                  	;LocalVar    ExecName		,DWORD
 32669                                  	;
 32670                                  	;LocalVar    Exec_DMA_Save	,WORD
 32671                                  	;LocalVar    Exec_NoStack	,BYTE
 32672                                  
 32673                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32674                                  	;%define	Exec_Blk	dword [bp-4]
 32675                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32676                                  	%define		Exec_BlkL	word [bp-4]	
 32677                                  	%define		Exec_BlkH	word [bp-2]
 32678                                  	%define		Exec_Func	byte [bp-5]
 32679                                  	%define		Exec_Load_High	byte [bp-6]
 32680                                  	%define		Exec_FH		word [bp-8]
 32681                                  	%define		Exec_Rel_Fac	word [bp-10]
 32682                                  	%define		Exec_Res_Len_Para word [bp-12]
 32683                                  	%define		Exec_Environ	word [bp-14]
 32684                                  	%define		Exec_Size	word [bp-16]
 32685                                  	%define		Exec_Load_Block	word [bp-18]
 32686                                  	%define		Exec_DMA	word [bp-20]
 32687                                  	%define		ExecNameLen	word [bp-22]
 32688                                  	;%define	ExecName	dword [bp-26]
 32689                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32690                                  	%define		ExecNameL	word [bp-26]	
 32691                                  	%define		ExecNameH	word [bp-24]
 32692                                  	; MSDOS 6.0
 32693                                  	%define		Exec_DMA_Save	word [bp-28]
 32694                                  	%define		Exec_NoStack	byte [bp-29]
 32695                                  	
 32696                                  	; ==================================================================
 32697                                  	; validate function
 32698                                  	; ==================================================================
 32699                                  		      	
 32700                                  	; M068 - Start
 32701                                  	;
 32702                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32703                                  	; possibility that the count may not be decremented all the way to
 32704                                  	; 0. A typical case is if the program for which we intended to keep 
 32705                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32706                                  	; calls), exits pre-maturely due to error conditions.
 32707                                  
 32708                                  	; MSDOS 6.0
 32709 00005B63 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32710                                  
 32711                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32712                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32713                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32714                                  
 32715 00005B69 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32716                                  	;jne	short @f
 32717 00005B6B 7505                    	jne	short Exec_@f		; N: continue
 32718                                  					; Y: change ret addr. to LeaveDos.
 32719 00005B6D 59                      	pop	cx			; Note CX is not input to ExecReady
 32720 00005B6E B9[0404]                	mov	cx,LeaveDOS
 32721 00005B71 51                      	push	cx
 32722                                  ;@@:
 32723                                  Exec_@f:
 32724                                  	; M068 - End
 32725                                  	
 32726                                  	;Enter
 32727                                  
 32728 00005B72 55                      	push	bp
 32729 00005B73 89E5                    	mov	bp,sp
 32730                                  	;;sub	sp,26	; MSDOS 3.3
 32731                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32732                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32733                                  	; 17/12/2022
 32734                                  	; 20/05/2019
 32735 00005B75 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32736                                  
 32737                                  	; MSDOS 6.0
 32738 00005B78 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32739                                  					; M030
 32740 00005B7A 7614                    	jna	short Exec_Check_2
 32741                                  
 32742                                  	; MSDOS 3.3
 32743                                  	;cmp	AL,3
 32744                                  	;jna	short Exec_Check_2
 32745                                  
 32746                                  Exec_Bad_Fun:
 32747 00005B7C 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32748                                  					; Extended Error Locus	;smr;SS Override
 32749                                  	;mov	al,1
 32750 00005B82 B001                    	mov	al,error_invalid_function
 32751                                  
 32752                                  Exec_Ret_Err:
 32753                                  	;Leave
 32754 00005B84 89EC                    	mov	sp,bp
 32755 00005B86 5D                      	pop	bp
 32756                                  	;transfer SYS_RET_ERR
 32757 00005B87 E9B6AA                  	jmp	SYS_RET_ERR
 32758                                  
 32759                                  	; MSDOS 6.0
 32760                                  ExecReadyJ:
 32761 00005B8A E8FD17                  	call	ExecReady		; M028
 32762 00005B8D E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32763                                  
 32764                                  Exec_Check_2:
 32765 00005B90 3C02                    	cmp	AL,2			
 32766 00005B92 74E8                    	je	short Exec_Bad_Fun
 32767                                  
 32768                                  	; MSDOS 6.0
 32769 00005B94 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32770 00005B96 74E4                    	je	short Exec_Bad_Fun
 32771                                  	
 32772 00005B98 3C05                    	cmp	al,5			; M028 ; M030
 32773 00005B9A 74EE                    	je	short ExecReadyJ	; M028
 32774                                  
 32775                                  	;mov	[bp-4],bx
 32776 00005B9C 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32777                                  	;mov	[bp-2],es
 32778 00005B9F 8C46FE                  	mov	Exec_BlkH,ES
 32779                                  	;mov	[bp-5],al
 32780 00005BA2 8846FB                  	mov	Exec_Func,AL
 32781                                  	;mov	byte [bp-6],0
 32782 00005BA5 C646FA00                	mov	Exec_Load_High,0
 32783                                  
 32784                                  	;mov	[bp-26],dx
 32785 00005BA9 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32786                                  	;mov	[bp-24],ds
 32787 00005BAC 8C5EE8                  	mov	ExecNameH,DS
 32788 00005BAF 89D6                    	mov	SI,DX			; move pointer to convenient place
 32789                                  	;invoke	DStrLen
 32790 00005BB1 E845B6                  	call	DStrLen
 32791                                  	;mov	[bp-22],cx
 32792 00005BB4 894EEA                  	mov	ExecNameLen,CX		; save length
 32793                                  
 32794                                  	; MSDOS 6.0
 32795 00005BB7 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32796 00005BBB 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32797                                  
 32798 00005BBF 30C0                    	xor	AL,AL			; open for reading
 32799 00005BC1 55                      	push	BP
 32800                                  
 32801                                  	; MSDOS 6.0
 32802                                  	;or	byte [ss:DOS_FLAG],1
 32803 00005BC2 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32804                                  					; the redir that this open call is
 32805                                  					; due to an exec.
 32806                                  
 32807                                  	;invoke	$OPEN			; is the file there?
 32808 00005BC8 E80513                  	call	_$OPEN
 32809                                  
 32810                                  	; MSDOS 6.0
 32811 00005BCB 9C                      	pushf
 32812                                  	; 02/06/2019
 32813                                  	;and	byte [ss:DOS_FLAG],0FEh
 32814 00005BCC 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32815 00005BD2 9D                      	popf
 32816                                  
 32817 00005BD3 5D                      	pop	BP
 32818                                  
 32819                                  	; MSDOS 3.3 & MSDOS 6.0
 32820 00005BD4 72AE                    	jc	short Exec_Ret_Err
 32821                                  
 32822                                  	;mov	[bp-8],ax
 32823 00005BD6 8946F8                  	mov	Exec_FH,AX
 32824 00005BD9 89C3                    	mov	BX,AX
 32825 00005BDB 30C0                    	xor	AL,AL
 32826                                  	;invoke	$Ioctl
 32827 00005BDD E88CC6                  	call	_$IOCTL
 32828 00005BE0 7207                    	jc	short Exec_BombJ
 32829                                  
 32830                                  	;test	dl,80h
 32831 00005BE2 F6C280                  	test	DL,devid_ISDEV
 32832 00005BE5 740A                    	jz	short Exec_Check_Environ
 32833                                  
 32834                                  	;mov	al,2
 32835 00005BE7 B002                    	mov	AL,error_file_not_found
 32836                                  Exec_BombJ:
 32837 00005BE9 E9CA00                  	jmp	Exec_Bomb
 32838                                  
 32839                                  BadEnv:
 32840                                  	;mov	al,0Ah
 32841 00005BEC B00A                    	mov	AL,error_bad_environment
 32842 00005BEE E9C500                  	jmp	Exec_Bomb
 32843                                  
 32844                                  Exec_Check_Environ:
 32845                                  	;mov	word [bp-18],0
 32846 00005BF1 C746EE0000              	mov	Exec_Load_Block,0
 32847                                  	;mov	word [bp-14],0
 32848 00005BF6 C746F20000              	mov	Exec_Environ,0
 32849                                  					; overlays... no environment
 32850                                  	;test	byte [bp-5],2
 32851 00005BFB F646FB02                	test	Exec_Func,exec_func_overlay
 32852 00005BFF 7552                    	jnz	short Exec_Read_Header
 32853                                  
 32854                                  	;lds	si,[bp-4]
 32855 00005C01 C576FC                  	lds	SI,Exec_Blk		; get block
 32856 00005C04 8B04                    	mov	ax,[SI]
 32857                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32858 00005C06 09C0                    	or	AX,AX
 32859 00005C08 750C                    	jnz	short Exec_Scan_Env
 32860                                  
 32861 00005C0A 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32862                                  	;mov	ax,[44]
 32863 00005C0F A12C00                  	mov	AX,[PDB.ENVIRON]
 32864                                  
 32865                                  ; MSDOS 6.0
 32866                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32867                                  ;
 32868                                  ; Exec_environ is being correctly initialized after the environment has been
 32869                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32870                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32871                                  ; parent's environment.
 32872                                  ;	mov	Exec_Environ,AX
 32873                                  ;
 32874                                  ;----------------------------------------------------------------------------
 32875                                  
 32876                                  	;mov	[bp-14],ax
 32877                                  	;mov	Exec_Environ,ax
 32878                                  
 32879 00005C12 09C0                    	or	AX,AX
 32880 00005C14 743D                    	jz	short Exec_Read_Header
 32881                                  
 32882                                  Exec_Scan_Env:
 32883 00005C16 8EC0                    	mov	ES,AX
 32884 00005C18 31FF                    	xor	DI,DI
 32885                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32886 00005C1A B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32887 00005C1D 30C0                    	xor	AL,AL
 32888                                  
 32889                                  Exec_Get_Environ_Len:
 32890 00005C1F F2AE                    	repnz	scasb			; find that nul byte
 32891 00005C21 75C9                    	jnz	short BadEnv
 32892                                  
 32893 00005C23 49                      	dec	CX			; Dec CX for the next nul byte test
 32894 00005C24 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32895                                  
 32896 00005C26 AE                      	scasb				; is there another nul byte?
 32897 00005C27 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32898                                  
 32899 00005C29 57                      	push	DI
 32900                                  	;lea	bx,[DI+11h]
 32901 00005C2A 8D5D11                  	lea	BX,[DI+0Fh+2]
 32902                                  	;add	bx,[bp-22]
 32903 00005C2D 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32904                                  					; remember argv[0] length
 32905                                  					; round up and remember argc
 32906 00005C30 B104                    	mov	CL,4
 32907 00005C32 D3EB                    	shr	BX,CL			; number of paragraphs needed
 32908 00005C34 06                      	push	ES
 32909                                  	;invoke	$Alloc			; can we get the space?
 32910 00005C35 E84406                  	call	_$ALLOC
 32911 00005C38 1F                      	pop	DS
 32912 00005C39 59                      	pop	CX
 32913                                  
 32914                                  	;jnc	short Exec_Save_Environ
 32915                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32916                                  	; 17/12/2022
 32917 00005C3A 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 32918                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32919                                  	;jnc	short Exec_Save_Environ
 32920                                  	;jmp	SHORT Exec_No_Mem
 32921                                  
 32922                                  Exec_Save_Environ:
 32923 00005C3C 8EC0                    	mov	ES,AX
 32924                                  	;mov	[bp-14],ax
 32925 00005C3E 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32926 00005C41 31F6                    	xor	SI,SI
 32927 00005C43 89F7                    	mov	DI,SI
 32928 00005C45 F3A4                    	rep	movsb			; copy the environment
 32929 00005C47 B80100                  	mov	AX,1
 32930 00005C4A AB                      	stosw
 32931                                  	;lds	si,[bp-26]
 32932 00005C4B C576E6                  	lds	SI,ExecName
 32933                                  	;mov	cx,[bp-22]
 32934 00005C4E 8B4EEA                  	mov	CX,ExecNameLen
 32935 00005C51 F3A4                    	rep	movsb
 32936                                  
 32937                                  Exec_Read_Header:
 32938                                  	; We read in the program header into the above data area and
 32939                                  	; determine where in this memory the image will be located.
 32940                                  
 32941                                  	;Context DS
 32942 00005C53 16                      	push	ss
 32943 00005C54 1F                      	pop	ds
 32944                                  	;mov	cx,26
 32945 00005C55 B91A00                  	mov	CX,exec_header_len	; header size
 32946 00005C58 BA[C80F]                	mov	DX,exec_signature
 32947 00005C5B 06                      	push	ES
 32948 00005C5C 1E                      	push	DS
 32949 00005C5D E88304                  	call	ExecRead
 32950 00005C60 1F                      	pop	DS
 32951 00005C61 07                      	pop	ES
 32952 00005C62 7250                    	jc	short Exec_Bad_File
 32953                                  
 32954 00005C64 09C0                    	or	AX,AX
 32955 00005C66 744C                    	jz	short Exec_Bad_File
 32956                                  	;cmp	ax,26
 32957 00005C68 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32958 00005C6B 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32959                                  
 32960 00005C6D F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32961 00005C73 7504                    	jnz	short Exec_Check_Sig
 32962                                  
 32963                                  	;mov	byte [bp-6],0FFh
 32964 00005C75 C646FAFF                	mov	Exec_Load_High,-1
 32965                                  
 32966                                  Exec_Check_Sig:
 32967 00005C79 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 32968                                  	;cmp	ax,5A4Dh ; 'MZ'
 32969 00005C7C 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32970 00005C7F 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32971                                  
 32972                                  	;cmp	ax,4D5Ah ; 'ZM'
 32973 00005C81 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32974 00005C84 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32975                                  
 32976                                  Exec_Com_Filej:
 32977 00005C86 E9E901                  	jmp	Exec_Com_File
 32978                                  
 32979                                  	; We have the program header... determine memory requirements
 32980                                  
 32981                                  Exec_Save_Start:
 32982 00005C89 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32983 00005C8C B105                    	mov	CL,5			; convert to paragraphs
 32984 00005C8E D3E0                    	shl	AX,CL
 32985 00005C90 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32986                                  	;mov	[bp-12],ax
 32987 00005C94 8946F4                  	mov	Exec_Res_Len_Para,AX
 32988                                  
 32989                                  		; Do we need to allocate memory?
 32990                                  		; Yes if function is not load-overlay
 32991                                  
 32992                                  	;test	byte [bp-5],2
 32993 00005C97 F646FB02                	test	Exec_Func,exec_func_overlay
 32994 00005C9B 7445                    	jz	short Exec_Allocate	; allocation of space
 32995                                  
 32996                                  		; get load address from block
 32997                                  
 32998                                  	;les	di,[bp-4]
 32999 00005C9D C47EFC                  	les	DI,Exec_Blk
 33000 00005CA0 268B05                  	mov	ax,[es:di]
 33001                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33002                                  	;mov	[bp-20],ax
 33003 00005CA3 8946EC                  	mov	Exec_DMA,AX
 33004                                  
 33005                                  	; 17/12/2022
 33006                                  	;;mov	ax,[es:di+2]
 33007                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33008                                  	;;mov	[bp-10],ax
 33009                                  	;mov	Exec_Rel_Fac,AX
 33010                                  
 33011                                  	; 17/12/2022
 33012                                  	; 30/11/2022 (!most proper code!)
 33013                                  	;mov	dx,[es:di+2]
 33014 00005CA6 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33015                                  	;mov	[bp-10],dx
 33016 00005CAA 8956F6                  	mov	Exec_Rel_Fac,dx
 33017                                  	; ax = Exec_DMA
 33018 00005CAD E9DE00                  	jmp	Exec_Find_Res
 33019                                  
 33020                                  ; 17/12/2022
 33021                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33022                                  ; 27/09/2023
 33023                                  %if 0
 33024                                  	; 02/06/2019 - Retro DOS v4.0
 33025                                  	;mov	ax,[bp-20]  ; *+*
 33026                                  	mov	AX,Exec_DMA ; *+*
 33027                                  	; 10/08/2018
 33028                                  	jmp	Exec_Find_Res		; M000
 33029                                  %endif
 33030                                  
 33031                                  Exec_No_Mem:
 33032                                  	;mov	al,8
 33033 00005CB0 B008                    	mov	AL,error_not_enough_memory
 33034 00005CB2 EB02                    	jmp	short Exec_Bomb
 33035                                  
 33036                                  Exec_Bad_File:
 33037                                  	;mov	al,0Bh
 33038 00005CB4 B00B                    	mov	AL,error_bad_format
 33039                                  
 33040                                  Exec_Bomb:
 33041                                  	;mov	bx,[bp-8]
 33042 00005CB6 8B5EF8                  	mov	BX,Exec_FH
 33043 00005CB9 E84004                  	call	Exec_Dealloc
 33044                                  	;LeaveCrit CritMem
 33045 00005CBC E869B6                  	call	LCritMEM
 33046                                  	;save	<AX,BP>
 33047 00005CBF 50                      	push	ax
 33048 00005CC0 55                      	push	bp
 33049                                  	;invoke	$CLOSE
 33050 00005CC1 E83D0A                  	call	_$CLOSE
 33051                                  	;restore <BP,AX>
 33052 00005CC4 5D                      	pop	bp
 33053 00005CC5 58                      	pop	ax
 33054 00005CC6 E9BBFE                  	jmp	Exec_Ret_Err
 33055                                  
 33056                                  Exec_Chk_Mem: 
 33057                                  
 33058                                  	; 24/09/2023
 33059                                  	; ds = DOSDATA
 33060                                  ; 17/12/2022
 33061                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33062                                  ;%if 0
 33063                                  	; MSDOS 6.0    			; M063 - Start
 33064                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33065                                  	; 10/06/2019
 33066 00005CC9 A0[0203]                	mov	al,[AllocMethod]
 33067                                  	;mov	bl,[ss:ALLOCMSAVE]
 33068 00005CCC 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33069                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33070 00005CD0 881E[0203]              	mov	[AllocMethod],bl
 33071                                  	
 33072 00005CD4 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33073 00005CD7 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33074                                  	;				; N: continue
 33075                                  	;
 33076 00005CD9 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33077 00005CDB 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 33078                                  	; 02/06/2019
 33079                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33080 00005CDD A1[8A00]                	mov	ax,[SAVE_AX]
 33081                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33082                                  					; M063 - End
 33083 00005CE0 EB2B                    	jmp	short Exec_Norm_Alloc1
 33084                                  ;%endif
 33085                                  
 33086                                  ; 17/12/2022
 33087                                  %if 0
 33088                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33089                                  	; MSDOS 6.0    			; M063 - Start
 33090                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33091                                  	mov	bl,[ss:ALLOCMSAVE]
 33092                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33093                                  
 33094                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33095                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33096                                  	;				; N: continue
 33097                                  	;
 33098                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33099                                  	jz	short Exec_No_Mem	; N: no memory 
 33100                                  
 33101                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33102                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33103                                  					; M063 - End
 33104                                  %endif
 33105                                  
 33106                                  Exec_Allocate:
 33107                                  	; 09/09/2018
 33108                                  
 33109                                  	; M005 - START
 33110                                  	; If there is no STACK segment for this exe file and if this
 33111                                  	; not an overlay and the resident size is less than 64K - 
 33112                                  	; 256 bytes we shall add 256 bytes to the programs 
 33113                                  	; resident memory requirement and set Exec_SP to this value.
 33114                                  	
 33115                                  	; 17/12/2022
 33116 00005CE2 29DB                    	sub	bx,bx ; 0	
 33117                                  
 33118                                  	; MSDOS 6.0
 33119                                  	;;mov	byte [bp-29],0
 33120                                  	;mov	Exec_NoStack,0
 33121                                  	; 17/12/2022
 33122 00005CE4 885EE3                  	mov	Exec_NoStack,bl ; 0
 33123 00005CE7 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33124                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33125 00005CEB 7511                    	jne	short ea1		; Y: continue normal processing
 33126 00005CED 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33127                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33128 00005CF1 750B                    	jne	short ea1		; Y: continue normal processing
 33129                                  
 33130                                  	;inc	byte [bp-29]
 33131 00005CF3 FE46E3                  	inc	Exec_NoStack
 33132 00005CF6 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33133 00005CF9 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33134                                  
 33135 00005CFB 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33136                                  ea1:
 33137                                  	; M005 - END
 33138                                  
 33139                                  	; MSDOS 6.0			; M000 - start
 33140                                  	; 20/05/2019
 33141                                  	; (ds = ss = DOSDATA)
 33142 00005CFE F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33143                                  					; Q: is the alloc strat high_first
 33144 00005D03 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33145                                  					; Y: set high_only bit
 33146 00005D05 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33147                                  					; M000 - end
 33148                                  Exec_Norm_Alloc:
 33149 00005D0A A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 33150                                  Exec_Norm_Alloc1:	; 02/06/2019
 33151                                  					; M000: attempt at allocating memory
 33152                                  	; MSDOS 3.3
 33153                                  	;push	ax			; M000
 33154                                  
 33155 00005D0D BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33156 00005D10 1E                      	push	DS
 33157                                  	;invoke	$Alloc			; should have carry set and BX has max
 33158 00005D11 E86805                  	call	_$ALLOC
 33159 00005D14 1F                      	pop	DS
 33160                                  
 33161                                  	; MSDOS 6.0
 33162 00005D15 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33163                                  	; MSDOS 3.3
 33164                                  	;pop	ax			; M000
 33165                                  
 33166 00005D18 83C010                  	add	AX,10h			; room for header
 33167 00005D1B 83FB11                  	cmp	BX,11h			; enough room for a header
 33168                                  	; MSDOS 6.0
 33169 00005D1E 72A9                    	jb	short Exec_Chk_Mem	; M000
 33170                                  	; MSDOS 3.3	
 33171                                  	;jb	short Exec_No_Mem
 33172                                  
 33173 00005D20 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33174                                  	; MSDOS 6.0
 33175 00005D22 77A5                    	ja	short Exec_Chk_Mem	; M000
 33176                                  	; MSDOS 3.3
 33177                                  	;ja	short Exec_No_Mem
 33178                                  
 33179                                  	;test	byte [bp-6],0FFh
 33180 00005D24 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33181 00005D28 7518                    	jnz	short Exec_BX_Max	; use max
 33182                                  
 33183                                  	; 09/09/2018
 33184                                  
 33185 00005D2A 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33186                                  	; MSDOS 6.0
 33187 00005D2E 7299                    	jc	short Exec_Chk_Mem		; M000
 33188                                  	; MSDOS 3.3
 33189                                  	;jc	short Exec_No_Mem
 33190                                  
 33191 00005D30 39D8                    	cmp	AX,BX			; enough space?
 33192                                  	; MSDOS 6.0
 33193 00005D32 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 33194                                  	; MSDOS 3.3
 33195                                  	;ja	short Exec_No_Mem
 33196                                  
 33197 00005D34 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 33198 00005D38 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 33199 00005D3C 7204                    	jc	short Exec_BX_Max
 33200                                  
 33201 00005D3E 39D8                    	cmp	AX,BX
 33202 00005D40 7602                    	jbe	short Exec_Got_Block
 33203                                  
 33204                                  Exec_BX_Max:
 33205 00005D42 89D8                    	mov	AX,BX
 33206                                  
 33207                                  Exec_Got_Block:
 33208                                  	; 03/08/2018 - Retro DOS v3.0
 33209                                  
 33210 00005D44 1E                      	push	DS
 33211 00005D45 89C3                    	mov	BX,AX
 33212                                  	;mov	[bp-16],bx
 33213 00005D47 895EF0                  	mov	Exec_Size,BX
 33214                                  	;invoke	$Alloc			; get the space
 33215 00005D4A E82F05                  	call	_$ALLOC
 33216 00005D4D 1F                      	pop	DS
 33217                                  	; MSDOS 6.0
 33218                                  	;jc	short Exec_Chk_Mem	; M000
 33219                                  	; MSDOS 3.3
 33220                                  	;;jc	short Exec_No_Mem
 33221                                  	; 20/05/2019
 33222 00005D4E 7303                    	jnc	short ea0
 33223 00005D50 E976FF                  	jmp	Exec_Chk_Mem
 33224                                  ea0:
 33225                                  	; MSDOS 6.0
 33226 00005D53 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 33227 00005D57 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 33228                                  
 33229                                  ;M029; Begin changes
 33230                                  ; This code does special handling for programs with no stack segment. If so,
 33231                                  ;check if the current block is larger than 64K. If so, we do not modify
 33232                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 33233                                  ;case Exec_SS is not changed.
 33234                                  
 33235                                  	; MSDOS 6.0
 33236                                  	;cmp	byte [bp-29],0
 33237 00005D5B 807EE300                	cmp	Exec_NoStack,0
 33238                                  	;je	@f
 33239 00005D5F 7412                    	je	short ea2
 33240                                  
 33241 00005D61 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 33242                                  	;jae	@f			; Y: Exec_SP = 0
 33243 00005D65 730C                    	jae	short ea2
 33244                                  
 33245                                  ;Make Exec_SP point at the top of the memory block
 33246                                  
 33247 00005D67 B104                    	mov	cl,4
 33248 00005D69 D3E3                    	shl	bx,cl			; get byte offset
 33249 00005D6B 81EB0001                	sub	bx,100h			; take care of PSP
 33250 00005D6F 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 33251                                  ea2:
 33252                                  ;@@:
 33253                                  ;M029; end changes
 33254                                  
 33255                                  	;mov	[bp-18],ax
 33256 00005D73 8946EE                  	mov	Exec_Load_Block,AX
 33257 00005D76 83C010                  	add	AX,10h
 33258                                  	;test	byte [bp-6],0FFh
 33259 00005D79 F646FAFF                	test	Exec_Load_High,-1
 33260 00005D7D 7409                    	jz	short Exec_Use_AX	; use ax for load info
 33261                                  
 33262                                  	;add	ax,[bp-16]
 33263 00005D7F 0346F0                  	add	AX,Exec_Size		; go to end
 33264                                  	;sub	ax,[bp-12]
 33265 00005D82 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 33266 00005D85 83E810                  	sub	AX,10h			; drop off pdb
 33267                                  
 33268                                  Exec_Use_AX:
 33269                                  	;mov	[bp-10],ax
 33270 00005D88 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 33271                                  	;mov	[bp-20],ax
 33272 00005D8B 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 33273                                  
 33274                                  	; Determine the location in the file of the beginning of
 33275                                  	; the resident
 33276                                  
 33277                                  ; 17/12/2022
 33278                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33279                                  ;%if 0
 33280                                  
 33281                                  Exec_Find_Res:
 33282                                  	; MSDOS 6.0
 33283                                  	;;mov	dx,[bp-20]
 33284                                  	;mov	DX,Exec_DMA ; *+*
 33285                                  	;;mov	[bp-28],dx
 33286                                  	;mov	Exec_DMA_Save,DX
 33287                                  
 33288                                  	; 17/12/2022
 33289                                  	; AX = Exec_DMA
 33290                                  
 33291                                  	; 02/06/2019 - Retro DOS v4.0
 33292                                  	;mov	[bp-28],ax ; *+*
 33293 00005D8E 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 33294                                  
 33295                                  ;%endif
 33296                                  
 33297                                  ; 17/12/2022
 33298                                  %if 0
 33299                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33300                                  Exec_Find_Res:
 33301                                  	;mov	dx,[bp-20]
 33302                                  	mov	DX,Exec_DMA ; *+*
 33303                                  	;mov	[bp-28],dx
 33304                                  	mov	Exec_DMA_Save,DX
 33305                                  %endif
 33306                                  
 33307                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33308 00005D91 8B16[D00F]              	mov	DX,[exec_par_dir]
 33309 00005D95 52                      	push	DX
 33310 00005D96 B104                    	mov	CL,4
 33311 00005D98 D3E2                    	shl	DX,CL			; low word of location
 33312 00005D9A 58                      	pop	AX
 33313 00005D9B B10C                    	mov	CL,12
 33314 00005D9D D3E8                    	shr	AX,CL			; high word of location
 33315 00005D9F 89C1                    	mov	CX,AX			; CX <- high
 33316                                  
 33317                                  		; Read in the resident image (first, seek to it)
 33318                                  	;mov	bx,[bp-8]
 33319 00005DA1 8B5EF8                  	mov	BX,Exec_FH
 33320 00005DA4 1E                      	push	DS
 33321 00005DA5 30C0                    	xor	AL,AL
 33322                                  	;invoke	$Lseek			; Seek to resident
 33323 00005DA7 E8D30A                  	call	_$LSEEK
 33324 00005DAA 1F                      	pop	DS
 33325 00005DAB 7303                    	jnc	short Exec_Big_Read
 33326                                  
 33327 00005DAD E906FF                  	jmp	Exec_Bomb
 33328                                  
 33329                                  Exec_Big_Read:				; Read resident into memory
 33330                                  	;mov	bx,[bp-12]
 33331 00005DB0 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 33332 00005DB3 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 33333 00005DB7 7203                    	jb	short Exec_Read_OK
 33334                                  
 33335 00005DB9 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 33336                                  
 33337                                  Exec_Read_OK:
 33338                                  	;sub	[bp-12],bx
 33339 00005DBC 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 33340 00005DBF 53                      	push	BX
 33341 00005DC0 B104                    	mov	CL,4
 33342 00005DC2 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 33343 00005DC4 89D9                    	mov	CX,BX			; Count in correct register
 33344 00005DC6 1E                      	push	DS
 33345                                  	;mov	ds,[bp-20]
 33346 00005DC7 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 33347                                  
 33348 00005DCA 31D2                    	xor	DX,DX
 33349 00005DCC 51                      	push	CX			; Save our count
 33350 00005DCD E81303                  	call	ExecRead
 33351 00005DD0 59                      	pop	CX			; Get old count to verify
 33352 00005DD1 1F                      	pop	DS
 33353 00005DD2 7248                    	jc	short Exec_Bad_FileJ
 33354                                  
 33355 00005DD4 39C1                    	cmp	CX,AX			; Did we read enough?
 33356 00005DD6 5B                      	pop	BX			; Get paragraph count back
 33357 00005DD7 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 33358                                  
 33359                                  	; The read did not match the request. If we are off by 512
 33360                                  	; bytes or more then the header lied and we have an error.
 33361                                  
 33362 00005DD9 29C1                    	sub	CX,AX
 33363 00005DDB 81F90002                	cmp	CX,512
 33364 00005DDF 733B                    	jae	short Exec_Bad_FileJ
 33365                                  
 33366                                  	; We've read in CX bytes... bump DTA location
 33367                                  
 33368                                  ExecCheckEnd:
 33369                                  	;add	[bp-20],bx
 33370 00005DE1 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 33371                                  	;test	word [bp-12],0FFFFh
 33372 00005DE4 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 33373 00005DE9 75C5                    	jnz	short Exec_Big_Read
 33374                                  
 33375                                  	; The image has now been read in. We must perform relocation
 33376                                  	; to the current location.
 33377                                  
 33378                                  exec_do_reloc:
 33379                                  	;mov	cx,[bp-10]
 33380 00005DEB 8B4EF6                  	mov	CX,Exec_Rel_Fac
 33381 00005DEE A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 33382 00005DF1 01C8                    	add	AX,CX			; and relocate him
 33383 00005DF3 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 33384                                  
 33385 00005DF6 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 33386 00005DF9 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 33387                                  
 33388 00005DFC C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 33389 00005E00 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 33390 00005E03 8CC0                    	mov	AX,ES			; rms;NSS
 33391 00005E05 01C8                    	add	AX,CX			; relocated...
 33392 00005E07 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 33393                                  
 33394 00005E0A 31C9                    	xor	CX,CX
 33395 00005E0C 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 33396                                  	;mov	bx,[bp-8]
 33397 00005E10 8B5EF8                  	mov	BX,Exec_FH
 33398 00005E13 1E                      	push	DS
 33399 00005E14 31C0                    	xor	AX,AX
 33400                                  	;invoke	$Lseek
 33401 00005E16 E8640A                  	call	_$LSEEK
 33402 00005E19 1F                      	pop	DS
 33403 00005E1A 7303                    	jnc	short exec_get_entries
 33404                                  
 33405                                  Exec_Bad_FileJ:
 33406 00005E1C E995FE                  	jmp	Exec_Bad_File
 33407                                  
 33408                                  exec_get_entries:
 33409 00005E1F 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 33410                                  
 33411                                  exec_read_reloc:
 33412 00005E23 52                      	push	DX
 33413                                  	;mov	dx,OPENBUF
 33414 00005E24 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 33415                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 33416                                  	;mov	cx,396 ; MSDOS 6.0
 33417 00005E27 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 33418 00005E2A 1E                      	push	DS
 33419 00005E2B E8B502                  	call	ExecRead
 33420 00005E2E 07                      	pop	ES
 33421 00005E2F 5A                      	pop	DX
 33422 00005E30 72EA                    	jc	short Exec_Bad_FileJ
 33423                                  
 33424                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33425                                  	;mov	cx,99 ;  MSDOS 6.0
 33426 00005E32 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33427                                  					; Pointer to byte location in header
 33428                                  	;mov	di,OPENBUF
 33429 00005E35 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33430                                  	;mov	si,[bp-10]
 33431 00005E38 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33432                                  
 33433                                  exec_reloc_one:
 33434 00005E3B 09D2                    	or	DX,DX			; Any more entries?
 33435 00005E3D 7416                    	jz	short Exec_Set_PDBJ
 33436                                  
 33437                                  exec_get_addr:
 33438 00005E3F 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33439 00005E42 8CD8                    	mov	AX,DS			; Relocate address of item
 33440                                  
 33441                                  	; MSDOS 6.0
 33442                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33443                                  	;add	ax,[bp-28]
 33444 00005E44 0346E4                  	add	AX,Exec_DMA_Save
 33445                                  
 33446 00005E47 8ED8                    	mov	DS,AX
 33447 00005E49 0137                    	add	[BX],SI
 33448 00005E4B 83C704                  	add	DI,4
 33449 00005E4E 4A                      	dec	DX
 33450 00005E4F E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33451                                  
 33452                                  	; We've exhausted a single buffer's worth. Read in the next
 33453                                  	; piece of the relocation table.
 33454                                  
 33455 00005E51 06                      	push	ES
 33456 00005E52 1F                      	pop	DS
 33457 00005E53 EBCE                    	jmp	short exec_read_reloc
 33458                                  
 33459                                  Exec_Set_PDBJ:
 33460                                  	; MSDOS 6.0
 33461                                  	
 33462                                  	; We now determine if this is a buggy exe packed file and if 
 33463                                  	; so we patch in the right code. Note that fixexepatch will
 33464                                  	; point to a ret if dos loads low. The load segment as 
 33465                                  	; determined above will be in exec_dma_save
 33466                                  	
 33467 00005E55 06                      	push	es
 33468 00005E56 50                      	push	ax			; M030
 33469 00005E57 51                      	push	cx			; M030
 33470                                  	;mov	es,[bp-28]
 33471 00005E58 8E46E4                  	mov	es,Exec_DMA_Save
 33472 00005E5B 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 33473 00005E5F 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 33474 00005E64 36FF16[F311]            	call	word [ss:FixExePatch]
 33475                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33476                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 33477                                  	;call	word [ss:Rational386PatchPtr]
 33478 00005E69 59                      	pop	cx			; M030
 33479 00005E6A 58                      	pop	ax			; M030
 33480 00005E6B 07                      	pop	es
 33481                                  
 33482 00005E6C E9DE00                  	jmp	Exec_Set_PDB
 33483                                  
 33484                                  Exec_No_Memj:
 33485 00005E6F E93EFE                  	jmp	Exec_No_Mem
 33486                                  
 33487                                  	; we have a .COM file. First, determine if we are merely
 33488                                  	; loading an overlay.
 33489                                  
 33490                                  Exec_Com_File:
 33491                                  	;test	byte [bp-5],2
 33492 00005E72 F646FB02                	test	Exec_Func,exec_func_overlay
 33493 00005E76 742D                    	jz	short Exec_Alloc_Com_File
 33494                                  	;lds	si,[bp-4]
 33495 00005E78 C576FC                  	lds	SI,Exec_Blk		; get arg block
 33496 00005E7B AD                      	lodsw				; get load address
 33497                                  	;mov	[bp-20],ax
 33498 00005E7C 8946EC                  	mov	Exec_DMA,AX
 33499 00005E7F B8FFFF                  	mov	AX,0FFFFh
 33500 00005E82 EB63                    	jmp	short Exec_Read_Block	; read it all!
 33501                                  
 33502                                  Exec_Chk_Com_Mem:			
 33503                                  	; MSDOS 6.0	     		; M063 - Start
 33504 00005E84 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33505 00005E88 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 33506 00005E8D 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33507 00005E92 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33508 00005E95 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 33509                                  					; N: continue
 33510                                  	
 33511 00005E97 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33512 00005E99 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 33513                                  	
 33514                                  	;mov	ax,[bp-18]
 33515 00005E9B 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 33516 00005E9E 31DB                    	xor	bx,bx			; M047: bx => free arena
 33517 00005EA0 E87502                  	call	ChangeOwner		; M047: free this block
 33518                                  	
 33519 00005EA3 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33520                                  					; M063 - End
 33521                                  	
 33522                                  	; We must allocate the max possible size block (ick!)
 33523                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33524                                  	; size of block.
 33525                                  
 33526                                  Exec_Alloc_Com_File:
 33527                                  	; MSDOS 6.0			; M000 -start
 33528 00005EA5 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33529                                  					; Q: is the alloc strat high_first
 33530 00005EAB 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33531                                  					; Y: set high_only bit
 33532 00005EAD 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33533                                  					; M000 - end
 33534                                  Exec_Norm_Com_Alloc:			; M000
 33535                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33536 00005EB3 BBFFFF                  	mov	BX,0FFFFh
 33537                                  	;invoke	$Alloc			; largest piece available as error
 33538 00005EB6 E8C303                  	call	_$ALLOC
 33539 00005EB9 09DB                    	or	BX,BX
 33540                                  	; MSDOS 6.0
 33541 00005EBB 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33542                                  	; MSDOS 3.3
 33543                                  	;jz	short Exec_No_Memj
 33544                                  
 33545                                  	;mov	[bp-16],bx
 33546 00005EBD 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33547 00005EC0 53                      	push	BX
 33548                                  	;invoke	$ALLOC			; largest piece available
 33549 00005EC1 E8B803                  	call	_$ALLOC
 33550 00005EC4 5B                      	pop	BX			; get size of block...
 33551                                  	;mov	[bp-18],ax
 33552 00005EC5 8946EE                  	mov	Exec_Load_Block,AX
 33553                                  
 33554 00005EC8 83C010                  	add	AX,10h			; increment for header
 33555                                  	;mov	[bp-20],ax
 33556 00005ECB 8946EC                  	mov	Exec_DMA,AX
 33557                                  
 33558 00005ECE 31C0                    	xor	AX,AX			; presume 64K read...
 33559 00005ED0 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33560 00005ED4 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33561                                  
 33562 00005ED6 89D8                    	mov	AX,BX			; convert size to bytes
 33563 00005ED8 B104                    	mov	CL,4
 33564 00005EDA D3E0                    	shl	AX,CL
 33565                                  	; 17/12/2022
 33566                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33567                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33568                                  	; MSDOS 5.0
 33569                                  	;cmp	AX,100h   
 33570                                  	; 02/06/2019 - Retro DOS v4.0
 33571                                  	; MSDOS 6.0
 33572                                          ; 17/12/2022
 33573 00005EDC 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33574 00005EDF 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33575                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33576                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33577                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33578                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33579                                  
 33580                                  					; M047: size of the block is < 64K
 33581 00005EE1 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33582                                  
 33583                                  Exec_Read_Com:
 33584                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33585 00005EE4 2D0001                  	sub	AX,100h 		; remember size of psp
 33586                                  Exec_Read_Block:
 33587 00005EE7 50                      	push	AX			; save number to read
 33588                                  	;mov	bx,[bp-8]
 33589 00005EE8 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33590 00005EEB 31C9                    	xor	CX,CX			; but seek to 0:0
 33591 00005EED 89CA                    	mov	DX,CX
 33592 00005EEF 31C0                    	xor	AX,AX			; seek relative to beginning
 33593                                  	;invoke	$Lseek			; back to beginning of file
 33594 00005EF1 E88909                  	call	_$LSEEK
 33595 00005EF4 59                      	pop	CX			; number to read
 33596                                  	;mov	ds,[bp-20]
 33597 00005EF5 8E5EEC                  	mov	DS,Exec_DMA
 33598 00005EF8 31D2                    	xor	DX,DX
 33599 00005EFA 51                      	push	CX
 33600 00005EFB E8E501                  	call	ExecRead
 33601 00005EFE 5E                      	pop	SI			; get number of bytes to read
 33602 00005EFF 7303                    	jnc	short OkRead
 33603 00005F01 E9B0FD                  	jmp	Exec_Bad_File
 33604                                  
 33605                                  	; 10/09/2018
 33606                                  OkRead:
 33607 00005F04 39F0                    	cmp	AX,SI			; did we read them all?
 33608                                  	; MSDOS 6.0
 33609                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33610                                  	; MSDOS 3.3
 33611                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33612 00005F06 7503                    	jne	short OkRead2
 33613 00005F08 E979FF                  	jmp	Exec_Chk_Com_Mem
 33614                                  OkRead2:
 33615                                  	; MSDOS 6.0
 33616 00005F0B 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33617 00005F10 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33618                                  
 33619                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33620                                  	;test	byte [bp-5],2
 33621 00005F15 F646FB02                	test	Exec_Func,exec_func_overlay
 33622 00005F19 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33623                                  
 33624                                  	;mov	ax,[bp-20]
 33625 00005F1B 8B46EC                  	mov	AX,Exec_DMA
 33626 00005F1E 83E810                  	sub	AX,10h
 33627 00005F21 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 33628 00005F25 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33629                                  
 33630                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33631                                  	; of 0 on stack.
 33632                                  
 33633 00005F2C 81C6FE00                	add	SI,0FEh 		; make room for stack
 33634                                  
 33635                                  	; MSDOS 6.0
 33636 00005F30 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33637 00005F33 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33638 00005F35 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33639                                  
 33640                                  Exec_St_Ok:
 33641                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33642 00005F39 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33643 00005F3E 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33644 00005F42 8ED8                    	mov	DS,AX
 33645 00005F44 C7040000                	mov	WORD [SI],0		; 0 for return
 33646                                  
 33647                                  	; MSDOS 6.0
 33648                                  
 33649                                  	; M068
 33650                                  	;
 33651                                  	; We now determine if this is a Copy Protected App. If so the 
 33652                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33653                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33654                                  
 33655 00005F48 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33656                                  
 33657                                  Exec_Set_PDB:
 33658                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33659                                  	;mov	bx,[bp-8]
 33660 00005F4D 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33661 00005F50 E8A901                  	call	Exec_Dealloc
 33662 00005F53 55                      	push	BP
 33663                                  	;invoke	$Close			; release the jfn
 33664 00005F54 E8AA07                  	call	_$CLOSE
 33665 00005F57 5D                      	pop	BP
 33666 00005F58 E89301                  	call	Exec_Alloc
 33667                                  	;test	byte [bp-5],2
 33668 00005F5B F646FB02                	test	Exec_Func,exec_func_overlay
 33669 00005F5F 743A                    	jz	short Exec_Build_Header
 33670                                  
 33671                                  	; MSDOS 6.0
 33672 00005F61 E8C201                  	call	Scan_Execname
 33673 00005F64 E8D601                  	call	Scan_Special_Entries
 33674                                  ;SR;
 33675                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33676                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33677                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33678                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33679                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33680                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33681                                  ;issues the version check, it gets the lie version until the next overlay
 33682                                  ;call is issued.
 33683                                  
 33684 00005F67 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33685 00005F6D 7426                    	je	short norm_ovl		;yes, no special handling
 33686 00005F6F 56                      	push	si
 33687 00005F70 06                      	push	es
 33688 00005F71 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33689                                  	 
 33690                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33691 00005F76 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33692 00005F7A 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33693                                  	
 33694 00005F7C 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33695 00005F81 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 33696 00005F86 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33697                                  		;;; PDB.VERSION
 33698 00005F8B EB06                    	jmp	short setver_done
 33699                                  sysinit_done:
 33700 00005F8D 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33701                                  setver_done:
 33702 00005F93 07                      	pop	es
 33703 00005F94 5E                      	pop	si
 33704                                  norm_ovl:
 33705                                  	;leave
 33706 00005F95 89EC                    	mov	sp,bp		
 33707 00005F97 5D                      	pop	bp
 33708                                  
 33709                                  	;transfer SYS_RET_OK		; overlay load -> done
 33710 00005F98 E99CA6                  	jmp	SYS_RET_OK
 33711                                  
 33712                                  Exec_Build_Header:
 33713                                  	;mov	dx,[bp-18]
 33714 00005F9B 8B56EE                  	mov	DX,Exec_Load_Block
 33715                                  					; assign the space to the process
 33716                                  	;mov	si,1
 33717 00005F9E BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33718                                  	;mov	ax,[bp-14]
 33719 00005FA1 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33720 00005FA4 09C0                    	or	AX,AX
 33721 00005FA6 7405                    	jz	short No_Owner		; no environment
 33722                                  
 33723 00005FA8 48                      	dec	AX			; point to header
 33724 00005FA9 8ED8                    	mov	DS,AX
 33725 00005FAB 8914                    	mov	[SI],DX 		; assign ownership
 33726                                  No_Owner:
 33727                                  	;mov	ax,[bp-18]
 33728                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33729                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33730                                  	; 17/12/2022
 33731 00005FAD 89D0                    	mov	ax,dx ; 06/06/2019
 33732                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33733                                  	
 33734 00005FAF 48                      	dec	AX
 33735 00005FB0 8ED8                    	mov	DS,AX			; point to header
 33736 00005FB2 8914                    	mov	[SI],DX 		; assign ownership
 33737                                  
 33738                                  	; MSDOS 6.0
 33739 00005FB4 1E                      	push	DS			;AN000;MS. make ES=DS
 33740 00005FB5 07                      	pop	ES			;AN000;MS.
 33741                                  	;mov	di,8
 33742 00005FB6 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33743 00005FB9 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33744                                  					;	   ds:si->name, cx=name length
 33745 00005FBC 51                      	push	CX			;AN007;;MS. save for fake version
 33746 00005FBD 56                      	push	SI			;AN007;;MS. save for fake version
 33747                                  
 33748                                  MoveName:				;AN000;
 33749 00005FBE AC                      	lodsb				;AN000;;MS. get char
 33750 00005FBF 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33751 00005FC1 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33752                                  					;AN000;
 33753 00005FC3 AA                      	stosb				;AN000;;MS. move char
 33754                                  					; MSKK bug fix - limit length copied
 33755 00005FC4 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33756 00005FC7 7302                    	jae	short Mem_Done		; jump if so
 33757                                  	;
 33758 00005FC9 E2F3                    	loop	MoveName		;AN000;;MS. continue
 33759                                  Mem_Done:				;AN000;
 33760 00005FCB 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33761                                  	;cmp	di,16
 33762 00005FCD 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33763 00005FD0 7301                    	jae	short Fill8		;AN000;MS.
 33764                                  	
 33765 00005FD2 AA                      	stosb				;AN000;MS.
 33766                                  	
 33767                                  Fill8:					;AN000;
 33768 00005FD3 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33769 00005FD4 59                      	pop	CX			;AN007;MS.
 33770                                  	
 33771 00005FD5 E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33772                                  
 33773                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33774 00005FD8 52                      	push	DX
 33775                                  	;mov	si,[bp-16]
 33776 00005FD9 8B76F0                  	mov	SI,Exec_Size
 33777 00005FDC 01D6                    	add	SI,DX
 33778                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33779 00005FDE E8B6B0                  	call	_$DUP_PDB
 33780 00005FE1 5A                      	pop	DX
 33781                                  
 33782                                  	;push	word [bp-14]
 33783 00005FE2 FF76F2                  	push	Exec_Environ
 33784                                  	;pop	WORD [ES:2Ch]
 33785 00005FE5 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33786                                  
 33787                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33788                                  					; version number in PSP
 33789 00005FEA 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33790 00005FEF 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33791                                  		; PDB.VERSION
 33792                                  
 33793                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33794                                  	;lds	si,[bp-4]
 33795 00005FF4 C576FC                  	lds	SI,Exec_Blk		; get the block
 33796 00005FF7 1E                      	push	DS			; save its location
 33797 00005FF8 56                      	push	SI
 33798                                  	;lds	si,[si+6]
 33799 00005FF9 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33800                                  
 33801                                  	; DS points to user space 5C FCB
 33802                                  
 33803 00005FFC B90C00                  	mov	CX,12			; copy drive, name and ext
 33804 00005FFF 51                      	push	CX
 33805 00006000 BF5C00                  	mov	DI,5Ch
 33806 00006003 8A1C                    	mov	BL,[SI]
 33807 00006005 F3A4                    	rep	movsb
 33808                                  
 33809                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33810                                  
 33811 00006007 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33812 00006009 AB                      	stosw
 33813 0000600A AB                      	stosw
 33814                                  
 33815                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33816                                  
 33817 0000600B 59                      	pop	CX
 33818 0000600C 5E                      	pop	SI			; get block
 33819 0000600D 1F                      	pop	DS
 33820 0000600E 1E                      	push	DS			; save (again)
 33821 0000600F 56                      	push	SI
 33822                                  	;lds	si,[si+0Ah]
 33823 00006010 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33824                                  
 33825                                  	; DS points to user space 6C FCB
 33826                                  
 33827 00006013 8A3C                    	mov	BH,[SI] 		; do same as above
 33828 00006015 F3A4                    	rep	movsb
 33829 00006017 AB                      	stosw
 33830 00006018 AB                      	stosw
 33831 00006019 5E                      	pop	SI			; get block (last time)
 33832 0000601A 1F                      	pop	DS
 33833                                  	;ld	si,[si+2]
 33834 0000601B C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33835                                  
 33836                                  	; DS points to user space 80 command line
 33837                                  
 33838 0000601E 80C980                  	or	CL,80h
 33839 00006021 89CF                    	mov	DI,CX
 33840 00006023 F3A4                    	rep	movsb			; Wham!
 33841                                  
 33842                                  	; Process BX into default AX (validity of drive specs on args).
 33843                                  	; We no longer care about DS:SI.
 33844                                  
 33845 00006025 FEC9                    	dec	CL			; get 0FFh in CL
 33846 00006027 88F8                    	mov	AL,BH
 33847 00006029 30FF                    	xor	BH,BH
 33848                                  	;invoke	GetVisDrv
 33849 0000602B E8400A                  	call	GetVisDrv
 33850 0000602E 7302                    	jnc	short Exec_BL
 33851                                  
 33852 00006030 88CF                    	mov	BH,CL
 33853                                  
 33854                                  Exec_BL:
 33855 00006032 88D8                    	mov	AL,BL
 33856 00006034 30DB                    	xor	BL,BL
 33857                                  	;invoke	GetVisDrv
 33858 00006036 E8350A                  	call	GetVisDrv
 33859 00006039 7302                    	jnc	short Exec_Set_Return
 33860                                  
 33861 0000603B 88CB                    	mov	BL,CL
 33862                                  
 33863                                  Exec_Set_Return:
 33864                                  	;invoke	Get_User_Stack			; get his return address
 33865 0000603D E841A4                  	call	Get_User_Stack
 33866                                  
 33867                                  	;push	word [si+14h]
 33868 00006040 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33869                                  	;push	word [si+12h]
 33870 00006043 FF7412                  	push	word [SI+user_env.user_IP]
 33871                                  	;push	word [si+14h]
 33872 00006046 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33873                                  	;push	word [si+12h]
 33874 00006049 FF7412                  	push	word [SI+user_env.user_IP]
 33875                                  	;pop	word [ES:0Ah]
 33876 0000604C 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33877                                  	;pop	word [ES:0Ch]
 33878 00006051 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33879                                  
 33880 00006056 31C0                    	xor	AX,AX
 33881 00006058 8ED8                    	mov	DS,AX
 33882                                  					; save them where we can get them
 33883                                  					; later when the child exits.
 33884                                  	;pop	word [88h]
 33885 0000605A 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33886                                  	;pop	word [90h]
 33887 0000605E 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33888                                  
 33889 00006062 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33890 00006069 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33891 0000606E 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33892                                  
 33893                                  	;test	byte [bp-5],1
 33894 00006073 F646FB01                	test	Exec_Func,exec_func_no_execute
 33895 00006077 7427                    	jz	short exec_go
 33896                                  
 33897 00006079 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33898                                  	;les	di,[bp-4]
 33899 0000607E C47EFC                  	les	DI,Exec_Blk		; and block for return
 33900                                  	;mov	[es:di+10h],ds
 33901 00006081 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33902                                  
 33903 00006085 4E                      	dec	SI			; 'push' default AX
 33904 00006086 4E                      	dec	SI
 33905 00006087 891C                    	mov	[SI],BX 		; save default AX reg
 33906                                  	;mov	[es:di+0Eh], si
 33907 00006089 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33908                                  
 33909 0000608D 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33910                                  	;mov	[es:di+14h],ds
 33911 00006092 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33912                                  	;mov	[es:di+12h],ax
 33913 00006096 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33914                                  	
 33915                                  	;leave
 33916 0000609A 89EC                    	mov	sp,bp
 33917 0000609C 5D                      	pop	bp	
 33918                                  
 33919                                  	;transfer SYS_RET_OK
 33920 0000609D E997A5                  	jmp	SYS_RET_OK
 33921                                  
 33922                                  exec_go:
 33923 000060A0 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33924 000060A5 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33925 000060AA 8CC0                    	mov	AX,ES
 33926                                  
 33927                                  	; MSDOS 6.0
 33928 000060AC 36803E[F211]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33929 000060B2 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33930                                  
 33931 000060B4 1E                      	push	ds			; Y: control must go to low mem stub
 33932                                  		
 33933 000060B5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33934                                  					;    control to user 
 33935 000060BA 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33936                                  					; M004: Set bit to signal int 21
 33937                                  					; ah = 25 & ah= 49. See dossym.inc 
 33938                                  					; under TAG M003 & M009 for 
 33939                                  					; explanation
 33940 000060BF 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33941                                  					; M068: going to be turned OFF.
 33942                                  	
 33943 000060C3 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33944 000060C5 1F                      	pop	ds
 33945                                  	
 33946 000060C6 50                      	push	ax			; ret far into the low mem stub
 33947 000060C7 B8[FB10]                	mov	ax,disa20_xfer
 33948 000060CA 50                      	push	ax
 33949 000060CB 8CC0                    	mov	AX,ES			; restore ax
 33950 000060CD CB                      	retf
 33951                                  
 33952                                  Xfer_To_User:
 33953                                  	; DS:SI points to entry point
 33954                                  	; AX:DI points to initial stack
 33955                                  	; DX has PDB pointer
 33956                                  	; BX has initial AX value
 33957                                  
 33958 000060CE FA                      	cli
 33959                                  	; 15/08/2018
 33960 000060CF 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33961                                  
 33962 000060D5 8ED0                    	mov	SS,AX			; set up user's stack
 33963 000060D7 89FC                    	mov	SP,DI			; and SP
 33964 000060D9 FB                      	sti
 33965                                  
 33966 000060DA 1E                      	push	DS			; fake long call to entry
 33967 000060DB 56                      	push	SI
 33968 000060DC 8EC2                    	mov	ES,DX			; set up proper seg registers
 33969 000060DE 8EDA                    	mov	DS,DX
 33970 000060E0 89D8                    	mov	AX,BX			; set up proper AX
 33971                                  
 33972 000060E2 CB                      	retf
 33973                                  
 33974                                  ; 04/08/2018 - Retro DOS v3.0
 33975                                  
 33976                                  ;----------------------------------------------------------------------------
 33977                                  ;
 33978                                  ;----------------------------------------------------------------------------
 33979                                  
 33980                                  ExecRead:
 33981 000060E3 E81600                  	CALL	Exec_Dealloc
 33982                                  	;mov	bx,[bp-8]
 33983 000060E6 8B5EF8                  	MOV	bx,Exec_FH
 33984                                  
 33985 000060E9 55                      	PUSH	BP
 33986 000060EA E82507                  	call	_$READ
 33987 000060ED 5D                      	POP	BP
 33988                                  
 33989                                  	;CALL	Exec_Alloc
 33990                                  	;retn
 33991                                  	; 18/12/2022
 33992                                  	;jmp	short Exec_Alloc
 33993                                  
 33994                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33995                                  
 33996                                  ;----------------------------------------------------------------------------
 33997                                  ;
 33998                                  ;----------------------------------------------------------------------------
 33999                                  
 34000                                  Exec_Alloc:
 34001 000060EE 53                      	push	BX
 34002                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34003                                  	; 20/05/2019 - Retro DOS v4.0
 34004                                  	; MSDOS 6.0
 34005 000060EF 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34006 000060F4 E81000                  	call	ChangeOwners
 34007 000060F7 E82EB2                  	call	LCritMEM
 34008 000060FA 5B                      	pop	BX
 34009 000060FB C3                      	retn
 34010                                  
 34011                                  ;----------------------------------------------------------------------------
 34012                                  ;
 34013                                  ;----------------------------------------------------------------------------
 34014                                  
 34015                                  Exec_Dealloc:
 34016 000060FC 53                      	push	BX
 34017                                  	;mov	bx,0
 34018 000060FD 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34019 000060FF E80BB2                  	call	ECritMEM
 34020 00006102 E80200                  	call	ChangeOwners
 34021 00006105 5B                      	pop	BX
 34022 00006106 C3                      	retn
 34023                                  
 34024                                  ; 18/12/2022
 34025                                  %if 0
 34026                                  ;----------------------------------------------------------------------------
 34027                                  ;
 34028                                  ;----------------------------------------------------------------------------
 34029                                  
 34030                                  Exec_Alloc:
 34031                                  	push	BX
 34032                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34033                                  	; 20/05/2019 - Retro DOS v4.0
 34034                                  	; MSDOS 6.0
 34035                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34036                                  	call	ChangeOwners
 34037                                  	call	LCritMEM
 34038                                  	pop	BX
 34039                                  	retn
 34040                                  
 34041                                  %endif
 34042                                  
 34043                                  ;----------------------------------------------------------------------------
 34044                                  ;
 34045                                  ;----------------------------------------------------------------------------
 34046                                  
 34047                                  ChangeOwners:
 34048 00006107 9C                      	pushf
 34049 00006108 50                      	push	AX
 34050                                  	;mov	ax,[bp-14]
 34051 00006109 8B46F2                  	mov	AX,Exec_Environ
 34052 0000610C E80900                  	call	ChangeOwner
 34053                                  	;mov	ax,[bp-18]
 34054 0000610F 8B46EE                  	mov	AX,Exec_Load_Block
 34055 00006112 E80300                  	call	ChangeOwner
 34056 00006115 58                      	pop	AX
 34057 00006116 9D                      	popf
 34058                                  chgown_retn:
 34059 00006117 C3                      	retn
 34060                                  
 34061                                  ;----------------------------------------------------------------------------
 34062                                  ;
 34063                                  ;----------------------------------------------------------------------------
 34064                                  
 34065                                  ChangeOwner:
 34066 00006118 09C0                    	or	AX,AX			; is area allocated?
 34067 0000611A 74FB                    	jz	short chgown_retn	; no, do nothing
 34068 0000611C 48                      	dec	AX
 34069 0000611D 1E                      	push	DS
 34070 0000611E 8ED8                    	mov	DS,AX
 34071 00006120 891E0100                	mov	[ARENA.OWNER],BX
 34072 00006124 1F                      	pop	DS
 34073 00006125 C3                      	retn
 34074                                  
 34075                                  ;----------------------------------------------------------------------------
 34076                                  ;
 34077                                  ;----------------------------------------------------------------------------
 34078                                  
 34079                                  ; 20/05/2019 - Retro DOS v4.0
 34080                                  
 34081                                  	; MSDOS 6.0
 34082                                  Scan_Execname:
 34083 00006126 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34084                                  Scan_Execname1:				; M028
 34085                                  Save_Begin:				;
 34086 00006129 89F1                    	mov	CX,SI			; CX= starting addr
 34087                                  Scan0:					;
 34088 0000612B AC                      	lodsb				; get char
 34089                                  
 34090 0000612C 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34091 0000612E 74F9                    	jz	short Save_Begin	; yes, save si
 34092 00006130 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34093 00006132 74F5                    	jz	short Save_Begin	; yes, save si
 34094 00006134 3C00                    	cmp	AL,0			; is end of name
 34095 00006136 75F3                    	jnz	short Scan0		; no, continue scanning
 34096 00006138 29CE                    	sub	SI,CX			; get name's length
 34097 0000613A 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34098                                  
 34099 0000613C C3                      	retn
 34100                                  
 34101                                  ;----------------------------------------------------------------------------
 34102                                  ;
 34103                                  ;----------------------------------------------------------------------------
 34104                                  
 34105                                  ; 20/05/2019 - Retro DOS v4.0
 34106                                  
 34107                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34108                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34109                                  
 34110                                  	; MSDOS 6.0
 34111                                  
 34112                                  Scan_Special_Entries:
 34113                                  
 34114 0000613D 49                      	dec	CX			; cx= name length
 34115                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34116                                  					;reset to current version
 34117                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34118                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34119                                  	;mov	word [ss:SPECIAL_VERSION],5
 34120                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34121                                  
 34122                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34123 0000613E 36C706[BD0E]0616        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34124                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34125                                  				; 24/09/2023
 34126                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34127                                  ;***	call	Reset_Version
 34128                                  
 34129                                  ;M060	push	SS
 34130                                  ;M060	pop	ES
 34131                                  
 34132 00006145 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34133 0000614A 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34134 0000614C 09F8                    	or	AX,DI			;M060; be sure the table exists
 34135 0000614E 7427                    	jz	short End_List		;M060; If ZR then no table
 34136                                  
 34137                                  GetEntries:
 34138 00006150 268A05                  	mov	AL,[ES:DI]		; end of list
 34139 00006153 08C0                    	or	AL,AL
 34140 00006155 7420                    	jz	short End_List		; yes
 34141                                  
 34142 00006157 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34143 0000615C 38C8                    	cmp	AL,CL			; same length ?
 34144 0000615E 751B                    	jnz	short SkipOne 		; no
 34145                                  
 34146 00006160 47                      	inc	DI			; es:di -> special name
 34147 00006161 51                      	push	CX			; save length and name addr
 34148 00006162 56                      	push	SI
 34149                                  
 34150                                  ; M050 - BEGIN
 34151                                  
 34152 00006163 50                      	push	ax			; save len
 34153                                  sse_next_char:
 34154 00006164 AC                      	lodsb
 34155 00006165 E8D1EE                  	call	UCase
 34156 00006168 AE                      	scasb
 34157 00006169 750D                    	jne	short Not_Matched
 34158 0000616B E2F7                    	loop	sse_next_char
 34159                                  	
 34160                                  ;	repz	cmpsb			; same name ?
 34161                                  ;	jnz	short Not_Matched	; no
 34162                                  
 34163 0000616D 58                      	pop	ax			; take len off the stack
 34164                                  
 34165                                  ; M050 - END
 34166                                  
 34167 0000616E 268B05                  	mov	AX,[ES:DI]		; get special version
 34168 00006171 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34169                                  
 34170                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 34171                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 34172                                  
 34173 00006175 5E                      	pop	SI
 34174 00006176 59                      	pop	CX
 34175                                  	; 18/12/2022
 34176                                  	;jmp	SHORT End_List
 34177                                  
 34178                                  	; 18/12/2022
 34179                                  End_List:
 34180 00006177 C3                      	retn
 34181                                  
 34182                                  Not_Matched:
 34183 00006178 58                      	pop	ax			; get len from stack ; M050
 34184 00006179 5E                      	pop	SI			; restore si,cx
 34185 0000617A 59                      	pop	CX
 34186                                  
 34187                                  SkipOne:
 34188 0000617B 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 34189 00006180 30E4                    	xor	AH,AH			; position to next entry
 34190 00006182 01C7                    	add	DI,AX
 34191                                  
 34192 00006184 83C703                  	add	DI,3			; DI -> next entry length
 34193                                  ;***	add	DI,4			; DI -> next entry length
 34194                                  
 34195 00006187 EBC7                    	jmp	short GetEntries
 34196                                  
 34197                                  	; 18/12/2022
 34198                                  ;End_List:
 34199                                  	;retn
 34200                                  
 34201                                  ; 04/08/2018 - Retro DOS v3.0
 34202                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 34203                                  
 34204                                  ;----------------------------------------------------------------------------
 34205                                  ;SUBTTL Terminate and stay resident handler
 34206                                  ;
 34207                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 34208                                  ;	    truncate the current block.
 34209                                  ;
 34210                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 34211                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 34212                                  ;	    and restoring the vectors.
 34213                                  ;
 34214                                  ;----------------------------------------------------------------------------
 34215                                  
 34216                                  	; 20/05/2019 - Retro DOS v4.0
 34217                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 34218                                  
 34219                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34220                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 34221                                  
 34222                                  _$KEEP_PROCESS:
 34223 00006189 50                      	push	AX			; keep exit code around
 34224                                  	;mov	byte [SS:EXIT_TYPE],3
 34225 0000618A 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 34226 00006190 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 34227 00006195 83FA06                  	cmp	DX,6h			; keep enough space around for system
 34228 00006198 7303                    	jae	short Keep_Shrink	; info
 34229                                  
 34230 0000619A BA0600                  	mov	DX,6h
 34231                                  
 34232                                  Keep_Shrink:
 34233 0000619D 89D3                    	mov	BX,DX
 34234 0000619F 53                      	push	BX
 34235 000061A0 06                      	push	ES
 34236 000061A1 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 34237 000061A4 1F                      	pop	DS
 34238 000061A5 5B                      	pop	BX
 34239 000061A6 7207                    	jc	short Keep_Done		; failed on modification
 34240                                  
 34241 000061A8 8CD8                    	mov	AX,DS
 34242 000061AA 01D8                    	add	AX,BX
 34243                                  	;mov	[2],ax
 34244 000061AC A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 34245                                  
 34246                                  Keep_Done:
 34247 000061AF 58                      	pop	AX
 34248 000061B0 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 34249                                  
 34250                                  ;----------------------------------------------------------------------------
 34251                                  ;
 34252                                  ;----------------------------------------------------------------------------
 34253                                  
 34254                                  STAY_RESIDENT:
 34255                                  	;mov	ax,3100h
 34256 000061B2 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 34257 000061B5 83C20F                  	add	DX,15
 34258 000061B8 D1DA                    	rcr	DX,1
 34259 000061BA B103                    	mov	CL,3
 34260 000061BC D3EA                    	shr	DX,CL
 34261                                  
 34262 000061BE E947A1                  	jmp	COMMAND
 34263                                  
 34264                                  ;----------------------------------------------------------------------------
 34265                                  ;SUBTTL $EXIT - return to parent process
 34266                                  ;   Assembler usage:
 34267                                  ;	    MOV     AL, code
 34268                                  ;	    MOV     AH, Exit
 34269                                  ;	    INT     int_command
 34270                                  ;   Error return:
 34271                                  ;	    None.
 34272                                  ;
 34273                                  ;----------------------------------------------------------------------------
 34274                                  
 34275                                  	; 20/05/2019 - Retro DOS v4.0
 34276                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 34277                                  
 34278                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34279                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 34280                                  _$EXIT:
 34281                                  	; 04/08/2018 - Retro DOS v3.0
 34282                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 34283 000061C1 30E4                    	xor	AH,AH
 34284 000061C3 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 34285 000061C8 08E4                    	or	AH,AH
 34286                                  	;mov	BYTE [SS:EXIT_TYPE],0
 34287 000061CA 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 34288 000061D0 7406                    	jz	short exit_inner
 34289                                  	;mov	BYTE [SS:EXIT_TYPE],1
 34290 000061D2 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 34291                                  
 34292                                  	;entry	Exit_inner
 34293                                  exit_inner:
 34294 000061D8 E8A6A2                  	call	Get_User_Stack		;PBUGBUG
 34295                                  
 34296 000061DB 36FF36[3003]            	push	word [ss:CurrentPDB]
 34297                                  	;pop	word [si+14h]
 34298 000061E0 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 34299 000061E3 EB08                    	jmp	short abort_inner
 34300                                  
 34301                                  ;BREAK <$ABORT -- Terminate a process>
 34302                                  ;----------------------------------------------------------------------------
 34303                                  ; Inputs:
 34304                                  ;	user_CS:00 must point to valid program header block
 34305                                  ; Function:
 34306                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 34307                                  ;	to the terminate address
 34308                                  ; Returns:
 34309                                  ;	TO THE TERMINATE ADDRESS
 34310                                  ;----------------------------------------------------------------------------
 34311                                  
 34312                                  _$ABORT:
 34313 000061E5 30C0                    	xor	AL,AL
 34314                                  	;mov	byte [SS:EXIT_TYPE],0
 34315                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 34316 000061E7 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 34317                                  
 34318                                  	; abort_inner must have AL set as the exit code! The exit type
 34319                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 34320                                  	; to be correct as the one that is terminating.
 34321                                  
 34322                                  abort_inner:
 34323 000061ED 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 34324 000061F2 36A3[3403]              	mov	[SS:exit_code],AX
 34325 000061F6 E888A2                  	call	Get_User_Stack
 34326                                  
 34327                                  	;mov	ds,[si+14h]
 34328 000061F9 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 34329 000061FC 31C0                    	xor	AX,AX
 34330 000061FE 8EC0                    	mov	ES,AX
 34331                                  	;mov	si,10
 34332 00006200 BE0A00                  	mov	SI,SAVEXIT
 34333                                  	;mov	di,88h
 34334 00006203 BF8800                  	mov	DI,addr_int_terminate
 34335 00006206 A5                      	movsw
 34336 00006207 A5                      	movsw
 34337 00006208 A5                      	movsw
 34338 00006209 A5                      	movsw
 34339 0000620A A5                      	movsw
 34340 0000620B A5                      	movsw
 34341 0000620C E944F2                  	jmp	reset_environment
 34342                                  
 34343                                  ;----------------------------------------------------------------------------
 34344                                  ;
 34345                                  ; fixexepatch will point to this is DOS loads low. 
 34346                                  ;
 34347                                  ;----------------------------------------------------------------------------
 34348                                  ; MSDOS 6.0
 34349                                  
 34350                                  ; 29/04/2019 - Retro DOS v4.0
 34351                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 34352                                  
 34353                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34354                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 34355                                  
 34356                                  RetExePatch: ; proc near
 34357                                  	
 34358 0000620F C3                      	retn
 34359                                  
 34360                                  ;============================================================================
 34361                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 34362                                  ;============================================================================
 34363                                  ; 04/08/2018 - Retro DOS v3.0
 34364                                  ; 14/05/2019 - Retro DOS v4.0
 34365                                  
 34366                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 34367                                  
 34368                                  ;**
 34369                                  ;	Microsoft Confidential
 34370                                  ;	Copyright (C) Microsoft Corporation 1991
 34371                                  ;	All Rights Reserved.
 34372                                  ;
 34373                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 34374                                  ;	I/O specs are defined in DISPATCH.
 34375                                  ;
 34376                                  ;	$ALLOC
 34377                                  ;	$SETBLOCK
 34378                                  ;	$DEALLOC
 34379                                  ;	$AllocOper
 34380                                  ;	arena_free_process
 34381                                  ;	arena_next
 34382                                  ;	check_signature
 34383                                  ;	Coalesce
 34384                                  ;
 34385                                  ;	Modification history:
 34386                                  ;
 34387                                  ;	    Created: ARR 30 March 1983
 34388                                  ;
 34389                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 34390                                  ;		      M003 - added support for link/unlink UMBs from
 34391                                  ;			     DOS arena chain. 7/18/90
 34392                                  ;		      M009 - Added error returns invalid function and 
 34393                                  ;			     arena trashed in set link state call.
 34394                                  ;		      M010 - Release UMB arenas allocated to current PDB
 34395                                  ;			     if UMB_HEAD is initialized.
 34396                                  ;
 34397                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 34398                                  ;			     support. Please see under M009 in 
 34399                                  ;			     ..\inc\dossym.inc. 8/31/90.
 34400                                  ;
 34401                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 34402                                  ;			     sure that umb_head arena is valid and also make
 34403                                  ;			     sure that the previous arena is pointing to 
 34404                                  ;			     umb_head.
 34405                                  ;
 34406                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 34407                                  ;			     set allloc strategy.
 34408                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 34409                                  ;			     bx in AllocSetStrat.
 34410                                  ;
 34411                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 34412                                  ;			     a bit to indicate to dos dispatcher to turn
 34413                                  ;			     a20 off before iret. See M016.
 34414                                  ;
 34415                                  
 34416                                  ;	BREAK	<memory allocation utility routines>
 34417                                  
 34418                                  
 34419                                  ; 15/04/2018 - Retro DOS v2.0
 34420                                  ;----------------------------------------------------------------------------
 34421                                  ; xenix memory calls for MSDOS
 34422                                  ;
 34423                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34424                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34425                                  ;
 34426                                  ;INCLUDE DOSSEG.ASM
 34427                                  
 34428                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34429                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34430                                  
 34431                                  ;.xlist
 34432                                  ;.xcref
 34433                                  ;INCLUDE DOSSYM.ASM
 34434                                  ;INCLUDE DEVSYM.ASM
 34435                                  ;.cref
 34436                                  ;.list
 34437                                  
 34438                                  ;TITLE ALLOC.ASM - memory arena manager
 34439                                  ;NAME Alloc
 34440                                  
 34441                                  ;SUBTTL memory allocation utility routines
 34442                                  ;PAGE
 34443                                  ;
 34444                                  ; arena data
 34445                                  ;
 34446                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34447                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34448                                  ;       i_need  FirstArena,WORD         ; first free block found
 34449                                  ;       i_need  BestArena,WORD          ; best free block found
 34450                                  ;       i_need  LastArena,WORD          ; last free block found
 34451                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34452                                  
 34453                                  ;**	Arena_Free_Process
 34454                                  ;----------------------------------------------------------------------------
 34455                                  ;	Free all arena blocks allocated to a prOcess
 34456                                  ;
 34457                                  ;	ENTRY	(bx) = PID of process
 34458                                  ;	EXIT	none
 34459                                  ;	USES	????? BUGBUG
 34460                                  ;----------------------------------------------------------------------------
 34461                                  
 34462                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34463                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 34464                                  
 34465                                  arena_free_process:
 34466                                  	; 14/05/2019 - Retro DOS v4.0
 34467                                  	; 04/08/2018 - Retro DOS v3.0
 34468 00006210 36A1[2400]                      MOV	AX,[SS:arena_head]
 34469                                  arena_free_process_start:
 34470 00006214 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 34471                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 34472 00006217 E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 34473                                  
 34474                                  arena_free_process_loop:
 34475                                          ;retc
 34476 0000621A 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 34477 0000621C 06                      	PUSH    ES
 34478 0000621D 1F                              POP     DS
 34479                                  	;cmp	[1],bx 
 34480 0000621E 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 34481 00006222 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 34482                                  	;mov	[1],di
 34483 00006224 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 34484                                  
 34485                                  arena_free_next:
 34486                                  	;cmp	byte [di],5Ah ;'Z'
 34487 00006228 803D5A                          CMP     BYTE [DI],arena_signature_end
 34488                                                                          ; end of road, Jack?
 34489                                          ;retz				; never come back no more
 34490                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 34491                                  	; 14/05/2019
 34492                                  	; MSDOS 6.0
 34493 0000622B 7405                    	jz	short arena_chk_umbs
 34494                                          
 34495 0000622D E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 34496 00006230 EBE8                            JMP     SHORT arena_free_process_loop
 34497                                  
 34498                                  	; MSDOS 6.0
 34499                                  arena_chk_umbs:				; M010 - Start
 34500                                  	; 20/05/2019
 34501 00006232 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 34502 00006236 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 34503 00006239 741E                    	je	short ret_label		; N: we're done
 34504                                  	
 34505 0000623B 8CDF                    	mov	di,ds			; di = last arena
 34506 0000623D 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 34507 0000623F 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 34508 00006241 EBD1                    	jmp	short arena_free_process_start
 34509                                  					; M010 - End
 34510                                  ;AFP_RETN:
 34511                                  ;	RETN
 34512                                  
 34513                                  ;	BREAK	<Arena Helper Routines>
 34514                                  
 34515                                  ;**	Arena_Next - Find Next item in Arena
 34516                                  ;----------------------------------------------------------------------------
 34517                                  ;	ENTRY	DS - pointer to block head
 34518                                  ;		(di) = 0
 34519                                  ;	EXIT	AX,ES - pointers to next head
 34520                                  ;		'C' set iff arena damaged
 34521                                  ;----------------------------------------------------------------------------
 34522                                  
 34523                                  arena_next:
 34524 00006243 8CD8                            MOV     AX,DS                   ; AX <- current block
 34525 00006245 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34526 00006249 40                              INC     AX                      ; remember that header!
 34527                                  
 34528                                  ;       fall into check_signature and return
 34529                                  ;
 34530                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34531                                  ;       RETN
 34532                                  
 34533                                  ;**	Check_Signature - Check Memory Block Signature
 34534                                  ;----------------------------------------------------------------------------
 34535                                  ;	ENTRY	(AX) = address of block header
 34536                                  ;		(di) = 0
 34537                                  ;	EXIT	 ES = AX
 34538                                  ;		'C' clear if signature good
 34539                                  ;		'C' set if signature bad
 34540                                  ;	USES	ES, Flags
 34541                                  ;----------------------------------------------------------------------------
 34542                                  
 34543                                  check_signature:        
 34544                                  
 34545 0000624A 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34546                                  	;cmp	byte [es:di],4Dh ; 'M'
 34547 0000624C 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34548                                                                          ; IF next signature = not_end THEN
 34549 00006250 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34550                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34551 00006252 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34552                                                                          ; IF next signature = end then
 34553 00006256 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34554 00006258 F9                              STC                             ; set error
 34555                                  ret_label: ; MSDOS 6.0
 34556                                  AFP_RETN:
 34557                                   	; Retro DOS v2.0 - 05/03/2018
 34558                                  check_signature_ok:
 34559                                  COALESCE_RETN:
 34560 00006259 C3                      	RETN
 34561                                  
 34562                                  ;**	Coalesce - Combine free blocks ahead with current block
 34563                                  ;----------------------------------------------------------------------------
 34564                                  ;	Coalesce adds the block following the argument to the argument block,
 34565                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34566                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34567                                  ;	preceeding allocated block.
 34568                                  ;
 34569                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34570                                  ;		(di) = 0
 34571                                  ;	EXIT	'C' clear if OK
 34572                                  ;		  (ds) unchanged, this block updated
 34573                                  ;		  (ax) = address of next block, IFF not at end
 34574                                  ;		'C' set if arena trashed
 34575                                  ;	USES	(cx)
 34576                                  ;----------------------------------------------------------------------------
 34577                                          
 34578                                  Coalesce:
 34579                                  	;cmp	byte [di],5Ah ; 'Z'
 34580 0000625A 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34581                                                                          ; IF current signature = END THEN
 34582                                          ;retz				;   GOTO ok
 34583 0000625D 74FA                            jz	short COALESCE_RETN
 34584 0000625F E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34585                                          ;retc				; IF no error THEN GOTO check
 34586 00006262 72F5                    	jc	short COALESCE_RETN
 34587                                  
 34588                                  coalesce_check:
 34589                                  	;cmp	[es:1],di
 34590 00006264 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34591                                          ;retnz				; IF next block isnt free THEN return
 34592 00006269 75EE                            JNZ	SHORT COALESCE_RETN
 34593                                  	;mov	cx,[ES:3]
 34594 0000626B 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34595 00006270 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34596                                          ;ADD	[3],CX
 34597 00006271 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34598 00006275 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34599 00006278 880D                            MOV     [DI],CL
 34600 0000627A EBDE                            JMP     SHORT Coalesce		; try again
 34601                                  
 34602                                  ; 04/08/2018 - Retro DOS v3.0
 34603                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34604                                  
 34605                                  ;	BREAK  <$Alloc - allocate space in memory>
 34606                                  
 34607                                  ; MSDOS 6.0
 34608                                  ;----------------------------------------------------------------------------
 34609                                  ;**	$Alloc - Allocate Memory Space
 34610                                  ;
 34611                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34612                                  ;	Alloc returns a pointer to a free block of memory that
 34613                                  ;	has the requested size in paragraphs.
 34614                                  ;
 34615                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34616                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34617                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34618                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34619                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34620                                  ;
 34621                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34622                                  ;	starts from arena_head.
 34623                                  ;
 34624                                  ;	Assembler usage:
 34625                                  ;           MOV     BX,size
 34626                                  ;           MOV     AH,Alloc
 34627                                  ;           INT     21h
 34628                                  ;
 34629                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34630                                  ;	so that we start searching the arena at it's first non-trivial free
 34631                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34632                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34633                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34634                                  ;	verify that this is true; if so, this can stay as is
 34635                                  ;
 34636                                  ;	ENTRY	(bx) = requested size, in bytes
 34637                                  ;		(DS) = (ES) = DOSGROUP
 34638                                  ;	EXIT	'C' clear if memory allocated
 34639                                  ;		  (ax:0) = address of requested memory
 34640                                  ;		'C' set if request failed
 34641                                  ;		  (AX) = error_not_enough_memory
 34642                                  ;		    (bx) = max size we could have allocated
 34643                                  ;		  (ax) = error_arena_trashed
 34644                                  ;	USES	All
 34645                                  ;----------------------------------------------------------------------------
 34646                                  
 34647                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34648                                  ;----------------------------------------------------------------------------
 34649                                  ;SUBTTL $Alloc - allocate space in memory
 34650                                  ;
 34651                                  ;   Assembler usage:
 34652                                  ;           MOV     BX,size
 34653                                  ;           MOV     AH,Alloc
 34654                                  ;           INT     21h
 34655                                  ;         AX:0 is pointer to allocated memory
 34656                                  ;         BX is max size if not enough memory
 34657                                  ;
 34658                                  ;   Description:
 34659                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34660                                  ;       memory that has the requested  size  in  paragraphs.
 34661                                  ;
 34662                                  ;   Error return:
 34663                                  ;           AX = error_not_enough_memory
 34664                                  ;              = error_arena_trashed
 34665                                  ;----------------------------------------------------------------------------
 34666                                  
 34667                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34668                                  
 34669                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34670                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34671                                  
 34672                                  _$ALLOC:
 34673                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34674                                  	; 14/05/2019 - Retro DOS v4.0
 34675                                  	; 04/08/2018 - Retro DOS v3.0
 34676                                  	;EnterCrit critMem
 34677 0000627C E88EB0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34678                                  
 34679                                  ; 17/12/2022
 34680                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34681                                  ;%if 0
 34682                                  	; 14/05/2019
 34683 0000627F 16                      	push	ss
 34684 00006280 1F                      	pop	ds
 34685                                  
 34686                                  	; MSDOS 6.0
 34687                                  	;mov	ax,[ss:arena_head]
 34688                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34689                                  
 34690 00006281 A1[2400]                	mov	ax,[arena_head]
 34691 00006284 A3[8E00]                	mov	[START_ARENA],ax			
 34692                                  	
 34693                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34694 00006287 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34695                                  					; Q: should we start scanning from 
 34696                                  					;    UMB's
 34697 0000628C 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34698                                  		
 34699                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34700                                  	;cmp	word [UMB_HEAD],-1
 34701                                  	;je	short norm_alloc	; N: scan from arena_head
 34702                                  
 34703                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34704 0000628E F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34705 00006293 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34706                                  	
 34707                                  	;mov	ax,[ss:UMB_HEAD]
 34708                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34709 00006295 A1[8C00]                	mov	ax,[UMB_HEAD]
 34710 00006298 A3[8E00]                	mov	[START_ARENA],ax
 34711                                  					; M000 - end
 34712                                  norm_alloc:
 34713 0000629B 31C0                            XOR     AX,AX
 34714 0000629D 89C7                            MOV     DI,AX
 34715                                  	; 15/03/2018
 34716                                          ;MOV	[SS:FirstArena],AX	; init the options
 34717                                          ;MOV	[SS:BestArena],AX
 34718                                          ;MOV	[SS:LastArena],AX
 34719                                  	; 14/05/2019
 34720 0000629F A3[4003]                	MOV	[FirstArena],AX		; init the options
 34721 000062A2 A3[4203]                        MOV	[BestArena],AX
 34722 000062A5 A3[4403]                        MOV	[LastArena],AX
 34723 000062A8 50                              PUSH    AX                      ; alloc_max <- 0
 34724                                  	; 04/08/2018
 34725                                  start_scan:
 34726                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34727                                  	;MOV	AX,[arena_head]
 34728                                  
 34729                                  	; 14/05/2019	
 34730                                  	; MSDOS 6.0
 34731                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34732 000062A9 A1[8E00]                	mov	ax,[START_ARENA]
 34733                                  
 34734                                  	; 27/09/2023 (BugFix) (*) 
 34735                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 34736                                  start_scan_x:
 34737                                  
 34738 000062AC E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34739 000062AF 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34740                                  
 34741                                  ;%endif
 34742                                  
 34743                                  ; 17/12/2022
 34744                                  %if 0
 34745                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34746                                  
 34747                                  	; MSDOS 6.0
 34748                                  	mov	ax,[ss:arena_head]
 34749                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34750                                  
 34751                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34752                                  					; Q: should we start scanning from 
 34753                                  					;    UMB's
 34754                                  	jz	short norm_alloc	; N: scan from arena_head
 34755                                  		
 34756                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34757                                  	;je	short norm_alloc	; N: scan from arena_head
 34758                                  
 34759                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34760                                  	jz	short norm_alloc	; N: scan from arena_head
 34761                                  	
 34762                                  	mov	ax,[ss:UMB_HEAD]
 34763                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34764                                  					; M000 - end
 34765                                  norm_alloc:
 34766                                          XOR     AX,AX
 34767                                          MOV     DI,AX
 34768                                  	; 15/03/2018
 34769                                  	MOV	[SS:FirstArena],AX	; init the options
 34770                                  	MOV	[SS:BestArena],AX
 34771                                  	MOV	[SS:LastArena],AX
 34772                                          PUSH    AX                      ; alloc_max <- 0
 34773                                  	; 04/08/2018
 34774                                  start_scan:
 34775                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34776                                  	; 14/05/2019	
 34777                                  	; MSDOS 6.0
 34778                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34779                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34780                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34781                                  %endif
 34782                                  
 34783                                  alloc_scan:
 34784 000062B1 06                              PUSH    ES
 34785 000062B2 1F                              POP     DS                      ; DS <- ES
 34786 000062B3 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34787 000062B7 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34788                                  
 34789                                  alloc_next:
 34790                                  	; MSDOS 6.0			; M000 - start 
 34791 000062B9 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34792 000062BF 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34793                                  	
 34794 000062C1 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34795                                  					; Q: is alloc strategy high_first
 34796 000062C7 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34797 000062C9 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34798 000062CD 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34799                                  					;    arena_head
 34800 000062D2 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34801 000062D4 8CD8                    	mov	ax,ds			; ax = current block
 34802 000062D6 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34803 000062DB EB03                    	jmp	short alloc_chk_end
 34804                                  
 34805                                  norm_strat:
 34806                                  	;cmp	byte [di],5Ah ; 'Z'
 34807 000062DD 803D5A                          CMP     BYTE [DI],arena_signature_end
 34808                                                                          ; IF current block is last THEN
 34809                                  alloc_chk_end:
 34810 000062E0 740E                            JZ      SHORT alloc_end		;   GOTO end
 34811 000062E2 E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34812 000062E5 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34813                                  
 34814                                  alloc_err:
 34815 000062E7 58                              POP     AX
 34816                                  
 34817                                  alloc_trashed:
 34818                                  	;LeaveCrit critMem
 34819 000062E8 E83DB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34820                                          ;error	error_arena_trashed
 34821                                  	;mov	al,7
 34822 000062EB B007                    	MOV	AL,error_arena_trashed
 34823                                  alloc_errj:
 34824 000062ED E950A3                  	JMP	SYS_RET_ERR
 34825                                  
 34826                                  alloc_end:
 34827                                  	; 18/05/2019
 34828 000062F0 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34829 000062F6 7403                    	jz	short alloc_chk 
 34830 000062F8 E98400                  	jmp	alloc_do_split
 34831                                  
 34832                                  alloc_chk:
 34833                                  	; MSDOS 6.0
 34834 000062FB 36A1[2400]              	mov	ax,[ss:arena_head]
 34835 000062FF 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34836 00006304 740E                    	je	short alloc_fail	; Y: not enough memory
 34837                                  					; N:
 34838                                  					; Q: is the alloc strat HIGH_ONLY
 34839 00006306 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34840 0000630C 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34841                                  	
 34842 0000630E 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34843                                  	; 27/09/2023 (*)
 34844 00006312 EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 34845                                  	;jmp	short start_scan
 34846                                  					; M000 - end
 34847                                  
 34848                                  alloc_fail:
 34849                                          ;invoke Get_User_Stack
 34850 00006314 E86AA1                          CALL	Get_User_Stack
 34851 00006317 5B                      	POP     BX
 34852                                          ;MOV	[SI].user_BX,BX
 34853                                  	;MOV	[SI+2],BX
 34854 00006318 895C02                  	mov	[SI+user_env.user_BX],bx
 34855                                  	;LeaveCrit critMem
 34856 0000631B E80AB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34857                                  	;error	error_not_enough_memory
 34858                                  	;mov	al,8
 34859 0000631E B008                    	MOV	AL,error_not_enough_memory
 34860                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34861 00006320 EBCB                    	jmp	short alloc_errj
 34862                                  	;JMP	SYS_RET_ERR
 34863                                  
 34864                                  alloc_free:
 34865 00006322 E835FF                          CALL    Coalesce		; add following free block to current
 34866 00006325 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34867 00006327 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34868 0000632B 5A                              POP     DX                      ; check for max found size
 34869 0000632C 39D1                            CMP     CX,DX
 34870 0000632E 7602                            JNA     SHORT alloc_test
 34871 00006330 89CA                            MOV     DX,CX
 34872                                  
 34873                                  alloc_test:
 34874 00006332 52                              PUSH    DX
 34875 00006333 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34876 00006335 7782                    	JA      SHORT alloc_next	;   GOTO next
 34877                                  
 34878                                  	; 15/03/2018
 34879 00006337 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34880 0000633D 7505                    	JNZ	SHORT alloc_best
 34881 0000633F 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34882                                  alloc_best:
 34883 00006344 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34884 0000634A 740E                            JZ      SHORT alloc_make_best	; initial best
 34885 0000634C 06                              PUSH	ES
 34886 0000634D 368E06[4203]                    MOV     ES,[SS:BestArena]
 34887 00006352 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34888 00006357 07                              POP	ES
 34889 00006358 7605                            JBE     SHORT alloc_last
 34890                                  alloc_make_best:
 34891 0000635A 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34892                                  alloc_last:
 34893 0000635F 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34894 00006364 E952FF                          JMP     alloc_next
 34895                                  ;
 34896                                  ; split the block high
 34897                                  ;
 34898                                  alloc_do_split_high:
 34899 00006367 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34900 0000636C 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34901 00006370 29D9                            SUB     CX,BX
 34902 00006372 8CDA                            MOV     DX,DS
 34903 00006374 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34904 00006376 01CA                            ADD     DX,CX                   ; point to next block
 34905 00006378 8EC2                            MOV     ES,DX                   ; no decrement!
 34906 0000637A 49                              DEC     CX
 34907 0000637B 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34908 0000637D EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34909                                  ;
 34910                                  ; we have scanned memory and have found all appropriate blocks
 34911                                  ; check for the type of allocation desired; first and best are identical
 34912                                  ; last must be split high
 34913                                  ;
 34914                                  alloc_do_split:
 34915                                  
 34916                                  ; 17/12/2022
 34917                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34918                                  ;%if 0
 34919                                  	; 14/05/2019
 34920                                  	; MSDOS 6.0			; M000 - start
 34921                                  	;xor	cx,cx
 34922 0000637F 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34923                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34924 00006384 80E13F                  	and	cl,3Fh
 34925                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34926 00006387 80F901                  	cmp	cl,BEST_FIT
 34927 0000638A 77DB                    	ja	short alloc_do_split_high
 34928                                  ;%endif
 34929                                  
 34930                                  	; 17/12/2022
 34931                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34932                                  	; MSDOS 6.0 & MSDOS 5.0
 34933                                  	;xor	cx,cx
 34934                                  	;mov	cl,[ss:AllocMethod]
 34935                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34936                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34937                                  	;ja	short alloc_do_split_high
 34938                                  
 34939                                  	; 15/03/2018
 34940                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34941                                  	; 04/08/2018
 34942                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34943                                          ;JA	SHORT alloc_do_split_high
 34944                                          
 34945 0000638C 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34946 00006391 7205                    	JB      SHORT alloc_get_size
 34947 00006393 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34948                                  
 34949                                  alloc_get_size:
 34950 00006398 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34951 0000639C 29D9                            SUB     CX,BX                   ; get room left over
 34952 0000639E 8CD8                            MOV     AX,DS
 34953 000063A0 89C2                            MOV     DX,AX                   ; save for owner setting
 34954 000063A2 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34955 000063A4 01D8                            ADD     AX,BX
 34956 000063A6 40                              INC     AX                      ; remember the header
 34957 000063A7 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34958 000063A9 49                              DEC     CX                      ; CX <- size of split block
 34959                                  alloc_set_sizes:
 34960 000063AA 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34961 000063AE 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34962                                  	;mov	bl,4Dh ; 'M'
 34963 000063B3 B34D                            MOV     BL,arena_signature_normal
 34964 000063B5 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34965 000063B7 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34966 000063BA 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34967                                  
 34968                                  alloc_set_owner:
 34969 000063BF 8EDA                            MOV     DS,DX
 34970 000063C1 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34971 000063C5 A30100                          MOV     [ARENA.OWNER],AX
 34972 000063C8 8CD8                            MOV     AX,DS
 34973 000063CA 40                              INC     AX
 34974 000063CB 5B                              POP     BX
 34975                                  	;LeaveCrit critMem
 34976 000063CC E859AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34977                                  	
 34978                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34979                                  alloc_ok:
 34980                                          ;transfer SYS_RET_OK
 34981 000063CF E965A2                  	JMP	SYS_RET_OK
 34982                                  
 34983                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34984                                  
 34985                                  ; MSDOS 6.0
 34986                                  ;----------------------------------------------------------------------------
 34987                                  ;**	$SETBLOCK - Change size of an Allocated Block
 34988                                  ;
 34989                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34990                                  ;	any following free space onto this block; then we try to trim the
 34991                                  ;	block down to the size requested.
 34992                                  ;
 34993                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34994                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34995                                  ;	Thus the maximum-size-possible value that we return has already
 34996                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34997                                  ;
 34998                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34999                                  ;		finish it's work. For this reason we build the allocsf
 35000                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35001                                  ;		code.
 35002                                  ;
 35003                                  ;	ENTRY	(es) = segment of old block
 35004                                  ;		(bx) = newsize
 35005                                  ;		(ah) = SETBLOCK
 35006                                  ;
 35007                                  ;	EXIT	'C' clear if OK
 35008                                  ;		'C' set if error
 35009                                  ;		  (ax) = error_invalid_block
 35010                                  ;		       = error_arena_trashed
 35011                                  ;		       = error_not_enough_memory
 35012                                  ;		       = error_invalid_function
 35013                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35014                                  ;	USES	???? BUGBUG
 35015                                  ;----------------------------------------------------------------------------
 35016                                  
 35017                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35018                                  ;----------------------------------------------------------------------------
 35019                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35020                                  ;
 35021                                  ;   Assembler usage:
 35022                                  ;           MOV     ES,block
 35023                                  ;           MOV     BX,newsize
 35024                                  ;           MOV     AH,setblock
 35025                                  ;           INT     21h
 35026                                  ;         if setblock fails for growing, BX will have the maximum
 35027                                  ;         size possible
 35028                                  ;   Error return:
 35029                                  ;           AX = error_invalid_block
 35030                                  ;              = error_arena_trashed
 35031                                  ;              = error_not_enough_memory
 35032                                  ;              = error_invalid_function
 35033                                  ;----------------------------------------------------------------------------
 35034                                  
 35035                                  _$SETBLOCK:        
 35036                                  	; 04/08/2018 - Retro DOS v3.0
 35037                                  	;EnterCrit   critMem
 35038 000063D2 E838AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35039                                  
 35040 000063D5 BF0000                  	MOV     DI,ARENA.SIGNATURE
 35041 000063D8 8CC0                            MOV     AX,ES
 35042 000063DA 48                              DEC     AX
 35043 000063DB E86CFE                          CALL    check_signature
 35044 000063DE 7303                            JNC     SHORT setblock_grab
 35045                                  
 35046                                  setblock_bad:
 35047 000063E0 E905FF                          JMP     alloc_trashed
 35048                                  
 35049                                  setblock_grab:
 35050 000063E3 8ED8                            MOV     DS,AX
 35051 000063E5 E872FE                          CALL    Coalesce
 35052 000063E8 72F6                            JC      SHORT setblock_bad
 35053 000063EA 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35054 000063EE 51                              PUSH    CX
 35055 000063EF 39CB                            CMP     BX,CX
 35056 000063F1 76A5                            JBE     SHORT alloc_get_size
 35057 000063F3 E91EFF                          JMP     alloc_fail
 35058                                  
 35059                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35060                                  
 35061                                  ; MSDOS 6.0
 35062                                  ;----------------------------------------------------------------------------
 35063                                  ;**	$DEALLOC - Free Heap Memory
 35064                                  ;
 35065                                  ;	ENTRY	(es) = address of item
 35066                                  ;
 35067                                  ;	EXIT	'C' clear of OK
 35068                                  ;		'C' set if error
 35069                                  ;		  (AX) = error_invalid_block
 35070                                  ;	USES	???? BUGBUG
 35071                                  
 35072                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35073                                  ;----------------------------------------------------------------------------
 35074                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35075                                  ;
 35076                                  ;   Assembler usage:
 35077                                  ;           MOV     ES,block
 35078                                  ;           MOV     AH,dealloc
 35079                                  ;           INT     21h
 35080                                  ;
 35081                                  ;   Error return:
 35082                                  ;           AX = error_invalid_block
 35083                                  ;              = error_arena_trashed
 35084                                  ;---------------------------------------------------------------------------- 
 35085                                  
 35086                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35087                                  _$DEALLOC:
 35088                                  	; 14/05/2019 - Retro DOS v4.0    
 35089                                  	; 04/08/2018 - Retro DOS v3.0
 35090                                  	;EnterCrit   critMem
 35091 000063F6 E814AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35092                                  
 35093                                  	; MSDOS 6.0			; M016, M068 - Start
 35094 000063F9 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35095                                  					; Q: was the previous call an int 21
 35096                                  					;    exec call
 35097 000063FF 740D                    	jz	short deallocate	; N: continue
 35098 00006401 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35099 00006407 7505                    	jne	short deallocate	; N: continue
 35100                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35101                                  	; 25/09/2023
 35102 00006409 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35103                                  deallocate:				; M016, M068 - End
 35104 0000640E BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35105 00006411 8CC0                            MOV     AX,ES
 35106 00006413 48                              DEC     AX
 35107 00006414 E833FE                          CALL    check_signature
 35108 00006417 720A                            JC      SHORT dealloc_err
 35109 00006419 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35110                                  	;LeaveCrit critMem
 35111 0000641E E807AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35112                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35113                                          ;transfer SYS_RET_OK
 35114                                  dealloc_ok:
 35115 00006421 EBAC                    	jmp	short alloc_ok
 35116                                  	;JMP	SYS_RET_OK
 35117                                  
 35118                                  dealloc_err:
 35119                                  	;LeaveCrit critMem
 35120 00006423 E802AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35121                                          ;error	error_invalid_block
 35122                                  	;mov	al,9
 35123 00006426 B009                    	MOV	AL,error_invalid_block
 35124                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35125                                  dealloc_errj:
 35126                                  AllocOperErrj:	; 17/12/2022
 35127 00006428 E915A2                  	JMP	SYS_RET_ERR
 35128                                  
 35129                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35130                                  
 35131                                  ; MSDOS 6.0
 35132                                  ;----------------------------------------------------------------------------
 35133                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35134                                  ;
 35135                                  ;	Assembler usage:
 35136                                  ;           MOV     AH,AllocOper
 35137                                  ;           MOV     BX,method
 35138                                  ;           MOV     AL,func
 35139                                  ;           INT     21h
 35140                                  ;
 35141                                  ;	ENTRY	
 35142                                  ;		(al) = 0
 35143                                  ;		  Get allocation Strategy in (ax)
 35144                                  ;
 35145                                  ;		(al) = 1, (bx) = method = zw0000xy
 35146                                  ;		  Set allocation strategy.
 35147                                  ;		   w  = 1  => HIGH_ONLY
 35148                                  ;		   z  = 1  => HIGH_FIRST
 35149                                  ;		   xy = 00 => FIRST_FIT
 35150                                  ;		      = 01 => BEST_FIT
 35151                                  ;		      = 10 => LAST_FIT
 35152                                  ;
 35153                                  ;		(al) = 2
 35154                                  ;		  Get UMB link state in (al)
 35155                                  ;
 35156                                  ;		(al) = 3
 35157                                  ;		  Set UMB link state
 35158                                  ;		   (bx) = 0 => Unlink UMBs
 35159                                  ;		   (bx) = 1 => Link UMBs
 35160                                  ;
 35161                                  ;
 35162                                  ;	EXIT	'C' clear if OK
 35163                                  ;
 35164                                  ;		 if (al) = 0
 35165                                  ;		  (ax) = existing method
 35166                                  ;		 if (al) = 1
 35167                                  ;		  Sets allocation strategy
 35168                                  ;		 if (al) = 2
 35169                                  ;		  (al) = 0 => UMBs not linked
 35170                                  ;		  (al) = 1 => UMBs linked in
 35171                                  ;		 if (al) = 3
 35172                                  ;		  Links/Unlinks the UMBs into DOS chain
 35173                                  ;
 35174                                  ;		'C' set if error
 35175                                  ;		  AX = error_invalid_function
 35176                                  ;
 35177                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 35178                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 35179                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 35180                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 35181                                  ;		    arena' if an arena sig is damaged.
 35182                                  ;----------------------------------------------------------------------------
 35183                                  
 35184                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35185                                  ;----------------------------------------------------------------------------
 35186                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 35187                                  ;
 35188                                  ;   Assembler usage:
 35189                                  ;           MOV     AH,AllocOper
 35190                                  ;           MOV     BX,method
 35191                                  ;           MOV     AL,func
 35192                                  ;           INT     21h
 35193                                  ;
 35194                                  ;   Error return:
 35195                                  ;           AX = error_invalid_function
 35196                                  ;----------------------------------------------------------------------------
 35197                                  
 35198                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35199                                  _$ALLOCOPER:
 35200                                  	; 14/05/2019 - Retro DOS v4.0
 35201                                  	; MSDOS 6.0
 35202 0000642B 08C0                    	or	al,al ; 0
 35203 0000642D 741E                    	jz	short AllocGetStrat
 35204                                  	; 17/12/2022
 35205                                  	;cmp	al,1
 35206                                  	;jz	short AllocSetStrat
 35207                                  
 35208                                  	; 01/12/2022
 35209                                  	;cmp	al, 2
 35210                                  	;jb	short AllocSetStrat
 35211                                  	;ja	short AllocSetLink
 35212                                  	;;jmp	short AllocGetLink
 35213                                  ;AllocGetLink:
 35214                                  	; MSDOS 6.0
 35215                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 35216                                  	;and 	al,LINKSTATE		
 35217                                  	;;transfer SYS_RET_OK
 35218                                  	;jmp	SYS_RET_OK
 35219                                  
 35220 0000642F 3C02                    	cmp	al,2
 35221                                  	; 17/12/2022
 35222 00006431 7223                    	jb	short AllocSetStrat ; al = 1
 35223 00006433 7432                    	je	short AllocGetLink
 35224                                  
 35225                                  	;cmp	al,2
 35226                                  	;jz	short AllocGetLink
 35227 00006435 3C03                    	cmp	al,3
 35228 00006437 7436                    	jz	short AllocSetLink
 35229                                  
 35230                                  	; 15/04/2018
 35231                                  	;CMP	AL,1
 35232                                          ;JB	SHORT AllocOperGet
 35233                                          ;JZ	SHORT AllocOperSet
 35234                                  
 35235                                  AllocOperError:
 35236                                  	; 04/08/2018 - Retro DOS v3.0
 35237                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 35238                                  	;mov	byte [ss:EXTERR_LOCUS],5
 35239 00006439 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35240                                  	;error	error_invalid_function
 35241                                  	;mov	al,1
 35242 0000643F B001                    	MOV	AL,error_invalid_function
 35243                                  	; 17/12/2022
 35244                                  ;AllocOperErrj:
 35245                                  	;JMP	SYS_RET_ERR
 35246                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35247                                  	;jmp	short dealloc_errj
 35248                                  	; 17/12/2022
 35249 00006441 EBE5                    	jmp	short AllocOperErrj
 35250                                  
 35251                                  AllocArenaError:
 35252                                  	; MSDOS 6.0
 35253 00006443 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 35254                                  					; M009: Extended Error Locus
 35255                                  	;error	error_arena_trashed	; M009:
 35256                                  	;mov	al,7
 35257 00006449 B007                    	MOV	AL,error_arena_trashed
 35258                                  	;JMP	SYS_RET_ERR
 35259 0000644B EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 35260                                  
 35261                                  AllocGetStrat: 
 35262                                  	; MSDOS 6.0
 35263                                  AllocOperGet:
 35264 0000644D 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 35265 00006451 30E4                            XOR     AH,AH
 35266                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35267                                  	;transfer SYS_RET_OK
 35268                                  AllocOperOk:
 35269                                  	; 17/12/2022
 35270                                  	;jmp	short dealloc_ok
 35271 00006453 E9E1A1                  	JMP	SYS_RET_OK
 35272                                  
 35273                                  AllocSetStrat: 
 35274                                  	; 14/05/2019
 35275                                  	; MSDOS 6.0
 35276 00006456 53                      	push	bx			; M000 - start
 35277                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35278                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 35279                                  	; 17/12/2022
 35280 00006457 80E33F                  	and	bl,3Fh
 35281 0000645A 83FB02                  	cmp	bx,2			; BX must be 0-2
 35282                                  	;cmp	bl,2
 35283 0000645D 5B                      	pop	bx			; M000 - end
 35284 0000645E 77D9                    	ja	short AllocOperError
 35285                                  
 35286                                  AllocOperSet:
 35287 00006460 36881E[0203]                    MOV     [SS:AllocMethod],BL
 35288                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35289                                  	;transfer SYS_RET_OK
 35290                                  AllocOperOkj:
 35291 00006465 EBEC                    	jmp	short AllocOperOk
 35292                                  	;JMP	SYS_RET_OK
 35293                                  
 35294                                  AllocGetLink:
 35295                                  	; MSDOS 6.0
 35296 00006467 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 35297                                  	;and	al,1
 35298 0000646B 2401                    	and 	al,LINKSTATE		
 35299                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35300                                  	;transfer SYS_RET_OK
 35301                                  AllocOperOkj2:
 35302                                  	; 17/12/2022
 35303 0000646D EBE4                    	jmp	short AllocOperOk
 35304                                  	;jmp	short AllocOperOkj
 35305                                  	;;JMP	SYS_RET_OK
 35306                                  
 35307                                  AllocSetLink:
 35308                                  	; MSDOS 6.0			; M009 - start
 35309 0000646F 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 35310 00006474 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 35311 00006477 74C0                    	je	short AllocOperError	; N: error
 35312                                  					; Y: continue
 35313                                  					; M009 - end
 35314 00006479 83FB01                  	cmp	bx,1			
 35315 0000647C 7204                    	jb	short UnlinkUmbs
 35316 0000647E 741C                    	jz	short LinkUmbs
 35317                                  	
 35318 00006480 EBB7                    	jmp	short AllocOperError
 35319                                  	
 35320                                  UnlinkUmbs:
 35321                                  	;test	byte [ss:UMBFLAG],1
 35322 00006482 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 35323 00006488 7410                    	jz	short unlinked		; Y: return 
 35324                                  	
 35325 0000648A E82900                  	call	GetLastArena		; get arena before umb_head in DS
 35326 0000648D 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 35327                                  	
 35328                                  					; make it last
 35329 0000648F C60600005A              	mov	byte [0],arena_signature_end
 35330                                  	
 35331                                  	;and	byte [ss:UMBFLAG],0FEh
 35332 00006494 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 35333                                  	
 35334                                  unlinked:
 35335                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35336                                  	;transfer SYS_RET_OK
 35337                                  	; 17/12/2022
 35338 0000649A EBB7                    	jmp	short AllocOperOk
 35339                                  	;jmp	short AllocOperOkj2
 35340                                  	;;JMP	SYS_RET_OK
 35341                                  
 35342                                  LinkUmbs:
 35343 0000649C 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 35344 000064A2 7510                    	jnz	short linked		; Y: return
 35345                                  	
 35346 000064A4 E80F00                  	call	GetLastArena		; get arena before umb_head
 35347 000064A7 729A                    	jc	short AllocArenaError	; M009: arena trashed
 35348                                  	
 35349                                  					; make it normal. M061: ds points to
 35350                                  					; arena before umb_head
 35351 000064A9 C60600004D              	mov	byte [0],arena_signature_normal
 35352                                  	
 35353 000064AE 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 35354                                  linked:
 35355                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35356                                  	;transfer SYS_RET_OK
 35357                                  	; 17/12/2022
 35358 000064B4 EB9D                    	jmp	short AllocOperOk
 35359                                  	;jmp	short unlinked
 35360                                  	;;JMP	SYS_RET_OK
 35361                                  
 35362                                  ; MSDOS 6.0
 35363                                  ;--------------------------------------------------------------------------
 35364                                  ; Procedure Name : GetLastArena		-  M003
 35365                                  ;
 35366                                  ; Inputs	 : cx = umb_head
 35367                                  ;
 35368                                  ;
 35369                                  ; Outputs	 : If UMBs are linked
 35370                                  ;			ES = umb_head
 35371                                  ;			DS = arena before umb_head
 35372                                  ;		   else
 35373                                  ;			DS = last arena
 35374                                  ;			ES = next arena. will be umb_head if NC.
 35375                                  ;
 35376                                  ;		   CY if error
 35377                                  ;
 35378                                  ; Uses		 : DS, ES, DI, BX
 35379                                  ;--------------------------------------------------------------------------
 35380                                  
 35381                                  ; 14/05/2019 - Retro DOS v4.0
 35382                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 35383                                  
 35384                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35385                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 35386                                  	
 35387                                  GetLastArena:
 35388 000064B6 50                      	push	ax			; save ax
 35389                                  
 35390 000064B7 36A1[2400]              	mov	ax,[ss:arena_head]
 35391 000064BB 8EC0                    	mov	es,ax			; es = arena_head
 35392 000064BD 31FF                    	xor	di,di
 35393                                  
 35394 000064BF 26803D5A                	cmp     byte [es:di],arena_signature_end
 35395                                  					; Q: is this the last arena
 35396 000064C3 7419                    	je	short GLA_done		; Y: return last arena in ES		
 35397                                  					
 35398                                  GLA_next:
 35399 000064C5 8ED8                    	mov	ds,ax
 35400 000064C7 E879FD                  	call	arena_next		; ax, es -> next arena
 35401                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35402                                  	;jc	short GLA_err
 35403                                  	; 17/12/2022
 35404 000064CA 7228                    	jc	short GLA_err2
 35405                                  
 35406 000064CC 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35407 000064D2 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 35408                                  					;    umb_head
 35409                                  					; N: terminating condition is 05Ah
 35410                                  
 35411 000064D4 26803D5A                	cmp     byte [es:di],arena_signature_end
 35412                                  					; Q: is this the last arena
 35413 000064D8 EB02                    	jmp	short GLA_@f
 35414                                  GLA_chkumb:
 35415 000064DA 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35416                                  GLA_@f:
 35417 000064DC 75E7                    	jne	short GLA_next		; N: get next arena
 35418                                  
 35419                                  GLA_done:
 35420                                  					; M061 - Start
 35421 000064DE 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35422 000064E4 750B                    	jnz	short GLA_ret		; Y: we're done
 35423                                  					; N: let us confirm that the next 
 35424                                  					;    arena is umb_head
 35425 000064E6 8ED8                    	mov	ds,ax
 35426 000064E8 E858FD                  	call	arena_next		; ax, es -> next arena
 35427                                  	;jc	short GLA_err
 35428 000064EB 7207                    	jc	short GLA_err2
 35429 000064ED 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35430 000064EF 7502                    	jne	short GLA_err		; N: error
 35431                                  					; M061 - End
 35432                                  GLA_ret:
 35433                                  	; 17/12/2022				
 35434                                  	;clc
 35435                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35436                                  	;clc
 35437 000064F1 58                      	pop	ax			; M061
 35438 000064F2 C3                      	retn				; M061
 35439                                  
 35440                                  GLA_err:
 35441 000064F3 F9                      	stc				; M061
 35442                                  GLA_err2:
 35443 000064F4 58                      	pop	ax
 35444 000064F5 C3                      	retn
 35445                                  
 35446                                  ;============================================================================
 35447                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35448                                  ;============================================================================
 35449                                  ; 04/08/2018 - Retro DOS v3.0
 35450                                  
 35451                                  ;	TITLE SRVCALL - Server DOS call
 35452                                  ;	NAME  SRVCALL
 35453                                  
 35454                                  ;**	SRVCALL.ASM - Server DOS call functions
 35455                                  ;
 35456                                  ;
 35457                                  ;	$ServerCall
 35458                                  ;
 35459                                  ;	Modification history:
 35460                                  ;
 35461                                  ;	    Created: ARR 08 August 1983
 35462                                  
 35463                                  ;AsmVars <Installed>
 35464                                  
 35465                                  ;include dpl.asm
 35466                                  
 35467                                  ;Installed = TRUE
 35468                                  
 35469                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 35470                                  ; ---------------------------------------------------------------------------
 35471                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35472                                  
 35473                                  ;BREAK <ServerCall -- Server DOS call>
 35474                                  
 35475                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 35476                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 35477                                  
 35478                                  ;hkn; TABLE	SEGMENT
 35479                                  ;Public SRVC001S,SRVC001E
 35480                                  ;SRVC001S label byte
 35481                                  
 35482                                  SRVC001S:
 35483                                  
 35484 000064F6 [FA64]                  SERVERTAB:	dw	SERVER_DISP
 35485 000064F8 [4C65]                  SERVERLEAVE:	dw	SERVERRETURN
 35486 000064FA 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 35487 000064FB [B465]                  		dw	SRV_CALL	; 0
 35488 000064FD [4D65]                  		dw	COMMIT_ALL	; 1
 35489 000064FF [8365]                  		dw	CLOSE_NAME	; 2
 35490 00006501 [8E65]                  		dw	CLOSE_UID	; 3
 35491 00006503 [9565]                  		dw	CLOSE_UID_PID	; 4
 35492 00006505 [9C65]                  		dw	GET_LIST	; 5
 35493 00006507 [F565]                  		dw	GET_DOS_DATA	; 6
 35494 00006509 [1966]                  		dw	SPOOL_OPER	; 7
 35495 0000650B [1966]                  		dw	SPOOL_OPER	; 8
 35496 0000650D [1966]                  		dw	SPOOL_OPER	; 9
 35497 0000650F [2566]                  		dw	_$SetExtendedError  ; 10
 35498                                  
 35499                                  SERVER_DISP_END:  ;  LABEL BYTE
 35500                                  
 35501                                  ;SRVC001E label byte
 35502                                  
 35503                                  SRVC001E:
 35504                                  
 35505                                  ;hkn; TABLE	ENDS
 35506                                  
 35507                                  ;----------------------------------------------------------------------------
 35508                                  ;
 35509                                  ; Procedure Name : $ServerCall
 35510                                  ;
 35511                                  ; Inputs:
 35512                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 35513                                  ; Function:
 35514                                  ;	AL=0	Server DOS call
 35515                                  ;	AL=1	Commit All files
 35516                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35517                                  ;	AL=3	Close all files for DPL_UID
 35518                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35519                                  ;	AL=5	Get open file list entry
 35520                                  ;		    IN: BX File Index
 35521                                  ;			CX User Index
 35522                                  ;		    OUT:ES:DI -> Name
 35523                                  ;			BX = UID
 35524                                  ;		    CX = # locked blocks held by this UID
 35525                                  ;	AL=6	Get DOS data area
 35526                                  ;		    OUT: DS:SI -> Start
 35527                                  ;			CX size in bytes of swap if indos
 35528                                  ;			DX size in bytes of swap always
 35529                                  ;	AL=7	Get truncate flag
 35530                                  ;	AL=8	Set truncate flag
 35531                                  ;	AL=9	Close all spool files
 35532                                  ;	AL=10	SetExtendedError
 35533                                  ;
 35534                                  ;----------------------------------------------------------------------------
 35535                                  
 35536                                  _$ServerCall:
 35537                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35538                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35539                                  	; 10/06/2019
 35540                                  	; 29/04/2019 - Retro DOS v4.0
 35541                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35542                                  
 35543                                  	; 05/08/2018 - Retro DOS v3.0
 35544                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35545 00006511 3C07                    	CMP	AL,7
 35546 00006513 7204                    	JB	short SET_STUFF
 35547 00006515 3C09                    	CMP	AL,9
 35548 00006517 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35549                                  SET_STUFF:
 35550 00006519 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35551                                  	;mov	bx,[si+12h]
 35552 0000651B 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35553                                  
 35554                                  	; MSDOS 6.0
 35555                                  ;SR;
 35556                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35557                                  ; of USER_ID
 35558                                  
 35559 0000651E 36F606[3010]01          	test	byte [SS:IsWin386],1
 35560 00006524 7505                    	jnz	short skip_win386
 35561                                  
 35562                                  ;hkn; SS override for user_id and proc_id
 35563                                  	; 15/08/2018
 35564 00006526 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35565                                  
 35566                                  skip_win386:
 35567 0000652B 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35568 0000652E 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35569                                  NO_SET_ID:
 35570                                  	; 10/06/2019 - Retro DOS v4.0
 35571 00006533 2EFF36[F864]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35572 00006538 2EFF36[F664]            	PUSH	word [cS:SERVERTAB]	; push table address
 35573 0000653D 50                      	PUSH	AX
 35574 0000653E E8DFAC                  	call	TableDispatch
 35575                                  
 35576                                  ;hkn; SS override
 35577                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35578 00006541 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35579                                  	;error	error_invalid_function
 35580                                  	;mov	al,1
 35581 00006547 B001                    	MOV	AL,error_invalid_function
 35582                                  servercall_error:
 35583 00006549 E9F4A0                  	JMP	SYS_RET_ERR
 35584                                  
 35585                                  SERVERRETURN:
 35586 0000654C C3                      	retn
 35587                                  
 35588                                  ; Commit - iterate through the open file list and make sure that the
 35589                                  ; directory entries are correctly updated.
 35590                                  
 35591                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35592                                  COMMIT_ALL:
 35593 0000654D 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35594 0000654F 16                      	push	ss
 35595 00006550 1F                      	pop	ds
 35596 00006551 E8B9AD                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35597                                  CommitLoop:
 35598 00006554 53                      	push	bx
 35599 00006555 E82401                  	call	SFFromSFN
 35600 00006558 7222                    	JC	short CommitDone
 35601 0000655A 26833D00                	cmp	word [es:di],0
 35602                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35603                                  					; if (ThisSFT->refcount != 0)
 35604 0000655E 7418                    	JZ	short CommitNext
 35605                                  	;cmp	word [es:di],0FFFFh ; -1
 35606 00006560 26833DFF                	cmp	word [ES:DI],sf_busy
 35607                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35608                                  					; BUSY SFTs have god knows what
 35609 00006564 7412                    	JZ	short CommitNext	;   in them.
 35610                                  	; 17/12/2022
 35611 00006566 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35612                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35613 0000656B 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35614                                  					;	doesn't deadlock
 35615 0000656D 893E[9E05]              	MOV	[THISSFT],DI
 35616 00006571 8C06[A005]              	MOV	[THISSFT+2],ES
 35617 00006575 E8FDCA                  	call	DOS_COMMIT		;	DOSCommit ();
 35618                                  CommitNext:
 35619 00006578 5B                      	pop	bx
 35620 00006579 43                      	INC	BX
 35621 0000657A EBD8                    	JMP	short CommitLoop
 35622                                  CommitDone:
 35623 0000657C E8A9AD                  	call	LCritSFT
 35624 0000657F 5B                      	pop	bx
 35625                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35626                                  Commit_Ok:
 35627 00006580 E9B4A0                  	jmp	SYS_RET_OK
 35628                                  	
 35629                                  
 35630                                  CLOSE_NAME:
 35631                                  
 35632                                  ;if installed
 35633                                  
 35634                                  ;hkn; SS override
 35635                                  	;call	far [ss:MFTcloN]
 35636 00006583 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35637                                  ;else
 35638                                  ;	Call	MFTcloN
 35639                                  ;endif
 35640                                  
 35641                                  CheckReturns:
 35642 00006588 7202                    	JC	short func_err
 35643                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35644                                  	;transfer SYS_RET_OK
 35645                                  Commit_Okj:
 35646 0000658A EBF4                    	jmp	short Commit_Ok
 35647                                  	;jmp	SYS_RET_OK
 35648                                  
 35649                                  func_err:
 35650                                  	;transfer SYS_RET_ERR
 35651                                  	;jmp	SYS_RET_ERR
 35652 0000658C EBBB                    	jmp	short servercall_error
 35653                                  
 35654                                  CLOSE_UID:
 35655                                  
 35656                                  ;if installed
 35657                                  ;hkn; SS override
 35658                                  	;call	far [ss:MFTclU]
 35659 0000658E 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35660                                  ;else
 35661                                  ;	Call	MFTclU
 35662                                  ;endif
 35663 00006593 EBF3                    	JMP	short CheckReturns
 35664                                  
 35665                                  CLOSE_UID_PID:
 35666                                  
 35667                                  ;if installed
 35668                                  ;hkn; SS override
 35669                                  	;call	far [ss:MFTCloseP]
 35670 00006595 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35671                                  ;else
 35672                                  ;	Call	MFTCloseP
 35673                                  ;endif
 35674 0000659A EBEC                    	JMP	short CheckReturns
 35675                                  
 35676                                  GET_LIST:
 35677                                  
 35678                                  ;if installed
 35679                                  ;hkn; SS override
 35680                                  	;call	far [ss:MFT_get]
 35681 0000659C 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35682                                  ;else
 35683                                  ;	Call	MFT_get
 35684                                  ;endif
 35685 000065A1 72E9                    	JC	short func_err
 35686 000065A3 E8DB9E                  	call	Get_User_Stack
 35687                                  	;mov	[si+2],bx
 35688 000065A6 895C02                  	MOV	[SI+user_env.user_BX],BX
 35689                                  	;mov	[si+10],di
 35690 000065A9 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35691                                  	;mov	[si+16],es
 35692 000065AC 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35693                                  SetCXOK:
 35694                                  	;mov	[si+4],cx
 35695 000065AF 894C04                  	MOV	[SI+user_env.user_CX],CX
 35696                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35697                                  	;transfer SYS_RET_OK
 35698                                  Commit_Okj2:
 35699                                  	; 17/12/2022
 35700 000065B2 EBCC                    	jmp	short Commit_Ok
 35701                                  	;jmp	short Commit_Okj
 35702                                  	;;jmp	SYS_RET_OK
 35703                                  
 35704                                  SRV_CALL:
 35705 000065B4 58                      	POP	AX			; get rid of call to $srvcall
 35706 000065B5 1E                      	push	ds
 35707 000065B6 56                      	push	si
 35708 000065B7 E8C79E                  	call	Get_User_Stack
 35709 000065BA 5F                      	pop	di
 35710 000065BB 07                      	pop	es
 35711                                  
 35712                                  ; DS:SI point to stack
 35713                                  ; ES:DI point to DPL
 35714                                  
 35715 000065BC E840AC                  	call	XCHGP
 35716                                  
 35717                                  ; DS:SI point to DPL
 35718                                  ; ES:DI point to stack
 35719                                  ;
 35720                                  ; We now copy the registers from DPL to save stack
 35721                                  
 35722 000065BF 56                      	push	si
 35723 000065C0 B90600                  	MOV	CX,6
 35724 000065C3 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35725 000065C5 47                      	INC	DI
 35726 000065C6 47                      	INC	DI			; Skip user_BP
 35727 000065C7 A5                      	MOVSW				; DS
 35728 000065C8 A5                      	MOVSW				; ES
 35729 000065C9 5E                      	pop	si			; DS:SI -> DPL
 35730 000065CA 8B04                    	mov	ax,[SI]
 35731                                  	;MOV	AX,[SI+DPL.AX]
 35732                                  	;mov	bx,[si+2]
 35733 000065CC 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35734                                  	;mov	cx,[si+4]
 35735 000065CF 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35736                                  	;mov	dx,[si+6]
 35737 000065D2 8B5406                  	MOV	DX,[SI+DPL.DX]
 35738                                  	;mov	di,[si+10]
 35739 000065D5 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35740                                  	;mov	es,[si+14]
 35741 000065D8 8E440E                  	MOV	ES,[SI+DPL.ES]
 35742                                  	;push	word [si+8]
 35743 000065DB FF7408                  	PUSH	word [SI+DPL.SI]
 35744                                  	;mov	ds,[si+12]
 35745 000065DE 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35746 000065E1 5E                      	POP	SI
 35747                                  
 35748                                  ;hkn; SS override for next 3
 35749 000065E2 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35750 000065E7 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35751 000065EC 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35752 000065F2 E9939D                  	jmp	REDISP
 35753                                  
 35754                                  GET_DOS_DATA:
 35755 000065F5 16                      	push	ss
 35756 000065F6 07                      	pop	es
 35757 000065F7 BF[2003]                	MOV     DI,SWAP_START
 35758 000065FA B9[AC0A]                	MOV     CX,SWAP_END
 35759 000065FD BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35760 00006600 29F9                    	SUB     CX,DI
 35761 00006602 29FA                    	SUB     DX,DI
 35762 00006604 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35763 00006606 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35764 00006609 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35765 0000660B E8739E                  	call	Get_User_Stack
 35766                                  	;mov	[si+14],es
 35767 0000660E 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35768                                  	;mov	[si+8],di
 35769 00006611 897C08                  	MOV     [SI+user_env.user_SI],DI
 35770                                  	;mov	[si+6],dx
 35771 00006614 895406                  	MOV     [SI+user_env.user_DX],DX
 35772 00006617 EB96                    	JMP	short SetCXOK
 35773                                  
 35774                                  SPOOL_OPER:
 35775                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35776                                  
 35777 00006619 50                      	push    ax
 35778 0000661A B82511                  	mov     ax,1125h
 35779 0000661D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35780                                  			; STACK: WORD subfunction
 35781                                  			; Return: CF set on error, AX = error code
 35782                                  			; STACK unchanged
 35783 0000661F 5B                      	pop	bx
 35784                                  	; 17/12/2022
 35785                                  	;JC	short func_err2
 35786 00006620 7390                    	jnc	short Commit_Okj2
 35787                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35788                                  	;;jmp	SYS_RET_OK
 35789                                  	;jmp	short Commit_Okj2
 35790                                  	
 35791                                  func_err2:
 35792 00006622 E91BA0                  	jmp	SYS_RET_ERR
 35793                                  
 35794                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35795                                  ;--------------------------------------------------------------------------
 35796                                  ;
 35797                                  ; Procedure Name : $SetExtendedError
 35798                                  ;
 35799                                  ; $SetExtendedError takes extended error information and loads it up for the
 35800                                  ; next extended error call. This is used by interrupt-level proccessors to
 35801                                  ; mask their actions.
 35802                                  ;
 35803                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35804                                  ;   Outputs: none
 35805                                  ;
 35806                                  ;---------------------------------------------------------------------------
 35807                                  
 35808                                  _$SetExtendedError:
 35809                                  
 35810                                  ;hkn; SS override for all variables used
 35811                                  
 35812 00006625 8B04                    	mov	ax,[si]
 35813                                  	;MOV	AX,[SI+DPL.AX]
 35814 00006627 36A3[2403]              	MOV	[SS:EXTERR],AX
 35815                                  	;mov	ax,[si+10]
 35816 0000662B 8B440A                  	MOV	AX,[SI+DPL.DI]
 35817 0000662E 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35818                                  	;mov	ax,[si+14]
 35819 00006632 8B440E                  	MOV	AX,[SI+DPL.ES]
 35820 00006635 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35821                                  	;mov	ax,[si+2]
 35822 00006639 8B4402                  	MOV	AX,[SI+DPL.BX]
 35823 0000663C 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35824                                  	;mov	ax,[si+4]
 35825 00006640 8B4404                  	MOV	AX,[SI+DPL.CX]
 35826 00006643 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35827 00006648 C3                      	retn
 35828                                  
 35829                                  ;============================================================================
 35830                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35831                                  ;============================================================================
 35832                                  ; 05/08/2018 - Retro DOS v3.0
 35833                                  ; 05/05/2019 - Retro DOS v4.0
 35834                                  
 35835                                  ;**	Handle related utilities for MSDOS 2.X.
 35836                                  ;----------------------------------------------------------------------------
 35837                                  ;	pJFNFromHandle	written
 35838                                  ;	SFFromHandle	written
 35839                                  ;	SFFromSFN	written
 35840                                  ;	JFNFree 	written
 35841                                  ;	SFNFree 	written
 35842                                  ;
 35843                                  ;	Modification history:
 35844                                  ;
 35845                                  ;	    Created: MZ 1 April 1983
 35846                                  ;----------------------------------------------------------------------------
 35847                                  
 35848                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35849                                  
 35850                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35851                                  ;----------------------------------------------------------------------------
 35852                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35853                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35854                                  ;
 35855                                  ;	NOTE:
 35856                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35857                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35858                                  ;
 35859                                  ;	ENTRY	(bx) = handle
 35860                                  ;	EXIT	'C' clear if ok
 35861                                  ;		  (es:di) = address of JFN value
 35862                                  ;		'C' set if error
 35863                                  ;		  (ax) = error code
 35864                                  ;	USES	AX, DI, ES, Flags
 35865                                  ;----------------------------------------------------------------------------
 35866                                  
 35867                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35868                                  
 35869                                  pJFNFromHandle:
 35870                                  	; 05/05/2019 - Retro DOS v4.0
 35871                                  	;getdseg <es>			; es -> dosdata
 35872 00006649 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35873                                  	
 35874                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35875 0000664E 268E06[3003]            	mov	es,[es:CurrentPDB]
 35876                                  
 35877                                  	;cmp	bx,[ES:32h]
 35878 00006653 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35879 00006658 7204                    	JB	short pjfn10		; no, get offset
 35880                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35881                                  	;mov	al,6
 35882 0000665A B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35883                                  ReturnCarry:
 35884 0000665C F9                      	STC                             ; signal error
 35885 0000665D C3                      	retn				; go back
 35886                                  pjfn10: 
 35887                                  	;les	di,[es:34h]
 35888 0000665E 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35889 00006663 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35890                                  	;clc
 35891                                  pJFNFromHandle_error:
 35892 00006665 C3                      	retn
 35893                                  
 35894                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35895                                  ;----------------------------------------------------------------------------
 35896                                  ;
 35897                                  ; Procedure Name : SFFromHandle
 35898                                  ;
 35899                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35900                                  ;
 35901                                  ;   Input:      BX has handle
 35902                                  ;   Output:     Carry Set
 35903                                  ;                   AX has error code
 35904                                  ;               Carry Reset
 35905                                  ;                   ES:DI has pointer to SF entry
 35906                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35907                                  ; NOTE:
 35908                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35909                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35910                                  ;
 35911                                  ;----------------------------------------------------------------------------
 35912                                  
 35913                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35914                                  
 35915                                  SFFromHandle:
 35916 00006666 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35917                                  	;retc				; return if error
 35918 00006669 72FA                    	jc	short pJFNFromHandle_error
 35919 0000666B 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35920                                  	;JNZ	short GetSF		; nope, suck out SF
 35921                                  	;;mov	al,6
 35922                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35923                                  	;jmp	short ReturnCarry	; signal it
 35924                                  	; 17/12/2022
 35925                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35926 0000666F 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35927                                  	;JNZ	short GetSF		; nope, suck out SF
 35928                                  	;;mov	al,6
 35929                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35930                                  	;jmp	short ReturnCarry	; signal it
 35931                                  GetSF:
 35932 00006671 53                      	push	bx			; save handle
 35933 00006672 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35934 00006675 30FF                    	XOR     BH,BH                   ; ignore upper half
 35935 00006677 E80200                  	CALL    SFFromSFN               ; get real sf spot
 35936 0000667A 5B                      	pop	bx			; restore
 35937 0000667B C3                      	retn                        	; say goodbye
 35938                                  
 35939                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35940                                  
 35941                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35942                                  ;----------------------------------------------------------------------------
 35943                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35944                                  ;	is more than just a simple index instruction because the SF table
 35945                                  ;	can be made up of multiple pieces chained together. We follow the
 35946                                  ;	chain to the right piece and then do the index operation.
 35947                                  ;
 35948                                  ;   NOTE:
 35949                                  ;	This routine is called from SFFromHandle which is called
 35950                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35951                                  ;
 35952                                  ;	ENTRY	BX has SF index
 35953                                  ;	EXIT	'C' clear if OK
 35954                                  ;		  ES:DI points to SF entry
 35955                                  ;		'C' set if index too large
 35956                                  ;	USES	BX, DI, ES
 35957                                  ;----------------------------------------------------------------------------
 35958                                  
 35959                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35960                                  
 35961                                  SFFromSFN:
 35962                                  	; 05/05/2019 - Retro DOS v4.0
 35963                                  	;getdseg <es>			; es -> dosdata
 35964 0000667C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35965                                  
 35966                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35967 00006681 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35968                                  sfsfn5:	
 35969                                  	;cmp	bx,[es:di+4]
 35970 00006686 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35971 0000668A 720E                    	JB	short sfsfn7		; yes, go grab it
 35972                                  	;sub	bx,[es:di+4]
 35973 0000668C 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35974 00006690 26C43D                  	les	di,[es:di] ; 14/08/2018
 35975                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35976 00006693 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35977 00006696 75EE                    	JNZ	short sfsfn5		; no, try again
 35978 00006698 F9                      	STC
 35979 00006699 C3                      	retn				; return with error, not found
 35980                                  sfsfn7:
 35981 0000669A 50                      	push	ax
 35982                                  	;mov	ax,53 ; MSDOS 3.3
 35983                                  	;mov	ax,59 ; MSDOS 6.0
 35984                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35985                                  	
 35986                                  	; 17/12/2022
 35987 0000669B B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35988                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35989                                  	;mov	ax,SF_ENTRY.size ; 59
 35990                                  	
 35991 0000669D F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35992 0000669F 01C7                    	ADD	DI,AX			; add base of SF block
 35993 000066A1 58                      	pop	ax
 35994                                  	;add	di,6
 35995 000066A2 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35996 000066A5 C3                      	retn				; return with 'C' clear
 35997                                  
 35998                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35999                                  
 36000                                  ;**	JFNFree - Find a Free JFN Slot
 36001                                  ;----------------------------------------------------------------------------
 36002                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36003                                  ;
 36004                                  ;	ENTRY	(ss) = DOSDATA
 36005                                  ;	EXIT	'C' clear if OK
 36006                                  ;		  (bx) = new handle
 36007                                  ;		  (es:di) = pointer to JFN slot
 36008                                  ;		'C' set if error
 36009                                  ;		  (al) = error code
 36010                                  ;	USES	bx, di, es, flags
 36011                                  ;----------------------------------------------------------------------------
 36012                                  
 36013                                  JFNFree:
 36014 000066A6 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36015                                  jfnf1:	
 36016 000066A8 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36017 000066AB 7209                    	JC	short jfnf5		; no more handles
 36018 000066AD 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36019 000066B1 7405                    	je	short jfnfx		; yes, carry is clear
 36020 000066B3 43                      	INC     BX                      ; no, next handle
 36021 000066B4 EBF2                    	JMP	short jfnf1		; and try again
 36022                                  
 36023                                  	; Error. 'C' set
 36024                                  jfnf5:	
 36025                                  	;mov	al,4
 36026 000066B6 B004                    	MOV	AL,error_too_many_open_files
 36027                                  jfnfx:	
 36028 000066B8 C3                      	retn				; bye
 36029                                  
 36030                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36031                                  
 36032                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36033                                  ;----------------------------------------------------------------------------
 36034                                  ;	SFNFree scans through the sf table looking for a free entry
 36035                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36036                                  ;
 36037                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36038                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36039                                  ;	we can't just mark it busy because we may get blown out of our open
 36040                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36041                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36042                                  ;	an SFT with this value we look to see if it belongs to this user
 36043                                  ;	and process.  If it does belong to us then it must be an orphan
 36044                                  ;	and we reclaim it.
 36045                                  ;
 36046                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36047                                  ;		over and over, but we could at least set a high water mark...
 36048                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36049                                  ;		even though this is not a frequently called routine - jgl
 36050                                  ;
 36051                                  ;	ENTRY	(ss) = DOSDATA
 36052                                  ;	EXIT	'C' clear if no error
 36053                                  ;		  (bx) = SFN
 36054                                  ;		  (es:di) = pointer to SFT
 36055                                  ;		  es:[di].SFT_REF_COUNT = -1
 36056                                  ;		'C' set if error
 36057                                  ;		  (al) = error code
 36058                                  ;	USES	bx, di, es, Flags
 36059                                  ;----------------------------------------------------------------------------
 36060                                  
 36061                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36062                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36063                                  
 36064                                  SFNFree:
 36065                                  	; 12/08/2018
 36066                                  	; 05/08/2018 - Retro DOS v3.0
 36067                                  	;
 36068                                  	; MSDOS 6.0
 36069 000066B9 50                      	push	ax
 36070 000066BA 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36071                                  sfnf5:	
 36072 000066BC 53                      	push	bx
 36073 000066BD E8BCFF                  	call	SFFromSFN		; get the potential handle
 36074 000066C0 5B                      	pop	bx
 36075 000066C1 723A                    	jc	short sfnf95		; no more free SFNs
 36076 000066C3 26833D00                	cmp	word [ES:DI],0
 36077                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36078 000066C7 741D                    	je	short sfnf20			; yep, got one
 36079                                  	
 36080                                  	;cmp	word [es:di],0FFFFh ; -1
 36081 000066C9 26833DFF                	cmp	word [ES:DI],sf_busy
 36082                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36083 000066CD 7403                    	je	short sfnf10		; special busy mark
 36084                                  sfnf7:	
 36085 000066CF 43                      	inc	bx			; try the next one
 36086 000066D0 EBEA                    	jmp	short sfnf5
 36087                                  
 36088                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36089                                  ;	it was abandoned during a earlier call and we can use it.
 36090                                  ;
 36091                                  ;	(bx)	= SFN
 36092                                  ;	(es:di) = pointer to SFT
 36093                                  ;	(TOS)	= caller's (ax)
 36094                                  
 36095                                  sfnf10:	
 36096 000066D2 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36097                                  	;cmp	[es:di+2Fh],ax
 36098 000066D6 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36099 000066DA 75F3                    	jnz	short sfnf7		; not ours
 36100 000066DC 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36101                                  	;cmp	[es:di+31h],ax
 36102 000066E0 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36103 000066E4 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36104                                  
 36105                                  ;	We have an SFT to allocate
 36106                                  ;
 36107                                  ;	(bx)	= SFN
 36108                                  ;	(es:di) = pointer to SFT
 36109                                  ;	(TOS)	= caller's (ax)
 36110                                  
 36111                                  sfnf20:
 36112                                  	; cf = 0 ;; Retro DOS v3.0
 36113                                  
 36114                                  	;mov	word [es:di],0FFFFh
 36115 000066E6 26C705FFFF              	mov	word [ES:DI],sf_busy
 36116                                  					; make sure that this is allocated
 36117                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36118                                  
 36119 000066EB 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36120                                  	;mov	[es:di+2Fh],ax
 36121 000066EF 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36122 000066F3 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36123                                  	;mov	[es:di+31h],ax
 36124 000066F7 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36125                                  sfnf21: ;; Retro DOS v3.0
 36126                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36127                                  	;pop	ax
 36128                                  	;;clc
 36129                                  	;retn				; return with no error
 36130                                  	; 17/12/2022
 36131 000066FB 58                      	pop	ax
 36132                                  	;clc
 36133 000066FC C3                      	retn
 36134                                  
 36135                                  ;**	Error - no more free SFNs
 36136                                  ;
 36137                                  ;	'C' set
 36138                                  ;	(TOS) = saved ax
 36139                                  
 36140                                  sfnf95: 
 36141 000066FD 58                      	pop	ax
 36142                                  	;mov	al,4
 36143 000066FE B004                    	mov	al,error_too_many_open_files
 36144 00006700 C3                      	retn				; return with 'C' and error
 36145                                  
 36146                                  ;============================================================================
 36147                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36148                                  ;============================================================================
 36149                                  ; 13/07/2018 - Retro DOS v3.0
 36150                                  ; 20/05/2019 - Retro DOS v4.0
 36151                                  
 36152                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 36153                                  
 36154                                  ;	BREAK <$Close - return a handle to the system>
 36155                                  ;----------------------------------------------------------------------------
 36156                                  ;
 36157                                  ;**	$Close - Close a file Handle
 36158                                  ;
 36159                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 36160                                  ;		path
 36161                                  ;
 36162                                  ;	Assembler usage:
 36163                                  ;	    MOV     BX, handle
 36164                                  ;	    MOV     AH, Close
 36165                                  ;	    INT     int_command
 36166                                  ;
 36167                                  ;	ENTRY	(bx) = handle
 36168                                  ;	EXIT	<normal INT21 return convention>
 36169                                  ;	USES	all
 36170                                  ;
 36171                                  ;----------------------------------------------------------------------------
 36172                                  
 36173                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36174                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 36175                                  
 36176                                  _$CLOSE:
 36177                                  ;	Grab the SFT pointer from the JFN.
 36178                                  
 36179 00006701 E85A02                  	call	CheckOwner		; get system file entry
 36180 00006704 722B                    	jc	short CloseError	; error return
 36181 00006706 16                      	push	ss
 36182 00006707 1F                      	pop	ds			; For DOS_CLOSE
 36183 00006708 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36184 0000670C 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36185                                  
 36186                                  ; DS:SI point to JFN table entry.
 36187                                  ; ES:DI point to SFT
 36188                                  ;
 36189                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 36190                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 36191                                  ; If the file was not a net FCB, we free the JFN too.
 36192                                  
 36193                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 36194 00006710 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 36195 00006714 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 36196                                  	;mov	al,[ES:DI+2]
 36197 00006716 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 36198                                  	;and	al,0F0h
 36199 0000671A 24F0                    	AND	AL,SHARING_MASK
 36200                                  	;cmp	al,70h
 36201 0000671C 3C70                    	CMP	AL,SHARING_NET_FCB
 36202 0000671E 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 36203                                  
 36204                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 36205                                  ; -1.
 36206                                  
 36207                                  FreeJFN:
 36208 00006720 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 36209 00006723 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 36210                                  PostFree:
 36211                                  
 36212                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 36213                                  
 36214 00006727 E8FDC7                  	call	DOS_CLOSE
 36215                                  
 36216                                  ; DOS_Close may return an error. If we see such an error, we report it but
 36217                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 36218                                  
 36219 0000672A 7205                    	JC	short CloseError
 36220                                  	;mov	ah,3Eh
 36221 0000672C B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 36222                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36223                                  CloseOk:
 36224 0000672E E9069F                  	jmp	SYS_RET_OK
 36225                                  CloseError:
 36226 00006731 E90C9F                  	jmp	SYS_RET_ERR
 36227                                  
 36228                                  ;	BREAK <$Commit - commit the file>
 36229                                  ;----------------------------------------------------------------------------
 36230                                  ;
 36231                                  ;**	$Commit - Commit a File
 36232                                  ;
 36233                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 36234                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 36235                                  ;	the directory entry, etc., so this commit is pretty useless. check
 36236                                  ;	and fix this!! jgl
 36237                                  ;
 36238                                  ;	Assembler usage:
 36239                                  ;	    MOV     BX, handle
 36240                                  ;	    MOV     AH, Commit
 36241                                  ;	    INT     int_command
 36242                                  ;
 36243                                  ;	ENTRY	(bx) = handle
 36244                                  ;	EXIT	none
 36245                                  ;	USES	all
 36246                                  ;;----------------------------------------------------------------------------
 36247                                  
 36248                                  _$COMMIT:
 36249                                  ;	Grab the SFT pointer from the JFN.
 36250                                  
 36251 00006734 E82702                  	call	CheckOwner		; get system file entry
 36252 00006737 7213                    	JC	short CommitError	; error return
 36253 00006739 16                      	push	ss
 36254 0000673A 1F                      	pop	ds			; For DOS_COMMIT
 36255 0000673B 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 36256 0000673F 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 36257                                  
 36258                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 36259                                  ;
 36260                                  ;	ES:DI point to SFT
 36261                                  
 36262 00006743 E82FC9                  	call	DOS_COMMIT
 36263 00006746 7204                    	JC	short CommitError
 36264                                  	; 07/12/2022
 36265                                  	;jc	short CloseError
 36266                                  	;mov	ah,68h
 36267 00006748 B468                    	MOV	AH,COMMIT
 36268                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36269                                  	;jmp	SYS_RET_OK
 36270                                  CommitOk:
 36271 0000674A EBE2                    	jmp	short CloseOk	
 36272                                  
 36273                                  CommitError:
 36274                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36275                                  	;jmp	SYS_RET_ERR
 36276 0000674C EBE3                    	jmp	short CloseError
 36277                                  
 36278                                  ;	BREAK <$ExtHandle - extend handle count>
 36279                                  
 36280                                  ;**	$ExtHandle - Extend Handle Count
 36281                                  ;----------------------------------------------------------------------------
 36282                                  ;	Assembler usage:
 36283                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 36284                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 36285                                  ;	    INT     int_command 		 busy )
 36286                                  ;
 36287                                  ;	ENTRY	(bx) = new number of handles
 36288                                  ;	EXIT	'C' clear if OK
 36289                                  ;		'C' set iff err
 36290                                  ;		  (ax) = error code
 36291                                  ;			 AX = error_not_enough_memory
 36292                                  ;			      error_too_many_open_files
 36293                                  ;	USES	all
 36294                                  ;----------------------------------------------------------------------------
 36295                                  
 36296                                  _$ExtHandle:
 36297 0000674E 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 36298                                  	;cmp	bx,20
 36299 00006750 83FB14                  	CMP	BX,FILPERPROC
 36300 00006753 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 36301 00006755 BB1400                  	MOV	BX,FILPERPROC
 36302                                  exth2:	
 36303 00006758 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 36304                                  	;mov	cx,[ES:32h]
 36305 0000675D 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 36306 00006762 39CB                    	CMP	BX,CX			; the requested == current
 36307 00006764 7455                    	JE	short ok_done 		; yes and exit
 36308 00006766 7722                    	JA	short larger		; go allocate new table
 36309                                  
 36310                                  ;	We're going to shrink the # of handles available
 36311                                  
 36312 00006768 BD0100                  	MOV	BP,1			; shrink
 36313                                  	;mov	ds,[ES:36h]
 36314 0000676B 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 36315 00006770 89DE                    	MOV	SI,BX			;
 36316 00006772 29D9                    	SUB	CX,BX			; get difference
 36317                                  
 36318                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 36319                                  chck_handles:
 36320 00006774 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 36321 00006777 753D                    	JNZ	short too_many_files	; status
 36322 00006779 46                      	INC	SI
 36323 0000677A E2F8                    	LOOP	chck_handles
 36324 0000677C 83FB14                  	CMP	BX,FILPERPROC		; = 20
 36325 0000677F 7709                    	JA	short larger		; no
 36326                                  
 36327 00006781 BD0200                  	MOV	BP,2			; psp
 36328                                  	;mov	di,24
 36329 00006784 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 36330 00006787 53                      	PUSH	BX
 36331 00006788 EB1D                    	JMP	short movhandl
 36332                                  
 36333                                  larger:
 36334 0000678A 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 36335 0000678D 747F                    	JZ	short invalid_func	; 10/08/2018
 36336 0000678F F8                      	CLC
 36337 00006790 53                      	PUSH	BX			; save requested number
 36338 00006791 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 36339 00006794 B104                    	MOV	CL,4
 36340                                  	;ror	bx,cl			; MSDOS 3.3
 36341 00006796 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 36342 00006798 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 36343                                  
 36344 0000679C 55                      	PUSH	BP
 36345 0000679D E8DCFA                  	call	_$ALLOC			; allocate memory
 36346 000067A0 5D                      	POP	BP
 36347 000067A1 7266                    	JC	short no_memory		; not enough meory
 36348                                  
 36349 000067A3 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 36350 000067A5 31FF                    	XOR	DI,DI
 36351                                  movhandl:
 36352 000067A7 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 36353                                  
 36354 000067AC F7C50300                	test	BP,3			; enlarge ?
 36355 000067B0 740C                    	JZ	short enlarge 		; yes
 36356 000067B2 59                      	POP	CX			; cx = the amount you shrink
 36357 000067B3 51                      	PUSH	CX
 36358 000067B4 EB0C                    	JMP	short copy_hand
 36359                                  
 36360                                  ;	Done.  'C' clear
 36361                                  
 36362                                  ; 17/12/2022
 36363                                  ;ok_done:
 36364                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36365                                  ;	;jmp	short CommitOk
 36366                                  ;	; 17/12/2022
 36367                                  ;	jmp	SYS_RET_OK
 36368                                  
 36369                                  too_many_files:
 36370                                  	;mov	al,4
 36371 000067B6 B004                    	MOV	AL,error_too_many_open_files
 36372                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36373                                  	;jmp	SYS_RET_ERR
 36374                                  CommitErrorj:
 36375                                  	;jmp	short CommitError
 36376                                  	; 17/12/2022
 36377 000067B8 E9859E                  	jmp	SYS_RET_ERR
 36378                                  
 36379                                  ; 17/12/2022 
 36380                                  ok_done:
 36381                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36382                                  	;jmp	short CommitOk
 36383                                  	; 17/12/2022
 36384 000067BB E9799E                  	jmp	SYS_RET_OK
 36385                                  
 36386                                  enlarge:
 36387                                  	;mov	cx,[32h]
 36388 000067BE 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 36389                                  copy_hand:
 36390 000067C2 89CA                    	MOV	DX,CX
 36391                                  	;lds	si,[34h]
 36392 000067C4 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 36393 000067C8 F3A4                    	REP	MOVSB			; copy infomation to new table
 36394 000067CA 59                      	POP	CX			; get new number of handles
 36395 000067CB 51                      	PUSH	CX			; save it again
 36396 000067CC 29D1                    	SUB	CX,DX			; get the difference
 36397 000067CE B0FF                    	MOV	AL,-1			; set availability to handles
 36398 000067D0 F3AA                    	REP	STOSB
 36399 000067D2 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 36400                                  	;cmp	word [34h],0
 36401 000067D7 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 36402 000067DC 750D                    	JNZ	short update_info	; yes, go update PDB entries
 36403 000067DE 55                      	PUSH	BP
 36404 000067DF 1E                      	PUSH	DS			; save old table segment
 36405 000067E0 06                      	PUSH	ES			; save new table segment
 36406 000067E1 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 36407 000067E5 E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 36408 000067E8 07                      	POP	ES			; restore new table segment
 36409 000067E9 1F                      	POP	DS			; restore old table segment
 36410 000067EA 5D                      	POP	BP
 36411                                  
 36412                                  update_info:
 36413 000067EB F7C50200                	test	BP,2			; psp?
 36414 000067EF 7408                    	JZ	short non_psp 		; no
 36415                                  	;mov	word [34h],18h ; 24
 36416 000067F1 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36417 000067F7 EB06                    	JMP	short final
 36418                                  non_psp:
 36419                                  	;mov	word [34h],0
 36420 000067F9 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36421                                  final:
 36422                                  	;mov	[36h],es	
 36423 000067FF 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36424                                  	;pop	word [32h]
 36425 00006803 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36426                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36427                                  	;jmp	SYS_RET_OK
 36428                                  ok_done_j:
 36429 00006807 EBB2                    	jmp	short ok_done
 36430                                  
 36431                                  no_memory:
 36432 00006809 5B                      	POP	BX			; clean stack
 36433                                  	;mov	al,8
 36434 0000680A B008                    	MOV	AL,error_not_enough_memory
 36435                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36436                                  	;jmp	SYS_RET_ERR
 36437                                  CommitErrorj2:
 36438 0000680C EBAA                    	jmp	short CommitErrorj
 36439                                  
 36440                                  invalid_func:
 36441                                  	;mov	al,1
 36442 0000680E B001                    	MOV	AL,error_invalid_function
 36443                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36444                                  	;jmp	SYS_RET_ERR
 36445                                  CommitErrorj3:
 36446                                  	;jmp	short CommitErrorj2
 36447                                  	; 17/12/2022
 36448 00006810 EBA6                    	jmp	short CommitErrorj
 36449                                  
 36450                                  ; 20/05/2019 - Retro DOS v4.0
 36451                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36452                                  
 36453                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36454                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36455                                  
 36456                                  ;	BREAK <$READ - Read from a file handle>
 36457                                  ;----------------------------------------------------------------------------
 36458                                  ;
 36459                                  ;**	$Read - Read from a File Handle
 36460                                  ;
 36461                                  ;   Assembler usage:
 36462                                  ;
 36463                                  ;	LDS	DX, buf
 36464                                  ;	MOV	CX, count
 36465                                  ;	MOV	BX, handle
 36466                                  ;	MOV	AH, Read
 36467                                  ;	INT	int_command
 36468                                  ;	  AX has number of bytes read
 36469                                  ;
 36470                                  ;	ENTRY	(bx) = file handle
 36471                                  ;		(cx) = byte count
 36472                                  ;		(ds:dx) = buffer address
 36473                                  ;	EXIT	Through system call return so that to user:
 36474                                  ;		  'C' clear if OK
 36475                                  ;		    (ax) = bytes read
 36476                                  ;		  'C' set if error
 36477                                  ;		    (ax) = error code
 36478                                  ;
 36479                                  ;----------------------------------------------------------------------------
 36480                                  
 36481                                  _$READ:
 36482 00006812 BE[CE32]                	MOV	SI,DOS_READ
 36483                                  ReadDo:
 36484 00006815 E831FE                  	call	pJFNFromHandle
 36485 00006818 7208                    	JC	short ReadError
 36486                                  
 36487 0000681A 268A05                  	MOV	AL,[ES:DI]
 36488 0000681D E83E01                  	call	CheckOwner		; get the handle
 36489 00006820 7303                    	JNC	short ReadSetup		; no errors do the operation
 36490                                  
 36491                                  ;	Have an error. 'C' set
 36492                                  
 36493                                  ReadError:
 36494                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36495                                  	;;jmp	SYS_RET_ERR		; go to error traps
 36496                                  	;jmp	short CommitErrorj3
 36497                                  	; 17/12/2022
 36498 00006822 E91B9E                  	jmp	SYS_RET_ERR
 36499                                  
 36500                                  ReadSetup:
 36501 00006825 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 36502 0000682A 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 36503                                  	; 20/05/2019 - Retro DOS v4.0
 36504                                  	; MSDOS 6.0 
 36505                                  ;; Extended Open
 36506                                  	;test	byte [es:di+3],20h
 36507 0000682F 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 36508                                  						 ;AN000;;EO. need i24
 36509 00006834 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 36510 00006836 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 36511                                  					;AN000;;EO. set it off;smr;SS Override
 36512                                  needi24:				;AN000;
 36513                                  ;; Extended Open
 36514 0000683C 36FF36[2C03]            	push	word [SS:DMAADD]
 36515 00006841 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36516                                  
 36517                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36518                                  
 36519                                  	; 26/07/2019
 36520                                  
 36521                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36522                                  	;
 36523                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36524                                  	; there is not another caller; it is better to put the code in this proc
 36525                                   	; here instead of calling it as a subroutine; but I have modified code
 36526                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36527                                  
 36528                                  	; MSDOS 6.0
 36529 00006846 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36530                                  	
 36531                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36532                                  	; MSDOS 3.3
 36533                                  	;MOV	BX,DX			; copy offset
 36534                                  	;push	cx			; don't stomp on count
 36535                                  	;MOV	CL,4			; bits to shift bytes->para
 36536                                  	;SHR	BX,CL			; get number of paragraphs
 36537                                  	;pop	cx			; get count back
 36538                                  	;MOV	AX,DS			; get original segment
 36539                                  	;ADD	AX,BX			; get new segment
 36540                                  	;MOV	DS,AX			; in seg register
 36541                                  	;AND	DX,0Fh			; normalize offset
 36542                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36543                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36544                                  						;smr;SS Override
 36545                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36546                                  	
 36547 00006849 16                      	push	ss			; go for DOS addressability
 36548 0000684A 1F                      	pop	ds
 36549                                  
 36550 0000684B FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36551                                  
 36552 0000684D 8F06[2E03]              	pop	word [DMAADD+2]
 36553 00006851 8F06[2C03]              	pop	word [DMAADD]
 36554                                  	;JNC	short READ_OK		;AN002;
 36555                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36556                                  	; 17/12/2022
 36557 00006855 72CB                    	jc	short ReadError
 36558                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36559                                  	;jnc	short READ_OK		;AN002;
 36560                                  	;jmp	short ReadError
 36561                                  
 36562                                  READ_OK:
 36563 00006857 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36564                                  Read_Okj:
 36565                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36566                                  	;;jmp	SYS_RET_OK		; successful return
 36567                                  	;jmp	short ok_done_j
 36568                                  	; 17/12/2022
 36569 00006859 E9DB9D                  	jmp	SYS_RET_OK
 36570                                  
 36571                                  ; 13/07/2018 - Retro DOS v3.0
 36572                                  
 36573                                  ;----------------------------------------------------------------------------
 36574                                  
 36575                                  ;   Input: DS:DX points to user's buffer addr
 36576                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36577                                  ;   Output: [DMAADD] set
 36578                                  
 36579                                  ; 20/05/2019 - Retro DOS v4.0
 36580                                  ; 26/07/2019
 36581                                  ;	; MSDOS 6.0
 36582                                  ;Align_Buffer:
 36583                                  ;	MOV	BX,DX			; copy offset
 36584                                  ;	push	cx			; don't stomp on count
 36585                                  ;	MOV	CL,4			; bits to shift bytes->para
 36586                                  ;	SHR	BX,CL			; get number of paragraphs
 36587                                  ;	pop	cx			; get count back
 36588                                  ;	MOV	AX,DS			; get original segment
 36589                                  ;	ADD	AX,BX			; get new segment
 36590                                  ;	MOV	DS,AX			; in seg register
 36591                                  ;	AND	DX,0Fh			; normalize offset
 36592                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36593                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36594                                  ;						;smr;SS Override
 36595                                  ;	retn
 36596                                  
 36597                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36598                                  Align_Buffer:
 36599 0000685C 89D3                    	MOV	BX,DX			; copy offset
 36600 0000685E 51                      	push	cx			; don't stomp on count
 36601 0000685F B104                    	MOV	CL,4			; bits to shift bytes->para
 36602 00006861 D3EB                    	SHR	BX,CL			; get number of paragraphs
 36603 00006863 59                      	pop	cx			; get count back
 36604 00006864 8CD8                    	MOV	AX,DS			; get original segment
 36605 00006866 01D8                    	ADD	AX,BX			; get new segment
 36606 00006868 8ED8                    	MOV	DS,AX			; in seg register
 36607 0000686A 83E20F                  	AND	DX,0Fh			; normalize offset
 36608 0000686D 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36609 00006872 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36610                                  						;smr;SS Override
 36611 00006877 C3                      	retn
 36612                                  
 36613                                  ; 20/05/2019 - Retro DOS v4.0
 36614                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36615                                  
 36616                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36617                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36618                                  
 36619                                  ;BREAK <$WRITE - write to a file handle>
 36620                                  ;----------------------------------------------------------------------------
 36621                                  ;
 36622                                  ;   Assembler usage:
 36623                                  ;	    LDS     DX, buf
 36624                                  ;	    MOV     CX, count
 36625                                  ;	    MOV     BX, handle
 36626                                  ;	    MOV     AH, Write
 36627                                  ;	    INT     int_command
 36628                                  ;	  AX has number of bytes written
 36629                                  ;   Errors:
 36630                                  ;	    AX = write_invalid_handle
 36631                                  ;	       = write_access_denied
 36632                                  ;
 36633                                  ;   Returns in register AX
 36634                                  ;
 36635                                  ;----------------------------------------------------------------------------
 36636                                  
 36637                                  _$WRITE:
 36638 00006878 BE[F734]                	MOV	SI,DOS_WRITE
 36639 0000687B EB98                    	JMP	short ReadDo
 36640                                  
 36641                                  ;BREAK <$LSEEK - move r/w pointer>
 36642                                  ;----------------------------------------------------------------------------
 36643                                  ;
 36644                                  ;   Assembler usage:
 36645                                  ;	    MOV     DX, offsetlow
 36646                                  ;	    MOV     CX, offsethigh
 36647                                  ;	    MOV     BX, handle
 36648                                  ;	    MOV     AL, method
 36649                                  ;	    MOV     AH, LSeek
 36650                                  ;	    INT     int_command
 36651                                  ;	  DX:AX has the new location of the pointer
 36652                                  ;   Error returns:
 36653                                  ;	    AX = error_invalid_handle
 36654                                  ;	       = error_invalid_function
 36655                                  ;   Returns in registers DX:AX
 36656                                  ;
 36657                                  ;----------------------------------------------------------------------------
 36658                                  
 36659                                  ; 21/05/2019 - Retro DOS v4.0
 36660                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36661                                  
 36662                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36663                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36664                                  
 36665                                  _$LSEEK:
 36666 0000687D E8DE00                  	call	CheckOwner		; get system file entry
 36667                                  
 36668                                  	; 17/12/2022
 36669                                  ;LSeekError:
 36670                                  	;JNC	short CHKOWN_OK		;AN002;
 36671                                  	;JMP	short ReadError		;AN002; error return
 36672                                  	; 17/12/2022
 36673                                  	; 02/06/2019
 36674 00006880 72A0                    	jc	short ReadError
 36675                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36676                                  	;JNC	short CHKOWN_OK		;AN002;
 36677                                  	;JMP	short ReadError		;AN002; error return
 36678                                  
 36679                                  CHKOWN_OK:
 36680                                  					;AN002;
 36681 00006882 3C02                    	CMP	AL,2			; is the seek value correct?
 36682 00006884 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36683                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36684 00006886 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36685                                  					;smr;SS Override
 36686                                  	;mov	al,1
 36687 0000688C B001                    	mov	al,error_invalid_function ; invalid method
 36688                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36689                                  LSeekError2:
 36690 0000688E EB92                    	jmp	short ReadError
 36691                                  
 36692                                  LSeekDisp:
 36693 00006890 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36694 00006892 720A                    	JB	short LSeekStore	; just store CX:DX
 36695 00006894 771B                    	JA	short LSeekEOF		; seek from end of file
 36696                                  	;add	dx,[es:di+21]
 36697 00006896 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36698                                  	;adc	cx,[es:di+23]
 36699 0000689A 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36700                                  LSeekStore:
 36701 0000689E 89C8                    	MOV	AX,CX			; AX:DX
 36702 000068A0 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36703                                  LSeekSetpos:
 36704                                  	;mov	[es:di+21],ax
 36705 000068A1 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36706                                  	;mov	[es:di+23],dx
 36707 000068A5 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36708 000068A9 E8D59B                  	call	Get_User_Stack
 36709                                  	;mov	[si+6],dx
 36710 000068AC 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36711                                  	;jmp	SYS_RET_OK		; successful return
 36712                                  	; 25/06/2019
 36713                                  	;jmp	SYS_RET_OK_clc
 36714                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36715                                  	;jmp	SYS_RET_OK_clc
 36716                                  LSeekOk:
 36717 000068AF EBA8                    	jmp     short Read_Okj
 36718                                  
 36719                                  LSeekEOF:
 36720                                  	;;test	word [es:di+5],8000h
 36721                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36722                                  	; 21/05/2019 - Retro DOS v4.0
 36723 000068B1 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36724 000068B6 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36725                                  LOCAL_LSeek:
 36726                                  	;add	dx,[es:di+17]
 36727 000068B8 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36728                                  	;adc	cx,[es:di+19]
 36729 000068BC 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36730 000068C0 EBDC                    	JMP	short LSeekStore	; go and set the position
 36731                                  
 36732                                  Check_LSeek_Mode:
 36733                                  	;;test	word [es:di+2],8000h
 36734                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36735                                  	; 21/05/2019
 36736 000068C2 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36737 000068C7 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36738                                  	;mov	ax,[es:di+2]
 36739 000068C9 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36740                                  	;and	ax, 0F0h
 36741 000068CD 25F000                  	AND	AX,SHARING_MASK
 36742                                  	;cmp	ax,40h
 36743 000068D0 83F840                  	CMP	AX,SHARING_DENY_NONE
 36744 000068D3 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36745                                  	;cmp	ax,30h
 36746 000068D5 83F830                  	CMP	AX,SHARING_DENY_READ
 36747 000068D8 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36748                                  NET_LSEEK:
 36749                                  ;	JMP	short LOCAL_LSeek
 36750                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36751                                  	;CallInstall Net_Lseek,MultNET,33
 36752                                  	;JNC	short LSeekSetPos
 36753                                  
 36754 000068DA B82111                  	mov     ax,1121h
 36755 000068DD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36756                                  			; CX:DX = offset (in bytes) from end
 36757                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36758                                  			; SS = DOS CS
 36759                                  			; Return: CF set on error
 36760                                  			; CF clear if successful, DX:AX = new file position
 36761 000068DF 73C0                    	jnb     short LSeekSetpos
 36762                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36763                                  	;jmp	SYS_RET_ERR
 36764                                  ;LSeekError3:
 36765                                  	; 17/12/2022
 36766                                  LSeekError:
 36767                                  	;jmp	short LSeekError2
 36768                                  DupErr:	; 17/12/2022
 36769 000068E1 E95C9D                  	jmp	SYS_RET_ERR
 36770                                  
 36771                                  ;BREAK <FileTimes - modify write times on a handle>
 36772                                  ;----------------------------------------------------------------------------
 36773                                  ;
 36774                                  ;   Assembler usage:
 36775                                  ;	    MOV AH, FileTimes (57H)
 36776                                  ;	    MOV AL, func
 36777                                  ;	    MOV BX, handle
 36778                                  ;	; if AL = 1 then then next two are mandatory
 36779                                  ;	    MOV CX, time
 36780                                  ;	    MOV DX, date
 36781                                  ;	    INT 21h
 36782                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36783                                  ;	; for the handle.
 36784                                  ;
 36785                                  ;	AL=02		 get extended attributes
 36786                                  ;	   BX=handle
 36787                                  ;	   CX=size of buffer (0, return max size )
 36788                                  ;	   DS:SI query list (si=-1, selects all EA)
 36789                                  ;	   ES:DI buffer to hold EA list
 36790                                  ;
 36791                                  ;	AL=03		 get EA name list
 36792                                  ;	   BX=handle
 36793                                  ;	   CX=size of buffer (0, return max size )
 36794                                  ;	   ES:DI buffer to hold name list
 36795                                  ;
 36796                                  ;	AL=04		 set extended attributes
 36797                                  ;	   BX=handle
 36798                                  ;	   ES:DI buffer of EA list
 36799                                  ;
 36800                                  ;
 36801                                  ;   Error returns:
 36802                                  ;	    AX = error_invalid_function
 36803                                  ;	       = error_invalid_handle
 36804                                  ;
 36805                                  ;----------------------------------------------------------------------------
 36806                                  
 36807                                  ; 21/05/2019 - Retro DOS v4.0
 36808                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36809                                  
 36810                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36811                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36812                                  
 36813                                  _$FILE_TIMES:
 36814                                  	; 13/07/2018 - Retro DOS v3.0
 36815                                  
 36816                                  	; MSDOS 3.3
 36817                                  	;cmp	al,2			; correct subfunction ?
 36818                                  	;jb	short ft1
 36819                                  
 36820                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36821                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36822                                  						;SS Overr
 36823                                  	;;mov	al,1
 36824                                  	;mov	al,error_invalid_function ; give bad return
 36825                                  	;jmp	SYS_RET_ERR
 36826                                  
 36827                                  	; MSDOS 6.0
 36828 000068E4 3C02                    	cmp	al,2			; correct subfunction ?
 36829 000068E6 7340                    	jae	short inval_func
 36830                                  ;ft1:
 36831 000068E8 E87300                  	call	CheckOwner		; get sft
 36832                                  	; 17/12/2022
 36833 000068EB 72F4                    	jc	short LSeekError	; bad handle
 36834                                  
 36835 000068ED 08C0                    	or	al,al			; get time/date ?
 36836 000068EF 7515                    	jnz	short ft_set_time
 36837                                  
 36838                                  ;------ here we get the time & date from the sft for the user
 36839                                  
 36840 000068F1 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36841                                  	;mov	cx,[es:di+13]
 36842 000068F2 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36843                                  	;mov	dx,[es:di+15]
 36844 000068F6 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36845 000068FA FB                      	sti
 36846 000068FB E8839B                  	call	Get_User_Stack
 36847                                  	;mov	[si+4],cx
 36848 000068FE 894C04                  	mov	[si+user_env.user_CX],cx
 36849                                  	;mov	[si+6],dx
 36850 00006901 895406                  	mov	[si+user_env.user_DX],dx
 36851 00006904 EB1F                    	jmp	short ok_ret
 36852                                  
 36853                                  ;------ here we set the time in sft
 36854                                  
 36855                                  ft_set_time:
 36856 00006906 E804AA                  	call    ECritSFT
 36857                                  	;mov	[es:di+13],cx
 36858 00006909 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36859                                  	;mov	[es:di+15],dx
 36860 0000690D 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36861                                  
 36862 00006911 31C0                    	xor	ax, ax
 36863 00006913 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36864                                  
 36865                                  ;------ set the flags in SFT entry
 36866                                  	;and	word [es:di+5],0FFBFh
 36867                                  	; 18/12/2022
 36868                                  	;and	byte [es:di+5],0BFh
 36869 00006918 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36870                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36871                                  							; mark file as dirty
 36872                                  	;or	word [es:di+5],4000h
 36873                                  	; 17/12/2022
 36874                                  	;or	byte [es:di+6],40h
 36875 0000691D 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36876                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36877                                  							; ask close not to
 36878                                  							;   bother about date
 36879                                  							;   and time
 36880 00006922 E803AA                  	call	LCritSFT
 36881                                  ok_ret:
 36882                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36883                                  	; 17/12/2022
 36884 00006925 E90F9D                  	jmp	SYS_RET_OK
 36885                                  	;jmp	short LSeekOk
 36886                                  
 36887                                  inval_func:
 36888                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36889 00006928 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36890                                  						;SS Overr
 36891                                  	;mov	al,1
 36892 0000692E B001                    	mov	al,error_invalid_function ; give bad return
 36893                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36894                                  ft_error:
 36895                                  	;;jmp	SYS_RET_ERR
 36896                                  	;jmp	short LSeekError3
 36897                                  	; 17/12/2022
 36898 00006930 EBAF                    	jmp	short LSeekError
 36899                                  
 36900                                  ; 21/05/2019 - Retro DOS v4.0
 36901                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36902                                  
 36903                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36904                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36905                                  
 36906                                  ;BREAK <$DUP - duplicate a jfn>
 36907                                  ;----------------------------------------------------------------------------
 36908                                  ;
 36909                                  ;   Assembler usage:
 36910                                  ;	    MOV     BX, fh
 36911                                  ;	    MOV     AH, Dup
 36912                                  ;	    INT     int_command
 36913                                  ;	  AX has the returned handle
 36914                                  ;   Errors:
 36915                                  ;	    AX = dup_invalid_handle
 36916                                  ;	       = dup_too_many_open_files
 36917                                  ;
 36918                                  ;----------------------------------------------------------------------------
 36919                                  
 36920                                  _$DUP:
 36921 00006932 89D8                    	MOV	AX,BX			; save away old handle in AX
 36922 00006934 E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36923                                  DupErrorCheck:
 36924 00006937 72A8                    	JC	short DupErr		; nope, bye
 36925 00006939 06                      	push	es
 36926 0000693A 57                      	push	di			; save away SFT
 36927 0000693B 5E                      	pop	si			; into convenient place DS:SI
 36928 0000693C 1F                      	pop	ds
 36929 0000693D 93                      	XCHG	AX,BX			; get back old handle
 36930 0000693E E81D00                  	call	CheckOwner		; get sft in ES:DI
 36931 00006941 729E                    	JC	short DupErr		; errors go home
 36932 00006943 E8F2C0                  	call	DOS_Dup_Direct
 36933 00006946 E800FD                  	call	pJFNFromHandle		; get pointer
 36934 00006949 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36935 0000694C 881C                    	MOV	[SI],BL			; stuff in new SFT
 36936                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36937                                  	;jmp	SYS_RET_OK		; and go home
 36938 0000694E EBD5                    	jmp	short ok_ret
 36939                                  
 36940                                  	; 17/12/2022
 36941                                  ;DupErr:
 36942                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36943                                  	;;jmp	SYS_RET_ERR
 36944                                  	;jmp	short ft_error
 36945                                  
 36946                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36947                                  ;----------------------------------------------------------------------------
 36948                                  ;
 36949                                  ;   Assembler usage:
 36950                                  ;	    MOV     BX, fh
 36951                                  ;	    MOV     CX, newfh
 36952                                  ;	    MOV     AH, Dup2
 36953                                  ;	    INT     int_command
 36954                                  ;   Error returns:
 36955                                  ;	    AX = error_invalid_handle
 36956                                  ;
 36957                                  ;----------------------------------------------------------------------------
 36958                                  
 36959                                  _$DUP2:
 36960 00006950 53                      	push	bx
 36961 00006951 51                      	push	cx			; save source
 36962 00006952 89CB                    	MOV	BX,CX			; get one to close
 36963 00006954 E8AAFD                  	call	_$CLOSE			; close destination handle
 36964 00006957 5B                      	pop	bx
 36965 00006958 58                      	pop	ax			; old in AX, new in BX
 36966 00006959 E8EDFC                  	call	pJFNFromHandle		; get pointer
 36967 0000695C EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36968                                  
 36969                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36970                                  ;----------------------------------------------------------------------------
 36971                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36972                                  ;   process without the process knowing it (delete/rename of open files, for
 36973                                  ;   example), it is possible for the redirector to issue a call to a handle
 36974                                  ;   that it soes not rightfully own. We check here to make sure that the
 36975                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36976                                  ;   SFFromHandle to really make sure that the SFT is good.
 36977                                  ;
 36978                                  ;	ENTRY	BX has the handle
 36979                                  ;		User_ID is the current user
 36980                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36981                                  ;		Carry Set => AX has error code
 36982                                  ;	USES	none
 36983                                  ;----------------------------------------------------------------------------
 36984                                  
 36985                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36986                                  	; 21/05/2019 - Retro DOS v4.0
 36987                                  CheckOwner:
 36988                                  	; 13/07/2018 - Retro DOS v3.0
 36989                                  
 36990 0000695E E805FD                  	call	SFFromHandle
 36991 00006961 721B                    	jc	short co_ret_label	; retc
 36992                                  
 36993 00006963 50                      	push	ax
 36994                                  
 36995                                  	; MSDOS 6.0
 36996                                  
 36997                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36998                                  ;SR; are shared across multiple VMs in win386.
 36999                                  
 37000 00006964 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37001 0000696A 7404                    	jz	short no_win386		;win386 is not present
 37002 0000696C 31C0                    	xor	ax,ax			;set the zero flag
 37003 0000696E EB08                    	jmp	short _skip_win386	
 37004                                  
 37005                                  no_win386:
 37006 00006970 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37007                                  	;cmp	ax,[es:di+47]
 37008 00006974 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37009                                  
 37010                                  _skip_win386:
 37011 00006978 58                      	pop	ax
 37012                                  	
 37013                                  	; 17/12/2022
 37014 00006979 7403                    	jz	short co_ret_label
 37015                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37016                                  	;jnz	short CheckOwner_err
 37017                                  	;retn
 37018                                  	
 37019                                  CheckOwner_err:
 37020                                  	;mov	al,6
 37021 0000697B B006                    	mov	al,error_invalid_handle
 37022 0000697D F9                      	stc
 37023                                  
 37024                                  co_ret_label:
 37025 0000697E C3                      	retn
 37026                                  
 37027                                  ;============================================================================
 37028                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37029                                  ;============================================================================
 37030                                  ; Retro	DOS v3.0 - 11/07/2018
 37031                                  ; 21/05/2019 - Retro DOS v4.0
 37032                                  
 37033                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37034                                  ;	NAME	MACRO
 37035                                  
 37036                                  ;	Microsoft Confidential
 37037                                  ;	Copyright (C) Microsoft Corporation 1991
 37038                                  ;	All Rights Reserved.
 37039                                  
 37040                                  ;**	MACRO.ASM
 37041                                  ;
 37042                                  ;	$AssignOper
 37043                                  ;	FIND_DPB
 37044                                  ;	InitCDS
 37045                                  ;	$UserOper
 37046                                  ;	GetVisDrv
 37047                                  ;	GetThisDrv
 37048                                  ;	GetCDSFromDrv
 37049                                  ;
 37050                                  ;   Revision history:
 37051                                  ;
 37052                                  ;	Created: MZ 4 April 1983
 37053                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37054                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37055                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37056                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37057                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37058                                  ;				    aliasing.
 37059                                  ;
 37060                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37061                                  ;   each valid drive letter the text of the current directory on that drive.
 37062                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37063                                  ;   be at the root. A current directory is either the raw local directory
 37064                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37065                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37066                                  ;
 37067                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37068                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37069                                  ;   this and all * are expanded into ?'s.
 37070                                  ;
 37071                                  ;   The second part of name translation involves subtree aliasing. A list of
 37072                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37073                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37074                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37075                                  ;   replaced with the other subtree in the pair.
 37076                                  ;
 37077                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37078                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37079                                  ;   The output of the previous translation is examined to see if any of the
 37080                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37081                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37082                                  ;   'mount' one device under another.
 37083                                  ;
 37084                                  ;   The final form of name translation involves the mapping of a user's
 37085                                  ;   logical drive number into the internal physical drive. This is
 37086                                  ;   accomplished by converting the drive number into letter:CON, performing
 37087                                  ;   the above translation and then converting the character back into a drive
 37088                                  ;   number.
 37089                                  ;
 37090                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37091                                  ;   take a path and form the real text of the pathname with all . and ..
 37092                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 37093                                  ;   TransPath.
 37094                                  ;
 37095                                  ;	A000	version 4.00  Jan. 1988
 37096                                  
 37097                                  ;Installed = TRUE
 37098                                  
 37099                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 37100                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 37101                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 37102                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 37103                                  ;					; current drive)
 37104                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 37105                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 37106                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 37107                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 37108                                  ;	I_need	MYNAME,16		; machine name
 37109                                  ;	I_need	MYNUM,WORD		; machine number
 37110                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 37111                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 37112                                  ;	I_need	DrvErr,BYTE		; drive error
 37113                                  
 37114                                  ;BREAK <$AssignOper -- Set up a Macro>
 37115                                  ;----------------------------------------------------------------------------
 37116                                  ; Inputs:
 37117                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 37118                                  ;	AL = 01 set assign mode 		    (SetMode)
 37119                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 37120                                  ;	AL = 03 Define Macro (attch start)
 37121                                  ;	    BL = Macro type
 37122                                  ;	       = 0 alias
 37123                                  ;	       = 1 file/device
 37124                                  ;	       = 2 drive
 37125                                  ;	       = 3 Char device -> network
 37126                                  ;	       = 4 File device -> network
 37127                                  ;	    DS:SI -> ASCIZ source name
 37128                                  ;	    ES:DI -> ASCIZ destination name
 37129                                  ;	AL = 04 Cancel Macro
 37130                                  ;	    DS:SI -> ASCIZ source name
 37131                                  ;	AL = 05 Modified get attach list entry
 37132                                  ;	AL = 06 Get ifsfunc item
 37133                                  ;	AL = 07 set in_use of a drive's CDS
 37134                                  ;	     DL = drive number, 0=default  0=A,,
 37135                                  ;	AL = 08 reset in_use of a drive's CDS
 37136                                  ;	     DL = drive number, 0=A, 1=B,,,
 37137                                  ; Function:
 37138                                  ;	Do macro stuff
 37139                                  ; Returns:
 37140                                  ;	Std Xenix style error return
 37141                                  ;----------------------------------------------------------------------------
 37142                                  
 37143                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37144                                  	; 21/05/2019 - Retro DOS v4.0
 37145                                  _$AssignOper:
 37146                                  	; MSDOS 6.0
 37147 0000697F 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 37148 00006981 7525                    	JNZ	short chk08		      ; no			;AN000;
 37149                                  srinuse:								;AN000;
 37150 00006983 50                      	PUSH	AX			      ; save al 		;AN000;
 37151 00006984 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 37152 00006986 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 37153 00006989 58                      	POP	AX			      ; 			;AN000;
 37154 0000698A 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 37155                                  	;cmp	word [si+45h],0
 37156 0000698C 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 37157 00006990 7410                    	JZ	short baddrv		      ;     no			;AN000;
 37158 00006992 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 37159 00006994 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 37160                                  	;or	word [si+43h],4000h
 37161                                  	; 17/12/2022
 37162                                  	;or	byte [si+44h],40h
 37163 00006996 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37164                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 37165 0000699A EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 37166                                  resetdrv:
 37167                                  	;and	word [si+43h],0BFFFh									;AN000;
 37168                                  	; 18/12/2022
 37169 0000699C 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 37170                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 37171 000069A0 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 37172                                  
 37173                                  	; 17/12/2022
 37174                                  baddrv: 								;AN000;
 37175 000069A2 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 37176                                  
 37177                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37178                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 37179                                  	; 17/12/2022
 37180                                  	; 21/05/2019
 37181                                  ASS_ERR:
 37182 000069A5 E9989C                  	jmp	SYS_RET_ERR
 37183                                  
 37184                                  chk08:									;AN000;
 37185 000069A8 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 37186 000069AA 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 37187                                  
 37188                                    ;IF	NOT INSTALLED
 37189                                  	;transfer NET_ASSOPER
 37190                                    ;ELSE
 37191                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37192 000069AC 50                      	PUSH	AX
 37193                                  	;mov	ax,111Eh
 37194                                  	;MOV	AX,(MultNET SHL 8) OR 30
 37195 000069AD B81E11                  	mov	ax,(MultNET*256)+30
 37196 000069B0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 37197                                  			; SS = DOS CS
 37198                                  			; STACK: WORD function to execute
 37199                                  			; Return: CF set on error, AX = error code
 37200                                  			; STACK unchanged
 37201 000069B2 5B                      	POP	BX			; Don't zap error code in AX
 37202 000069B3 72F0                    	JC	short ASS_ERR
 37203                                  okdone:
 37204 000069B5 E97F9C                  	jmp	SYS_RET_OK
 37205                                  
 37206                                  	; 17/12/2022
 37207                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37208                                  ;ASS_ERR:
 37209                                  	;jmp	SYS_RET_ERR
 37210                                  
 37211                                    ;ENDIF
 37212                                  
 37213                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 37214                                  ;----------------------------------------------------------------------------
 37215                                  ;**	FIND_DPB - Find a DPB from a Drive #
 37216                                  ;
 37217                                  ;	ENTRY	AL has drive number A = 0
 37218                                  ;	EXIT	'C' set
 37219                                  ;		    No DPB for this drive number
 37220                                  ;		'C' clear
 37221                                  ;		    DS:SI points to DPB for drive
 37222                                  ;	USES	SI, DS, Flags
 37223                                  ;----------------------------------------------------------------------------
 37224                                  
 37225                                  	; 21/05/2019 - Retro DOS v4.0
 37226                                  FIND_DPB:
 37227 000069B8 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 37228                                  fdpb5:	
 37229 000069BD 83FEFF                  	CMP	SI,-1
 37230 000069C0 7409                    	JZ	short fdpb10
 37231 000069C2 3A04                    	cmp	al,[si]
 37232                                  	;CMP	AL,[SI+DPB.DRIVE]
 37233 000069C4 7406                    	jz	short ret_label15	; Carry clear (retz)
 37234                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 37235                                  	;lds	si,[si+19h] ; MSDOS 6.0
 37236 000069C6 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 37237 000069C9 EBF2                    	JMP	short fdpb5
 37238                                  fdpb10:	
 37239 000069CB F9                      	STC
 37240                                  ret_label15:
 37241 000069CC C3                      	retn
 37242                                  
 37243                                  ;	Break <InitCDS - set up an empty CDS>
 37244                                  ;----------------------------------------------------------------------------
 37245                                  ;**	InitCDS - Setup an Empty CDS
 37246                                  ;
 37247                                  ;	ENTRY	ThisCDS points to CDS
 37248                                  ;		AL has uppercase drive letter
 37249                                  ;	EXIT	ThisCDS is now empty
 37250                                  ;		(ES:DI) = CDS
 37251                                  ;		'C' set if no DPB associated with drive
 37252                                  ;	USES	AH,ES,DI, Flags
 37253                                  ;----------------------------------------------------------------------------
 37254                                  
 37255                                  ; 21/05/2019 - Retro DOS v4.0
 37256                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 37257                                  
 37258                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37259                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 37260                                  
 37261                                  InitCDS:
 37262                                  	; 19/08/2018
 37263                                  	; 05/08/2018 - Retro DOS v3.0
 37264                                  	; MSDOS 6.0
 37265 000069CD 50                      	push	ax			; save (AL) for caller
 37266 000069CE 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 37267                                  	;mov	word [es:di+67],0
 37268 000069D3 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 37269 000069D9 2C40                    	SUB	AL,"A"-1                ; A = 1
 37270 000069DB 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 37271 000069E0 7236                    	JC	short icdsx		; Drive does not map a physical drive
 37272 000069E2 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 37273 000069E3 50                      	PUSH	AX			; save drive number for later
 37274 000069E4 0441                    	add	al,"A"
 37275 000069E6 B43A                    	MOV	AH,':'
 37276 000069E8 268905                  	mov	[ES:DI],ax
 37277                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 37278                                  	;mov	ax,"\"
 37279                                  	;mov	[es:di+2],ax
 37280                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 37281 000069EB 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 37282                                  	;or	word [es:di+67],4000h
 37283                                  	;or	byte [es:di+68],40h
 37284 000069F1 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37285 000069F6 29C0                    	sub	ax,ax
 37286                                  	;MOV	[es:di+73],ax ; 0
 37287 000069F8 26894549                	MOV	[ES:DI+curdir.ID],ax
 37288                                  	;mov	[es:di+75],ax ; 0
 37289 000069FC 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 37290 00006A00 B002                    	mov	al,2
 37291                                  	;mov	[es:di+79],aX ; 2
 37292 00006A02 2689454F                	MOV	[ES:DI+curdir.end],ax
 37293 00006A06 58                      	POP	AX			; (al) = drive number
 37294 00006A07 1E                      	push	ds
 37295 00006A08 56                      	push	si
 37296 00006A09 E8ACFF                  	call	FIND_DPB
 37297 00006A0C 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 37298                                  	;mov	[es:di+69],si
 37299 00006A0E 26897545                	MOV	[ES:DI+curdir.devptr],SI
 37300                                  	;mov	[es:di+71],ds
 37301 00006A12 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 37302                                  icds5:	
 37303 00006A16 5E                      	pop	si
 37304 00006A17 1F                      	pop	ds
 37305                                  icdsx:	
 37306 00006A18 58                      	pop	ax
 37307                                  RET45:
 37308 00006A19 C3                      	retn
 37309                                  
 37310                                  ;Break <$UserOper - get/set current user ID (for net)>
 37311                                  ;----------------------------------------------------------------------------
 37312                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 37313                                  ;	maintain this string and do no verifications.
 37314                                  ;
 37315                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 37316                                  ;				      4-printer-set-flags,5-printer-get-flags)
 37317                                  ;		DS:DX is user string pointer (calls 1,2)
 37318                                  ;		ES:DI is user buffer (call 3)
 37319                                  ;		BX is assign index (calls 2,3,4,5)
 37320                                  ;		CX is user number (call 1)
 37321                                  ;		DX is flag word (call 4)
 37322                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 37323                                  ;			and user CX is set to the user number
 37324                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 37325                                  ;		If AL = 5 then DX is flag word
 37326                                  ;----------------------------------------------------------------------------
 37327                                  
 37328                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37329                                  	; 21/05/2019 - Retro DOS v4.0
 37330                                  _$UserOper:
 37331                                  	; 05/08/2018 - Retro DOS v3.0
 37332                                  	; MSDOS 6.0 (& MSDOS 3.3)
 37333 00006A1A 50                      	PUSH	AX
 37334 00006A1B 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 37335 00006A1D 58                      	POP	AX
 37336 00006A1E 7211                    	JB	short UserGet 		; return to user the string
 37337 00006A20 742E                    	JZ	short UserSet 		; set the current user
 37338 00006A22 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 37339 00006A24 763D                    	JBE	short UserPrint		; yep
 37340                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37341 00006A26 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 37342                                  					; Extended Error Locus
 37343                                  	;error	error_invalid_function	; not 0,1,2,3
 37344                                  	;mov	al,1
 37345 00006A2C B001                    	MOV	AL,error_invalid_function
 37346                                  useroper_error:
 37347                                  	; 17/12/2022
 37348                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37349 00006A2E E90F9C                  	JMP	SYS_RET_ERR
 37350                                  	;jmp	short ASS_ERR
 37351                                  
 37352                                  UserGet:
 37353                                  ; Transfer MYNAME to DS:DX
 37354                                  ; Set Return CX to MYNUM
 37355 00006A31 1E                      	PUSH	DS			; switch registers
 37356 00006A32 07                      	POP	ES
 37357 00006A33 89D7                    	MOV	DI,DX			; destination
 37358 00006A35 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 37359 00006A3A E8449A                  	call	Get_User_Stack
 37360                                  	;mov	[si+4],cx
 37361 00006A3D 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 37362 00006A40 16                      	push	ss			; point to DOSDATA
 37363 00006A41 1F                      	pop	ds
 37364 00006A42 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 37365                                  UserMove:
 37366 00006A45 B90F00                  	MOV	CX,15
 37367 00006A48 F3A4                    	REP	MOVSB			; blam.
 37368 00006A4A 31C0                    	XOR	AX,AX			; 16th byte is 0
 37369 00006A4C AA                      	STOSB
 37370                                  UserBye:
 37371 00006A4D E9E79B                  	jmp	SYS_RET_OK		; no errors here
 37372                                  
 37373                                  UserSet:
 37374                                  ; Transfer DS:DX to MYNAME
 37375                                  ; CX to MYNUM
 37376 00006A50 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 37377 00006A55 89D6                    	MOV	SI,DX			; user space has source
 37378 00006A57 16                      	push	ss
 37379 00006A58 07                      	pop	es
 37380 00006A59 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 37381 00006A5C 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 37382 00006A61 EBE2                    	JMP	short UserMove
 37383                                  
 37384                                  UserPrint:
 37385                                  
 37386                                    ;IF NOT Installed
 37387                                    ;	transfer PRINTER_GETSET_STRING
 37388                                    ;ELSE
 37389 00006A63 50                      	PUSH	AX
 37390                                  	;mov	ax,111Fh
 37391                                  	;MOV	AX,(MultNET SHL 8) OR 31
 37392 00006A64 B81F11                  	mov	ax,(MultNET<<8)|31
 37393 00006A67 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 37394                                  			; STACK: WORD function
 37395                                  			; Return: CF set on error, AX = error code
 37396                                  			; STACK unchanged
 37397 00006A69 5A                      	POP	DX			; Clean stack
 37398                                  	;JNC	short OKPA
 37399 00006A6A 73E1                    	jnc	short UserBye ; 21/05/2019
 37400                                  	; 17/12/2022
 37401 00006A6C EBC0                    	jmp	short useroper_error
 37402                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37403                                  	;jnb     short OKPA
 37404                                  	;jmp     short useroper_error
 37405                                  
 37406                                  	; 17/12/2022
 37407                                  ;OKPA:
 37408                                  ;	jmp	short UserBye
 37409                                  
 37410                                    ;ENDIF
 37411                                  
 37412                                  
 37413                                  ;Break	<GetVisDrv - return visible drive>
 37414                                  ;----------------------------------------------------------------------------
 37415                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37416                                  ;
 37417                                  ;   Inputs:	AL has drive identifier (0=default)
 37418                                  ;   Outputs:	Carry Set - invalid drive/macro
 37419                                  ;		Carry Clear - AL has physical drive (0=A)
 37420                                  ;		    ThisCDS points to CDS
 37421                                  ;   Registers modified: AL
 37422                                  ;----------------------------------------------------------------------------
 37423                                  
 37424                                  	; 21/05/2019 - Retro DOS v4.0
 37425                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37426                                  
 37427                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37428                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37429                                  GetVisDrv:
 37430                                  	; 05/08/2018 - Retro DOS v3.0
 37431                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37432 00006A6E E81900                  	CALL	GETTHISDRV		; get inuse drive
 37433 00006A71 72A6                    	jc	short RET45
 37434 00006A73 1E                      	push	ds
 37435 00006A74 56                      	push	si
 37436 00006A75 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37437                                  	;test	word [si+67],2000h
 37438                                  	; 17/12/2022
 37439                                  	;test	byte [si+68],20h
 37440 00006A7A F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37441                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37442 00006A7E 5E                      	pop	si
 37443 00006A7F 1F                      	pop	ds
 37444 00006A80 7497                    	jz	short RET45		; if not spliced, return OK
 37445                                  	; MSDOS 6.0
 37446                                  	;mov	byte [ss:DrvErr],0Fh
 37447 00006A82 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37448 00006A88 F9                      	STC				; signal error
 37449 00006A89 C3                      	retn
 37450                                  
 37451                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37452                                  ;----------------------------------------------------------------------------
 37453                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37454                                  ;	macro pointer
 37455                                  ;
 37456                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37457                                  ;   Outputs:
 37458                                  ;		Carry Set - invalid drive/macro
 37459                                  ;		Carry Clear - AL has physical drive (0=A)
 37460                                  ;		   ThisCDS points to macro
 37461                                  ;   Registers modified: AL
 37462                                  ;----------------------------------------------------------------------------
 37463                                  
 37464                                  	; 21/05/2019 - Retro DOS v4.0
 37465                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 37466                                  
 37467                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37468                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 37469                                  GETTHISDRV:
 37470                                  	; 05/08/2018
 37471                                  	; 12/07/2018 - Retro DOS v3.0
 37472                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 37473                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37474 00006A8A 08C0                    	OR	AL,AL			; are we using default drive?
 37475 00006A8C 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 37476 00006A8E 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 37477                                  	;INC	ax			; Counteract next instruction
 37478                                  	; 04/09/2018
 37479                                  	;inc	al
 37480                                  	; 07/12/2022
 37481 00006A92 40                      	inc	ax
 37482                                  GTD10:	
 37483                                  	;DEC	AX
 37484                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37485 00006A93 48                      	dec	ax			; 0 = A
 37486                                  	;dec	al
 37487 00006A94 1E                      	PUSH	DS			; save world
 37488 00006A95 56                      	PUSH	SI
 37489                                  	;mov	byte [ss:EXTERR_LOCUS],2
 37490 00006A96 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 37491 00006A9C 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 37492 00006AA2 7420                    	JZ	SHORT GTD20		; Logical
 37493 00006AA4 50                      	PUSH	AX
 37494 00006AA5 06                      	PUSH	ES
 37495 00006AA6 57                      	PUSH	DI
 37496 00006AA7 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 37497                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 37498 00006AAE 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 37499 00006AB3 0441                    	ADD	AL,'A'
 37500 00006AB5 E815FF                  	CALL	InitCDS			; InitCDS(c);
 37501                                  	;test	word [es:di+67],4000h
 37502                                  	; 17/12/2022
 37503                                  	;test	byte [es:di+68],40h
 37504 00006AB8 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37505                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 37506 00006ABD 5F                      	POP	DI
 37507 00006ABE 07                      	POP	ES
 37508 00006ABF 58                      	POP	AX
 37509 00006AC0 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 37510 00006AC2 EB18                    	JMP	SHORT GTDX		; carry clear
 37511                                  GTD20:
 37512 00006AC4 E81800                  	CALL	GetCDSFromDrv
 37513 00006AC7 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 37514                                  	;test	word [si+43h],4000h
 37515                                  	; 17/12/2022
 37516                                  	;test	byte [si+44h],40h
 37517 00006AC9 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37518                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37519 00006ACD 750D                    	JNZ	SHORT GTDX		; carry clear
 37520                                  GTD30:	
 37521                                  	; 21/05/2019
 37522                                  	; MSDOS 6.0
 37523 00006ACF B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37524 00006AD1 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37525                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37526 00006AD5 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37527 00006ADB F9                      	STC
 37528                                  GTDX:	
 37529 00006ADC 5E                      	POP	SI			; restore world
 37530 00006ADD 1F                      	POP	DS
 37531 00006ADE C3                      	RETN
 37532                                   
 37533                                  
 37534                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37535                                  ;----------------------------------------------------------------------------
 37536                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37537                                  ;	pointer, returning an error if the drive number is greater than the
 37538                                  ;	number of CDS's
 37539                                  ;
 37540                                  ;   Inputs:	AL is physical unit # A=0...
 37541                                  ;   Outputs:	Carry Set if Bad Drive
 37542                                  ;		Carry Clear
 37543                                  ;		    DS:SI -> CDS
 37544                                  ;		    [THISCDS] = DS:SI
 37545                                  ;   Registers modified: DS,SI
 37546                                  ;----------------------------------------------------------------------------
 37547                                  
 37548                                  	; 21/05/2019 - Retro DOS v4.0
 37549                                  GetCDSFromDrv:
 37550 00006ADF 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37551                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 37552                                  	;STC				; signal error
 37553                                  	;RETN				; bye
 37554                                  	; 23/09/2023
 37555 00006AE4 F5                      	cmc	; cf=1 <-> cf=0
 37556 00006AE5 7217                    	jc	short GetCDS_retn
 37557                                  GetCDS:
 37558                                  	; 23/09/2023
 37559                                  	;PUSH	BX
 37560 00006AE7 50                      	PUSH	AX
 37561 00006AE8 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37562                                  	;mov	bl,81 ; MSDOS 3.3
 37563                                  	;mov	bl,88 ; MSDOS 6.0 
 37564                                  	; 23/09/2023
 37565                                  	;MOV	BL,curdir.size		; size in convenient spot
 37566                                  	;MUL	BL			; get net offset
 37567 00006AED B458                    	mov	ah,curdir.size
 37568 00006AEF F6E4                    	mul	ah
 37569 00006AF1 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 37570 00006AF3 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37571 00006AF8 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37572 00006AFD 58                      	POP	AX
 37573                                  	; 23/09/2023
 37574                                  	;POP	BX
 37575                                  	; (cf must be 0 here) ; *
 37576                                  	;CLC				; no error
 37577                                  GetCDS_retn:
 37578 00006AFE C3                      	RETN				; bye!
 37579                                  
 37580                                  ;============================================================================
 37581                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37582                                  ;============================================================================
 37583                                  ; Retro	DOS v3.0 - 12/07/2018
 37584                                  ; 22/05/2019 - Retro DOS v4.0
 37585                                  
 37586                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37587                                  ;----------------------------------------------------------------------------
 37588                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37589                                  ;       gritty substitution.
 37590                                  ;
 37591                                  ;   Inputs:     DS:DX - pointer to FCB
 37592                                  ;               ES:DI - point to destination
 37593                                  ;   Outputs:    Carry Set - invalid path in final map
 37594                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37595                                  ;                   Sattrib is set from possibly extended FCB
 37596                                  ;                   ExtFCB set if extended FCB found
 37597                                  ;   Registers modified: most
 37598                                  ;----------------------------------------------------------------------------
 37599                                  
 37600                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37601                                  TransFCB:
 37602                                  	; 22/05/2019 - Retro DOS v4.0
 37603                                  	; 12/07/2018 - Retro DOS v3.0
 37604                                  	;LocalVar FCBTmp,16
 37605                                  	;ENTER
 37606 00006AFF 55                      	push	bp
 37607 00006B00 89E5                    	mov	bp,sp
 37608                                  	;sub	sp,15	; MSDOS 3.3
 37609 00006B02 83EC10                  	sub	sp,16	; MSDOS 6.0
 37610 00006B05 16                      	push	ss
 37611 00006B06 07                      	pop	es
 37612 00006B07 06                      	push	es
 37613 00006B08 57                      	push	di
 37614                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37615                                  	;LEA	DI,FCBTmp 
 37616 00006B09 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37617 00006B0C 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37618 00006B12 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37619 00006B18 E839B1                  	call	GetExtended             ; get FCB, extended or not
 37620                                  	; 06/12/2022
 37621 00006B1B 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37622 00006B1D 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37623 00006B20 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37624 00006B24 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37625                                  GetDrive:
 37626 00006B2A AC                      	lodsb				; get drive byte
 37627 00006B2B E85CFF                  	call	GETTHISDRV
 37628 00006B2E 722A                    	jc	short BadPack
 37629 00006B30 E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 37630                                  
 37631                                  ; Scan the source to see if there are any illegal chars
 37632                                  
 37633                                  	;mov	bx,CharType		; load lookup table
 37634 00006B33 B90B00                  	mov	cx,11
 37635 00006B36 56                      	push	si			; back over name, ext
 37636                                  FCBScan:
 37637 00006B37 AC                      	lodsb				; get a byte
 37638                                  	
 37639                                  	; 09/08/2018
 37640                                  	;;xlat	byte [es:bx]
 37641                                  	;es	xlat
 37642                                  
 37643                                  	; 22/05/2019 - Retro DOS v4.0	
 37644 00006B38 E836E5                  	call	GetCharType		; get flags
 37645                                  
 37646                                  	;test	al,8	
 37647 00006B3B A808                    	test	al,FFCB
 37648 00006B3D 741B                    	jz	short BadPack
 37649                                  NextCh: 
 37650 00006B3F E2F6                    	loop	FCBScan
 37651 00006B41 5E                      	pop	si
 37652 00006B42 89FB                    	mov	bx,di
 37653 00006B44 E865B5                  	call	PackName                ; crunch the path
 37654 00006B47 5F                      	pop	di			; get original destination
 37655 00006B48 07                      	pop	es
 37656 00006B49 16                      	push	ss			; get DS addressability
 37657 00006B4A 1F                      	pop	ds
 37658                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37659                                  	;LEA	SI,FCBTmp		; point at new pathname
 37660 00006B4B 8D76F0                  	lea	si,[bp-16]
 37661 00006B4E 803F00                  	cmp	byte [bx],0
 37662 00006B51 7407                    	jz	short BadPack
 37663 00006B53 55                      	push	bp
 37664 00006B54 E80E00                  	call	TransPathSet            ; convert the path
 37665 00006B57 5D                      	pop	bp
 37666 00006B58 7303                    	jnc	short FCBRet		; bye with transPath error code
 37667                                  BadPack:
 37668 00006B5A F9                      	STC
 37669                                  	;mov	al,3
 37670 00006B5B B003                    	MOV     AL,error_path_not_found
 37671                                  FCBRet: 
 37672                                  	;LEAVE
 37673 00006B5D 89EC                    	mov	sp,bp
 37674 00006B5F 5D                      	pop	bp
 37675                                  TransPath_retn:
 37676 00006B60 C3                      	retn
 37677                                  
 37678                                  ; 12/07/2018 - Retro DOS v3.0
 37679                                  
 37680                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37681                                  ;----------------------------------------------------------------------------
 37682                                  ;
 37683                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37684                                  ;       substitution, insertion of current directory and fixing . and ..
 37685                                  ;       entries. Perform splicing. Allow input string to match splice
 37686                                  ;       exactly.
 37687                                  ;
 37688                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37689                                  ;       matches splice.
 37690                                  ;
 37691                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37692                                  ;
 37693                                  ;   The following anomalous behaviour is required:
 37694                                  ;
 37695                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37696                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37697                                  ;       Raw net I/O sets ThisCDS => NULL.
 37698                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37699                                  ;
 37700                                  ;   Other behaviour:
 37701                                  ;
 37702                                  ;       ThisCDS set up.
 37703                                  ;       FatRead done on local CDS.
 37704                                  ;       ValidateCDS done on local CDS.
 37705                                  ;
 37706                                  ;   Brief flowchart:
 37707                                  ;
 37708                                  ;       if fSharing then
 37709                                  ;           set up DummyCDS (ThisCDS)
 37710                                  ;           canonicalize (sets cMeta)
 37711                                  ;           splice
 37712                                  ;           fatRead
 37713                                  ;           return
 37714                                  ;       if \\ or d:\\ lead then
 37715                                  ;           set up null CDS (ThisCDS)
 37716                                  ;           canonicalize (sets cMeta)
 37717                                  ;           return
 37718                                  ;       if device then
 37719                                  ;           set up dummyCDS (ThisCDS)
 37720                                  ;           canonicalize (sets cMeta)
 37721                                  ;           return
 37722                                  ;       if file then
 37723                                  ;           getCDS (sets (ThisCDS) from name)
 37724                                  ;           validateCDS (may reset current dir)
 37725                                  ;           Copy current dir
 37726                                  ;           canonicalize (set cMeta)
 37727                                  ;           splice
 37728                                  ;           generate correct CDS (ThisCDS)
 37729                                  ;           if local then
 37730                                  ;               fatread
 37731                                  ;           return
 37732                                  ;
 37733                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37734                                  ;               DI - point to buffer in DOSDATA
 37735                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37736                                  ;                   syntax, etc. or user FAILed to I 24.
 37737                                  ;               WFP_Start - points to beginning of buffer
 37738                                  ;               Curr_Dir_End - points to end of current dir in path
 37739                                  ;               DS - DOSDATA
 37740                                  ;   Registers modified: most
 37741                                  ;
 37742                                  ;----------------------------------------------------------------------------
 37743                                  
 37744                                  ; 22/05/2019
 37745                                  ; 13/05/2019 - Retro DOS v4.0
 37746                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37747                                  
 37748                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37749                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37750                                  
 37751                                  TransPath:
 37752 00006B61 30C0                    	XOR     AL,AL
 37753 00006B63 EB02                    	JMP     SHORT SetSplice
 37754                                  TransPathSet:
 37755 00006B65 B0FF                    	MOV     AL,-1
 37756                                  SetSplice:
 37757 00006B67 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37758 00006B6B B0FF                    	MOV     AL,-1
 37759                                  TransPathNoSet:
 37760 00006B6D 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37761 00006B71 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37762 00006B77 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37763 00006B7C 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37764 00006B83 16                      	push	ss
 37765 00006B84 07                      	pop	es
 37766                                  	;lea	bp,[di+134]
 37767 00006B85 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37768                                  ;
 37769                                  ; if this is through the server dos call, fsharing is set. We set up a
 37770                                  ; dummy cds and let the operation go.
 37771                                  ;
 37772 00006B89 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37773 00006B8F 7435                    	JZ	short CheckUNC		; skip to UNC check
 37774                                  ;
 37775                                  ; ES:DI point to buffer
 37776                                  ;
 37777 00006B91 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37778 00006B94 E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37779 00006B97 722A                    	jc	short NoPath
 37780 00006B99 E80A03                  	CALL	TextFromDrive		; drop in new
 37781 00006B9C 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37782 00006B9F E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37783 00006BA2 72BC                    	jc	short TransPath_retn	; errors
 37784                                  ;
 37785                                  ; Perform splices for net guys.
 37786                                  ;
 37787 00006BA4 16                      	push	ss
 37788 00006BA5 1F                      	pop	ds
 37789 00006BA6 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37790 00006BAA F606[7105]FF            	TEST	byte [FSPLICE],-1
 37791 00006BAF 7403                    	JZ	short NoServerSplice
 37792 00006BB1 E83102                  	CALL    Splice
 37793                                  NoServerSplice:
 37794 00006BB4 16                      	push	ss
 37795 00006BB5 1F                      	pop	ds                      ; for FATREAD
 37796 00006BB6 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37797 00006BBA E850A7                  	call	ECritDisk
 37798 00006BBD E807EB                  	call	FATREAD_CDS
 37799 00006BC0 E865A7                  	call	LCritDisk
 37800                                  NoPath:
 37801                                  	;mov	al,3
 37802 00006BC3 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37803 00006BC5 C3                      	retn				; any errors are in Carry flag
 37804                                  
 37805                                  ; Let the network decide if the name is for a spooled device. It will map
 37806                                  ; the name if so.
 37807                                  
 37808                                  CheckUNC:
 37809 00006BC6 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37810                                  	;CallInstall NetSpoolCheck,MultNET,35
 37811 00006BCD B82311                  	mov	ax,1123h
 37812 00006BD0 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37813                                  			; DS:SI -> ASCIZ filename to canonicalize
 37814                                  			; ES:DI -> 128-byte buffer for qualified name
 37815                                  			; Return: CF set if not resolved
 37816 00006BD2 7329                    	JNC	short UNCDone
 37817                                  
 37818                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37819                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37820                                  ; input, then the name has been changed to the remote spooler by the above net
 37821                                  ; call. Also, there may be a drive in front of the \\.
 37822                                  
 37823                                  NO_CHECK:
 37824 00006BD4 E8B902                  	CALL    DriveFromText		; eat drive letter
 37825 00006BD7 50                      	PUSH    AX                      ; save it
 37826 00006BD8 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37827 00006BDA E8B1E4                  	call    PATHCHRCMP              ; convert to normal form
 37828 00006BDD 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37829 00006BDF E8ACE4                  	call    PATHCHRCMP              ; convert to normal form
 37830 00006BE2 751F                    	JNZ	short CheckDevice	; not a path char
 37831 00006BE4 38C4                    	CMP     AH,AL                   ; are they same?
 37832 00006BE6 751B                    	JNZ	short CheckDevice	; nope
 37833                                  
 37834                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37835                                  ; local machine root path
 37836                                  
 37837 00006BE8 58                      	POP     AX
 37838 00006BE9 A5                      	MOVSW                           ; get the lead \\.
 37839                                  UNCCpy:
 37840 00006BEA AC                      	LODSB                           ; get a byte
 37841 00006BEB E84BE4                   	call	UCase                   ;AN000;; convert the char
 37842 00006BEE 08C0                    	OR      AL,AL
 37843 00006BF0 740E                    	JZ	short UNCTerm		; end of string. All done.
 37844 00006BF2 E899E4                  	call    PATHCHRCMP              ; is it a path char?
 37845 00006BF5 89FB                    	MOV     BX,DI                   ; backup position
 37846 00006BF7 AA                      	STOSB
 37847 00006BF8 75F0                    	JNZ	short UNCCpy		; no, go copy
 37848 00006BFA E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37849                                  UNCDone:
 37850 00006BFD 16                      	push	ss
 37851 00006BFE 1F                      	pop	ds
 37852 00006BFF C3                       	retn				; return error code
 37853                                  UNCTerm:
 37854 00006C00 AA                      	STOSB                           ;AN000;
 37855 00006C01 EBFA                    	JMP	short UNCDone		;AN000;
 37856                                  
 37857                                  CheckDevice:
 37858                                  
 37859                                  ; Check DS:SI for device. First eat any path stuff
 37860                                  
 37861 00006C03 58                      	POP     AX                      ; retrieve drive info
 37862 00006C04 803C00                  	CMP     BYTE [SI],0		; check for null file
 37863 00006C07 7504                    	JNZ	short CheckPath
 37864                                  	;mov	al,2 
 37865 00006C09 B002                    	MOV     AL,error_file_not_found ; bad file error
 37866 00006C0B F9                      	STC                             ; signal error on null input
 37867 00006C0C C3                      	RETN				; bye!
 37868                                  CheckPath:
 37869 00006C0D 50                      	push	ax
 37870 00006C0E 55                      	push	bp			; save drive number
 37871                                  
 37872                                  
 37873                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37874                                  %if 0
 37875                                  	; MSDOS 6.0
 37876                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37877                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37878                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37879                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37880                                  ;;;end up having a 5D in the opcode's displacement field. The
 37881                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37882                                  ;;;
 37883                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37884                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37885                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37886                                  ;;;
 37887                                  ;;;More info:
 37888                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37889                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37890                                  ;;;
 37891                                  	call	no5Dshere
 37892                                  start5Dhack:
 37893                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37894                                  backfrom5Dhack:
 37895                                  
 37896                                  %endif
 37897                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37898                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37899 00006C0F E8FED6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37900                                  
 37901 00006C12 5D                      	pop	bp
 37902 00006C13 58                      	pop	ax			; get drive letter back
 37903 00006C14 731C                    	JNC	short DoFile		; yes we have a file.
 37904                                  
 37905                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37906                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37907                                  ; call.
 37908                                  
 37909 00006C16 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37910 00006C1C E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37911 00006C1F 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37912                                  
 37913                                  ; Now that we have noted that we have a device, we put it into a form that
 37914                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37915                                  ; string. We relax this to state that if the d:\ is present then the path
 37916                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37917                                  ; a device.
 37918                                  
 37919 00006C25 E87E02                  	CALL    TextFromDrive
 37920 00006C28 B02F                    	MOV     AL,'/'                  ; path sep.
 37921 00006C2A AA                      	STOSB
 37922 00006C2B E8A5A5                  	call	StrCpy			; move remainder of string
 37923                                  
 37924 00006C2E F8                      	CLC                             ; everything OK.
 37925 00006C2F 16                      	push	ss
 37926 00006C30 1F                      	pop	ds                      ; remainder of OK stuff
 37927                                  DoFile_retn:
 37928 00006C31 C3                      	retn
 37929                                  
 37930                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37931                                  %if 0
 37932                                  
 37933                                  no5Dshere:
 37934                                  	; 10/08/2018
 37935                                  	jmp	CheckThisDevice		; snoop for device
 37936                                  %endif
 37937                                  
 37938                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37939                                  
 37940                                  ; We have a file. Get the raw CDS.
 37941                                  
 37942                                  DoFile:
 37943                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37944                                  
 37945 00006C32 E839FE                  	call	GetVisDrv               ; get proper CDS
 37946                                  	;mov	al,3 
 37947 00006C35 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37948 00006C37 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37949                                  
 37950                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37951                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37952                                  ; Use the one that we are going to use (ES:DI).
 37953                                  
 37954                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37955 00006C39 1E                      	push	ds
 37956 00006C3A 56                      	push	si
 37957 00006C3B 06                      	push	es
 37958 00006C3C 57                      	push	di
 37959 00006C3D E814D6                  	call	ValidateCDS             ; poke CDS and make everything OK
 37960                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37961 00006C40 5F                      	pop	di
 37962 00006C41 07                      	pop	es
 37963 00006C42 5E                      	pop	si
 37964 00006C43 1F                      	pop	ds
 37965                                  	;mov	al,3
 37966 00006C44 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37967                                  	;retc				; someone failed an operation
 37968 00006C46 72E9                    	jc	short DoFile_retn
 37969                                  
 37970                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37971                                  ; current directory. Copy it in.
 37972                                  
 37973 00006C48 1E                      	push	ds
 37974 00006C49 56                      	push	si
 37975 00006C4A 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37976 00006C4F 89FB                    	MOV     BX,DI                   ; point to destination
 37977                                  	;add	bx,[si+79] ; MSDOS 6.0
 37978 00006C51 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37979                                  	;lea	bp,[di+134]
 37980 00006C54 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37981                                  					;AN000;
 37982 00006C58 E887A5                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37983 00006C5B 4F                      	DEC     DI                      ; point to NUL byte
 37984                                  
 37985                                  ; Make sure that there is a path char at end.
 37986                                  
 37987 00006C5C B05C                    	MOV     AL,'\'
 37988 00006C5E 263845FF                	CMP     [ES:DI-1],AL
 37989 00006C62 7401                    	JZ	short GetOrig
 37990 00006C64 AA                      	STOSB
 37991                                  
 37992                                  ; Now get original string.
 37993                                  
 37994                                  GetOrig:
 37995 00006C65 4F                      	DEC     DI                      ; point to path char
 37996 00006C66 5E                      	pop	si
 37997 00006C67 1F                      	pop	ds
 37998                                  
 37999                                  ; BX points to the end of the root part of the CDS (at where a path char
 38000                                  ; should be). Now, we decide whether we use this root or extend it with the
 38001                                  ; current directory. See if the input string begins with a leading 
 38003 00006C68 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38004 00006C6B 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38005 00006C6D 08C0                    	OR      AL,AL                   ; end of string?
 38006 00006C6F 7410                    	JZ	short DoCanon		; yes, skip.
 38007                                  ;
 38008                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38009                                  ; to this root. Make sure that there is a path char there and advance the
 38010                                  ; source string over all leading \'s.
 38011                                  ;
 38012 00006C71 89DF                    	MOV     DI,BX                   ; back up to root point.
 38013                                  SkipPath:
 38014 00006C73 AC                      	LODSB
 38015 00006C74 E817E4                  	call    PATHCHRCMP
 38016 00006C77 74FA                    	JZ	short SkipPath
 38017 00006C79 4E                      	DEC     SI
 38018 00006C7A 08C0                    	OR      AL,AL
 38019 00006C7C 7403                    	JZ	short DoCanon
 38020                                  
 38021                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38022                                  ; for yucks.
 38023                                  
 38024                                  PathAssure:
 38025 00006C7E B05C                    	MOV     AL,'\'	; 5Ch
 38026 00006C80 AA                      	STOSB
 38027                                  
 38028                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38029                                  ; BP is the max extent to advance DI
 38030                                  ; BX is the backup limit for ..
 38031                                  
 38032                                  DoCanon:
 38033 00006C81 E85200                  	CALL    Canonicalize            ; wham.
 38034                                  	;retc				; badly formatted path.
 38035 00006C84 72AB                    	jc	short DoFile_retn
 38036                                  
 38037                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38038                                  ; to wfp_start and do string substitution. BP is still the max position in
 38039                                  ; buffer.
 38040                                  
 38041 00006C86 16                      	push	ss
 38042 00006C87 1F                      	pop	ds
 38043 00006C88 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38044 00006C8C C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38045 00006C90 E81B02                  	CALL    PathPref                ; is there a prefix?
 38046 00006C93 7514                    	JNZ	short DoSplice		; no, do splice
 38047                                  
 38048                                  ; We have a match. Check to see if we ended in a path char.
 38049                                  
 38050 00006C95 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38051 00006C98 E8F3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38052 00006C9B 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38053                                  Pathline:                               ; 2/13/KK
 38054 00006C9D 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38055 00006CA1 7406                    	JZ	short DoSplice
 38056 00006CA3 47                      	INC     DI                      ; point to after current path char
 38057 00006CA4 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38058                                  
 38059                                  ; Splice the result.
 38060                                  
 38061                                  DoSplice:
 38062 00006CA9 16                      	push	ss
 38063 00006CAA 1F                      	pop	ds			; back to DOSDATA
 38064 00006CAB 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 38065 00006CAF 31C9                    	XOR     CX,CX
 38066 00006CB1 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38067 00006CB6 7403                    	JZ	short SkipSplice
 38068 00006CB8 E82A01                  	CALL    Splice                  ; replaces in place.
 38069                                  SkipSplice:
 38070                                  
 38071                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 38072                                  ; device.
 38073                                  
 38074 00006CBB 16                      	push	ss
 38075 00006CBC 1F                      	pop	ds
 38076 00006CBD C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 38077                                  	;test	word [es:di+67],8000h
 38078                                  	; 17/12/2022
 38079                                  	;test	byte [es:di+68],80h
 38080 00006CC1 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 38081                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 38082 00006CC6 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 38083 00006CC8 E30B                    	JCXZ    Done
 38084 00006CCA E840A6                  	call	ECritDisk
 38085 00006CCD E8F7E9                  	call	FATREAD_CDS
 38086 00006CD0 E855A6                  	call	LCritDisk
 38087                                  	;mov	al, 3
 38088 00006CD3 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38089                                  Done:   
 38090 00006CD5 C3                      	retn                         ; any errors in carry flag.
 38091                                  
 38092                                  ; 13/07/2018
 38093                                  
 38094                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 38095                                  ;----------------------------------------------------------------------------
 38096                                  ;   Canonicalize - copy path removing . and .. entries.
 38097                                  ;
 38098                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38099                                  ;               ES:DI - point to buffer
 38100                                  ;               BX - backup limit (offset from ES) points to slash
 38101                                  ;               BP - end of buffer
 38102                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38103                                  ;                   syntax, etc.
 38104                                  ;               Carry Clear -
 38105                                  ;                   DS:DI - advanced to end of string
 38106                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 38107                                  ;   Registers modified: AX CX DX (in addition to those above)
 38108                                  ;----------------------------------------------------------------------------
 38109                                  
 38110                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38111                                  
 38112                                  Canonicalize:
 38113                                  
 38114                                  ; We copy all leading path separators.
 38115                                  
 38116 00006CD6 AC                      	LODSB                           ;   while (PathChr (*s))
 38117 00006CD7 E8B4E3                  	call    PATHCHRCMP
 38118 00006CDA 7507                    	JNZ	short CanonDec
 38119 00006CDC 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 38120 00006CDE 7319                    	JAE	short CanonBad		;           goto error;
 38121 00006CE0 AA                      	STOSB
 38122 00006CE1 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 38123                                  CanonDec:
 38124 00006CE3 4E                      	DEC     SI
 38125                                  
 38126                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 38127                                  ; component (no leading path separators) and ES:DI being the destination
 38128                                  ; buffer.
 38129                                  
 38130                                  CanonLoop:
 38131                                  
 38132                                  ; If we are at the end of the source string, then we need to check to see that
 38133                                  ; a potential drive specifier is correctly terminated with a path sep char.
 38134                                  ; Otherwise, do nothing
 38135                                  
 38136 00006CE4 31C0                    	XOR     AX,AX
 38137 00006CE6 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 38138 00006CE8 751A                    	JNZ	short DoComponent
 38139 00006CEA 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 38140 00006CEF 7505                    	JNZ	short DoTerminate
 38141 00006CF1 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 38142 00006CF3 AA                      	STOSB
 38143 00006CF4 88E0                    	MOV     AL,AH
 38144                                  DoTerminate:
 38145 00006CF6 AA                      	STOSB                           ;           *d++ = 0;
 38146 00006CF7 F8                      	CLC                             ;           return (0);
 38147 00006CF8 C3                      	retn
 38148                                  
 38149                                  CanonBad:
 38150 00006CF9 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 38151                                  	;mov	al,3
 38152 00006CFC B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 38153 00006CFE 7402                    	JZ	short PathEnc		; path character encountered in string
 38154                                  	;mov	al,2
 38155 00006D00 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 38156                                  PathEnc:
 38157 00006D02 F9                      	STC
 38158                                  CanonBad_retn:
 38159 00006D03 C3                      	retn
 38160                                  
 38161                                  ; We have a textual component that we must copy. We uppercase it and truncate
 38162                                  ; it to 8.3
 38163                                  
 38164                                  DoComponent:                            ;           }
 38165 00006D04 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 38166 00006D07 72FA                    	jc	short CanonBad_retn	;           return (-1);
 38167                                  
 38168                                  ; We special case the . and .. cases.  These will be backed up.
 38169                                  
 38170                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 38171 00006D09 26833D2E                	CMP	WORD [ES:DI],002Eh
 38172 00006D0D 7408                    	JZ	short Skip1
 38173                                  	;CMP	WORD PTR ES:[DI],'..'
 38174 00006D0F 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 38175 00006D14 750A                    	JNZ	short CanonNormal
 38176 00006D16 4F                      	DEC     DI                      ;           d--;
 38177                                  Skip1:  
 38178 00006D17 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 38179                                  	;mov	al,3
 38180 00006D1A B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38181 00006D1C 72E5                    	jc	short CanonBad_retn
 38182 00006D1E EB02                    	JMP     short CanonPath         ;           }
 38183                                  
 38184                                  ; We have a normal path. Advance destination pointer over it.
 38185                                  
 38186                                  CanonNormal:                            ;       else
 38187 00006D20 01CF                    	ADD     DI,CX                   ;           d += ct;
 38188                                  
 38189                                  ; We have successfully copied a component. We are now pointing at a path
 38190                                  ; sep char or are pointing at a nul or are pointing at something else.
 38191                                  ; If we point at something else, then we have an error.
 38192                                  
 38193                                  CanonPath:
 38194 00006D22 E81600                  	CALL    PathSep
 38195 00006D25 75D2                    	JNZ	short CanonBad		; something else...
 38196                                  
 38197                                  ; Copy the first path char we see.
 38198                                  
 38199 00006D27 AC                      	LODSB                           ; get the char
 38200 00006D28 E863E3                  	call    PATHCHRCMP              ; is it path char?
 38201 00006D2B 75B6                    	JNZ	short CanonDec		; no, go test for nul
 38202 00006D2D 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 38203 00006D2F 73C8                    	JAE	short CanonBad		; yep, error.
 38204 00006D31 AA                      	STOSB                           ; copy the one byte
 38205                                  
 38206                                  ; Skip all remaining path chars
 38207                                  
 38208                                  CanonPathLoop:
 38209 00006D32 AC                      	LODSB                           ; get next byte
 38210 00006D33 E858E3                  	call    PATHCHRCMP              ; path char again?
 38211 00006D36 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 38212 00006D38 4E                      	DEC     SI                      ; back up
 38213 00006D39 EBA9                    	JMP	short  CanonLoop	; go copy component
 38214                                  
 38215                                  ;BREAK <PathSep - determine if char is a path separator>
 38216                                  ;----------------------------------------------------------------------------
 38217                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 38218                                  ;   Inputs:     DS:SI - point to a char
 38219                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 38220                                  ;               Zero set if AL is / \ or NUL
 38221                                  ;               Zero reset otherwise
 38222                                  ;   Registers modified: AL
 38223                                  ;----------------------------------------------------------------------------
 38224                                  
 38225                                  PathSep:
 38226 00006D3B 8A04                    	MOV     AL,[SI]                 ; get the character
 38227                                  PathSepGotCh:				; already have character
 38228 00006D3D 08C0                    	OR      AL,AL                   ; test for zero
 38229 00006D3F 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 38230                                  	;call	PATHCHRCMP              ; check for path character
 38231                                  	;retn				; and return HIS determination
 38232                                  	; 18/12/2022
 38233 00006D41 E94AE3                  	jmp	PATHCHRCMP
 38234                                  
 38235                                  
 38236                                  ;BREAK <SkipBack - move backwards to a path separator>
 38237                                  ;----------------------------------------------------------------------------
 38238                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 38240                                  ;               BX has current directory back up limit (point to a / \)
 38241                                  ;   Outputs:    ES:DI backed up to point to a path char
 38242                                  ;               AL has char from output ES:DI (path sep if carry clear)
 38243                                  ;               Carry set if illegal backup
 38244                                  ;               Carry Clear if ok
 38245                                  ;   Registers modified: DI,AL
 38246                                  ;----------------------------------------------------------------------------
 38247                                  
 38248                                  SkipBack:
 38249 00006D44 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 38250 00006D46 720B                    	JB	short SkipBad		;       if (d < dlim)
 38251 00006D48 4F                      	DEC     DI                      ;           goto err;
 38252 00006D49 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 38253 00006D4C E83FE3                  	call    PATHCHRCMP              ;           break;
 38254 00006D4F 75F3                    	JNZ	short SkipBack		;       }
 38255 00006D51 F8                      	CLC                             ;   return (0);
 38256 00006D52 C3                      	retn				;
 38257                                  SkipBad:                                ;err:
 38258                                  	;mov	al,3
 38259 00006D53 B003                    	MOV     AL,error_path_not_found ; bad path error
 38260 00006D55 F9                      	STC                             ;   return (-1);
 38261 00006D56 C3                      	retn				;
 38262                                  
 38263                                  ;Break <CopyComponent - copy out a file path component>
 38264                                  ;----------------------------------------------------------------------------
 38265                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 38266                                  ;
 38267                                  ;   Inputs:     DS:SI - source path
 38268                                  ;               ES:DI - destination
 38269                                  ;               ES:BP - end of buffer
 38270                                  ;   Outputs:    Carry Set - too long
 38271                                  ;               Carry Clear - DS:SI moved past component
 38272                                  ;                   CX has length of destination
 38273                                  ;   Registers modified: AX,CX,DX
 38274                                  ;----------------------------------------------------------------------------
 38275                                  
 38276                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38277                                  
 38278                                  CopyComponent:
 38279                                  
 38280                                  %define CopyBP	 [BP]		; word
 38281                                  %define CopyD	 [BP+2]		; dword
 38282                                  %define CopyDoff [BP+2]		; word
 38283                                  %define CopyS	 [BP+6]		; dword
 38284                                  %define CopySoff [BP+6]		; word
 38285                                  %define CopyTemp [BP+10]	; byte
 38286                                  
 38287 00006D57 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 38288 00006D5A 1E                      	push	ds
 38289 00006D5B 56                      	push	si
 38290 00006D5C 06                      	push	es
 38291 00006D5D 57                      	push	di
 38292 00006D5E 55                      	push	bp
 38293 00006D5F 89E5                    	MOV     BP,SP
 38294 00006D61 B42E                    	MOV     AH,'.'
 38295 00006D63 AC                      	LODSB
 38296 00006D64 AA                      	STOSB
 38297 00006D65 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 38298 00006D67 7518                    	JNZ	short NormalComp
 38299 00006D69 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 38300 00006D6C 740B                    	JZ	short NulTerm
 38301                                  TryTwoDot:
 38302 00006D6E AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 38303 00006D6F AA                      	STOSB
 38304 00006D70 38E0                    	CMP     AL,AH
 38305 00006D72 7557                    	JNZ	short CopyBad
 38306 00006D74 E8C4FF                  	CALL    PathSep
 38307 00006D77 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 38308                                  NulTerm:                                ;               return -1;
 38309 00006D79 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 38310 00006D7B AA                      	STOSB
 38311 00006D7C 897606                  	MOV     CopySoff,SI
 38312 00006D7F EB47                    	JMP     SHORT _GoodRet		;       }
 38313                                  NormalComp:                             ;   else {
 38314 00006D81 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 38315 00006D84 E845E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 38316 00006D87 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 38317 00006D8A 743F                    	JZ	short CopyBad		;           return (-1);
 38318 00006D8C 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 38319 00006D92 7510                    	JNZ	short DoPack
 38320 00006D94 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 38321 00006D97 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 38322 00006D9C 7F2D                    	JG	short CopyBad		;               return (-1);
 38323 00006D9E 7504                    	JNZ	short DoPack		;           else
 38324 00006DA0 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 38325 00006DA2 742F                    	JZ	short CopyBadPath	;               return (-1);
 38326                                  DoPack:                                 ;           }
 38327 00006DA4 897606                  	MOV     CopySoff,SI ; [bp+6]
 38328 00006DA7 16                      	push	ss
 38329 00006DA8 1F                      	pop	ds
 38330 00006DA9 BE[4B05]                	MOV     SI,NAME1
 38331 00006DAC 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 38332 00006DAF 57                      	push	di
 38333 00006DB0 E8F9B2                  	call	PackName                ;       PackName (Name1, temp);
 38334 00006DB3 5F                      	pop	di
 38335 00006DB4 E834A4                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 38336 00006DB7 49                      	DEC     CX
 38337 00006DB8 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 38338                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38339                                  	;cmp	cx,[bp+0]
 38340                                  	; 15/12/2022
 38341                                  	;cmp	cx,[bp]
 38342 00006DBB 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 38343 00006DBE 730B                    	JAE	short CopyBad		;           return (-1);
 38344 00006DC0 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 38345 00006DC2 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 38346 00006DC5 E81AA4                  	call	FStrCpy
 38347                                  _GoodRet:				;       }
 38348 00006DC8 F8                      	CLC
 38349 00006DC9 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 38350                                  CopyBad:
 38351 00006DCB F9                      	STC
 38352 00006DCC E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 38353                                  	;mov	al,2
 38354 00006DCF B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 38355 00006DD1 7503                    	JNZ	short CopyEnd
 38356                                  CopyBadPath:
 38357 00006DD3 F9                      	STC
 38358                                  	;mov	al,3
 38359 00006DD4 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 38360                                  CopyEnd:
 38361 00006DD6 5D                      	pop	bp
 38362 00006DD7 5F                      	pop	di
 38363 00006DD8 07                      	pop	es
 38364 00006DD9 5E                      	pop	si
 38365 00006DDA 1F                      	pop	ds
 38366 00006DDB 9F                      	LAHF
 38367 00006DDC 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 38368 00006DDF E809A4                  	call	StrLen
 38369 00006DE2 49                      	DEC     CX
 38370 00006DE3 9E                      	SAHF
 38371 00006DE4 C3                      	retn
 38372                                  
 38373                                  ; 14/05/2019 - Retro DOS v4.0
 38374                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 38375                                  
 38376                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38377                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 38378                                  
 38379                                  ;Break <Splice - pseudo mount by string substitution>
 38380                                  ;----------------------------------------------------------------------------
 38381                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 38382                                  ;       ThisCDS to point to physical drive CDS.
 38383                                  ;   Inputs:     DS:SI point to string
 38384                                  ;               NoSetDir = TRUE => exact matches with splice fail
 38385                                  ;   Outputs:    DS:SI points to thisCDS
 38386                                  ;               ES:DI points to DPB
 38387                                  ;               String at DS:SI may be reduced in length by removing prefix
 38388                                  ;               and substituting drive letter.
 38389                                  ;               CX = 0 If no splice done
 38390                                  ;               CX <> 0 otherwise
 38391                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 38392                                  ;                   left alone
 38393                                  ;               ThisDPB points to proper DPB
 38394                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 38395                                  ;----------------------------------------------------------------------------
 38396                                  
 38397                                  Splice:
 38398 00006DE5 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 38399 00006DEB 7469                    	JZ	short AllDone
 38400 00006DED 36FF36[A205]            	push	word [SS:THISCDS]
 38401 00006DF2 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 38402 00006DF7 1E                      	push	ds
 38403 00006DF8 56                      	push	si
 38404 00006DF9 5F                      	pop	di
 38405 00006DFA 07                      	pop	es
 38406 00006DFB 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 38407                                  SpliceScan:
 38408 00006DFD E8DFFC                  	call	GetCDSFromDrv
 38409 00006E00 724A                    	JC	short SpliceDone
 38410 00006E02 FEC0                    	INC     AL
 38411                                  	; 17/12/2022
 38412                                  	;test	byte [si+68],20h
 38413 00006E04 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 38414                                  	;;test	word [si+67],2000h
 38415                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38416 00006E08 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 38417 00006E0A 57                      	push	di
 38418 00006E0B E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 38419 00006E0E 7403                    	JZ	short SpliceFound	;
 38420                                  SpliceSkip:
 38421 00006E10 5F                      	pop	di
 38422 00006E11 EBEA                    	JMP	short SpliceScan	;               continue;
 38423                                  SpliceFound:
 38424 00006E13 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38425 00006E17 7508                    	JNZ	short SpliceDo
 38426 00006E19 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38427 00006E1F 75EF                    	JNZ	short SpliceSkip
 38428                                  SpliceDo:
 38429 00006E21 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38430 00006E23 06                      	push	es
 38431 00006E24 1F                      	pop	ds
 38432 00006E25 5F                      	pop	di
 38433 00006E26 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38434 00006E29 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38435 00006E2D 09C0                    	OR      AX,AX
 38436 00006E2F 7808                    	JS	short NoPoke
 38437 00006E31 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38438 00006E33 29F0                    	SUB     AX,SI
 38439 00006E35 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38440                                  NoPoke:
 38441 00006E39 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38442 00006E3C 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38443 00006E3E B05C                    	MOV     AL,"\"
 38444 00006E40 AA                      	STOSB
 38445                                  SpliceCopy:                             ;               strcpy (src, p);
 38446 00006E41 E89EA3                  	call	FStrCpy
 38447 00006E44 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38448 00006E47 80C901                  	OR      CL,1                    ; signal splice done.
 38449 00006E4A EB0C                    	JMP     SHORT DoSet             ;               return;
 38450                                  SpliceDone:                             ;               }
 38451 00006E4C 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38452 00006E51 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38453                                  AllDone:
 38454 00006E56 31C9                    	XOR     CX,CX
 38455                                  DoSet:
 38456 00006E58 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38457                                  	;les	di,[si+69]
 38458 00006E5D C47C45                  	LES     DI,[SI+curdir.devptr]	
 38459 00006E60 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38460 00006E65 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 38461                                  Splice_retn:
 38462 00006E6A C3                      	retn
 38463                                  
 38464                                  ; 15/05/2019 - Retro DOS v4.0
 38465                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 38466                                  
 38467                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38468                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 38469                                  
 38470                                  ;Break <$NameTrans - partially process a name>
 38471                                  ;----------------------------------------------------------------------------
 38472                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 38473                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 38474                                  ;   to Transpath playing games with devices, we need to insure that the output
 38475                                  ;   has drive letter and : in it.
 38476                                  ;
 38477                                  ;   Inputs:     DS:SI - source string for translation
 38478                                  ;               ES:DI - pointer to buffer
 38479                                  ;   Outputs:
 38480                                  ;       Carry Clear
 38481                                  ;               Buffer at ES:DI is filled in with data
 38482                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 38483                                  ;       Carry Set
 38484                                  ;               AX = error_path_not_found
 38485                                  ;   Registers modified: all
 38486                                  ;----------------------------------------------------------------------------
 38487                                  
 38488                                  _$NameTrans:
 38489 00006E6B 1E                      	push	ds
 38490 00006E6C 56                      	push	si
 38491 00006E6D 06                      	push	es
 38492 00006E6E 57                      	push	di
 38493 00006E6F 51                      	push	cx ; MSDOS 6.0
 38494                                  	
 38495                                  	; MSDOS 6.0	
 38496                                  ; M027 - Start
 38497                                  ;
 38498                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 38499                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 38500                                  ; device if the old call set the volume attribute bit. Note that devname in
 38501                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 38502                                  ; and restore CX.
 38503                                  
 38504                                  	;mov	ch,16h
 38505 00006E70 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 38506 00006E72 E8B902                  	call	SetAttrib
 38507                                  
 38508                                  ; M027 - End
 38509                                  
 38510                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38511 00006E75 BF[BE03]                	MOV     DI,OPENBUF
 38512 00006E78 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 38513 00006E7B 59                      	pop	cx ; MSDOS 6.0
 38514 00006E7C 5F                      	pop     di
 38515 00006E7D 07                      	pop	es
 38516 00006E7E 5E                      	pop     si
 38517 00006E7F 1F                      	pop     ds
 38518 00006E80 7303                    	JNC	short TransOK
 38519 00006E82 E9BB97                  	jmp	SYS_RET_ERR
 38520                                  TransOK:
 38521 00006E85 BE[BE03]                	MOV     SI,OPENBUF
 38522 00006E88 16                      	push	ss
 38523 00006E89 1F                      	pop	ds
 38524                                  ;GotText:
 38525 00006E8A E855A3                  	call	FStrCpy
 38526 00006E8D E9A797                  	jmp	SYS_RET_OK
 38527                                  
 38528                                  ;Break   <DriveFromText - return drive number from a text string>
 38529                                  ;----------------------------------------------------------------------------
 38530                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38531                                  ;   pointer.
 38532                                  ;
 38533                                  ;   Inputs:     DS:SI point to a text string
 38534                                  ;   Outputs:    AL has drive number
 38535                                  ;               DS:SI advanced
 38536                                  ;   Registers modified: AX,SI.
 38537                                  ;----------------------------------------------------------------------------
 38538                                  
 38539                                  DriveFromText:
 38540 00006E90 30C0                    	XOR     AL,AL                   ;       drive = 0;
 38541                                  	;CMP	BYTE [SI],0		;       if (*s &&
 38542                                  	; 23/09/2023
 38543 00006E92 3804                    	cmp	[si],al ; 0
 38544 00006E94 74D4                    	jz	short Splice_retn
 38545 00006E96 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 38546 00006E9A 75CE                    	jnz	short Splice_retn
 38547 00006E9C AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38548 00006E9D 0C20                    	OR      AL,20h
 38549                                  	;sub	al,60h
 38550 00006E9F 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38551 00006EA1 75C7                    	jnz	short Splice_retn
 38552 00006EA3 B0FF                    	MOV	AL,-1                   ; nuke AL...
 38553                                  	; 23/09/2023
 38554                                  	;dec	al ; -1
 38555 00006EA5 C3                      	retn				;           }
 38556                                  
 38557                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38558                                  ;----------------------------------------------------------------------------
 38559                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38560                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38561                                  ;
 38562                                  ;   Inputs:     AL has 0-based drive number
 38563                                  ;   Outputs:    ES:DI advanced
 38564                                  ;   Registers modified: AX
 38565                                  ;----------------------------------------------------------------------------
 38566                                  
 38567                                  TextFromDrive:
 38568 00006EA6 FEC0                    	INC     AL
 38569                                  TextFromDrive1:
 38570                                  	;add	al,40h
 38571 00006EA8 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38572 00006EAA B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38573 00006EAC AB                      	STOSW
 38574                                  PathPref_retn:
 38575 00006EAD C3                      	retn
 38576                                  
 38577                                  ;Break   <PathPref - see if one path is a prefix of another>
 38578                                  ;----------------------------------------------------------------------------
 38579                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38580                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38581                                  ;   prefix: A:\ and A:\FOO
 38582                                  ;
 38583                                  ;   Inputs:     DS:SI potential prefix
 38584                                  ;               ES:DI string
 38585                                  ;   Outputs:    Zero set => prefix found
 38586                                  ;                   DI/SI advanced past matching part
 38587                                  ;               Zero reset => no prefix, DS/SI garbage
 38588                                  ;   Registers modified: CX
 38589                                  ;----------------------------------------------------------------------------
 38590                                  
 38591                                  PathPref:
 38592 00006EAE E848A3                  	call	DStrLen                 ; get length
 38593 00006EB1 49                      	DEC     CX                      ; do not include nul byte
 38594 00006EB2 F3A6                    	REPZ    CMPSB                   ; compare
 38595 00006EB4 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38596 00006EB6 50                      	push	ax			; save char register
 38597 00006EB7 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38598 00006EBA E8D1E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38599 00006EBD 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38600                                  NotSep:                                 ; 2/13/KK
 38601 00006EBF 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38602 00006EC2 E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38603                                  Prefix:
 38604 00006EC5 58                      	pop	ax			; get back original
 38605 00006EC6 C3                      	retn
 38606                                  
 38607                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38608                                  ;----------------------------------------------------------------------------
 38609                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38610                                  ;     a path separator.
 38611                                  ;
 38612                                  ;     Input:    DS:SI target string (null terminated)
 38613                                  ;     Output:   Zero set => path separator encountered in string
 38614                                  ;               Zero clear => null encountered
 38615                                  ;     Registers modified: SI
 38616                                  ;----------------------------------------------------------------------------
 38617                                  
 38618                                  ScanPathChar:
 38619 00006EC7 AC                      	LODSB                           ; fetch a character
 38620 00006EC8 E872FE                  	call    PathSepGotCh
 38621 00006ECB 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38622                                  	;call	PATHCHRCMP              ; path separator?
 38623                                  	;retn
 38624                                  	; 18/12/2022
 38625 00006ECD E9BEE1                  	jmp	PATHCHRCMP
 38626                                  
 38627                                  ;============================================================================
 38628                                  ; FILE.ASM, MSDOS 6.0, 1991
 38629                                  ;============================================================================
 38630                                  ; 14/07/2018 - Retro DOS v3.0
 38631                                  
 38632                                  ; 13/05/2019 - Retro DOS v4.0
 38633                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38634                                  
 38635                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38636                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38637                                  
 38638                                  ; MSDOS 2.11
 38639                                  ;BREAK <$Open - open a file handle>
 38640                                  ;----------------------------------------------------------------------------
 38641                                  ;   Assembler usage:
 38642                                  ;           LDS     DX, Name
 38643                                  ;           MOV     AH, Open
 38644                                  ;           MOV     AL, access
 38645                                  ;           INT     int_command
 38646                                  ;
 38647                                  ;       ACCESS          Function
 38648                                  ;       ------          --------
 38649                                  ;       open_for_read   file is opened for reading
 38650                                  ;       open_for_write  file is opened for writing
 38651                                  ;       open_for_both   file is opened for both reading and writing.
 38652                                  ;
 38653                                  ;   Error returns:
 38654                                  ;           AX = error_invalid_access
 38655                                  ;              = error_file_not_found
 38656                                  ;              = error_access_denied
 38657                                  ;              = error_too_many_open_files
 38658                                  ;----------------------------------------------------------------------------
 38659                                  
 38660                                  ; MSDOS 6.0
 38661                                  ;	BREAK <$Open - open a file from a path string>
 38662                                  ;----------------------------------------------------------------------------
 38663                                  ;
 38664                                  ;**	$OPen - Open a File
 38665                                  ;
 38666                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38667                                  ;	file and and returns a handle
 38668                                  ;
 38669                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38670                                  ;		(AL) = open mode
 38671                                  ;	EXIT	'C' clear if OK
 38672                                  ;		  (ax) = file handle
 38673                                  ;		'C' set if error
 38674                                  ;		  (ax) = error code
 38675                                  ;	USES	all
 38676                                  ;
 38677                                  ;----------------------------------------------------------------------------
 38678                                  
 38679                                  ; 13/05/2019 - Retro DOS v4.0
 38680                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38681                                  
 38682                                  _$OPEN:       
 38683 00006ED0 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38684                                  _$Open2:
 38685                                  	;mov	ch,16h
 38686 00006ED2 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38687 00006ED4 E85702                  	call	SetAttrib
 38688 00006ED7 B9[6E2B]                	mov	cx,DOS_OPEN
 38689                                  
 38690                                  	;xor	ah,ah  ; MSDOS 3.3
 38691                                  
 38692 00006EDA 50                      	push	ax
 38693                                  
 38694                                  ;*	General file open/create code. The $CREATE call and the various
 38695                                  ;	$OPEN calls all come here.
 38696                                  ;
 38697                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38698                                  ;	path names, etc., and then dispatch to our individual handlers.
 38699                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38700                                  ;
 38701                                  ;	(TOS) = create mode
 38702                                  ;	(CX) = address of routine to call to do actual function
 38703                                  ;	(DS:DX) = ASCIZ name
 38704                                  ;	SAttrib = Attribute mask
 38705                                  
 38706                                  ;	Get a free SFT and mark it "being allocated"
 38707                                  
 38708                                  AccessFile:
 38709 00006EDB E82FA4                  	call	ECritSFT
 38710 00006EDE E8D8F7                  	call	SFNFree			; get a free sfn
 38711 00006EE1 E844A4                  	call	LCritSFT
 38712 00006EE4 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38713 00006EE6 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38714 00006EEB 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38715 00006EF0 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38716                                  
 38717                                  ;	Find a free area in the user's JFN table.
 38718                                  
 38719 00006EF5 E8AEF7                  	call	JFNFree			; get a free jfn
 38720 00006EF8 7303                    	jnc	short SaveJFN
 38721                                  OpenFailJ:
 38722 00006EFA E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38723                                  
 38724                                  SaveJFN:
 38725 00006EFD 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38726 00006F02 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38727 00006F07 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38728                                  
 38729                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38730                                  ;	reusing the same JFN.
 38731                                  
 38732 00006F0C 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38733 00006F11 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38734 00006F14 89D6                    	MOV	SI,DX			; get name in appropriate place
 38735 00006F16 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38736 00006F19 51                      	push	cx			; save routine to call
 38737 00006F1A E844FC                  	call	TransPath		; convert the path
 38738 00006F1D 5B                      	pop	bx			; (bx) = routine to call
 38739                                  
 38740 00006F1E 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38741 00006F23 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38742 00006F25 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38743 00006F2B 7404                    	JZ	short SetSearch
 38744                                  	;mov	al,2
 38745 00006F2D B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38746                                  OpenCleanJ:
 38747 00006F2F EB50                    	JMP	short OpenClean
 38748                                  
 38749                                  SetSearch:
 38750 00006F31 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38751                                  
 38752                                  ;	We need to get the new inheritance bits.
 38753                                  
 38754 00006F32 31C9                    	xor	cx,cx
 38755                                  	; MSDOS 6.0
 38756                                  	;mov	[si+2],cx ; 0
 38757 00006F34 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38758                                  	;mov    [si+51],cx ; 0
 38759 00006F37 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38760                                  	;
 38761 00006F3A 81FB[6E2B]              	CMP	BX,DOS_OPEN
 38762 00006F3E 7509                    	JNZ	short _DoOper
 38763                                  	;test   al,80h
 38764 00006F40 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38765 00006F42 7405                    	JZ	short _DoOper ; 10/08/2018
 38766 00006F44 247F                    	AND	AL,7Fh			; mask off inherit bit
 38767                                  	;mov	cx,1000h
 38768 00006F46 B90010                  	MOV	CX,sf_no_inherit
 38769                                  _DoOper:
 38770                                  	;; MSDOS 3.3
 38771                                  	;;mov	word [si+2], 0
 38772                                  	;;mov	word [si+33h], 0
 38773                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38774                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38775                                  
 38776                                  	; MSDOS 6.0
 38777                                  ;**	Check if this is an extended open. If so you must set the
 38778                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38779                                  ;	Set_EXT_mode in creat.asm
 38780                                  
 38781                                  	; MSDOS 6.0
 38782                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38783 00006F49 57                      	push	di
 38784 00006F4A 06                      	push	es
 38785 00006F4B 1E                      	push	ds
 38786 00006F4C 07                      	pop	es
 38787 00006F4D 56                      	push	si
 38788 00006F4E 5F                      	pop	di			; (es:di) = SFT address
 38789 00006F4F E808BC                  	call	Set_EXT_mode
 38790                                  	;RESTORE <es, di>
 38791 00006F52 07                      	pop	es
 38792 00006F53 5F                      	pop	di
 38793                                  
 38794                                  	;Context DS
 38795 00006F54 16                      	push	ss
 38796 00006F55 1F                      	pop	ds	
 38797                                  
 38798 00006F56 51                      	push	cx
 38799 00006F57 FFD3                    	CALL	BX			; blam!
 38800 00006F59 59                      	pop	cx
 38801 00006F5A C536[9E05]              	LDS	SI,[THISSFT]
 38802 00006F5E 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38803                                  	;jc	short OpenE ; MSDOS 3.3
 38804                                  
 38805                                  ;	The SFT was successfully opened. Remove busy mark.
 38806                                  
 38807                                  OpenOK:
 38808                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38809 00006F60 C7040100                	mov	word [SI],1
 38810                                  	;or	[SI+5],cx
 38811 00006F64 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38812                                  
 38813                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38814                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38815                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38816                                  ;
 38817                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38818                                  ; sharer.
 38819                                  
 38820 00006F67 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38821 00006F6B 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38822                                  
 38823 00006F70 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38824                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38825                                  OpenOkj:
 38826 00006F77 E9BD96                  	jmp	SYS_RET_OK		; bye with no errors
 38827                                  
 38828                                  	; MSDOS 6.0
 38829                                  ;Extended Open hooks check
 38830                                  OpenE2:					;AN000;;EO.
 38831 00006F7A 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38832 00006F7D 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38833 00006F7F EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38834                                  
 38835                                  ;	Extended Open hooks check
 38836                                  ;
 38837                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38838                                  
 38839                                  OpenClean:
 38840 00006F81 5B                      	pop	bx			; clean off stack
 38841                                  OpenE:
 38842                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38843 00006F82 C7040000                	mov	word [SI],0
 38844 00006F86 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38845 00006F8B C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38846 00006F8E EB02                    	JMP	SHORT OpenCritLeave
 38847                                  
 38848                                  OpenFail:
 38849 00006F90 FB                      	STI
 38850 00006F91 59                      	pop	cx			; Clean stack
 38851                                  OpenCritLeave:
 38852 00006F92 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38853                                  
 38854                                  	; MSDOS 6.0
 38855                                  ; File Tagging DOS 4.00
 38856 00006F99 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38857                                  					;AN000;;FT. code page mismatch
 38858 00006F9F 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38859 00006FA1 E9A496                  	jmp	From_GetSet		;AN000;;FT. yes
 38860                                  NORERR: 				;AN000;
 38861                                  ; File Tagging DOS 4.00
 38862                                  
 38863 00006FA4 E99996                  	jmp	SYS_RET_ERR		; no free, return error
 38864                                  
 38865                                  ; MSDOS 2.11
 38866                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38867                                  ;----------------------------------------------------------------------------
 38868                                  ;   Assembler usage:
 38869                                  ;           LDS     DX, name
 38870                                  ;           MOV     AH, Creat
 38871                                  ;           MOV     CX, access
 38872                                  ;           INT     21h
 38873                                  ;       ; AX now has the handle
 38874                                  ;
 38875                                  ;   Error returns:
 38876                                  ;           AX = error_access_denied
 38877                                  ;              = error_path_not_found
 38878                                  ;              = error_too_many_open_files
 38879                                  ;----------------------------------------------------------------------------
 38880                                  
 38881                                  ; MSDOS 6.0
 38882                                  ;	BREAK <$Creat - create a brand-new file>
 38883                                  ;----------------------------------------------------------------------------
 38884                                  ;
 38885                                  ;**	$Creat - Create a File
 38886                                  ;
 38887                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38888                                  ;	initial attributes contained in CX
 38889                                  ;
 38890                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38891                                  ;		(CX) = initial attributes
 38892                                  ;	EXIT	'C' set if error
 38893                                  ;		  (ax) = error code
 38894                                  ;		'C' clear if OK
 38895                                  ;		  (ax) = file handle
 38896                                  ;	USES	all
 38897                                  ;
 38898                                  ;----------------------------------------------------------------------------
 38899                                  
 38900                                  _$CREAT:
 38901 00006FA7 51                      	push	cx			; Save attributes on stack
 38902 00006FA8 B9[442A]                	mov	CX,DOS_CREATE		; routine to call
 38903                                  AccessSet:
 38904                                  	;mov	byte [ss:SATTRIB],6
 38905 00006FAB 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38906                                  	; 10/08/2018
 38907 00006FB1 E927FF                  	JMP	AccessFile		; use good ol' open
 38908                                  
 38909                                  ; MSDOS 6.0 (MSDOS 3.3)
 38910                                  ;	BREAK <$CHMOD - change file attributes>
 38911                                  ;----------------------------------------------------------------------------
 38912                                  ;
 38913                                  ;**	$CHMOD - Change File Attributes
 38914                                  ;
 38915                                  ;   Assembler usage:
 38916                                  ;	    LDS     DX, name
 38917                                  ;	    MOV     CX, attributes
 38918                                  ;	    MOV     AL,func (0=get, 1=set)
 38919                                  ;	    INT     21h
 38920                                  ;   Error returns:
 38921                                  ;	    AX = error_path_not_found
 38922                                  ;	    AX = error_access_denied
 38923                                  ;
 38924                                  ;----------------------------------------------------------------------------
 38925                                  
 38926                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38927                                  _$CHMOD:
 38928                                  	; 05/08/2018 - Retro DOS v3.0
 38929                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38930 00006FB4 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38931 00006FB7 50                      	push	ax
 38932 00006FB8 51                      	push	cx			; save function and attributes
 38933 00006FB9 89D6                    	MOV	SI,DX			; get things in appropriate places
 38934 00006FBB E8A7FB                  	call	TransPathSet		; get correct path
 38935 00006FBE 59                      	pop	cx
 38936 00006FBF 58                      	pop	ax			; and get function and attrs back
 38937 00006FC0 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38938 00006FC2 16                      	push	ss			; set up for later possible calls
 38939 00006FC3 1F                      	pop	ds
 38940 00006FC4 803E[7A05]FF            	CMP	byte [CMETA],-1
 38941 00006FC9 754E                    	JNZ	short ChModErr
 38942                                  	;mov	byte [SATTRIB],16h
 38943 00006FCB C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38944 00006FD0 2C01                    	SUB	AL,1			; fast way to discriminate
 38945 00006FD2 720B                    	JB	short ChModGet		; 0 -> go get value
 38946 00006FD4 7417                    	JZ	short ChModSet		; 1 -> go set value
 38947                                  	;mov	byte [EXTERR_LOCUS],1
 38948 00006FD6 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38949                                  	;mov	al,1
 38950 00006FDB B001                    	mov	al,error_invalid_function ; bad value
 38951                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38952                                  chmod_errj:	
 38953                                  	;;jmp	SYS_RET_ERR
 38954                                  	;jmp	short ChModE	
 38955 00006FDD EBC5                    	jmp	short NORERR	; 06/12/2022
 38956                                  ChModGet:
 38957 00006FDF E84CB9                  	call	GET_FILE_INFO		; suck out the ol' info
 38958 00006FE2 7237                    	JC	short ChModE		; error codes are already set for ret
 38959 00006FE4 E89A94                  	call	Get_User_Stack		; point to user saved vaiables
 38960                                  	;mov	[SI+4],ax
 38961 00006FE7 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38962                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38963                                  OpenOkj2:
 38964                                  	; 17/12/2022
 38965                                  	;;jmp	SYS_RET_OK		; say sayonara
 38966                                  	;jmp	short OpenOkj
 38967                                  	; 25/06/2019
 38968 00006FEA E94D96                  	jmp	SYS_RET_OK_clc
 38969                                  
 38970                                  ChModSet:
 38971 00006FED 89C8                    	MOV	AX,CX			; get attrs in position
 38972 00006FEF E89AB9                  	call	SET_FILE_ATTRIBUTE	; go set
 38973 00006FF2 7227                    	JC	short ChModE		; errors are set
 38974                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38975                                  	;jmp	SYS_RET_OK
 38976                                  OpenOkj3:
 38977                                  	;jmp	short OpenOkj2
 38978                                  	; 17/12/2022
 38979 00006FF4 E94096                  	jmp	SYS_RET_OK
 38980                                  
 38981                                  ; 17/12/2022
 38982                                  %if 0
 38983                                  ChModErr:
 38984                                  NotFound:	; 17/12/2022
 38985                                  	;mov	al,3
 38986                                  	mov	al,error_path_not_found
 38987                                  ChModE:
 38988                                  UnlinkE:	; 17/12/2022
 38989                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38990                                  	;;jmp	SYS_RET_ERR
 38991                                  	;jmp	short chmod_errj
 38992                                  	; 17/12/2022
 38993                                  	jmp	short NORERR
 38994                                  %endif
 38995                                  
 38996                                  ; 22/05/2019 - Retro DOS v4.0
 38997                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38998                                  
 38999                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39000                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39001                                  
 39002                                  ;	BREAK <$UNLINK - delete a file entry>
 39003                                  ;----------------------------------------------------------------------------
 39004                                  ;
 39005                                  ;**	$UNLINK - Delete a File
 39006                                  ;
 39007                                  ;
 39008                                  ;	Assembler usage:
 39009                                  ;	    LDS     DX, name
 39010                                  ;	    IF VIA SERVER DOS CALL
 39011                                  ;	     MOV     CX,SEARCH_ATTRIB
 39012                                  ;	    MOV     AH, Unlink
 39013                                  ;	    INT     21h
 39014                                  ;
 39015                                  ;	ENTRY	(ds:dx) = path name
 39016                                  ;		(cx) = search_attribute, if via server_dos
 39017                                  ;	EXIT	'C' clear if no error
 39018                                  ;		'C' set if error
 39019                                  ;		  (ax) = error code
 39020                                  ;			= error_file_not_found
 39021                                  ;			= error_access_denied
 39022                                  ;
 39023                                  ;----------------------------------------------------------------------------
 39024                                  
 39025                                  _$UNLINK:
 39026 00006FF7 51                      	push	cx			; Save possible CX input parm
 39027 00006FF8 89D6                    	MOV	SI,DX			; Point at input string
 39028 00006FFA BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39029 00006FFD E865FB                  	call	TransPathSet		; go get normalized path
 39030 00007000 59                      	pop	cx
 39031 00007001 7216                    	JC	short ChModErr		; badly formed path
 39032 00007003 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39033 00007009 750E                    	JNZ	short NotFound
 39034 0000700B 16                      	push	ss
 39035 0000700C 1F                      	pop	ds
 39036                                  	;mov	ch,6
 39037 0000700D B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39038 0000700F E81C01                  	call	SetAttrib
 39039 00007012 E809B5                  	call	DOS_DELETE		; remove that file
 39040                                  	;JC	short UnlinkE 		; error is there
 39041                                  	; 17/12/2022
 39042 00007015 728D                    	jc	short NORERR
 39043                                  
 39044                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39045                                  UnlinkOk:
 39046                                  	;jmp	SYS_RET_OK		; okey doksy
 39047 00007017 EBDB                    	jmp	short OpenOkj3
 39048                                  
 39049                                  	; 17/12/2022
 39050                                  ChModErr:	; 17/12/2022
 39051                                  NotFound:
 39052                                  	;mov	al,3
 39053 00007019 B003                    	MOV	AL,error_path_not_found
 39054                                  ChModE:		; 17/12/2022
 39055                                  UnlinkE:
 39056                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39057                                  	;;jmp	SYS_RET_ERR		; bye
 39058                                  	;jmp	short ChModE
 39059                                  	; 17/12/2022
 39060 0000701B EB87                    	jmp	short NORERR
 39061                                  
 39062                                  ;BREAK <$RENAME - move directory entries around>
 39063                                  ;----------------------------------------------------------------------------
 39064                                  ;
 39065                                  ;   Assembler usage:
 39066                                  ;	    LDS     DX, source
 39067                                  ;	    LES     DI, dest
 39068                                  ;	    IF VIA SERVER DOS CALL
 39069                                  ;	      MOV   CX,SEARCH_ATTRIB
 39070                                  ;	    MOV     AH, Rename
 39071                                  ;	    INT     21h
 39072                                  ;
 39073                                  ;   Error returns:
 39074                                  ;	    AX = error_file_not_found
 39075                                  ;	       = error_not_same_device
 39076                                  ;	       = error_access_denied
 39077                                  ;
 39078                                  ;----------------------------------------------------------------------------
 39079                                  
 39080                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39081                                  _$RENAME:
 39082                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39083 0000701D 51                      	push	cx
 39084 0000701E 1E                      	push	ds
 39085 0000701F 52                      	push	dx			; save source and possible CX arg
 39086 00007020 06                      	PUSH	ES
 39087 00007021 1F                      	POP	DS			; move dest to source
 39088 00007022 89FE                    	MOV	SI,DI			; save for offsets
 39089 00007024 BF[3E04]                	MOV	DI,RENBUF
 39090 00007027 E83BFB                  	call	TransPathSet		; munge the paths
 39091 0000702A 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 39092 0000702F 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 39093 00007034 5E                      	pop	si
 39094 00007035 1F                      	pop	ds
 39095 00007036 59                      	pop	cx			; get back source and possible CX arg
 39096                                  epjc2:	
 39097 00007037 72E0                    	JC	short ChModErr		; get old error
 39098 00007039 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 39099 0000703F 75D8                    	JNZ	short NotFound
 39100 00007041 51                      	push	cx			; Save possible CX arg
 39101 00007042 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39102 00007045 E81DFB                  	call	TransPathSet		; wham
 39103 00007048 59                      	pop	cx
 39104 00007049 72EC                    	JC	short epjc2
 39105 0000704B 16                      	push	ss
 39106 0000704C 1F                      	pop	ds
 39107 0000704D 803E[7A05]FF            	CMP	byte [CMETA],-1
 39108 00007052 72C5                    	JB	short NotFound
 39109                                  
 39110                                  	; MSDOS 6.0
 39111 00007054 FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 39112 00007058 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 39113 0000705C BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 39114 0000705F 16                      	PUSH	SS			   ;AN000;;MS.
 39115 00007060 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 39116 00007061 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 39117                                  rnloop: 				   ;AN000;
 39118 00007063 E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 39119 00007066 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 39120 00007068 E846A1                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 39121 0000706B 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 39122 0000706D FEC0                    	INC	AL			   ;AN000;;MS.	next
 39123 0000706F EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 39124                                  rnerr:					   ;AN000;
 39125 00007071 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 39126                                  	;error	error_current_directory    ;AN000;;MS.
 39127 00007074 B010                    	mov	al,error_current_directory 
 39128                                  	;jmp	SYS_RET_ERR
 39129                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39130 00007076 EBA3                    	jmp	short UnlinkE
 39131                                  dorn:					   ;AN000;
 39132 00007078 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39133 0000707D 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 39134                                  
 39135 00007082 16                      	push	ss
 39136 00007083 1F                      	pop	ds
 39137                                  
 39138                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39139                                  	;mov	ch,16h
 39140 00007084 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 39141                                  					; rename appropriate files
 39142 00007086 E8A500                  	call	SetAttrib
 39143 00007089 E870B6                  	call	DOS_RENAME		; do the deed
 39144 0000708C 728D                    	JC	short UnlinkE 		; errors
 39145                                  
 39146                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39147                                  	;jmp	SYS_RET_OK
 39148 0000708E EB87                    	jmp	short UnlinkOk
 39149                                  
 39150                                  
 39151                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39152                                  
 39153                                  ; 14/07/2018 - Retro DOS v3.0
 39154                                  ; MSDOS 3.3 (& MSDOS 6.0)
 39155                                  
 39156                                  ;Break <$CreateNewFile - Create a new directory entry>
 39157                                  ;----------------------------------------------------------------------------
 39158                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 39159                                  ;	was no previous directory entry, and fail if a directory entry with
 39160                                  ;	the same name existed previously.
 39161                                  ;
 39162                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 39163                                  ;		CX contains default file attributes
 39164                                  ;   Outputs:	Carry Clear:
 39165                                  ;		    AX has file handle opened for read/write
 39166                                  ;		Carry Set:
 39167                                  ;		    AX has error code
 39168                                  ;   Registers modified: All
 39169                                  ;----------------------------------------------------------------------------
 39170                                  
 39171                                  _$CreateNewFile:
 39172 00007090 51                      	push	cx			; Save attributes on stack
 39173 00007091 B9[112B]                	MOV	CX,DOS_Create_New	; routine to call
 39174 00007094 E914FF                  	JMP	AccessSet		; use good ol' open
 39175                                  
 39176                                  ;**	BinToAscii - convert a number to a string.
 39177                                  ;----------------------------------------------------------------------------
 39178                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 39179                                  ;	This routine is used to generate temp file names so we don't spend
 39180                                  ;	the time and code needed for a true hex number, we just use
 39181                                  ;	A thorugh O.
 39182                                  ;
 39183                                  ;	ENTRY	(ax) = value
 39184                                  ;		(es:di) = destination
 39185                                  ;	EXIT	(es:di) updated by 4
 39186                                  ;	USES	cx, di, flags
 39187                                  ;----------------------------------------------------------------------------
 39188                                  
 39189                                  ; MSDOS 3.3
 39190                                  ;BinToAscii:
 39191                                  ;	mov     cx,4
 39192                                  ;bta5:
 39193                                  ;	push    cx
 39194                                  ;	mov     cl,4
 39195                                  ;	rol     ax,cl
 39196                                  ;	push    ax
 39197                                  ;	and     al,0Fh
 39198                                  ;	add     al,'0'
 39199                                  ;	cmp     al,'9'
 39200                                  ;	jbe     short bta6
 39201                                  ;	add     al,7
 39202                                  ;bta6: 
 39203                                  ;	stosb
 39204                                  ;	pop     ax
 39205                                  ;	pop     cx
 39206                                  ;	loop    bta5
 39207                                  ;	retn
 39208                                  
 39209                                  ; MSDOS 6.0
 39210                                  BinToAscii:
 39211 00007097 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 39212                                  bta5:	
 39213 0000709A D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 39214 0000709C 50                      	push	ax			; preserve remainder of digits
 39215 0000709D 240F                    	AND	AL,0Fh			; grab low nibble
 39216 0000709F 0441                    	ADD	AL,'A'			; turn into ascii
 39217 000070A1 AA                      	STOSB				; drop in the character
 39218 000070A2 58                      	pop	ax			; (ax) = shifted number
 39219 000070A3 FECD                    	dec	ch
 39220 000070A5 75F3                    	jnz	short bta5		; process 4 digits
 39221 000070A7 C3                      	retn
 39222                                  
 39223                                  ;Break	<$CreateTempFile - create a unique name>
 39224                                  ;----------------------------------------------------------------------------
 39225                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 39226                                  ;	Method used is to get the current time, convert to a name and attempt
 39227                                  ;	a create new. Repeat until create new succeeds.
 39228                                  ;
 39229                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 39230                                  ;		CX  contains default attributes
 39231                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 39232                                  ;		AX has handle
 39233                                  ;   Registers modified: all
 39234                                  ;----------------------------------------------------------------------------
 39235                                  
 39236                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39237                                  
 39238                                  _$CreateTempFile:
 39239                                  	;Enter
 39240 000070A8 55                      	push	bp
 39241 000070A9 89E5                    	mov	bp,sp
 39242                                  
 39243                                  	;LocalVar  EndPtr,DWORD
 39244                                  	;LocalVar  FilPtr,DWORD
 39245                                  	;LocalVar  Attr,WORD
 39246                                  
 39247 000070AB 83EC0A                  	sub	sp,10
 39248                                  
 39249                                  	;test	cx,0FFD8h
 39250 000070AE F7C1D8FF                	test	CX,~attr_changeable
 39251 000070B2 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 39252                                  
 39253                                  ; We need this "hook" here to detect these cases (like user sets one both of
 39254                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 39255                                  ; below. The code loops on error_access_denied, but if one of the non
 39256                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 39257                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 39258                                  ; need to detect these cases before getting to the loop.
 39259                                  
 39260                                  	;mov	ax, 5
 39261 000070B4 B80500                  	MOV	AX,error_access_denied
 39262 000070B7 EB69                    	JMP	SHORT SETTMPERR
 39263                                  
 39264                                  OKatts:
 39265                                  	;MOV	attr,CX 		; save attribute
 39266 000070B9 894EF6                  	mov     [bp-10],cx
 39267                                  	;MOV	FilPtrL,DX		; pointer to file
 39268 000070BC 8956F8                  	mov	[bp-8],dx
 39269                                  	;MOV	FilPtrH,DS
 39270 000070BF 8C5EFA                  	mov	[bp-6],ds
 39271                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 39272 000070C2 8C5EFE                  	mov	[bp-2],ds
 39273 000070C5 1E                      	PUSH	DS
 39274 000070C6 07                      	POP	ES			; destination for nul search
 39275 000070C7 89D7                    	MOV	DI,DX
 39276 000070C9 89F9                    	MOV	CX,DI
 39277 000070CB F7D9                    	NEG	CX			; number of bytes remaining in segment
 39278                                  	; MSDOS 6.0
 39279 000070CD 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 39280 000070CF 7501                    	JNZ	short okok		;AN000;MS. no
 39281                                  	;MOV	CX,-1			;AN000;MS.
 39282                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39283                                  	; 17/12/2022
 39284 000070D1 49                      	dec	cx  ; mov cx,-1
 39285                                  	;mov	cx,-1 ; 0FFFh
 39286                                  okok:					;AN000;
 39287 000070D2 31C0                    	XOR	AX,AX			;AN000;
 39288 000070D4 F2AE                    	REPNZ	SCASB			;AN000;
 39289                                  					;AN000;
 39290 000070D6 4F                      	DEC	DI			; point back to the null
 39291 000070D7 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 39292 000070DB E8B0DF                  	call	PATHCHRCMP		; Is it a path separator?
 39293 000070DE 7403                    	JZ	short SETENDPTR		; Yes
 39294                                  STOREPTH:
 39295 000070E0 B05C                    	MOV	AL,'\'
 39296 000070E2 AA                      	STOSB				; Add a path separator (and INC DI)
 39297                                  SETENDPTR:
 39298                                  	;MOV	EndPtrL,DI		; pointer to the tail
 39299 000070E3 8856FC                  	mov	[bp-4],dl
 39300                                  CreateLoop:
 39301 000070E6 16                      	push	ss			; let ReadTime see variables
 39302 000070E7 1F                      	pop	ds
 39303 000070E8 55                      	push	bp
 39304 000070E9 E82E9A                  	call	READTIME		; go get time
 39305 000070EC 5D                      	pop	bp
 39306                                  ;
 39307                                  ; Time is in CX:DX. Go drop it into the string.
 39308                                  ;
 39309                                  	;les	di,EndPtr		; point to the string
 39310 000070ED C47EFC                  	les	di,[BP-4]
 39311 000070F0 89C8                    	mov	ax,cx
 39312 000070F2 E8A2FF                  	call	BinToAscii		; store upper word
 39313 000070F5 89D0                    	mov	ax,dx
 39314 000070F7 E89DFF                  	call	BinToAscii		; store lower word
 39315 000070FA 30C0                    	xor	al,al
 39316 000070FC AA                      	STOSB				; nul terminate
 39317                                  	;LDS	DX,FilPtr		; get name
 39318 000070FD C556F8                  	lds	dx,[bp-8]
 39319                                  	;MOV	CX,Attr 		; get attr
 39320 00007100 8B4EF6                  	mov	cx,[bp-10]
 39321 00007103 55                      	push	bp
 39322 00007104 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 39323 00007107 5D                      	pop	bp
 39324 00007108 7319                    	JNC	short CreateDone	; failed, go try again
 39325                                  
 39326                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 39327                                  ; error and figure out what to do.
 39328                                  
 39329                                  	;; MSDOS 3.3			; M049 - start
 39330                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 39331                                  ;;	cmp	al,error_file_exists
 39332                                  ;;	jz	short CreateLoop	; file existed => try with new name
 39333                                  ;;	cmp	al,error_access_denied
 39334                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 39335                                  
 39336                                  	; MSDOS 6.0
 39337                                  	;cmp	al,50h
 39338 0000710A 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 39339 0000710C 74D8                    	JZ	short CreateLoop	; Y: try again
 39340                                  	;cmp	al,5
 39341 0000710E 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 39342 00007110 7510                    	JNZ	short SETTMPERR		; N: Error out
 39343                                  					; Y: Check to see if we got this due
 39344                                  					;    to the network drive. Note that
 39345                                  					;    the redir will set the exterr
 39346                                  					;    to error_cannot_make if this is 
 39347                                  					;    so. 
 39348 00007112 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 39349                                  					; See if it's REALLY an att mismatch
 39350 00007118 7408                    	je	short SETTMPERR		; no, network error, stop
 39351                                  ;M070
 39352                                  ; If the user failed on an I24, we do not want to try again
 39353                                  ;
 39354 0000711A 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 39355                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 39356                                  
 39357                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 39358                                  	; 17/12/2022
 39359 00007120 75C4                    	jne	short CreateLoop ; 10/06/2019 
 39360                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39361                                  	;jz	short SETTMPERR
 39362                                  	;jmp	short CreateLoop
 39363                                  
 39364                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 39365                                  					; M049 - end
 39366                                  SETTMPERR:
 39367 00007122 F9                      	STC
 39368                                  CreateDone:
 39369                                  	;Leave
 39370 00007123 89EC                    	mov	sp,bp
 39371 00007125 5D                      	pop	bp
 39372 00007126 7203                    	JC	short CreateFail
 39373 00007128 E90C95                  	jmp	SYS_RET_OK		; success!
 39374                                  CreateFail:
 39375 0000712B E91295                  	jmp	SYS_RET_ERR
 39376                                  
 39377                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 39378                                  ;   (CH) or to the value in CL if the current system call is through
 39379                                  ;   serverdoscall.
 39380                                  ;
 39381                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 39382                                  ;		fSharing == TRUE => set sattrib to CL
 39383                                  ;   Outputs:	none
 39384                                  ;   Registers changed:	CX
 39385                                  
 39386                                  SetAttrib:
 39387 0000712E 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 39388 00007134 7502                    	jnz	short Set
 39389 00007136 88E9                    	mov	cl,ch
 39390                                  Set:
 39391 00007138 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 39392 0000713D C3                      	retn
 39393                                  
 39394                                  ; 14/07/2018 - Retro DOS v3.0
 39395                                  ; MSDOS 6.0
 39396                                  
 39397                                  ; 29/04/2019 - Retro DOS v4.0
 39398                                  
 39399                                  ;Break	<Extended_Open- Extended open the file>
 39400                                  ;----------------------------------------------------------------------------
 39401                                  ; Input: AL= 0 reserved  AH=6CH
 39402                                  ;	 BX= mode
 39403                                  ;	 CL= create attribute  CH=search attribute (from server)
 39404                                  ;	 DX= flag
 39405                                  ;	 DS:SI = file name
 39406                                  ;	 ES:DI = parm list
 39407                                  ;			   DD  SET EA list (-1) null
 39408                                  ;			   DW  n  parameters
 39409                                  ;			   DB  type (TTTTTTLL)
 39410                                  ;			   DW  IOMODE
 39411                                  ; Function: Extended Open
 39412                                  ; Output: carry clear
 39413                                  ;		     AX= handle
 39414                                  ;		     CX=1 file opened
 39415                                  ;			2 file created/opened
 39416                                  ;			3 file replaced/opened
 39417                                  ;	  carry set: AX has error code
 39418                                  ;----------------------------------------------------------------------------
 39419                                  
 39420                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39421                                  _$Extended_Open:			  ;AN000;
 39422                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39423 0000713E 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39424 00007143 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39425                                  	; 17/12/2022
 39426 0000714A F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39427                                  	;;test	dx,0FE00h
 39428                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 39429 0000714D 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39430 0000714F 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39431 00007151 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39432 00007154 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39433                                  	;and	dl,0Fh
 39434 00007156 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39435 00007159 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 39436 0000715C 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 39437                                  	;and	ah,0F0h
 39438 0000715E 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39439 00007161 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39440 00007164 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 39441                                  
 39442 00007166 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39443 0000716B 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39444 00007170 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39445 00007175 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39446 0000717A 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39447 0000717F 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39448 00007184 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39449 00007189 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39450 0000718E 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39451 00007190 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39452 00007192 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39453                                  ext_inval2:				  ;AN000;;EO.
 39454                                  	;mov	al,1
 39455 00007194 B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39456                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39457                                  eo_err:
 39458                                  	;jmp	SYS_RET_ERR
 39459 00007196 EB93                    	jmp	short CreateFail
 39460                                  
 39461                                  ext_inval_parm:				  ;AN000;EO..
 39462 00007198 59                      	POP	CX			  ;AN000;EO..  pop up satck
 39463 00007199 5E                      	POP	SI			  ;AN000;EO..
 39464                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 39465                                  	;mov	al,13
 39466 0000719A B00D                    	mov	al,error_invalid_data
 39467                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39468                                  	;;jmp	SYS_RET_ERR
 39469                                  	;jmp	short eo_err
 39470                                  	; 17/12/2022
 39471 0000719C EB8D                    	jmp	short CreateFail
 39472                                  
 39473                                  	; 17/12/2022	
 39474                                  ;error_return:				  ;AN000;EO.
 39475                                  ;	retn				  ;AN000;EO.. return with error
 39476                                  
 39477                                  goopen2:				  ;AN000;
 39478                                  	; 17/12/2022
 39479                                  	;test	bh,20h				 
 39480 0000719E F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 39481                                  	;;test	bx,2000h
 39482                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 39483 000071A1 7406                    	JZ	short goopen		  ;AN000;EO.. no
 39484                                  	;or	byte [SS:EXTOPEN_ON],2
 39485 000071A3 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 39486                                  goopen:					  ;AN000;
 39487                                  	;or	byte [SS:EXTOPEN_ON],1 
 39488 000071A9 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 39489                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 39490                                  	; 18/12/2022
 39491 000071AF 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 39492                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 39493 000071B5 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 39494 000071BB 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 39495 000071BD E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 39496 000071C0 723F                    	JC	short error_return	  ;AN000;;EO. error
 39497                                  
 39498 000071C2 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39499 000071C8 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39500                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39501 000071CA 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 39502 000071D1 EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 39503                                  
 39504                                  	; 17/12/2022
 39505                                  ;ok_return2:
 39506                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 39507                                  
 39508                                  chknext:
 39509                                  	; 17/12/2022
 39510 000071D3 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 39511                                  	;;test	word [SS:EXTOPEN_FLAG],1
 39512                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 39513 000071D9 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 39514 000071DB E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 39515 000071DE 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 39516 000071E0 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39517 000071E6 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39518 000071E8 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 39519 000071EF 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 39520 000071F5 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 39521 000071F7 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 39522 000071FE EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39523                                  error_return2:
 39524 00007200 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 39525                                  error_return:	 ;17/12/2022
 39526 00007201 C3                      	retn				  ;AN000;;EO. return with error
 39527                                  
 39528                                  	; 17/12/2022
 39529                                  ok_return:
 39530                                  ok_return2:
 39531 00007202 E93294                  	jmp	SYS_RET_OK
 39532                                  
 39533                                  exist_open:				  ;AN000;
 39534 00007205 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39535 0000720B 7402                    	jz	short noserver		  ;AN000;;EO. no
 39536 0000720D 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 39537                                  noserver:
 39538 0000720F E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 39539 00007212 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 39540 00007214 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 39541 0000721A 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 39542                                  local_extopen:
 39543                                  	;cmp	ax,2
 39544 0000721C 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 39545 0000721F 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 39546                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 39547                                  	; 17/12/2022
 39548 00007221 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39549                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39550                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39551                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39552                                  	; 17/12/2022
 39553 00007227 745D                    	jz	short extexit ; 10/06/2019
 39554                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39555                                  	;jnz	short do_creat
 39556                                  	;jmp	short extexit
 39557                                  do_creat:
 39558 00007229 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39559 0000722E 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39560 00007233 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39561 00007235 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 39562 00007238 724C                    	JC	short extexit 		  ;AN000;;EO. error
 39563                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39564 0000723A 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39565                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39566 00007241 EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39567                                  
 39568                                  ext_ok:
 39569 00007243 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39570 00007249 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39571                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39572 0000724B 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39573                                  setXAttr:
 39574                                  	; 29/04/2019
 39575 00007252 50                      	push	ax
 39576 00007253 E82B92                  	call	Get_User_Stack		  ;AN000;;EO.
 39577 00007256 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39578                                  	;mov	[si+4],ax
 39579 0000725A 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39580 0000725D 58                      	pop	ax			  ;AN000;;EO.
 39581 0000725E 8904                    	mov	[si],ax
 39582                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39583                                  	; 17/12/2022
 39584 00007260 EBA0                    	jmp	short ok_return
 39585                                  ;ok_return:				  ;AN000;
 39586                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39587                                  
 39588                                  extexit2:				  ;AN000; ERROR RECOVERY
 39589 00007262 5B                      	POP	BX			  ;AN000;EO. close the handle
 39590 00007263 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39591                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39592 00007264 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39593                                  					  ;AN000;EO. from create;smr;SS Override
 39594 0000726A 750C                    	JNZ	short justopen		  ;AN000;EO.
 39595 0000726C 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39596 00007271 C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39597 00007273 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39598 00007276 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39599                                  
 39600                                  justopen:				  ;AN000;
 39601 00007278 E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39602                                  reserror:				  ;AN000;
 39603 0000727B 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39604 0000727C EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39605                                  
 39606                                  ext_file_unfound:			  ;AN000;
 39607                                  	;mov	ax,2
 39608 0000727E B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39609 00007281 EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39610                                  ext_inval:				  ;AN000;
 39611                                  	;mov	ax,1
 39612 00007283 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39613                                  lockoperr:	; 17/12/2022
 39614                                  extexit:
 39615 00007286 E9B793                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39616                                  
 39617                                  ;============================================================================
 39618                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39619                                  ;============================================================================
 39620                                  ; 14/07/2018 - Retro DOS v3.0
 39621                                  ; 22/05/2019 - Retro DOS v4.0
 39622                                  
 39623                                  ;BREAK <$LockOper - Lock Calls>
 39624                                  ;----------------------------------------------------------------------------
 39625                                  ;
 39626                                  ;   Assembler usage:
 39627                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39628                                  ;	    MOV     CX, OffsetHigh
 39629                                  ;	    MOV     DX, OffsetLow
 39630                                  ;	    MOV     SI, LengthHigh
 39631                                  ;	    MOV     DI, LengthLow
 39632                                  ;	    MOV     AH, LockOper
 39633                                  ;	    MOV     AL, Request
 39634                                  ;	    INT     21h
 39635                                  ;
 39636                                  ;   Error returns:
 39637                                  ;	    AX = error_invalid_handle
 39638                                  ;	       = error_invalid_function
 39639                                  ;	       = error_lock_violation
 39640                                  ;
 39641                                  ;   Assembler usage:
 39642                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39643                                  ;
 39644                                  ;				    0? lock all
 39645                                  ;				    8? lock write
 39646                                  ;				    ?2 lock multiple
 39647                                  ;				    ?3 unlock multiple
 39648                                  ;				    ?4 lock/read
 39649                                  ;				    ?5 write/unlock
 39650                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39651                                  ;	    MOV     BX, Handle
 39652                                  ;	    MOV     CX, count or size
 39653                                  ;	    LDS     DX, buffer
 39654                                  ;	    INT     21h
 39655                                  ;
 39656                                  ;   Error returns:
 39657                                  ;	    AX = error_invalid_handle
 39658                                  ;	       = error_invalid_function
 39659                                  ;	       = error_lock_violation
 39660                                  ;
 39661                                  ;----------------------------------------------------------------------------
 39662                                  
 39663                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39664                                  _$LockOper:
 39665 00007289 3C01                    	CMP	AL,1
 39666 0000728B 770B                    	JA	short lock_bad_func
 39667                                  
 39668 0000728D 57                      	PUSH	DI			       ; Save LengthLow
 39669 0000728E E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39670 00007291 731D                    	JNC	short lock_do 		       ; have valid handle
 39671 00007293 5F                      	POP	DI			       ; Clean stack
 39672                                  	;mov	al,6
 39673 00007294 B006                    	mov	al,error_invalid_handle
 39674                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39675                                  ;lockoperr:
 39676                                  	;jmp	SYS_RET_ERR
 39677                                  	; 17/12/2022
 39678 00007296 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39679                                  
 39680                                  lock_bad_func:
 39681                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39682 00007298 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39683                                  	;mov	al,1
 39684 0000729E B001                    	mov	al,error_invalid_function
 39685                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39686                                  lockoperrj:
 39687                                  	;jmp	SYS_RET_ERR
 39688 000072A0 EBE4                    	jmp	short lockoperr
 39689                                  
 39690                                  	; 22/05/2019 - Retro DOS v4.0
 39691                                  
 39692                                  	; MSDOS 6.0 
 39693                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39694                                  ; Dead code deleted, MD, 23 Mar 90
 39695                                  
 39696                                  ;lock_do:
 39697                                  ;	; MSDOS 3.3
 39698                                  ;	or	al,al
 39699                                  ;	pop	ax
 39700                                  ;	jz	short DOS_Lock
 39701                                  ;DOS_Unlock:
 39702                                  ;	;test	word [es:di+5],8000h
 39703                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39704                                  ;	JZ	short LOCAL_UNLOCK
 39705                                  ;	push    ax
 39706                                  ;	mov     ax,110Bh
 39707                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39708                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39709                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39710                                  ;			; SFT DPB field -> DPB of drive containing file
 39711                                  ;			; Return: CF set error
 39712                                  ;	pop     bx
 39713                                  ;	jmp     short ValChk
 39714                                  ;
 39715                                  ;LOCAL_UNLOCK:
 39716                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39717                                  ;ValChk:
 39718                                  ;	JNC	short Lock_OK
 39719                                  ;lockerror:
 39720                                  ;	jmp	SYS_RET_ERR
 39721                                  ;Lock_OK:
 39722                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39723                                  ;	jmp	SYS_RET_OK
 39724                                  ;DOS_Lock:
 39725                                  ;	;test	word [es:di+5],8000h
 39726                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39727                                  ;	JZ	short LOCAL_LOCK
 39728                                  ;	;CallInstall NET_XLock,MultNET,10
 39729                                  ;	mov     ax, 110Ah
 39730                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39731                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39732                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39733                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39734                                  ;			; Return: CF set error
 39735                                  ;	JMP	short ValChk
 39736                                  ;
 39737                                  ;LOCAL_LOCK:
 39738                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39739                                  ;	JMP	short ValChk
 39740                                  
 39741                                  ; 17/12/2022
 39742                                  LOCAL_UNLOCK:
 39743                                  	; MSDOS 3.3
 39744                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39745                                  	; MSDOS 6.0
 39746 000072A2 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39747                                  ValChk:
 39748 000072A6 7302                    	JNC	short Lock_OK
 39749                                  lockerror:
 39750                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39751                                  	;;jmp	SYS_RET_ERR
 39752                                  	;jmp	short lockoperrj
 39753                                  	; 17/12/2022
 39754 000072A8 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39755                                  Lock_OK:
 39756                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39757                                  	; 10/06/2019
 39758 000072AA A1[0C06]                	mov	ax,[TEMP_VAR]
 39759 000072AD E98793                  	jmp	SYS_RET_OK
 39760                                  
 39761                                  	; 22/05/2019
 39762                                  lock_do:
 39763                                  	; MSDOS 6.0
 39764 000072B0 89C3                    	MOV	BX,AX				; save AX
 39765 000072B2 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39766                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39767                                  	;;mov	[bp+0],dx
 39768                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39769                                  	; 15/12/2022
 39770 000072B5 895600                  	mov	[bp],dx
 39771                                  	;mov	[bp+2],cx
 39772 000072B8 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39773 000072BB 59                      	POP	CX				; get low length
 39774                                  	;mov	[bp+4],cx
 39775 000072BC 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39776                                  	;mov	[bp+6],si
 39777 000072BF 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39778 000072C2 B90100                  	MOV	CX,1				; one range
 39779                                  
 39780                                  ;	PUSH	CS				;
 39781                                  ;	POP	DS				; DS:DX points to
 39782                                  
 39783 000072C5 16                      	push	ss
 39784 000072C6 1F                      	pop	ds
 39785                                  
 39786 000072C7 89EA                    	MOV	DX,BP				; Lock_Buffer
 39787                                  	;test	al,1
 39788 000072C9 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39789                                  	;JNZ	short DOS_Unlock		; yes
 39790                                  	;JMP	short DOS_Lock			; function 0
 39791                                  	; 17/12/2022
 39792                                  	; 10/06/2019
 39793 000072CB 740E                    	jz	short DOS_Lock
 39794                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39795                                  	;JNZ	short DOS_Unlock
 39796                                  	;JMP	short DOS_Lock
 39797                                  
 39798                                  DOS_Unlock:
 39799                                  	;;test	word [es:di+5],8000h
 39800                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39801 000072CD 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39802 000072D2 74CE                    	JZ	short LOCAL_UNLOCK
 39803                                  
 39804                                  lock_unlock: ; 22/05/2019
 39805                                  	
 39806                                  	;CallInstall Net_Xlock,MultNET,10
 39807                                  	
 39808                                  	; MSDOS 3.3
 39809                                  	;mov     ax,110Bh
 39810                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39811                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39812                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39813                                  			; SFT DPB field -> DPB of drive containing file
 39814                                  			; Return: CF set error
 39815                                  	; MSDOS 6.0
 39816 000072D4 B80A11                  	mov     ax,110Ah
 39817 000072D7 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39818                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39819                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39820                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39821                                  			; Return: CF set error
 39822                                  
 39823 000072D9 EBCB                    	JMP	SHORT ValChk
 39824                                  
 39825                                  ; 17/12/2022
 39826                                  %if 0
 39827                                  LOCAL_UNLOCK:
 39828                                  	; MSDOS 3.3
 39829                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39830                                  	; MSDOS 6.0
 39831                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39832                                  ValChk:
 39833                                  	JNC	short Lock_OK
 39834                                  lockerror:
 39835                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39836                                  	;jmp	SYS_RET_ERR
 39837                                  	jmp	short lockoperrj
 39838                                  Lock_OK:
 39839                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39840                                  	; 10/06/2019
 39841                                  	mov	ax,[TEMP_VAR]
 39842                                  	jmp	SYS_RET_OK
 39843                                  %endif
 39844                                  
 39845                                  DOS_Lock:
 39846                                  	;;test	word [es:di+5],8000h
 39847                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39848 000072DB 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39849 000072E0 7407                    	JZ	short LOCAL_LOCK
 39850                                  
 39851                                  	;CallInstall NET_XLock,MultNET,10
 39852                                  
 39853 000072E2 B80A11                  	mov     ax,110Ah
 39854 000072E5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39855                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39856                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39857                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39858                                  			; Return: CF set error
 39859                                  
 39860 000072E7 EBBD                    	JMP	short ValChk
 39861                                  
 39862                                  LOCAL_LOCK:
 39863                                  	; MSDOS 3.3
 39864                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39865                                  	; MSDOS 6.0
 39866 000072E9 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39867                                  
 39868 000072ED EBB7                    	JMP	short ValChk
 39869                                  
 39870                                  ; 14/07/2018 - Retro DOS v3.0
 39871                                  ; LOCK_CHECK
 39872                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39873                                  
 39874                                  ;----------------------------------------------------------------------------
 39875                                  ; Inputs:
 39876                                  ;	Outputs of SETUP
 39877                                  ;	[USER_ID] Set
 39878                                  ;	[PROC_ID] Set
 39879                                  ; Function:
 39880                                  ;	Check for lock violations on local I/O
 39881                                  ;	Retries are attempted with sleeps in between
 39882                                  ; Outputs:
 39883                                  ;    Carry clear
 39884                                  ;	Operation is OK
 39885                                  ;    Carry set
 39886                                  ;	A lock violation detected
 39887                                  ; Outputs of SETUP preserved
 39888                                  ;----------------------------------------------------------------------------
 39889                                  
 39890                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39891                                  	; 22/05/2019 - Retro DOS v4.0
 39892                                  LOCK_CHECK:
 39893 000072EF 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39894                                  LockRetry:
 39895 000072F3 53                      	push	bx		; save regs
 39896 000072F4 50                      	push	ax ; MSDOS 6.0
 39897                                  
 39898                                  	;MSDOS 3.3
 39899                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39900                                  	;MSDOS 6.0
 39901 000072F5 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39902                                  
 39903 000072F9 58                      	pop	ax ; MSDOS 6.0
 39904 000072FA 5B                      	pop	bx		; restrore regs
 39905 000072FB 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39906                                  LockN:
 39907 000072FD E8069F                  	call	Idle		; wait a while
 39908 00007300 4B                      	DEC	BX		; remember a retry
 39909 00007301 75F0                    	JNZ	short LockRetry	; more retries left...
 39910 00007303 F9                      	STC
 39911                                  lc_ret_label:
 39912 00007304 C3                      	retn
 39913                                  
 39914                                  ; 14/07/2018 - Retro DOS v3.0
 39915                                  ; LOCK_VIOLATION
 39916                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39917                                  
 39918                                  ;----------------------------------------------------------------------------
 39919                                  ; Inputs:
 39920                                  ;	[THISDPB] set
 39921                                  ;	[READOP] indicates whether error on read or write
 39922                                  ; Function:
 39923                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39924                                  ; Outputs:
 39925                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39926                                  ;	Carry clear if user wants a retry
 39927                                  ;
 39928                                  ; DS, ES, DI, CX preserved, others destroyed
 39929                                  ;----------------------------------------------------------------------------
 39930                                  
 39931                                  LOCK_VIOLATION:
 39932 00007305 1E                      	PUSH	DS
 39933 00007306 06                      	PUSH	ES
 39934 00007307 57                      	PUSH	DI
 39935 00007308 51                      	PUSH	CX
 39936                                  	;mov	ax,21h
 39937 00007309 B82100                  	MOV	AX,error_lock_violation
 39938                                  	;mov	byte [ALLOWED],18h
 39939 0000730C C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39940 00007311 C42E[8A05]              	LES	BP,[THISDPB]
 39941 00007315 BF0100                  	MOV	DI,1		; Fake some registers
 39942 00007318 89F9                    	MOV	CX,DI
 39943                                  	;mov	dx,[es:bp+11]
 39944 0000731A 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39945 0000731E E8D6DF                  	call	HARDERR
 39946 00007321 59                      	POP	CX
 39947 00007322 5F                      	POP	DI
 39948 00007323 07                      	POP	ES
 39949 00007324 1F                      	POP	DS
 39950 00007325 3C01                    	CMP	AL,1
 39951 00007327 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39952 00007329 F9                      	STC
 39953 0000732A C3                      	retn
 39954                                  
 39955                                  ; 14/07/2018 - Retro DOS v3.0
 39956                                  
 39957                                  ;----------------------------------------------------------------------------
 39958                                  
 39959                                  ;	do a retz to return error
 39960                                  
 39961                                  	; 22/05/2019 - Retro DOS v4.0
 39962                                  CheckShare:
 39963                                  	; MSDOS 3.3
 39964                                  	;cmp	byte [cs:fShare],0
 39965                                  	;retn
 39966                                  
 39967                                  	; MSDOS 6.0
 39968 0000732B 1E                      	push	ds			;smr;
 39969                                  	;getdseg <ds>			; ds -> dosdata
 39970 0000732C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39971 00007331 803E[0303]00            	cmp	byte [fShare],0
 39972 00007336 1F                      	pop	ds			;smr;
 39973 00007337 C3                      	retn
 39974                                  	
 39975                                  ;============================================================================
 39976                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39977                                  ;============================================================================
 39978                                  ; 14/07/2018 - Retro DOS v3.0
 39979                                  ; 22/05/2019 - Retro DOS v4.0
 39980                                  
 39981                                  ; SHARE_CHECK
 39982                                  ;----------------------------------------------------------------------------
 39983                                  ; Inputs:
 39984                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39985                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39986                                  ;       [WFP_START] has full path of name
 39987                                  ;       [USER_ID] Set
 39988                                  ;       [PROC_ID] Set
 39989                                  ; Function:
 39990                                  ;       Check for sharing violations on local file/device access
 39991                                  ; Outputs:
 39992                                  ;    Carry clear
 39993                                  ;       Sharing approved
 39994                                  ;    Carry set
 39995                                  ;       A sharing violation detected
 39996                                  ;           AX is error code
 39997                                  ; USES    ALL but DS
 39998                                  ;----------------------------------------------------------------------------
 39999                                  
 40000                                  	; 22/05/2019 - Retro DOS v4.0
 40001                                  SHARE_CHECK:
 40002                                  	; 26/07/2019
 40003 00007338 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 40004                                  shchk_retn:
 40005 0000733C C3                      	retn
 40006                                  
 40007                                  ; SHARE_VIOLATION
 40008                                  ;----------------------------------------------------------------------------
 40009                                  ; Inputs:
 40010                                  ;       [THISDPB] Set
 40011                                  ;       AX has error code
 40012                                  ; Function:
 40013                                  ;       Handle Sharing errors
 40014                                  ; Outputs:
 40015                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 40016                                  ;       Carry clear if user wants a retry
 40017                                  ;
 40018                                  ; DS, ES, DI preserved, others destroyed
 40019                                  ;----------------------------------------------------------------------------
 40020                                  
 40021                                  SHARE_VIOLATION:
 40022 0000733D 1E                      	PUSH    DS
 40023 0000733E 06                      	PUSH	ES
 40024 0000733F 57                      	PUSH    DI
 40025 00007340 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 40026                                  	;mov	byte [ALLOWED],18h
 40027 00007345 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40028 0000734A C42E[8A05]              	LES     BP,[THISDPB]
 40029 0000734E BF0100                  	MOV     DI,1			; Fake some registers
 40030 00007351 89F9                    	MOV     CX,DI
 40031                                  	;mov	dx,[es:bp+17]
 40032 00007353 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 40033 00007357 E89DDF                  	call	HARDERR
 40034 0000735A 5F                      	POP     DI
 40035 0000735B 07                      	POP	ES
 40036 0000735C 1F                      	POP     DS
 40037 0000735D 3C01                    	CMP     AL,1
 40038 0000735F 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 40039 00007361 F9                      	STC
 40040 00007362 C3                      	retn
 40041                                  
 40042                                  ;----------------------------------------------------------------------------
 40043                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 40044                                  ;       NOT perform a close, it merely asserts that the sharing information
 40045                                  ;       for the SFT/UID/PID may be safely released.
 40046                                  ;
 40047                                  ;   Inputs:     ES:DI points to an SFT
 40048                                  ;   Outputs:    None
 40049                                  ;   Registers modified: all except DS,ES,DI
 40050                                  ;----------------------------------------------------------------------------
 40051                                  
 40052                                  ShareEnd:
 40053                                  	; 26/07/2019
 40054 00007363 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 40055 00007367 C3                      	retn
 40056                                  
 40057                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 40058                                  ;----------------------------------------------------------------------------
 40059                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 40060                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 40061                                  ;
 40062                                  ;   Inputs:     ThisSFT points to the SFT
 40063                                  ;               WFP_Start points to the WFP
 40064                                  ;   Outputs:    Carry clear => successful entry
 40065                                  ;               Carry set => failed system call
 40066                                  ;   Registers modified: all
 40067                                  ;----------------------------------------------------------------------------
 40068                                  
 40069                                  ShareEnter:
 40070 00007368 51                      	push	cx
 40071                                  retry:
 40072 00007369 8B0E[1A00]              	mov     cx,[RetryCount]
 40073                                  attempt:
 40074 0000736D C43E[9E05]              	les     di,[THISSFT]		; grab sft
 40075 00007371 31C0                    	XOR     AX,AX
 40076                                   	;mov	[es:di+51],axfff
 40077 00007373 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 40078 00007377 51                      	push	cx
 40079 00007378 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 40080 0000737B 59                      	pop	cx
 40081 0000737C 730A                    	jnc	short done		; success, let the user see this
 40082 0000737E E8859E                  	call	Idle                    ; wait a while
 40083 00007381 E2EA                    	loop    attempt                 ; go back for another attempt
 40084 00007383 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 40085 00007386 73E1                    	jnc	short retry		; user said to retry, go do it
 40086                                  done:
 40087 00007388 59                      	pop	cx
 40088 00007389 C3                      	retn
 40089                                  
 40090                                  ;============================================================================
 40091                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 40092                                  ;============================================================================
 40093                                  ; 29/04/2019 - Retro DOS 4.0
 40094                                  
 40095                                  ;** EXEPATCH.ASM 
 40096                                  ;----------------------------------------------------------------------------
 40097                                  ;	Contains the foll:
 40098                                  ;
 40099                                  ;		- code to find and overlay buggy unpack code
 40100                                  ;		- new code to be overlayed on buggy unpack code 
 40101                                  ;		- old code sequence to identify buggy unpack code
 40102                                  ;
 40103                                  ;	Revision history:
 40104                                  ;
 40105                                  ;		Created: 5/14/90
 40106                                  ;----------------------------------------------------------------------------
 40107                                  
 40108                                  ;----------------------------------------------------------------------------
 40109                                  ;
 40110                                  ; M020 : Fix for rational bug - for details see routine header
 40111                                  ; M028 : 4b04 implementation
 40112                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 40113                                  ; M032 : set turnoff bit only if DOS in HMA.
 40114                                  ; M033 : if IP < 2 then not exepacked.
 40115                                  ; M046 : support for a 4th version of exepacked files.
 40116                                  ; M068 : support for copy protected apps.
 40117                                  ; M071 : use A20OFF_COUNT of 10.
 40118                                  ;
 40119                                  ;----------------------------------------------------------------------------
 40120                                  
 40121                                  PATCH1_COM_OFFSET	EQU	06CH
 40122                                  PATCH1_OFFSET		EQU	028H
 40123                                  PATCH1_CHKSUM		EQU	0EF4EH
 40124                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 40125                                  
 40126                                  PATCH2_COM_OFFSET	EQU	076H
 40127                                  PATCH2_OFFSET		EQU	032H
 40128                                  
 40129                                  	; The strings that start at offset 076h have two possible 
 40130                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 40131                                  
 40132                                  PATCH2_CHKSUM		EQU	78B2H
 40133                                  CHKSUM2_LEN		EQU	119H/2
 40134                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 40135                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 40136                                  
 40137                                  PATCH3_COM_OFFSET	EQU	074H
 40138                                  PATCH3_OFFSET		EQU	032H
 40139                                  PATCH3_CHKSUM		EQU	4EDEH
 40140                                  CHKSUM3_LEN		EQU	117H/2
 40141                                  
 40142                                  ;**	Data structure passed for ExecReady call
 40143                                  ;
 40144                                  ;struc ERStruc
 40145                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 40146                                  ; .ER_Flags:	resw	1
 40147                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 40148                                  ; .ER_PSP:	resw	1	; PSP of the program
 40149                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 40150                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 40151                                  ; .size:
 40152                                  ;endstruc
 40153                                  
 40154                                  ;DOSCODE SEGMENT
 40155                                  
 40156                                  	; 22/05/2019 - Retro DOS v4.0
 40157                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 40158                                  
 40159                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40160                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 40161                                  
 40162                                  ; M028 - BEGIN
 40163                                  
 40164                                  ;--------------------------------------------------------------------------
 40165                                  ;
 40166                                  ;	Procedure Name		: ExecReady
 40167                                  ;
 40168                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 40169                                  ;
 40170                                  ;--------------------------------------------------------------------------
 40171                                  
 40172                                  ExecReady:
 40173 0000738A 89D6                    	mov	si,dx			; move the pointer into a friendly one
 40174                                  	;;test	word [si+2],1
 40175                                  	; 17/12/2022
 40176 0000738C F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40177                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 40178 00007390 7413                    	jz	short er_setver		; only setver for .COM files
 40179                                  
 40180                                  	;mov	ax,[si+8]
 40181 00007392 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 40182 00007395 83C010                  	add	ax,10h
 40183 00007398 8EC0                    	mov	es,ax
 40184                                  
 40185                                  	;mov	cx,[si+10]
 40186 0000739A 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 40187                                  	;mov	cx,[si+12]
 40188 0000739D 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 40189                                  
 40190                                  	;call	[ss:FixExePatch]
 40191 000073A0 36FF16[F311]            	call	word [ss:FixExePatch] ; 28/12/2022
 40192                                  	
 40193                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40194                                  	;call	[ss:Rational386PatchPtr]
 40195                                  
 40196                                  er_setver:
 40197                                  	;;test	word [si+2],2		; Q: is this an overlay
 40198                                  	; 17/12/2022
 40199 000073A5 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 40200                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 40201 000073A9 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 40202                                  					; N: set up lie version first
 40203 000073AB 1E                      	push	ds
 40204 000073AC 56                      	push	si
 40205                                  	;lds	si,[si+4]
 40206 000073AD C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 40207 000073B0 E876ED                  	call	Scan_Execname1
 40208 000073B3 E887ED                  	call	Scan_Special_Entries
 40209 000073B6 5E                      	pop	si
 40210 000073B7 1F                      	pop	ds
 40211                                  	;mov	es,[si+8]
 40212 000073B8 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 40213 000073BB 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 40214 000073BF 26A34000                	mov	[es:PDB.Version],ax
 40215                                  
 40216                                  er_chkdoshi:
 40217 000073C3 36803E[F211]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 40218 000073C9 741F                    	je	short er_done		; M032: N: done
 40219                                  
 40220                                  					; M068 - Start
 40221                                  	;mov	ax,[si+8]
 40222 000073CB 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 40223                                  
 40224                                  	;or	byte [ss:DOS_FLAG],4
 40225 000073CE 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 40226                                  					; ah = 25 & ah= 49. See dossym.inc 
 40227                                  					; under TAG M003 & M009 for 
 40228                                  					; explanation
 40229                                  	;;test	word [si+2],1
 40230                                  	; 17/12/2022
 40231 000073D4 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 40232                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 40233 000073D8 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 40234                                  					;    a20off_psp and ret
 40235 000073DA 1E                         	push	ds
 40236 000073DB 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 40237 000073DD E88E02                  	call	IsCopyProt		; check if copy protected
 40238 000073E0 1F                      	pop	ds
 40239                                  
 40240                                  er_setA20:
 40241                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 40242                                  	; is non-zero at this point it indicates that the A20 is to be 
 40243                                  	; turned off for that many int 21 calls made by the app. In 
 40244                                  	; addition the A20 has to be turned off when we exit from this 
 40245                                  	; call. Hence the inc.
 40246                                  
 40247 000073E1 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 40248 000073E6 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 40249                                  					; turned OFF.
 40250                                  er_done:				; M068 - End
 40251 000073EA 31C0                    	xor	ax,ax
 40252 000073EC C3                      	retn
 40253                                  
 40254                                  ; M028 - END
 40255                                  
 40256                                  
 40257                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40258                                  %if 0
 40259                                  
 40260                                  ;----------------------------------------------------------------------------
 40261                                  ;
 40262                                  ; procedure : Rational386Patch
 40263                                  ;
 40264                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 40265                                  ; 386 registers (usually just the high word of 32 bit registers) during
 40266                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 40267                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 40268                                  ;
 40269                                  ; This routine applies patches to the Rational DOS Extender to work around
 40270                                  ; most of the register trashing bugs.
 40271                                  ;
 40272                                  ; Note that there are additional register trashing bugs not fixed by these
 40273                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 40274                                  ; may be modified on interrupts.
 40275                                  ;
 40276                                  ; There are two different Rational DOS Extender patchs in this module.
 40277                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 40278                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 40279                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 40280                                  ; or not.
 40281                                  ;
 40282                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 40283                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 40284                                  ; running in the HMA.
 40285                                  ;
 40286                                  ; This patch detection and replacement is based on an example supplied by
 40287                                  ; Ben Williams at Rational.
 40288                                  ;
 40289                                  ;----------------------------------------------------------------------------
 40290                                  
 40291                                  ; 22/05/2019 - Retro DOS v4.0
 40292                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 40293                                  
 40294                                  ;----------------------------------------------------------------------------
 40295                                  ;
 40296                                  ; INPUT : ES = segment where program got loaded
 40297                                  ;
 40298                                  ;----------------------------------------------------------------------------
 40299                                  
 40300                                  rpFind1:
 40301                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 40302                                  
 40303                                  rpFind1Len equ	$ - rpFind1
 40304                                  
 40305                                  ;	cli
 40306                                  ;	in	al, 21h
 40307                                  ;	pusha
 40308                                  ;	xor	ax, ax
 40309                                  ;	out	43h, al
 40310                                  ;	mov	dx, ...
 40311                                  
 40312                                  rpFind1a:
 40313                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 40314                                  
 40315                                  rpFind1aLen equ	$ - rpFind1a
 40316                                  
 40317                                  ;	mov	al, 0Eh
 40318                                  ;	out	37h, al
 40319                                  ;	xor	ax, ax
 40320                                  ;	out	0F2h, al
 40321                                  
 40322                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40323                                  
 40324                                  rpFind2:
 40325                                  	db	0Fh, 20h, 0C0h
 40326                                  
 40327                                  rpFind2Len equ	$ - rpFind2
 40328                                  
 40329                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 40330                                  
 40331                                  rpFind3:
 40332                                  	db	0Fh, 22h, 0C0h, 0EAh
 40333                                  
 40334                                  rpFind3Len equ	$ - rpFind3
 40335                                  
 40336                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 40337                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 40338                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 40339                                  
 40340                                  ; note, there is no rpRepl1 string
 40341                                  
 40342                                  rpRepl2:
 40343                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 40344                                  
 40345                                  rpRepl2Len equ	$ - rpRepl2
 40346                                  
 40347                                  ;	push	eax
 40348                                  ;	push	cx
 40349                                  ;	mov	eax, cr0
 40350                                  
 40351                                  rpRepl3:
 40352                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 40353                                  
 40354                                  rpRepl3Len equ	$ - rpRepl3
 40355                                  
 40356                                  ;	mov	ss, bx
 40357                                  ;	pop	cx
 40358                                  ;	pop	eax
 40359                                  
 40360                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 40361                                  
 40362                                  rpFind4:
 40363                                  	db	93h, 58h, 8Bh, 0CCh
 40364                                  
 40365                                  rpFind4Len equ	$ - rpFind4
 40366                                  
 40367                                  ;	xchg	bx, ax
 40368                                  ;	pop	ax
 40369                                  ;	mov	cx, sp
 40370                                  
 40371                                  rpFind5:
 40372                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 40373                                  
 40374                                  rpFind5Len equ	$ - rpFind5
 40375                                  
 40376                                  ;	mov	ax, DE0Ch
 40377                                  ;	int	67h
 40378                                  ;	mov	sp, cx
 40379                                  ;	jmp	bx
 40380                                  
 40381                                  rpRepl4:
 40382                                  	db	93h, 58h, 8Bh, 0CCh
 40383                                  	db	02Eh, 066h, 0A3h
 40384                                  
 40385                                  rpRepl4o1Len equ $ - rpRepl4
 40386                                  
 40387                                  	db	00h, 00h
 40388                                  	db	02Eh, 066h, 89h, 36h
 40389                                  
 40390                                  rpRepl4o2Len equ $ - rpRepl4
 40391                                  
 40392                                  	db	00h, 00h
 40393                                  
 40394                                  rpRepl4Len equ	$ - rpRepl4
 40395                                  
 40396                                  ;	xchg	bx, ax
 40397                                  ;	pop	ax
 40398                                  ;	mov	cx, sp
 40399                                  ;	mov	dword ptr cs:[xxxx], eax
 40400                                  ;	mov	dword ptr cs:[xxxx], esi
 40401                                  
 40402                                  rpRepl5:
 40403                                  	db	8Bh, 0E1h
 40404                                  	db	2Eh, 66h, 0A1h
 40405                                  
 40406                                  rpRepl5o1Len equ $ - rpRepl5
 40407                                  
 40408                                  	db	00h, 00h
 40409                                  	db	2Eh, 66h, 8Bh, 36h
 40410                                  
 40411                                  rpRepl5o2Len equ $ - rpRepl5
 40412                                  
 40413                                  	db	00h, 00h
 40414                                  	db	0FFh, 0E3h
 40415                                  
 40416                                  rpRepl5Len equ	$ - rpRepl5
 40417                                  
 40418                                  ;	mov	sp, cx
 40419                                  ;	mov	eax, dword ptr cs:[xxxx]
 40420                                  ;	mov	esi, dword ptr cs:[xxxx]
 40421                                  ;	jmp	bx
 40422                                  
 40423                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40424                                  
 40425                                  rpFind6:
 40426                                  	db	0FAh, 52h, 51h
 40427                                  
 40428                                  rpFind6Len equ	$ - rpFind6
 40429                                  
 40430                                  ;	cli
 40431                                  ;	push	dx
 40432                                  ;	push	cx
 40433                                  
 40434                                  rpFind7a:
 40435                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40436                                  
 40437                                  rpFind7aLen equ	$ - rpFind7a
 40438                                  
 40439                                  ;	mov	ax, 0DE0Ch
 40440                                  ;	call	fword ptr es:[xxxx]
 40441                                  
 40442                                  rpFind7b:
 40443                                  	db	59h, 5Ah, 5Bh
 40444                                  
 40445                                  rpFind7bLen equ	$ - rpFind7b
 40446                                  
 40447                                  ;	pop	cx
 40448                                  ;	pop	dx
 40449                                  ;	pop	bx
 40450                                  
 40451                                  rpRepl6 :
 40452                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40453                                  
 40454                                  rpRepl6Len equ	$ - rpRepl6
 40455                                  
 40456                                  ;	cli
 40457                                  ;	push	eax
 40458                                  ;	push	ebx
 40459                                  ;	push	ecx
 40460                                  ;	push	edx
 40461                                  
 40462                                  rpRepl7:
 40463                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 40464                                  
 40465                                  rpRepl7Len equ	$ - rpRepl7
 40466                                  
 40467                                  ;	pop	edx
 40468                                  ;	pop	ecx
 40469                                  ;	pop	ebx
 40470                                  ;	pop	eax
 40471                                  ;	pop	bx
 40472                                  
 40473                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 40474                                  
 40475                                  rpFind8:
 40476                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 40477                                  
 40478                                  rpFind8Len equ	$ - rpFind8
 40479                                  
 40480                                  ;	pusha
 40481                                  ;	push	es
 40482                                  ;	push	ds
 40483                                  ;	mov	ax, dgroup	;jump back to here from replace8
 40484                                  ;	mov	ds, ax
 40485                                  
 40486                                  rpFind9 :
 40487                                  	db	1Fh, 07h, 61h
 40488                                  
 40489                                  rpFind9Len equ	$ - rpFind9
 40490                                  
 40491                                  ;	pop	ds
 40492                                  ;	pop	es
 40493                                  ;	popa
 40494                                  
 40495                                  rpRepl8:
 40496                                   	db	66h, 60h, 06h, 1Eh
 40497                                  
 40498                                  rpRepl8Len equ	$ - rpRepl8
 40499                                  
 40500                                  ;	pushad
 40501                                  ;	push	es
 40502                                  ;	push	ds
 40503                                  
 40504                                  rpRepl9:
 40505                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 40506                                  
 40507                                  rpRepl9Len equ	$ - rpRepl9
 40508                                  
 40509                                  ;	pop	ds
 40510                                  ;	pop	es
 40511                                  ;	popad
 40512                                  ;	retn			;no need to jmp back to main-line
 40513                                  
 40514                                  ;----------------------------------------------------------------------------
 40515                                  
 40516                                  struc SearchPair
 40517                                   .sp_off1: resw 1	; offset of 1st search string
 40518                                   .sp_len1: resw 1	; length of 1st search string
 40519                                   .sp_off2: resw 1	; 2nd string
 40520                                   .sp_len2: resw 1	; 2nd string
 40521                                   .sp_diff: resw 1	; max difference between offsets
 40522                                   .size:
 40523                                  endstruc
 40524                                  
 40525                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 40526                                  
 40527                                  rpBug1Strs:
 40528                                  	dw	rpFind2
 40529                                  	dw	rpFind2Len ; 3
 40530                                  	dw	rpFind3
 40531                                  	dw	rpFind3Len ; 4
 40532                                  	dw	20h
 40533                                  
 40534                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40535                                  
 40536                                  rpBug2Strs:
 40537                                  	dw	rpFind4
 40538                                  	dw	rpFind4Len ; 4
 40539                                  	dw	rpFind5
 40540                                  	dw	rpFind5Len ; 9
 40541                                  	dw	80h
 40542                                  
 40543                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 40544                                  
 40545                                  rpBug3Strs:
 40546                                  	dw	rpFind6
 40547                                  	dw	rpFind6Len ; 3
 40548                                  	dw	rpFind7a
 40549                                  	dw	rpFind7aLen ; 7
 40550                                  	dw	80h
 40551                                  
 40552                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 40553                                  
 40554                                  rpBug4Strs:
 40555                                  	dw	rpFind8
 40556                                  	dw	4
 40557                                  	dw	rpFind9
 40558                                  	dw	rpFind9Len ; 3
 40559                                  	dw	80h
 40560                                  
 40561                                  ;----------------------------------------------------------------------------
 40562                                  
 40563                                  struc StackVars
 40564                                   .sv_wVersion:	resw 1		; Rational extender version #
 40565                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40566                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40567                                   .size:
 40568                                  endstruc
 40569                                  
 40570                                  ;----------------------------------------------------------------------------
 40571                                  
 40572                                  ; 22/05/2019 - Retro DOS v4.0
 40573                                  
 40574                                  Rational386Patch:
 40575                                  	; Do a few quick checks to see if this looks like a Rational
 40576                                  	; Extended application. Hopefully this will quickly weed out
 40577                                  	; most non Rational apps.
 40578                                  
 40579                                  	cmp	word [es:0],395		; version number goes here - versions
 40580                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40581                                  
 40582                                  	cmp	word [es:0Ch],20h	; always has this value here
 40583                                  	jne	short rp3QuickOut
 40584                                  
 40585                                  	push	ax
 40586                                  
 40587                                  	mov	ax,18h 			; extender has 18h at
 40588                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40589                                  	jne	short rp3QO_ax
 40590                                  	cmp	[es:28],ax
 40591                                  	jne	short rp3QO_ax
 40592                                  	cmp	[es:36],ax
 40593                                  	je	short rp3Maybe
 40594                                  rp3QO_ax:
 40595                                  	pop	ax
 40596                                  rp3QuickOut:
 40597                                  	retn
 40598                                  
 40599                                  ; It might be the rational extender, do more extensive checking
 40600                                  
 40601                                  rp3Maybe:
 40602                                  	cld
 40603                                  	push	bx			; note ax pushed above
 40604                                  	push	cx
 40605                                  	push	dx
 40606                                  	push	si
 40607                                  	push	di
 40608                                  	push	es
 40609                                  	push	ds			; we use all of them
 40610                                  	push	bp
 40611                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40612                                  	mov	bp,sp
 40613                                  
 40614                                  	push	cs
 40615                                  	pop	ds
 40616                                  
 40617                                  	mov	ax,[es:0]		; save version #
 40618                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40619                                  	mov	[bp],ax	
 40620                                  					; check that binary version # matches
 40621                                  	call	VerifyVersion		;   ascii string
 40622                                  	jne	short rp3Exit_j
 40623                                  
 40624                                  ; Looks like this is it, find where to put the patch code.  The
 40625                                  ; patch will be located on top of Rational code specific to 80286
 40626                                  ; processors, so these patchs MUST NOT be applied if running on
 40627                                  ; an 80286 system.
 40628                                  
 40629                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40630                                  
 40631                                  	mov	cx,4500h		; force search len to 4700h (searches
 40632                                  	;mov	[bp+2],cx
 40633                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40634                                  
 40635                                  	mov	es,[es:20h]		; es=code segment
 40636                                  
 40637                                  	mov	si,rpFind1		; string to find
 40638                                  	mov	dx,rpFind1Len ; 10	; length to match
 40639                                  	call	ScanCodeSeq		; look for code seq
 40640                                  	jz	short rpGotPatch
 40641                                  
 40642                                  ; According to Rational, some very old versions of the extender may not
 40643                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40644                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40645                                  
 40646                                  	mov	si,rpFind1a
 40647                                  	mov	dx,rpFind1aLen  ;8
 40648                                  	call	ScanCodeSeq
 40649                                  	jz	short rpGotPatch
 40650                                  
 40651                                  rp3Exit_j:
 40652                                  	jmp	rp3Exit
 40653                                  
 40654                                  ; Found the location to write patch code! DI = offset in code seg.
 40655                                  
 40656                                  rpGotPatch:
 40657                                  	;mov	[bp+4],di
 40658                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40659                                  
 40660                                  ;----------------------------------------------------------------------------
 40661                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40662                                  
 40663                                  	;cmp	word [bp+0],381
 40664                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40665                                  	cmp	word [bp],381
 40666                                  	jae	short rpBug2			;   < 3.81
 40667                                  
 40668                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40669                                  	call	FindBadCode
 40670                                  	jc	short rpBug2
 40671                                  
 40672                                  ; si = rpFind2 offset, di = rpFind3 offset
 40673                                  
 40674                                  	push	di
 40675                                  	mov	di,si				; rpFind2 offset
 40676                                  	mov	dx,rpFind2Len ; 3
 40677                                  
 40678                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40679                                  	jne	short rp_no_cx
 40680                                  
 40681                                  	dec	di				;   yes, gobble up push cx too
 40682                                  	inc	dx
 40683                                  rp_no_cx:
 40684                                  	mov	si,rpRepl2			; patch out find2 sequence
 40685                                  	mov	cx,rpRepl2Len  ; 6
 40686                                  	call	GenPatch
 40687                                  
 40688                                  	pop	di				; rpFind3 offset
 40689                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40690                                  	jne	short rp_no_cx2
 40691                                  
 40692                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40693                                  rp_no_cx2:
 40694                                  	;mov	ax,[bp+4]
 40695                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40696                                  	;mov	[es:di+4],ax
 40697                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40698                                  
 40699                                  	push	di				; save find3 offset
 40700                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40701                                  	mov	cx,rpRepl3Len ; 5
 40702                                  	call	CopyPatch
 40703                                  
 40704                                  	pop	bx				; find3 offset
 40705                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40706                                  	call	GenJump 			; jmp back from patch area
 40707                                  	;mov	[bp+4],di
 40708                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40709                                  						;   area pointer
 40710                                  
 40711                                  ;----------------------------------------------------------------------------
 40712                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40713                                  
 40714                                  rpBug2:
 40715                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40716                                  	call	FindBadCode
 40717                                  	jc	short rpBug3
 40718                                  
 40719                                  ; si = rpFind4 offset, di = rpFind5 offset
 40720                                  
 40721                                  	;push	word [bp+4]
 40722                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40723                                  						;   (where repl4 goes)
 40724                                  	push	di				; save find5 offset
 40725                                  
 40726                                  	mov	di,si
 40727                                  	mov	dx,rpFind4Len ; 4
 40728                                  	mov	si,rpRepl4
 40729                                  	mov	cx,rpRepl4Len ; 15
 40730                                  	call	GenPatch			; patch out find4 code
 40731                                  
 40732                                  	pop	di				; find5 offset
 40733                                  	add	di,5				; keep 5 bytes of find5 code
 40734                                  	;mov	bx,[bp+4]
 40735                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40736                                  	push	bx				; save repl5 location
 40737                                  	call	GenJump
 40738                                  
 40739                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40740                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40741                                  	call	CopyPatch			;   so no need to jmp back to
 40742                                  						;   main-line code
 40743                                  
 40744                                  ; patches have been made, now update the patch code to store/load dwords just
 40745                                  ; after the code in the patch area
 40746                                  
 40747                                  	pop	di				; repl5 location
 40748                                  	pop	si				; repl4 location
 40749                                  
 40750                                  	;mov	ax,[bp+4]
 40751                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40752                                  
 40753                                  	;mov	[es:si+7],ax
 40754                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40755                                  	;mov	[es:di+5],ax
 40756                                  	mov	[es:di+rpRepl5o1Len],ax
 40757                                  	add	ax,4
 40758                                  	;mov	[es:si+0Dh],ax
 40759                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40760                                  	;mov	[es:di+0Bh],ax
 40761                                  	mov	[es:di+rpRepl5o2Len],ax
 40762                                  
 40763                                  	;add	word [bp+4],8
 40764                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40765                                  						; patch area
 40766                                  
 40767                                  ;----------------------------------------------------------------------------
 40768                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40769                                  
 40770                                  rpBug3:
 40771                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40772                                  	call	FindBadCode
 40773                                  	jc	short rpBug4
 40774                                  
 40775                                  	;add	di,9
 40776                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40777                                  	push	si				;   code and locate find7b
 40778                                  	mov	si,rpFind7b			;   sequence
 40779                                  	mov	dx,rpFind7bLen ; 3
 40780                                  	call	ScanCodeSeq_di
 40781                                  	pop	si
 40782                                  	jnz	short rpBug4
 40783                                  
 40784                                  	push	di				; save find7b code offset
 40785                                  
 40786                                  	mov	di,si
 40787                                  	mov	dx,rpFind6Len ; 3
 40788                                  	mov	si,rpRepl6
 40789                                  	mov	cx,rpRepl6Len ; 9
 40790                                  	call	GenPatch			; patch out find6 code
 40791                                  
 40792                                  	pop	di
 40793                                  	mov	dx,rpFind7bLen ; 3
 40794                                  	mov	si,rpRepl7
 40795                                  	mov	cx,rpRepl7Len ; 9
 40796                                  	call	GenPatch			; patch out find7b code
 40797                                  
 40798                                  ;----------------------------------------------------------------------------
 40799                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40800                                  
 40801                                  rpBug4:
 40802                                  	;cmp	word [bp+0],360
 40803                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40804                                  	cmp	word [bp],360
 40805                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40806                                  
 40807                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40808                                  	call	FindBadCode
 40809                                  	jc	short rp3Exit
 40810                                  
 40811                                  	push	di				; save find9 code offset
 40812                                  
 40813                                  	mov	di,si
 40814                                  	mov	dx,3
 40815                                  	mov	si,rpRepl8
 40816                                  	mov	cx,rpRepl8Len ; 4
 40817                                  	call	GenPatch			; patch out find8 code
 40818                                  
 40819                                  	pop	di				; find9 offset
 40820                                  	;mov	bx,[bp+4]
 40821                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40822                                  	call	GenJump 			;   patch area
 40823                                  
 40824                                  	mov	si,rpRepl9			; copy replacement code to
 40825                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40826                                  	call	CopyPatch			;   so no jmp back to main-line
 40827                                  
 40828                                  rp3Exit:
 40829                                  	add	sp,StackVars.size
 40830                                  	pop	bp
 40831                                  	pop	ds
 40832                                  	pop	es
 40833                                  	pop	di
 40834                                  	pop	si
 40835                                  	pop	dx
 40836                                  	pop	cx
 40837                                  	pop	bx
 40838                                  	pop	ax
 40839                                  	retn
 40840                                  
 40841                                  ;----------------------------------------------------------------------------
 40842                                  ;
 40843                                  ; FindBadCode
 40844                                  ;
 40845                                  ; Searches Rational code segment looking for a pair of find strings (all
 40846                                  ; patches have at least two find strings).
 40847                                  ;
 40848                                  ; Entry:
 40849                                  ;	ES    = code segment to search
 40850                                  ;	DS:BX = search pair structure for this search
 40851                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40852                                  ;
 40853                                  ; Exit:
 40854                                  ;	CY flag clear if both strings found, and
 40855                                  ;	SI    = offset in ES of 1st string
 40856                                  ;	DI    = offset in ES of 2nd string
 40857                                  ;	CY set if either string not found, or strings too far apart
 40858                                  ;
 40859                                  ; Used:
 40860                                  ;	CX
 40861                                  ;
 40862                                  ;----------------------------------------------------------------------------
 40863                                  
 40864                                  ;struc SearchPair
 40865                                  ; .sp_off1: resw 1	; offset of 1st search string
 40866                                  ; .sp_len1: resw 1	; length of 1st search string
 40867                                  ; .sp_off2: resw 1	; 2nd string
 40868                                  ; .sp_len2: resw 1	; 2nd string
 40869                                  ; .sp_diff: resw 1	; max difference between offsets
 40870                                  ; .size:
 40871                                  ;endstruc
 40872                                  
 40873                                  FindBadCode:
 40874                                  	;mov	cx,[bp+2]
 40875                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40876                                  
 40877                                  	mov	si,[bx]	; mov si,[bx+0]
 40878                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40879                                  	
 40880                                  	;mov	dx,[bx+2]
 40881                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40882                                  	call	ScanCodeSeq
 40883                                  	jnz	short fbc_error		; done if 1st not found
 40884                                  
 40885                                  	push	di			; save 1st string offset
 40886                                  
 40887                                  	;mov	si,[bx+4]
 40888                                  	mov	si,[bx+SearchPair.sp_off2]
 40889                                  	;mov	dx,[bx+6]
 40890                                  	mov	dx,[bx+SearchPair.sp_len2]
 40891                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40892                                  
 40893                                  	pop	si			; restore 1st string offset
 40894                                  	jnz	short fbc_error
 40895                                  
 40896                                  	mov	ax,di			; sanity check that
 40897                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40898                                  	jc	short fbc_error
 40899                                  	;cmp	ax,[bx+8]
 40900                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40901                                  	ja	short fbc_error
 40902                                  
 40903                                  	clc
 40904                                  	retn
 40905                                  
 40906                                  fbc_error:
 40907                                  	stc
 40908                                  	retn
 40909                                  
 40910                                  ;----------------------------------------------------------------------------
 40911                                  ;
 40912                                  ; GenPatch
 40913                                  ;
 40914                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40915                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40916                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40917                                  ; code.
 40918                                  ;
 40919                                  ; Entry:
 40920                                  ;	ES:DI = start of buggy code to be patched
 40921                                  ;	DX    = length of buggy code to be patched
 40922                                  ;	DS:SI = replacement patch code
 40923                                  ;	CX    = length of replacement patch code
 40924                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40925                                  ;
 40926                                  ; Exit:
 40927                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40928                                  ;
 40929                                  ; Used:
 40930                                  ;	AX, BX, SI, Flags
 40931                                  ;
 40932                                  ;----------------------------------------------------------------------------
 40933                                  
 40934                                  GenPatch:
 40935                                  	push	di			;save offset of buggy code
 40936                                  
 40937                                  	;mov	bx,[bp+4]
 40938                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40939                                  					;jump from buggy code to patch area
 40940                                  	call	GenJump
 40941                                  
 40942                                  	call	CopyPatch		;copy replacement code to patch area
 40943                                  
 40944                                  	pop	bx			;offset of buggy code + buggy code
 40945                                  	add	bx,dx			;  length = return from patch offset
 40946                                  
 40947                                  	call	GenJump 		;jump from patch area back to main-
 40948                                  	;mov	[bp+4],di
 40949                                  	mov	[bp+StackVars.sv_pPatch],di
 40950                                  					;  line code, update patch pointer
 40951                                  	retn
 40952                                  
 40953                                  ;----------------------------------------------------------------------------
 40954                                  ;
 40955                                  ; CopyPatch
 40956                                  ;
 40957                                  ; Copies patch code to patch location.
 40958                                  ;
 40959                                  ; Entry:
 40960                                  ;	DS:SI = patch code to be copied
 40961                                  ;	ES    = segment of code to patch
 40962                                  ;	CX    = length of code to copy
 40963                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40964                                  ;
 40965                                  ; Exit:
 40966                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40967                                  ;
 40968                                  ; Used:
 40969                                  ;	SI, Flags
 40970                                  ;
 40971                                  ;----------------------------------------------------------------------------
 40972                                  
 40973                                  CopyPatch:
 40974                                  	push	cx
 40975                                  	;mov	di,[bp+4]
 40976                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40977                                  	cld
 40978                                  	rep movsb
 40979                                  	pop	cx
 40980                                  	;mov	[bp+4],di
 40981                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40982                                  	retn
 40983                                  
 40984                                  ;----------------------------------------------------------------------------
 40985                                  ;
 40986                                  ; GenJump
 40987                                  ;
 40988                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40989                                  ;
 40990                                  ; Entry:
 40991                                  ;	ES:DI = from location (where to put jmp instruction)
 40992                                  ;	BX    = to location (where to jump to)
 40993                                  ;
 40994                                  ; Exit:
 40995                                  ;	DI = byte after generated jump
 40996                                  ;
 40997                                  ; Used:
 40998                                  ;	AX
 40999                                  ;
 41000                                  ;----------------------------------------------------------------------------
 41001                                  
 41002                                  GenJump:
 41003                                  	mov	al,0E9h		; jmp rel16 opcode
 41004                                  	stosb
 41005                                  
 41006                                  	mov	ax,bx		; calc offset to 'to' location
 41007                                  	sub	ax,di
 41008                                  	sub	ax,2
 41009                                  
 41010                                  	stosw			; output offset
 41011                                  
 41012                                  	retn
 41013                                  
 41014                                  ;----------------------------------------------------------------------------
 41015                                  ;
 41016                                  ; ScanCodeSeq
 41017                                  ;
 41018                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41019                                  ;
 41020                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41021                                  ;
 41022                                  ;----------------------------------------------------------------------------
 41023                                  
 41024                                  ScanCodeSeq:
 41025                                  	mov	di,200h
 41026                                  ScanCodeSeq_di:
 41027                                  	push	cx
 41028                                  	sub	cx,dx
 41029                                  	inc	cx
 41030                                  scsagain:
 41031                                  	push	si
 41032                                  	push	di
 41033                                  	push	cx
 41034                                  	mov	cx,dx
 41035                                  	rep	cmpsb
 41036                                  	pop	cx
 41037                                  	pop	di
 41038                                  	pop	si
 41039                                  	je	short scsfound
 41040                                  	inc	di
 41041                                  	loop	scsagain
 41042                                  scsfound:
 41043                                  	pop	cx
 41044                                  vvexit:		; 18/12/2022
 41045                                  	retn
 41046                                  	
 41047                                  ;----------------------------------------------------------------------------
 41048                                  ;
 41049                                  ; VerifyVersion
 41050                                  ;
 41051                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41052                                  ; from ES:2A.
 41053                                  ;
 41054                                  ;       Entry: AX = binary version number 
 41055                                  ;       Exit : Z flag set if version numbers match
 41056                                  ;
 41057                                  ;----------------------------------------------------------------------------
 41058                                  
 41059                                  VerifyVersion:
 41060                                  	mov	si,[es:2Ah]		; offset of version number
 41061                                  					;  in ascii
 41062                                  	mov	bl,10
 41063                                  	add	si,3			; point to last digit
 41064                                  
 41065                                  	call	VVDigit
 41066                                  	jne	short vvexit
 41067                                  	call	VVDigit
 41068                                  	jne	short vvexit
 41069                                  	cmp	byte [es:si],'.'
 41070                                  	jne	short vvexit
 41071                                  	dec	si
 41072                                  	;call	VVDigit
 41073                                  	; 18/12/2022
 41074                                  	;jmp	short VVDigit
 41075                                  ;vvexit:
 41076                                  	;retn
 41077                                  VVDigit:
 41078                                  	div	bl
 41079                                  	add	ah,'0'
 41080                                  	dec	si
 41081                                  	cmp	[es:si+1],ah
 41082                                  	mov	ah,0			; do not xor or sub we need Z
 41083                                  	retn
 41084                                  
 41085                                  %endif
 41086                                  
 41087                                  ;-----------------------------------------------------------------------
 41088                                  
 41089                                  ; 23/05/2019 - Retro DOS v4.0
 41090                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 41091                                  
 41092                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41093                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 41094                                  
 41095                                  exepatch_start:	 ; label byte
 41096                                  
 41097                                  	; The following is the code that'll be layed over the buggy unpack
 41098                                  	; code.
 41099                                  str1:
 41100 000073ED 06                      	db  06h	  		;push	es		 
 41101 000073EE 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 41102                                  
 41103                                  first_stop equ	$-str1
 41104                                  			
 41105 000073F0 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 41106                                  
 41107                                  first:  ; label	byte
 41108                                  
 41109 000073F2 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41110 000073F4 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41111 000073F6 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41112 000073F9 57                      	db  57h	    		;push	di
 41113 000073FA B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41114 000073FD B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 41115 000073FF F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 41116 00007401 47                      	db  47h	    		;inc	di			
 41117 00007402 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 41118 00007404 5F                      	db  5Fh	    		;pop	di
 41119 00007405 58                      	db  58h	    		;pop	ax
 41120                                  
 41121                                  second_stop equ	$-first
 41122                                  
 41123 00007406 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 41124                                  
 41125                                  second: ; label	byte
 41126                                  
 41127 00007408 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 41128                                  		    		;NextRec:				
 41129 0000740A B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 41130                                  		    		;norm_agn:				
 41131 0000740D 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 41132 0000740F F7D0                    	db  0F7h,0D0h		;not	ax		
 41133 00007411 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41134 00007413 7413                    	db  74h,13h		;jz	short SI_ok			
 41135 00007415 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 41136 00007417 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 41137 0000741A 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 41138 0000741C 7308                    	db  73h,08h		;jnc	short SItoDS			
 41139 0000741E F7DA                    	db  0F7h,0DAh		;neg	dx			
 41140 00007420 D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 41141 00007422 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 41142 00007424 33D2                    	db  33h,0D2h		;xor	dx,dx			
 41143                                  				;SItoDS: 				
 41144 00007426 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41145                                  				;SI_ok:					
 41146 00007428 87F7                    	db  87h,0F7h		;xchg	si,di			
 41147 0000742A 1E                      	db  1Eh			;push	ds			
 41148 0000742B 06                      	db  06h			;push	es			
 41149 0000742C 1F                      	db  1Fh			;pop	ds			
 41150 0000742D 07                      	db  07h			;pop	es			
 41151 0000742E FECD                    	db  0FEh,0CDh		;dec	ch			
 41152 00007430 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 41153 00007432 AC                      	db  0ACh		;lodsb			
 41154 00007433 92                      	db  92h			;xchg	dx,ax
 41155 00007434 4E                      	db  4Eh			;dec	si
 41156 00007435 AD                      	db  0ADh		;lodsw			
 41157 00007436 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41158 00007438 46                      	db  46h			;inc	si		
 41159 00007439 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41160 0000743B 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41161 0000743D 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41162 0000743F 7505                    	db  75h,05h		;jne	short TryEnum
 41163 00007441 AC                      	db  0ACh		;lodsb				
 41164 00007442 F3AA                    	db  0F3h,0AAh		;rep stosb			
 41165                                  
 41166                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 41167 00007444 EB06                    	db  0EBh,06h		;jmp	short TryNext
 41168                                  
 41169                                  				;TryEnum:
 41170 00007446 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41171 00007448 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 41172 0000744A F3A4                    	db  0F3h,0A4h		;rep movsb			
 41173                                  				;TryNext:
 41174                                  
 41175 0000744C 92                      	db  92h			;xchg	dx,ax
 41176                                  ;	db  8Ah,0C2h		;mov	al,dl			
 41177                                  
 41178 0000744D A801                    	db  0A8h,01h		;test	al,1			
 41179 0000744F 74B9                    	db  74h,0B9h		;jz	short NextRec			
 41180 00007451 9090                    	db  90h,90h		;nop,nop
 41181                                  	
 41182                                  last_stop equ $-second
 41183                                  size_str1 equ $-str1
 41184                                  
 41185                                  	; The following is the code that we need to look for in the exe
 41186                                  	; file.
 41187                                  
 41188                                  scan_patch1: ; label byte
 41189                                  
 41190 00007453 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41191 00007455 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41192 00007457 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 41193 00007459 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41194 0000745B 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41195 0000745D BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41196 00007460 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41197 00007463 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41198 00007465 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41199 00007467 47                      	db  47h			;inc	di			
 41200 00007468 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41201 0000746A 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41202 0000746C 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 41203 0000746E 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41204 00007470 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41205                                  				;NextRec:
 41206 00007473 B104                    	db  0B1h,04h		;mov	cl,4
 41207 00007475 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41208 00007477 F7D0                    	db  0F7h,0D0h		;not	ax		
 41209 00007479 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41210 0000747B 7409                    	db  74h,09h		;jz	short SI_ok
 41211 0000747D 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41212 0000747F 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41213 00007481 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41214 00007483 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 41215                                  	       			;SI_ok:
 41216 00007486 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41217 00007488 F7D0                    	db  0F7h,0D0h		;not	ax
 41218 0000748A D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41219 0000748C 7409                    	db  74h,09h		;jz	short DI_ok
 41220 0000748E 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41221 00007490 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41222 00007492 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41223 00007494 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41224                                  				;DI_ok:
 41225                                  
 41226                                  size_scan_patch1 equ $-scan_patch1
 41227                                  
 41228                                  scan_patch2: ; label byte
 41229                                  			
 41230 00007497 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41231 00007499 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41232 0000749B 48                      	db  48h			;dec	ax
 41233 0000749C 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41234 0000749E 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41235 000074A0 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41236 000074A3 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41237 000074A6 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41238 000074A8 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41239 000074AA 47                      	db  47h			;inc	di			
 41240 000074AB 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41241 000074AD 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41242 000074AF 48                      	db  48h			;dec	ax
 41243 000074B0 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41244 000074B2 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41245                                  				;NextRec:
 41246 000074B5 B104                    	db  0B1h,04h		;mov	cl,4
 41247 000074B7 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41248 000074B9 F7D0                    	db  0F7h,0D0h		;not	ax		
 41249 000074BB D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41250 000074BD 740A                    	db  74h,0Ah		;jz	short SI_ok
 41251 000074BF 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41252 000074C1 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41253 000074C3 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 41254 000074C5 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 41255                                  				;or	si,0FFF0H
 41256                                  				;SI_ok:
 41257 000074C9 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41258 000074CB F7D0                    	db  0F7h,0D0h		;not	ax
 41259 000074CD D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41260 000074CF 740A                    	db  74h,0Ah		;jz	short DI_ok
 41261 000074D1 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41262 000074D3 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41263 000074D5 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41264 000074D7 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 41265                                  				;or	di,0FFF0H
 41266                                  				;DI_ok:
 41267                                  
 41268                                  size_scan_patch2 equ $-scan_patch2
 41269                                  
 41270                                  scan_patch3: ; label byte
 41271                                  
 41272 000074DB 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 41273 000074DD 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 41274 000074DF 48                      	db  48h			;dec	ax
 41275 000074E0 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 41276 000074E2 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 41277 000074E4 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 41278 000074E7 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 41279 000074EA B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 41280 000074EC F3AE                    	db  0F3h,0AEh		;repz	scasb			
 41281 000074EE 47                      	db  47h			;inc	di			
 41282 000074EF 8BF7                    	db  8Bh,0F7h		;mov	si,di
 41283 000074F1 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 41284 000074F3 48                      	db  48h			;dec	ax
 41285 000074F4 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 41286 000074F6 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 41287                                  				;NextRec:
 41288 000074F9 B104                    	db  0B1h,04h		;mov	cl,4
 41289 000074FB 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 41290 000074FD F7D0                    	db  0F7h,0D0h		;not	ax		
 41291 000074FF D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 41292 00007501 7409                    	db  74h,09h		;jz	short SI_ok
 41293 00007503 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 41294 00007505 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41295 00007507 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 41296 00007509 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 41297                                  				;SI_ok:
 41298 0000750C 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 41299 0000750E F7D0                    	db  0F7h,0D0h		;not	ax
 41300 00007510 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 41301 00007512 7409                    	db  74h,09h		;jz	short DI_ok
 41302 00007514 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 41303 00007516 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 41304 00007518 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 41305 0000751A 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 41306                                  				;DI_ok:
 41307                                  
 41308                                  size_scan_patch3 equ $-scan_patch3
 41309                                  
 41310                                  scan_com: ; label byte
 41311                                  
 41312 0000751D AC                      	db  0ACh		;lodsb			
 41313 0000751E 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 41314 00007520 4E                      	db  4Eh			;dec	si
 41315 00007521 AD                      	db  0ADh		;lodsw			
 41316 00007522 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 41317 00007524 46                      	db  46h			;inc	si		
 41318 00007525 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 41319 00007527 24FE                    	db  24h,0FEh		;and	al,0FEH		
 41320 00007529 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 41321 0000752B 7506                    	db  75h,06h		;jne	short TryEnum
 41322 0000752D AC                      	db  0ACh		;lodsb				
 41323 0000752E F3AA                    	db  0F3h,0AAh		;rep stosb			
 41324 00007530 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 41325                                  				;TryEnum:
 41326 00007533 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 41327 00007535 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 41328 00007537 F3A4                    	db  0F3h,0A4h		;rep movsb			
 41329                                  				;TryNext:
 41330 00007539 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 41331 0000753B A801                    	db  0A8h,01h		;test	al,1			
 41332                                  ;	db  74h,0BAh		;jz	short NextRec			
 41333                                  
 41334                                  size_scan_com	equ	$-scan_com
 41335                                  
 41336                                  ;-----------------------------------------------------------------------
 41337                                  
 41338                                  ; 23/05/2019 - Retro DOS v4.0
 41339                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 41340                                  
 41341                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41342                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 41343                                  
 41344                                  ExePatch:
 41345                                  	; 28/12/2022 - Retro DOS v4.1
 41346                                  	;call	ExePackPatch
 41347                                  	;;call	word [ss:RationalPatchPtr]
 41348                                  	;retn
 41349                                  	; 28/12/2022
 41350                                  	;jmp	short ExePackPatch
 41351                                  
 41352                                  ;-----------------------------------------------------------------------
 41353                                  ;
 41354                                  ; Procedure Name 	: ExePackPatch
 41355                                  ;
 41356                                  ; Inputs	 	: DS 			-> DOSDATA
 41357                                  ;			  ES:0 			-> read in image
 41358                                  ;			  ax:cx = start cs:ip of program
 41359                                  ; Output		:		
 41360                                  ;
 41361                                  ;	1. If ES <= 0fffh
 41362                                  ;	   2. if exepack signature ('RB') found
 41363                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 41364                                  ;	       	 4. if rest of the code & checksum compares
 41365                                  ;	  	    5. overlay buggy code with code in 
 41366                                  ;		       doscode:str1.
 41367                                  ;		 6. endif
 41368                                  ;	      7. endif
 41369                                  ;	   8. endif
 41370                                  ;	9. endif
 41371                                  ;
 41372                                  ;
 41373                                  ; Uses			: NONE
 41374                                  ;
 41375                                  ;-----------------------------------------------------------------------
 41376                                  		
 41377                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41378                                  	; 23/05/2019 - Retro DOS v4.0	
 41379                                  ExePackPatch:
 41380 0000753D 53                      	push	bx
 41381 0000753E 8CC3                    	mov	bx,es			; bx has load segment
 41382 00007540 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 41383 00007544 7602                    	jbe	short ep_cont		; N: 
 41384 00007546 5B                      	pop	bx			; Y: no need to patch
 41385 00007547 C3                      	retn
 41386                                  ep_cont:
 41387 00007548 1E                      	push	ds
 41388 00007549 06                      	push	es
 41389 0000754A 50                      	push	ax
 41390 0000754B 51                      	push	cx
 41391 0000754C 56                      	push	si
 41392 0000754D 57                      	push	di
 41393                                  	
 41394                                  		; M033 - start
 41395                                  		; exepacked programs have an IP of 12h (>=2)
 41396                                  
 41397 0000754E 83E902                  	sub	cx,2			; Q: is IP >=2 
 41398 00007551 7303                    	jnb	short epp_1		; N: exit
 41399 00007553 E9C500                  	jmp	ep_notpacked
 41400                                  					; ax:cx now points to location of
 41401                                  					; 'RB' if this is an exepacked file.
 41402                                  		; M033 - end
 41403                                  epp_1:
 41404 00007556 89CF                    	mov	di,cx
 41405 00007558 8EC0                    	mov	es,ax
 41406 0000755A 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 41407                                  					; unpack_offset
 41408                                  
 41409 0000755F 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 41410                                  	;ljne	ep_notpacked
 41411 00007564 7403                    	je	short epp_2
 41412 00007566 E9B200                  	jmp	ep_notpacked
 41413                                  epp_2:
 41414 00007569 0E                      	push	cs
 41415 0000756A 1F                      	pop	ds			; set ds to cs
 41416                                  
 41417                                  	;add	di,6Ch
 41418 0000756B 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 41419                                  					;          file where we hope to find
 41420                                  					;	   scan string. 
 41421                                  
 41422 0000756E E8B200                  	call	chk_common_str		; check for match
 41423                                  
 41424 00007571 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 41425                                  					; N: check at patch2_offset
 41426                                  					; Y: check for rest of patch string
 41427 00007573 BE[5374]                	mov	si,scan_patch1
 41428                                  					; ds:si -> scan string 
 41429 00007576 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 41430                                  
 41431                                  	;add	di,28h
 41432                                  	; 07/12/2022
 41433 0000757B 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 41434                                  					;          file where we hope to find
 41435                                  					;	   scan string. 
 41436                                  	;mov	cx,68
 41437 0000757E B94400                  	mov	cx,size_scan_patch1
 41438                                  	;mov	bx,142
 41439 00007581 BB8E00                  	mov	bx,CHKSUM1_LEN
 41440                                  	;mov	ax,0EF4Eh
 41441 00007584 B84EEF                  	mov	ax,PATCH1_CHKSUM
 41442 00007587 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 41443 0000758A 7208                    	jc	short ep_done1		; Q: did we pass the test
 41444                                  					; N: exit
 41445                                  					; Y: overlay code with new 
 41446 0000758C BE[ED73]                	mov	si,str1
 41447                                  	;mov	cx,102
 41448 0000758F B96600                  	mov	cx,size_str1
 41449                                  	
 41450 00007592 F3A4                    	rep	movsb
 41451                                  ep_done1:
 41452 00007594 E98400                  	jmp	ep_done
 41453                                  
 41454                                  ep_chkpatch2:
 41455                                  	;mov	di,76h
 41456 00007597 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 41457                                  					; in another version of unpack
 41458 0000759A E88600                  	call	chk_common_str		; check for match
 41459                                  
 41460 0000759D 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 41461                                  					; N: check for patch3_offset
 41462                                  					; Y: check for rest of patch string
 41463                                  
 41464 0000759F BE[9774]                	mov	si,scan_patch2
 41465                                  					; ds:si -> scan string 
 41466                                  	;mov	di,32h
 41467 000075A2 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 41468                                  					;          file where we hope to find
 41469                                  	;mov	cx,68			;	   scan string. 
 41470 000075A5 B94400                  	mov	cx,size_scan_patch2
 41471                                  	;mov	bx,140
 41472 000075A8 BB8C00                  	mov	bx,CHKSUM2_LEN
 41473                                  	;mov	ax,78B2h
 41474 000075AB B8B278                  	mov	ax,PATCH2_CHKSUM
 41475 000075AE E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 41476                                  
 41477                                  					; M046 - Start
 41478                                  					; Q: did we pass the test
 41479 000075B1 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 41480                                  					; N: try with a different chksum
 41481                                  
 41482 000075B3 BE[9774]                	mov	si,scan_patch2
 41483                                  					; ds:si -> scan string 
 41484                                  	;mov	cx,68
 41485 000075B6 B94400                  	mov	cx,size_scan_patch2
 41486                                  	;mov	bx,129
 41487 000075B9 BB8100                  	mov	bx,CHKSUM2A_LEN
 41488                                  	;mov	ax,1C47h
 41489 000075BC B8471C                  	mov	ax,PATCH2A_CHKSUM
 41490 000075BF E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 41491                                  					; Q: did we pass the test
 41492 000075C2 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 41493                                  					; Y: overlay code with new 
 41494                                  						
 41495                                  ep_patchcode2:			       	; M046 - End
 41496 000075C4 BE[ED73]                	mov	si,str1
 41497                                  	;mov	cx,3
 41498 000075C7 B90300                  	mov	cx,first_stop
 41499 000075CA F3A4                    	rep	movsb
 41500 000075CC B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 41501 000075CF AB                      	stosw
 41502 000075D0 83C602                  	add	si,2
 41503                                  	;mov	cx,20
 41504 000075D3 B91400                  	mov	cx,second_stop
 41505 000075D6 F3A4                    	rep	movsb
 41506 000075D8 AB                      	stosw				; put in dec ax and nop
 41507 000075D9 83C602                  	add	si,2
 41508                                  	;mov	cx,75
 41509 000075DC B94B00                  	mov	cx,last_stop
 41510 000075DF F3A4                    	rep	movsb
 41511 000075E1 EB38                    	jmp	short ep_done
 41512                                  
 41513                                  ep_chkpatch3:
 41514                                  	;mov	di,74h
 41515 000075E3 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 41516                                  					; in another version of unpack
 41517 000075E6 E83A00                  	call	chk_common_str		; check for match
 41518                                  
 41519 000075E9 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 41520                                  					; N: exit
 41521                                  					; Y: check for rest of patch string
 41522 000075EB BE[DB74]                	mov	si,scan_patch3
 41523                                  					; ds:si -> scan string 
 41524                                  	;mov	di,32h
 41525 000075EE BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 41526                                  					;          file where we hope to find
 41527                                  					;	   scan string. 
 41528                                  	;mov	cx,66
 41529 000075F1 B94200                  	mov	cx,size_scan_patch3
 41530                                  	;mov	bx,139
 41531 000075F4 BB8B00                  	mov	bx,CHKSUM3_LEN
 41532                                  	;mov	ax,4EDEh
 41533 000075F7 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41534 000075FA E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 41535 000075FD 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 41536                                  					; N: exit
 41537                                  					; Y: overlay code with new 
 41538 000075FF BE[ED73]                	mov	si,str1
 41539                                  	;mv	cx,3
 41540 00007602 B90300                  	mov	cx,first_stop
 41541 00007605 F3A4                    	rep	movsb
 41542 00007607 B048                    	mov	al,48h			; al = opcode for dec ax
 41543 00007609 AA                      	stosb
 41544 0000760A 83C602                  	add	si,2
 41545                                  	;mov	cx,20
 41546 0000760D B91400                  	mov	cx,second_stop
 41547 00007610 F3A4                    	rep	movsb
 41548 00007612 AA                      	stosb				; put in dec ax
 41549 00007613 83C602                  	add	si,2
 41550                                  	;mov	cx,75
 41551 00007616 B94B00                  	mov	cx,last_stop
 41552 00007619 F3A4                    	rep	movsb
 41553                                  
 41554                                  ep_notpacked:
 41555                                  	;stc
 41556                                  ep_done:
 41557 0000761B 5F                      	pop	di
 41558 0000761C 5E                      	pop	si
 41559 0000761D 59                      	pop	cx
 41560 0000761E 58                      	pop	ax
 41561 0000761F 07                      	pop	es
 41562 00007620 1F                      	pop	ds
 41563 00007621 5B                      	pop	bx
 41564 00007622 C3                      	retn
 41565                                  
 41566                                  ;-------------------------------------------------------------------------
 41567                                  ;
 41568                                  ; 	Procedure Name	: chk_common_str
 41569                                  ;
 41570                                  ;	Input		: DS = DOSCODE
 41571                                  ;			; ES:DI points to string in packed file
 41572                                  ;
 41573                                  ;	Output		; Z if match else NZ
 41574                                  ;
 41575                                  ;-------------------------------------------------------------------------
 41576                                  
 41577                                  	; 23/05/2019 - Retro DOS v4.0
 41578                                  chk_common_str:
 41579 00007623 BE[1D75]                	mov	si,scan_com
 41580                                  					; ds:si -> scan string 
 41581                                  	;mov	cx,32
 41582 00007626 B92000                  	mov	cx,size_scan_com
 41583                                  
 41584 00007629 F3A6                    	repe	cmpsb	       
 41585                                  
 41586                                  					; M046 - start
 41587                                  	; a fourth possible version of these exepacked programs have a 
 41588                                  	; 056h instead of 06Bh. See scan_com above
 41589                                  	;
 41590                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41591                                  	;
 41592                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41593                                  	; we shall try to match the rest of the string
 41594                                  	;
 41595                                  
 41596 0000762B 7409                    	jz	short ccs_done
 41597 0000762D 26807DFF56              	cmp	byte [es:di-1],56h
 41598 00007632 7502                    	jnz	short ccs_done
 41599                                  
 41600 00007634 F3A6                    	repe	cmpsb	    
 41601                                  ccs_done:				; M046 - end
 41602 00007636 C3                      	retn
 41603                                  
 41604                                  ;-------------------------------------------------------------------------
 41605                                  ;
 41606                                  ;	Procedure Name	: chk_patchsum
 41607                                  ;
 41608                                  ;	Input		: DS:SI -> string we're looking for
 41609                                  ;			: ES:DI -> offset in packed file
 41610                                  ;			: CX 	= scan length
 41611                                  ;			: BX	= length of check sum
 41612                                  ;			: AX 	= value of check sum
 41613                                  ;
 41614                                  ;	Output		: if patch & check sum compare
 41615                                  ;				NC
 41616                                  ;			  else
 41617                                  ;				CY
 41618                                  ;
 41619                                  ;	Uses		: AX, BX, CX, SI
 41620                                  ;
 41621                                  ;-------------------------------------------------------------------------
 41622                                  
 41623                                  	; 23/05/2019 - Retro DOS v4.0
 41624                                  chk_patchsum:
 41625 00007637 57                      	push	di
 41626                                  
 41627 00007638 F3A6                    	repe	cmpsb			   
 41628                                  
 41629 0000763A 7518                    	jnz	short cp_fail		; Q: does the patch match
 41630                                  					; N: exit
 41631                                  					; Y:	
 41632                                  
 41633                                  		; we do a check sum starting from the location of the 
 41634                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41635                                  		; unpacking code.
 41636                                  
 41637 0000763C 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41638 00007641 89D9                    	mov	cx,bx			; cx = length of check sum
 41639                                  
 41640 00007643 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41641 00007645 31C0                    	xor	ax,ax
 41642                                  ep_chksum:
 41643 00007647 260305                  	add	ax,[es:di]
 41644 0000764A 83C702                  	add	di,2
 41645 0000764D E2F8                    	loop	ep_chksum
 41646                                  
 41647 0000764F 5F                      	pop	di			; restore di
 41648                                  
 41649 00007650 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41650                                  	;jne	short cp_fail		; N: exit
 41651                                  					; Y: 
 41652                                  	; 25/09/2023
 41653                                  	;clc	
 41654                                  	;retn
 41655 00007652 74E2                    	je	short ccs_done ; cf=0
 41656                                  	
 41657                                  cp_fail:
 41658 00007654 F9                      	stc
 41659 00007655 C3                      	retn
 41660                                  
 41661                                  ; 28/12/2022 - Retro DOS v4.1
 41662                                  %if 0
 41663                                  ;--------------------------------------------------------------------------- 
 41664                                  
 41665                                  
 41666                                  ; M020 : BEGIN
 41667                                  ;
 41668                                  ;---------------------------------------------------------------------------
 41669                                  ;
 41670                                  ; procedure : RationalPatch
 41671                                  ;
 41672                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41673                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41674                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41675                                  ;
 41676                                  ; THE BUG is in the following code sequence:
 41677                                  ;
 41678                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41679                                  ;90		even				; word align
 41680                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41681                                  ;e8 xx xx	call	set_A20			; enable A20
 41682                                  ;
 41683                                  ; This patch routine replaces the mov & the loop with a far call into a
 41684                                  ; routine in DOS data segment which is in low memory (because A20 line
 41685                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41686                                  ; a mov & loop.
 41687                                  ;
 41688                                  ; Identification of Buggy Rational EXE
 41689                                  ; ====================================
 41690                                  ;
 41691                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41692                                  ;
 41693                                  ; OFFSET				Contains
 41694                                  ; ------				--------
 41695                                  ; 0000h			100 times Version number in binary
 41696                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41697                                  ;
 41698                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41699                                  ;
 41700                                  ; 002ah			offset where version number is stored in ASCII
 41701                                  ;				e.g. '3.48A'
 41702                                  ;
 41703                                  ; 0030h			offset of copyright string. Copyright strings either
 41704                                  ;			start with "DOS/16M Copyright...." or
 41705                                  ;			"Copyright.....". The string contains
 41706                                  ;			"Rational Systems, Inc."
 41707                                  ;
 41708                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41709                                  ;				from the program image
 41710                                  ; 0016h			word : size of buggy code segment
 41711                                  ;
 41712                                  ;	Buggy code is definite to start after offset 200h in its segment
 41713                                  ;
 41714                                  ;----------------------------------------------------------------------------
 41715                                  
 41716                                  ; 23/05/2019 - Retro DOS v4.0
 41717                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41718                                  
 41719                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41720                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41721                                  
 41722                                  RScanPattern1:
 41723                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41724                                  
 41725                                  RLen1 equ $ - RScanPattern1
 41726                                  
 41727                                  RScanPattern2:
 41728                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41729                                  
 41730                                  RLen2 equ $ - RScanPattern2
 41731                                  
 41732                                  RScanPattern3:
 41733                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41734                                  
 41735                                  RLen3 equ $ - RScanPattern2
 41736                                  
 41737                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41738                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41739                                  
 41740                                  ;----------------------------------------------------------------------------
 41741                                  ;
 41742                                  ; INPUT : ES = segment where program got loaded
 41743                                  ;
 41744                                  ;----------------------------------------------------------------------------
 41745                                  
 41746                                  RationalPatch:
 41747                                  	cld
 41748                                  	push	ax
 41749                                  	push	bx
 41750                                  	push	cx
 41751                                  	push	dx
 41752                                  	push	si
 41753                                  	push	di
 41754                                  	push	es
 41755                                  	push	ds			; we use all of them
 41756                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41757                                  	push	cs
 41758                                  	pop	ds
 41759                                  	
 41760                                  	mov	si,RScanPattern1
 41761                                  	;mov	cx,10
 41762                                  	mov	cx,RLen1
 41763                                  	rep	cmpsb			; do we have the pattern ?
 41764                                  	jne	short rpexit
 41765                                  	mov	ax,[es:0]
 41766                                  	cmp	ax,348			; is it a buggy version ?
 41767                                  	jb	short rpexit
 41768                                  	cmp	ax,383			; is it a buggy version
 41769                                  	ja	short rpexit
 41770                                  
 41771                                  	call	VerifyVersion
 41772                                  	jne	short rpexit
 41773                                  
 41774                                  	mov	cx,[es:16h]		; Length of buggy code seg
 41775                                  	sub	cx,200h			; Length we search (we start
 41776                                  					;  at offset 200h)
 41777                                  	mov	es,[es:20h]		; es=buggy code segment
 41778                                  	mov	si,RScanPattern2
 41779                                  	;mov	dx,8	
 41780                                  	mov	dx,RLen2
 41781                                  	call	ScanCodeSeq		; look for code seq with nop
 41782                                  	jz	short rpfound
 41783                                  
 41784                                  	mov	si,RScanPattern3
 41785                                  	;mov	dx,15
 41786                                  	mov	dx,RLen3
 41787                                  	call	ScanCodeSeq		; look for code seq w/o nop
 41788                                  	jnz	short rpexit
 41789                                  
 41790                                  rpfound:
 41791                                  	
 41792                                  ;	we set up a far call into DOS data
 41793                                  ;	dx has the length of the code seq we were searching for
 41794                                  
 41795                                  	mov	al,9Ah			; far call opcode
 41796                                  	stosb
 41797                                  	mov	ax,RatBugCode
 41798                                  	stosw
 41799                                  	mov	ax,ss
 41800                                  	stosw
 41801                                  	mov	cx,dx
 41802                                  	sub	cx,6			; filler (with NOPs)
 41803                                  	mov	al,90h
 41804                                  	rep	stosb
 41805                                  rpexit:
 41806                                  	pop	ds
 41807                                  	pop	es
 41808                                  	pop	di
 41809                                  	pop	si
 41810                                  	pop	dx
 41811                                  	pop	cx
 41812                                  	pop	bx
 41813                                  	pop	ax
 41814                                  	retn
 41815                                  
 41816                                  ; M020 END
 41817                                  
 41818                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41819                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41820                                  
 41821                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41822                                  
 41823                                  ;----------------------------------------------------------------------------
 41824                                  ;
 41825                                  ; ScanCodeSeq
 41826                                  ;
 41827                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41828                                  ;
 41829                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41830                                  ;
 41831                                  ;----------------------------------------------------------------------------
 41832                                  
 41833                                  ScanCodeSeq:
 41834                                  	; 17/12/2022
 41835                                  	mov	di,200h
 41836                                  ;ScanCodeSeq_di:
 41837                                  	push	cx
 41838                                  	sub	cx,dx
 41839                                  	inc	cx
 41840                                  	; 17/12/2022
 41841                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41842                                  	;mov	di,200h
 41843                                  scsagain:
 41844                                  	push	si
 41845                                  	push	di
 41846                                  	push	cx
 41847                                  	mov	cx,dx
 41848                                  	rep	cmpsb
 41849                                  	pop	cx
 41850                                  	pop	di
 41851                                  	pop	si
 41852                                  	je	short scsfound
 41853                                  	inc	di
 41854                                  	loop	scsagain
 41855                                  scsfound:
 41856                                  	pop	cx
 41857                                  vvexit:		; 18/12/2022
 41858                                  	retn
 41859                                  
 41860                                  
 41861                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41862                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41863                                  
 41864                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41865                                  
 41866                                  ;----------------------------------------------------------------------------
 41867                                  ;
 41868                                  ; VerifyVersion
 41869                                  ;
 41870                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41871                                  ; from ES:2A.
 41872                                  ;
 41873                                  ;       Entry: AX = binary version number 
 41874                                  ;       Exit : Z flag set if version numbers match
 41875                                  ;
 41876                                  ;----------------------------------------------------------------------------
 41877                                  
 41878                                  VerifyVersion:
 41879                                  	mov	si,[es:2Ah]		; offset of version number
 41880                                  					;  in ascii
 41881                                  	mov	bl,10
 41882                                  	add	si,3			; point to last digit
 41883                                  
 41884                                  	call	VVDigit
 41885                                  	jne	short vvexit
 41886                                  	call	VVDigit
 41887                                  	jne	short vvexit
 41888                                  	cmp	byte [es:si],'.' ; 2Eh
 41889                                  	jne	short vvexit
 41890                                  	dec	si
 41891                                  	;call	VVDigit
 41892                                  	; 18/12/2022
 41893                                  	;jmp	short VVDigit
 41894                                  ;vvexit:
 41895                                  	;retn
 41896                                  VVDigit:
 41897                                  	div	bl
 41898                                  	add	ah,'0' ; 30h
 41899                                  	dec	si
 41900                                  	cmp	[es:si+1],ah
 41901                                  	mov	ah,0			; do not xor or sub we need Z
 41902                                  	retn
 41903                                  
 41904                                  ;--------------------------------------------------------------------------- 
 41905                                  %endif	; 28/12/2022
 41906                                  
 41907                                  ;---------------------------------------------------------------------------
 41908                                  ;
 41909                                  ;	M068
 41910                                  ;
 41911                                  ; 	Procedure Name	: IsCopyProt
 41912                                  ;
 41913                                  ;	Inputs		: DS:100 -> start of com file just read in
 41914                                  ;
 41915                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41916                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41917                                  ;			  copy protect scheme that relies on the A20 line
 41918                                  ;			  being turned off for it's scheme to work.
 41919                                  ;
 41920                                  ;			  Note: The int 21 function dispatcher will turn 
 41921                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41922                                  ;				and dec the A20OFF_COUNT before	iretting 
 41923                                  ;				to the user. 
 41924                                  ;
 41925                                  ;	Uses		: ES, DI, SI, CX
 41926                                  ;
 41927                                  ;---------------------------------------------------------------------------
 41928                                  
 41929                                  ; 23/05/2019 - Retro DOS v4.0
 41930                                  
 41931                                  CPStartOffset	EQU	0175h
 41932                                  CPID1Offset	EQU	011Bh
 41933                                  CPID2Offset	EQU	0173h
 41934                                  CPID3Offset	EQU	0146h
 41935                                  CPID4Offset	EQU	0124h
 41936                                  ID1		EQU	05343h
 41937                                  ID2		EQU	05044h
 41938                                  ID3		EQU	0F413h
 41939                                  ID4		EQU	08000h
 41940                                  
 41941                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41942                                  
 41943                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41944                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41945                                  
 41946                                  CPScanPattern:
 41947 00007656 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41948 0000765A 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41949 0000765E C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41950 00007664 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41951 00007668 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41952 0000766B BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41953                                  
 41954                                  CPSPlen	EQU $ - CPScanPattern
 41955                                  
 41956                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41957                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41958                                  
 41959                                  IsCopyProt:
 41960 0000766E 813E1B014353            	cmp	word [CPID1Offset],ID1
 41961 00007674 752D                    	jne	short CP_done
 41962                                  
 41963 00007676 813E73014450            	cmp	word [CPID2Offset],ID2
 41964 0000767C 7525                    	jne	short CP_done
 41965                                  
 41966 0000767E 813E460113F4            	cmp	word [CPID3Offset],ID3
 41967 00007684 751D                    	jne	short CP_done
 41968                                  
 41969 00007686 813E24010080            	cmp	word [CPID4Offset],ID4
 41970 0000768C 7515                    	jne	short CP_done
 41971                                  
 41972 0000768E 0E                      	push	cs
 41973 0000768F 07                      	pop	es
 41974 00007690 BF[5676]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41975                                  
 41976 00007693 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41977                                  					; of pattern
 41978                                  
 41979 00007696 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41980 00007699 F3A6                    	repe	cmpsb
 41981 0000769B 7506                    	jnz	short CP_done
 41982                                  
 41983 0000769D 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41984                                  CP_done:
 41985 000076A3 C3                      	retn
 41986                                  	
 41987                                  ;DOSCODE ENDS
 41988                                  
 41989                                  	;END
 41990                                  
 41991                                  ;----------------------------------------------------------------------------
 41992                                  
 41993                                  ;align 2 ; 05/09/2018 (Error!)
 41994                                  
 41995                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41996                                  ;align 16 ; 08/09/2018 (OK.)
 41997                                  align 2
 41998                                  
 41999                                  ; 06/08/2018 - Retro DOS v3.0
 42000                                  ;============================================================================
 42001                                  ; MSINIT.ASM
 42002                                  ;============================================================================
 42003                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 42004                                  ;
 42005                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42006                                  ;
 42007                                  	; 15/07/2018 - Retro DOS v3.0
 42008                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 42009                                  
 42010                                  ; temp iret instruction
 42011                                  
 42012                                  
 42013                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42014                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 42015                                  
 42016                                  initiret: ; MSDOS 6.0
 42017                                  SYSBUF:
 42018                                  ;IRETT: ; 06/05/2019
 42019 000076A4 CF                      	iret
 42020                                  
 42021                                  ; 22/04/2019 - Retro DOS v4.0
 42022                                  
 42023                                  ; pointer to the BIOS data segment that will be available just to the
 42024                                  ; initialization code
 42025                                  
 42026 000076A5 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 42027                                  
 42028                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42029                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 42030                                  
 42031                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 42032                                  
 42033                                  ParaRound:
 42034 000076A7 83C00F                  	add	ax, 15
 42035 000076AA D1D8                    	rcr	ax, 1
 42036 000076AC D1E8                    	shr	ax, 1
 42037 000076AE D1E8                    	shr	ax, 1
 42038 000076B0 D1E8                    	shr	ax, 1
 42039 000076B2 C3                      	retn
 42040                                  
 42041                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 42042                                  
 42043                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42044                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 42045                                  	
 42046                                  	; 30/05/2019
 42047                                  	; 22/04/2019 - Retro DOS v4.0
 42048                                  	; 07/07/2018 - Retro DOS v3.0
 42049                                  	; Retro DOS v2.0 - 03/03/2018
 42050                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42051                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 42052                                  DOSINIT:
 42053                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 42054                                  	;
 42055                                  	; Far call from SYSINIT
 42056                                  	; DX = Memory size in paragraphs
 42057                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 42058                                  	;	  (Retro DOS v2.0, 16/03/2018)
 42059                                  	;
 42060                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 42061                                  	;	  (Retro DOS v4.0, 20/04/2019)
 42062                                  
 42063 000076B3 FA                              CLI
 42064 000076B4 FC                              CLD
 42065                                  
 42066                                  	; 03/11/2022
 42067                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 42068                                  	
 42069                                  	; 17/12/2022
 42070                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42071                                  	;push	dx ; =*=		; save parameters from BIOS
 42072                                  	
 42073 000076B5 56                      	push	si
 42074 000076B6 1E                      	push	ds
 42075 000076B7 57                      	push	di			;save di (ptr to BiosComBlock)
 42076                                  
 42077 000076B8 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 42078                                  
 42079                                  ; First, move the DOS data segment to its final location in low memory
 42080                                  
 42081                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 42082                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 42083 000076BA B8[347B]                	mov	ax,MEMSTRT		; get offset of end of init code
 42084                                  
 42085                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 42086                                  	;and	ax,~15	; 0FFF0h	; boundary
 42087                                  
 42088                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 42089                                  					; code segment
 42090                                  
 42091                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42092 000076BD 83C00F                  	add	ax,15			; round to nearest paragraph
 42093 000076C0 83E0F0                  	and	ax,~15			; boundary
 42094                                  
 42095 000076C3 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 42096                                  					; code segment
 42097                                  	; 05/12/2022
 42098                                  	; 30/04/2019 - Retro DOS v4.0
 42099                                  	;xor	si,si
 42100                                  	
 42101 000076C5 8CC8                    	mov	ax,cs
 42102 000076C7 8ED8                    	mov	ds,ax			; ds = current code segment
 42103                                  					; DS:SI now points to dosdata
 42104                                  
 42105                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 42106                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 42107                                  					;  BData segment. Cannot use
 42108                                  					;  getdseg macro here!!!
 42109                                  	; 17/12/2022
 42110 000076C9 8E06[A576]              	mov	es,[InitBioDataSeg]
 42111                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42112                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 42113                                  
 42114                                  	;mov	es,[es:3]
 42115 000076CD 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 42116                                  
 42117 000076D2 31FF                    	xor	di,di			; ES:DI now points to RAM data
 42118                                  
 42119                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 42120                                  	;mov	cx,4976  ; 25/05/2019
 42121                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42122                                  	;mov	cx,4962
 42123                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 42124 000076D4 B9A512                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 42125 000076D7 F3A4                    	rep	movsb			; move data to final location
 42126                                  	
 42127 000076D9 5F                      	pop	di			; restore ptr to BiosComBlock
 42128 000076DA 1F                      	pop	ds			; restore parms from BIOS
 42129 000076DB 5E                      	pop	si
 42130                                  	; 17/12/2022
 42131                                  	;pop	dx ; 30/05/2019	
 42132                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42133                                  	;pop	dx ; =*=		
 42134                                  
 42135 000076DC 06                      	push	es
 42136 000076DD 1E                      	push	ds
 42137 000076DE 07                      	pop	es			; es:si -> device chain
 42138 000076DF 1F                      	pop	ds			; ds points to dosdata
 42139                                  
 42140                                  ;SR;
 42141                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 42142                                  ;now so that the EXEC call knows when SysInit is present to do the special
 42143                                  ;lie table handling for device drivers. This can be expanded later on to
 42144                                  ;establish a communication block from the BIOS to the DOS.
 42145                                  
 42146                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 42147                                  	;mov	[1042h],bx
 42148 000076E0 893E[4010]              	mov	[BiosDataPtr],di
 42149 000076E4 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 42150                                  
 42151 000076E8 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 42152                                  
 42153                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 42154                                  
 42155 000076ED 2E8C1E[9D50]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 42156 000076F2 2E8C1E[A150]            	mov	[cs:LowInt24Addr+2],ds
 42157 000076F7 2E8C1E[A550]            	mov	[cs:LowInt28Addr+2],ds
 42158                                  
 42159                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 42160                                  	;mov	[584h],sp
 42161                                  	;mov	[586h],ss
 42162 000076FC 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 42163 00007700 8926[8405]              	mov	[USER_SP],sp
 42164 00007704 8C16[8605]              	mov	[USER_SS],ss
 42165                                  
 42166 00007708 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 42167 0000770A 8ED0                    	mov	ss,ax
 42168                                  
 42169                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 42170                                  	;mov	sp,offset dosdata:dskstack
 42171 0000770C BC[2009]                	mov	sp,DSKSTACK
 42172                                  
 42173                                  ;M023
 42174                                  ; Init patch ptrs to default values
 42175                                  
 42176                                  	;mov	word [1212h],RetExePatch
 42177                                  	;mov	word [1214h],RetExePatch
 42178                                  	;mov	word [61h],RetExePatch
 42179 0000770F C706[F311][0F62]        	mov	word [FixExePatch],RetExePatch	; M023
 42180                                  	; 28/12/2022 - Retro DOS v4.1
 42181                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 42182 00007715 C706[6100][0F62]        	mov	word [ChkCopyProt],RetExePatch	; M068
 42183                                  
 42184                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42185                                  %if 0	; 19/09/2023
 42186                                  
 42187                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 42188                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 42189                                  ; running in the HMA.
 42190                                  
 42191                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 42192                                  	cmp	al,2		;   386 or later?
 42193                                  	mov	ax,Rational386Patch
 42194                                  	jae	short di_set_patch
 42195                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 42196                                  di_set_patch:
 42197                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 42198                                  
 42199                                  %endif
 42200                                  	; Set up the variable temp_dosloc to point to the dos code segment
 42201                                  
 42202 0000771B 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 42203                                  
 42204                                  	; ax now holds segment of DOS code
 42205 0000771D A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 42206                                  
 42207 00007720 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 42208 00007724 8936[4800]              	mov	word [NULDEV],si
 42209                                  ;SR;
 42210                                  ; There are some locations in the Win386 instance data structures
 42211                                  ; which need to be set up with the DOS data segment. First, initialize
 42212                                  ; the segment part of the instance table pointer in the SIS.
 42213                                  
 42214                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 42215 00007728 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 42216                                  
 42217                                  ; Now initialize the segment part of the pointer to the data in each
 42218                                  ; instance table entry.
 42219                                  
 42220 0000772C 56                      	push	si		; preserve pointer to device chain
 42221                                  	; 18/12/2022
 42222                                  	; cx = 0
 42223 0000772D B107                    	mov	cl,7
 42224                                  	;mov	cx,7		; There are 7 entries in the instance table
 42225                                  				; M019
 42226                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 42227 0000772F BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 42228                                  Instance_init_loop:
 42229 00007732 8C1C                    	mov	[si],ds		; set offset in instance entry
 42230                                  	;add	si,6
 42231 00007734 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 42232 00007737 E2F9                    	loop	Instance_init_loop
 42233                                  
 42234                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 42235                                  
 42236                                  	; 18/12/2022
 42237 00007739 B105                    	mov	cl,5
 42238                                  	;mov	cx,5		; There are five entries in the instance table
 42239                                  
 42240                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 42241                                  	;mov	si,11EDh	; point si to segment field
 42242 0000773B BE[CE11]                	mov	si,OldInstanceJunk+6
 42243                                  OldInstance_init_loop:
 42244 0000773E 8C1C                    	mov	[si],ds		; set offset in instance entry
 42245 00007740 83C606                  	add	si,6		; move on to next entry
 42246 00007743 E2F9                    	loop	OldInstance_init_loop
 42247 00007745 5E                      	pop	si		; restore pointer to device chain
 42248                                  
 42249                                  ; End of WIN386 2.xx compatibility bullshit
 42250                                  
 42251                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42252                                  %if 0	
 42253                                     	; 30/04/2019
 42254                                  	;push	es
 42255                                  	;pop	ds
 42256                                  			; ds:si points to console device
 42257                                  
 42258                                  	; 24/04/2019 - Retro DOS v4.0
 42259                                  
 42260                                  	; 15/07/2018
 42261                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 42262                                  	; (Set INT 2Ah handler address to an 'IRET')
 42263                                  
 42264                                  	; need crit vector inited to use deviocall
 42265                                  	;push	ds			; preserve segment of device chain
 42266                                  	push	es ; 30/04/2019
 42267                                  
 42268                                  %endif
 42269                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42270 00007746 06                      	push	es
 42271                                  	; 17/12/2022
 42272                                  	;pop	ds
 42273                                  	;push	ds
 42274                                  
 42275 00007747 31C0                    	xor	ax,ax
 42276 00007749 8ED8                    	mov	ds,ax			; point DS to int vector table
 42277 0000774B B8[A476]                	mov	ax,initiret
 42278                                  	;mov	[0A8h],ax  ; [2Ah*4]
 42279 0000774E A3A800                  	mov	[addr_int_ibm],ax
 42280 00007751 8CC8                    	mov	ax,cs
 42281                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 42282 00007753 A3AA00                  	mov	[addr_int_ibm+2],ax
 42283 00007756 1F                      	pop	ds			; restore segment of device chain
 42284                                  
 42285 00007757 E81C02                  	call	CHARINIT  		; initialize console driver
 42286 0000775A 56                      	push	si			; save pointer to header
 42287                                  
 42288 0000775B 16                      	push	ss			; move pointer to dos data...
 42289 0000775C 07                      	pop	es			; ...into ES
 42290                                  
 42291                                  	;initialize sft for file 0 (CON)
 42292                                  
 42293                                          ; 07/07/2018 - Retro DOS v3.0
 42294                                  	; 24/04/2019 - Retro DOS v4.0
 42295                                  	;mov	di,SFTABL+6 
 42296 0000775D BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 42297 00007760 B80300                          MOV     AX,3
 42298 00007763 AB                              STOSW           	; Refcount
 42299 00007764 FEC8                            DEC     AL
 42300 00007766 AB                              STOSW           	; Access rd/wr, compatibility
 42301 00007767 30C0                            XOR     AL,AL
 42302 00007769 AA                              STOSB           	; attribute
 42303                                  	;mov	al,0C3h
 42304 0000776A B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 42305 0000776C AB                      	STOSW			; flags
 42306 0000776D 89F0                            mov	ax,si
 42307 0000776F AB                              stosw			; device pointer in devptr	
 42308 00007770 8CD8                            mov	ax,ds
 42309 00007772 AB                      	stosw
 42310 00007773 31C0                    	xor	ax,ax	; 0
 42311 00007775 AB                      	stosw			; firclus
 42312 00007776 AB                      	stosw			; time
 42313 00007777 AB                      	stosw			; date
 42314 00007778 48                      	dec	ax	; -1
 42315 00007779 AB                      	stosw			; size
 42316 0000777A AB                      	stosw
 42317 0000777B 40                      	inc	ax	; 0
 42318 0000777C AB                      	stosw			; position
 42319 0000777D AB                      	stosw
 42320                                  	;add	di,7
 42321 0000777E 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 42322                                  				; point at name
 42323                                  	;add	si,10
 42324 00007781 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 42325                                  				; point to name
 42326 00007784 B90400                  	mov	cx,4
 42327 00007787 F3A5                    	rep	movsw		; name
 42328 00007789 B103                    	mov	cl,3
 42329 0000778B B020                    	mov	al," "
 42330 0000778D F3AA                    	rep	stosb		; extension
 42331                                  
 42332 0000778F 5E                      	pop	si		; get back pointer to header
 42333                                  
 42334                                  				; mark device as CON I/O
 42335                                  	; 15/07/2018
 42336                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 42337 00007790 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 42338                                  	; 12/03/2018
 42339                                  	;mov	[ss:32h],si
 42340 00007794 368936[3200]            	MOV     [SS:BCON],SI
 42341                                  	;mov	[ss:34h],ds
 42342 00007799 368C1E[3400]                    MOV     [SS:BCON+2],DS
 42343                                  
 42344                                  	; initialize each device until the clock device is found
 42345                                  
 42346                                  CHAR_INIT_LOOP:
 42347 0000779E C534                            LDS     SI,[SI]			; AUX device
 42348 000077A0 E8D301                  	call	CHARINIT 
 42349                                         	;15/07/2018
 42350                                  	;test	byte [SI+4],8
 42351 000077A3 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 42352 000077A7 74F5                            JZ      SHORT CHAR_INIT_LOOP
 42353                                  	; 12/03/2018
 42354                                  	;mov	[ss:2Eh],si
 42355 000077A9 368936[2E00]                    MOV     [SS:BCLOCK],SI
 42356                                  	;mov	[ss:30h],ds
 42357 000077AE 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 42358                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 42359                                  
 42360                                  	;mov	bp,4970			; bp = pointer to free mem
 42361                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 42362                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 42363                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 42364 000077B3 BDA512                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 42365                                  
 42366 000077B6 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 42367 000077BB 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 42368                                  PERDRV:
 42369                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 42370 000077C0 C534                            LDS	SI,[SI]			; Next device
 42371 000077C2 83FEFF                          CMP	SI,-1	; 0FFFFh
 42372 000077C5 7479                    	JZ	SHORT CONTINIT
 42373                                  
 42374 000077C7 E8AC01                          call	CHARINIT
 42375                                  
 42376                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 42377                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 42378                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 42379                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 42380                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 42381                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 42382                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 42383                                  
 42384                                          ; 15/07/2018
 42385                                  	;test	word [SI+4],8000h		; DEVTYP
 42386                                          ; 17/12/2022
 42387                                  	;test	byte [SI+5],80h
 42388 000077CA F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 42389                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 42390 000077CE 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 42391                                  
 42392 000077D0 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 42393 000077D5 30ED                    	XOR     CH,CH
 42394                                          ; 07/07/2018
 42395                                  	;MOV	[SI+10],CL		; Number of units in name field
 42396 000077D7 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 42397 000077DA 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 42398 000077DF 30F6                    	XOR     DH,DH
 42399 000077E1 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 42400 000077E6 1E                      	PUSH    DS
 42401 000077E7 56                              PUSH    SI
 42402 000077E8 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 42403                                  
 42404                                  PERUNIT:
 42405 000077ED 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 42406 000077EF 43                              INC     BX
 42407 000077F0 43                              INC     BX                      ; On to next BPB
 42408                                  	; 15/12/2022
 42409                                  	; 07/07/2018
 42410                                          ;mov	[ES:BP+DPB.DRIVE],DL
 42411 000077F1 26885600                	MOV     [ES:BP],DL
 42412                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42413                                  	;;mov	[ES:BP+0],DL
 42414                                  	;mov	[ES:BP+DPB.DRIVE],DL
 42415                                  
 42416                                  	;MOV	[ES:BP+1],DH
 42417 000077F5 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 42418 000077F9 53                              PUSH    BX
 42419 000077FA 51                              PUSH    CX
 42420 000077FB 52                              PUSH    DX
 42421                                  
 42422                                          ;invoke	$SETDPB
 42423 000077FC E8D197                          CALL	_$SETDPB		; build DPB!
 42424                                  
 42425                                  	; 07/07/2018
 42426                                  	;MOV	AX,[ES:BP+2]
 42427 000077FF 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 42428                                          ; 12/03/2018
 42429 00007803 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 42430 00007808 7604                    	JBE     SHORT NOTMAX		; N:
 42431 0000780A 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 42432                                  NOTMAX:					
 42433                                  	; set the next dpb field in the currently built bpb
 42434                                  	; and mark as never accessed
 42435                                          
 42436                                  	; 24/04/2019
 42437 0000780E 89E8                    	mov	ax,bp			; get pointer to DPB
 42438                                  	;add	ax,33
 42439 00007810 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 42440                                  					; set seg & offset of next DPB
 42441                                  	;mov	[es:bp+25],ax
 42442 00007813 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 42443                                  	;mov	[es:bp+27],es
 42444 00007817 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 42445                                  					; mark as never accessed
 42446                                  	;mov	byte [es:bp+24],0FFh
 42447 0000781B 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 42448                                  
 42449 00007820 5A                      	POP     DX
 42450 00007821 59                              POP     CX
 42451 00007822 5B                              POP     BX
 42452 00007823 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 42453 00007825 5E                              POP     SI
 42454 00007826 1F                              POP     DS
 42455                                  					; ds:si -> device header
 42456                                  					; store it in the corresponding dpb
 42457                                  	; 07/07/2018
 42458                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 42459 00007827 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 42460                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 42461 0000782B 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 42462                                  
 42463 0000782F 1E                              PUSH    DS			; save pointer to device header
 42464 00007830 56                              PUSH    SI
 42465 00007831 FEC6                            INC     DH			; inc unit #
 42466 00007833 FEC2                            INC     DL			; inc drive #
 42467 00007835 8ED8                            MOV     DS,AX			; restore segment of BPB array
 42468                                          ;add	bp,33 ; 24/04/2019
 42469 00007837 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 42470 0000783A E2B1                    	LOOP    PERUNIT			; process all units in each driver
 42471                                          
 42472 0000783C 5E                      	POP     SI			; restore pointer to device header
 42473 0000783D 1F                              POP     DS
 42474 0000783E EB80                    	JMP	PERDRV			; process all drivers in chain
 42475                                  
 42476                                  CONTINIT:
 42477                                  	; 24/04/2019
 42478                                  	;sub	bp,33			; set link in last DPB to -1
 42479 00007840 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 42480                                  					; set last link offset & segment
 42481                                  	;mov	word [bp+25],0FFFFh
 42482 00007843 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 42483                                  	;mov	word [bp+27],0FFFFh
 42484 00007848 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 42485                                  	;add	bp,33
 42486 0000784D 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 42487                                  					; the DPB chain is done.  
 42488 00007850 16                      	push	ss
 42489 00007851 1F                      	pop	ds
 42490                                  
 42491 00007852 89E8                    	mov	ax,bp
 42492 00007854 E850FE                  	call	ParaRound		; round up to segment
 42493                                  
 42494 00007857 8CDA                    	mov	dx,ds			; dx = dosdata segment
 42495 00007859 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 42496                                  
 42497 0000785B BB0F00                  	mov	bx,0Fh
 42498                                  	
 42499                                  	; 24/05/2019
 42500                                  	;mov	cx,[ENDMEM]
 42501                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42502                                  	; 17/12/2022
 42503                                  	;mov	cx,[ENDMEM] 
 42504                                  					; set seg inpacketto dosdata					
 42505 0000785E 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 42506                                  
 42507                                  ; Patch in the segments of the interrupt vectors with current code segment.
 42508                                  ; Also patch in the segment of the pointers in the dosdata area.
 42509                                  ;
 42510                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 42511                                  ; calls were done. The procedure patch_misc_segments is called multiple
 42512                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 42513                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 42514                                  
 42515 00007862 52                      	push	dx			; preserve first free segment
 42516                                  
 42517 00007863 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 42518 00007866 8EC0                    	mov	es,ax			; es = segment of DOS
 42519 00007868 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 42520                                  
 42521 0000786E E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 42522 00007871 E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 42523                                  					; other tables with seg in ES.
 42524                                  	; 17/12/2022
 42525                                  	; cx = 0
 42526 00007874 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 42527                                  
 42528 00007878 5A                      	pop	dx			; restore first free segment
 42529                                  
 42530                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 42531                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 42532                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 42533                                  ; low_mem_stub by seg_reinit.
 42534                                  
 42535                                  	;xor	ax,ax ; 0
 42536                                  	;mov	ds,ax
 42537                                  	;mov	es,ax
 42538                                  	; 17/12/2022
 42539                                  	; cx = 0
 42540                                  	;xor	cx,cx ; 0
 42541 00007879 8ED9                    	mov	ds,cx
 42542 0000787B 8EC1                    	mov	es,cx
 42543                                  
 42544                                  	; set the segment of int 24 vector that was 
 42545                                  	; left out by patch_vec_segments above.
 42546                                  
 42547                                  	; 17/12/2022
 42548                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42549                                  ;%if 0
 42550                                  	; 24/05/2019
 42551                                  	;;mov	di,90h
 42552                                  	;;mov	di,4*int_fatal_abort
 42553                                  	;mov	di,addr_int_fatal_abort
 42554 0000787D BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 42555                                  
 42556 00007880 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 42557                                  	;mov	[di+2],ax  ; int 24h segment
 42558 00007884 8905                    	mov	[di],ax ; 24/05/2019
 42559                                  
 42560                                  	;;mov	di,82h
 42561                                  	;mov	di,INTBASE+2
 42562                                  
 42563                                  ;%endif
 42564                                  	; 17/12/2022
 42565                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42566                                  	;;mov	di,90h
 42567                                  	;;mov	di,4*int_fatal_abort
 42568                                  	;mov	di,addr_int_fatal_abort
 42569                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42570                                  	;mov	[di+2],ax  ; int 24h segment
 42571                                  	;;mov	di,82h
 42572                                  	;mov	di,INTBASE+2
 42573                                  
 42574                                  	; set default divide trap offset
 42575                                  
 42576                                  	;mov	word ptr ds:[0],offset doscode:divov
 42577 00007886 C7060000[7852]          	mov	word [0],DIVOV	
 42578                                  
 42579                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42580                                  
 42581                                  	;mov	di,80h
 42582 0000788C BF8000                  	mov	di,INTBASE
 42583                                  	;mov	ax,offset doscode:irett
 42584 0000788F B8[E202]                	mov	ax,IRETT
 42585                                  
 42586                                  	; 17/12/2022
 42587                                  	; cx = 0
 42588 00007892 B109                    	mov	cl,9
 42589                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42590                                  					;   sets offsets for ints 20h-28h
 42591                                  iset1:
 42592 00007894 AB                      	stosw
 42593                                  	;add	di,2
 42594                                  	; 20/09/2023
 42595 00007895 47                      	inc	di
 42596 00007896 47                      	inc	di
 42597 00007897 E2FB                    	loop	iset1
 42598                                  
 42599 00007899 83C704                  	add	di,4			; skip vector 29h
 42600                                  
 42601                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42602                                  ;					;   sets offsets for ints 2ah-2fh
 42603                                  ;iset2:
 42604                                  ;	stosw
 42605                                  ;	add	di,2
 42606                                  ;	loop	iset2
 42607                                  
 42608                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42609                                  ; patch_vec_segments above. So skip it.
 42610                                  
 42611                                  ;	add	di,8			; skip vector 30h & 31h 
 42612                                  
 42613                                  	;;;
 42614                                  	; 06/05/2019 - Retro DOS v4.0
 42615                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42616                                  	; 17/12/2022
 42617 0000789C B105                    	mov	cl,5 ; 28/06/2019
 42618                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42619                                  	;mov	cx,6
 42620                                  iset2:
 42621 0000789E AB                      	stosw
 42622                                  	;add	di,2
 42623                                  	; 20/09/2023
 42624 0000789F 47                      	inc	di
 42625 000078A0 47                      	inc	di
 42626 000078A1 E2FB                    	loop	iset2
 42627                                  
 42628                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42629                                  	; 17/12/2022
 42630 000078A3 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42631                                  	;add	di,8
 42632                                  	;;;
 42633                                  
 42634                                  	; 17/12/2022
 42635 000078A6 B10E                    	mov	cl,14
 42636                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42637                                  					;   sets offsets for ints 32h-3fh
 42638                                  iset3:
 42639 000078A8 AB                      	stosw
 42640                                  	;add	di,2
 42641                                  	; 20/09/2023
 42642 000078A9 47                      	inc	di
 42643 000078AA 47                      	inc	di
 42644 000078AB E2FB                    	loop	iset3
 42645                                  
 42646                                  ;if installed
 42647                                  	; set the offset of int2f handler
 42648                                  	;mov	word [0BCh],INT2F
 42649 000078AD C706BC00[0307]          	mov	word [02Fh*4],INT2F
 42650                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42651 000078B3 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42652                                  	;mov	[0BEh],ax
 42653 000078B7 A3BE00                  	mov	[(02Fh*4)+2],ax
 42654                                  ;endif
 42655                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42656                                  	; long jump will be patched in by seg_reinit
 42657                                  
 42658                                  	;mov	byte [C0h],0EAh
 42659 000078BA C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42660                                  	;mov	byte [C1h],CALL_ENTRY
 42661 000078BF C706C100[E302]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42662                                  
 42663 000078C5 C7068000[DC02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42664 000078CB C7068400[0803]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42665 000078D1 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42666 000078D7 89168A00                	mov	word [addr_int_terminate+2],dx	
 42667 000078DB C7069400[2D05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42668 000078E1 C7069800[B405]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42669 000078E7 C7069C00[B261]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42670                                  
 42671 000078ED 16                      	push	ss
 42672 000078EE 1F                      	pop	ds
 42673                                  	
 42674                                  	; 24/05/2019
 42675                                  	;push	ss
 42676                                  	;pop	es
 42677                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42678                                  	; 17/12/2022
 42679                                  	;push	ss
 42680                                  	;pop	es
 42681                                  
 42682 000078EF 52                      	push	dx			; remember address of arena
 42683                                  
 42684 000078F0 42                      	inc	dx			; leave room for arena header
 42685                                  	;mov	[330h],dx
 42686 000078F1 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42687                                  
 42688 000078F5 31FF                    	xor	di,di			; point es:di at end of memory
 42689 000078F7 8EC2                    	mov	es,dx			; ...where psp will be
 42690 000078F9 31C0                    	xor	ax,ax
 42691                                  	;mov	cx,80h			; psp is 128 words
 42692                                  	; 17/12/2022
 42693 000078FB B180                    	mov	cl,128 ; 28/06/2019
 42694                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42695                                  	;mov	cx,128
 42696                                  
 42697 000078FD F3AB                    	rep	stosw			; zero out psp area
 42698 000078FF A1[4603]                        mov     ax,[ENDMEM]
 42699                                  	
 42700                                  	; 17/12/2022
 42701                                  	; cx = 0
 42702 00007902 E81998                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42703                                  
 42704                                  	; ds, es now point to PSP
 42705                                  
 42706 00007905 16                      	push	ss
 42707 00007906 1F                      	pop	ds
 42708                                  
 42709                                  	;mov	di,24
 42710 00007907 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42711 0000790A 31C0                    	xor	ax,ax
 42712 0000790C AB                      	stosw
 42713 0000790D AA                      	stosb				; 0,1 and 2 are con device
 42714 0000790E B0FF                    	mov	al,0FFh
 42715                                  	;mov	cx,FILPERPROC-3 ; 17
 42716                                  	; 17/12/2022
 42717                                  	; cx = 4
 42718 00007910 B111                    	mov	cl,FILPERPROC-3 ; 17
 42719 00007912 F3AA                    	rep	stosb			; rest are unused
 42720                                  
 42721 00007914 16                      	push	ss
 42722 00007915 07                      	pop	es
 42723                                  					; must be set to print messages
 42724 00007916 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42725                                  
 42726                                  ; after this point the char device functions for con will work for
 42727                                  ; printing messages
 42728                                  
 42729                                  	; 24/04/2019 - Retro DOS v4.0
 42730                                  
 42731                                  ; 12/05/2019
 42732                                  ;
 42733                                  ;write_version_msg:
 42734                                  ;
 42735                                  ;	;if	(not ibm)
 42736                                  ;	;mov	si,offset doscode:header
 42737                                  ;	mov	si,HEADER
 42738                                  ;outmes:
 42739                                  ;	;lods	cs:byte ptr [si]
 42740                                  ;	cs
 42741                                  ;	lodsb
 42742                                  ;	cmp	al,"$"
 42743                                  ;	je	short outdone
 42744                                  ;	call	OUTT
 42745                                  ;	jmp	short outmes
 42746                                  ;outdone:
 42747                                  ;	push	ss			; out stomps on segments
 42748                                  ;	pop	ds
 42749                                  ;	push	ss
 42750                                  ;	pop	es
 42751                                  ;	;endif
 42752                                  
 42753                                  	; at this point es is dosdata
 42754                                  
 42755                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42756                                  	; in sysinittable (ms_data.asm)
 42757                                  
 42758                                  	;mov	si,0D28h
 42759 0000791A BE[280D]                	mov	si,SysInitTable
 42760                                  
 42761                                  	; 17/12/2022
 42762                                  	; ds = es = ss
 42763                                  
 42764                                  	; 17/12/2022
 42765                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42766                                  ;%if 0
 42767                                  	;;mov	[es:si+6],es
 42768                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42769                                  	;;mov	[es:si+2],es
 42770                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42771                                  	
 42772 0000791D 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42773 00007920 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42774                                  
 42775                                  	; buffhead -> dosdata:hashinitvar 
 42776                                  
 42777                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42778 00007923 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42779                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42780                                  	;mov	si,6Dh
 42781 00007927 BE[6D00]                	mov	si,HASHINITVAR
 42782                                  	;mov	[es:BUFFHEAD],si
 42783 0000792A 8936[3800]              	mov	[BUFFHEAD],si
 42784                                  
 42785 0000792E 5A                              pop     dx                      ; restore address of arena
 42786                                  
 42787                                  	;mov	[032Ch+2],dx
 42788 0000792F 8916[2E03]                      mov     [DMAADD+2],dx
 42789                                  
 42790                                  	;mov	[es:arena_head],dx
 42791 00007933 8916[2400]              	mov	[arena_head],dx
 42792                                  
 42793                                  ;%endif
 42794                                  
 42795                                  ; 17/12/2022
 42796                                  %if 0
 42797                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42798                                  	;;;
 42799                                  	;mov	[es:si+6],es
 42800                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42801                                  	;mov	[es:si+2],es
 42802                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42803                                  
 42804                                  	; buffhead -> dosdata:hashinitvar 
 42805                                  
 42806                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42807                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42808                                  	;mov	si,6Dh
 42809                                  	mov	si,HASHINITVAR
 42810                                  	mov	[es:BUFFHEAD],si
 42811                                  
 42812                                          pop     dx                      ; restore address of arena
 42813                                  
 42814                                  	;mov	[032Ch+2],dx
 42815                                          mov     [DMAADD+2],dx
 42816                                  
 42817                                  	mov	[es:arena_head],dx
 42818                                  	;;;
 42819                                  %endif
 42820                                  
 42821 00007937 8EDA                            mov     ds,dx
 42822                                  
 42823                                  	;mov	byte [0],'Z'
 42824 00007939 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42825                                          ;mov	word [1],0
 42826 0000793E C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42827                                  
 42828 00007944 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42829 00007948 29D0                    	sub	ax,dx
 42830 0000794A 48                              dec     ax
 42831 0000794B A30300                          mov     [ARENA.SIZE],ax
 42832                                  
 42833                                  	; point to sft 0
 42834                                  
 42835                                  	;mov	di,offset dosdata:sftabl + sftable
 42836                                  	;mov	di,SFTABL+6
 42837 0000794E BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42838 00007951 B80300                          mov     ax,3
 42839 00007954 AB                              stosw           		; adjust refcount
 42840                                  
 42841                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42842                                  
 42843                                          ;mov	di,offset dosdata:sysinittable
 42844                                  	;mov	di,0D28h
 42845 00007955 BF[280D]                	mov	di,SysInitTable	
 42846                                  
 42847 00007958 42                      	inc	dx			; advance dx from arena to psp
 42848 00007959 8EDA                    	mov	ds,dx			; point ds to psp
 42849                                  
 42850                                  					; pass the address os seg_reinit 
 42851                                  					; in dx
 42852 0000795B BA[C979]                	mov	dx,seg_reinit
 42853 0000795E B9[ED73]                	mov	cx,exepatch_start
 42854 00007961 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42855                                  
 42856 00007965 B8[A476]                	mov	ax,SYSBUF
 42857 00007968 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42858                                  	
 42859 0000796B 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42860 00007970 368E16[8605]                    mov     ss,[ss:USER_SS]
 42861                                  
 42862 00007975 CB                              retf
 42863                                  
 42864                                  ;
 42865                                  ; END OF DOSINIT
 42866                                  ;
 42867                                  ;--------------------------------------------------------------------------
 42868                                  
 42869                                  CHARINIT:
 42870                                  	; 24/04/2019 - Retro DOS v4.0
 42871                                  	; 07/07/2018 - Retro DOS v3.0
 42872                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42873 00007976 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42874                                  	;mov	byte [ss:035Bh],0
 42875 0000797C 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42876                                  	;mov	byte [ss:035Ch],0
 42877 00007982 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42878                                  	;mov	word [ss:035BD],0
 42879 00007988 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42880 0000798F 06                              PUSH	ES
 42881 00007990 53                              PUSH	BX
 42882 00007991 50                              PUSH	AX
 42883 00007992 BB[5A03]                        MOV	BX,DEVCALL
 42884                                          ;PUSH	CS
 42885 00007995 16                      	PUSH	SS ; 30/04/2019
 42886 00007996 07                              POP	ES
 42887 00007997 E8CACC                          CALL	DEVIOCALL2	
 42888 0000799A 58                      	POP	AX
 42889 0000799B 5B                              POP	BX
 42890 0000799C 07                              POP	ES
 42891 0000799D C3                              RETN
 42892                                  
 42893                                  ; 25/04/2019 - Retro DOS v4.0
 42894                                  
 42895                                  ;-----------------------------------------------------------------------------
 42896                                  ;
 42897                                  ;	check_XMM: routine to check presence of XMM driver
 42898                                  ;
 42899                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42900                                  ;
 42901                                  ;	USED:	none
 42902                                  ;
 42903                                  ;-----------------------------------------------------------------------------
 42904                                  
 42905                                  check_XMM: ; proc near
 42906                                  ;
 42907                                  ; determine whether or not an XMM driver is installed
 42908                                  ;
 42909 0000799E 50                      	push	ax
 42910                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42911 0000799F B80043                  	mov	ax,4300h
 42912 000079A2 CD2F                    	int	2Fh
 42913                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42914                                  		; Return: AL = 80h XMS driver installed
 42915                                  		; AL <> 80h no driver
 42916 000079A4 3C80                    	cmp	al,80h			; Q: installed
 42917 000079A6 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42918                                  ;
 42919                                  ; get the XMM control functions entry point, save it, we
 42920                                  ; need to call it later.
 42921                                  ;
 42922 000079A8 53                      	push	bx
 42923 000079A9 52                      	push	dx
 42924 000079AA 1E                      	push	ds
 42925 000079AB 06                      	push	es
 42926                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42927 000079AC B81043                  	mov	ax,4310h
 42928 000079AF CD2F                    	int	2Fh
 42929                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42930                                  		; Return: ES:BX -> driver entry point
 42931                                  
 42932 000079B1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42933                                  
 42934 000079B6 891E[4911]              	mov	[XMMcontrol],bx
 42935 000079BA 8C06[4B11]              	mov	[XMMcontrol+2],es
 42936                                  cXMMexit:
 42937 000079BE F8                      	clc
 42938 000079BF 07                      	pop	es
 42939 000079C0 1F                      	pop	ds
 42940 000079C1 5A                      	pop	dx
 42941 000079C2 5B                      	pop	bx
 42942 000079C3 58                      	pop	ax
 42943 000079C4 C3                      	retn				; done
 42944                                  ;
 42945                                  ; set carry if XMM driver not present
 42946                                  ;
 42947                                  cXMM_no_driver:
 42948 000079C5 F9                      	stc
 42949 000079C6 58                      	pop	ax
 42950 000079C7 C3                      	retn
 42951                                  
 42952                                  ;-----------------------------------------------------------------------------
 42953                                  ;
 42954                                  ; Procedure Name : seg_reinit
 42955                                  ;
 42956                                  ; Inputs	 : ES has final dos code location
 42957                                  ;		   AX = 0 / 1
 42958                                  ;
 42959                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42960                                  ;		   if AX =0
 42961                                  ;		      if first entry
 42962                                  ;			 patch segment & offset of vectors with stub
 42963                                  ;			 and stub with segment in ES
 42964                                  ;		      else
 42965                                  ;			 patch stub with segment in ES
 42966                                  ;
 42967                                  ;		   else if AX = 1
 42968                                  ;			patch segment of vectors with segment in ES	
 42969                                  ;
 42970                                  ; NOTE		 : This routine can be called at most twice!
 42971                                  ;
 42972                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42973                                  ;-----------------------------------------------------------------------------
 42974                                  
 42975 000079C8 00                      num_entry: db	0		; keeps track of the # of times this routine
 42976                                  				; has been called. (0 or 1)
 42977                                  
 42978                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42979                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42980                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42981                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42982                                  
 42983                                  seg_reinit:	; proc	far
 42984 000079C9 1E                      	push	ds
 42985                                  
 42986 000079CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42987                                  
 42988 000079CF E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 42989                                  					; other tables with seg in ES.
 42990                                  	; 17/12/2022
 42991                                  	; cx = 0
 42992 000079D2 39C8                    	cmp	ax,cx ; 0
 42993                                  	;cmp	ax,0
 42994 000079D4 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42995                                  
 42996                                  	; 17/12/2022
 42997 000079D6 2E380E[C879]            	cmp	[cs:num_entry],cl ; 0
 42998                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42999 000079DB 7508                    	jne	short second_entry	; N: just patch the stub with 
 43000                                  					;    segment in ES
 43001                                  					; Y: patch the vectors with stub 
 43002 000079DD 8CD8                    	mov	ax,ds
 43003 000079DF E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 43004 000079E2 E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 43005                                  					; with those in the stub.
 43006                                  	; 17/12/2022
 43007                                  	; cx = 0
 43008                                  second_entry:
 43009 000079E5 8CC0                    	mov	ax,es			; patch the stub with segment in es
 43010                                  
 43011                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 43012                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 43013 000079E7 BF[4810]                	mov	di,DOSINTTABLE
 43014                                  	; 17/12/2022
 43015                                  	; cx = 0
 43016                                  	;mov	cx,9
 43017 000079EA B109                    	mov	cl,9
 43018 000079EC 1E                      	push	ds			
 43019 000079ED 07                      	pop	es			; es:di -> DOSINTTABLE
 43020                                  
 43021                                  dosinttabloop:
 43022                                  	;add	di,2
 43023                                  	; 19/06/2023
 43024 000079EE 47                      	inc	di
 43025 000079EF 47                      	inc	di
 43026 000079F0 AB                      	stosw
 43027 000079F1 E2FB                    	loop	dosinttabloop	
 43028                                  
 43029                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 43030                                  ; use the HMA, so we don't want to check CS
 43031                                  
 43032                                  ;ifndef ROMDOS
 43033 000079F3 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 43034 000079F6 7220                    	jb	short sr_done		; N: done
 43035                                  ;endif
 43036 000079F8 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 43037 000079FB 721B                    	jc	short sr_done		; failed to set up XMS do not do
 43038                                  					; A20 toggling in the stub.
 43039                                  	; 17/12/2022
 43040                                  	; cx = 0
 43041 000079FD E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 43042                                  ; M021-
 43043                                  	;mov	byte [1211h],1
 43044 00007A00 C606[F211]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 43045                                  				
 43046                                  					; set pointer to the routine that 
 43047                                  					; patches buggy exepacked code.
 43048                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 43049 00007A05 C706[F311][3D75]        	mov	word [FixExePatch],ExePatch
 43050                                  					; M068: set pointer to the routine 
 43051                                  					; M068: that detects copy protected
 43052                                  					; M068: apps
 43053                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 43054 00007A0B C706[6100][6E76]        	mov	word [ChkCopyProt],IsCopyProt
 43055                                  
 43056                                  	; 19/09/2023
 43057 00007A11 EB05                    	jmp	short sr_done
 43058                                  
 43059                                  ; 28/12/2022 - Retro DOS v4.1
 43060                                  %if 0
 43061                                  ;----------------------------------------------------------------------------
 43062                                  
 43063                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 43064                                  
 43065                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43066                                  ;
 43067                                  ;; M020 - begin
 43068                                  ;
 43069                                  ;	call	WhatCPUType
 43070                                  ;	cmp	al,1
 43071                                  ;	jne	short sr_done 		; we need Rational Patch only
 43072                                  ;					;  on 286 systems
 43073                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 43074                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43075                                  ;
 43076                                  ;; M020 - end
 43077                                  ;
 43078                                  ;	jmp	short sr_done
 43079                                  ;
 43080                                  ;patch_vec_seg:				; patch vectors with segment in es
 43081                                  ;	mov	ax,es
 43082                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 43083                                  ;					; NOTE we don't have to patch the 
 43084                                  ;					; offsets as they have been already
 43085                                  ;					; set to the doscode offsets at
 43086                                  ;					; DOSINIT.
 43087                                  ;sr_done:
 43088                                  ;	mov	byte [cs:num_entry],1
 43089                                  ;	pop	ds
 43090                                  ;	retf	; ! far return !
 43091                                  
 43092                                  ;----------------------------------------------------------------------------
 43093                                  ;
 43094                                  ; Procedure Name : WhatCPUType
 43095                                  ;
 43096                                  ; Inputs	 : none
 43097                                  ;
 43098                                  ; Outputs	 : AL = 0 if CPU <  286
 43099                                  ;		      = 1 if CPU == 286
 43100                                  ;		      = 2 if CPU >= 386
 43101                                  ;
 43102                                  ; Regs. Mod.	 : AX
 43103                                  ;
 43104                                  ;----------------------------------------------------------------------------
 43105                                  
 43106                                  WhatCPUType:
 43107                                  	; 25/04/2019 - Retro DOS v4.0
 43108                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 43109                                  
 43110                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 43111                                  
 43112                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 43113                                  ; 	it is called from both CODE and SYSINITSEG.
 43114                                  ;
 43115                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 43116                                  ;  Returns: AX = 0 if 8086 or 8088
 43117                                  ;              = 1 if 80286
 43118                                  ;              = 2 if 80386
 43119                                  
 43120                                  	; 04/11/2022
 43121                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 43122                                  
 43123                                  Get_CPU_Type:	;macro
 43124                                  	pushf
 43125                                  	push	bx			; preserve bx
 43126                                  	xor	bx,bx			; init bx to zero
 43127                                  
 43128                                  	xor	ax,ax			; 0000 into AX
 43129                                  	push	ax			; put it on the stack...
 43130                                  	popf				; ...then shove it into the flags
 43131                                  	pushf				; get it back out of the flags...
 43132                                  	pop	ax			; ...and into ax
 43133                                  	and	ax,0F000h		; mask off high four bits
 43134                                  	cmp	ax,0F000h		; was it all 1's?
 43135                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 43136                                  
 43137                                  	mov	ax,0F000h		; now try to set the high four bits..
 43138                                  	push	ax
 43139                                  	popf
 43140                                  	pushf
 43141                                  	pop	ax			; ...and see what happens
 43142                                  	and	ax,0F000h		; any high bits set ?
 43143                                  	jz	short cpu_286		; nay; it's an 80286
 43144                                  
 43145                                  cpu_386:				; bx starts as zero
 43146                                  	inc	bx			; inc twice if 386
 43147                                  cpu_286:				; just inc once if 286
 43148                                  	inc	bx
 43149                                  cpu_8086:				; don't inc at all if 086
 43150                                  	mov	ax,bx			; put CPU type value in ax
 43151                                  	pop	bx			; restore original bx
 43152                                  	popf
 43153                                  	
 43154                                  	;endm
 43155                                  
 43156                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 43157                                  	retn	; 19/09/2023
 43158                                  
 43159                                  ; 19/09/2023
 43160                                  ;	; 04/11/2022
 43161                                  ;	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 43162                                  ;	cmp	al,1
 43163                                  ;	jne	short sr_done 		; we need Rational Patch only
 43164                                  ;					;  on 286 systems
 43165                                  ;	mov	word [RationalPatchPtr],RationalPatch
 43166                                  
 43167                                  ;----------------------------------------------------------------------------
 43168                                  %endif	; 28/12/2022
 43169                                  
 43170                                  	; 19/09/2023
 43171                                  	;jmp	short sr_done
 43172                                  
 43173                                  patch_vec_seg:				; patch vectors with segment in es
 43174 00007A13 8CC0                    	mov	ax,es
 43175 00007A15 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 43176                                  					; NOTE we don't have to patch the 
 43177                                  					; offsets as they have been already
 43178                                  					; set to the doscode offsets at
 43179                                  					; DOSINIT.
 43180                                  sr_done:
 43181 00007A18 2EC606[C879]01          	mov	byte [cs:num_entry],1
 43182 00007A1E 1F                      	pop	ds
 43183 00007A1F CB                      	retf	; ! far return !
 43184                                  
 43185                                  ;----------------------------------------------------------------------------
 43186                                  ;
 43187                                  ; Procedure Name : patch_vec_segments
 43188                                  ;
 43189                                  ; Inputs	 : ax -> has segment address to patch in
 43190                                  ;		   ds -> DOSDATA
 43191                                  ;
 43192                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 43193                                  ;			
 43194                                  ;			0,20-28,3a-3f
 43195                                  ;
 43196                                  ; Regs. Mod.	 : DI,CX,DX,AX
 43197                                  ;
 43198                                  ;----------------------------------------------------------------------------
 43199                                  
 43200                                  patch_vec_segments:
 43201                                  
 43202 00007A20 06                      	push	es
 43203                                  
 43204 00007A21 31C9                    	xor	cx,cx ; 0
 43205 00007A23 8EC1                    	mov	es,cx
 43206                                  
 43207                                  	;mov	di,82h
 43208 00007A25 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 43209                                  
 43210 00007A28 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 43211                                  
 43212                                  					; set vectors 20 & 21
 43213                                  	; 04/11/2022
 43214                                  	;mov	cx,2
 43215                                  	; 17/12/2022
 43216                                  	;mov	cl,2
 43217                                  ps_set1:
 43218 00007A2C AB                      	stosw	; int 20h segment
 43219                                  	;add	di,2
 43220                                  	; 17/12/2022
 43221 00007A2D 47                      	inc	di
 43222 00007A2E 47                      	inc	di
 43223                                  	;loop	ps_set1
 43224                                  
 43225                                  	; 17/12/2022
 43226 00007A2F AB                      	stosw	; int 21h segment
 43227                                  	;inc	di
 43228                                  	;inc	di
 43229                                  
 43230                                  	;add	di,4			; skip int 22h vector
 43231 00007A30 83C706                  	add	di,6 ; *
 43232                                  
 43233 00007A33 AB                      	stosw				; set int 23h
 43234 00007A34 83C706                  	add	di,6			; skip int 24h
 43235                                  
 43236                                  					; set vectors 25-28 and 2a-3f 
 43237                                  	; 04/11/2022
 43238                                  	;mov	cx,4			; set 4 segments
 43239                                  	; 17/12/2022
 43240 00007A37 B104                    	mov	cl,4
 43241                                  ps_set2:
 43242 00007A39 AB                      	stosw				
 43243                                  	;add	di,2
 43244                                  	; 17/12/2022
 43245 00007A3A 47                      	inc	di
 43246 00007A3B 47                      	inc	di
 43247 00007A3C E2FB                    	loop	ps_set2
 43248                                  
 43249 00007A3E 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 43250                                  					;   already be set.
 43251                                  	; 04/11/2022
 43252                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 43253                                  	; 17/12/2022
 43254 00007A41 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 43255                                  ps_set3:
 43256 00007A43 AB                      	stosw
 43257                                  	;add	di,2
 43258                                  	; 17/12/2022
 43259 00007A44 47                      	inc	di
 43260 00007A45 47                      	inc	di
 43261 00007A46 E2FB                    	loop	ps_set3
 43262                                  
 43263                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43264                                  ; below. So skip it.
 43265                                  
 43266 00007A48 83C708                  	add	di,8			; skip vector 30h & 31h 
 43267                                  	
 43268                                  	; 04/11/2022
 43269                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 43270                                  	; 17/12/2022
 43271 00007A4B B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 43272                                  ps_set4:
 43273 00007A4D AB                      	stosw
 43274                                  	;add	di,2
 43275                                  	; 17/12/2022
 43276 00007A4E 47                      	inc	di
 43277 00007A4F 47                      	inc	di
 43278 00007A50 E2FB                    	loop	ps_set4
 43279                                  
 43280                                  ; set offset of int2f
 43281                                  
 43282                                  ;if installed
 43283                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 43284                                  ;endif
 43285                                  	;mov	[es:0C3h],ax
 43286 00007A52 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 43287                                  	; 17/12/2022
 43288                                  	; cx = 0
 43289 00007A56 07                      	pop	es
 43290 00007A57 C3                      	retn
 43291                                  
 43292                                  ;---------------------------------------------------------------------------
 43293                                  ;
 43294                                  ; Procedure Name : patch_misc_segments
 43295                                  ;
 43296                                  ; Inputs	 : es = segment to patch in
 43297                                  ;		   ds = dosdata
 43298                                  ;
 43299                                  ; outputs	 : patches in the sharer and other tables in the dos
 43300                                  ;		   with right dos code segment in es
 43301                                  ;
 43302                                  ; Regs Mod	 : DI,SI,CX
 43303                                  ;
 43304                                  ;---------------------------------------------------------------------------
 43305                                  
 43306                                  patch_misc_segments:
 43307                                  
 43308 00007A58 53                      	push	bx
 43309 00007A59 06                      	push	es
 43310 00007A5A 50                      	push	ax
 43311                                  
 43312 00007A5B 8CC0                    	mov	ax,es			; ax - > DOS segment
 43313                                  	
 43314 00007A5D 1E                      	push	ds
 43315 00007A5E 07                      	pop	es			; es -> DOSDATA
 43316                                  	
 43317                                  ; initialize the jump table for the sharer...
 43318                                  
 43319                                  	;mov	di,offset dosdata:jshare
 43320                                  	;mov	di,90h
 43321 00007A5F BF[9000]                	mov	di,JShare
 43322                                  	;mov	bx,[0AAAh]
 43323 00007A62 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 43324                                  					; table was patched during the first
 43325                                  					; call to this routine
 43326 00007A66 B90F00                  	mov	cx,15
 43327                                  jumptabloop:
 43328                                  	;add	di,2			; skip offset
 43329                                  	; 17/12/2022
 43330 00007A69 47                      	inc	di
 43331 00007A6A 47                      	inc	di
 43332 00007A6B 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 43333 00007A6E 7405                    	je	short share_patch	; Y: patch in sharer table
 43334                                  					; N: 
 43335 00007A70 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 43336 00007A73 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 43337                                  share_patch:
 43338 00007A75 AB                      	stosw				; drop in segment
 43339                                  no_share_patch:
 43340 00007A76 E2F1                    	loop	jumptabloop
 43341                                  					; BUGBUG patching the country info 
 43342                                  					; with dosdata can be done inline
 43343                                  					; in dosinit.
 43344                                  					; for dos 3.3 country info
 43345                                  					; table address
 43346                                  
 43347                                  	;mov	si,offset dosdata:country_cdpg
 43348                                  	;mov	si,122Ah   
 43349 00007A78 BE[0012]                	mov	si,COUNTRY_CDPG
 43350                                  					; initialize double word
 43351                                  					; pointers with dosdata in ds
 43352                                  	;mov	[si+4Fh],ds
 43353                                  	;mov	[si+54h],ds
 43354                                  	;mov	[si+59h],ds
 43355                                  	;mov	[si+5Eh],ds
 43356                                  	;mov	[si+80h],ds
 43357                                  	;mov	[si+63h],ds
 43358 00007A7B 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 43359 00007A7E 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 43360 00007A81 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 43361 00007A84 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 43362 00007A87 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 43363 00007A8B 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 43364                                  
 43365                                  					; fastopen routines are in doscode
 43366                                  					; so patch with doscode seg in ax
 43367                                  
 43368                                  	;mov	si,offset dosdata:fastopentable
 43369                                  	;mov	si,0D30h
 43370 00007A8E BE[300D]                	mov	si,FastOpenTable
 43371                                  
 43372                                  	; 17/12/2022
 43373                                  	; bx = [TEMP_DOSLOC]
 43374 00007A91 83FBFF                  	cmp	bx,-1
 43375                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 43376 00007A94 7405                    	je	short fast_patch	; Y: patch segment
 43377                                  	;mov	cx,[TEMP_DOSLOC]
 43378                                  					; Q: has fastopen patched in it's
 43379                                  					;    segment
 43380                                  	; 17/12/2022
 43381 00007A96 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 43382                                  	;;cmp	cx,[si+4]
 43383                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 43384 00007A99 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 43385                                  
 43386                                  fast_patch:
 43387                                  	;mov	[si+4],ax
 43388 00007A9B 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 43389                                  no_fast_patch:
 43390                                  	; 17/12/2022
 43391                                  	; cx = 0
 43392 00007A9E 58                      	pop	ax
 43393 00007A9F 07                      	pop	es
 43394 00007AA0 5B                      	pop	bx
 43395                                  
 43396 00007AA1 C3                      	retn
 43397                                  
 43398                                  ;--------------------------------------------------------------------------
 43399                                  ;
 43400                                  ; Procedure Name : patch_offset
 43401                                  ; 
 43402                                  ; Inputs	 : NONE
 43403                                  ;
 43404                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 43405                                  ;		   0,20-28,3a-3f, and 30,31
 43406                                  ;
 43407                                  ;
 43408                                  ; Regs. Mod	 : AX,DI,CX
 43409                                  ;--------------------------------------------------------------------------
 43410                                  
 43411                                  patch_offset:
 43412 00007AA2 06                      	push	es		; preserve es
 43413                                  
 43414 00007AA3 31C0                    	xor	ax,ax
 43415 00007AA5 8EC0                    	mov	es,ax
 43416                                  				; set default divide trap address
 43417                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 43418                                  	;mov	word [es:0],108Ah
 43419 00007AA7 26C7060000[7010]        	mov	word [es:0],ldivov
 43420                                  
 43421                                  	;mov	di,80h
 43422 00007AAE BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 43423                                  	;mov	ax,offset dosdata:lirett
 43424                                  	;mov	ax,10DAh
 43425 00007AB1 B8[C010]                	mov	ax,lirett
 43426                                  				; set vectors 20 & 21 to point to iret.
 43427                                  	; 17/12/2022
 43428                                  	; cx = 0
 43429                                  
 43430                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 43431                                  po_iset1:
 43432 00007AB4 AB                      	stosw	; int 20h offset
 43433                                  	;add	di,2 ; *
 43434                                  	;loop	po_iset1
 43435                                  	; 17/12/2022
 43436 00007AB5 47                      	inc	di
 43437 00007AB6 47                      	inc	di
 43438 00007AB7 AB                      	stosw	; int 21h offset
 43439                                  
 43440                                  	;add	di,4		; skip vector 22h
 43441                                  	; 17/12/2022
 43442 00007AB8 83C706                  	add	di,6 ; *	
 43443                                  
 43444 00007ABB AB                      	stosw			; set offset of 23h
 43445                                  	;add	di,6		; skip 24h
 43446                                  	; 19/09/2023
 43447 00007ABC 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 43448                                  
 43449                                  				; set vectors 25-28 and 2a-3f to iret.
 43450                                  	; 04/11/2022
 43451                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 43452                                  	; 19/09/2023
 43453                                  	; 17/12/2022
 43454                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 43455                                  po_iset2:
 43456 00007ABF AB                      	stosw		; set offset for int 28h ; 19/09/2023
 43457                                  	;add	di,2
 43458                                  	; 19/09/2023
 43459                                  	; 17/12/2022
 43460                                  	;inc	di
 43461                                  	;inc	di
 43462                                  	; 19/09/2023
 43463                                  	;loop	po_iset2
 43464                                  
 43465                                  	;add	di,4		; skip vector 29h
 43466                                  	; 19/09/2023
 43467 00007AC0 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 43468                                  
 43469                                  	; 04/11/2022
 43470                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 43471                                  	; 17/12/2022
 43472                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 43473 00007AC3 B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 43474                                  po_iset3:
 43475 00007AC5 AB                      	stosw
 43476                                  	;add	di,2
 43477                                  	; 17/12/2022
 43478 00007AC6 47                      	inc	di
 43479 00007AC7 47                      	inc	di
 43480 00007AC8 E2FB                    	loop	po_iset3
 43481                                  
 43482                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 43483                                  ; below. So skip it.
 43484                                  
 43485                                  	;add	di,8		; skip vector 30h & 31h 
 43486                                  	; 17/12/2022
 43487 00007ACA 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 43488                                  
 43489                                  	; 04/11/2022
 43490                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 43491                                  				;   sets offsets for ints 32h-3fh
 43492                                  	; 17/12/2022
 43493 00007ACD B10E                    	mov	cl,14 ; 26/06/2019
 43494                                  po_iset4:
 43495 00007ACF AB                      	stosw
 43496                                  	;add	di,2
 43497                                  	; 17/12/2022
 43498 00007AD0 47                      	inc	di
 43499 00007AD1 47                      	inc	di
 43500 00007AD2 E2FB                    	loop	po_iset4
 43501                                  
 43502                                  ;if installed
 43503                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 43504                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 43505 00007AD4 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 43506                                  ;endif
 43507                                  
 43508                                  ; set up entry point call at vectors 30-31h
 43509                                  	;mov	byte [es:0C0h],0EAh
 43510 00007ADB 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 43511                                  	;mov	word [es:0C1h],10D0h
 43512                                  
 43513 00007AE1 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 43514                                  
 43515                                  							; 19/09/2023
 43516                                  	;mov	word [es:80h],1094h
 43517 00007AE8 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 43518                                  	;mov	word [es:84h],109Eh
 43519 00007AEF 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 43520                                  	;mov	word [es:94h],10A8h
 43521 00007AF6 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 43522                                  	;mov	word [es:98h],10B2h
 43523 00007AFD 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 43524                                  	;mov	word [es:9Ch],10BCh
 43525 00007B04 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 43526                                  
 43527                                  	; 17/12/2022
 43528                                  	; CX = 0
 43529 00007B0B 07                      	pop	es		; restore es
 43530 00007B0C C3                      	retn
 43531                                  
 43532                                  ;--------------------------------------------------------------------------
 43533                                  ;
 43534                                  ; 	Procedure Name	:	patch_in_nops
 43535                                  ;
 43536                                  ; 	Entry		: 	ES -> DOSDATA
 43537                                  ;
 43538                                  ;	Regs Mod	: 	cx, di
 43539                                  ;
 43540                                  ;	Description:
 43541                                  ;		This routine patches in 2 nops at the offsets specified in 
 43542                                  ;	patch_table. This basically enables the low mem stub to start 
 43543                                  ;	making XMS calls.
 43544                                  ;
 43545                                  ;--------------------------------------------------------------------------
 43546                                  
 43547                                  	; 04/11/2022
 43548                                  	; (MSDOS 5.0 MSDOS.SYS)
 43549                                  	; DOSCODE:0BC50h
 43550                                  
 43551                                  patch_table:	; label	byte
 43552                                  	;dw	offset dosdata:i0patch
 43553                                  	;dw	offset dosdata:i20patch
 43554                                  	;dw	offset dosdata:i21patch
 43555                                  	;dw	offset dosdata:i25patch
 43556                                  	;dw	offset dosdata:i26patch
 43557                                  	;dw	offset dosdata:i27patch
 43558                                  	;dw	offset dosdata:i2fpatch
 43559                                  	;dw	offset dosdata:cpmpatch
 43560 00007B0D [7010]                  	dw	i0patch
 43561 00007B0F [7A10]                  	dw	i20patch
 43562 00007B11 [8410]                  	dw	i21patch
 43563 00007B13 [8E10]                  	dw	i25patch
 43564 00007B15 [9810]                  	dw	i26patch
 43565 00007B17 [A210]                  	dw	i27patch
 43566 00007B19 [AC10]                  	dw	i2fpatch
 43567 00007B1B [B610]                  	dw	cpmpatch
 43568                                  
 43569                                  patch_table_size equ ($-patch_table)/2
 43570                                  
 43571                                  patch_in_nops:
 43572 00007B1D 50                      	push	ax
 43573 00007B1E 56                      	push	si
 43574 00007B1F BE[0D7B]                	mov	si,patch_table
 43575 00007B22 B89090                  	mov	ax,9090h ; nop, nop
 43576                                  	; 17/12/2022
 43577                                  	; cx = 0
 43578                                  	;mov	cx,8
 43579                                  	;mov	cx,patch_table_size ; 8
 43580 00007B25 B108                    	mov	cl,patch_table_size ; 8
 43581                                  pin_loop:
 43582 00007B27 2E8B3C                  	mov	di,[cs:si]
 43583 00007B2A AB                      	stosw
 43584                                  	;add	si,2
 43585                                  	; 17/12/2022
 43586 00007B2B 46                      	inc	si
 43587 00007B2C 46                      	inc	si
 43588 00007B2D E2F8                    	loop	pin_loop
 43589 00007B2F 5E                      	pop	si
 43590 00007B30 58                      	pop	ax
 43591 00007B31 C3                      	retn
 43592                                  
 43593                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43594                                  ; ---------------------------------------------------------------------------
 43595                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43596                                  ; ---------------------------------------------------------------------------
 43597                                  
 43598                                  	; 05/12/2022 - temporary ; (paragraph alinment)
 43599                                  DOSCODE_END:
 43600                                  	;times	9 db 0	; db 9 dup(0)
 43601                                  	; 18/12/2022
 43602 00007B32 0000                    	dw	0  ;	times 2 db 0
 43603                                  
 43604                                  ;align 16
 43605                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43606                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43607                                  
 43608                                  ; ---------------------------------------------------------------------------
 43609                                  
 43610                                  
 43611                                  ;memstrt label word
 43612                                  ; ---------------------------------------------------------------------------
 43613                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43614                                  ; ---------------------------------------------------------------------------
 43615                                  
 43616                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43617                                  
 43618                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43619                                  ; the dos initialization segment
 43620                                  
 43621                                  ;ifndef ROMDOS
 43622                                  
 43623                                  ;doscode ends
 43624                                  
 43625                                  ;else
 43626                                  
 43627                                  ;;dosinitseg ends
 43628                                  
 43629                                  ;endif ; ROMDOS
 43630                                  
 43631                                  ;============================================================================
 43632                                  
 43633                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43634                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43635                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43636                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43637                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43638                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43639                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43640                                  
 43641                                  ;; burasý doscode sonu
 43642                                  
 43643                                  ;============================================================================
 43644                                  ; DOSDATA
 43645                                  ;============================================================================
 43646                                  ; 29/04/2019 - Retro DOS 4.0
 43647                                  
 43648                                  ;[BITS 16]
 43649                                  
 43650                                  ;[ORG 0]
 43651                                  
 43652                                  ; 25/04/2019 - Retro DOS v4.0
 43653                                  
 43654                                  ;============================================================================
 43655                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43656                                  ;============================================================================
 43657                                  
 43658                                  ;align 16
 43659                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43660                                  	; (4970 bytes for MSDOS 6.21)
 43661                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43662                                  
 43663                                  ;============================================================================
 43664                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43665                                  ;============================================================================
 43666                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43667                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43668                                  ; 16/07/2018 - Retro DOS 3.0	
 43669                                  
 43670                                  ;Break <Initialized data and data used at DOS initialization>
 43671                                  ;----------------------------------------------------------------------------
 43672                                  
 43673                                  ; We need to identify the parts of the data area that are relevant to tasks
 43674                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43675                                  ; data will be gathered with the system code. The process data under 2.x will
 43676                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43677                                  ;
 43678                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43679                                  ; describing that data item.
 43680                                  
 43681                                  ;DOSDATA SEGMENT
 43682                                  
 43683                                  ; 04/11/2022
 43684                                  ;[ORG 0]
 43685                                  
 43686                                  ; ----------------------------------------------------------------------------
 43687                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43688                                  ; ----------------------------------------------------------------------------
 43689                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43690                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43691                                  ; ----------------------------------------------------------------------------
 43692                                  
 43693                                  ; 04/11/2022
 43694                                  
 43695                                  ;DOSDATA:0000h
 43696                                  
 43697 00007B34 90<rep Ch>              align 16
 43698                                  
 43699                                  ; ----------------------------------------------------------------------------
 43700                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43701                                  ; ----------------------------------------------------------------------------
 43702                                  
 43703                                  segment .data  vstart=0 ; 06/12/2022
 43704                                  								
 43705                                  ; ============================================================================
 43706                                  
 43707                                  ; 06/12/2022
 43708                                  ;DOSDATASTART equ $
 43709                                  DOSDATASTART:
 43710                                  
 43711                                  
 43712                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43713                                  
 43714                                  	;; 03/11/2022
 43715                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43716                                  
 43717                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43718                                  	;db	4 dup (?)	
 43719 00000000 00<rep 4h>              	times	4 db 0
 43720                                  
 43721                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43722                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43723                                  	;dw	0
 43724                                  
 43725                                  	;EVEN
 43726                                  
 43727                                  ;align 2
 43728                                  
 43729                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43730                                  ; area compatability. This location must be incremented EACH TIME the data
 43731                                  ; area here gets mucked with.
 43732                                  ;
 43733                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43734                                  
 43735                                  MSCT001S:	; LABEL BYTE
 43736                                  	
 43737                                  DataVersion:	
 43738 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43739                                  
 43740                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43741                                  ;hkn; been removed to DOSCODE above
 43742                                  
 43743                                  ;M044
 43744                                  ; First part of save area for saving last para of Window memory
 43745                                  
 43746                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43747 00000006 00<rep 8h>              	times	8 db 0
 43748                                  
 43749                                  	; MSDOS 6.21 DOSDATA:000Eh
 43750                                  MYNUM:			; Offset 000Eh
 43751 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43752                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43753 00000010 0000                    	dw	0
 43754                                  OpenLRU:
 43755 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43756                                  OEM_HANDLER: 		
 43757 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43758                                  
 43759                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43760                                  ;;			way that we leave DOS???? - jgl
 43761                                  
 43762                                  LeaveAddr:
 43763 00000018 [0404]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43764                                  RetryCount:		
 43765 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43766                                  RetryLoop:
 43767 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43768                                  LastBuffer:
 43769 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43770                                  CONTPOS:
 43771 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43772                                  arena_head:
 43773 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43774                                  
 43775                                  ;; 16/07/2018
 43776                                  ;;***************************************************************************
 43777                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43778                                  ;;***************************************************************************
 43779                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43780                                  ;;
 43781                                  ;;	AH = 52h
 43782                                  ;;
 43783                                  ;;	on return:
 43784                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43785                                  ;;		Known "invars" fields follow (varies with DOS version):
 43786                                  ;;
 43787                                  ;;	Offset Size		 Description
 43788                                  ;;
 43789                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43790                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43791                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43792                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43793                                  ;;		      0 indicates no unread input (DOS 3.x)
 43794                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43795                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43796                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43797                                  ;;	  08   dword  pointer to $CLOCK device driver
 43798                                  ;;	  0C   dword  pointer to CON device driver
 43799                                  ;;	  10   byte   number of logical drives in system
 43800                                  ;;	  11   word   maximum bytes/block of any block device
 43801                                  ;;	  13   dword  pointer to DOS cache buffer header
 43802                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43803                                  ;;		      point to the next device in device chain
 43804                                  ;;
 43805                                  ;;***************************************************************************
 43806                                  
 43807                                  ; The following block of data is used by SYSINIT. 
 43808                                  ; Do not change the order or size of this block
 43809                                  
 43810                                  ;SYSINITVAR:
 43811                                  ;----------------------------------------------------------------------------
 43812                                  SYSINITVARS:
 43813                                  DPBHEAD:
 43814 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43815                                  SFT_ADDR:
 43816 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43817                                  BCLOCK:
 43818 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43819                                  BCON:
 43820 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43821                                  MAXSEC:
 43822 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43823                                  BUFFHEAD:
 43824 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43825                                  CDSADDR:
 43826 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43827                                  SFTFCB:
 43828 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43829                                  KEEPCOUNT:
 43830 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43831                                  NUMIO:
 43832 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43833                                  CDSCOUNT:
 43834 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43835                                  
 43836                                  ; A fake header for the NUL device
 43837                                  NULDEV:
 43838 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43839                                  	;dw	8004h
 43840 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43841 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43842 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43843 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43844                                  SPLICES:
 43845 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43846                                  
 43847                                  Special_Entries:
 43848 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43849                                  UU_IFS_DOS_CALL:
 43850 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43851                                  ; 
 43852                                  ; UU_IFS_HEADER:
 43853                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43854                                  
 43855                                  ChkCopyProt:
 43856 00000061 0000                    	dw	0	; M068
 43857                                  A20OFF_PSP:
 43858 00000063 0000                    	dw	0	; M068
 43859                                  BUFFERS_PARM1:
 43860 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43861                                  BUFFERS_PARM2:
 43862 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43863                                  BOOTDRIVE:
 43864 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43865                                  DDMOVE:
 43866 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43867                                  EXT_MEM_SIZE:
 43868 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43869                                  
 43870                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43871                                  ;
 43872                                  ; Replaced by next two declarations
 43873                                  ;
 43874                                  ;UU_BUF_HASH_PTR:
 43875                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43876                                  ;UU_BUF_HASH_COUNT:
 43877                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43878                                  
 43879                                  BufferQueue:
 43880 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43881                                  DirtyBufferCount:
 43882 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43883                                  			; BUGBUG ---- change to byte
 43884                                  SC_CACHE_PTR:
 43885 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43886                                  SC_CACHE_COUNT:
 43887 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43888                                  BuffInHMA:
 43889 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43890                                  LoMemBuff:
 43891 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43892                                  			;  in Low mem when buffs are in HMA
 43893                                  ;
 43894                                  ; All variables which have UU_ as prefix can be reused for other
 43895                                  ; purposes and can be renamed. All these variables were used for
 43896                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43897                                  ; manager ---- MOHANS
 43898                                  ;
 43899                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43900                                  UU_BUF_EMS_FIRST_PAGE:	
 43901 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43902                                  
 43903                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43904                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43905                                  ;	dw	0			
 43906                                  
 43907                                  CL0FATENTRY:
 43908 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43909                                  			; is used in pack/unpack rts.
 43910                                  			; in fat.asm if cluster 0 is specified.
 43911                                  			; SR;
 43912                                  IoStatFail:
 43913 00000083 00                      	db	0	; IoStatFail has been added to 
 43914                                  			; record a fail on an I24 
 43915                                  			; issued from IOFUNC on a status call. 
 43916                                  
 43917                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43918                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43919                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43920                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43921                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43922                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43923                                  ;
 43924                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43925                                  						; state of the 	buffers page.
 43926                                  						; This one byte is retained to 
 43927                                  						; keep the size of this data 
 43928                                  						; block the same.;
 43929                                  ALLOCMSAVE:
 43930 00000084 00                      	db	0	; M063: temp var. used to 
 43931                                  			; M063: save alloc method in
 43932                                  			; M063: msproc.asm
 43933                                  A20OFF_COUNT:
 43934 00000085 00                      	db	0	; M068: indiactes the # of 
 43935                                  			; M068: int 21 calls for 
 43936                                  			; M068: which A20 is off
 43937                                  DOS_FLAG:
 43938 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43939                                  			; definitions
 43940                                  UNPACK_OFFSET:
 43941 00000087 0000                    	dw	0	; saves pointer to the start
 43942                                  			; of unpack code in exepatch.
 43943                                  			; asm.
 43944                                  UMBFLAG:
 43945 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43946                                  			; M003: link state of the UMBs
 43947                                  			; M003: whether linked or not 
 43948                                  			; M003: to the DOS arena chain
 43949                                  SAVE_AX:
 43950 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43951                                  			; M000: in msproc.asm
 43952                                  UMB_HEAD:
 43953 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43954                                  			; M000: the first umb arena by 
 43955                                  			; M000: BIOS sysinit.
 43956                                  START_ARENA:
 43957 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43958                                  			; M000: from which DOS will 
 43959                                  			; M000: start its scan for alloc.
 43960                                  
 43961                                  ; End of SYSINITVar block
 43962                                  ;----------------------------------------------------------------------------
 43963                                  
 43964                                  ; 25/04/2019 - Retro DOS v4.0
 43965                                  
 43966                                  ; 16/07/2018
 43967                                  ; MSDOS 3.3 (& MDOS 6.0)
 43968                                  
 43969                                  ;
 43970                                  ; Sharer jump table
 43971                                  ;
 43972                                  
 43973                                  ;PUBLIC	JShare
 43974                                  	;EVEN
 43975                                  
 43976                                  ;JShare	LABEL	DWORD
 43977                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43978                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43979                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43980                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43981                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43982                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43983                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43984                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43985                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43986                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43987                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43988                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43989                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43990                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43991                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43992                                  
 43993                                  align 2
 43994                                  
 43995                                  JShare:
 43996 00000090 [FD06]0000              		DW	BadCall,0
 43997 00000094 [0107]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43998 00000098 [0107]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43999 0000009C [FD06]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 44000 000000A0 [FD06]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 44001 000000A4 [FD06]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 44002 000000A8 [FD06]0000              set_block:	DW	BadCall,0  ; 6   set_block
 44003 000000AC [FD06]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 44004 000000B0 [0107]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 44005 000000B4 [FD06]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 44006 000000B8 [FD06]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 44007 000000BC [FD06]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 44008 000000C0 [0107]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 44009 000000C4 [FD06]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 44010 000000C8 [FD06]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 44011                                  
 44012                                  
 44013                                  ;============================================================================
 44014                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 44015                                  ;============================================================================
 44016                                  ; 25/04/2019 - Retro DOS 4.0 
 44017                                  ; 16/07/2018 - Retro DOS 3.0	
 44018                                  
 44019                                  ;Break <Initialized data and data used at DOS initialization>
 44020                                  ;----------------------------------------------------------------------------
 44021                                  
 44022                                  ; We need to identify the parts of the data area that are relevant to tasks
 44023                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 44024                                  ; data will be gathered with the system code.  The process data under 2.x will
 44025                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44026                                  ;
 44027                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44028                                  ; describing that data item.
 44029                                  
 44030                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 44031                                  
 44032                                  ;
 44033                                  ; Table of routines for assignable devices
 44034                                  ;
 44035                                  ; MSDOS allows assignment if the following standard devices:
 44036                                  ;   stdin  (usually CON input)
 44037                                  ;   stdout (usually CON output)
 44038                                  ;   auxin  (usually AUX input)
 44039                                  ;   auxout (usually AUX output)
 44040                                  ;   stdlpt (usually PRN output)
 44041                                  ;
 44042                                  ; SPECIAL NOTE:
 44043                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 44044                                  ;   If we're not at end-of-file, then we always say that we have a character.
 44045                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 44046                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 44047                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 44048                                  ;   as EOF).
 44049                                  
 44050                                  ; Default SFTs for boot up
 44051                                  
 44052                                  		;PUBLIC	SFTABL
 44053                                  
 44054                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 44055 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 44056 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 44057 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 44058                                  		;times 295 db 0 ; MSDOS 6.0
 44059 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 44060                                  
 44061                                  ; the next two variables relate to the position of the logical stdout/stdin
 44062                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 44063                                  ; console.
 44064                                  		; DOSDATA:01F9h (MSDOS 6.21)
 44065 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 44066 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 44067                                  					;	   of buffered input call
 44068 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 44069 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 44070                                  		; DOSDATA:02FEh (MSDOS 6.21)
 44071 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 44072 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 44073 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 44074                                  switch_character:
 44075 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 44076 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 44077 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 44078 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 44079 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 44080                                  
 44081                                  ; The following table is a list of addresses that the sharer patches to be
 44082                                  ; PUSH AX to enable the critical sections
 44083                                  
 44084                                  		; DOSDATA:0315h (MSDOS 6.21)
 44085                                  
 44086                                  ;PUBLIC	CritPatch
 44087                                  
 44088                                  CritPatch:	; LABEL WORD
 44089                                  
 44090                                  ;IRP sect,<critDisk,critDevice>
 44091                                  
 44092                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 44093                                  ;
 44094                                  ;SR; Change code patch address to a variable in data segment
 44095                                  ;
 44096                                  ;       dw OFFSET DOSDATA: redir_patch
 44097                                  ;       dw OFFSET DOSDATA: redir_patch
 44098                                  ;
 44099                                  ;;hkn	Short_Addr  E&sect
 44100                                  ;;hkn	Short_Addr  L&sect
 44101                                  ;
 44102                                  ;ELSE
 44103                                  ;	DW	0
 44104                                  ;	DW	0
 44105                                  ;ENDIF
 44106                                  ;ENDM
 44107                                  ;	DW	0
 44108                                  
 44109                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 44110                                   
 44111 00000315 [0C0D]                  	dw 	redir_patch
 44112 00000317 [0C0D]                  	dw 	redir_patch			
 44113 00000319 [0C0D]                  	dw	redir_patch
 44114 0000031B [0C0D]                  	dw 	redir_patch
 44115                                  
 44116 0000031D 0000                    	dw	0
 44117                                  
 44118                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 44119                                  ; Also, IBM server 1.0 requires this also.
 44120                                  
 44121                                  	;EVEN			; Force swap area to start on word boundry
 44122 0000031F 90                      align 2
 44123                                  	;PUBLIC	SWAP_START
 44124                                  SWAP_START:	; LABEL BYTE
 44125 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 44126 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 44127 00000322 FF                      WPERR:		db -1		; Write protect error flag
 44128 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 44129 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 44130                                  
 44131                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 44132 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 44133 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 44134                                  ; end warning
 44135                                   
 44136 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 44137                                  
 44138 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 44139 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 44140 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 44141 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 44142 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 44143 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 44144                                  ;				; F.C. 2/17/86
 44145 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 44146 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 44147                                  ;align 2
 44148                                  SWAP_ALWAYS:	; 05/08/2018
 44149 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 44150                                  				;   extended error type stuff.
 44151                                  				;   NOTE: does not have Correct value on
 44152                                  				;   1-12, OEM, Get/Set CurrentPDB,
 44153                                  				;   GetExtendedError system calls)
 44154 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 44155 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 44156 00000340 0000                    FirstArena:	dw 0		; first free block found
 44157 00000342 0000                    BestArena:	dw 0		; best free block found
 44158 00000344 0000                    LastArena:	dw 0		; last free block found
 44159 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 44160 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 44161 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 44162 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 44163 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 44164 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 44165 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 44166                                  
 44167                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 44168                                  	;EVEN
 44169 0000034F 90                      align 2
 44170                                  		; DOSDATA:0350h (MSDOS 6.21)
 44171 00000350 00                      DAY:		db 0		; Day of month
 44172 00000351 00                      MONTH:		db 0		; Month of year
 44173 00000352 0000                    YEAR:		dw 0		; Year (with century)
 44174 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 44175 00000356 00                      WEEKDAY:	db 0		; Day of week
 44176                                  ; end warning
 44177                                  
 44178 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 44179 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 44180 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 44181                                  
 44182                                  ; Combination of all device call parameters
 44183                                  	;PUBLIC	DEVCALL 	;
 44184                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 44185                                  DEVCALL: ; 08/08/2018
 44186 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 44187 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 44188 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 44189 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 44190 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 44191                                  
 44192                                  	;PUBLIC	CALLUNIT
 44193                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 44194                                  CALLFLSH: ; LABEL   WORD	;
 44195 00000367 00                      CALLMED:	db 0		; media byte
 44196                                  CALLBR:	  ; LABEL   DWORD	;
 44197                                  	;PUBLIC	CALLXAD 	;
 44198                                  CALLXAD:  ; LABEL   DWORD	;
 44199 00000368 00                      CALLRBYT:	db 0		;
 44200                                  	;PUBLIC	CALLVIDM	;
 44201                                  CALLVIDM: ; LABEL   DWORD	;
 44202 00000369 00<rep 3h>              	times 3 db 0	;
 44203                                  	;PUBLIC CallBPB		;
 44204                                  CALLBPB:  ; LABEL   DWORD	;
 44205                                  CALLSCNT:			;
 44206 0000036C 0000                    		dw 0		;
 44207                                  	;PUBLIC	CALLSSEC	;
 44208                                  CALLSSEC: ; LABEL   WORD	;
 44209 0000036E 0000                    		dw 0		;
 44210 00000370 00000000                CALLVIDRW:	dd 0		;
 44211                                  ;MSDOS 6.0
 44212 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 44213 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 44214                                  
 44215                                  ; Same as above for I/O calls	;
 44216                                  				;
 44217                                  	;PUBLIC	IOCall		;
 44218                                  ;IOCALL	SRHEAD	<>		;
 44219                                  IOCALL:	; 07/08/2018
 44220 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 44221 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 44222 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 44223 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 44224 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 44225                                  IOFLSH:	  ; LABEL   WORD	;
 44226                                          ;PUBLIC  IORCHR		;
 44227                                  IORCHR:	  ; LABEL   BYTE	;
 44228 00000389 00                      IOMED:		db 0		;
 44229 0000038A 00000000                IOXAD:		dd 0		;
 44230 0000038E 0000                    IOSCNT:		dw 0		;	
 44231 00000390 0000                    IOSSEC:		dw 0		;
 44232                                  
 44233                                  ; Call struct for DSKSTATCHK	;
 44234 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 44235 00000393 00                      		db 0
 44236 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 44237 00000395 0000                    DSKSTST:	dw 0		;
 44238 00000397 00<rep 8h>              	times 8	db 0		;
 44239 0000039F 00                      DSKCHRET:	db 0		;
 44240                                  
 44241                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 44242                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 44243                                  ;hkn   short_addr  DEVIOBUF	;
 44244                                  	
 44245 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 44246 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 44247 000003A4 0100                    DSKSTCNT:	dw 1		;
 44248 000003A6 0000                    		dw 0		;
 44249                                  
 44250 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 44251                                  
 44252                                  ;MSDOS 6.0
 44253                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 44254 000003A9 00000000                		dd 0		;MS. position
 44255 000003AD 00000000                		dd 0		;MS. length
 44256                                  
 44257                                  ;hkn; the foll. was moved from dosmes.asm.
 44258                                  
 44259                                  	;EVEN
 44260 000003B1 90                      align 2				; needed to maintain offsets
 44261                                  
 44262                                  		; DOSDATA:03B2h (MSDOS 6.21)
 44263                                  USERNUM:
 44264 000003B2 0000                     		dw 0		; 24 bit user number
 44265 000003B4 00                      		db 0
 44266                                  ;IF IBM
 44267                                  ;IF IBMCOPYRIGHT
 44268                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 44269                                  ;ELSE
 44270                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 44271                                  ;ENDIF
 44272                                  ;ELSE
 44273 000003B5 FF                      OEMNUM:		DB 0FFh
 44274                                  ;ENDIF
 44275                                  
 44276                                  ;============================================================================
 44277                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 44278                                  ;============================================================================
 44279                                  ; 25/04/2019 - Retro DOS 4.0
 44280                                  
 44281                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 44282                                  ; ----------------------------------------------------------
 44283                                  ; This data section which was named as uninitialized data
 44284                                  ; (as overlayed by initialization code) but follows 
 44285                                  ; initialized data section from DOSDATA:03B6h address
 44286                                  ; (in otherwords, the method is different than MSDOS 3.3,
 44287                                  ; and there is not overlaying..)
 44288                                  ; **********************************************************
 44289                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 44290                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 44291                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 44292                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 44293                                  ; TIMEBUF is at offset 03B6h.
 44294                                  ; **********************************************************	
 44295                                  
 44296                                  ;Break <Uninitialized data overlayed by initialization code>
 44297                                  ;----------------------------------------------------------------------------
 44298                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 44299                                  ; Init code overlaps with data area below
 44300                                  
 44301                                  ; 	ORG     0
 44302                                  
 44303                                  MSDAT001S:	; label byte
 44304                                  
 44305                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 44306                                  TIMEBUF: ;	times 6 db 0
 44307 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 44308 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 44309                                  
 44310                                  ; The following areas are used as temp buffer in EXEC system call
 44311                                  
 44312                                  ; DOSDATA:03BEh
 44313                                  OPENBUF: ;times 64  dw	0
 44314 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 44315                                  RENBUF:	
 44316 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 44317                                  
 44318                                  ; Buffer for search calls
 44319                                  SEARCHBUF:	
 44320 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 44321                                  DUMMYCDS:  ;times 88 db 0
 44322 000004F3 00<rep 58h>             	times	curdirLen db 0
 44323                                  
 44324                                  ; End of contiguous buffer
 44325                                   
 44326                                  ; Temporary directory entry for use by many routines. Device directory
 44327                                  ; entries (bogus) are built here.
 44328                                  
 44329                                  ; DOSDATA:054Bh
 44330                                  
 44331                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 44332                                  
 44333                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 44334                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 44335                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 44336                                  
 44337                                  NAME1:	
 44338 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 44339                                  NAME2:
 44340 00000557 00<rep Dh>              	times	13 db	0 		;
 44341                                  DESTSTART:
 44342 00000564 0000                    	dw	0			;
 44343                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 44344                                  	;times	5  db	0
 44345 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 44346                                  
 44347                                  ; End Temporary directory entry.
 44348                                  
 44349 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 44350                                  EXTFCB:	
 44351 0000056C 00                      	db	0		; TRUE => extended FCB in use
 44352                                  SATTRIB:
 44353 0000056D 00                      	db	0		; Storage for search attributes
 44354                                  OPEN_ACCESS:
 44355 0000056E 00                      	db	0		; access of open system call
 44356                                  FOUNDDEL:
 44357 0000056F 00                      	db	0		; true => file was deleted
 44358                                  FOUND_DEV:
 44359 00000570 00                      	db	0		; true => search found a device
 44360                                  FSPLICE:
 44361 00000571 00                      	db	0		; true => do a splice in transpath
 44362                                  FSHARING:
 44363 00000572 00                      	db	0		; TRUE => no redirection
 44364                                  SECCLUSPOS:
 44365 00000573 00                      	db	0		; Position of first sector within cluster
 44366 00000574 00                      TRANS:	db	0		;
 44367 00000575 00                      READOP:	db	0		;
 44368                                  THISDRV:
 44369 00000576 00                      	db	0		;
 44370                                  CLUSFAC:
 44371 00000577 00                      	db	0		;
 44372                                  CLUSSPLIT:
 44373 00000578 00                      	db	0		;
 44374                                  INSMODE:
 44375 00000579 00                      	db	0		; true => insert mode in buffered read
 44376 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 44377 0000057B 00                      VOLID:	db	0		;
 44378                                  EXIT_TYPE:
 44379 0000057C 00                      	db	0		; type of exit...
 44380                                   
 44381                                  	;EVEN
 44382                                  
 44383 0000057D 90                      align 2
 44384                                  
 44385                                  ; DOSDATA:057Eh
 44386                                  
 44387                                  ; WARNING - the following two items are accessed as a word
 44388                                  
 44389                                  CREATING:
 44390 0000057E 00                      	db	0		; true => creating a file
 44391 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 44392                                  				; = DIRFREE iff BUGBUG
 44393                                  EXITHOLD:
 44394 00000580 00000000                	dd	0		; Temp location for proc terminate
 44395                                  USER_SP:
 44396 00000584 0000                    	dw	0		; User SP for system call
 44397                                  USER_SS:
 44398 00000586 0000                    	dw	0		; User SS for system call
 44399                                  CONTSTK:
 44400 00000588 0000                    	dw	0		;
 44401                                  THISDPB:
 44402 0000058A 00000000                	dd	0		;
 44403                                  CLUSSAVE:
 44404 0000058E 0000                    	dw	0		;
 44405                                  CLUSSEC:
 44406 00000590 00000000                	dd	0		;>32mb			AC0000
 44407                                  PREREAD:
 44408 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 44409 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 44410                                  FATBYTE:
 44411 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 44412                                  ; DOSDATA:059Ah
 44413 0000059A 00000000                DEVPT:	dd	0		;
 44414                                  THISSFT:
 44415 0000059E 00000000                	dd	0		; Address of user SFT
 44416                                  THISCDS:
 44417 000005A2 00000000                	dd	0		; Address of current CDS
 44418                                  THISFCB:
 44419 000005A6 00000000                	dd	0		; Address of user FCB
 44420 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 44421 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 44422 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 44423                                  WFP_START:
 44424 000005B2 0000                    	dw	0		;
 44425                                  REN_WFP:
 44426 000005B4 0000                    	dw	0		;
 44427                                  CURR_DIR_END:
 44428 000005B6 0000                    	dw	0		;
 44429                                  NEXTADD:
 44430 000005B8 0000                    	dw	0		;
 44431                                  LASTPOS:
 44432 000005BA 0000                    	dw	0		;
 44433                                  CLUSNUM:
 44434 000005BC 0000                    	dw	0		;
 44435 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 44436                                  DIRSTART:
 44437 000005C2 0000                    	dw	0		;
 44438 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 44439 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 44440                                                                  ; sectors
 44441                                  BYTSECPOS:
 44442 000005CC 0000                    	dw	0		; Position of first byte within sector
 44443                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 44444 000005CE 0000<rep 2h>                    times	2 dw 0
 44445                                  BYTCNT1:
 44446 000005D2 0000                    	dw	0		; No. of bytes in first sector
 44447                                  BYTCNT2:
 44448 000005D4 0000                    	dw	0		; No. of bytes in last sector
 44449 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 44450                                  ; DOSDATA:05D8h
 44451                                  ENTFREE:
 44452 000005D8 0000                    	dw	0		;
 44453                                  ENTLAST:
 44454 000005DA 0000                    	dw	0		;
 44455                                  NXTCLUSNUM:
 44456 000005DC 0000                    	dw	0		;
 44457                                  GROWCNT:
 44458 000005DE 00000000                	dd	0		;
 44459 000005E2 00000000                CURBUF:	dd	0		;
 44460 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 44461 000005EA 0000                    SAVEBX:	dw	0		;
 44462 000005EC 0000                    SAVEDS:	dw	0		;
 44463                                  RESTORE_TMP:
 44464 000005EE 0000                    	dw	0		; return address for restore world
 44465 000005F0 0000                    NSS:	dw	0
 44466 000005F2 0000                    NSP:	dw	0
 44467                                  ; DOSDATA:05F4h
 44468                                  EXTOPEN_FLAG:
 44469 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 44470                                  EXTOPEN_ON:
 44471 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 44472                                  EXTOPEN_IO_MODE:
 44473 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 44474                                  SAVE_DI:
 44475 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 44476                                  SAVE_ES:
 44477 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 44478                                  SAVE_DX:
 44479 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 44480                                  SAVE_CX:
 44481 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 44482                                  SAVE_BX:
 44483 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 44484                                  SAVE_SI:
 44485 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 44486                                  SAVE_DS:
 44487 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 44488                                  
 44489                                  ; DOSDATA:0607h
 44490                                  
 44491                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 44492                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 44493                                  ; the high 16, the low 16 are still in the register.
 44494                                  
 44495                                  HIGH_SECTOR:	
 44496 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 44497                                  	; 25/09/2023
 44498                                  OffsetMagicPatch:
 44499                                  	;dw	MagicPatch	;scottq 8/6/92
 44500                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44501 00000609 0000                    	dw	0
 44502                                  				;see dos\mpatch.asm
 44503                                  DISK_FULL:
 44504 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 44505                                  TEMP_VAR:
 44506 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 44507                                  TEMP_VAR2:
 44508 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 44509 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 44510                                  DOS34_FLAG:
 44511 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 44512                                  NO_FILTER_PATH:
 44513 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 44514                                  NO_FILTER_DPATH:
 44515 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 44516                                  ; M008
 44517                                  AbsRdWr_SS:
 44518 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 44519                                  AbsRdWr_SP:
 44520 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 44521                                  
 44522                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 44523                                  ; M008
 44524                                   
 44525                                   
 44526                                  ; make those pushes fast!!!
 44527                                  
 44528                                  ;EVEN
 44529                                  
 44530 0000061F 90                      align 2
 44531                                  
 44532                                  StackSize   equ 180h  ; 384	; gross but effective
 44533                                  
 44534                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 44535                                  ;				; made up their minds about
 44536                                   
 44537                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 44538                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 44539                                  
 44540                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 44541                                   
 44542 00000620 00<rep 180h>                    times	StackSize db	0	;
 44543                                  AUXSTACK:			; LABEL   BYTE
 44544                                   
 44545 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 44546                                  DSKSTACK:			; LABEL   BYTE
 44547                                   
 44548 00000920 00<rep 180h>                    times	StackSize db	0	;
 44549                                  IOSTACK:			; LABEL   BYTE
 44550                                  
 44551                                  ; DOSDATA:0AA0h 
 44552                                   
 44553                                  ; patch space for Boca folks.
 44554                                  ; Say What????!!! This does NOT go into the swappable area!
 44555                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 44556                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 44557                                   
 44558                                  IBMPATCH: ; label byte
 44559                                  PRINTER_FLAG:
 44560 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 44561                                  VOLCHNG_FLAG:
 44562 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 44563                                  VIRTUAL_OPEN:
 44564 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 44565                                   
 44566                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 44567                                  
 44568                                  FSeek_drive:
 44569 00000AA3 00                      	db	0		;AN000; fastseek drive #
 44570                                  FSeek_firclus:
 44571 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 44572                                  FSeek_logclus:
 44573 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 44574                                  FSeek_logsave:
 44575 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 44576                                  
 44577                                  ; DOSDATA:0AAAh
 44578                                  
 44579                                  TEMP_DOSLOC:
 44580 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 44581                                  				;at SYSINIT time.
 44582                                  SWAP_END:  ; LABEL   BYTE
 44583                                   
 44584                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 44585                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 44586                                  ; to include this byte.
 44587                                   
 44588 00000AAC 00                      	db	0
 44589                                  
 44590                                  ; DOSDATA:0AADh
 44591                                   
 44592                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44593                                  
 44594                                  ;DOSDATA    ENDS
 44595                                  
 44596                                  ;============================================================================
 44597                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44598                                  ;============================================================================
 44599                                  ; 27/04/2019 - Retro DOS 4.0
 44600                                  ; 16/07/2018 - Retro DOS 3.0
 44601                                  
 44602                                  ;DOSDATA Segment
 44603                                  
 44604                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44605                                  
 44606                                  ;
 44607                                  ; upper case table
 44608                                  ; ---------------------------------------------------------------------------
 44609                                  UCASE_TAB:	; label   byte
 44610 00000AAD 8000                    	dw	128
 44611 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44612 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44613 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44614 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44615 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44616 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44617 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44618 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44619 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44620 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44621 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44622 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44623 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44624 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44625 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44626 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44627                                  ;
 44628                                  ; file upper case table
 44629                                  ; ---------------------------------------------------------------------------
 44630                                  FILE_UCASE_TAB:	; label  byte
 44631 00000B2F 8000                    	dw	128
 44632 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44633 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44634 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44635 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44636 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44637 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44638 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44639 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44640 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44641 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44642 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44643 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44644 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44645 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44646 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44647 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44648                                  ;
 44649                                  ; file char list
 44650                                  ; ---------------------------------------------------------------------------
 44651                                  FILE_CHAR_TAB:	; label  byte
 44652 00000BB1 1600                    	dw	22				; length
 44653 00000BB3 0100FF                  	db	1,0,255 			; include all
 44654 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44655 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44655 00000BC2 7C3C3E2B3D3B2C     
 44656                                  	;db	24 dup (?)			; reserved
 44657 00000BC9 00<rep 18h>             	times	24 db 0
 44658                                  
 44659                                  ;
 44660                                  ; collate table
 44661                                  ; ---------------------------------------------------------------------------
 44662                                  COLLATE_TAB:	; label   byte
 44663 00000BE1 0001                    	dw	256
 44664 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44665 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44666 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44667 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44668 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44669 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44670 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44671 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44672 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44673 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44674 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44675 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44676 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44677 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44678 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44679 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44680 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44681 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44682 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44683 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44684 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44685 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44686 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44687 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44688 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44689 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44690 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44691 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44692 00000CC3 E053                    	db	224,"S"
 44693 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44694 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44695 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44696 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44697                                  
 44698                                  ; ------------------------------------------------<MSKK01>----------------------
 44699                                  
 44700                                  ; DOSDATA:0CE3h
 44701                                  
 44702                                  ; 29/04/2019
 44703                                  
 44704                                  ; dbcs is not supported in DOS 3.3
 44705                                  ;		   DBCS_TAB	    CC_DBCS <>
 44706                                  ;
 44707                                  ; DBCS for DOS 4.00			   2/12/KK
 44708                                  
 44709                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44710                                  ; ------------------------------------------------<MSKK01>----------------------
 44711                                  ;ifdef	DBCS
 44712                                  ; ifdef	  JAPAN
 44713                                  ;		dw	6		; <MSKK01>
 44714                                  ;		db	081h,09fh	; <MSKK01>
 44715                                  ;		db	0e0h,0fch	; <MSKK01>
 44716                                  ;		db	0,0		; <MSKK01>
 44717                                  ;
 44718                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44719                                  ; endif
 44720                                  ; ifdef	  TAIWAN
 44721                                  ;		dw	4		; <TAIWAN>
 44722                                  ;		db	081h,0FEh	; <TAIWAN>
 44723                                  ;		db	0,0		; <TAIWAN>
 44724                                  ;
 44725                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44726                                  ; endif
 44727                                  ; ifdef   KOREA                         ; Keyl
 44728                                  ;               dw      4               ; <KOREA>
 44729                                  ;               db      0A1h,0FEh       ; <KOREA>
 44730                                  ;               db      0,0             ; <KOREA>
 44731                                  ;
 44732                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44733                                  ;  endif
 44734                                  ;else
 44735 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44736                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44737 00000CE5 00<rep 10h>             		times	16 db 0
 44738                                  
 44739                                  ;		dw	6		;  2/12/KK
 44740                                  ;		db	081h,09Fh	;  2/12/KK
 44741                                  ;		db	0E0h,0FCh	;  2/12/KK
 44742                                  ;		db	0,0		;  2/12/KK
 44743                                  ;
 44744                                  ;endif
 44745                                  ; ------------------------------------------------<MSKK01>----------------------
 44746                                  
 44747                                  ; DOSDATA:0CF5h
 44748                                  
 44749                                  ; ---------------------------------------------------------------------------
 44750                                  ;
 44751                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44752                                  ;     ENTRY: AL = Character to map
 44753                                  ;     EXIT:  AL = The converted character
 44754                                  ; Alters no registers except AL and flags.
 44755                                  ; The routine should do nothing to chars below 80H.
 44756                                  ; ---------------------------------------------------------------------------
 44757                                  ; Example:
 44758                                  
 44759                                  MAP_CASE:
 44760                                  ;Procedure MAP_CASE,FAR
 44761                                  
 44762 00000CF5 3C80                    	CMP	AL,80h
 44763 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44764 00000CF9 CB                      	RETF
 44765                                  Map1:
 44766 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44767 00000CFC 1E                      	PUSH	DS
 44768 00000CFD 53                      	PUSH	BX
 44769 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44770                                  FINISH:
 44771 00000D01 0E                      	PUSH	CS		;Move to DS
 44772 00000D02 1F                      	POP	DS
 44773 00000D03 D7                      	XLAT			;Get upper case character
 44774 00000D04 5B                      	POP	BX
 44775 00000D05 1F                      	POP	DS
 44776                                  L_RET:	
 44777 00000D06 CB                      	RETF
 44778                                  
 44779                                  ;EndProc MAP_CASE
 44780                                  
 44781                                  ; ---------------------------------------------------------------------------
 44782                                  
 44783                                  ; The variables for ECS version are moved here for the same data alignments
 44784                                  ; as IBM-DOS and MS-DOS.
 44785                                  
 44786                                  InterChar:
 44787 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44788                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44789                                  DUMMY:	; LABEL   WORD
 44790                                  InterCon:  
 44791 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44792                                  SaveCurFlg:
 44793 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44794                                  
 44795                                  ; ---------------------------------------------------------------------------
 44796                                  
 44797 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44798                                  redir_patch:
 44799 00000D0C 00                      	  db	0
 44800                                  
 44801                                  ; DOSDATA:0D0Dh
 44802                                  
 44803                                  Mark1:	; label byte
 44804                                  
 44805                                  ;IF2
 44806                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44807                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44808                                  ;	ENDIF
 44809                                  ;ENDIF
 44810                                  
 44811 00000D0D 00<rep 5h>              	  times 5 db 0
 44812                                  
 44813                                  ;############################################################################
 44814                                  ;
 44815                                  ; ** HACK FOR DOS 4.0 REDIR **
 44816                                  ; 
 44817                                  ; The redir requires the following:
 44818                                  ;
 44819                                  ;	MSVERS	offset D12H
 44820                                  ;	YRTAB	offset D14H
 44821                                  ; 	MONTAB	offset D1CH
 44822                                  ;
 44823                                  ; WARNING! WARNING!
 44824                                  ; 
 44825                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44826                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44827                                  ;
 44828                                  ; CURRENTLY MARK1 = 0D0DH
 44829                                  ;
 44830                                  ;############################################################################
 44831                                  
 44832                                  	;ORG	0D12h
 44833                                  
 44834                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44835                                  
 44836                                  	;db	6
 44837                                  	;db	20
 44838                                  
 44839                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44840                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44841 00000D12 06                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44842 00000D13 16                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44843                                  
 44844                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44845                                  ;
 44846                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44847                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44848                                  
 44849                                  ; Days in year
 44850                                  
 44851                                  YRTAB:   
 44852 00000D14 C8A6                    	DB	200,166			; Leap year
 44853 00000D16 C8A5                    	DB	200,165
 44854 00000D18 C8A5                    	DB	200,165
 44855 00000D1A C8A5                    	DB	200,165
 44856                                  
 44857                                  ; Days of each month
 44858                                  
 44859                                  MONTAB:        
 44860 00000D1C 1F                      	DB      31                      ; January
 44861                                  february:
 44862 00000D1D 1C                      	DB	28 			; February--reset each 
 44863                                  					; time year changes
 44864 00000D1E 1F                              DB      31                      ; March
 44865 00000D1F 1E                              DB      30                      ; April
 44866 00000D20 1F                              DB      31                      ; May
 44867 00000D21 1E                              DB      30                      ; June
 44868 00000D22 1F                              DB      31                      ; July
 44869 00000D23 1F                              DB      31                      ; August
 44870 00000D24 1E                              DB      30                      ; September
 44871 00000D25 1F                              DB      31                      ; October
 44872 00000D26 1E                              DB      30                      ; November
 44873 00000D27 1F                              DB      31                      ; December
 44874                                  
 44875                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44876                                  
 44877                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44878                                  
 44879                                  SysInitTable:
 44880                                  	;dw	SYSINITVAR
 44881 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44882 00000D2A 0000                            dw      0		; segment
 44883 00000D2C [0012]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44884 00000D2E 0000                            dw      0		; segment of pointer
 44885                                  
 44886                                  ; DOS 3.3 F.C. 6/12/86
 44887                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44888                                  
 44889                                  FastTable:				; a better name
 44890                                  FastOpenTable:
 44891 00000D30 0200                    	dw      2                       ; number of entries
 44892 00000D32 [A412]                  	dw      FastRet			; pointer to ret instr.
 44893 00000D34 0000                    	dw      0                       ; and will be modified by
 44894 00000D36 [A412]                  	dw      FastRet			; FASTxxx when loaded in
 44895 00000D38 0000                    	dw      0                       
 44896                                  
 44897                                  ; DOS 3.3 F.C. 6/12/86
 44898                                  
 44899                                  FastFlg:				; flags
 44900                                  FastOpenFlg:
 44901 00000D3A 00                      	db	0			; don't change the foll: order  
 44902                                  
 44903                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44904                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44905                                  ; or filled by FastOPen when calling FastOpen Lookup
 44906                                  
 44907                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44908                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44909                                  	;times	11 db 0
 44910 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44911                                  
 44912                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44913                                  ; when calling FastOpen Lookup
 44914                                  
 44915                                  Dir_Info_Buff:	; label  byte
 44916                                  	;db   	SIZE dir_entry dup (0)
 44917                                  	;times	32 db 0
 44918 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44919                                  
 44920                                  Next_Element_Start:
 44921 00000D66 0000                    	dw	0			; save next element start offset
 44922                                  Del_ExtCluster:
 44923 00000D68 0000                    	dw	0			; for dos_delete                       
 44924                                  
 44925                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44926                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44927                                  ; not to destroy the INT 21 stack saved for the user.
 44928                                  
 44929                                  USER_SP_2F:	; LABEL  WORD
 44930 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44931                                  
 44932                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44933                                  DOS_TEMP:	; label  word		; temporary word
 44934                                  FAKE_STACK_2F:  
 44935                                  	; dw  14 dup (0)		; 12 register temporary storage
 44936 00000D6C 0000<rep Eh>            	times 14 dw 0
 44937                                  
 44938                                  Hash_Temp: 	;label  word		; temporary word             
 44939                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44940 00000D88 0000<rep 4h>            	times 4 dw 0
 44941                                              	
 44942                                  SCAN_FLAG:	
 44943 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44944                                  DATE_FLAG:
 44945 00000D91 0000                    	dw     0                	; flag to update the date
 44946                                  
 44947                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44948 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44949                                  
 44950                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44951 00000D95 00000000                	dd     0               		; for extended error                   
 44952 00000D99 00000000                	dd     0			; for parser                           
 44953 00000D9D 00000000                	dd     0			; for critical errror                  
 44954 00000DA1 00000000                	dd     0			; for IFS                              
 44955 00000DA5 00000000                	dd     0			; for code reduction                   
 44956                                  
 44957                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44958 00000DA9 FFFFFFFF                	dd     -1                                                        
 44959                                  SC_SECTOR_SIZE:
 44960 00000DAD 0000                    	dw	0			; sector size for SC                 
 44961                                  SC_DRIVE:
 44962 00000DAF 00                      	db	0			; drive # for secondary cache        
 44963                                  CurSC_DRIVE:
 44964 00000DB0 FF                      	db	-1			; current SC drive                   
 44965                                  CurSC_SECTOR:
 44966 00000DB1 00000000                	dd	0			; current SC starting sector         
 44967                                  SC_STATUS:
 44968 00000DB5 0000                    	dw	0			; SC status word                     
 44969                                  SC_FLAG:
 44970 00000DB7 00                      	db	0			; SC flag                            
 44971                                  AbsDskErr:
 44972 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44973                                                                                            
 44974                                  NO_NAME_ID:	; label byte                                                           
 44975 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44975 00000DC3 2020               
 44976                                  
 44977                                  ;hkn; moved from TABLE segment in kstrin.asm
 44978                                  
 44979                                  KISTR001S:	; label	byte		; 2/17/KK
 44980 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44981                                  KISTR001E:	; label	byte		; 2/17/KK
 44982                                  
 44983                                  ; the nul device driver used to be part of the code. However, since the 
 44984                                  ; header is in the data, and the entry points are only given as an offset,
 44985                                  ; the strategy and interrupt entry points must also be in the data now.
 44986                                  
 44987                                  ; DOSDATA:0DC6h
 44988                                  
 44989                                  SNULDEV:
 44990                                  ;procedure snuldev,far
 44991                                  	;or	word [es:bx+3],100h
 44992                                  	; 17/12/2022
 44993                                  	;or	byte [es:bx+4],01h
 44994                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 44995                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44996 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44997                                  INULDEV:
 44998 00000DCC CB                      	retf				; must not be a return!
 44999                                  ;endproc snuldev
 45000                                  
 45001                                  ;M044
 45002                                  ; Second part of save area for saving last para of Windows memory
 45003                                  
 45004                                  WinoldPatch2:
 45005                                  	;db	8 dup (?)	; M044
 45006 00000DCD 00<rep 8h>              	times	8 db 0	
 45007                                  UmbSave2:
 45008                                  	;db	5 dup (?)	; M062
 45009 00000DD5 00<rep 5h>              	times	5 db 0
 45010                                  UmbSaveFlag:
 45011 00000DDA 00                      	db	0		; M062
 45012                                  
 45013                                  ; DOSDATA:0DDBh
 45014                                  
 45015                                  Mark2:	; label byte
 45016                                  
 45017                                  ;IF2
 45018                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 45019                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45020                                  ;	ENDIF
 45021                                  ;ENDIF
 45022                                  
 45023                                  ;############################################################################
 45024                                  ;
 45025                                  ; ** HACK FOR DOS 4.0 REDIR **
 45026                                  ; 
 45027                                  ; The redir requires the following:
 45028                                  ;
 45029                                  ;	ERR_TABLE_21	offset DDBH
 45030                                  ;	ERR_TABLE_24	offset E5BH
 45031                                  ; 	ErrMap24	offset EABH
 45032                                  ;
 45033                                  ; WARNING! WARNING!
 45034                                  ;
 45035                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45036                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45037                                  ;
 45038                                  ; CURRENTLY MARK2 = 0DD0H
 45039                                  ;
 45040                                  ;############################################################################
 45041                                  
 45042                                  	;ORG	0DDBh
 45043                                  
 45044                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 45045                                  
 45046                                  ; ---------------------------------------------------------------------------
 45047                                  ;
 45048                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 45049                                  ; errors. Each entry is 4 bytes long:
 45050                                  ;
 45051                                  ;       Err#,Class,Action,Locus
 45052                                  ;
 45053                                  ; A value of 0FFh indicates a call specific value (ie. should already
 45054                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45055                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 45056                                  ;
 45057                                  ; ---------------------------------------------------------------------------
 45058                                  
 45059                                  ;ErrTab  Macro   err,class,action,locus
 45060                                  ;ifidn <locus>,<0FFh>
 45061                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 45062                                  ;ELSE
 45063                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 45064                                  ;ENDIF
 45065                                  ;ENDM
 45066                                  
 45067                                  ERR_TABLE_21: ; LABEL   BYTE
 45068 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 45069 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45070 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45071 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 45072 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 45073 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45074 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 45075 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45076 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45077 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 45078 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45079 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45080 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 45081 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45082 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 45083 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 45084 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 45085 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 45086 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45087 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45088 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 45089 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 45090 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 45091 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45092 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 45093 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 45094 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 45095 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45096                                      ; MSDOS 6.0
 45097 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45098 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 45099 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 45100 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 45101                                  
 45102                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 45103                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 45104                                  ;		db 2,8,3,2
 45105                                  ;		db 3,8,3,2
 45106                                  ;		db 4,1,4,1
 45107                                  ;		db 5,3,3,0FFh
 45108                                  ;		db 6,7,4,1
 45109                                  ;		db 7,7,5,5
 45110                                  ;		db 8,1,4,5
 45111                                  ;		db 9,7,4,5
 45112                                  ;		db 0Ah,7,4,5
 45113                                  ;		db 0Bh,9,3,1
 45114                                  ;		db 0Ch,7,4,1
 45115                                  ;		db 0Dh,9,4,1
 45116                                  ;		db 0Fh,8,3,2
 45117                                  ;		db 10h,3,3,2
 45118                                  ;		db 11h,0Dh,3,2
 45119                                  ;		db 12h,8,3,2
 45120                                  ;		db 50h,0Ch,3,2
 45121                                  ;		db 20h,0Ah,2,2
 45122                                  ;		db 21h,0Ah,2,2
 45123                                  ;		db 54h,1,4,0FFh
 45124                                  ;		db 56h,3,3,1
 45125                                  ;		db 52h,1,4,2
 45126                                  ;		db 32h,9,3,3
 45127                                  ;		db 55h,0Ch,3,3
 45128                                  ;		db 57h,9,3,1
 45129                                  ;		db 53h,0Dh,4,1
 45130                                  ;		db 24h,1,4,5
 45131                                  ; MSDOS 6.0 (MSDOS 6.21)
 45132                                  ;		db 26h,1,4,1
 45133                                  ;		db 27h,1,4,1
 45134                                  ;		db 5Ah,0Dh,4,2
 45135                                  ; MSDOS 6.0 & MSDOS 3.3
 45136                                  ;		db 0FFh,0FFh,0FFh,0FFh
 45137                                  
 45138                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45139                                  
 45140                                  ; ---------------------------------------------------------------------------
 45141                                  ;
 45142                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 45143                                  ; errors. Each entry is 4 bytes long:
 45144                                  ;
 45145                                  ;       Err#,Class,Action,Locus
 45146                                  ;
 45147                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 45148                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 45149                                  ; THE END.
 45150                                  ;
 45151                                  ; ---------------------------------------------------------------------------
 45152                                  
 45153                                  ERR_TABLE_24: ; LABEL   BYTE
 45154 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45155 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45156 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 45157 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45158 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45159 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 45160 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 45161 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45162 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 45163 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 45164 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 45165 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 45166 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 45167 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45168 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 45169 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 45170 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 45171 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 45172 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 45173 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 45174                                  
 45175                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 45176                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 45177                                  ;		db 14h,4,5,1
 45178                                  ;		db 15h,5,7,0FFh
 45179                                  ;		db 16h,4,5,1
 45180                                  ;		db 17h,0Bh,4,2
 45181                                  ;		db 18h,4,5,1
 45182                                  ;		db 19h,5,1,2
 45183                                  ;		db 1Ah,0Bh,7,2
 45184                                  ;		db 1Bh,0Bh,4,2
 45185                                  ;		db 1Ch,2,7,4
 45186                                  ;		db 1Dh,5,4,0FFh
 45187                                  ;		db 1Eh,5,4,0FFh
 45188                                  ;		db 1Fh,0Dh,4,0FFh
 45189                                  ;		db 20h,0Ah,2,2
 45190                                  ;		db 21h,0Ah,2,2
 45191                                  ;		db 22h,0Bh,7,2
 45192                                  ;		db 32h,9,3,3
 45193                                  ;		db 23h,7,4,1
 45194                                  ;		db 24h,1,4,5
 45195                                  ;		db 0FFh,0Dh,5,0FFh
 45196                                  
 45197                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 45198                                  
 45199                                  ; ---------------------------------------------------------------------------
 45200                                  ;
 45201                                  ; We need to map old int 24 errors and device driver errors into the new set
 45202                                  ; of errors. The following table is indexed by the new errors
 45203                                  ;
 45204                                  ; ---------------------------------------------------------------------------
 45205                                  
 45206                                  ;Public  ErrMap24
 45207                                  ErrMap24: ; Label   BYTE
 45208 00000EAB 13                          DB  error_write_protect	; 0
 45209 00000EAC 14                          DB  error_bad_unit		; 1
 45210 00000EAD 15                          DB  error_not_ready		; 2
 45211 00000EAE 16                          DB  error_bad_command	; 3
 45212 00000EAF 17                          DB  error_CRC		; 4
 45213 00000EB0 18                          DB  error_bad_length	; 5
 45214 00000EB1 19                          DB  error_seek		; 6
 45215 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 45216 00000EB3 1B                          DB  error_sector_not_found	; 8
 45217 00000EB4 1C                          DB  error_out_of_paper	; 9
 45218 00000EB5 1D                          DB  error_write_fault	; A
 45219 00000EB6 1E                          DB  error_read_fault	; B
 45220 00000EB7 1F                          DB  error_gen_failure	; C
 45221 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 45222 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 45223 00000EBA 22                          DB  error_wrong_disk	; F
 45224                                  
 45225                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 45226                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 45227                                  	
 45228                                  ErrMap24End: ; LABEL   BYTE
 45229                                  
 45230                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 45231                                  
 45232                                  ; ---------------------------------------------------------------------------
 45233                                  
 45234                                  ; 27/04/2019 - Retro DOS v4.0
 45235                                  
 45236                                  FIRST_BUFF_ADDR:
 45237 00000EBB 0000                    	dw	0			; first buffer address               
 45238                                  SPECIAL_VERSION:
 45239 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 45240                                  FAKE_COUNT:
 45241 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 45242                                  OLD_FIRSTCLUS:
 45243 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 45244                                  
 45245                                  ; ---------------------------------------------------------------------------
 45246                                  
 45247                                  ;smr; moved from TABLE segment in exec.asm
 45248                                  
 45249 00000FC0 0000                    exec_init_SP: dw 0
 45250 00000FC2 0000                    exec_init_SS: dw 0
 45251 00000FC4 0000                    exec_init_IP: dw 0
 45252 00000FC6 0000                    exec_init_CS: dw 0
 45253                                  
 45254                                  exec_signature:
 45255 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 45256                                  exec_len_mod_512:
 45257 00000FCA 0000                    	dw	0	; low 9 bits of length
 45258                                  exec_pages:
 45259 00000FCC 0000                    	dw	0	; number of 512b pages in file
 45260                                  exec_rle_count:
 45261 00000FCE 0000                    	dw	0	; count of reloc entries
 45262                                  exec_par_dir:
 45263 00000FD0 0000                    	dw	0	; number of paragraphs before image
 45264                                  exec_min_BSS:
 45265 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 45266                                  exec_max_BSS:
 45267 00000FD4 0000                    	dw	0	; max number of para of BSS
 45268                                  exec_SS:
 45269 00000FD6 0000                    	dw	0	; stack of image
 45270                                  exec_SP:
 45271 00000FD8 0000                    	dw	0	; SP of image
 45272                                  exec_chksum:
 45273 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 45274                                  exec_IP:
 45275 00000FDC 0000                    	dw	0	; IP of entry
 45276                                  exec_CS:
 45277 00000FDE 0000                    	dw	0	; CS of entry
 45278                                  exec_rle_table:
 45279 00000FE0 0000                    	dw	0	; byte offset of reloc table
 45280                                  
 45281                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 45282                                  
 45283                                  ;smr; eom
 45284                                  
 45285                                  ; ---------------------------------------------------------------------------
 45286                                  
 45287                                  ;SR;
 45288                                  ; WIN386 instance table for DOS
 45289                                  
 45290                                  Win386_Info:
 45291 00000FE2 0300                    	db	3, 0
 45292 00000FE4 000000000000000000-     	dd	0, 0, 0
 45292 00000FED 000000             
 45293 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 45294                                  
 45295                                  Instance_Table:
 45296 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 45297 00000FFA [3200]00000400          	dw	BCON, 0, 4
 45298 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 45299 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 45300 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 45301 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 45302 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 45303 0000101E 00000000                	dw	0, 0
 45304                                  
 45305                                  ; M001; SR;
 45306                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 45307                                  ; M001; some DOS variables. Note that the only really important variable in 
 45308                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 45309                                  ; M001; which does not need to be done in DOS 5.0. 
 45310                                  
 45311                                  ; 29/12/2022
 45312                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 45313                                  
 45314                                  Win386_DOSVars:
 45315 00001022 05                      	db	5	;Major version 5 ; M001
 45316 00001023 00                      	db	0	;Minor version 0 ; M001
 45317 00001024 [EC05]                  	dw	SAVEDS	; M001
 45318 00001026 [EA05]                  	dw	SAVEBX	; M001
 45319 00001028 [2103]                  	dw	INDOS	; M001
 45320 0000102A [3E03]                  	dw	USER_ID	; M001
 45321 0000102C [1503]                  	dw	CritPatch ; M001
 45322 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 45323                                  
 45324                                  ;SR;
 45325                                  ; Flag to indicate whether WIN386 is running or not
 45326                                  
 45327 00001030 00                      IsWin386: db	0
 45328                                  
 45329                                  ;M018
 45330                                  ; This variable contains the path to the VxD device needed for Win386
 45331                                  
 45332 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 45332 0000103A 2E33383600         
 45333                                  
 45334                                  ;End WIN386 support
 45335                                  
 45336                                  ; ---------------------------------------------------------------------------
 45337                                  
 45338                                  ;SR;
 45339                                  ; These variables have been added for the special lie support for device
 45340                                  ;drivers.
 45341                                  ;
 45342                                  
 45343                                  DriverLoad:	
 45344 0000103F 01                      	db	1	;initialized to do special handling
 45345                                  BiosDataPtr:
 45346 00001040 00000000                	dd	0
 45347                                  
 45348                                  ; 29/12/2022 - Retro DOS v4.1
 45349                                  %if 0
 45350                                  
 45351                                  ; 27/04/2019 - Retro DOS v4.0
 45352                                  ; 04/11/2022
 45353                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 45354                                  
 45355                                  ;------------------------------------------------------------------------
 45356                                  ; Patch for Sidekick
 45357                                  ;
 45358                                  ; A documented method for finding the offset of the Errormode flag in the 
 45359                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 45360                                  ; for the following sequence of instructions.
 45361                                  ;
 45362                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 45363                                  ;
 45364                                  ; The Offset of Errormode flag is 0320h
 45365                                  ;
 45366                                  ;------------------------------------------------------------------------
 45367                                  
 45368                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 45369                                  	db	075h, 0Ch			 ; jnz  NearLabel
 45370                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 45371                                  	db	0CDh, 028h			 ; int  28h
 45372                                  
 45373                                  ;--------------------------------------------------------------------------
 45374                                  ; Patch for PortOfEntry - M036
 45375                                  ;
 45376                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 45377                                  ; the offset of Errormode flag. The following patch is to support them in 
 45378                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 45379                                  ;
 45380                                  ;---------------------------------------------------------------------------
 45381                                  
 45382                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 45383                                  	db	075h, 037h			 ; jnz	NearLabel
 45384                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 45385                                  
 45386                                  %endif ; 29/12/2022
 45387                                  
 45388                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 45389                                  
 45390                                  ;--------------------------------------------------------------------------
 45391                                  
 45392                                  ;*** New FCB Implementation
 45393                                  ; This variable is used as a cache in the new FCB implementation to remember
 45394                                  ;the address of a local SFT that can be recycled for a regenerate operation
 45395                                  
 45396 00001044 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 45397                                  
 45398                                  ;DOSDATA ENDS
 45399                                  
 45400                                  ;============================================================================
 45401                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 45402                                  ;============================================================================
 45403                                  ; 27/04/2019 - Retro DOS 4.0
 45404                                  
 45405                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 45406                                  
 45407                                  ;---------------------------------------------------------------------------
 45408                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 45409                                  ;----------------------------------------------------------------------------
 45410                                  	
 45411                                  	;db	90h
 45412                                  
 45413                                  	;EVEN
 45414                                  align 2
 45415                                  
 45416                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 45417                                  
 45418                                  DOSINTTABLE:	; LABEL	DWORD
 45419                                  
 45420                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 45421                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 45422                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 45423                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 45424                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 45425                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 45426                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 45427                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 45428                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 45429                                  	
 45430 00001048 [7852]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 45431 0000104C [DC02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 45432 00001050 [0803]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 45433 00001054 [2D05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 45434 00001058 [B405]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 45435 0000105C [B261]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 45436 00001060 [0307]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 45437 00001064 [E302]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 45438 00001068 [E202]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 45439                                  
 45440 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 45441 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 45442                                  
 45443                                  ;-------------------------------------------------------------------------
 45444                                  ;
 45445                                  ; LOW MEM STUB:
 45446                                  ;
 45447                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 45448                                  ; handled by DOS. This stub is installed if the user specifies that the 
 45449                                  ; DOS load in HIMEM. Each entry point does this.
 45450                                  ;
 45451                                  ; 	1. if jmp to 8 has been patched out
 45452                                  ;	   2. if A20 OFF
 45453                                  ;	      3. Enable A20
 45454                                  ;	   4. else 
 45455                                  ;	      5. just go to dos entry
 45456                                  ;	   6. endif
 45457                                  ;	7. else
 45458                                  ;	   8. just go to dos entry
 45459                                  ;	9. endif
 45460                                  ;
 45461                                  ;--------------------------------------------------------------------------
 45462                                  
 45463                                  ; 27/04/2019 - Retro DOS v4.0
 45464                                  
 45465                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 45466                                  
 45467                                  ;--------------------------------------------------------------------------
 45468                                  ;
 45469                                  ; DIVIDE BY 0 handler
 45470                                  ;
 45471                                  ;--------------------------------------------------------------------------
 45472                                  
 45473                                  ldivov:
 45474                                  	; The following jump, skipping the XMS calls will be patched to 
 45475                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45476                                  	; needed because the stub is installed even before the XMS driver
 45477                                  	; is loaded if the user specifies dos=high in the config.sys
 45478                                  i0patch:
 45479 00001070 EB03                    	jmp	short divov_cont	
 45480                                  
 45481 00001072 E8D800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45482                                  divov_cont:
 45483 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 45484                                  
 45485                                  ;------------------------------------------------------------------------
 45486                                  ;
 45487                                  ; INT 20 Handler
 45488                                  ;
 45489                                  ; Here we do not have to set up the stack to return here as the abort call
 45490                                  ; will return to the address after the int 21 ah=4b call. This would be the
 45491                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 45492                                  ; will be restored then.
 45493                                  ;
 45494                                  ;-------------------------------------------------------------------------
 45495                                  
 45496                                  lquit:
 45497                                  	; The following jump, skipping the XMS calls will be patched to 
 45498                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45499                                  	; needed because the stub is installed even before the XMS driver
 45500                                  	; is loaded if the user specifies dos=high in the config.sys
 45501                                  i20patch:
 45502 0000107A EB03                    	jmp	short quit_cont	
 45503                                  
 45504 0000107C E8CE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45505                                  quit_cont:
 45506 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 45507                                  
 45508                                  ;--------------------------------------------------------------------------
 45509                                  ;
 45510                                  ; INT 21 Handler
 45511                                  ;
 45512                                  ;--------------------------------------------------------------------------
 45513                                  
 45514                                  lcommand:
 45515                                  	; The following jump, skipping the XMS calls will be patched to 
 45516                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45517                                  	; needed because the stub is installed even before the XMS driver
 45518                                  	; is loaded if the user specifies dos=high in the config.sys
 45519                                  i21patch:
 45520 00001084 EB03                    	jmp	short command_cont	
 45521                                  
 45522 00001086 E8C400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45523                                  command_cont:
 45524 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 45525                                  
 45526                                  ;------------------------------------------------------------------------
 45527                                  ;
 45528                                  ; INT 25 
 45529                                  ;
 45530                                  ;----------------------------------------------------------------------------
 45531                                  
 45532                                  labsdrd:
 45533                                  	; The following jump, skipping the XMS calls will be patched to 
 45534                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45535                                  	; needed because the stub is installed even before the XMS driver
 45536                                  	; is loaded if the user specifies dos=high in the config.sys
 45537                                  i25patch:
 45538 0000108E EB03                    	jmp	short absdrd_cont	
 45539                                  
 45540 00001090 E8BA00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45541                                  absdrd_cont:
 45542 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 45543                                  
 45544                                  ;-------------------------------------------------------------------------
 45545                                  ;
 45546                                  ; INT 26
 45547                                  ;
 45548                                  ;-----------------------------------------------------------------------
 45549                                  
 45550                                  labsdwrt:
 45551                                  	; The following jump, skipping the XMS calls will be patched to 
 45552                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45553                                  	; needed because the stub is installed even before the XMS driver
 45554                                  	; is loaded if the user specifies dos=high in the config.sys
 45555                                  i26patch:
 45556 00001098 EB03                    	jmp	short absdwrt_cont	
 45557                                  
 45558 0000109A E8B000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45559                                  absdwrt_cont:
 45560 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 45561                                  
 45562                                  ;------------------------------------------------------------------------
 45563                                  ;
 45564                                  ; INT 27
 45565                                  ;
 45566                                  ;-----------------------------------------------------------------------
 45567                                  
 45568                                  lstay_resident:
 45569                                  	; The following jump, skipping the XMS calls will be patched to 
 45570                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45571                                  	; needed because the stub is installed even before the XMS driver
 45572                                  	; is loaded if the user specifies dos=high in the config.sys
 45573                                  i27patch:
 45574 000010A2 EB03                    	jmp	short sr_cont	
 45575                                  
 45576 000010A4 E8A600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45577                                  sr_cont:
 45578 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 45579                                  
 45580                                  ;-----------------------------------------------------------------------------
 45581                                  ;
 45582                                  ; INT 2f
 45583                                  ;
 45584                                  ;-------------------------------------------------------------------------
 45585                                  
 45586                                  lint2f:
 45587                                  	; The following jump, skipping the XMS calls will be patched to 
 45588                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45589                                  	; needed because the stub is installed even before the XMS driver
 45590                                  	; is loaded if the user specifies dos=high in the config.sys
 45591                                  i2fpatch:
 45592 000010AC EB03                    	jmp	short int2f_cont	
 45593                                  
 45594 000010AE E89C00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45595                                  int2f_cont:
 45596 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45597                                  
 45598                                  ;-----------------------------------------------------------------------------
 45599                                  ;
 45600                                  ; CPM entry
 45601                                  ;
 45602                                  ;------------------------------------------------------------------------
 45603                                  
 45604                                  lcall_entry:
 45605                                  	; The following jump, skipping the XMS calls will be patched to 
 45606                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45607                                  	; needed because the stub is installed even before the XMS driver
 45608                                  	; is loaded if the user specifies dos=high in the config.sys
 45609                                  cpmpatch:
 45610 000010B6 EB03                    	jmp	short callentry_cont	
 45611                                  
 45612 000010B8 E89200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45613                                  callentry_cont:
 45614 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45615                                  
 45616                                  ;--------------------------------------------------------------------------
 45617                                  
 45618                                  lirett:
 45619 000010C0 CF                      	iret
 45620                                  
 45621                                  ;---------------------------------------------------------------------------
 45622                                  ;
 45623                                  ; LowIntXX:
 45624                                  ;
 45625                                  ; Interrupts from DOS that pass control to a user program must be done from
 45626                                  ; low memory, as the user program may change the state of the A20 line or
 45627                                  ; they may require that the A20 line be OFF. The following piece of code is
 45628                                  ; far call'd from the following places in DOS:
 45629                                  ;
 45630                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45631                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45632                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45633                                  ;
 45634                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45635                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45636                                  ; before doing the ints and then do a far junp back into DOS.
 45637                                  ;
 45638                                  ;---------------------------------------------------------------------------
 45639                                  
 45640 000010C1 00000000                DosRetAddr23:	dd	0
 45641 000010C5 00000000                DosRetAddr24:	dd	0
 45642 000010C9 00000000                DosRetAddr28:	dd	0
 45643                                  
 45644                                  	; Execute int 23h from low memory
 45645                                  LowInt23:
 45646                                  					; save the return address that is on
 45647                                  					; the stack
 45648 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 45649 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 45650                                  
 45651 000010D7 CD23                    	int	23h			; ctrl C
 45652                                  					; turn on A20 it has been turned OFF
 45653                                  					; by int 28/23/24 handler.
 45654                                  
 45655 000010D9 E87100                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45656                                  
 45657 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45658                                  
 45659                                  
 45660                                  	; Execute int 24h from low memory
 45661                                  LowInt24:
 45662                                  					; save the return address that is on
 45663                                  					; the stack
 45664 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 45665 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 45666                                  
 45667 000010EB CD24                    	int	24h			; crit error
 45668                                  					; turn on A20 it has been turned OFF
 45669                                  					; by int 28/23/24 handler.
 45670                                  
 45671 000010ED E85D00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45672                                  
 45673 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45674                                  
 45675                                  
 45676                                   
 45677                                  	; Execute int 28h from low memory
 45678                                  LowInt28:
 45679 000010F5 CD28                    	int	28h			; idle int
 45680                                  					; turn on A20 it has been turned OFF
 45681                                  					; by int 28/23/24 handler.
 45682                                  
 45683 000010F7 E85300                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45684                                  
 45685 000010FA CB                      	retf
 45686                                  
 45687                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45688                                  
 45689                                  ;-------------------------------------------------------------------------
 45690                                  ;
 45691                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45692                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45693                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45694                                  ; This is so because exepac'd programs rely on address wrap.
 45695                                  ;
 45696                                  ;------------------------------------------------------------------------- 
 45697                                  
 45698                                  disa20_xfer:
 45699 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 45700                                  
 45701                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45702                                  
 45703                                  	; DS:SI points to entry point
 45704                                  	; AX:DI points to initial stack
 45705                                  	; DX has PDB pointer
 45706                                  	; BX has initial AX value
 45707                                  
 45708 000010FE FA                      	cli
 45709 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45710                                  
 45711 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 45712 00001107 89FC                    	mov	SP,DI			; and SP
 45713 00001109 FB                      	sti
 45714                                  
 45715 0000110A 1E                      	push	DS			; fake long call to entry
 45716 0000110B 56                      	push	SI
 45717 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 45718 0000110E 8EDA                    	mov	DS,DX
 45719 00001110 89D8                    	mov	AX,BX			; set up proper AX
 45720 00001112 CB                      	retf
 45721                                  
 45722                                  ;-------------------------------------------------------------------------
 45723                                  ;
 45724                                  ; M003:
 45725                                  ;
 45726                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45727                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45728                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45729                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45730                                  ; more info.	
 45731                                  ;
 45732                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45733                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45734                                  ; stack to avoid additional stack overhead for the user.
 45735                                  ;
 45736                                  ; -------------------------------------------------------------------------
 45737                                  
 45738                                  disa20_iret:
 45739 00001113 E82700                  	call	XMMDisableA20
 45740 00001116 FE0E[2103]              	dec	byte [INDOS]
 45741 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45742 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 45743 00001122 89E5                    	mov	BP,SP
 45744                                  	;mov	[BP+user_env.user_AX],AL
 45745 00001124 884600                  	mov	[bp],al
 45746 00001127 A1[F205]                	mov	AX,[NSP]
 45747 0000112A A3[8405]                	mov	[USER_SP],AX
 45748 0000112D A1[F005]                	mov	AX,[NSS]
 45749 00001130 A3[8605]                	mov	[USER_SS],AX
 45750                                  
 45751 00001133 58                      	pop	AX			; restore user regs
 45752 00001134 5B                      	pop	BX
 45753 00001135 59                      	pop	CX
 45754 00001136 5A                      	pop	DX
 45755 00001137 5E                      	pop	SI
 45756 00001138 5F                      	pop	DI
 45757 00001139 5D                      	pop	BP
 45758 0000113A 1F                      	pop	DS
 45759 0000113B 07                      	pop	ES
 45760 0000113C CF                      	iret
 45761                                  
 45762                                  ;**************************************************************************
 45763                                  ;***	XMMDisableA20 - switch 20th address line			      
 45764                                  ;									      
 45765                                  ;	This routine is used to disable the 20th address line in 	      
 45766                                  ;	the system using XMM calls.					      
 45767                                  ;									      
 45768                                  ;	ENTRY	none		;ds = _DATA				      
 45769                                  ;	EXIT	A20 line disabled					      
 45770                                  ;	USES	NOTHING					      
 45771                                  ;									      
 45772                                  ;**************************************************************************
 45773                                  
 45774                                  XMMDisableA20:
 45775 0000113D 53                      	push	bx
 45776 0000113E 50                      	push	ax
 45777                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45778 0000113F B406                    	mov	ah,6
 45779 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45780 00001146 58                      	pop	ax
 45781 00001147 5B                      	pop	bx
 45782 00001148 C3                      	retn
 45783                                  
 45784                                  ; The entry point in the BIOS XMS driver is defined here.
 45785                                  
 45786                                  XMMcontrol:
 45787 00001149 00000000                	dd	0
 45788                                  
 45789                                  ;--------------------------------------------------------------------------
 45790                                  ;
 45791                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45792                                  ;									      
 45793                                  ;	This routine is used to query the A20 state in		 	      
 45794                                  ;	the system using XMM calls.					      
 45795                                  ;									      
 45796                                  ;	ENTRY: none		
 45797                                  ;
 45798                                  ;	EXIT : A20 will be ON
 45799                                  ;		
 45800                                  ; 	USES : NONE								      
 45801                                  ;									      
 45802                                  ;--------------------------------------------------------------------------
 45803                                  
 45804                                  ; 19/09/2023
 45805                                  ;LowMemory:	; label dword		; Set equal to 0000:0080
 45806                                  ;	dw	00080h
 45807                                  ;	dw	00000h
 45808                                  ;
 45809                                  ;HighMemory:	; label dword
 45810                                  ;	dw	00090h			; Set equal to FFFF:0090
 45811                                  ;	dw	0FFFFh
 45812                                  
 45813                                  EnsureA20ON:
 45814 0000114D 9C                      	pushf
 45815 0000114E 1E                      	push    ds
 45816 0000114F 06                      	push	es
 45817 00001150 51                      	push	cx
 45818 00001151 56                      	push	si
 45819 00001152 57                      	push	di
 45820                                  
 45821                                  	; 19/09/2023
 45822                                  	;lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45823                                  	;les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45824                                  
 45825 00001153 31FF                    	xor	di,di
 45826 00001155 8EC7                    	mov	es,di
 45827 00001157 4F                      	dec	di
 45828 00001158 BE9000                  	mov	si,90h	; 0FFFFh:0090h	; HighMemory
 45829 0000115B 8EDF                    	mov	ds,di
 45830 0000115D BF8000                  	mov	di,80h ; 0000h:0080h	; LowMemory
 45831                                  	
 45832 00001160 B90400                  	mov	cx,4
 45833 00001163 FC                      	cld
 45834 00001164 F3A7                    	repe    cmpsw
 45835                                  
 45836 00001166 7407                    	jz	short EA20_OFF
 45837                                  EA20_RET:
 45838 00001168 5F                      	pop	di
 45839 00001169 5E                      	pop	si
 45840 0000116A 59                      	pop	cx
 45841 0000116B 07                      	pop	es
 45842 0000116C 1F                      	pop	ds
 45843 0000116D 9D                      	popf
 45844 0000116E C3                      	retn
 45845                                  
 45846                                  EA20_OFF:
 45847                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45848                                  	; NOTE: ints are disabled at this point.
 45849                                  
 45850 0000116F 53                      	push	bx
 45851 00001170 50                      	push	ax
 45852                                  
 45853 00001171 8CD0                    	mov	ax,ss			; save user's stack pointer
 45854 00001173 2EA3[6C10]              	mov	[cs:SS_Save],ax
 45855 00001177 2E8926[6E10]            	mov	[cs:SP_Save],sp
 45856 0000117C 8CC8                    	mov	ax,cs
 45857 0000117E 8ED0                    	mov	ss,ax
 45858 00001180 BC[A007]                	mov	sp,AUXSTACK
 45859                                  					; ss:sp -> DOSDATA:AuxStack
 45860                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45861 00001183 B405                    	mov	ah,5
 45862 00001185 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45863 0000118A 09C0                    	or	ax,ax
 45864 0000118C 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45865                                  
 45866 0000118E 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 45867 00001192 8ED0                    	mov	ss,ax
 45868 00001194 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 45869                                  
 45870 00001199 58                      	pop	ax
 45871 0000119A 5B                      	pop	bx
 45872                                  
 45873 0000119B EBCB                    	jmp	short EA20_RET
 45874                                  
 45875                                  XMMerror:				; M006 - Start
 45876 0000119D B40F                    	mov	ah,0Fh			; get video mode
 45877 0000119F CD10                    	int	10h
 45878 000011A1 3C07                    	cmp	al,7			; Q: are we an MDA
 45879 000011A3 7406                    	je	short XMMcont			; Y: do not change mode
 45880 000011A5 30E4                    	xor	ah,ah ; 0			; set video mode
 45881 000011A7 B002                    	mov	al,02h			; 80 X 25 text
 45882 000011A9 CD10                    	int	10h
 45883                                  XMMcont:
 45884 000011AB B405                    	mov	ah,05h			; set display page
 45885 000011AD 30C0                    	xor	al,al			; page 0
 45886 000011AF CD10                    	int	10h
 45887                                  	
 45888 000011B1 BE[8E12]                	mov	si,XMMERRMSG
 45889 000011B4 0E                      	push	cs
 45890 000011B5 1F                      	pop	ds
 45891 000011B6 FC                      	cld				; clear direction flag
 45892                                  XMMprnt:
 45893 000011B7 AC                      	lodsb
 45894 000011B8 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45895 000011BA 7409                    	jz	short XMMStall		; function 0Eh	
 45896 000011BC B40E                    	mov	ah,0Eh
 45897 000011BE BB0700                  	mov	bx,7
 45898 000011C1 CD10                    	int	10h
 45899 000011C3 EBF2                    	jmp	short XMMprnt
 45900                                  
 45901                                  XMMStall:
 45902 000011C5 FB                      	sti				; allow the user to warm boot
 45903 000011C6 EBFD                    	jmp	short XMMStall		; M006 - End
 45904                                  
 45905                                  ;---------------------------------------------------------------------------
 45906                                  
 45907                                  ; 27/04/2019 - Retro DOS v4.0
 45908                                  
 45909                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45910                                  ALTAH	equ 0Ch
 45911                                  
 45912                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45913                                  ;table was different for this. Segments will be patched in at init time.
 45914                                  
 45915                                  OldInstanceJunk:
 45916 000011C8 7000                    	dw	70h	;segment of BIOS
 45917 000011CA 0000                    	dw	0	;indicate stacks in SYSINIT area
 45918 000011CC 0600                    	dw	6	;5 instance items
 45919                                  
 45920                                  	;dw	0,offset dosdata:contpos, 2
 45921                                  	;dw	0,offset dosdata:bcon, 4
 45922                                  	;dw	0,offset dosdata:carpos,106h
 45923                                  	;dw	0,offset dosdata:charco, 1
 45924                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45925                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45926                                  
 45927 000011CE 0000[2200]0200          	dw	0,CONTPOS,2
 45928 000011D4 0000[3200]0400          	dw	0,BCON,4
 45929 000011DA 0000[F901]0601          	dw	0,CARPOS,106h
 45930 000011E0 0000[0003]0100          	dw	0,CHARCO,1
 45931 000011E6 0000[C00F]2200          	dw	0,exec_init_SP,34
 45932 000011EC 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45933                                  
 45934                                  ;---------------------------------------------------------------------------
 45935                                  
 45936                                  ; M021-
 45937                                  ;
 45938                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45939                                  ; 	takes control of the HMA. When running, this word is a reliable
 45940                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45941                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45942                                  
 45943                                  DosHasHMA:
 45944 000011F2 00                      	db	0
 45945                                  FixExePatch:
 45946 000011F3 0000                    	dw	0		; M012
 45947                                  
 45948                                  ; 28/12/2022 - Retro DOS v4.1
 45949                                  ;RationalPatchPtr:
 45950                                  ;	dw	0		; M012
 45951                                  
 45952                                  ; End M021
 45953                                  
 45954                                  ;---------------------------------------------------------------------------
 45955                                  
 45956                                  ; 28/12/2022 - Retro DOS v4.1
 45957                                  %if 0
 45958                                  
 45959                                  ; M020 Begin
 45960                                  
 45961                                  RatBugCode:	; proc	far
 45962                                  	push	cx
 45963                                  	mov	cx,[10h]
 45964                                  rbc_loop:
 45965                                  	;loop	$
 45966                                  	loop	rbc_loop
 45967                                  	pop	cx
 45968                                  	retf
 45969                                  		
 45970                                  ; M020 End
 45971                                  
 45972                                  %endif
 45973                                  
 45974                                  ;---------------------------------------------------------------------------
 45975                                  	
 45976                                  UmbSave1:
 45977                                  	;db	11 dup (?)	; M023
 45978 000011F5 00<rep Bh>              	times	11 db 0	
 45979                                  
 45980                                  ; DOSDATA:122Ah
 45981                                  
 45982                                  Mark3:	; label byte
 45983                                  
 45984                                  ;IF2
 45985                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45986                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45987                                  ;	ENDIF
 45988                                  ;ENDIF
 45989                                  
 45990                                  ;############################################################################
 45991                                  ;
 45992                                  ; ** HACK FOR DOS 4.0 REDIR **
 45993                                  ;
 45994                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45995                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45996                                  ; COUNTRY_CDPG if it can. 
 45997                                  ;
 45998                                  ; MARK3 SHOULD NOT BE > 122AH 
 45999                                  ;
 46000                                  ; As of 9/6/90, this area is FULL!
 46001                                  ;
 46002                                  ;############################################################################
 46003                                   
 46004                                  	;ORG	0122Ah
 46005                                  
 46006                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 46007                                  
 46008                                  ; The following table is used for DOS 3.3
 46009                                  ;DOS country and code page information is defined here for DOS 3.3.
 46010                                  ;The initial value for ccDosCountry is 1 (USA).
 46011                                  ;The initial value for ccDosCodepage is 850.
 46012                                  
 46013                                  ; country and code page information
 46014                                  ; ---------------------------------------------------------------------------
 46015                                  COUNTRY_CDPG:	; label  byte
 46016 00001200 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 46017 00001208 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 46017 00001211 53595300           
 46018                                  	;db   51 dup (?)
 46019 00001215 00<rep 33h>             	times 51 db 0
 46020                                  ; ------------------------------------------------<MSKK01>-------------------
 46021                                  ;ifdef	DBCS
 46022                                  ;  ifdef JAPAN
 46023                                  ;	dw   932			; system code page id (JAPAN)
 46024                                  ;  endif
 46025                                  ;  ifdef TAIWAN
 46026                                  ;	dw   938			; system code page id (TAIWAN)
 46027                                  ;  endif
 46028                                  ;  ifdef KOREA
 46029                                  ;	dw   934			; system code page id (KOREA IBM)
 46030                                  ;  endif
 46031                                  ;else
 46032 00001248 B501                    	dw   437			; system code page id
 46033                                  ;endif
 46034                                  ; ------------------------------------------------<MSKK01>-------------------
 46035 0000124A 0600                    	dw   6				; number of entries
 46036 0000124C 02                      	db   SetUcase  ; 2		; Ucase type
 46037 0000124D [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 46038 0000124F 0000                    	dw   0				; segment of poiter
 46039 00001251 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 46040 00001252 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 46041 00001254 0000                    	dw   0				; segment of poiter
 46042 00001256 05                      	db   SetFileList ; 5		; valid file chars type
 46043 00001257 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 46044 00001259 0000                    	dw   0				; segment of poiter
 46045 0000125B 06                      	db   SetCollate	; 6		; collate type
 46046 0000125C [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 46047 0000125E 0000                    	dw   0				; segment of poiter
 46048 00001260 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 46049 00001261 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 46050 00001263 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 46051 00001265 01                      	db   SetCountryInfo  ; 1	; country info type
 46052 00001266 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 46053                                  ; ------------------------------------------------<MSKK01>-------------------
 46054                                  ;ifdef	DBCS
 46055                                  ;	...... 
 46056                                  ;else
 46057 00001268 0100                    	dw   1				; USA country id
 46058 0000126A B501                    	dw   437			; USA system code page id
 46059 0000126C 0000                    	dw   0 				; date format
 46060 0000126E 2400000000              	db   '$',0,0,0,0		; currency symbol
 46061 00001273 2C00                    	db   ',',0			; thousand separator
 46062 00001275 2E00                    	db   '.',0			; decimal separator
 46063 00001277 2D00                    	db   '-',0			; date separator
 46064 00001279 3A00                    	db   ':',0			; time separator
 46065 0000127B 00                      	db   0				; currency format flag
 46066 0000127C 02                      	db   2				; # of digits in currency
 46067 0000127D 00                      	db   0 				; time format
 46068 0000127E [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 46069 00001280 0000                    	dw   0				; segment of entry point
 46070 00001282 2C00                    	db   ',',0			; data list separator
 46071 00001284 000000000000000000-     	dw   0,0,0,0,0			; reserved
 46071 0000128D 00                 
 46072                                  ;endif
 46073                                  ; ------------------------------------------------<MSKK01>-------------------
 46074                                  
 46075                                  ; 27/04/2019 - Retro DOS v4.0
 46076                                  
 46077                                  ;include msdos.cl2			; XMMERRMSG
 46078                                  
 46079                                  ; DOSDATA:12B8h (MSDOS 6.22, MSDOS.SYS) ; 17/01/2024
 46080                                  
 46081                                  XMMERRMSG:
 46082 0000128E 0D0A                    	db	0Dh,0Ah
 46083 00001290 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 46083 00001299 617265204572726F72-
 46083 000012A2 0D0A24             
 46084                                  
 46085                                  ; DOSDATA ends
 46086                                  
 46087                                  ; 05/11/2022
 46088                                  ;----------------------------------------------------------------------------
 46089                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 46090                                  ;----------------------------------------------------------------------------
 46091                                  
 46092                                  ; 28/12/2022 - Retro DOS v4.1
 46093                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 46094                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 46095                                  ;----------------------------------------------------------------------------
 46096                                  %if 0
 46097                                  
 46098                                  ;----------------------------------------------------------------------------
 46099                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46100                                  
 46101                                  ;============================================================================
 46102                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 46103                                  ;============================================================================
 46104                                  ; 27/04/2019 - Retro DOS 4.0
 46105                                  
 46106                                  ;DOSDATA Segment
 46107                                  
 46108                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 46109                                  
 46110                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46111                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 46112                                  
 46113                                  ; first and second DOS patches
 46114                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 46115                                  ;
 46116                                  ; Code in disk.asm, 2 locations, one for read, one for write
 46117                                  ;	DVRDLP:
 46118                                  ;	DVWRTLP:
 46119                                  ;
 46120                                  ;
 46121                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 46122                                  ;	lds	si,si+7 				  ; sf_devptr
 46123                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 46124                                  
 46125                                  DOSP1_ID:	db	036h,0C5h,036h
 46126                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46127                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 46128                                  
 46129                                  		db	90h, 90h
 46130                                  
 46131                                  DOSP12_ID:	db	036h,0C5h,036h
 46132                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 46133                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 46134                                  
 46135                                  ; DOSDATA:12E3h
 46136                                  
 46137                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 46138                                  ;
 46139                                  ; Code in disk.asm, 1 location
 46140                                  ;	GETBUF:
 46141                                  ;
 46142                                  ; 051h	push	cx	<- begin special int28 mode
 46143                                  ;	push	es
 46144                                  ;	push	di
 46145                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 46146                                  ;	call	????	; $STD_CON_STRING_INPUT
 46147                                  ;	pop	di
 46148                                  ;	pop	es
 46149                                  ; 059h	pop	cx	<- end special int28 mode
 46150                                  
 46151                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 46152                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 46153                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 46154                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 46155                                  DOSP4_ID:	db	059h			; pop cx
 46156                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 46157                                  	
 46158                                  ; DOSDATA:12EFh
 46159                                  
 46160                                  ; Fifth DOS patch - System call 40h (Write) to console
 46161                                  ;
 46162                                  ; Code in disk.asm, 1 location
 46163                                  ;
 46164                                  ;		push	cx
 46165                                  ;      WRCONLP: lodsb
 46166                                  ;		cmp	al,1Ah
 46167                                  ;		jz	????
 46168                                  ;		call	????	<- "simulate" int28 event
 46169                                  ;		loop	WRCONLP
 46170                                  ;      CONEOF:	pop	ax
 46171                                  
 46172                                  DOSP5_ID:	db	051h			; push cx
 46173                                  		db	0ACh,03Ch,01Ah,074h,005h
 46174                                  		db	0E8h			; call
 46175                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 46176                                  
 46177                                  ; DOSDATA:12F6h
 46178                                  
 46179                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 46180                                  ;
 46181                                  ; Code in disp.asm, 1 location
 46182                                  ;
 46183                                  ;
 46184                                  ;	mov [SaveDS],ds
 46185                                  ;	mov [SaveBX],bx
 46186                                  ;	mov bx,cs
 46187                                  ;	mov ds,bx
 46188                                  ;	inc [indos]
 46189                                  ;	xor ax,ax
 46190                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 46191                                  
 46192                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 46193                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 46194                                  		db	02Eh,089h,01Eh
 46195                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 46196                                  		db	08Ch,0CBh		; mov bx,cs
 46197                                  		db	08Eh,0DBh		; mov ds,bx
 46198                                  		db	0FEh,006h
 46199                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 46200                                  		db	033h,0C0h		; xor ax,ax
 46201                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 46202                                  
 46203                                  ; DOSDATA:130Ah
 46204                                  
 46205                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 46206                                  ;
 46207                                  ; Code in handle.asm, 1 location in routine CheckOwner
 46208                                  ;
 46209                                  ;
 46210                                  ;
 46211                                  ;	push	ax
 46212                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 46213                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 46214                                  ;	pop	ax
 46215                                  ;	jz	????
 46216                                  
 46217                                  DOSP8_ID:	db	050h			; push ax
 46218                                  		db	036h,0A1h
 46219                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 46220                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 46221                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 46222                                  		db	02Fh,058h		; pop  ax
 46223                                  
 46224                                  ; DOSDATA:1314h
 46225                                  
 46226                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 46227                                  ;
 46228                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 46229                                  ;   a yeild when a character is not ready to be read.
 46230                                  ;
 46231                                  ; Code in disk.asm, 3 locations
 46232                                  ;
 46233                                  ;   DVRDRAW:
 46234                                  ;	    PUSH    ES
 46235                                  ;	    POP     DS
 46236                                  ;   ReadRawRetry:				<- Patch 10
 46237                                  ;	    MOV     BX,DI
 46238                                  ;	    XOR     AX,AX			<- Reenter #2
 46239                                  ;	    MOV     DX,AX
 46240                                  ;	    call    SETREAD
 46241                                  ;	    PUSH    DS				<- Reenter #1
 46242                                  ;	    LDS     SI,[THISSFT]
 46243                                  ;	    call    DEVIOCALL
 46244                                  ;	    MOV     DX,DI
 46245                                  ;	    MOV     AH,86H
 46246                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 46247                                  ;	    TEST    DI,STERR
 46248                                  ;	    JZ	    CRDROK
 46249                                  ;	    call    CHARHARD
 46250                                  ;	    MOV     DI,DX
 46251                                  ;	    OR	    AL,AL
 46252                                  ;	    JZ	    CRDROK
 46253                                  ;	    CMP     AL,3
 46254                                  ;	    JZ	    CRDFERR
 46255                                  ;	    POP     DS
 46256                                  ;	    JMP     ReadRawRetry
 46257                                  ;
 46258                                  ;   CRDFERR:
 46259                                  ;	    POP     DI				<- Patch 11
 46260                                  ;   DEVIOFERR:
 46261                                  ;	    LES     DI,[THISSFT]
 46262                                  ;	    jmp     SET_ACC_ERR_DS
 46263                                  ;
 46264                                  ;   CRDROK:
 46265                                  ;	    POP     DI				<- Patch 12
 46266                                  ;	    MOV     DI,DX
 46267                                  ;	    ADD     DI,[CALLSCNT]
 46268                                  ;	    JMP     SHORT ENDRDDEVJ3
 46269                                  
 46270                                  DOSP10_ID:		db	006H,01FH
 46271                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 46272                                  DOSP10_LOC:		db	08BH,0DFH
 46273                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 46274                                  			db	033H,0C0H,08BH,0D0H,0E8H
 46275                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 46276                                  			db	0DFH,00EH
 46277                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 46278                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 46279                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 46280                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 46281                                  			db	009H,003H
 46282                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 46283                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 46284                                  			db	01FH,0EBH,0CFH
 46285                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 46286                                  			db	05FH
 46287                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 46288                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 46289                                  
 46290                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 46291                                  			db	05FH,08BH,0FAH
 46292                                  ; DOSDATA:1353h
 46293                                  
 46294                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 46295                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 46296                                  ;
 46297                                  ;	    Sets focus to current VM so user can see fatal message.
 46298                                  ;
 46299                                  ;
 46300                                  ;	l0: lodsb		<- Setfocus here
 46301                                  ;	    cmp al, '$'
 46302                                  ;	    je l1
 46303                                  ;	    mov bl, 7
 46304                                  ;	    mov ah, 0Eh
 46305                                  ;	    int 10h
 46306                                  ;	    jmp l0
 46307                                  ;	l1: jmp $
 46308                                  
 46309                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 46310                                  		db	03Ch,024h		;     cmp al, '$'
 46311                                  		db	074h,008h		;     je l1
 46312                                  		db	0B3h,007h		;     mov bl, 7
 46313                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 46314                                  		db	0CDh,010h		;     int 10h
 46315                                  		db	0EBh,0F3h		;     jmp l0
 46316                                  		db	0EBh,0FEh		; l1: jmp $
 46317                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 46318                                  
 46319                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46320                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 46321                                  
 46322                                  ; 06/12/2022
 46323                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 46324                                  
 46325                                  ; DOSDATA ends
 46326                                  
 46327                                  ;============================================================================
 46328                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 46329                                  ;============================================================================
 46330                                  ; 27/04/2019 - Retro DOS 4.0
 46331                                  
 46332                                  ;mpatch.asm -- holds data patch location for callouts 
 46333                                  ; -- allocate cluster in rom.asm
 46334                                  ;
 46335                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 46336                                  ; Currently, this location is used only by magicdrv.sys's patch to
 46337                                  ; cluster allocation, however it can be expanded to be used by other
 46338                                  ; patches. This is important since we have an easy-access pointer to
 46339                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 46340                                  ; only patch out a far call/retf, so any space after that could be
 46341                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 46342                                  ; to call out here.
 46343                                  ;
 46344                                  ; Currently, we allocate only the minimum space required for the 6
 46345                                  ; byte magicdrv patch, so if you change the dos data, you may want
 46346                                  ; to reserve space here if your new data will be position dependent
 46347                                  ; and would prohibit growing of this table.
 46348                                  ;       
 46349                                  ;history	-	created 8-7-92 by scottq
 46350                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 46351                                  ;
 46352                                  ;Exported Functions
 46353                                  ;==================
 46354                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 46355                                  
 46356                                  ; DosData Segment
 46357                                  
 46358                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 46359                                  
 46360                                  ; ---------------------------------------------------------------------------
 46361                                  
 46362                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 46363                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 46364                                  ; greater). Added to this file because it needed to be somewhere and is
 46365                                  ; 'patch' related.
 46366                                  
 46367                                  Rational386PatchPtr:
 46368                                  	dw	0	; points to patch routine or RET instr.
 46369                                  ; ---------------------------------------------------------------------------
 46370                                  
 46371                                  MagicPatch:
 46372                                  ;MagicPatch proc far
 46373                                          retf            ;default is to just return to allocate
 46374                                          nop             ;however, this code will be patched
 46375                                          nop             ;by magicdrv.sys to
 46376                                          nop             ; call far ?:?     
 46377                                          nop             ; retf or perhaps just jmp far
 46378                                          nop             ;retf/nop take one byte, so we need six instructions
 46379                                                          ;for 6 byte patch
 46380                                  ;MagicPatch endp
 46381                                  
 46382                                  ; ---------------------------------------------------------------------------
 46383                                  
 46384                                  ;DosData Ends
 46385                                  
 46386                                  ; DOSDATA:136Ah
 46387                                  
 46388                                  ;----------------------------------------------------------------------------
 46389                                  
 46390                                  ;DOSDATALAST SEGMENT
 46391                                  
 46392                                  ; 29/04/2019 - Retro DOS v4.0
 46393                                  
 46394                                  ;----------------------------------------------------------------------------
 46395                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 46396                                  
 46397                                  ;db 0,1,12,64,19,0 ; ! Magic numbers !
 46398                                  
 46399                                  ;align 16
 46400                                  
 46401                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 46402                                  
 46403                                  ;----------------------------------------------------------------------------
 46404                                  
 46405                                  %endif	; 05/11/2022
 46406                                  
 46407                                  ; 05/12/2022
 46408                                  ;MSDAT001E:	; label byte
 46409                                  
 46410                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46411                                  DOSDATAEND equ $
 46412                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 46413                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 46414                                  
 46415                                  ;DOSDATALAST ENDS
 46416                                  
 46417                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 46418                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 46419                                  ;============================================================================
 46420                                  ;	END
 46421                                  ;============================================================================
 46422                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 46423                                  ; -----------------------------
 46424                                  ; MAY 2019, ISTANBUL - TURKIYE.
